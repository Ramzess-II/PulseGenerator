
PulseGeneratorILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  20000000  20000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009910  200001a0  200001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ac6c  20009ab0  20009ab0  00019ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2001471c  2001471c  00024958  2**0
                  CONTENTS
  4 .ARM          00000008  2001471c  2001471c  0002471c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20014724  20014958  00024958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20014724  20014724  00024724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  20014728  20014728  00024728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  2001472c  2001472c  0002472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20014958  20014958  00024958  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014b0c  20014b0c  00024958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024958  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103b1  00000000  00000000  00024988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b25  00000000  00000000  00034d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00037860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018e88  00000000  00000000  00038848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013b92  00000000  00000000  000516d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00090957  00000000  00000000  00065262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000f5bb9  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000e70  00000000  00000000  000f5c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051b8  00000000  00000000  000f6a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001a0 <__do_global_dtors_aux>:
200001a0:	b510      	push	{r4, lr}
200001a2:	4c05      	ldr	r4, [pc, #20]	; (200001b8 <__do_global_dtors_aux+0x18>)
200001a4:	7823      	ldrb	r3, [r4, #0]
200001a6:	b933      	cbnz	r3, 200001b6 <__do_global_dtors_aux+0x16>
200001a8:	4b04      	ldr	r3, [pc, #16]	; (200001bc <__do_global_dtors_aux+0x1c>)
200001aa:	b113      	cbz	r3, 200001b2 <__do_global_dtors_aux+0x12>
200001ac:	4804      	ldr	r0, [pc, #16]	; (200001c0 <__do_global_dtors_aux+0x20>)
200001ae:	f3af 8000 	nop.w
200001b2:	2301      	movs	r3, #1
200001b4:	7023      	strb	r3, [r4, #0]
200001b6:	bd10      	pop	{r4, pc}
200001b8:	20014958 	.word	0x20014958
200001bc:	00000000 	.word	0x00000000
200001c0:	20009a98 	.word	0x20009a98

200001c4 <frame_dummy>:
200001c4:	b508      	push	{r3, lr}
200001c6:	4b03      	ldr	r3, [pc, #12]	; (200001d4 <frame_dummy+0x10>)
200001c8:	b11b      	cbz	r3, 200001d2 <frame_dummy+0xe>
200001ca:	4903      	ldr	r1, [pc, #12]	; (200001d8 <frame_dummy+0x14>)
200001cc:	4803      	ldr	r0, [pc, #12]	; (200001dc <frame_dummy+0x18>)
200001ce:	f3af 8000 	nop.w
200001d2:	bd08      	pop	{r3, pc}
200001d4:	00000000 	.word	0x00000000
200001d8:	2001495c 	.word	0x2001495c
200001dc:	20009a98 	.word	0x20009a98

200001e0 <strlen>:
200001e0:	4603      	mov	r3, r0
200001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
200001e6:	2a00      	cmp	r2, #0
200001e8:	d1fb      	bne.n	200001e2 <strlen+0x2>
200001ea:	1a18      	subs	r0, r3, r0
200001ec:	3801      	subs	r0, #1
200001ee:	4770      	bx	lr

200001f0 <memchr>:
200001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
200001f4:	2a10      	cmp	r2, #16
200001f6:	db2b      	blt.n	20000250 <memchr+0x60>
200001f8:	f010 0f07 	tst.w	r0, #7
200001fc:	d008      	beq.n	20000210 <memchr+0x20>
200001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
20000202:	3a01      	subs	r2, #1
20000204:	428b      	cmp	r3, r1
20000206:	d02d      	beq.n	20000264 <memchr+0x74>
20000208:	f010 0f07 	tst.w	r0, #7
2000020c:	b342      	cbz	r2, 20000260 <memchr+0x70>
2000020e:	d1f6      	bne.n	200001fe <memchr+0xe>
20000210:	b4f0      	push	{r4, r5, r6, r7}
20000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
20000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2000021a:	f022 0407 	bic.w	r4, r2, #7
2000021e:	f07f 0700 	mvns.w	r7, #0
20000222:	2300      	movs	r3, #0
20000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
20000228:	3c08      	subs	r4, #8
2000022a:	ea85 0501 	eor.w	r5, r5, r1
2000022e:	ea86 0601 	eor.w	r6, r6, r1
20000232:	fa85 f547 	uadd8	r5, r5, r7
20000236:	faa3 f587 	sel	r5, r3, r7
2000023a:	fa86 f647 	uadd8	r6, r6, r7
2000023e:	faa5 f687 	sel	r6, r5, r7
20000242:	b98e      	cbnz	r6, 20000268 <memchr+0x78>
20000244:	d1ee      	bne.n	20000224 <memchr+0x34>
20000246:	bcf0      	pop	{r4, r5, r6, r7}
20000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000024c:	f002 0207 	and.w	r2, r2, #7
20000250:	b132      	cbz	r2, 20000260 <memchr+0x70>
20000252:	f810 3b01 	ldrb.w	r3, [r0], #1
20000256:	3a01      	subs	r2, #1
20000258:	ea83 0301 	eor.w	r3, r3, r1
2000025c:	b113      	cbz	r3, 20000264 <memchr+0x74>
2000025e:	d1f8      	bne.n	20000252 <memchr+0x62>
20000260:	2000      	movs	r0, #0
20000262:	4770      	bx	lr
20000264:	3801      	subs	r0, #1
20000266:	4770      	bx	lr
20000268:	2d00      	cmp	r5, #0
2000026a:	bf06      	itte	eq
2000026c:	4635      	moveq	r5, r6
2000026e:	3803      	subeq	r0, #3
20000270:	3807      	subne	r0, #7
20000272:	f015 0f01 	tst.w	r5, #1
20000276:	d107      	bne.n	20000288 <memchr+0x98>
20000278:	3001      	adds	r0, #1
2000027a:	f415 7f80 	tst.w	r5, #256	; 0x100
2000027e:	bf02      	ittt	eq
20000280:	3001      	addeq	r0, #1
20000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
20000286:	3001      	addeq	r0, #1
20000288:	bcf0      	pop	{r4, r5, r6, r7}
2000028a:	3801      	subs	r0, #1
2000028c:	4770      	bx	lr
2000028e:	bf00      	nop

20000290 <__aeabi_drsub>:
20000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20000294:	e002      	b.n	2000029c <__adddf3>
20000296:	bf00      	nop

20000298 <__aeabi_dsub>:
20000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

2000029c <__adddf3>:
2000029c:	b530      	push	{r4, r5, lr}
2000029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
200002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
200002a6:	ea94 0f05 	teq	r4, r5
200002aa:	bf08      	it	eq
200002ac:	ea90 0f02 	teqeq	r0, r2
200002b0:	bf1f      	itttt	ne
200002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
200002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
200002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
200002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
200002c2:	f000 80e2 	beq.w	2000048a <__adddf3+0x1ee>
200002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
200002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
200002ce:	bfb8      	it	lt
200002d0:	426d      	neglt	r5, r5
200002d2:	dd0c      	ble.n	200002ee <__adddf3+0x52>
200002d4:	442c      	add	r4, r5
200002d6:	ea80 0202 	eor.w	r2, r0, r2
200002da:	ea81 0303 	eor.w	r3, r1, r3
200002de:	ea82 0000 	eor.w	r0, r2, r0
200002e2:	ea83 0101 	eor.w	r1, r3, r1
200002e6:	ea80 0202 	eor.w	r2, r0, r2
200002ea:	ea81 0303 	eor.w	r3, r1, r3
200002ee:	2d36      	cmp	r5, #54	; 0x36
200002f0:	bf88      	it	hi
200002f2:	bd30      	pophi	{r4, r5, pc}
200002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
200002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
200002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
20000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
20000304:	d002      	beq.n	2000030c <__adddf3+0x70>
20000306:	4240      	negs	r0, r0
20000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2000030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
20000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
20000318:	d002      	beq.n	20000320 <__adddf3+0x84>
2000031a:	4252      	negs	r2, r2
2000031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20000320:	ea94 0f05 	teq	r4, r5
20000324:	f000 80a7 	beq.w	20000476 <__adddf3+0x1da>
20000328:	f1a4 0401 	sub.w	r4, r4, #1
2000032c:	f1d5 0e20 	rsbs	lr, r5, #32
20000330:	db0d      	blt.n	2000034e <__adddf3+0xb2>
20000332:	fa02 fc0e 	lsl.w	ip, r2, lr
20000336:	fa22 f205 	lsr.w	r2, r2, r5
2000033a:	1880      	adds	r0, r0, r2
2000033c:	f141 0100 	adc.w	r1, r1, #0
20000340:	fa03 f20e 	lsl.w	r2, r3, lr
20000344:	1880      	adds	r0, r0, r2
20000346:	fa43 f305 	asr.w	r3, r3, r5
2000034a:	4159      	adcs	r1, r3
2000034c:	e00e      	b.n	2000036c <__adddf3+0xd0>
2000034e:	f1a5 0520 	sub.w	r5, r5, #32
20000352:	f10e 0e20 	add.w	lr, lr, #32
20000356:	2a01      	cmp	r2, #1
20000358:	fa03 fc0e 	lsl.w	ip, r3, lr
2000035c:	bf28      	it	cs
2000035e:	f04c 0c02 	orrcs.w	ip, ip, #2
20000362:	fa43 f305 	asr.w	r3, r3, r5
20000366:	18c0      	adds	r0, r0, r3
20000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
2000036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20000370:	d507      	bpl.n	20000382 <__adddf3+0xe6>
20000372:	f04f 0e00 	mov.w	lr, #0
20000376:	f1dc 0c00 	rsbs	ip, ip, #0
2000037a:	eb7e 0000 	sbcs.w	r0, lr, r0
2000037e:	eb6e 0101 	sbc.w	r1, lr, r1
20000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
20000386:	d31b      	bcc.n	200003c0 <__adddf3+0x124>
20000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2000038c:	d30c      	bcc.n	200003a8 <__adddf3+0x10c>
2000038e:	0849      	lsrs	r1, r1, #1
20000390:	ea5f 0030 	movs.w	r0, r0, rrx
20000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
20000398:	f104 0401 	add.w	r4, r4, #1
2000039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
200003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
200003a4:	f080 809a 	bcs.w	200004dc <__adddf3+0x240>
200003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
200003ac:	bf08      	it	eq
200003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
200003b2:	f150 0000 	adcs.w	r0, r0, #0
200003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
200003ba:	ea41 0105 	orr.w	r1, r1, r5
200003be:	bd30      	pop	{r4, r5, pc}
200003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
200003c4:	4140      	adcs	r0, r0
200003c6:	eb41 0101 	adc.w	r1, r1, r1
200003ca:	3c01      	subs	r4, #1
200003cc:	bf28      	it	cs
200003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
200003d2:	d2e9      	bcs.n	200003a8 <__adddf3+0x10c>
200003d4:	f091 0f00 	teq	r1, #0
200003d8:	bf04      	itt	eq
200003da:	4601      	moveq	r1, r0
200003dc:	2000      	moveq	r0, #0
200003de:	fab1 f381 	clz	r3, r1
200003e2:	bf08      	it	eq
200003e4:	3320      	addeq	r3, #32
200003e6:	f1a3 030b 	sub.w	r3, r3, #11
200003ea:	f1b3 0220 	subs.w	r2, r3, #32
200003ee:	da0c      	bge.n	2000040a <__adddf3+0x16e>
200003f0:	320c      	adds	r2, #12
200003f2:	dd08      	ble.n	20000406 <__adddf3+0x16a>
200003f4:	f102 0c14 	add.w	ip, r2, #20
200003f8:	f1c2 020c 	rsb	r2, r2, #12
200003fc:	fa01 f00c 	lsl.w	r0, r1, ip
20000400:	fa21 f102 	lsr.w	r1, r1, r2
20000404:	e00c      	b.n	20000420 <__adddf3+0x184>
20000406:	f102 0214 	add.w	r2, r2, #20
2000040a:	bfd8      	it	le
2000040c:	f1c2 0c20 	rsble	ip, r2, #32
20000410:	fa01 f102 	lsl.w	r1, r1, r2
20000414:	fa20 fc0c 	lsr.w	ip, r0, ip
20000418:	bfdc      	itt	le
2000041a:	ea41 010c 	orrle.w	r1, r1, ip
2000041e:	4090      	lslle	r0, r2
20000420:	1ae4      	subs	r4, r4, r3
20000422:	bfa2      	ittt	ge
20000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
20000428:	4329      	orrge	r1, r5
2000042a:	bd30      	popge	{r4, r5, pc}
2000042c:	ea6f 0404 	mvn.w	r4, r4
20000430:	3c1f      	subs	r4, #31
20000432:	da1c      	bge.n	2000046e <__adddf3+0x1d2>
20000434:	340c      	adds	r4, #12
20000436:	dc0e      	bgt.n	20000456 <__adddf3+0x1ba>
20000438:	f104 0414 	add.w	r4, r4, #20
2000043c:	f1c4 0220 	rsb	r2, r4, #32
20000440:	fa20 f004 	lsr.w	r0, r0, r4
20000444:	fa01 f302 	lsl.w	r3, r1, r2
20000448:	ea40 0003 	orr.w	r0, r0, r3
2000044c:	fa21 f304 	lsr.w	r3, r1, r4
20000450:	ea45 0103 	orr.w	r1, r5, r3
20000454:	bd30      	pop	{r4, r5, pc}
20000456:	f1c4 040c 	rsb	r4, r4, #12
2000045a:	f1c4 0220 	rsb	r2, r4, #32
2000045e:	fa20 f002 	lsr.w	r0, r0, r2
20000462:	fa01 f304 	lsl.w	r3, r1, r4
20000466:	ea40 0003 	orr.w	r0, r0, r3
2000046a:	4629      	mov	r1, r5
2000046c:	bd30      	pop	{r4, r5, pc}
2000046e:	fa21 f004 	lsr.w	r0, r1, r4
20000472:	4629      	mov	r1, r5
20000474:	bd30      	pop	{r4, r5, pc}
20000476:	f094 0f00 	teq	r4, #0
2000047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
2000047e:	bf06      	itte	eq
20000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
20000484:	3401      	addeq	r4, #1
20000486:	3d01      	subne	r5, #1
20000488:	e74e      	b.n	20000328 <__adddf3+0x8c>
2000048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
2000048e:	bf18      	it	ne
20000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20000494:	d029      	beq.n	200004ea <__adddf3+0x24e>
20000496:	ea94 0f05 	teq	r4, r5
2000049a:	bf08      	it	eq
2000049c:	ea90 0f02 	teqeq	r0, r2
200004a0:	d005      	beq.n	200004ae <__adddf3+0x212>
200004a2:	ea54 0c00 	orrs.w	ip, r4, r0
200004a6:	bf04      	itt	eq
200004a8:	4619      	moveq	r1, r3
200004aa:	4610      	moveq	r0, r2
200004ac:	bd30      	pop	{r4, r5, pc}
200004ae:	ea91 0f03 	teq	r1, r3
200004b2:	bf1e      	ittt	ne
200004b4:	2100      	movne	r1, #0
200004b6:	2000      	movne	r0, #0
200004b8:	bd30      	popne	{r4, r5, pc}
200004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
200004be:	d105      	bne.n	200004cc <__adddf3+0x230>
200004c0:	0040      	lsls	r0, r0, #1
200004c2:	4149      	adcs	r1, r1
200004c4:	bf28      	it	cs
200004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
200004ca:	bd30      	pop	{r4, r5, pc}
200004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
200004d0:	bf3c      	itt	cc
200004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
200004d6:	bd30      	popcc	{r4, r5, pc}
200004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
200004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
200004e4:	f04f 0000 	mov.w	r0, #0
200004e8:	bd30      	pop	{r4, r5, pc}
200004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
200004ee:	bf1a      	itte	ne
200004f0:	4619      	movne	r1, r3
200004f2:	4610      	movne	r0, r2
200004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
200004f8:	bf1c      	itt	ne
200004fa:	460b      	movne	r3, r1
200004fc:	4602      	movne	r2, r0
200004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20000502:	bf06      	itte	eq
20000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
20000508:	ea91 0f03 	teqeq	r1, r3
2000050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20000510:	bd30      	pop	{r4, r5, pc}
20000512:	bf00      	nop

20000514 <__aeabi_ui2d>:
20000514:	f090 0f00 	teq	r0, #0
20000518:	bf04      	itt	eq
2000051a:	2100      	moveq	r1, #0
2000051c:	4770      	bxeq	lr
2000051e:	b530      	push	{r4, r5, lr}
20000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
20000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
20000528:	f04f 0500 	mov.w	r5, #0
2000052c:	f04f 0100 	mov.w	r1, #0
20000530:	e750      	b.n	200003d4 <__adddf3+0x138>
20000532:	bf00      	nop

20000534 <__aeabi_i2d>:
20000534:	f090 0f00 	teq	r0, #0
20000538:	bf04      	itt	eq
2000053a:	2100      	moveq	r1, #0
2000053c:	4770      	bxeq	lr
2000053e:	b530      	push	{r4, r5, lr}
20000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
20000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
20000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
2000054c:	bf48      	it	mi
2000054e:	4240      	negmi	r0, r0
20000550:	f04f 0100 	mov.w	r1, #0
20000554:	e73e      	b.n	200003d4 <__adddf3+0x138>
20000556:	bf00      	nop

20000558 <__aeabi_f2d>:
20000558:	0042      	lsls	r2, r0, #1
2000055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
2000055e:	ea4f 0131 	mov.w	r1, r1, rrx
20000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
20000566:	bf1f      	itttt	ne
20000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
2000056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
20000574:	4770      	bxne	lr
20000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
2000057a:	bf08      	it	eq
2000057c:	4770      	bxeq	lr
2000057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
20000582:	bf04      	itt	eq
20000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
20000588:	4770      	bxeq	lr
2000058a:	b530      	push	{r4, r5, lr}
2000058c:	f44f 7460 	mov.w	r4, #896	; 0x380
20000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20000598:	e71c      	b.n	200003d4 <__adddf3+0x138>
2000059a:	bf00      	nop

2000059c <__aeabi_ul2d>:
2000059c:	ea50 0201 	orrs.w	r2, r0, r1
200005a0:	bf08      	it	eq
200005a2:	4770      	bxeq	lr
200005a4:	b530      	push	{r4, r5, lr}
200005a6:	f04f 0500 	mov.w	r5, #0
200005aa:	e00a      	b.n	200005c2 <__aeabi_l2d+0x16>

200005ac <__aeabi_l2d>:
200005ac:	ea50 0201 	orrs.w	r2, r0, r1
200005b0:	bf08      	it	eq
200005b2:	4770      	bxeq	lr
200005b4:	b530      	push	{r4, r5, lr}
200005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
200005ba:	d502      	bpl.n	200005c2 <__aeabi_l2d+0x16>
200005bc:	4240      	negs	r0, r0
200005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
200005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
200005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
200005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
200005ce:	f43f aed8 	beq.w	20000382 <__adddf3+0xe6>
200005d2:	f04f 0203 	mov.w	r2, #3
200005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
200005da:	bf18      	it	ne
200005dc:	3203      	addne	r2, #3
200005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
200005e2:	bf18      	it	ne
200005e4:	3203      	addne	r2, #3
200005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
200005ea:	f1c2 0320 	rsb	r3, r2, #32
200005ee:	fa00 fc03 	lsl.w	ip, r0, r3
200005f2:	fa20 f002 	lsr.w	r0, r0, r2
200005f6:	fa01 fe03 	lsl.w	lr, r1, r3
200005fa:	ea40 000e 	orr.w	r0, r0, lr
200005fe:	fa21 f102 	lsr.w	r1, r1, r2
20000602:	4414      	add	r4, r2
20000604:	e6bd      	b.n	20000382 <__adddf3+0xe6>
20000606:	bf00      	nop

20000608 <__aeabi_dmul>:
20000608:	b570      	push	{r4, r5, r6, lr}
2000060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
2000060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20000616:	bf1d      	ittte	ne
20000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
2000061c:	ea94 0f0c 	teqne	r4, ip
20000620:	ea95 0f0c 	teqne	r5, ip
20000624:	f000 f8de 	bleq	200007e4 <__aeabi_dmul+0x1dc>
20000628:	442c      	add	r4, r5
2000062a:	ea81 0603 	eor.w	r6, r1, r3
2000062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
20000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
20000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
2000063a:	bf18      	it	ne
2000063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
20000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20000648:	d038      	beq.n	200006bc <__aeabi_dmul+0xb4>
2000064a:	fba0 ce02 	umull	ip, lr, r0, r2
2000064e:	f04f 0500 	mov.w	r5, #0
20000652:	fbe1 e502 	umlal	lr, r5, r1, r2
20000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
2000065a:	fbe0 e503 	umlal	lr, r5, r0, r3
2000065e:	f04f 0600 	mov.w	r6, #0
20000662:	fbe1 5603 	umlal	r5, r6, r1, r3
20000666:	f09c 0f00 	teq	ip, #0
2000066a:	bf18      	it	ne
2000066c:	f04e 0e01 	orrne.w	lr, lr, #1
20000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
20000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
20000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
2000067c:	d204      	bcs.n	20000688 <__aeabi_dmul+0x80>
2000067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
20000682:	416d      	adcs	r5, r5
20000684:	eb46 0606 	adc.w	r6, r6, r6
20000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
2000068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
20000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
20000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
20000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
2000069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
200006a0:	bf88      	it	hi
200006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
200006a6:	d81e      	bhi.n	200006e6 <__aeabi_dmul+0xde>
200006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
200006ac:	bf08      	it	eq
200006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
200006b2:	f150 0000 	adcs.w	r0, r0, #0
200006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
200006ba:	bd70      	pop	{r4, r5, r6, pc}
200006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
200006c0:	ea46 0101 	orr.w	r1, r6, r1
200006c4:	ea40 0002 	orr.w	r0, r0, r2
200006c8:	ea81 0103 	eor.w	r1, r1, r3
200006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
200006d0:	bfc2      	ittt	gt
200006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
200006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
200006da:	bd70      	popgt	{r4, r5, r6, pc}
200006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
200006e0:	f04f 0e00 	mov.w	lr, #0
200006e4:	3c01      	subs	r4, #1
200006e6:	f300 80ab 	bgt.w	20000840 <__aeabi_dmul+0x238>
200006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
200006ee:	bfde      	ittt	le
200006f0:	2000      	movle	r0, #0
200006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
200006f6:	bd70      	pople	{r4, r5, r6, pc}
200006f8:	f1c4 0400 	rsb	r4, r4, #0
200006fc:	3c20      	subs	r4, #32
200006fe:	da35      	bge.n	2000076c <__aeabi_dmul+0x164>
20000700:	340c      	adds	r4, #12
20000702:	dc1b      	bgt.n	2000073c <__aeabi_dmul+0x134>
20000704:	f104 0414 	add.w	r4, r4, #20
20000708:	f1c4 0520 	rsb	r5, r4, #32
2000070c:	fa00 f305 	lsl.w	r3, r0, r5
20000710:	fa20 f004 	lsr.w	r0, r0, r4
20000714:	fa01 f205 	lsl.w	r2, r1, r5
20000718:	ea40 0002 	orr.w	r0, r0, r2
2000071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
20000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20000728:	fa21 f604 	lsr.w	r6, r1, r4
2000072c:	eb42 0106 	adc.w	r1, r2, r6
20000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20000734:	bf08      	it	eq
20000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
2000073a:	bd70      	pop	{r4, r5, r6, pc}
2000073c:	f1c4 040c 	rsb	r4, r4, #12
20000740:	f1c4 0520 	rsb	r5, r4, #32
20000744:	fa00 f304 	lsl.w	r3, r0, r4
20000748:	fa20 f005 	lsr.w	r0, r0, r5
2000074c:	fa01 f204 	lsl.w	r2, r1, r4
20000750:	ea40 0002 	orr.w	r0, r0, r2
20000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
2000075c:	f141 0100 	adc.w	r1, r1, #0
20000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20000764:	bf08      	it	eq
20000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
2000076a:	bd70      	pop	{r4, r5, r6, pc}
2000076c:	f1c4 0520 	rsb	r5, r4, #32
20000770:	fa00 f205 	lsl.w	r2, r0, r5
20000774:	ea4e 0e02 	orr.w	lr, lr, r2
20000778:	fa20 f304 	lsr.w	r3, r0, r4
2000077c:	fa01 f205 	lsl.w	r2, r1, r5
20000780:	ea43 0302 	orr.w	r3, r3, r2
20000784:	fa21 f004 	lsr.w	r0, r1, r4
20000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
2000078c:	fa21 f204 	lsr.w	r2, r1, r4
20000790:	ea20 0002 	bic.w	r0, r0, r2
20000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
20000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
2000079c:	bf08      	it	eq
2000079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200007a2:	bd70      	pop	{r4, r5, r6, pc}
200007a4:	f094 0f00 	teq	r4, #0
200007a8:	d10f      	bne.n	200007ca <__aeabi_dmul+0x1c2>
200007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
200007ae:	0040      	lsls	r0, r0, #1
200007b0:	eb41 0101 	adc.w	r1, r1, r1
200007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
200007b8:	bf08      	it	eq
200007ba:	3c01      	subeq	r4, #1
200007bc:	d0f7      	beq.n	200007ae <__aeabi_dmul+0x1a6>
200007be:	ea41 0106 	orr.w	r1, r1, r6
200007c2:	f095 0f00 	teq	r5, #0
200007c6:	bf18      	it	ne
200007c8:	4770      	bxne	lr
200007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
200007ce:	0052      	lsls	r2, r2, #1
200007d0:	eb43 0303 	adc.w	r3, r3, r3
200007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
200007d8:	bf08      	it	eq
200007da:	3d01      	subeq	r5, #1
200007dc:	d0f7      	beq.n	200007ce <__aeabi_dmul+0x1c6>
200007de:	ea43 0306 	orr.w	r3, r3, r6
200007e2:	4770      	bx	lr
200007e4:	ea94 0f0c 	teq	r4, ip
200007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
200007ec:	bf18      	it	ne
200007ee:	ea95 0f0c 	teqne	r5, ip
200007f2:	d00c      	beq.n	2000080e <__aeabi_dmul+0x206>
200007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200007f8:	bf18      	it	ne
200007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200007fe:	d1d1      	bne.n	200007a4 <__aeabi_dmul+0x19c>
20000800:	ea81 0103 	eor.w	r1, r1, r3
20000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20000808:	f04f 0000 	mov.w	r0, #0
2000080c:	bd70      	pop	{r4, r5, r6, pc}
2000080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20000812:	bf06      	itte	eq
20000814:	4610      	moveq	r0, r2
20000816:	4619      	moveq	r1, r3
20000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
2000081c:	d019      	beq.n	20000852 <__aeabi_dmul+0x24a>
2000081e:	ea94 0f0c 	teq	r4, ip
20000822:	d102      	bne.n	2000082a <__aeabi_dmul+0x222>
20000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
20000828:	d113      	bne.n	20000852 <__aeabi_dmul+0x24a>
2000082a:	ea95 0f0c 	teq	r5, ip
2000082e:	d105      	bne.n	2000083c <__aeabi_dmul+0x234>
20000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
20000834:	bf1c      	itt	ne
20000836:	4610      	movne	r0, r2
20000838:	4619      	movne	r1, r3
2000083a:	d10a      	bne.n	20000852 <__aeabi_dmul+0x24a>
2000083c:	ea81 0103 	eor.w	r1, r1, r3
20000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
2000084c:	f04f 0000 	mov.w	r0, #0
20000850:	bd70      	pop	{r4, r5, r6, pc}
20000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
2000085a:	bd70      	pop	{r4, r5, r6, pc}

2000085c <__aeabi_ddiv>:
2000085c:	b570      	push	{r4, r5, r6, lr}
2000085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
20000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
2000086a:	bf1d      	ittte	ne
2000086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20000870:	ea94 0f0c 	teqne	r4, ip
20000874:	ea95 0f0c 	teqne	r5, ip
20000878:	f000 f8a7 	bleq	200009ca <__aeabi_ddiv+0x16e>
2000087c:	eba4 0405 	sub.w	r4, r4, r5
20000880:	ea81 0e03 	eor.w	lr, r1, r3
20000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
2000088c:	f000 8088 	beq.w	200009a0 <__aeabi_ddiv+0x144>
20000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
20000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
20000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
2000089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
200008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
200008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
200008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
200008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
200008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
200008b4:	429d      	cmp	r5, r3
200008b6:	bf08      	it	eq
200008b8:	4296      	cmpeq	r6, r2
200008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
200008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
200008c2:	d202      	bcs.n	200008ca <__aeabi_ddiv+0x6e>
200008c4:	085b      	lsrs	r3, r3, #1
200008c6:	ea4f 0232 	mov.w	r2, r2, rrx
200008ca:	1ab6      	subs	r6, r6, r2
200008cc:	eb65 0503 	sbc.w	r5, r5, r3
200008d0:	085b      	lsrs	r3, r3, #1
200008d2:	ea4f 0232 	mov.w	r2, r2, rrx
200008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
200008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
200008de:	ebb6 0e02 	subs.w	lr, r6, r2
200008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
200008e6:	bf22      	ittt	cs
200008e8:	1ab6      	subcs	r6, r6, r2
200008ea:	4675      	movcs	r5, lr
200008ec:	ea40 000c 	orrcs.w	r0, r0, ip
200008f0:	085b      	lsrs	r3, r3, #1
200008f2:	ea4f 0232 	mov.w	r2, r2, rrx
200008f6:	ebb6 0e02 	subs.w	lr, r6, r2
200008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
200008fe:	bf22      	ittt	cs
20000900:	1ab6      	subcs	r6, r6, r2
20000902:	4675      	movcs	r5, lr
20000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20000908:	085b      	lsrs	r3, r3, #1
2000090a:	ea4f 0232 	mov.w	r2, r2, rrx
2000090e:	ebb6 0e02 	subs.w	lr, r6, r2
20000912:	eb75 0e03 	sbcs.w	lr, r5, r3
20000916:	bf22      	ittt	cs
20000918:	1ab6      	subcs	r6, r6, r2
2000091a:	4675      	movcs	r5, lr
2000091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20000920:	085b      	lsrs	r3, r3, #1
20000922:	ea4f 0232 	mov.w	r2, r2, rrx
20000926:	ebb6 0e02 	subs.w	lr, r6, r2
2000092a:	eb75 0e03 	sbcs.w	lr, r5, r3
2000092e:	bf22      	ittt	cs
20000930:	1ab6      	subcs	r6, r6, r2
20000932:	4675      	movcs	r5, lr
20000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20000938:	ea55 0e06 	orrs.w	lr, r5, r6
2000093c:	d018      	beq.n	20000970 <__aeabi_ddiv+0x114>
2000093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
20000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
20000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
2000094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
20000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
2000095a:	d1c0      	bne.n	200008de <__aeabi_ddiv+0x82>
2000095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20000960:	d10b      	bne.n	2000097a <__aeabi_ddiv+0x11e>
20000962:	ea41 0100 	orr.w	r1, r1, r0
20000966:	f04f 0000 	mov.w	r0, #0
2000096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
2000096e:	e7b6      	b.n	200008de <__aeabi_ddiv+0x82>
20000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20000974:	bf04      	itt	eq
20000976:	4301      	orreq	r1, r0
20000978:	2000      	moveq	r0, #0
2000097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
2000097e:	bf88      	it	hi
20000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20000984:	f63f aeaf 	bhi.w	200006e6 <__aeabi_dmul+0xde>
20000988:	ebb5 0c03 	subs.w	ip, r5, r3
2000098c:	bf04      	itt	eq
2000098e:	ebb6 0c02 	subseq.w	ip, r6, r2
20000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20000996:	f150 0000 	adcs.w	r0, r0, #0
2000099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000099e:	bd70      	pop	{r4, r5, r6, pc}
200009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
200009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
200009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
200009ac:	bfc2      	ittt	gt
200009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
200009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
200009b6:	bd70      	popgt	{r4, r5, r6, pc}
200009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
200009bc:	f04f 0e00 	mov.w	lr, #0
200009c0:	3c01      	subs	r4, #1
200009c2:	e690      	b.n	200006e6 <__aeabi_dmul+0xde>
200009c4:	ea45 0e06 	orr.w	lr, r5, r6
200009c8:	e68d      	b.n	200006e6 <__aeabi_dmul+0xde>
200009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
200009ce:	ea94 0f0c 	teq	r4, ip
200009d2:	bf08      	it	eq
200009d4:	ea95 0f0c 	teqeq	r5, ip
200009d8:	f43f af3b 	beq.w	20000852 <__aeabi_dmul+0x24a>
200009dc:	ea94 0f0c 	teq	r4, ip
200009e0:	d10a      	bne.n	200009f8 <__aeabi_ddiv+0x19c>
200009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
200009e6:	f47f af34 	bne.w	20000852 <__aeabi_dmul+0x24a>
200009ea:	ea95 0f0c 	teq	r5, ip
200009ee:	f47f af25 	bne.w	2000083c <__aeabi_dmul+0x234>
200009f2:	4610      	mov	r0, r2
200009f4:	4619      	mov	r1, r3
200009f6:	e72c      	b.n	20000852 <__aeabi_dmul+0x24a>
200009f8:	ea95 0f0c 	teq	r5, ip
200009fc:	d106      	bne.n	20000a0c <__aeabi_ddiv+0x1b0>
200009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20000a02:	f43f aefd 	beq.w	20000800 <__aeabi_dmul+0x1f8>
20000a06:	4610      	mov	r0, r2
20000a08:	4619      	mov	r1, r3
20000a0a:	e722      	b.n	20000852 <__aeabi_dmul+0x24a>
20000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20000a10:	bf18      	it	ne
20000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20000a16:	f47f aec5 	bne.w	200007a4 <__aeabi_dmul+0x19c>
20000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
20000a1e:	f47f af0d 	bne.w	2000083c <__aeabi_dmul+0x234>
20000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
20000a26:	f47f aeeb 	bne.w	20000800 <__aeabi_dmul+0x1f8>
20000a2a:	e712      	b.n	20000852 <__aeabi_dmul+0x24a>

20000a2c <__gedf2>:
20000a2c:	f04f 3cff 	mov.w	ip, #4294967295
20000a30:	e006      	b.n	20000a40 <__cmpdf2+0x4>
20000a32:	bf00      	nop

20000a34 <__ledf2>:
20000a34:	f04f 0c01 	mov.w	ip, #1
20000a38:	e002      	b.n	20000a40 <__cmpdf2+0x4>
20000a3a:	bf00      	nop

20000a3c <__cmpdf2>:
20000a3c:	f04f 0c01 	mov.w	ip, #1
20000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
20000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
20000a50:	bf18      	it	ne
20000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
20000a56:	d01b      	beq.n	20000a90 <__cmpdf2+0x54>
20000a58:	b001      	add	sp, #4
20000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
20000a5e:	bf0c      	ite	eq
20000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
20000a64:	ea91 0f03 	teqne	r1, r3
20000a68:	bf02      	ittt	eq
20000a6a:	ea90 0f02 	teqeq	r0, r2
20000a6e:	2000      	moveq	r0, #0
20000a70:	4770      	bxeq	lr
20000a72:	f110 0f00 	cmn.w	r0, #0
20000a76:	ea91 0f03 	teq	r1, r3
20000a7a:	bf58      	it	pl
20000a7c:	4299      	cmppl	r1, r3
20000a7e:	bf08      	it	eq
20000a80:	4290      	cmpeq	r0, r2
20000a82:	bf2c      	ite	cs
20000a84:	17d8      	asrcs	r0, r3, #31
20000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
20000a8a:	f040 0001 	orr.w	r0, r0, #1
20000a8e:	4770      	bx	lr
20000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20000a98:	d102      	bne.n	20000aa0 <__cmpdf2+0x64>
20000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
20000a9e:	d107      	bne.n	20000ab0 <__cmpdf2+0x74>
20000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
20000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20000aa8:	d1d6      	bne.n	20000a58 <__cmpdf2+0x1c>
20000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
20000aae:	d0d3      	beq.n	20000a58 <__cmpdf2+0x1c>
20000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
20000ab4:	4770      	bx	lr
20000ab6:	bf00      	nop

20000ab8 <__aeabi_cdrcmple>:
20000ab8:	4684      	mov	ip, r0
20000aba:	4610      	mov	r0, r2
20000abc:	4662      	mov	r2, ip
20000abe:	468c      	mov	ip, r1
20000ac0:	4619      	mov	r1, r3
20000ac2:	4663      	mov	r3, ip
20000ac4:	e000      	b.n	20000ac8 <__aeabi_cdcmpeq>
20000ac6:	bf00      	nop

20000ac8 <__aeabi_cdcmpeq>:
20000ac8:	b501      	push	{r0, lr}
20000aca:	f7ff ffb7 	bl	20000a3c <__cmpdf2>
20000ace:	2800      	cmp	r0, #0
20000ad0:	bf48      	it	mi
20000ad2:	f110 0f00 	cmnmi.w	r0, #0
20000ad6:	bd01      	pop	{r0, pc}

20000ad8 <__aeabi_dcmpeq>:
20000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
20000adc:	f7ff fff4 	bl	20000ac8 <__aeabi_cdcmpeq>
20000ae0:	bf0c      	ite	eq
20000ae2:	2001      	moveq	r0, #1
20000ae4:	2000      	movne	r0, #0
20000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
20000aea:	bf00      	nop

20000aec <__aeabi_dcmplt>:
20000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
20000af0:	f7ff ffea 	bl	20000ac8 <__aeabi_cdcmpeq>
20000af4:	bf34      	ite	cc
20000af6:	2001      	movcc	r0, #1
20000af8:	2000      	movcs	r0, #0
20000afa:	f85d fb08 	ldr.w	pc, [sp], #8
20000afe:	bf00      	nop

20000b00 <__aeabi_dcmple>:
20000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
20000b04:	f7ff ffe0 	bl	20000ac8 <__aeabi_cdcmpeq>
20000b08:	bf94      	ite	ls
20000b0a:	2001      	movls	r0, #1
20000b0c:	2000      	movhi	r0, #0
20000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
20000b12:	bf00      	nop

20000b14 <__aeabi_dcmpge>:
20000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
20000b18:	f7ff ffce 	bl	20000ab8 <__aeabi_cdrcmple>
20000b1c:	bf94      	ite	ls
20000b1e:	2001      	movls	r0, #1
20000b20:	2000      	movhi	r0, #0
20000b22:	f85d fb08 	ldr.w	pc, [sp], #8
20000b26:	bf00      	nop

20000b28 <__aeabi_dcmpgt>:
20000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
20000b2c:	f7ff ffc4 	bl	20000ab8 <__aeabi_cdrcmple>
20000b30:	bf34      	ite	cc
20000b32:	2001      	movcc	r0, #1
20000b34:	2000      	movcs	r0, #0
20000b36:	f85d fb08 	ldr.w	pc, [sp], #8
20000b3a:	bf00      	nop

20000b3c <__aeabi_dcmpun>:
20000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20000b44:	d102      	bne.n	20000b4c <__aeabi_dcmpun+0x10>
20000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
20000b4a:	d10a      	bne.n	20000b62 <__aeabi_dcmpun+0x26>
20000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
20000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20000b54:	d102      	bne.n	20000b5c <__aeabi_dcmpun+0x20>
20000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
20000b5a:	d102      	bne.n	20000b62 <__aeabi_dcmpun+0x26>
20000b5c:	f04f 0000 	mov.w	r0, #0
20000b60:	4770      	bx	lr
20000b62:	f04f 0001 	mov.w	r0, #1
20000b66:	4770      	bx	lr

20000b68 <__aeabi_d2iz>:
20000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
20000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
20000b70:	d215      	bcs.n	20000b9e <__aeabi_d2iz+0x36>
20000b72:	d511      	bpl.n	20000b98 <__aeabi_d2iz+0x30>
20000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
20000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
20000b7c:	d912      	bls.n	20000ba4 <__aeabi_d2iz+0x3c>
20000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
20000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
20000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20000b8e:	fa23 f002 	lsr.w	r0, r3, r2
20000b92:	bf18      	it	ne
20000b94:	4240      	negne	r0, r0
20000b96:	4770      	bx	lr
20000b98:	f04f 0000 	mov.w	r0, #0
20000b9c:	4770      	bx	lr
20000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
20000ba2:	d105      	bne.n	20000bb0 <__aeabi_d2iz+0x48>
20000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
20000ba8:	bf08      	it	eq
20000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
20000bae:	4770      	bx	lr
20000bb0:	f04f 0000 	mov.w	r0, #0
20000bb4:	4770      	bx	lr
20000bb6:	bf00      	nop

20000bb8 <__aeabi_uldivmod>:
20000bb8:	b953      	cbnz	r3, 20000bd0 <__aeabi_uldivmod+0x18>
20000bba:	b94a      	cbnz	r2, 20000bd0 <__aeabi_uldivmod+0x18>
20000bbc:	2900      	cmp	r1, #0
20000bbe:	bf08      	it	eq
20000bc0:	2800      	cmpeq	r0, #0
20000bc2:	bf1c      	itt	ne
20000bc4:	f04f 31ff 	movne.w	r1, #4294967295
20000bc8:	f04f 30ff 	movne.w	r0, #4294967295
20000bcc:	f000 b974 	b.w	20000eb8 <__aeabi_idiv0>
20000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
20000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20000bd8:	f000 f806 	bl	20000be8 <__udivmoddi4>
20000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
20000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000be4:	b004      	add	sp, #16
20000be6:	4770      	bx	lr

20000be8 <__udivmoddi4>:
20000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20000bec:	9d08      	ldr	r5, [sp, #32]
20000bee:	4604      	mov	r4, r0
20000bf0:	468e      	mov	lr, r1
20000bf2:	2b00      	cmp	r3, #0
20000bf4:	d14d      	bne.n	20000c92 <__udivmoddi4+0xaa>
20000bf6:	428a      	cmp	r2, r1
20000bf8:	4694      	mov	ip, r2
20000bfa:	d969      	bls.n	20000cd0 <__udivmoddi4+0xe8>
20000bfc:	fab2 f282 	clz	r2, r2
20000c00:	b152      	cbz	r2, 20000c18 <__udivmoddi4+0x30>
20000c02:	fa01 f302 	lsl.w	r3, r1, r2
20000c06:	f1c2 0120 	rsb	r1, r2, #32
20000c0a:	fa20 f101 	lsr.w	r1, r0, r1
20000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
20000c12:	ea41 0e03 	orr.w	lr, r1, r3
20000c16:	4094      	lsls	r4, r2
20000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000c1c:	0c21      	lsrs	r1, r4, #16
20000c1e:	fbbe f6f8 	udiv	r6, lr, r8
20000c22:	fa1f f78c 	uxth.w	r7, ip
20000c26:	fb08 e316 	mls	r3, r8, r6, lr
20000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
20000c2e:	fb06 f107 	mul.w	r1, r6, r7
20000c32:	4299      	cmp	r1, r3
20000c34:	d90a      	bls.n	20000c4c <__udivmoddi4+0x64>
20000c36:	eb1c 0303 	adds.w	r3, ip, r3
20000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
20000c3e:	f080 811f 	bcs.w	20000e80 <__udivmoddi4+0x298>
20000c42:	4299      	cmp	r1, r3
20000c44:	f240 811c 	bls.w	20000e80 <__udivmoddi4+0x298>
20000c48:	3e02      	subs	r6, #2
20000c4a:	4463      	add	r3, ip
20000c4c:	1a5b      	subs	r3, r3, r1
20000c4e:	b2a4      	uxth	r4, r4
20000c50:	fbb3 f0f8 	udiv	r0, r3, r8
20000c54:	fb08 3310 	mls	r3, r8, r0, r3
20000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000c5c:	fb00 f707 	mul.w	r7, r0, r7
20000c60:	42a7      	cmp	r7, r4
20000c62:	d90a      	bls.n	20000c7a <__udivmoddi4+0x92>
20000c64:	eb1c 0404 	adds.w	r4, ip, r4
20000c68:	f100 33ff 	add.w	r3, r0, #4294967295
20000c6c:	f080 810a 	bcs.w	20000e84 <__udivmoddi4+0x29c>
20000c70:	42a7      	cmp	r7, r4
20000c72:	f240 8107 	bls.w	20000e84 <__udivmoddi4+0x29c>
20000c76:	4464      	add	r4, ip
20000c78:	3802      	subs	r0, #2
20000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000c7e:	1be4      	subs	r4, r4, r7
20000c80:	2600      	movs	r6, #0
20000c82:	b11d      	cbz	r5, 20000c8c <__udivmoddi4+0xa4>
20000c84:	40d4      	lsrs	r4, r2
20000c86:	2300      	movs	r3, #0
20000c88:	e9c5 4300 	strd	r4, r3, [r5]
20000c8c:	4631      	mov	r1, r6
20000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000c92:	428b      	cmp	r3, r1
20000c94:	d909      	bls.n	20000caa <__udivmoddi4+0xc2>
20000c96:	2d00      	cmp	r5, #0
20000c98:	f000 80ef 	beq.w	20000e7a <__udivmoddi4+0x292>
20000c9c:	2600      	movs	r6, #0
20000c9e:	e9c5 0100 	strd	r0, r1, [r5]
20000ca2:	4630      	mov	r0, r6
20000ca4:	4631      	mov	r1, r6
20000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000caa:	fab3 f683 	clz	r6, r3
20000cae:	2e00      	cmp	r6, #0
20000cb0:	d14a      	bne.n	20000d48 <__udivmoddi4+0x160>
20000cb2:	428b      	cmp	r3, r1
20000cb4:	d302      	bcc.n	20000cbc <__udivmoddi4+0xd4>
20000cb6:	4282      	cmp	r2, r0
20000cb8:	f200 80f9 	bhi.w	20000eae <__udivmoddi4+0x2c6>
20000cbc:	1a84      	subs	r4, r0, r2
20000cbe:	eb61 0303 	sbc.w	r3, r1, r3
20000cc2:	2001      	movs	r0, #1
20000cc4:	469e      	mov	lr, r3
20000cc6:	2d00      	cmp	r5, #0
20000cc8:	d0e0      	beq.n	20000c8c <__udivmoddi4+0xa4>
20000cca:	e9c5 4e00 	strd	r4, lr, [r5]
20000cce:	e7dd      	b.n	20000c8c <__udivmoddi4+0xa4>
20000cd0:	b902      	cbnz	r2, 20000cd4 <__udivmoddi4+0xec>
20000cd2:	deff      	udf	#255	; 0xff
20000cd4:	fab2 f282 	clz	r2, r2
20000cd8:	2a00      	cmp	r2, #0
20000cda:	f040 8092 	bne.w	20000e02 <__udivmoddi4+0x21a>
20000cde:	eba1 010c 	sub.w	r1, r1, ip
20000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
20000ce6:	fa1f fe8c 	uxth.w	lr, ip
20000cea:	2601      	movs	r6, #1
20000cec:	0c20      	lsrs	r0, r4, #16
20000cee:	fbb1 f3f7 	udiv	r3, r1, r7
20000cf2:	fb07 1113 	mls	r1, r7, r3, r1
20000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
20000cfa:	fb0e f003 	mul.w	r0, lr, r3
20000cfe:	4288      	cmp	r0, r1
20000d00:	d908      	bls.n	20000d14 <__udivmoddi4+0x12c>
20000d02:	eb1c 0101 	adds.w	r1, ip, r1
20000d06:	f103 38ff 	add.w	r8, r3, #4294967295
20000d0a:	d202      	bcs.n	20000d12 <__udivmoddi4+0x12a>
20000d0c:	4288      	cmp	r0, r1
20000d0e:	f200 80cb 	bhi.w	20000ea8 <__udivmoddi4+0x2c0>
20000d12:	4643      	mov	r3, r8
20000d14:	1a09      	subs	r1, r1, r0
20000d16:	b2a4      	uxth	r4, r4
20000d18:	fbb1 f0f7 	udiv	r0, r1, r7
20000d1c:	fb07 1110 	mls	r1, r7, r0, r1
20000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
20000d24:	fb0e fe00 	mul.w	lr, lr, r0
20000d28:	45a6      	cmp	lr, r4
20000d2a:	d908      	bls.n	20000d3e <__udivmoddi4+0x156>
20000d2c:	eb1c 0404 	adds.w	r4, ip, r4
20000d30:	f100 31ff 	add.w	r1, r0, #4294967295
20000d34:	d202      	bcs.n	20000d3c <__udivmoddi4+0x154>
20000d36:	45a6      	cmp	lr, r4
20000d38:	f200 80bb 	bhi.w	20000eb2 <__udivmoddi4+0x2ca>
20000d3c:	4608      	mov	r0, r1
20000d3e:	eba4 040e 	sub.w	r4, r4, lr
20000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
20000d46:	e79c      	b.n	20000c82 <__udivmoddi4+0x9a>
20000d48:	f1c6 0720 	rsb	r7, r6, #32
20000d4c:	40b3      	lsls	r3, r6
20000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
20000d52:	ea4c 0c03 	orr.w	ip, ip, r3
20000d56:	fa20 f407 	lsr.w	r4, r0, r7
20000d5a:	fa01 f306 	lsl.w	r3, r1, r6
20000d5e:	431c      	orrs	r4, r3
20000d60:	40f9      	lsrs	r1, r7
20000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
20000d66:	fa00 f306 	lsl.w	r3, r0, r6
20000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
20000d6e:	0c20      	lsrs	r0, r4, #16
20000d70:	fa1f fe8c 	uxth.w	lr, ip
20000d74:	fb09 1118 	mls	r1, r9, r8, r1
20000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
20000d7c:	fb08 f00e 	mul.w	r0, r8, lr
20000d80:	4288      	cmp	r0, r1
20000d82:	fa02 f206 	lsl.w	r2, r2, r6
20000d86:	d90b      	bls.n	20000da0 <__udivmoddi4+0x1b8>
20000d88:	eb1c 0101 	adds.w	r1, ip, r1
20000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
20000d90:	f080 8088 	bcs.w	20000ea4 <__udivmoddi4+0x2bc>
20000d94:	4288      	cmp	r0, r1
20000d96:	f240 8085 	bls.w	20000ea4 <__udivmoddi4+0x2bc>
20000d9a:	f1a8 0802 	sub.w	r8, r8, #2
20000d9e:	4461      	add	r1, ip
20000da0:	1a09      	subs	r1, r1, r0
20000da2:	b2a4      	uxth	r4, r4
20000da4:	fbb1 f0f9 	udiv	r0, r1, r9
20000da8:	fb09 1110 	mls	r1, r9, r0, r1
20000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
20000db0:	fb00 fe0e 	mul.w	lr, r0, lr
20000db4:	458e      	cmp	lr, r1
20000db6:	d908      	bls.n	20000dca <__udivmoddi4+0x1e2>
20000db8:	eb1c 0101 	adds.w	r1, ip, r1
20000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
20000dc0:	d26c      	bcs.n	20000e9c <__udivmoddi4+0x2b4>
20000dc2:	458e      	cmp	lr, r1
20000dc4:	d96a      	bls.n	20000e9c <__udivmoddi4+0x2b4>
20000dc6:	3802      	subs	r0, #2
20000dc8:	4461      	add	r1, ip
20000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
20000dce:	fba0 9402 	umull	r9, r4, r0, r2
20000dd2:	eba1 010e 	sub.w	r1, r1, lr
20000dd6:	42a1      	cmp	r1, r4
20000dd8:	46c8      	mov	r8, r9
20000dda:	46a6      	mov	lr, r4
20000ddc:	d356      	bcc.n	20000e8c <__udivmoddi4+0x2a4>
20000dde:	d053      	beq.n	20000e88 <__udivmoddi4+0x2a0>
20000de0:	b15d      	cbz	r5, 20000dfa <__udivmoddi4+0x212>
20000de2:	ebb3 0208 	subs.w	r2, r3, r8
20000de6:	eb61 010e 	sbc.w	r1, r1, lr
20000dea:	fa01 f707 	lsl.w	r7, r1, r7
20000dee:	fa22 f306 	lsr.w	r3, r2, r6
20000df2:	40f1      	lsrs	r1, r6
20000df4:	431f      	orrs	r7, r3
20000df6:	e9c5 7100 	strd	r7, r1, [r5]
20000dfa:	2600      	movs	r6, #0
20000dfc:	4631      	mov	r1, r6
20000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000e02:	f1c2 0320 	rsb	r3, r2, #32
20000e06:	40d8      	lsrs	r0, r3
20000e08:	fa0c fc02 	lsl.w	ip, ip, r2
20000e0c:	fa21 f303 	lsr.w	r3, r1, r3
20000e10:	4091      	lsls	r1, r2
20000e12:	4301      	orrs	r1, r0
20000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
20000e18:	fa1f fe8c 	uxth.w	lr, ip
20000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
20000e20:	fb07 3610 	mls	r6, r7, r0, r3
20000e24:	0c0b      	lsrs	r3, r1, #16
20000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
20000e2a:	fb00 f60e 	mul.w	r6, r0, lr
20000e2e:	429e      	cmp	r6, r3
20000e30:	fa04 f402 	lsl.w	r4, r4, r2
20000e34:	d908      	bls.n	20000e48 <__udivmoddi4+0x260>
20000e36:	eb1c 0303 	adds.w	r3, ip, r3
20000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
20000e3e:	d22f      	bcs.n	20000ea0 <__udivmoddi4+0x2b8>
20000e40:	429e      	cmp	r6, r3
20000e42:	d92d      	bls.n	20000ea0 <__udivmoddi4+0x2b8>
20000e44:	3802      	subs	r0, #2
20000e46:	4463      	add	r3, ip
20000e48:	1b9b      	subs	r3, r3, r6
20000e4a:	b289      	uxth	r1, r1
20000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
20000e50:	fb07 3316 	mls	r3, r7, r6, r3
20000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
20000e58:	fb06 f30e 	mul.w	r3, r6, lr
20000e5c:	428b      	cmp	r3, r1
20000e5e:	d908      	bls.n	20000e72 <__udivmoddi4+0x28a>
20000e60:	eb1c 0101 	adds.w	r1, ip, r1
20000e64:	f106 38ff 	add.w	r8, r6, #4294967295
20000e68:	d216      	bcs.n	20000e98 <__udivmoddi4+0x2b0>
20000e6a:	428b      	cmp	r3, r1
20000e6c:	d914      	bls.n	20000e98 <__udivmoddi4+0x2b0>
20000e6e:	3e02      	subs	r6, #2
20000e70:	4461      	add	r1, ip
20000e72:	1ac9      	subs	r1, r1, r3
20000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
20000e78:	e738      	b.n	20000cec <__udivmoddi4+0x104>
20000e7a:	462e      	mov	r6, r5
20000e7c:	4628      	mov	r0, r5
20000e7e:	e705      	b.n	20000c8c <__udivmoddi4+0xa4>
20000e80:	4606      	mov	r6, r0
20000e82:	e6e3      	b.n	20000c4c <__udivmoddi4+0x64>
20000e84:	4618      	mov	r0, r3
20000e86:	e6f8      	b.n	20000c7a <__udivmoddi4+0x92>
20000e88:	454b      	cmp	r3, r9
20000e8a:	d2a9      	bcs.n	20000de0 <__udivmoddi4+0x1f8>
20000e8c:	ebb9 0802 	subs.w	r8, r9, r2
20000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
20000e94:	3801      	subs	r0, #1
20000e96:	e7a3      	b.n	20000de0 <__udivmoddi4+0x1f8>
20000e98:	4646      	mov	r6, r8
20000e9a:	e7ea      	b.n	20000e72 <__udivmoddi4+0x28a>
20000e9c:	4620      	mov	r0, r4
20000e9e:	e794      	b.n	20000dca <__udivmoddi4+0x1e2>
20000ea0:	4640      	mov	r0, r8
20000ea2:	e7d1      	b.n	20000e48 <__udivmoddi4+0x260>
20000ea4:	46d0      	mov	r8, sl
20000ea6:	e77b      	b.n	20000da0 <__udivmoddi4+0x1b8>
20000ea8:	3b02      	subs	r3, #2
20000eaa:	4461      	add	r1, ip
20000eac:	e732      	b.n	20000d14 <__udivmoddi4+0x12c>
20000eae:	4630      	mov	r0, r6
20000eb0:	e709      	b.n	20000cc6 <__udivmoddi4+0xde>
20000eb2:	4464      	add	r4, ip
20000eb4:	3802      	subs	r0, #2
20000eb6:	e742      	b.n	20000d3e <__udivmoddi4+0x156>

20000eb8 <__aeabi_idiv0>:
20000eb8:	4770      	bx	lr
20000eba:	bf00      	nop

20000ebc <mySPISend>:
/**************************************************************************
 @brief     функция для отправки в SPI. + ожидание окончания передачи.
 @param    buff указатель на буфер отправки
 @param    buff_size размер буфера
 **************************************************************************/
void mySPISend(uint8_t *buff, uint16_t buff_size) {
20000ebc:	b480      	push	{r7}
20000ebe:	b083      	sub	sp, #12
20000ec0:	af00      	add	r7, sp, #0
20000ec2:	6078      	str	r0, [r7, #4]
20000ec4:	460b      	mov	r3, r1
20000ec6:	807b      	strh	r3, [r7, #2]
	while (buff_size > 0) {
20000ec8:	e010      	b.n	20000eec <mySPISend+0x30>
		SPI1->DR = *buff;
20000eca:	687b      	ldr	r3, [r7, #4]
20000ecc:	781a      	ldrb	r2, [r3, #0]
20000ece:	4b10      	ldr	r3, [pc, #64]	; (20000f10 <mySPISend+0x54>)
20000ed0:	60da      	str	r2, [r3, #12]
		while (!READ_BIT(SPI1->SR, SPI_SR_TXE))
20000ed2:	bf00      	nop
20000ed4:	4b0e      	ldr	r3, [pc, #56]	; (20000f10 <mySPISend+0x54>)
20000ed6:	689b      	ldr	r3, [r3, #8]
20000ed8:	f003 0302 	and.w	r3, r3, #2
20000edc:	2b00      	cmp	r3, #0
20000ede:	d0f9      	beq.n	20000ed4 <mySPISend+0x18>
			;
		buff++;
20000ee0:	687b      	ldr	r3, [r7, #4]
20000ee2:	3301      	adds	r3, #1
20000ee4:	607b      	str	r3, [r7, #4]
		buff_size--;
20000ee6:	887b      	ldrh	r3, [r7, #2]
20000ee8:	3b01      	subs	r3, #1
20000eea:	807b      	strh	r3, [r7, #2]
	while (buff_size > 0) {
20000eec:	887b      	ldrh	r3, [r7, #2]
20000eee:	2b00      	cmp	r3, #0
20000ef0:	d1eb      	bne.n	20000eca <mySPISend+0xe>
	}
	while (READ_BIT(SPI1->SR, SPI_SR_BSY))
20000ef2:	bf00      	nop
20000ef4:	4b06      	ldr	r3, [pc, #24]	; (20000f10 <mySPISend+0x54>)
20000ef6:	689b      	ldr	r3, [r3, #8]
20000ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
20000efc:	2b00      	cmp	r3, #0
20000efe:	d1f9      	bne.n	20000ef4 <mySPISend+0x38>
		;
}
20000f00:	bf00      	nop
20000f02:	bf00      	nop
20000f04:	370c      	adds	r7, #12
20000f06:	46bd      	mov	sp, r7
20000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f0c:	4770      	bx	lr
20000f0e:	bf00      	nop
20000f10:	40013000 	.word	0x40013000

20000f14 <ILI9341_Select>:

/**************************************************************************
 @brief     drive pin CS to GND
 **************************************************************************/
void ILI9341_Select() {
20000f14:	b480      	push	{r7}
20000f16:	af00      	add	r7, sp, #0
	CS_RESET;
20000f18:	4b05      	ldr	r3, [pc, #20]	; (20000f30 <ILI9341_Select+0x1c>)
20000f1a:	699b      	ldr	r3, [r3, #24]
20000f1c:	4a04      	ldr	r2, [pc, #16]	; (20000f30 <ILI9341_Select+0x1c>)
20000f1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20000f22:	6193      	str	r3, [r2, #24]
	//HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
}
20000f24:	bf00      	nop
20000f26:	46bd      	mov	sp, r7
20000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f2c:	4770      	bx	lr
20000f2e:	bf00      	nop
20000f30:	40020400 	.word	0x40020400

20000f34 <ILI9341_Unselect>:

/**************************************************************************
 @brief     drive pin CS to UP
 **************************************************************************/
void ILI9341_Unselect() {
20000f34:	b480      	push	{r7}
20000f36:	af00      	add	r7, sp, #0
	CS_SET;
20000f38:	4b05      	ldr	r3, [pc, #20]	; (20000f50 <ILI9341_Unselect+0x1c>)
20000f3a:	699b      	ldr	r3, [r3, #24]
20000f3c:	4a04      	ldr	r2, [pc, #16]	; (20000f50 <ILI9341_Unselect+0x1c>)
20000f3e:	f043 0304 	orr.w	r3, r3, #4
20000f42:	6193      	str	r3, [r2, #24]
	//HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
}
20000f44:	bf00      	nop
20000f46:	46bd      	mov	sp, r7
20000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f4c:	4770      	bx	lr
20000f4e:	bf00      	nop
20000f50:	40020400 	.word	0x40020400

20000f54 <ILI9341_Reset>:

/**************************************************************************
 @brief     drive pin Reset
 **************************************************************************/
static void ILI9341_Reset() {
20000f54:	b580      	push	{r7, lr}
20000f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
20000f58:	2200      	movs	r2, #0
20000f5a:	2102      	movs	r1, #2
20000f5c:	4806      	ldr	r0, [pc, #24]	; (20000f78 <ILI9341_Reset+0x24>)
20000f5e:	f004 fa89 	bl	20005474 <HAL_GPIO_WritePin>
	HAL_Delay(5);
20000f62:	2005      	movs	r0, #5
20000f64:	f003 fdee 	bl	20004b44 <HAL_Delay>
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
20000f68:	2201      	movs	r2, #1
20000f6a:	2102      	movs	r1, #2
20000f6c:	4802      	ldr	r0, [pc, #8]	; (20000f78 <ILI9341_Reset+0x24>)
20000f6e:	f004 fa81 	bl	20005474 <HAL_GPIO_WritePin>
}
20000f72:	bf00      	nop
20000f74:	bd80      	pop	{r7, pc}
20000f76:	bf00      	nop
20000f78:	40020400 	.word	0x40020400

20000f7c <ILI9341_WriteCommand>:

/**************************************************************************
 @brief     write comand to display
 @param    cmd number comand
 **************************************************************************/
static void ILI9341_WriteCommand(uint8_t cmd) {
20000f7c:	b580      	push	{r7, lr}
20000f7e:	b082      	sub	sp, #8
20000f80:	af00      	add	r7, sp, #0
20000f82:	4603      	mov	r3, r0
20000f84:	71fb      	strb	r3, [r7, #7]
	DC_RESET;                      // данные или команда
20000f86:	4b07      	ldr	r3, [pc, #28]	; (20000fa4 <ILI9341_WriteCommand+0x28>)
20000f88:	699b      	ldr	r3, [r3, #24]
20000f8a:	4a06      	ldr	r2, [pc, #24]	; (20000fa4 <ILI9341_WriteCommand+0x28>)
20000f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000f90:	6193      	str	r3, [r2, #24]
	mySPISend(&cmd, 1);
20000f92:	1dfb      	adds	r3, r7, #7
20000f94:	2101      	movs	r1, #1
20000f96:	4618      	mov	r0, r3
20000f98:	f7ff ff90 	bl	20000ebc <mySPISend>
}
20000f9c:	bf00      	nop
20000f9e:	3708      	adds	r7, #8
20000fa0:	46bd      	mov	sp, r7
20000fa2:	bd80      	pop	{r7, pc}
20000fa4:	40020400 	.word	0x40020400

20000fa8 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t *buff, size_t buff_size) {
20000fa8:	b580      	push	{r7, lr}
20000faa:	b084      	sub	sp, #16
20000fac:	af00      	add	r7, sp, #0
20000fae:	6078      	str	r0, [r7, #4]
20000fb0:	6039      	str	r1, [r7, #0]
	DC_SET;                        // данные или команда
20000fb2:	4b11      	ldr	r3, [pc, #68]	; (20000ff8 <ILI9341_WriteData+0x50>)
20000fb4:	699b      	ldr	r3, [r3, #24]
20000fb6:	4a10      	ldr	r2, [pc, #64]	; (20000ff8 <ILI9341_WriteData+0x50>)
20000fb8:	f043 0301 	orr.w	r3, r3, #1
20000fbc:	6193      	str	r3, [r2, #24]
	// split data in small chunks because HAL can't send more then 64K at once
	while (buff_size > 0) {
20000fbe:	e013      	b.n	20000fe8 <ILI9341_WriteData+0x40>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
20000fc0:	683b      	ldr	r3, [r7, #0]
20000fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000fc6:	bf28      	it	cs
20000fc8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
20000fcc:	81fb      	strh	r3, [r7, #14]
		mySPISend(buff, chunk_size);
20000fce:	89fb      	ldrh	r3, [r7, #14]
20000fd0:	4619      	mov	r1, r3
20000fd2:	6878      	ldr	r0, [r7, #4]
20000fd4:	f7ff ff72 	bl	20000ebc <mySPISend>
		buff += chunk_size;
20000fd8:	89fb      	ldrh	r3, [r7, #14]
20000fda:	687a      	ldr	r2, [r7, #4]
20000fdc:	4413      	add	r3, r2
20000fde:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
20000fe0:	89fb      	ldrh	r3, [r7, #14]
20000fe2:	683a      	ldr	r2, [r7, #0]
20000fe4:	1ad3      	subs	r3, r2, r3
20000fe6:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
20000fe8:	683b      	ldr	r3, [r7, #0]
20000fea:	2b00      	cmp	r3, #0
20000fec:	d1e8      	bne.n	20000fc0 <ILI9341_WriteData+0x18>
	}
}
20000fee:	bf00      	nop
20000ff0:	bf00      	nop
20000ff2:	3710      	adds	r7, #16
20000ff4:	46bd      	mov	sp, r7
20000ff6:	bd80      	pop	{r7, pc}
20000ff8:	40020400 	.word	0x40020400

20000ffc <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1,
		uint16_t y1) {
20000ffc:	b590      	push	{r4, r7, lr}
20000ffe:	b085      	sub	sp, #20
20001000:	af00      	add	r7, sp, #0
20001002:	4604      	mov	r4, r0
20001004:	4608      	mov	r0, r1
20001006:	4611      	mov	r1, r2
20001008:	461a      	mov	r2, r3
2000100a:	4623      	mov	r3, r4
2000100c:	80fb      	strh	r3, [r7, #6]
2000100e:	4603      	mov	r3, r0
20001010:	80bb      	strh	r3, [r7, #4]
20001012:	460b      	mov	r3, r1
20001014:	807b      	strh	r3, [r7, #2]
20001016:	4613      	mov	r3, r2
20001018:	803b      	strh	r3, [r7, #0]
	// column address set
	ILI9341_WriteCommand(0x2A); // CASET
2000101a:	202a      	movs	r0, #42	; 0x2a
2000101c:	f7ff ffae 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1
20001020:	88fb      	ldrh	r3, [r7, #6]
20001022:	0a1b      	lsrs	r3, r3, #8
20001024:	b29b      	uxth	r3, r3
20001026:	b2db      	uxtb	r3, r3
20001028:	733b      	strb	r3, [r7, #12]
2000102a:	88fb      	ldrh	r3, [r7, #6]
2000102c:	b2db      	uxtb	r3, r3
2000102e:	737b      	strb	r3, [r7, #13]
20001030:	887b      	ldrh	r3, [r7, #2]
20001032:	0a1b      	lsrs	r3, r3, #8
20001034:	b29b      	uxth	r3, r3
20001036:	b2db      	uxtb	r3, r3
20001038:	73bb      	strb	r3, [r7, #14]
2000103a:	887b      	ldrh	r3, [r7, #2]
2000103c:	b2db      	uxtb	r3, r3
2000103e:	73fb      	strb	r3, [r7, #15]
				& 0xFF };
		ILI9341_WriteData(data, sizeof(data));
20001040:	f107 030c 	add.w	r3, r7, #12
20001044:	2104      	movs	r1, #4
20001046:	4618      	mov	r0, r3
20001048:	f7ff ffae 	bl	20000fa8 <ILI9341_WriteData>
	}
	// row address set
	ILI9341_WriteCommand(0x2B); // RASET
2000104c:	202b      	movs	r0, #43	; 0x2b
2000104e:	f7ff ff95 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1
20001052:	88bb      	ldrh	r3, [r7, #4]
20001054:	0a1b      	lsrs	r3, r3, #8
20001056:	b29b      	uxth	r3, r3
20001058:	b2db      	uxtb	r3, r3
2000105a:	723b      	strb	r3, [r7, #8]
2000105c:	88bb      	ldrh	r3, [r7, #4]
2000105e:	b2db      	uxtb	r3, r3
20001060:	727b      	strb	r3, [r7, #9]
20001062:	883b      	ldrh	r3, [r7, #0]
20001064:	0a1b      	lsrs	r3, r3, #8
20001066:	b29b      	uxth	r3, r3
20001068:	b2db      	uxtb	r3, r3
2000106a:	72bb      	strb	r3, [r7, #10]
2000106c:	883b      	ldrh	r3, [r7, #0]
2000106e:	b2db      	uxtb	r3, r3
20001070:	72fb      	strb	r3, [r7, #11]
				& 0xFF };
		ILI9341_WriteData(data, sizeof(data));
20001072:	f107 0308 	add.w	r3, r7, #8
20001076:	2104      	movs	r1, #4
20001078:	4618      	mov	r0, r3
2000107a:	f7ff ff95 	bl	20000fa8 <ILI9341_WriteData>
	}
	// write to RAM
	ILI9341_WriteCommand(0x2C); // RAMWR
2000107e:	202c      	movs	r0, #44	; 0x2c
20001080:	f7ff ff7c 	bl	20000f7c <ILI9341_WriteCommand>
}
20001084:	bf00      	nop
20001086:	3714      	adds	r7, #20
20001088:	46bd      	mov	sp, r7
2000108a:	bd90      	pop	{r4, r7, pc}

2000108c <ILI9341_Init>:

void ILI9341_Init() {
2000108c:	b590      	push	{r4, r7, lr}
2000108e:	b09b      	sub	sp, #108	; 0x6c
20001090:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Led_Display_GPIO_Port, Led_Display_Pin, GPIO_PIN_SET);
20001092:	2201      	movs	r2, #1
20001094:	2110      	movs	r1, #16
20001096:	4890      	ldr	r0, [pc, #576]	; (200012d8 <ILI9341_Init+0x24c>)
20001098:	f004 f9ec 	bl	20005474 <HAL_GPIO_WritePin>
	ILI9341_Select();
2000109c:	f7ff ff3a 	bl	20000f14 <ILI9341_Select>
	ILI9341_Reset();
200010a0:	f7ff ff58 	bl	20000f54 <ILI9341_Reset>
	// command list is based on https://github.com/martnak/STM32-ILI9341
	ILI9341_WriteCommand(0x01); // SOFTWARE RESET
200010a4:	2001      	movs	r0, #1
200010a6:	f7ff ff69 	bl	20000f7c <ILI9341_WriteCommand>
	HAL_Delay(1000);
200010aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
200010ae:	f003 fd49 	bl	20004b44 <HAL_Delay>
	ILI9341_WriteCommand(0xCB); // POWER CONTROL A
200010b2:	20cb      	movs	r0, #203	; 0xcb
200010b4:	f7ff ff62 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
200010b8:	4a88      	ldr	r2, [pc, #544]	; (200012dc <ILI9341_Init+0x250>)
200010ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
200010be:	e892 0003 	ldmia.w	r2, {r0, r1}
200010c2:	6018      	str	r0, [r3, #0]
200010c4:	3304      	adds	r3, #4
200010c6:	7019      	strb	r1, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
200010c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
200010cc:	2105      	movs	r1, #5
200010ce:	4618      	mov	r0, r3
200010d0:	f7ff ff6a 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xCF); // POWER CONTROL B
200010d4:	20cf      	movs	r0, #207	; 0xcf
200010d6:	f7ff ff51 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0xC1, 0x30 };
200010da:	4a81      	ldr	r2, [pc, #516]	; (200012e0 <ILI9341_Init+0x254>)
200010dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
200010e0:	6812      	ldr	r2, [r2, #0]
200010e2:	4611      	mov	r1, r2
200010e4:	8019      	strh	r1, [r3, #0]
200010e6:	3302      	adds	r3, #2
200010e8:	0c12      	lsrs	r2, r2, #16
200010ea:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
200010ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
200010f0:	2103      	movs	r1, #3
200010f2:	4618      	mov	r0, r3
200010f4:	f7ff ff58 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE8); // DRIVER TIMING CONTROL A
200010f8:	20e8      	movs	r0, #232	; 0xe8
200010fa:	f7ff ff3f 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x85, 0x00, 0x78 };
200010fe:	4a79      	ldr	r2, [pc, #484]	; (200012e4 <ILI9341_Init+0x258>)
20001100:	f107 0358 	add.w	r3, r7, #88	; 0x58
20001104:	6812      	ldr	r2, [r2, #0]
20001106:	4611      	mov	r1, r2
20001108:	8019      	strh	r1, [r3, #0]
2000110a:	3302      	adds	r3, #2
2000110c:	0c12      	lsrs	r2, r2, #16
2000110e:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
20001110:	f107 0358 	add.w	r3, r7, #88	; 0x58
20001114:	2103      	movs	r1, #3
20001116:	4618      	mov	r0, r3
20001118:	f7ff ff46 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xEA); // DRIVER TIMING CONTROL B
2000111c:	20ea      	movs	r0, #234	; 0xea
2000111e:	f7ff ff2d 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x00 };
20001122:	2300      	movs	r3, #0
20001124:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		ILI9341_WriteData(data, sizeof(data));
20001128:	f107 0354 	add.w	r3, r7, #84	; 0x54
2000112c:	2102      	movs	r1, #2
2000112e:	4618      	mov	r0, r3
20001130:	f7ff ff3a 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xED);  // POWER ON SEQUENCE CONTROL
20001134:	20ed      	movs	r0, #237	; 0xed
20001136:	f7ff ff21 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
2000113a:	4b6b      	ldr	r3, [pc, #428]	; (200012e8 <ILI9341_Init+0x25c>)
2000113c:	653b      	str	r3, [r7, #80]	; 0x50
		ILI9341_WriteData(data, sizeof(data));
2000113e:	f107 0350 	add.w	r3, r7, #80	; 0x50
20001142:	2104      	movs	r1, #4
20001144:	4618      	mov	r0, r3
20001146:	f7ff ff2f 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xF7);  // PUMP RATIO CONTROL
2000114a:	20f7      	movs	r0, #247	; 0xf7
2000114c:	f7ff ff16 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x20 };
20001150:	2320      	movs	r3, #32
20001152:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		ILI9341_WriteData(data, sizeof(data));
20001156:	f107 034c 	add.w	r3, r7, #76	; 0x4c
2000115a:	2101      	movs	r1, #1
2000115c:	4618      	mov	r0, r3
2000115e:	f7ff ff23 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC0); // POWER CONTROL,VRH[5:0]
20001162:	20c0      	movs	r0, #192	; 0xc0
20001164:	f7ff ff0a 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x23 };
20001168:	2323      	movs	r3, #35	; 0x23
2000116a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		ILI9341_WriteData(data, sizeof(data));
2000116e:	f107 0348 	add.w	r3, r7, #72	; 0x48
20001172:	2101      	movs	r1, #1
20001174:	4618      	mov	r0, r3
20001176:	f7ff ff17 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC1); // POWER CONTROL,SAP[2:0];BT[3:0]
2000117a:	20c1      	movs	r0, #193	; 0xc1
2000117c:	f7ff fefe 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x10 };
20001180:	2310      	movs	r3, #16
20001182:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		ILI9341_WriteData(data, sizeof(data));
20001186:	f107 0344 	add.w	r3, r7, #68	; 0x44
2000118a:	2101      	movs	r1, #1
2000118c:	4618      	mov	r0, r3
2000118e:	f7ff ff0b 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC5); // VCM CONTROL
20001192:	20c5      	movs	r0, #197	; 0xc5
20001194:	f7ff fef2 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x3E, 0x28 };
20001198:	f642 033e 	movw	r3, #10302	; 0x283e
2000119c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		ILI9341_WriteData(data, sizeof(data));
200011a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
200011a4:	2102      	movs	r1, #2
200011a6:	4618      	mov	r0, r3
200011a8:	f7ff fefe 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC7);  // VCM CONTROL 2
200011ac:	20c7      	movs	r0, #199	; 0xc7
200011ae:	f7ff fee5 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x86 };
200011b2:	2386      	movs	r3, #134	; 0x86
200011b4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		ILI9341_WriteData(data, sizeof(data));
200011b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
200011bc:	2101      	movs	r1, #1
200011be:	4618      	mov	r0, r3
200011c0:	f7ff fef2 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x36); // MEMORY ACCESS CONTROL
200011c4:	2036      	movs	r0, #54	; 0x36
200011c6:	f7ff fed9 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x48 };
200011ca:	2348      	movs	r3, #72	; 0x48
200011cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		ILI9341_WriteData(data, sizeof(data));
200011d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
200011d4:	2101      	movs	r1, #1
200011d6:	4618      	mov	r0, r3
200011d8:	f7ff fee6 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x3A); // PIXEL FORMAT
200011dc:	203a      	movs	r0, #58	; 0x3a
200011de:	f7ff fecd 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x55 };
200011e2:	2355      	movs	r3, #85	; 0x55
200011e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		ILI9341_WriteData(data, sizeof(data));
200011e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
200011ec:	2101      	movs	r1, #1
200011ee:	4618      	mov	r0, r3
200011f0:	f7ff feda 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xB1); // FRAME RATIO CONTROL, STANDARD RGB COLOR
200011f4:	20b1      	movs	r0, #177	; 0xb1
200011f6:	f7ff fec1 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x18 };
200011fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
200011fe:	863b      	strh	r3, [r7, #48]	; 0x30
		ILI9341_WriteData(data, sizeof(data));
20001200:	f107 0330 	add.w	r3, r7, #48	; 0x30
20001204:	2102      	movs	r1, #2
20001206:	4618      	mov	r0, r3
20001208:	f7ff fece 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xB6); // DISPLAY FUNCTION CONTROL
2000120c:	20b6      	movs	r0, #182	; 0xb6
2000120e:	f7ff feb5 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x08, 0x82, 0x27 };
20001212:	4a36      	ldr	r2, [pc, #216]	; (200012ec <ILI9341_Init+0x260>)
20001214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
20001218:	6812      	ldr	r2, [r2, #0]
2000121a:	4611      	mov	r1, r2
2000121c:	8019      	strh	r1, [r3, #0]
2000121e:	3302      	adds	r3, #2
20001220:	0c12      	lsrs	r2, r2, #16
20001222:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
20001224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
20001228:	2103      	movs	r1, #3
2000122a:	4618      	mov	r0, r3
2000122c:	f7ff febc 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xF2); // 3GAMMA FUNCTION DISABLE
20001230:	20f2      	movs	r0, #242	; 0xf2
20001232:	f7ff fea3 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00 };
20001236:	2300      	movs	r3, #0
20001238:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		ILI9341_WriteData(data, sizeof(data));
2000123c:	f107 0328 	add.w	r3, r7, #40	; 0x28
20001240:	2101      	movs	r1, #1
20001242:	4618      	mov	r0, r3
20001244:	f7ff feb0 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x26); // GAMMA CURVE SELECTED
20001248:	2026      	movs	r0, #38	; 0x26
2000124a:	f7ff fe97 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x01 };
2000124e:	2301      	movs	r3, #1
20001250:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		ILI9341_WriteData(data, sizeof(data));
20001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
20001258:	2101      	movs	r1, #1
2000125a:	4618      	mov	r0, r3
2000125c:	f7ff fea4 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE0); // POSITIVE GAMMA CORRECTION
20001260:	20e0      	movs	r0, #224	; 0xe0
20001262:	f7ff fe8b 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1, 0x37,
20001266:	4b22      	ldr	r3, [pc, #136]	; (200012f0 <ILI9341_Init+0x264>)
20001268:	f107 0414 	add.w	r4, r7, #20
2000126c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
2000126e:	c407      	stmia	r4!, {r0, r1, r2}
20001270:	8023      	strh	r3, [r4, #0]
20001272:	3402      	adds	r4, #2
20001274:	0c1b      	lsrs	r3, r3, #16
20001276:	7023      	strb	r3, [r4, #0]
				0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
		ILI9341_WriteData(data, sizeof(data));
20001278:	f107 0314 	add.w	r3, r7, #20
2000127c:	210f      	movs	r1, #15
2000127e:	4618      	mov	r0, r3
20001280:	f7ff fe92 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE1); // NEGATIVE GAMMA CORRECTION
20001284:	20e1      	movs	r0, #225	; 0xe1
20001286:	f7ff fe79 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48,
2000128a:	4b1a      	ldr	r3, [pc, #104]	; (200012f4 <ILI9341_Init+0x268>)
2000128c:	1d3c      	adds	r4, r7, #4
2000128e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
20001290:	c407      	stmia	r4!, {r0, r1, r2}
20001292:	8023      	strh	r3, [r4, #0]
20001294:	3402      	adds	r4, #2
20001296:	0c1b      	lsrs	r3, r3, #16
20001298:	7023      	strb	r3, [r4, #0]
				0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
		ILI9341_WriteData(data, sizeof(data));
2000129a:	1d3b      	adds	r3, r7, #4
2000129c:	210f      	movs	r1, #15
2000129e:	4618      	mov	r0, r3
200012a0:	f7ff fe82 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x11); // EXIT SLEEP
200012a4:	2011      	movs	r0, #17
200012a6:	f7ff fe69 	bl	20000f7c <ILI9341_WriteCommand>
	HAL_Delay(120);
200012aa:	2078      	movs	r0, #120	; 0x78
200012ac:	f003 fc4a 	bl	20004b44 <HAL_Delay>
	ILI9341_WriteCommand(0x29); // TURN ON DISPLAY
200012b0:	2029      	movs	r0, #41	; 0x29
200012b2:	f7ff fe63 	bl	20000f7c <ILI9341_WriteCommand>
	ILI9341_WriteCommand(0x36); // MADCTL
200012b6:	2036      	movs	r0, #54	; 0x36
200012b8:	f7ff fe60 	bl	20000f7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { ILI9341_ROTATION };
200012bc:	23e8      	movs	r3, #232	; 0xe8
200012be:	703b      	strb	r3, [r7, #0]
		ILI9341_WriteData(data, sizeof(data));
200012c0:	463b      	mov	r3, r7
200012c2:	2101      	movs	r1, #1
200012c4:	4618      	mov	r0, r3
200012c6:	f7ff fe6f 	bl	20000fa8 <ILI9341_WriteData>
	}
	ILI9341_Unselect();
200012ca:	f7ff fe33 	bl	20000f34 <ILI9341_Unselect>
}
200012ce:	bf00      	nop
200012d0:	376c      	adds	r7, #108	; 0x6c
200012d2:	46bd      	mov	sp, r7
200012d4:	bd90      	pop	{r4, r7, pc}
200012d6:	bf00      	nop
200012d8:	40020000 	.word	0x40020000
200012dc:	20009ab0 	.word	0x20009ab0
200012e0:	20009ab8 	.word	0x20009ab8
200012e4:	20009abc 	.word	0x20009abc
200012e8:	81120364 	.word	0x81120364
200012ec:	20009ac0 	.word	0x20009ac0
200012f0:	20009ac4 	.word	0x20009ac4
200012f4:	20009ad4 	.word	0x20009ad4

200012f8 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
200012f8:	b580      	push	{r7, lr}
200012fa:	b084      	sub	sp, #16
200012fc:	af00      	add	r7, sp, #0
200012fe:	4603      	mov	r3, r0
20001300:	80fb      	strh	r3, [r7, #6]
20001302:	460b      	mov	r3, r1
20001304:	80bb      	strh	r3, [r7, #4]
20001306:	4613      	mov	r3, r2
20001308:	807b      	strh	r3, [r7, #2]
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
2000130a:	88fb      	ldrh	r3, [r7, #6]
2000130c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20001310:	d21f      	bcs.n	20001352 <ILI9341_DrawPixel+0x5a>
20001312:	88bb      	ldrh	r3, [r7, #4]
20001314:	2bef      	cmp	r3, #239	; 0xef
20001316:	d81c      	bhi.n	20001352 <ILI9341_DrawPixel+0x5a>
		return;
	ILI9341_Select();
20001318:	f7ff fdfc 	bl	20000f14 <ILI9341_Select>

	ILI9341_SetAddressWindow(x, y, x + 1, y + 1);
2000131c:	88fb      	ldrh	r3, [r7, #6]
2000131e:	3301      	adds	r3, #1
20001320:	b29a      	uxth	r2, r3
20001322:	88bb      	ldrh	r3, [r7, #4]
20001324:	3301      	adds	r3, #1
20001326:	b29b      	uxth	r3, r3
20001328:	88b9      	ldrh	r1, [r7, #4]
2000132a:	88f8      	ldrh	r0, [r7, #6]
2000132c:	f7ff fe66 	bl	20000ffc <ILI9341_SetAddressWindow>
	uint8_t data[] = { color >> 8, color & 0xFF };
20001330:	887b      	ldrh	r3, [r7, #2]
20001332:	0a1b      	lsrs	r3, r3, #8
20001334:	b29b      	uxth	r3, r3
20001336:	b2db      	uxtb	r3, r3
20001338:	733b      	strb	r3, [r7, #12]
2000133a:	887b      	ldrh	r3, [r7, #2]
2000133c:	b2db      	uxtb	r3, r3
2000133e:	737b      	strb	r3, [r7, #13]
	ILI9341_WriteData(data, sizeof(data));
20001340:	f107 030c 	add.w	r3, r7, #12
20001344:	2102      	movs	r1, #2
20001346:	4618      	mov	r0, r3
20001348:	f7ff fe2e 	bl	20000fa8 <ILI9341_WriteData>

	ILI9341_Unselect();
2000134c:	f7ff fdf2 	bl	20000f34 <ILI9341_Unselect>
20001350:	e000      	b.n	20001354 <ILI9341_DrawPixel+0x5c>
		return;
20001352:	bf00      	nop
}
20001354:	3710      	adds	r7, #16
20001356:	46bd      	mov	sp, r7
20001358:	bd80      	pop	{r7, pc}
	...

2000135c <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t color) {
2000135c:	b590      	push	{r4, r7, lr}
2000135e:	b085      	sub	sp, #20
20001360:	af00      	add	r7, sp, #0
20001362:	4604      	mov	r4, r0
20001364:	4608      	mov	r0, r1
20001366:	4611      	mov	r1, r2
20001368:	461a      	mov	r2, r3
2000136a:	4623      	mov	r3, r4
2000136c:	80fb      	strh	r3, [r7, #6]
2000136e:	4603      	mov	r3, r0
20001370:	80bb      	strh	r3, [r7, #4]
20001372:	460b      	mov	r3, r1
20001374:	807b      	strh	r3, [r7, #2]
20001376:	4613      	mov	r3, r2
20001378:	803b      	strh	r3, [r7, #0]
	// clipping
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
2000137a:	88fb      	ldrh	r3, [r7, #6]
2000137c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20001380:	d250      	bcs.n	20001424 <ILI9341_FillRectangle+0xc8>
20001382:	88bb      	ldrh	r3, [r7, #4]
20001384:	2bef      	cmp	r3, #239	; 0xef
20001386:	d84d      	bhi.n	20001424 <ILI9341_FillRectangle+0xc8>
		return;
	if ((x + w - 1) >= ILI9341_WIDTH)
20001388:	88fa      	ldrh	r2, [r7, #6]
2000138a:	887b      	ldrh	r3, [r7, #2]
2000138c:	4413      	add	r3, r2
2000138e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20001392:	dd03      	ble.n	2000139c <ILI9341_FillRectangle+0x40>
		w = ILI9341_WIDTH - x;
20001394:	88fb      	ldrh	r3, [r7, #6]
20001396:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
2000139a:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= ILI9341_HEIGHT)
2000139c:	88ba      	ldrh	r2, [r7, #4]
2000139e:	883b      	ldrh	r3, [r7, #0]
200013a0:	4413      	add	r3, r2
200013a2:	2bf0      	cmp	r3, #240	; 0xf0
200013a4:	dd03      	ble.n	200013ae <ILI9341_FillRectangle+0x52>
		h = ILI9341_HEIGHT - y;
200013a6:	88bb      	ldrh	r3, [r7, #4]
200013a8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
200013ac:	803b      	strh	r3, [r7, #0]

	ILI9341_Select();
200013ae:	f7ff fdb1 	bl	20000f14 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + w - 1, y + h - 1);
200013b2:	88fa      	ldrh	r2, [r7, #6]
200013b4:	887b      	ldrh	r3, [r7, #2]
200013b6:	4413      	add	r3, r2
200013b8:	b29b      	uxth	r3, r3
200013ba:	3b01      	subs	r3, #1
200013bc:	b29c      	uxth	r4, r3
200013be:	88ba      	ldrh	r2, [r7, #4]
200013c0:	883b      	ldrh	r3, [r7, #0]
200013c2:	4413      	add	r3, r2
200013c4:	b29b      	uxth	r3, r3
200013c6:	3b01      	subs	r3, #1
200013c8:	b29b      	uxth	r3, r3
200013ca:	88b9      	ldrh	r1, [r7, #4]
200013cc:	88f8      	ldrh	r0, [r7, #6]
200013ce:	4622      	mov	r2, r4
200013d0:	f7ff fe14 	bl	20000ffc <ILI9341_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
200013d4:	8c3b      	ldrh	r3, [r7, #32]
200013d6:	0a1b      	lsrs	r3, r3, #8
200013d8:	b29b      	uxth	r3, r3
200013da:	b2db      	uxtb	r3, r3
200013dc:	733b      	strb	r3, [r7, #12]
200013de:	8c3b      	ldrh	r3, [r7, #32]
200013e0:	b2db      	uxtb	r3, r3
200013e2:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
200013e4:	2201      	movs	r2, #1
200013e6:	2101      	movs	r1, #1
200013e8:	4810      	ldr	r0, [pc, #64]	; (2000142c <ILI9341_FillRectangle+0xd0>)
200013ea:	f004 f843 	bl	20005474 <HAL_GPIO_WritePin>
	for (y = h; y > 0; y--) {
200013ee:	883b      	ldrh	r3, [r7, #0]
200013f0:	80bb      	strh	r3, [r7, #4]
200013f2:	e011      	b.n	20001418 <ILI9341_FillRectangle+0xbc>
		for (x = w; x > 0; x--) {
200013f4:	887b      	ldrh	r3, [r7, #2]
200013f6:	80fb      	strh	r3, [r7, #6]
200013f8:	e008      	b.n	2000140c <ILI9341_FillRectangle+0xb0>
			mySPISend(data, sizeof(data));
200013fa:	f107 030c 	add.w	r3, r7, #12
200013fe:	2102      	movs	r1, #2
20001400:	4618      	mov	r0, r3
20001402:	f7ff fd5b 	bl	20000ebc <mySPISend>
		for (x = w; x > 0; x--) {
20001406:	88fb      	ldrh	r3, [r7, #6]
20001408:	3b01      	subs	r3, #1
2000140a:	80fb      	strh	r3, [r7, #6]
2000140c:	88fb      	ldrh	r3, [r7, #6]
2000140e:	2b00      	cmp	r3, #0
20001410:	d1f3      	bne.n	200013fa <ILI9341_FillRectangle+0x9e>
	for (y = h; y > 0; y--) {
20001412:	88bb      	ldrh	r3, [r7, #4]
20001414:	3b01      	subs	r3, #1
20001416:	80bb      	strh	r3, [r7, #4]
20001418:	88bb      	ldrh	r3, [r7, #4]
2000141a:	2b00      	cmp	r3, #0
2000141c:	d1ea      	bne.n	200013f4 <ILI9341_FillRectangle+0x98>
		}
	}

	ILI9341_Unselect();
2000141e:	f7ff fd89 	bl	20000f34 <ILI9341_Unselect>
20001422:	e000      	b.n	20001426 <ILI9341_FillRectangle+0xca>
		return;
20001424:	bf00      	nop
}
20001426:	3714      	adds	r7, #20
20001428:	46bd      	mov	sp, r7
2000142a:	bd90      	pop	{r4, r7, pc}
2000142c:	40020400 	.word	0x40020400

20001430 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
20001430:	b580      	push	{r7, lr}
20001432:	b084      	sub	sp, #16
20001434:	af02      	add	r7, sp, #8
20001436:	4603      	mov	r3, r0
20001438:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
2000143a:	88fb      	ldrh	r3, [r7, #6]
2000143c:	9300      	str	r3, [sp, #0]
2000143e:	23f0      	movs	r3, #240	; 0xf0
20001440:	f44f 72a0 	mov.w	r2, #320	; 0x140
20001444:	2100      	movs	r1, #0
20001446:	2000      	movs	r0, #0
20001448:	f7ff ff88 	bl	2000135c <ILI9341_FillRectangle>
}
2000144c:	bf00      	nop
2000144e:	3708      	adds	r7, #8
20001450:	46bd      	mov	sp, r7
20001452:	bd80      	pop	{r7, pc}

20001454 <ILI9341_WriteMyChar>:

static void ILI9341_WriteMyChar(uint16_t x, uint16_t y, char ch, uint16_t color,
		uint16_t bgcolor) {
20001454:	b590      	push	{r4, r7, lr}
20001456:	b089      	sub	sp, #36	; 0x24
20001458:	af00      	add	r7, sp, #0
2000145a:	4604      	mov	r4, r0
2000145c:	4608      	mov	r0, r1
2000145e:	4611      	mov	r1, r2
20001460:	461a      	mov	r2, r3
20001462:	4623      	mov	r3, r4
20001464:	80fb      	strh	r3, [r7, #6]
20001466:	4603      	mov	r3, r0
20001468:	80bb      	strh	r3, [r7, #4]
2000146a:	460b      	mov	r3, r1
2000146c:	70fb      	strb	r3, [r7, #3]
2000146e:	4613      	mov	r3, r2
20001470:	803b      	strh	r3, [r7, #0]
	uint16_t i, j, value;
	uint32_t devider, b;

	ILI9341_SetAddressWindow(x, y,
			x + Font24x36_array[(ch - 32)].image->width - 1,
20001472:	78fb      	ldrb	r3, [r7, #3]
20001474:	3b20      	subs	r3, #32
20001476:	4a71      	ldr	r2, [pc, #452]	; (2000163c <ILI9341_WriteMyChar+0x1e8>)
20001478:	00db      	lsls	r3, r3, #3
2000147a:	4413      	add	r3, r2
2000147c:	685b      	ldr	r3, [r3, #4]
2000147e:	889a      	ldrh	r2, [r3, #4]
20001480:	88fb      	ldrh	r3, [r7, #6]
20001482:	4413      	add	r3, r2
20001484:	b29b      	uxth	r3, r3
	ILI9341_SetAddressWindow(x, y,
20001486:	3b01      	subs	r3, #1
20001488:	b29c      	uxth	r4, r3
			y + Font24x36_array[(ch - 32)].image->height - 1);
2000148a:	78fb      	ldrb	r3, [r7, #3]
2000148c:	3b20      	subs	r3, #32
2000148e:	4a6b      	ldr	r2, [pc, #428]	; (2000163c <ILI9341_WriteMyChar+0x1e8>)
20001490:	00db      	lsls	r3, r3, #3
20001492:	4413      	add	r3, r2
20001494:	685b      	ldr	r3, [r3, #4]
20001496:	88da      	ldrh	r2, [r3, #6]
20001498:	88bb      	ldrh	r3, [r7, #4]
2000149a:	4413      	add	r3, r2
2000149c:	b29b      	uxth	r3, r3
	ILI9341_SetAddressWindow(x, y,
2000149e:	3b01      	subs	r3, #1
200014a0:	b29b      	uxth	r3, r3
200014a2:	88b9      	ldrh	r1, [r7, #4]
200014a4:	88f8      	ldrh	r0, [r7, #6]
200014a6:	4622      	mov	r2, r4
200014a8:	f7ff fda8 	bl	20000ffc <ILI9341_SetAddressWindow>
	value = 1;
200014ac:	2301      	movs	r3, #1
200014ae:	837b      	strh	r3, [r7, #26]
	devider = 0x80;
200014b0:	2380      	movs	r3, #128	; 0x80
200014b2:	617b      	str	r3, [r7, #20]
	if ((Font24x36_array[(ch - 32)].image->width) > 8) {
200014b4:	78fb      	ldrb	r3, [r7, #3]
200014b6:	3b20      	subs	r3, #32
200014b8:	4a60      	ldr	r2, [pc, #384]	; (2000163c <ILI9341_WriteMyChar+0x1e8>)
200014ba:	00db      	lsls	r3, r3, #3
200014bc:	4413      	add	r3, r2
200014be:	685b      	ldr	r3, [r3, #4]
200014c0:	889b      	ldrh	r3, [r3, #4]
200014c2:	2b08      	cmp	r3, #8
200014c4:	d904      	bls.n	200014d0 <ILI9341_WriteMyChar+0x7c>
		value = 2;
200014c6:	2302      	movs	r3, #2
200014c8:	837b      	strh	r3, [r7, #26]
		devider = 0x8000;
200014ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
200014ce:	617b      	str	r3, [r7, #20]
	}
	if ((Font24x36_array[(ch - 32)].image->width) > 16) {
200014d0:	78fb      	ldrb	r3, [r7, #3]
200014d2:	3b20      	subs	r3, #32
200014d4:	4a59      	ldr	r2, [pc, #356]	; (2000163c <ILI9341_WriteMyChar+0x1e8>)
200014d6:	00db      	lsls	r3, r3, #3
200014d8:	4413      	add	r3, r2
200014da:	685b      	ldr	r3, [r3, #4]
200014dc:	889b      	ldrh	r3, [r3, #4]
200014de:	2b10      	cmp	r3, #16
200014e0:	d904      	bls.n	200014ec <ILI9341_WriteMyChar+0x98>
		value = 3;
200014e2:	2303      	movs	r3, #3
200014e4:	837b      	strh	r3, [r7, #26]
		devider = 0x800000;
200014e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
200014ea:	617b      	str	r3, [r7, #20]
	}
	if ((Font24x36_array[(ch - 32)].image->width) > 24) {
200014ec:	78fb      	ldrb	r3, [r7, #3]
200014ee:	3b20      	subs	r3, #32
200014f0:	4a52      	ldr	r2, [pc, #328]	; (2000163c <ILI9341_WriteMyChar+0x1e8>)
200014f2:	00db      	lsls	r3, r3, #3
200014f4:	4413      	add	r3, r2
200014f6:	685b      	ldr	r3, [r3, #4]
200014f8:	889b      	ldrh	r3, [r3, #4]
200014fa:	2b18      	cmp	r3, #24
200014fc:	d904      	bls.n	20001508 <ILI9341_WriteMyChar+0xb4>
		value = 4;
200014fe:	2304      	movs	r3, #4
20001500:	837b      	strh	r3, [r7, #26]
		devider = 0x80000000;
20001502:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
20001506:	617b      	str	r3, [r7, #20]
	}
	for (i = 0; i < (Font24x36_array[(ch - 32)].image->height) * value; i +=
20001508:	2300      	movs	r3, #0
2000150a:	83fb      	strh	r3, [r7, #30]
2000150c:	e081      	b.n	20001612 <ILI9341_WriteMyChar+0x1be>
			value) {
		b = Font24x36_array[(ch - 32)].image->data[i];
2000150e:	78fb      	ldrb	r3, [r7, #3]
20001510:	3b20      	subs	r3, #32
20001512:	4a4a      	ldr	r2, [pc, #296]	; (2000163c <ILI9341_WriteMyChar+0x1e8>)
20001514:	00db      	lsls	r3, r3, #3
20001516:	4413      	add	r3, r2
20001518:	685b      	ldr	r3, [r3, #4]
2000151a:	681a      	ldr	r2, [r3, #0]
2000151c:	8bfb      	ldrh	r3, [r7, #30]
2000151e:	4413      	add	r3, r2
20001520:	781b      	ldrb	r3, [r3, #0]
20001522:	613b      	str	r3, [r7, #16]
		if (value >= 2) {
20001524:	8b7b      	ldrh	r3, [r7, #26]
20001526:	2b01      	cmp	r3, #1
20001528:	d911      	bls.n	2000154e <ILI9341_WriteMyChar+0xfa>
			b = b << 8;
2000152a:	693b      	ldr	r3, [r7, #16]
2000152c:	021b      	lsls	r3, r3, #8
2000152e:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 1];
20001530:	78fb      	ldrb	r3, [r7, #3]
20001532:	3b20      	subs	r3, #32
20001534:	4a41      	ldr	r2, [pc, #260]	; (2000163c <ILI9341_WriteMyChar+0x1e8>)
20001536:	00db      	lsls	r3, r3, #3
20001538:	4413      	add	r3, r2
2000153a:	685b      	ldr	r3, [r3, #4]
2000153c:	681a      	ldr	r2, [r3, #0]
2000153e:	8bfb      	ldrh	r3, [r7, #30]
20001540:	3301      	adds	r3, #1
20001542:	4413      	add	r3, r2
20001544:	781b      	ldrb	r3, [r3, #0]
20001546:	461a      	mov	r2, r3
20001548:	693b      	ldr	r3, [r7, #16]
2000154a:	4313      	orrs	r3, r2
2000154c:	613b      	str	r3, [r7, #16]
		}
		if (value >= 3) {
2000154e:	8b7b      	ldrh	r3, [r7, #26]
20001550:	2b02      	cmp	r3, #2
20001552:	d911      	bls.n	20001578 <ILI9341_WriteMyChar+0x124>
			b = b << 8;
20001554:	693b      	ldr	r3, [r7, #16]
20001556:	021b      	lsls	r3, r3, #8
20001558:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 2];
2000155a:	78fb      	ldrb	r3, [r7, #3]
2000155c:	3b20      	subs	r3, #32
2000155e:	4a37      	ldr	r2, [pc, #220]	; (2000163c <ILI9341_WriteMyChar+0x1e8>)
20001560:	00db      	lsls	r3, r3, #3
20001562:	4413      	add	r3, r2
20001564:	685b      	ldr	r3, [r3, #4]
20001566:	681a      	ldr	r2, [r3, #0]
20001568:	8bfb      	ldrh	r3, [r7, #30]
2000156a:	3302      	adds	r3, #2
2000156c:	4413      	add	r3, r2
2000156e:	781b      	ldrb	r3, [r3, #0]
20001570:	461a      	mov	r2, r3
20001572:	693b      	ldr	r3, [r7, #16]
20001574:	4313      	orrs	r3, r2
20001576:	613b      	str	r3, [r7, #16]
		}
		if (value >= 4) {
20001578:	8b7b      	ldrh	r3, [r7, #26]
2000157a:	2b03      	cmp	r3, #3
2000157c:	d911      	bls.n	200015a2 <ILI9341_WriteMyChar+0x14e>
			b = b << 8;
2000157e:	693b      	ldr	r3, [r7, #16]
20001580:	021b      	lsls	r3, r3, #8
20001582:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 3];
20001584:	78fb      	ldrb	r3, [r7, #3]
20001586:	3b20      	subs	r3, #32
20001588:	4a2c      	ldr	r2, [pc, #176]	; (2000163c <ILI9341_WriteMyChar+0x1e8>)
2000158a:	00db      	lsls	r3, r3, #3
2000158c:	4413      	add	r3, r2
2000158e:	685b      	ldr	r3, [r3, #4]
20001590:	681a      	ldr	r2, [r3, #0]
20001592:	8bfb      	ldrh	r3, [r7, #30]
20001594:	3303      	adds	r3, #3
20001596:	4413      	add	r3, r2
20001598:	781b      	ldrb	r3, [r3, #0]
2000159a:	461a      	mov	r2, r3
2000159c:	693b      	ldr	r3, [r7, #16]
2000159e:	4313      	orrs	r3, r2
200015a0:	613b      	str	r3, [r7, #16]
		}
		for (j = 0; j < Font24x36_array[(ch - 32)].image->width; j++) {
200015a2:	2300      	movs	r3, #0
200015a4:	83bb      	strh	r3, [r7, #28]
200015a6:	e026      	b.n	200015f6 <ILI9341_WriteMyChar+0x1a2>
			if ((b << j) & devider) {
200015a8:	8bbb      	ldrh	r3, [r7, #28]
200015aa:	693a      	ldr	r2, [r7, #16]
200015ac:	409a      	lsls	r2, r3
200015ae:	697b      	ldr	r3, [r7, #20]
200015b0:	4013      	ands	r3, r2
200015b2:	2b00      	cmp	r3, #0
200015b4:	d00e      	beq.n	200015d4 <ILI9341_WriteMyChar+0x180>
				uint8_t data[] = { color >> 8, color & 0xFF };
200015b6:	883b      	ldrh	r3, [r7, #0]
200015b8:	0a1b      	lsrs	r3, r3, #8
200015ba:	b29b      	uxth	r3, r3
200015bc:	b2db      	uxtb	r3, r3
200015be:	733b      	strb	r3, [r7, #12]
200015c0:	883b      	ldrh	r3, [r7, #0]
200015c2:	b2db      	uxtb	r3, r3
200015c4:	737b      	strb	r3, [r7, #13]
				ILI9341_WriteData(data, sizeof(data));
200015c6:	f107 030c 	add.w	r3, r7, #12
200015ca:	2102      	movs	r1, #2
200015cc:	4618      	mov	r0, r3
200015ce:	f7ff fceb 	bl	20000fa8 <ILI9341_WriteData>
200015d2:	e00d      	b.n	200015f0 <ILI9341_WriteMyChar+0x19c>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
200015d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
200015d6:	0a1b      	lsrs	r3, r3, #8
200015d8:	b29b      	uxth	r3, r3
200015da:	b2db      	uxtb	r3, r3
200015dc:	723b      	strb	r3, [r7, #8]
200015de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
200015e0:	b2db      	uxtb	r3, r3
200015e2:	727b      	strb	r3, [r7, #9]
				ILI9341_WriteData(data, sizeof(data));
200015e4:	f107 0308 	add.w	r3, r7, #8
200015e8:	2102      	movs	r1, #2
200015ea:	4618      	mov	r0, r3
200015ec:	f7ff fcdc 	bl	20000fa8 <ILI9341_WriteData>
		for (j = 0; j < Font24x36_array[(ch - 32)].image->width; j++) {
200015f0:	8bbb      	ldrh	r3, [r7, #28]
200015f2:	3301      	adds	r3, #1
200015f4:	83bb      	strh	r3, [r7, #28]
200015f6:	78fb      	ldrb	r3, [r7, #3]
200015f8:	3b20      	subs	r3, #32
200015fa:	4a10      	ldr	r2, [pc, #64]	; (2000163c <ILI9341_WriteMyChar+0x1e8>)
200015fc:	00db      	lsls	r3, r3, #3
200015fe:	4413      	add	r3, r2
20001600:	685b      	ldr	r3, [r3, #4]
20001602:	889b      	ldrh	r3, [r3, #4]
20001604:	8bba      	ldrh	r2, [r7, #28]
20001606:	429a      	cmp	r2, r3
20001608:	d3ce      	bcc.n	200015a8 <ILI9341_WriteMyChar+0x154>
	for (i = 0; i < (Font24x36_array[(ch - 32)].image->height) * value; i +=
2000160a:	8bfa      	ldrh	r2, [r7, #30]
2000160c:	8b7b      	ldrh	r3, [r7, #26]
2000160e:	4413      	add	r3, r2
20001610:	83fb      	strh	r3, [r7, #30]
20001612:	8bfa      	ldrh	r2, [r7, #30]
20001614:	78fb      	ldrb	r3, [r7, #3]
20001616:	3b20      	subs	r3, #32
20001618:	4908      	ldr	r1, [pc, #32]	; (2000163c <ILI9341_WriteMyChar+0x1e8>)
2000161a:	00db      	lsls	r3, r3, #3
2000161c:	440b      	add	r3, r1
2000161e:	685b      	ldr	r3, [r3, #4]
20001620:	88db      	ldrh	r3, [r3, #6]
20001622:	4619      	mov	r1, r3
20001624:	8b7b      	ldrh	r3, [r7, #26]
20001626:	fb01 f303 	mul.w	r3, r1, r3
2000162a:	429a      	cmp	r2, r3
2000162c:	f6ff af6f 	blt.w	2000150e <ILI9341_WriteMyChar+0xba>
			}
		}
	}
}
20001630:	bf00      	nop
20001632:	bf00      	nop
20001634:	3724      	adds	r7, #36	; 0x24
20001636:	46bd      	mov	sp, r7
20001638:	bd90      	pop	{r4, r7, pc}
2000163a:	bf00      	nop
2000163c:	20013150 	.word	0x20013150

20001640 <ILI9341_WriteMyString>:

void ILI9341_WriteMyString(uint16_t x, uint16_t y, const char *str,
		uint16_t color, uint16_t bgcolor) {
20001640:	b590      	push	{r4, r7, lr}
20001642:	b087      	sub	sp, #28
20001644:	af02      	add	r7, sp, #8
20001646:	60ba      	str	r2, [r7, #8]
20001648:	461a      	mov	r2, r3
2000164a:	4603      	mov	r3, r0
2000164c:	81fb      	strh	r3, [r7, #14]
2000164e:	460b      	mov	r3, r1
20001650:	81bb      	strh	r3, [r7, #12]
20001652:	4613      	mov	r3, r2
20001654:	80fb      	strh	r3, [r7, #6]
	ILI9341_Select();
20001656:	f7ff fc5d 	bl	20000f14 <ILI9341_Select>
	while (*str) {
2000165a:	e045      	b.n	200016e8 <ILI9341_WriteMyString+0xa8>
		if (x + Font24x36_array[(*str - 32)].image->width >= ILI9341_WIDTH) {
2000165c:	89fa      	ldrh	r2, [r7, #14]
2000165e:	68bb      	ldr	r3, [r7, #8]
20001660:	781b      	ldrb	r3, [r3, #0]
20001662:	3b20      	subs	r3, #32
20001664:	4926      	ldr	r1, [pc, #152]	; (20001700 <ILI9341_WriteMyString+0xc0>)
20001666:	00db      	lsls	r3, r3, #3
20001668:	440b      	add	r3, r1
2000166a:	685b      	ldr	r3, [r3, #4]
2000166c:	889b      	ldrh	r3, [r3, #4]
2000166e:	4413      	add	r3, r2
20001670:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20001674:	db20      	blt.n	200016b8 <ILI9341_WriteMyString+0x78>
			x = 0;
20001676:	2300      	movs	r3, #0
20001678:	81fb      	strh	r3, [r7, #14]
			y += Font24x36_array[(*str - 32)].image->height;
2000167a:	68bb      	ldr	r3, [r7, #8]
2000167c:	781b      	ldrb	r3, [r3, #0]
2000167e:	3b20      	subs	r3, #32
20001680:	4a1f      	ldr	r2, [pc, #124]	; (20001700 <ILI9341_WriteMyString+0xc0>)
20001682:	00db      	lsls	r3, r3, #3
20001684:	4413      	add	r3, r2
20001686:	685b      	ldr	r3, [r3, #4]
20001688:	88da      	ldrh	r2, [r3, #6]
2000168a:	89bb      	ldrh	r3, [r7, #12]
2000168c:	4413      	add	r3, r2
2000168e:	81bb      	strh	r3, [r7, #12]
			if (y + Font24x36_array[(*str - 32)].image->height >= ILI9341_HEIGHT) {
20001690:	89ba      	ldrh	r2, [r7, #12]
20001692:	68bb      	ldr	r3, [r7, #8]
20001694:	781b      	ldrb	r3, [r3, #0]
20001696:	3b20      	subs	r3, #32
20001698:	4919      	ldr	r1, [pc, #100]	; (20001700 <ILI9341_WriteMyString+0xc0>)
2000169a:	00db      	lsls	r3, r3, #3
2000169c:	440b      	add	r3, r1
2000169e:	685b      	ldr	r3, [r3, #4]
200016a0:	88db      	ldrh	r3, [r3, #6]
200016a2:	4413      	add	r3, r2
200016a4:	2bef      	cmp	r3, #239	; 0xef
200016a6:	dc24      	bgt.n	200016f2 <ILI9341_WriteMyString+0xb2>
				break;
			}
			if (*str == ' ') {
200016a8:	68bb      	ldr	r3, [r7, #8]
200016aa:	781b      	ldrb	r3, [r3, #0]
200016ac:	2b20      	cmp	r3, #32
200016ae:	d103      	bne.n	200016b8 <ILI9341_WriteMyString+0x78>
				// skip spaces in the beginning of the new line
				str++;
200016b0:	68bb      	ldr	r3, [r7, #8]
200016b2:	3301      	adds	r3, #1
200016b4:	60bb      	str	r3, [r7, #8]
				continue;
200016b6:	e017      	b.n	200016e8 <ILI9341_WriteMyString+0xa8>
			}
		}
		ILI9341_WriteMyChar(x, y, *str, color, bgcolor);
200016b8:	68bb      	ldr	r3, [r7, #8]
200016ba:	781a      	ldrb	r2, [r3, #0]
200016bc:	88fc      	ldrh	r4, [r7, #6]
200016be:	89b9      	ldrh	r1, [r7, #12]
200016c0:	89f8      	ldrh	r0, [r7, #14]
200016c2:	8c3b      	ldrh	r3, [r7, #32]
200016c4:	9300      	str	r3, [sp, #0]
200016c6:	4623      	mov	r3, r4
200016c8:	f7ff fec4 	bl	20001454 <ILI9341_WriteMyChar>
		x += Font24x36_array[(*str - 32)].image->width;
200016cc:	68bb      	ldr	r3, [r7, #8]
200016ce:	781b      	ldrb	r3, [r3, #0]
200016d0:	3b20      	subs	r3, #32
200016d2:	4a0b      	ldr	r2, [pc, #44]	; (20001700 <ILI9341_WriteMyString+0xc0>)
200016d4:	00db      	lsls	r3, r3, #3
200016d6:	4413      	add	r3, r2
200016d8:	685b      	ldr	r3, [r3, #4]
200016da:	889a      	ldrh	r2, [r3, #4]
200016dc:	89fb      	ldrh	r3, [r7, #14]
200016de:	4413      	add	r3, r2
200016e0:	81fb      	strh	r3, [r7, #14]
		str++;
200016e2:	68bb      	ldr	r3, [r7, #8]
200016e4:	3301      	adds	r3, #1
200016e6:	60bb      	str	r3, [r7, #8]
	while (*str) {
200016e8:	68bb      	ldr	r3, [r7, #8]
200016ea:	781b      	ldrb	r3, [r3, #0]
200016ec:	2b00      	cmp	r3, #0
200016ee:	d1b5      	bne.n	2000165c <ILI9341_WriteMyString+0x1c>
200016f0:	e000      	b.n	200016f4 <ILI9341_WriteMyString+0xb4>
				break;
200016f2:	bf00      	nop
	}
	ILI9341_Unselect();
200016f4:	f7ff fc1e 	bl	20000f34 <ILI9341_Unselect>
}
200016f8:	bf00      	nop
200016fa:	3714      	adds	r7, #20
200016fc:	46bd      	mov	sp, r7
200016fe:	bd90      	pop	{r4, r7, pc}
20001700:	20013150 	.word	0x20013150

20001704 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font,
		uint16_t color, uint16_t bgcolor) {
20001704:	b082      	sub	sp, #8
20001706:	b590      	push	{r4, r7, lr}
20001708:	b089      	sub	sp, #36	; 0x24
2000170a:	af00      	add	r7, sp, #0
2000170c:	637b      	str	r3, [r7, #52]	; 0x34
2000170e:	4603      	mov	r3, r0
20001710:	80fb      	strh	r3, [r7, #6]
20001712:	460b      	mov	r3, r1
20001714:	80bb      	strh	r3, [r7, #4]
20001716:	4613      	mov	r3, r2
20001718:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ILI9341_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
2000171a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2000171e:	b29a      	uxth	r2, r3
20001720:	88fb      	ldrh	r3, [r7, #6]
20001722:	4413      	add	r3, r2
20001724:	b29b      	uxth	r3, r3
20001726:	3b01      	subs	r3, #1
20001728:	b29c      	uxth	r4, r3
2000172a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
2000172e:	b29a      	uxth	r2, r3
20001730:	88bb      	ldrh	r3, [r7, #4]
20001732:	4413      	add	r3, r2
20001734:	b29b      	uxth	r3, r3
20001736:	3b01      	subs	r3, #1
20001738:	b29b      	uxth	r3, r3
2000173a:	88b9      	ldrh	r1, [r7, #4]
2000173c:	88f8      	ldrh	r0, [r7, #6]
2000173e:	4622      	mov	r2, r4
20001740:	f7ff fc5c 	bl	20000ffc <ILI9341_SetAddressWindow>
	for (i = 0; i < font.height; i++) {
20001744:	2300      	movs	r3, #0
20001746:	61fb      	str	r3, [r7, #28]
20001748:	e043      	b.n	200017d2 <ILI9341_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
2000174a:	6bba      	ldr	r2, [r7, #56]	; 0x38
2000174c:	78fb      	ldrb	r3, [r7, #3]
2000174e:	3b20      	subs	r3, #32
20001750:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
20001754:	fb01 f303 	mul.w	r3, r1, r3
20001758:	4619      	mov	r1, r3
2000175a:	69fb      	ldr	r3, [r7, #28]
2000175c:	440b      	add	r3, r1
2000175e:	005b      	lsls	r3, r3, #1
20001760:	4413      	add	r3, r2
20001762:	881b      	ldrh	r3, [r3, #0]
20001764:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
20001766:	2300      	movs	r3, #0
20001768:	61bb      	str	r3, [r7, #24]
2000176a:	e029      	b.n	200017c0 <ILI9341_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
2000176c:	697a      	ldr	r2, [r7, #20]
2000176e:	69bb      	ldr	r3, [r7, #24]
20001770:	fa02 f303 	lsl.w	r3, r2, r3
20001774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
20001778:	2b00      	cmp	r3, #0
2000177a:	d00e      	beq.n	2000179a <ILI9341_WriteChar+0x96>
				uint8_t data[] = { color >> 8, color & 0xFF };
2000177c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
2000177e:	0a1b      	lsrs	r3, r3, #8
20001780:	b29b      	uxth	r3, r3
20001782:	b2db      	uxtb	r3, r3
20001784:	743b      	strb	r3, [r7, #16]
20001786:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
20001788:	b2db      	uxtb	r3, r3
2000178a:	747b      	strb	r3, [r7, #17]
				ILI9341_WriteData(data, sizeof(data));
2000178c:	f107 0310 	add.w	r3, r7, #16
20001790:	2102      	movs	r1, #2
20001792:	4618      	mov	r0, r3
20001794:	f7ff fc08 	bl	20000fa8 <ILI9341_WriteData>
20001798:	e00f      	b.n	200017ba <ILI9341_WriteChar+0xb6>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
2000179a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
2000179e:	0a1b      	lsrs	r3, r3, #8
200017a0:	b29b      	uxth	r3, r3
200017a2:	b2db      	uxtb	r3, r3
200017a4:	733b      	strb	r3, [r7, #12]
200017a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
200017aa:	b2db      	uxtb	r3, r3
200017ac:	737b      	strb	r3, [r7, #13]
				ILI9341_WriteData(data, sizeof(data));
200017ae:	f107 030c 	add.w	r3, r7, #12
200017b2:	2102      	movs	r1, #2
200017b4:	4618      	mov	r0, r3
200017b6:	f7ff fbf7 	bl	20000fa8 <ILI9341_WriteData>
		for (j = 0; j < font.width; j++) {
200017ba:	69bb      	ldr	r3, [r7, #24]
200017bc:	3301      	adds	r3, #1
200017be:	61bb      	str	r3, [r7, #24]
200017c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
200017c4:	461a      	mov	r2, r3
200017c6:	69bb      	ldr	r3, [r7, #24]
200017c8:	4293      	cmp	r3, r2
200017ca:	d3cf      	bcc.n	2000176c <ILI9341_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
200017cc:	69fb      	ldr	r3, [r7, #28]
200017ce:	3301      	adds	r3, #1
200017d0:	61fb      	str	r3, [r7, #28]
200017d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
200017d6:	461a      	mov	r2, r3
200017d8:	69fb      	ldr	r3, [r7, #28]
200017da:	4293      	cmp	r3, r2
200017dc:	d3b5      	bcc.n	2000174a <ILI9341_WriteChar+0x46>
			}
		}
	}
}
200017de:	bf00      	nop
200017e0:	bf00      	nop
200017e2:	3724      	adds	r7, #36	; 0x24
200017e4:	46bd      	mov	sp, r7
200017e6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
200017ea:	b002      	add	sp, #8
200017ec:	4770      	bx	lr

200017ee <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font,
		uint16_t color, uint16_t bgcolor) {
200017ee:	b082      	sub	sp, #8
200017f0:	b580      	push	{r7, lr}
200017f2:	b086      	sub	sp, #24
200017f4:	af04      	add	r7, sp, #16
200017f6:	603a      	str	r2, [r7, #0]
200017f8:	617b      	str	r3, [r7, #20]
200017fa:	4603      	mov	r3, r0
200017fc:	80fb      	strh	r3, [r7, #6]
200017fe:	460b      	mov	r3, r1
20001800:	80bb      	strh	r3, [r7, #4]
	ILI9341_Select();
20001802:	f7ff fb87 	bl	20000f14 <ILI9341_Select>

	while (*str) {
20001806:	e02e      	b.n	20001866 <ILI9341_WriteString+0x78>
		if (x + font.width >= ILI9341_WIDTH) {
20001808:	88fb      	ldrh	r3, [r7, #6]
2000180a:	7d3a      	ldrb	r2, [r7, #20]
2000180c:	4413      	add	r3, r2
2000180e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20001812:	db13      	blt.n	2000183c <ILI9341_WriteString+0x4e>
			x = 0;
20001814:	2300      	movs	r3, #0
20001816:	80fb      	strh	r3, [r7, #6]
			y += font.height;
20001818:	7d7b      	ldrb	r3, [r7, #21]
2000181a:	b29a      	uxth	r2, r3
2000181c:	88bb      	ldrh	r3, [r7, #4]
2000181e:	4413      	add	r3, r2
20001820:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ILI9341_HEIGHT) {
20001822:	88bb      	ldrh	r3, [r7, #4]
20001824:	7d7a      	ldrb	r2, [r7, #21]
20001826:	4413      	add	r3, r2
20001828:	2bef      	cmp	r3, #239	; 0xef
2000182a:	dc21      	bgt.n	20001870 <ILI9341_WriteString+0x82>
				break;
			}
			if (*str == ' ') {
2000182c:	683b      	ldr	r3, [r7, #0]
2000182e:	781b      	ldrb	r3, [r3, #0]
20001830:	2b20      	cmp	r3, #32
20001832:	d103      	bne.n	2000183c <ILI9341_WriteString+0x4e>
				// skip spaces in the beginning of the new line
				str++;
20001834:	683b      	ldr	r3, [r7, #0]
20001836:	3301      	adds	r3, #1
20001838:	603b      	str	r3, [r7, #0]
				continue;
2000183a:	e014      	b.n	20001866 <ILI9341_WriteString+0x78>
			}
		}
		ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
2000183c:	683b      	ldr	r3, [r7, #0]
2000183e:	781a      	ldrb	r2, [r3, #0]
20001840:	88b9      	ldrh	r1, [r7, #4]
20001842:	88f8      	ldrh	r0, [r7, #6]
20001844:	8c3b      	ldrh	r3, [r7, #32]
20001846:	9302      	str	r3, [sp, #8]
20001848:	8bbb      	ldrh	r3, [r7, #28]
2000184a:	9301      	str	r3, [sp, #4]
2000184c:	69bb      	ldr	r3, [r7, #24]
2000184e:	9300      	str	r3, [sp, #0]
20001850:	697b      	ldr	r3, [r7, #20]
20001852:	f7ff ff57 	bl	20001704 <ILI9341_WriteChar>
		x += font.width;
20001856:	7d3b      	ldrb	r3, [r7, #20]
20001858:	b29a      	uxth	r2, r3
2000185a:	88fb      	ldrh	r3, [r7, #6]
2000185c:	4413      	add	r3, r2
2000185e:	80fb      	strh	r3, [r7, #6]
		str++;
20001860:	683b      	ldr	r3, [r7, #0]
20001862:	3301      	adds	r3, #1
20001864:	603b      	str	r3, [r7, #0]
	while (*str) {
20001866:	683b      	ldr	r3, [r7, #0]
20001868:	781b      	ldrb	r3, [r3, #0]
2000186a:	2b00      	cmp	r3, #0
2000186c:	d1cc      	bne.n	20001808 <ILI9341_WriteString+0x1a>
2000186e:	e000      	b.n	20001872 <ILI9341_WriteString+0x84>
				break;
20001870:	bf00      	nop
	}

	ILI9341_Unselect();
20001872:	f7ff fb5f 	bl	20000f34 <ILI9341_Unselect>
}
20001876:	bf00      	nop
20001878:	3708      	adds	r7, #8
2000187a:	46bd      	mov	sp, r7
2000187c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
20001880:	b002      	add	sp, #8
20001882:	4770      	bx	lr

20001884 <ILI9341_DrawImage>:
void ILI9341_DeleteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor) {
	ILI9341_FillRectangle (x,y, strlen(str) * font.width, font.height, bgcolor);
}

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		const uint16_t *data) {
20001884:	b590      	push	{r4, r7, lr}
20001886:	b083      	sub	sp, #12
20001888:	af00      	add	r7, sp, #0
2000188a:	4604      	mov	r4, r0
2000188c:	4608      	mov	r0, r1
2000188e:	4611      	mov	r1, r2
20001890:	461a      	mov	r2, r3
20001892:	4623      	mov	r3, r4
20001894:	80fb      	strh	r3, [r7, #6]
20001896:	4603      	mov	r3, r0
20001898:	80bb      	strh	r3, [r7, #4]
2000189a:	460b      	mov	r3, r1
2000189c:	807b      	strh	r3, [r7, #2]
2000189e:	4613      	mov	r3, r2
200018a0:	803b      	strh	r3, [r7, #0]
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
200018a2:	88fb      	ldrh	r3, [r7, #6]
200018a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
200018a8:	d22c      	bcs.n	20001904 <ILI9341_DrawImage+0x80>
200018aa:	88bb      	ldrh	r3, [r7, #4]
200018ac:	2bef      	cmp	r3, #239	; 0xef
200018ae:	d829      	bhi.n	20001904 <ILI9341_DrawImage+0x80>
		return;
	if ((x + w - 1) >= ILI9341_WIDTH)
200018b0:	88fa      	ldrh	r2, [r7, #6]
200018b2:	887b      	ldrh	r3, [r7, #2]
200018b4:	4413      	add	r3, r2
200018b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
200018ba:	dc25      	bgt.n	20001908 <ILI9341_DrawImage+0x84>
		return;
	if ((y + h - 1) >= ILI9341_HEIGHT)
200018bc:	88ba      	ldrh	r2, [r7, #4]
200018be:	883b      	ldrh	r3, [r7, #0]
200018c0:	4413      	add	r3, r2
200018c2:	2bf0      	cmp	r3, #240	; 0xf0
200018c4:	dc22      	bgt.n	2000190c <ILI9341_DrawImage+0x88>
		return;

	ILI9341_Select();
200018c6:	f7ff fb25 	bl	20000f14 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + w - 1, y + h - 1);
200018ca:	88fa      	ldrh	r2, [r7, #6]
200018cc:	887b      	ldrh	r3, [r7, #2]
200018ce:	4413      	add	r3, r2
200018d0:	b29b      	uxth	r3, r3
200018d2:	3b01      	subs	r3, #1
200018d4:	b29c      	uxth	r4, r3
200018d6:	88ba      	ldrh	r2, [r7, #4]
200018d8:	883b      	ldrh	r3, [r7, #0]
200018da:	4413      	add	r3, r2
200018dc:	b29b      	uxth	r3, r3
200018de:	3b01      	subs	r3, #1
200018e0:	b29b      	uxth	r3, r3
200018e2:	88b9      	ldrh	r1, [r7, #4]
200018e4:	88f8      	ldrh	r0, [r7, #6]
200018e6:	4622      	mov	r2, r4
200018e8:	f7ff fb88 	bl	20000ffc <ILI9341_SetAddressWindow>
	ILI9341_WriteData((uint8_t*) data, sizeof(uint16_t) * w * h);
200018ec:	887b      	ldrh	r3, [r7, #2]
200018ee:	883a      	ldrh	r2, [r7, #0]
200018f0:	fb02 f303 	mul.w	r3, r2, r3
200018f4:	005b      	lsls	r3, r3, #1
200018f6:	4619      	mov	r1, r3
200018f8:	69b8      	ldr	r0, [r7, #24]
200018fa:	f7ff fb55 	bl	20000fa8 <ILI9341_WriteData>
	ILI9341_Unselect();
200018fe:	f7ff fb19 	bl	20000f34 <ILI9341_Unselect>
20001902:	e004      	b.n	2000190e <ILI9341_DrawImage+0x8a>
		return;
20001904:	bf00      	nop
20001906:	e002      	b.n	2000190e <ILI9341_DrawImage+0x8a>
		return;
20001908:	bf00      	nop
2000190a:	e000      	b.n	2000190e <ILI9341_DrawImage+0x8a>
		return;
2000190c:	bf00      	nop
}
2000190e:	370c      	adds	r7, #12
20001910:	46bd      	mov	sp, r7
20001912:	bd90      	pop	{r4, r7, pc}

20001914 <ILI9341_DrawMonochromeImage>:

void ILI9341_DrawMonochromeImage(uint16_t x, uint16_t y, uint16_t color,
		uint16_t bgcolor, tImage image) {
20001914:	b590      	push	{r4, r7, lr}
20001916:	b08b      	sub	sp, #44	; 0x2c
20001918:	af00      	add	r7, sp, #0
2000191a:	4604      	mov	r4, r0
2000191c:	4608      	mov	r0, r1
2000191e:	4611      	mov	r1, r2
20001920:	461a      	mov	r2, r3
20001922:	4623      	mov	r3, r4
20001924:	80fb      	strh	r3, [r7, #6]
20001926:	4603      	mov	r3, r0
20001928:	80bb      	strh	r3, [r7, #4]
2000192a:	460b      	mov	r3, r1
2000192c:	807b      	strh	r3, [r7, #2]
2000192e:	4613      	mov	r3, r2
20001930:	803b      	strh	r3, [r7, #0]
	uint16_t b, devider, siz, count;
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
20001932:	88fb      	ldrh	r3, [r7, #6]
20001934:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20001938:	d279      	bcs.n	20001a2e <ILI9341_DrawMonochromeImage+0x11a>
2000193a:	88bb      	ldrh	r3, [r7, #4]
2000193c:	2bef      	cmp	r3, #239	; 0xef
2000193e:	d876      	bhi.n	20001a2e <ILI9341_DrawMonochromeImage+0x11a>
		return;
	devider = wholeDevider(image.height, 8);
20001940:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
20001942:	b21b      	sxth	r3, r3
20001944:	2108      	movs	r1, #8
20001946:	4618      	mov	r0, r3
20001948:	f002 fb8d 	bl	20004066 <wholeDevider>
2000194c:	4603      	mov	r3, r0
2000194e:	82fb      	strh	r3, [r7, #22]
	siz = devider * image.width;
20001950:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
20001952:	8afa      	ldrh	r2, [r7, #22]
20001954:	fb12 f303 	smulbb	r3, r2, r3
20001958:	82bb      	strh	r3, [r7, #20]
	ILI9341_Select();
2000195a:	f7ff fadb 	bl	20000f14 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + image.width - 1, y + image.height - 1);
2000195e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
20001960:	88fb      	ldrh	r3, [r7, #6]
20001962:	4413      	add	r3, r2
20001964:	b29b      	uxth	r3, r3
20001966:	3b01      	subs	r3, #1
20001968:	b29c      	uxth	r4, r3
2000196a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
2000196c:	88bb      	ldrh	r3, [r7, #4]
2000196e:	4413      	add	r3, r2
20001970:	b29b      	uxth	r3, r3
20001972:	3b01      	subs	r3, #1
20001974:	b29b      	uxth	r3, r3
20001976:	88b9      	ldrh	r1, [r7, #4]
20001978:	88f8      	ldrh	r0, [r7, #6]
2000197a:	4622      	mov	r2, r4
2000197c:	f7ff fb3e 	bl	20000ffc <ILI9341_SetAddressWindow>

	for (int i = 0; i < siz; i += devider) {
20001980:	2300      	movs	r3, #0
20001982:	623b      	str	r3, [r7, #32]
20001984:	e04c      	b.n	20001a20 <ILI9341_DrawMonochromeImage+0x10c>
		count = image.width;
20001986:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
20001988:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (int u = 0; u < devider; u++) {
2000198a:	2300      	movs	r3, #0
2000198c:	61fb      	str	r3, [r7, #28]
2000198e:	e03f      	b.n	20001a10 <ILI9341_DrawMonochromeImage+0xfc>
			b = image.data[i + u];
20001990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001992:	6a39      	ldr	r1, [r7, #32]
20001994:	69fa      	ldr	r2, [r7, #28]
20001996:	440a      	add	r2, r1
20001998:	4413      	add	r3, r2
2000199a:	781b      	ldrb	r3, [r3, #0]
2000199c:	827b      	strh	r3, [r7, #18]
			for (int j = 0; j < 8; j++) {
2000199e:	2300      	movs	r3, #0
200019a0:	61bb      	str	r3, [r7, #24]
200019a2:	e02d      	b.n	20001a00 <ILI9341_DrawMonochromeImage+0xec>
				if (count == 0) break;
200019a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
200019a6:	2b00      	cmp	r3, #0
200019a8:	d02e      	beq.n	20001a08 <ILI9341_DrawMonochromeImage+0xf4>
				count --;
200019aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
200019ac:	3b01      	subs	r3, #1
200019ae:	84fb      	strh	r3, [r7, #38]	; 0x26
				if ((b << j) & 0x80) {
200019b0:	8a7a      	ldrh	r2, [r7, #18]
200019b2:	69bb      	ldr	r3, [r7, #24]
200019b4:	fa02 f303 	lsl.w	r3, r2, r3
200019b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
200019bc:	2b00      	cmp	r3, #0
200019be:	d00e      	beq.n	200019de <ILI9341_DrawMonochromeImage+0xca>
					uint8_t data[] = { color >> 8, color & 0xFF };
200019c0:	887b      	ldrh	r3, [r7, #2]
200019c2:	0a1b      	lsrs	r3, r3, #8
200019c4:	b29b      	uxth	r3, r3
200019c6:	b2db      	uxtb	r3, r3
200019c8:	743b      	strb	r3, [r7, #16]
200019ca:	887b      	ldrh	r3, [r7, #2]
200019cc:	b2db      	uxtb	r3, r3
200019ce:	747b      	strb	r3, [r7, #17]
					ILI9341_WriteData(data, sizeof(data));
200019d0:	f107 0310 	add.w	r3, r7, #16
200019d4:	2102      	movs	r1, #2
200019d6:	4618      	mov	r0, r3
200019d8:	f7ff fae6 	bl	20000fa8 <ILI9341_WriteData>
200019dc:	e00d      	b.n	200019fa <ILI9341_DrawMonochromeImage+0xe6>
				} else {
					uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
200019de:	883b      	ldrh	r3, [r7, #0]
200019e0:	0a1b      	lsrs	r3, r3, #8
200019e2:	b29b      	uxth	r3, r3
200019e4:	b2db      	uxtb	r3, r3
200019e6:	733b      	strb	r3, [r7, #12]
200019e8:	883b      	ldrh	r3, [r7, #0]
200019ea:	b2db      	uxtb	r3, r3
200019ec:	737b      	strb	r3, [r7, #13]
					ILI9341_WriteData(data, sizeof(data));
200019ee:	f107 030c 	add.w	r3, r7, #12
200019f2:	2102      	movs	r1, #2
200019f4:	4618      	mov	r0, r3
200019f6:	f7ff fad7 	bl	20000fa8 <ILI9341_WriteData>
			for (int j = 0; j < 8; j++) {
200019fa:	69bb      	ldr	r3, [r7, #24]
200019fc:	3301      	adds	r3, #1
200019fe:	61bb      	str	r3, [r7, #24]
20001a00:	69bb      	ldr	r3, [r7, #24]
20001a02:	2b07      	cmp	r3, #7
20001a04:	ddce      	ble.n	200019a4 <ILI9341_DrawMonochromeImage+0x90>
20001a06:	e000      	b.n	20001a0a <ILI9341_DrawMonochromeImage+0xf6>
				if (count == 0) break;
20001a08:	bf00      	nop
		for (int u = 0; u < devider; u++) {
20001a0a:	69fb      	ldr	r3, [r7, #28]
20001a0c:	3301      	adds	r3, #1
20001a0e:	61fb      	str	r3, [r7, #28]
20001a10:	8afb      	ldrh	r3, [r7, #22]
20001a12:	69fa      	ldr	r2, [r7, #28]
20001a14:	429a      	cmp	r2, r3
20001a16:	dbbb      	blt.n	20001990 <ILI9341_DrawMonochromeImage+0x7c>
	for (int i = 0; i < siz; i += devider) {
20001a18:	8afb      	ldrh	r3, [r7, #22]
20001a1a:	6a3a      	ldr	r2, [r7, #32]
20001a1c:	4413      	add	r3, r2
20001a1e:	623b      	str	r3, [r7, #32]
20001a20:	8abb      	ldrh	r3, [r7, #20]
20001a22:	6a3a      	ldr	r2, [r7, #32]
20001a24:	429a      	cmp	r2, r3
20001a26:	dbae      	blt.n	20001986 <ILI9341_DrawMonochromeImage+0x72>
				}
			}
		}
	}
	ILI9341_Unselect();
20001a28:	f7ff fa84 	bl	20000f34 <ILI9341_Unselect>
20001a2c:	e000      	b.n	20001a30 <ILI9341_DrawMonochromeImage+0x11c>
		return;
20001a2e:	bf00      	nop
}
20001a30:	372c      	adds	r7, #44	; 0x2c
20001a32:	46bd      	mov	sp, r7
20001a34:	bd90      	pop	{r4, r7, pc}

20001a36 <writeFastVLine>:
 @param    x   Top-most x coordinate
 @param    y   Top-most y coordinate
 @param    h   Height in pixels
 @param    color 16-bit 5-6-5 Color to fill with
 **************************************************************************/
void writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
20001a36:	b590      	push	{r4, r7, lr}
20001a38:	b085      	sub	sp, #20
20001a3a:	af02      	add	r7, sp, #8
20001a3c:	4604      	mov	r4, r0
20001a3e:	4608      	mov	r0, r1
20001a40:	4611      	mov	r1, r2
20001a42:	461a      	mov	r2, r3
20001a44:	4623      	mov	r3, r4
20001a46:	80fb      	strh	r3, [r7, #6]
20001a48:	4603      	mov	r3, r0
20001a4a:	80bb      	strh	r3, [r7, #4]
20001a4c:	460b      	mov	r3, r1
20001a4e:	807b      	strh	r3, [r7, #2]
20001a50:	4613      	mov	r3, r2
20001a52:	803b      	strh	r3, [r7, #0]
	ILI9341_Select();
20001a54:	f7ff fa5e 	bl	20000f14 <ILI9341_Select>
	ILI9341_FillRectangle(x, y, 1, h, color);
20001a58:	88f8      	ldrh	r0, [r7, #6]
20001a5a:	88b9      	ldrh	r1, [r7, #4]
20001a5c:	887a      	ldrh	r2, [r7, #2]
20001a5e:	883b      	ldrh	r3, [r7, #0]
20001a60:	9300      	str	r3, [sp, #0]
20001a62:	4613      	mov	r3, r2
20001a64:	2201      	movs	r2, #1
20001a66:	f7ff fc79 	bl	2000135c <ILI9341_FillRectangle>
	//writeLine(x, y, x, y + h - 1, color);
	ILI9341_Unselect();
20001a6a:	f7ff fa63 	bl	20000f34 <ILI9341_Unselect>
}
20001a6e:	bf00      	nop
20001a70:	370c      	adds	r7, #12
20001a72:	46bd      	mov	sp, r7
20001a74:	bd90      	pop	{r4, r7, pc}

20001a76 <writeFastHLine>:
 @param    x   Left-most x coordinate
 @param    y   Left-most y coordinate
 @param    w   Width in pixels
 @param    color 16-bit 5-6-5 Color to fill with
 **************************************************************************/
void writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
20001a76:	b590      	push	{r4, r7, lr}
20001a78:	b085      	sub	sp, #20
20001a7a:	af02      	add	r7, sp, #8
20001a7c:	4604      	mov	r4, r0
20001a7e:	4608      	mov	r0, r1
20001a80:	4611      	mov	r1, r2
20001a82:	461a      	mov	r2, r3
20001a84:	4623      	mov	r3, r4
20001a86:	80fb      	strh	r3, [r7, #6]
20001a88:	4603      	mov	r3, r0
20001a8a:	80bb      	strh	r3, [r7, #4]
20001a8c:	460b      	mov	r3, r1
20001a8e:	807b      	strh	r3, [r7, #2]
20001a90:	4613      	mov	r3, r2
20001a92:	803b      	strh	r3, [r7, #0]
	ILI9341_Select();
20001a94:	f7ff fa3e 	bl	20000f14 <ILI9341_Select>
	ILI9341_FillRectangle(x, y, w, 1, color);
20001a98:	88f8      	ldrh	r0, [r7, #6]
20001a9a:	88b9      	ldrh	r1, [r7, #4]
20001a9c:	887a      	ldrh	r2, [r7, #2]
20001a9e:	883b      	ldrh	r3, [r7, #0]
20001aa0:	9300      	str	r3, [sp, #0]
20001aa2:	2301      	movs	r3, #1
20001aa4:	f7ff fc5a 	bl	2000135c <ILI9341_FillRectangle>
	//writeLine(x, y, x + w - 1, y, color);
	ILI9341_Unselect();
20001aa8:	f7ff fa44 	bl	20000f34 <ILI9341_Unselect>
}
20001aac:	bf00      	nop
20001aae:	370c      	adds	r7, #12
20001ab0:	46bd      	mov	sp, r7
20001ab2:	bd90      	pop	{r4, r7, pc}

20001ab4 <drawRect>:
 @param    y   Top left corner y coordinate
 @param    w   Width in pixels
 @param    h   Height in pixels
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
20001ab4:	b590      	push	{r4, r7, lr}
20001ab6:	b083      	sub	sp, #12
20001ab8:	af00      	add	r7, sp, #0
20001aba:	4604      	mov	r4, r0
20001abc:	4608      	mov	r0, r1
20001abe:	4611      	mov	r1, r2
20001ac0:	461a      	mov	r2, r3
20001ac2:	4623      	mov	r3, r4
20001ac4:	80fb      	strh	r3, [r7, #6]
20001ac6:	4603      	mov	r3, r0
20001ac8:	80bb      	strh	r3, [r7, #4]
20001aca:	460b      	mov	r3, r1
20001acc:	807b      	strh	r3, [r7, #2]
20001ace:	4613      	mov	r3, r2
20001ad0:	803b      	strh	r3, [r7, #0]
	writeFastHLine(x, y, w, color);
20001ad2:	8b3b      	ldrh	r3, [r7, #24]
20001ad4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
20001ad8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
20001adc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
20001ae0:	f7ff ffc9 	bl	20001a76 <writeFastHLine>
	writeFastHLine(x, y + h - 1, w, color);
20001ae4:	88ba      	ldrh	r2, [r7, #4]
20001ae6:	883b      	ldrh	r3, [r7, #0]
20001ae8:	4413      	add	r3, r2
20001aea:	b29b      	uxth	r3, r3
20001aec:	3b01      	subs	r3, #1
20001aee:	b29b      	uxth	r3, r3
20001af0:	b219      	sxth	r1, r3
20001af2:	8b3b      	ldrh	r3, [r7, #24]
20001af4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
20001af8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
20001afc:	f7ff ffbb 	bl	20001a76 <writeFastHLine>
	writeFastVLine(x, y, h, color);
20001b00:	8b3b      	ldrh	r3, [r7, #24]
20001b02:	f9b7 2000 	ldrsh.w	r2, [r7]
20001b06:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
20001b0a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
20001b0e:	f7ff ff92 	bl	20001a36 <writeFastVLine>
	writeFastVLine(x + w - 1, y, h, color);
20001b12:	88fa      	ldrh	r2, [r7, #6]
20001b14:	887b      	ldrh	r3, [r7, #2]
20001b16:	4413      	add	r3, r2
20001b18:	b29b      	uxth	r3, r3
20001b1a:	3b01      	subs	r3, #1
20001b1c:	b29b      	uxth	r3, r3
20001b1e:	b218      	sxth	r0, r3
20001b20:	8b3b      	ldrh	r3, [r7, #24]
20001b22:	f9b7 2000 	ldrsh.w	r2, [r7]
20001b26:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
20001b2a:	f7ff ff84 	bl	20001a36 <writeFastVLine>
}
20001b2e:	bf00      	nop
20001b30:	370c      	adds	r7, #12
20001b32:	46bd      	mov	sp, r7
20001b34:	bd90      	pop	{r4, r7, pc}

20001b36 <drawCircleHelper>:
 @param    r   Radius of circle
 @param    cornername  Mask bit #1 or bit #2 to indicate which quarters of the circle we're doing
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
20001b36:	b590      	push	{r4, r7, lr}
20001b38:	b087      	sub	sp, #28
20001b3a:	af00      	add	r7, sp, #0
20001b3c:	4604      	mov	r4, r0
20001b3e:	4608      	mov	r0, r1
20001b40:	4611      	mov	r1, r2
20001b42:	461a      	mov	r2, r3
20001b44:	4623      	mov	r3, r4
20001b46:	80fb      	strh	r3, [r7, #6]
20001b48:	4603      	mov	r3, r0
20001b4a:	80bb      	strh	r3, [r7, #4]
20001b4c:	460b      	mov	r3, r1
20001b4e:	807b      	strh	r3, [r7, #2]
20001b50:	4613      	mov	r3, r2
20001b52:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
20001b54:	887b      	ldrh	r3, [r7, #2]
20001b56:	f1c3 0301 	rsb	r3, r3, #1
20001b5a:	b29b      	uxth	r3, r3
20001b5c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
20001b5e:	2301      	movs	r3, #1
20001b60:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
20001b62:	887b      	ldrh	r3, [r7, #2]
20001b64:	461a      	mov	r2, r3
20001b66:	03d2      	lsls	r2, r2, #15
20001b68:	1ad3      	subs	r3, r2, r3
20001b6a:	005b      	lsls	r3, r3, #1
20001b6c:	b29b      	uxth	r3, r3
20001b6e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
20001b70:	2300      	movs	r3, #0
20001b72:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
20001b74:	887b      	ldrh	r3, [r7, #2]
20001b76:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
20001b78:	e095      	b.n	20001ca6 <drawCircleHelper+0x170>
		if (f >= 0) {
20001b7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
20001b7e:	2b00      	cmp	r3, #0
20001b80:	db0e      	blt.n	20001ba0 <drawCircleHelper+0x6a>
			y--;
20001b82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001b86:	b29b      	uxth	r3, r3
20001b88:	3b01      	subs	r3, #1
20001b8a:	b29b      	uxth	r3, r3
20001b8c:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
20001b8e:	8a7b      	ldrh	r3, [r7, #18]
20001b90:	3302      	adds	r3, #2
20001b92:	b29b      	uxth	r3, r3
20001b94:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
20001b96:	8afa      	ldrh	r2, [r7, #22]
20001b98:	8a7b      	ldrh	r3, [r7, #18]
20001b9a:	4413      	add	r3, r2
20001b9c:	b29b      	uxth	r3, r3
20001b9e:	82fb      	strh	r3, [r7, #22]
		}
		x++;
20001ba0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
20001ba4:	b29b      	uxth	r3, r3
20001ba6:	3301      	adds	r3, #1
20001ba8:	b29b      	uxth	r3, r3
20001baa:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
20001bac:	8abb      	ldrh	r3, [r7, #20]
20001bae:	3302      	adds	r3, #2
20001bb0:	b29b      	uxth	r3, r3
20001bb2:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
20001bb4:	8afa      	ldrh	r2, [r7, #22]
20001bb6:	8abb      	ldrh	r3, [r7, #20]
20001bb8:	4413      	add	r3, r2
20001bba:	b29b      	uxth	r3, r3
20001bbc:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
20001bbe:	787b      	ldrb	r3, [r7, #1]
20001bc0:	f003 0304 	and.w	r3, r3, #4
20001bc4:	2b00      	cmp	r3, #0
20001bc6:	d017      	beq.n	20001bf8 <drawCircleHelper+0xc2>
			ILI9341_DrawPixel(x0 + x, y0 + y, color);
20001bc8:	88fa      	ldrh	r2, [r7, #6]
20001bca:	8a3b      	ldrh	r3, [r7, #16]
20001bcc:	4413      	add	r3, r2
20001bce:	b298      	uxth	r0, r3
20001bd0:	88ba      	ldrh	r2, [r7, #4]
20001bd2:	89fb      	ldrh	r3, [r7, #14]
20001bd4:	4413      	add	r3, r2
20001bd6:	b29b      	uxth	r3, r3
20001bd8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
20001bda:	4619      	mov	r1, r3
20001bdc:	f7ff fb8c 	bl	200012f8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 + y, y0 + x, color);
20001be0:	88fa      	ldrh	r2, [r7, #6]
20001be2:	89fb      	ldrh	r3, [r7, #14]
20001be4:	4413      	add	r3, r2
20001be6:	b298      	uxth	r0, r3
20001be8:	88ba      	ldrh	r2, [r7, #4]
20001bea:	8a3b      	ldrh	r3, [r7, #16]
20001bec:	4413      	add	r3, r2
20001bee:	b29b      	uxth	r3, r3
20001bf0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
20001bf2:	4619      	mov	r1, r3
20001bf4:	f7ff fb80 	bl	200012f8 <ILI9341_DrawPixel>
		}
		if (cornername & 0x2) {
20001bf8:	787b      	ldrb	r3, [r7, #1]
20001bfa:	f003 0302 	and.w	r3, r3, #2
20001bfe:	2b00      	cmp	r3, #0
20001c00:	d017      	beq.n	20001c32 <drawCircleHelper+0xfc>
			ILI9341_DrawPixel(x0 + x, y0 - y, color);
20001c02:	88fa      	ldrh	r2, [r7, #6]
20001c04:	8a3b      	ldrh	r3, [r7, #16]
20001c06:	4413      	add	r3, r2
20001c08:	b298      	uxth	r0, r3
20001c0a:	88ba      	ldrh	r2, [r7, #4]
20001c0c:	89fb      	ldrh	r3, [r7, #14]
20001c0e:	1ad3      	subs	r3, r2, r3
20001c10:	b29b      	uxth	r3, r3
20001c12:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
20001c14:	4619      	mov	r1, r3
20001c16:	f7ff fb6f 	bl	200012f8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 + y, y0 - x, color);
20001c1a:	88fa      	ldrh	r2, [r7, #6]
20001c1c:	89fb      	ldrh	r3, [r7, #14]
20001c1e:	4413      	add	r3, r2
20001c20:	b298      	uxth	r0, r3
20001c22:	88ba      	ldrh	r2, [r7, #4]
20001c24:	8a3b      	ldrh	r3, [r7, #16]
20001c26:	1ad3      	subs	r3, r2, r3
20001c28:	b29b      	uxth	r3, r3
20001c2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
20001c2c:	4619      	mov	r1, r3
20001c2e:	f7ff fb63 	bl	200012f8 <ILI9341_DrawPixel>
		}
		if (cornername & 0x8) {
20001c32:	787b      	ldrb	r3, [r7, #1]
20001c34:	f003 0308 	and.w	r3, r3, #8
20001c38:	2b00      	cmp	r3, #0
20001c3a:	d017      	beq.n	20001c6c <drawCircleHelper+0x136>
			ILI9341_DrawPixel(x0 - y, y0 + x, color);
20001c3c:	88fa      	ldrh	r2, [r7, #6]
20001c3e:	89fb      	ldrh	r3, [r7, #14]
20001c40:	1ad3      	subs	r3, r2, r3
20001c42:	b298      	uxth	r0, r3
20001c44:	88ba      	ldrh	r2, [r7, #4]
20001c46:	8a3b      	ldrh	r3, [r7, #16]
20001c48:	4413      	add	r3, r2
20001c4a:	b29b      	uxth	r3, r3
20001c4c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
20001c4e:	4619      	mov	r1, r3
20001c50:	f7ff fb52 	bl	200012f8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 - x, y0 + y, color);
20001c54:	88fa      	ldrh	r2, [r7, #6]
20001c56:	8a3b      	ldrh	r3, [r7, #16]
20001c58:	1ad3      	subs	r3, r2, r3
20001c5a:	b298      	uxth	r0, r3
20001c5c:	88ba      	ldrh	r2, [r7, #4]
20001c5e:	89fb      	ldrh	r3, [r7, #14]
20001c60:	4413      	add	r3, r2
20001c62:	b29b      	uxth	r3, r3
20001c64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
20001c66:	4619      	mov	r1, r3
20001c68:	f7ff fb46 	bl	200012f8 <ILI9341_DrawPixel>
		}
		if (cornername & 0x1) {
20001c6c:	787b      	ldrb	r3, [r7, #1]
20001c6e:	f003 0301 	and.w	r3, r3, #1
20001c72:	2b00      	cmp	r3, #0
20001c74:	d017      	beq.n	20001ca6 <drawCircleHelper+0x170>
			ILI9341_DrawPixel(x0 - y, y0 - x, color);
20001c76:	88fa      	ldrh	r2, [r7, #6]
20001c78:	89fb      	ldrh	r3, [r7, #14]
20001c7a:	1ad3      	subs	r3, r2, r3
20001c7c:	b298      	uxth	r0, r3
20001c7e:	88ba      	ldrh	r2, [r7, #4]
20001c80:	8a3b      	ldrh	r3, [r7, #16]
20001c82:	1ad3      	subs	r3, r2, r3
20001c84:	b29b      	uxth	r3, r3
20001c86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
20001c88:	4619      	mov	r1, r3
20001c8a:	f7ff fb35 	bl	200012f8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 - x, y0 - y, color);
20001c8e:	88fa      	ldrh	r2, [r7, #6]
20001c90:	8a3b      	ldrh	r3, [r7, #16]
20001c92:	1ad3      	subs	r3, r2, r3
20001c94:	b298      	uxth	r0, r3
20001c96:	88ba      	ldrh	r2, [r7, #4]
20001c98:	89fb      	ldrh	r3, [r7, #14]
20001c9a:	1ad3      	subs	r3, r2, r3
20001c9c:	b29b      	uxth	r3, r3
20001c9e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
20001ca0:	4619      	mov	r1, r3
20001ca2:	f7ff fb29 	bl	200012f8 <ILI9341_DrawPixel>
	while (x < y) {
20001ca6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
20001caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001cae:	429a      	cmp	r2, r3
20001cb0:	f6ff af63 	blt.w	20001b7a <drawCircleHelper+0x44>
		}
	}
}
20001cb4:	bf00      	nop
20001cb6:	bf00      	nop
20001cb8:	371c      	adds	r7, #28
20001cba:	46bd      	mov	sp, r7
20001cbc:	bd90      	pop	{r4, r7, pc}

20001cbe <fillCircleHelper>:
 @param  corners  Mask bits indicating which quarters we're doing
 @param  delta    Offset from center-point, used for round-rects
 @param  color    16-bit 5-6-5 Color to fill with
 **************************************************************************/
void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners,
		int16_t delta, uint16_t color) {
20001cbe:	b590      	push	{r4, r7, lr}
20001cc0:	b087      	sub	sp, #28
20001cc2:	af00      	add	r7, sp, #0
20001cc4:	4604      	mov	r4, r0
20001cc6:	4608      	mov	r0, r1
20001cc8:	4611      	mov	r1, r2
20001cca:	461a      	mov	r2, r3
20001ccc:	4623      	mov	r3, r4
20001cce:	80fb      	strh	r3, [r7, #6]
20001cd0:	4603      	mov	r3, r0
20001cd2:	80bb      	strh	r3, [r7, #4]
20001cd4:	460b      	mov	r3, r1
20001cd6:	807b      	strh	r3, [r7, #2]
20001cd8:	4613      	mov	r3, r2
20001cda:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
20001cdc:	887b      	ldrh	r3, [r7, #2]
20001cde:	f1c3 0301 	rsb	r3, r3, #1
20001ce2:	b29b      	uxth	r3, r3
20001ce4:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
20001ce6:	2301      	movs	r3, #1
20001ce8:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
20001cea:	887b      	ldrh	r3, [r7, #2]
20001cec:	461a      	mov	r2, r3
20001cee:	03d2      	lsls	r2, r2, #15
20001cf0:	1ad3      	subs	r3, r2, r3
20001cf2:	005b      	lsls	r3, r3, #1
20001cf4:	b29b      	uxth	r3, r3
20001cf6:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
20001cf8:	2300      	movs	r3, #0
20001cfa:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
20001cfc:	887b      	ldrh	r3, [r7, #2]
20001cfe:	81fb      	strh	r3, [r7, #14]
	int16_t px = x;
20001d00:	8a3b      	ldrh	r3, [r7, #16]
20001d02:	81bb      	strh	r3, [r7, #12]
	int16_t py = y;
20001d04:	89fb      	ldrh	r3, [r7, #14]
20001d06:	817b      	strh	r3, [r7, #10]

	delta++; // Avoid some +1's in the loop
20001d08:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
20001d0c:	b29b      	uxth	r3, r3
20001d0e:	3301      	adds	r3, #1
20001d10:	b29b      	uxth	r3, r3
20001d12:	853b      	strh	r3, [r7, #40]	; 0x28

	while (x < y) {
20001d14:	e095      	b.n	20001e42 <fillCircleHelper+0x184>
		if (f >= 0) {
20001d16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
20001d1a:	2b00      	cmp	r3, #0
20001d1c:	db0e      	blt.n	20001d3c <fillCircleHelper+0x7e>
			y--;
20001d1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001d22:	b29b      	uxth	r3, r3
20001d24:	3b01      	subs	r3, #1
20001d26:	b29b      	uxth	r3, r3
20001d28:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
20001d2a:	8a7b      	ldrh	r3, [r7, #18]
20001d2c:	3302      	adds	r3, #2
20001d2e:	b29b      	uxth	r3, r3
20001d30:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
20001d32:	8afa      	ldrh	r2, [r7, #22]
20001d34:	8a7b      	ldrh	r3, [r7, #18]
20001d36:	4413      	add	r3, r2
20001d38:	b29b      	uxth	r3, r3
20001d3a:	82fb      	strh	r3, [r7, #22]
		}
		x++;
20001d3c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
20001d40:	b29b      	uxth	r3, r3
20001d42:	3301      	adds	r3, #1
20001d44:	b29b      	uxth	r3, r3
20001d46:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
20001d48:	8abb      	ldrh	r3, [r7, #20]
20001d4a:	3302      	adds	r3, #2
20001d4c:	b29b      	uxth	r3, r3
20001d4e:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
20001d50:	8afa      	ldrh	r2, [r7, #22]
20001d52:	8abb      	ldrh	r3, [r7, #20]
20001d54:	4413      	add	r3, r2
20001d56:	b29b      	uxth	r3, r3
20001d58:	82fb      	strh	r3, [r7, #22]
		// These checks avoid double-drawing certain lines, important
		// for the SSD1306 library which has an INVERT drawing mode.
		if (x < (y + 1)) {
20001d5a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
20001d5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
20001d62:	429a      	cmp	r2, r3
20001d64:	db31      	blt.n	20001dca <fillCircleHelper+0x10c>
			if (corners & 1)
20001d66:	787b      	ldrb	r3, [r7, #1]
20001d68:	f003 0301 	and.w	r3, r3, #1
20001d6c:	2b00      	cmp	r3, #0
20001d6e:	d013      	beq.n	20001d98 <fillCircleHelper+0xda>
				writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
20001d70:	88fa      	ldrh	r2, [r7, #6]
20001d72:	8a3b      	ldrh	r3, [r7, #16]
20001d74:	4413      	add	r3, r2
20001d76:	b29b      	uxth	r3, r3
20001d78:	b218      	sxth	r0, r3
20001d7a:	88ba      	ldrh	r2, [r7, #4]
20001d7c:	89fb      	ldrh	r3, [r7, #14]
20001d7e:	1ad3      	subs	r3, r2, r3
20001d80:	b29b      	uxth	r3, r3
20001d82:	b219      	sxth	r1, r3
20001d84:	89fb      	ldrh	r3, [r7, #14]
20001d86:	005b      	lsls	r3, r3, #1
20001d88:	b29a      	uxth	r2, r3
20001d8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20001d8c:	4413      	add	r3, r2
20001d8e:	b29b      	uxth	r3, r3
20001d90:	b21a      	sxth	r2, r3
20001d92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
20001d94:	f7ff fe4f 	bl	20001a36 <writeFastVLine>
			if (corners & 2)
20001d98:	787b      	ldrb	r3, [r7, #1]
20001d9a:	f003 0302 	and.w	r3, r3, #2
20001d9e:	2b00      	cmp	r3, #0
20001da0:	d013      	beq.n	20001dca <fillCircleHelper+0x10c>
				writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
20001da2:	88fa      	ldrh	r2, [r7, #6]
20001da4:	8a3b      	ldrh	r3, [r7, #16]
20001da6:	1ad3      	subs	r3, r2, r3
20001da8:	b29b      	uxth	r3, r3
20001daa:	b218      	sxth	r0, r3
20001dac:	88ba      	ldrh	r2, [r7, #4]
20001dae:	89fb      	ldrh	r3, [r7, #14]
20001db0:	1ad3      	subs	r3, r2, r3
20001db2:	b29b      	uxth	r3, r3
20001db4:	b219      	sxth	r1, r3
20001db6:	89fb      	ldrh	r3, [r7, #14]
20001db8:	005b      	lsls	r3, r3, #1
20001dba:	b29a      	uxth	r2, r3
20001dbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20001dbe:	4413      	add	r3, r2
20001dc0:	b29b      	uxth	r3, r3
20001dc2:	b21a      	sxth	r2, r3
20001dc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
20001dc6:	f7ff fe36 	bl	20001a36 <writeFastVLine>
		}
		if (y != py) {
20001dca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
20001dce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
20001dd2:	429a      	cmp	r2, r3
20001dd4:	d033      	beq.n	20001e3e <fillCircleHelper+0x180>
			if (corners & 1)
20001dd6:	787b      	ldrb	r3, [r7, #1]
20001dd8:	f003 0301 	and.w	r3, r3, #1
20001ddc:	2b00      	cmp	r3, #0
20001dde:	d013      	beq.n	20001e08 <fillCircleHelper+0x14a>
				writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
20001de0:	88fa      	ldrh	r2, [r7, #6]
20001de2:	897b      	ldrh	r3, [r7, #10]
20001de4:	4413      	add	r3, r2
20001de6:	b29b      	uxth	r3, r3
20001de8:	b218      	sxth	r0, r3
20001dea:	88ba      	ldrh	r2, [r7, #4]
20001dec:	89bb      	ldrh	r3, [r7, #12]
20001dee:	1ad3      	subs	r3, r2, r3
20001df0:	b29b      	uxth	r3, r3
20001df2:	b219      	sxth	r1, r3
20001df4:	89bb      	ldrh	r3, [r7, #12]
20001df6:	005b      	lsls	r3, r3, #1
20001df8:	b29a      	uxth	r2, r3
20001dfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20001dfc:	4413      	add	r3, r2
20001dfe:	b29b      	uxth	r3, r3
20001e00:	b21a      	sxth	r2, r3
20001e02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
20001e04:	f7ff fe17 	bl	20001a36 <writeFastVLine>
			if (corners & 2)
20001e08:	787b      	ldrb	r3, [r7, #1]
20001e0a:	f003 0302 	and.w	r3, r3, #2
20001e0e:	2b00      	cmp	r3, #0
20001e10:	d013      	beq.n	20001e3a <fillCircleHelper+0x17c>
				writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
20001e12:	88fa      	ldrh	r2, [r7, #6]
20001e14:	897b      	ldrh	r3, [r7, #10]
20001e16:	1ad3      	subs	r3, r2, r3
20001e18:	b29b      	uxth	r3, r3
20001e1a:	b218      	sxth	r0, r3
20001e1c:	88ba      	ldrh	r2, [r7, #4]
20001e1e:	89bb      	ldrh	r3, [r7, #12]
20001e20:	1ad3      	subs	r3, r2, r3
20001e22:	b29b      	uxth	r3, r3
20001e24:	b219      	sxth	r1, r3
20001e26:	89bb      	ldrh	r3, [r7, #12]
20001e28:	005b      	lsls	r3, r3, #1
20001e2a:	b29a      	uxth	r2, r3
20001e2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20001e2e:	4413      	add	r3, r2
20001e30:	b29b      	uxth	r3, r3
20001e32:	b21a      	sxth	r2, r3
20001e34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
20001e36:	f7ff fdfe 	bl	20001a36 <writeFastVLine>
			py = y;
20001e3a:	89fb      	ldrh	r3, [r7, #14]
20001e3c:	817b      	strh	r3, [r7, #10]
		}
		px = x;
20001e3e:	8a3b      	ldrh	r3, [r7, #16]
20001e40:	81bb      	strh	r3, [r7, #12]
	while (x < y) {
20001e42:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
20001e46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001e4a:	429a      	cmp	r2, r3
20001e4c:	f6ff af63 	blt.w	20001d16 <fillCircleHelper+0x58>
	}
}
20001e50:	bf00      	nop
20001e52:	bf00      	nop
20001e54:	371c      	adds	r7, #28
20001e56:	46bd      	mov	sp, r7
20001e58:	bd90      	pop	{r4, r7, pc}

20001e5a <drawRoundRect>:
 @param    h   Height in pixels
 @param    r   Radius of corner rounding
 @param    color 16-bit 5-6-5 Color to draw/fill with
 **************************************************************************/
void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
20001e5a:	b590      	push	{r4, r7, lr}
20001e5c:	b087      	sub	sp, #28
20001e5e:	af02      	add	r7, sp, #8
20001e60:	4604      	mov	r4, r0
20001e62:	4608      	mov	r0, r1
20001e64:	4611      	mov	r1, r2
20001e66:	461a      	mov	r2, r3
20001e68:	4623      	mov	r3, r4
20001e6a:	80fb      	strh	r3, [r7, #6]
20001e6c:	4603      	mov	r3, r0
20001e6e:	80bb      	strh	r3, [r7, #4]
20001e70:	460b      	mov	r3, r1
20001e72:	807b      	strh	r3, [r7, #2]
20001e74:	4613      	mov	r3, r2
20001e76:	803b      	strh	r3, [r7, #0]
	int16_t max_radius = 0;
20001e78:	2300      	movs	r3, #0
20001e7a:	81fb      	strh	r3, [r7, #14]
	if (w < h)
20001e7c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
20001e80:	f9b7 3000 	ldrsh.w	r3, [r7]
20001e84:	429a      	cmp	r2, r3
20001e86:	da06      	bge.n	20001e96 <drawRoundRect+0x3c>
		max_radius = w / 2;
20001e88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
20001e8c:	0fda      	lsrs	r2, r3, #31
20001e8e:	4413      	add	r3, r2
20001e90:	105b      	asrs	r3, r3, #1
20001e92:	81fb      	strh	r3, [r7, #14]
20001e94:	e005      	b.n	20001ea2 <drawRoundRect+0x48>
	else
		max_radius = h / 2;              // 1/2 minor axis
20001e96:	f9b7 3000 	ldrsh.w	r3, [r7]
20001e9a:	0fda      	lsrs	r2, r3, #31
20001e9c:	4413      	add	r3, r2
20001e9e:	105b      	asrs	r3, r3, #1
20001ea0:	81fb      	strh	r3, [r7, #14]
	if (r > max_radius)
20001ea2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
20001ea6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001eaa:	429a      	cmp	r2, r3
20001eac:	dd01      	ble.n	20001eb2 <drawRoundRect+0x58>
		r = max_radius;
20001eae:	89fb      	ldrh	r3, [r7, #14]
20001eb0:	843b      	strh	r3, [r7, #32]
// smarter version
	ILI9341_Select();
20001eb2:	f7ff f82f 	bl	20000f14 <ILI9341_Select>
	writeFastHLine(x + r, y, w - 2 * r, color);         // Top
20001eb6:	88fa      	ldrh	r2, [r7, #6]
20001eb8:	8c3b      	ldrh	r3, [r7, #32]
20001eba:	4413      	add	r3, r2
20001ebc:	b29b      	uxth	r3, r3
20001ebe:	b218      	sxth	r0, r3
20001ec0:	887a      	ldrh	r2, [r7, #2]
20001ec2:	8c3b      	ldrh	r3, [r7, #32]
20001ec4:	005b      	lsls	r3, r3, #1
20001ec6:	b29b      	uxth	r3, r3
20001ec8:	1ad3      	subs	r3, r2, r3
20001eca:	b29b      	uxth	r3, r3
20001ecc:	b21a      	sxth	r2, r3
20001ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001ed0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
20001ed4:	f7ff fdcf 	bl	20001a76 <writeFastHLine>
	writeFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
20001ed8:	88fa      	ldrh	r2, [r7, #6]
20001eda:	8c3b      	ldrh	r3, [r7, #32]
20001edc:	4413      	add	r3, r2
20001ede:	b29b      	uxth	r3, r3
20001ee0:	b218      	sxth	r0, r3
20001ee2:	88ba      	ldrh	r2, [r7, #4]
20001ee4:	883b      	ldrh	r3, [r7, #0]
20001ee6:	4413      	add	r3, r2
20001ee8:	b29b      	uxth	r3, r3
20001eea:	3b01      	subs	r3, #1
20001eec:	b29b      	uxth	r3, r3
20001eee:	b219      	sxth	r1, r3
20001ef0:	887a      	ldrh	r2, [r7, #2]
20001ef2:	8c3b      	ldrh	r3, [r7, #32]
20001ef4:	005b      	lsls	r3, r3, #1
20001ef6:	b29b      	uxth	r3, r3
20001ef8:	1ad3      	subs	r3, r2, r3
20001efa:	b29b      	uxth	r3, r3
20001efc:	b21a      	sxth	r2, r3
20001efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001f00:	f7ff fdb9 	bl	20001a76 <writeFastHLine>
	writeFastVLine(x, y + r, h - 2 * r, color);         // Left
20001f04:	88ba      	ldrh	r2, [r7, #4]
20001f06:	8c3b      	ldrh	r3, [r7, #32]
20001f08:	4413      	add	r3, r2
20001f0a:	b29b      	uxth	r3, r3
20001f0c:	b219      	sxth	r1, r3
20001f0e:	883a      	ldrh	r2, [r7, #0]
20001f10:	8c3b      	ldrh	r3, [r7, #32]
20001f12:	005b      	lsls	r3, r3, #1
20001f14:	b29b      	uxth	r3, r3
20001f16:	1ad3      	subs	r3, r2, r3
20001f18:	b29b      	uxth	r3, r3
20001f1a:	b21a      	sxth	r2, r3
20001f1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001f1e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
20001f22:	f7ff fd88 	bl	20001a36 <writeFastVLine>
	writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
20001f26:	88fa      	ldrh	r2, [r7, #6]
20001f28:	887b      	ldrh	r3, [r7, #2]
20001f2a:	4413      	add	r3, r2
20001f2c:	b29b      	uxth	r3, r3
20001f2e:	3b01      	subs	r3, #1
20001f30:	b29b      	uxth	r3, r3
20001f32:	b218      	sxth	r0, r3
20001f34:	88ba      	ldrh	r2, [r7, #4]
20001f36:	8c3b      	ldrh	r3, [r7, #32]
20001f38:	4413      	add	r3, r2
20001f3a:	b29b      	uxth	r3, r3
20001f3c:	b219      	sxth	r1, r3
20001f3e:	883a      	ldrh	r2, [r7, #0]
20001f40:	8c3b      	ldrh	r3, [r7, #32]
20001f42:	005b      	lsls	r3, r3, #1
20001f44:	b29b      	uxth	r3, r3
20001f46:	1ad3      	subs	r3, r2, r3
20001f48:	b29b      	uxth	r3, r3
20001f4a:	b21a      	sxth	r2, r3
20001f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001f4e:	f7ff fd72 	bl	20001a36 <writeFastVLine>
// draw four corners
	drawCircleHelper(x + r, y + r, r, 1, color);
20001f52:	88fa      	ldrh	r2, [r7, #6]
20001f54:	8c3b      	ldrh	r3, [r7, #32]
20001f56:	4413      	add	r3, r2
20001f58:	b29b      	uxth	r3, r3
20001f5a:	b218      	sxth	r0, r3
20001f5c:	88ba      	ldrh	r2, [r7, #4]
20001f5e:	8c3b      	ldrh	r3, [r7, #32]
20001f60:	4413      	add	r3, r2
20001f62:	b29b      	uxth	r3, r3
20001f64:	b219      	sxth	r1, r3
20001f66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
20001f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001f6c:	9300      	str	r3, [sp, #0]
20001f6e:	2301      	movs	r3, #1
20001f70:	f7ff fde1 	bl	20001b36 <drawCircleHelper>
	drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
20001f74:	88fa      	ldrh	r2, [r7, #6]
20001f76:	887b      	ldrh	r3, [r7, #2]
20001f78:	4413      	add	r3, r2
20001f7a:	b29a      	uxth	r2, r3
20001f7c:	8c3b      	ldrh	r3, [r7, #32]
20001f7e:	1ad3      	subs	r3, r2, r3
20001f80:	b29b      	uxth	r3, r3
20001f82:	3b01      	subs	r3, #1
20001f84:	b29b      	uxth	r3, r3
20001f86:	b218      	sxth	r0, r3
20001f88:	88ba      	ldrh	r2, [r7, #4]
20001f8a:	8c3b      	ldrh	r3, [r7, #32]
20001f8c:	4413      	add	r3, r2
20001f8e:	b29b      	uxth	r3, r3
20001f90:	b219      	sxth	r1, r3
20001f92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
20001f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001f98:	9300      	str	r3, [sp, #0]
20001f9a:	2302      	movs	r3, #2
20001f9c:	f7ff fdcb 	bl	20001b36 <drawCircleHelper>
	drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
20001fa0:	88fa      	ldrh	r2, [r7, #6]
20001fa2:	887b      	ldrh	r3, [r7, #2]
20001fa4:	4413      	add	r3, r2
20001fa6:	b29a      	uxth	r2, r3
20001fa8:	8c3b      	ldrh	r3, [r7, #32]
20001faa:	1ad3      	subs	r3, r2, r3
20001fac:	b29b      	uxth	r3, r3
20001fae:	3b01      	subs	r3, #1
20001fb0:	b29b      	uxth	r3, r3
20001fb2:	b218      	sxth	r0, r3
20001fb4:	88ba      	ldrh	r2, [r7, #4]
20001fb6:	883b      	ldrh	r3, [r7, #0]
20001fb8:	4413      	add	r3, r2
20001fba:	b29a      	uxth	r2, r3
20001fbc:	8c3b      	ldrh	r3, [r7, #32]
20001fbe:	1ad3      	subs	r3, r2, r3
20001fc0:	b29b      	uxth	r3, r3
20001fc2:	3b01      	subs	r3, #1
20001fc4:	b29b      	uxth	r3, r3
20001fc6:	b219      	sxth	r1, r3
20001fc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
20001fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001fce:	9300      	str	r3, [sp, #0]
20001fd0:	2304      	movs	r3, #4
20001fd2:	f7ff fdb0 	bl	20001b36 <drawCircleHelper>
	drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
20001fd6:	88fa      	ldrh	r2, [r7, #6]
20001fd8:	8c3b      	ldrh	r3, [r7, #32]
20001fda:	4413      	add	r3, r2
20001fdc:	b29b      	uxth	r3, r3
20001fde:	b218      	sxth	r0, r3
20001fe0:	88ba      	ldrh	r2, [r7, #4]
20001fe2:	883b      	ldrh	r3, [r7, #0]
20001fe4:	4413      	add	r3, r2
20001fe6:	b29a      	uxth	r2, r3
20001fe8:	8c3b      	ldrh	r3, [r7, #32]
20001fea:	1ad3      	subs	r3, r2, r3
20001fec:	b29b      	uxth	r3, r3
20001fee:	3b01      	subs	r3, #1
20001ff0:	b29b      	uxth	r3, r3
20001ff2:	b219      	sxth	r1, r3
20001ff4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
20001ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001ffa:	9300      	str	r3, [sp, #0]
20001ffc:	2308      	movs	r3, #8
20001ffe:	f7ff fd9a 	bl	20001b36 <drawCircleHelper>
	ILI9341_Unselect();
20002002:	f7fe ff97 	bl	20000f34 <ILI9341_Unselect>
}
20002006:	bf00      	nop
20002008:	3714      	adds	r7, #20
2000200a:	46bd      	mov	sp, r7
2000200c:	bd90      	pop	{r4, r7, pc}

2000200e <drawSomePixelRoundRect>:

void drawSomePixelRoundRect(int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, int16_t countPixel, uint16_t color) {
2000200e:	b590      	push	{r4, r7, lr}
20002010:	b087      	sub	sp, #28
20002012:	af02      	add	r7, sp, #8
20002014:	4604      	mov	r4, r0
20002016:	4608      	mov	r0, r1
20002018:	4611      	mov	r1, r2
2000201a:	461a      	mov	r2, r3
2000201c:	4623      	mov	r3, r4
2000201e:	80fb      	strh	r3, [r7, #6]
20002020:	4603      	mov	r3, r0
20002022:	80bb      	strh	r3, [r7, #4]
20002024:	460b      	mov	r3, r1
20002026:	807b      	strh	r3, [r7, #2]
20002028:	4613      	mov	r3, r2
2000202a:	803b      	strh	r3, [r7, #0]
	if (countPixel < 1)
2000202c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
20002030:	2b00      	cmp	r3, #0
20002032:	dd44      	ble.n	200020be <drawSomePixelRoundRect+0xb0>
		return;
	for (int i = 0; i < countPixel; i++) {
20002034:	2300      	movs	r3, #0
20002036:	60fb      	str	r3, [r7, #12]
20002038:	e03b      	b.n	200020b2 <drawSomePixelRoundRect+0xa4>
		if (i == 0) {
2000203a:	68fb      	ldr	r3, [r7, #12]
2000203c:	2b00      	cmp	r3, #0
2000203e:	d110      	bne.n	20002062 <drawSomePixelRoundRect+0x54>
			drawRoundRect(x, y, w, h, r, color);
20002040:	f9b7 4000 	ldrsh.w	r4, [r7]
20002044:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
20002048:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
2000204c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
20002050:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20002052:	9301      	str	r3, [sp, #4]
20002054:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
20002058:	9300      	str	r3, [sp, #0]
2000205a:	4623      	mov	r3, r4
2000205c:	f7ff fefd 	bl	20001e5a <drawRoundRect>
			continue;
20002060:	e024      	b.n	200020ac <drawSomePixelRoundRect+0x9e>
		}
		drawRoundRect(x + i, y + i, w - i * 2, h - i * 2, r, color);
20002062:	68fb      	ldr	r3, [r7, #12]
20002064:	b29a      	uxth	r2, r3
20002066:	88fb      	ldrh	r3, [r7, #6]
20002068:	4413      	add	r3, r2
2000206a:	b29b      	uxth	r3, r3
2000206c:	b218      	sxth	r0, r3
2000206e:	68fb      	ldr	r3, [r7, #12]
20002070:	b29a      	uxth	r2, r3
20002072:	88bb      	ldrh	r3, [r7, #4]
20002074:	4413      	add	r3, r2
20002076:	b29b      	uxth	r3, r3
20002078:	b219      	sxth	r1, r3
2000207a:	887a      	ldrh	r2, [r7, #2]
2000207c:	68fb      	ldr	r3, [r7, #12]
2000207e:	b29b      	uxth	r3, r3
20002080:	005b      	lsls	r3, r3, #1
20002082:	b29b      	uxth	r3, r3
20002084:	1ad3      	subs	r3, r2, r3
20002086:	b29b      	uxth	r3, r3
20002088:	b21c      	sxth	r4, r3
2000208a:	883a      	ldrh	r2, [r7, #0]
2000208c:	68fb      	ldr	r3, [r7, #12]
2000208e:	b29b      	uxth	r3, r3
20002090:	005b      	lsls	r3, r3, #1
20002092:	b29b      	uxth	r3, r3
20002094:	1ad3      	subs	r3, r2, r3
20002096:	b29b      	uxth	r3, r3
20002098:	b21a      	sxth	r2, r3
2000209a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2000209c:	9301      	str	r3, [sp, #4]
2000209e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
200020a2:	9300      	str	r3, [sp, #0]
200020a4:	4613      	mov	r3, r2
200020a6:	4622      	mov	r2, r4
200020a8:	f7ff fed7 	bl	20001e5a <drawRoundRect>
	for (int i = 0; i < countPixel; i++) {
200020ac:	68fb      	ldr	r3, [r7, #12]
200020ae:	3301      	adds	r3, #1
200020b0:	60fb      	str	r3, [r7, #12]
200020b2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
200020b6:	68fa      	ldr	r2, [r7, #12]
200020b8:	429a      	cmp	r2, r3
200020ba:	dbbe      	blt.n	2000203a <drawSomePixelRoundRect+0x2c>
200020bc:	e000      	b.n	200020c0 <drawSomePixelRoundRect+0xb2>
		return;
200020be:	bf00      	nop
	}
}
200020c0:	3714      	adds	r7, #20
200020c2:	46bd      	mov	sp, r7
200020c4:	bd90      	pop	{r4, r7, pc}

200020c6 <fillRect>:
 @param    y   Top left corner y coordinate
 @param    w   Width in pixels
 @param    h   Height in pixels
 @param    color 16-bit 5-6-5 Color to fill with
 **************************************************************************/
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
200020c6:	b590      	push	{r4, r7, lr}
200020c8:	b085      	sub	sp, #20
200020ca:	af00      	add	r7, sp, #0
200020cc:	4604      	mov	r4, r0
200020ce:	4608      	mov	r0, r1
200020d0:	4611      	mov	r1, r2
200020d2:	461a      	mov	r2, r3
200020d4:	4623      	mov	r3, r4
200020d6:	80fb      	strh	r3, [r7, #6]
200020d8:	4603      	mov	r3, r0
200020da:	80bb      	strh	r3, [r7, #4]
200020dc:	460b      	mov	r3, r1
200020de:	807b      	strh	r3, [r7, #2]
200020e0:	4613      	mov	r3, r2
200020e2:	803b      	strh	r3, [r7, #0]
	for (int16_t i = x; i < x + w; i++) {
200020e4:	88fb      	ldrh	r3, [r7, #6]
200020e6:	81fb      	strh	r3, [r7, #14]
200020e8:	e00e      	b.n	20002108 <fillRect+0x42>
		writeFastVLine(i, y, h, color);
200020ea:	8c3b      	ldrh	r3, [r7, #32]
200020ec:	f9b7 2000 	ldrsh.w	r2, [r7]
200020f0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
200020f4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
200020f8:	f7ff fc9d 	bl	20001a36 <writeFastVLine>
	for (int16_t i = x; i < x + w; i++) {
200020fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20002100:	b29b      	uxth	r3, r3
20002102:	3301      	adds	r3, #1
20002104:	b29b      	uxth	r3, r3
20002106:	81fb      	strh	r3, [r7, #14]
20002108:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
2000210c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
20002110:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
20002114:	440b      	add	r3, r1
20002116:	429a      	cmp	r2, r3
20002118:	dbe7      	blt.n	200020ea <fillRect+0x24>
	}
}
2000211a:	bf00      	nop
2000211c:	bf00      	nop
2000211e:	3714      	adds	r7, #20
20002120:	46bd      	mov	sp, r7
20002122:	bd90      	pop	{r4, r7, pc}

20002124 <fillRoundRect>:
 @param    h   Height in pixels
 @param    r   Radius of corner rounding
 @param    color 16-bit 5-6-5 Color to draw/fill with
 **************************************************************************/
void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
20002124:	b590      	push	{r4, r7, lr}
20002126:	b087      	sub	sp, #28
20002128:	af02      	add	r7, sp, #8
2000212a:	4604      	mov	r4, r0
2000212c:	4608      	mov	r0, r1
2000212e:	4611      	mov	r1, r2
20002130:	461a      	mov	r2, r3
20002132:	4623      	mov	r3, r4
20002134:	80fb      	strh	r3, [r7, #6]
20002136:	4603      	mov	r3, r0
20002138:	80bb      	strh	r3, [r7, #4]
2000213a:	460b      	mov	r3, r1
2000213c:	807b      	strh	r3, [r7, #2]
2000213e:	4613      	mov	r3, r2
20002140:	803b      	strh	r3, [r7, #0]
	int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
20002142:	f9b7 2000 	ldrsh.w	r2, [r7]
20002146:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2000214a:	4293      	cmp	r3, r2
2000214c:	bfa8      	it	ge
2000214e:	4613      	movge	r3, r2
20002150:	b21b      	sxth	r3, r3
20002152:	0fda      	lsrs	r2, r3, #31
20002154:	4413      	add	r3, r2
20002156:	105b      	asrs	r3, r3, #1
20002158:	81fb      	strh	r3, [r7, #14]
	if (r > max_radius)
2000215a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
2000215e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20002162:	429a      	cmp	r2, r3
20002164:	dd01      	ble.n	2000216a <fillRoundRect+0x46>
		r = max_radius;
20002166:	89fb      	ldrh	r3, [r7, #14]
20002168:	843b      	strh	r3, [r7, #32]
	ILI9341_Select();
2000216a:	f7fe fed3 	bl	20000f14 <ILI9341_Select>
// smarter version
	fillRect(x + r, y, w - 2 * r, h, color);
2000216e:	88fa      	ldrh	r2, [r7, #6]
20002170:	8c3b      	ldrh	r3, [r7, #32]
20002172:	4413      	add	r3, r2
20002174:	b29b      	uxth	r3, r3
20002176:	b218      	sxth	r0, r3
20002178:	887a      	ldrh	r2, [r7, #2]
2000217a:	8c3b      	ldrh	r3, [r7, #32]
2000217c:	005b      	lsls	r3, r3, #1
2000217e:	b29b      	uxth	r3, r3
20002180:	1ad3      	subs	r3, r2, r3
20002182:	b29b      	uxth	r3, r3
20002184:	b21a      	sxth	r2, r3
20002186:	f9b7 4000 	ldrsh.w	r4, [r7]
2000218a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
2000218e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20002190:	9300      	str	r3, [sp, #0]
20002192:	4623      	mov	r3, r4
20002194:	f7ff ff97 	bl	200020c6 <fillRect>
// draw four corners
	fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
20002198:	88fa      	ldrh	r2, [r7, #6]
2000219a:	887b      	ldrh	r3, [r7, #2]
2000219c:	4413      	add	r3, r2
2000219e:	b29a      	uxth	r2, r3
200021a0:	8c3b      	ldrh	r3, [r7, #32]
200021a2:	1ad3      	subs	r3, r2, r3
200021a4:	b29b      	uxth	r3, r3
200021a6:	3b01      	subs	r3, #1
200021a8:	b29b      	uxth	r3, r3
200021aa:	b218      	sxth	r0, r3
200021ac:	88ba      	ldrh	r2, [r7, #4]
200021ae:	8c3b      	ldrh	r3, [r7, #32]
200021b0:	4413      	add	r3, r2
200021b2:	b29b      	uxth	r3, r3
200021b4:	b219      	sxth	r1, r3
200021b6:	883a      	ldrh	r2, [r7, #0]
200021b8:	8c3b      	ldrh	r3, [r7, #32]
200021ba:	005b      	lsls	r3, r3, #1
200021bc:	b29b      	uxth	r3, r3
200021be:	1ad3      	subs	r3, r2, r3
200021c0:	b29b      	uxth	r3, r3
200021c2:	3b01      	subs	r3, #1
200021c4:	b29b      	uxth	r3, r3
200021c6:	b21b      	sxth	r3, r3
200021c8:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
200021cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
200021ce:	9201      	str	r2, [sp, #4]
200021d0:	9300      	str	r3, [sp, #0]
200021d2:	2301      	movs	r3, #1
200021d4:	4622      	mov	r2, r4
200021d6:	f7ff fd72 	bl	20001cbe <fillCircleHelper>
	fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
200021da:	88fa      	ldrh	r2, [r7, #6]
200021dc:	8c3b      	ldrh	r3, [r7, #32]
200021de:	4413      	add	r3, r2
200021e0:	b29b      	uxth	r3, r3
200021e2:	b218      	sxth	r0, r3
200021e4:	88ba      	ldrh	r2, [r7, #4]
200021e6:	8c3b      	ldrh	r3, [r7, #32]
200021e8:	4413      	add	r3, r2
200021ea:	b29b      	uxth	r3, r3
200021ec:	b219      	sxth	r1, r3
200021ee:	883a      	ldrh	r2, [r7, #0]
200021f0:	8c3b      	ldrh	r3, [r7, #32]
200021f2:	005b      	lsls	r3, r3, #1
200021f4:	b29b      	uxth	r3, r3
200021f6:	1ad3      	subs	r3, r2, r3
200021f8:	b29b      	uxth	r3, r3
200021fa:	3b01      	subs	r3, #1
200021fc:	b29b      	uxth	r3, r3
200021fe:	b21b      	sxth	r3, r3
20002200:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
20002204:	8cba      	ldrh	r2, [r7, #36]	; 0x24
20002206:	9201      	str	r2, [sp, #4]
20002208:	9300      	str	r3, [sp, #0]
2000220a:	2302      	movs	r3, #2
2000220c:	4622      	mov	r2, r4
2000220e:	f7ff fd56 	bl	20001cbe <fillCircleHelper>
	ILI9341_Unselect();
20002212:	f7fe fe8f 	bl	20000f34 <ILI9341_Unselect>
}
20002216:	bf00      	nop
20002218:	3714      	adds	r7, #20
2000221a:	46bd      	mov	sp, r7
2000221c:	bd90      	pop	{r4, r7, pc}

2000221e <drawCircle>:
 @param    x0   Center-point x coordinate
 @param    y0   Center-point y coordinate
 @param    r   Radius of circle
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
2000221e:	b590      	push	{r4, r7, lr}
20002220:	b087      	sub	sp, #28
20002222:	af00      	add	r7, sp, #0
20002224:	4604      	mov	r4, r0
20002226:	4608      	mov	r0, r1
20002228:	4611      	mov	r1, r2
2000222a:	461a      	mov	r2, r3
2000222c:	4623      	mov	r3, r4
2000222e:	80fb      	strh	r3, [r7, #6]
20002230:	4603      	mov	r3, r0
20002232:	80bb      	strh	r3, [r7, #4]
20002234:	460b      	mov	r3, r1
20002236:	807b      	strh	r3, [r7, #2]
20002238:	4613      	mov	r3, r2
2000223a:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
2000223c:	887b      	ldrh	r3, [r7, #2]
2000223e:	f1c3 0301 	rsb	r3, r3, #1
20002242:	b29b      	uxth	r3, r3
20002244:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
20002246:	2301      	movs	r3, #1
20002248:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
2000224a:	887b      	ldrh	r3, [r7, #2]
2000224c:	461a      	mov	r2, r3
2000224e:	03d2      	lsls	r2, r2, #15
20002250:	1ad3      	subs	r3, r2, r3
20002252:	005b      	lsls	r3, r3, #1
20002254:	b29b      	uxth	r3, r3
20002256:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
20002258:	2300      	movs	r3, #0
2000225a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
2000225c:	887b      	ldrh	r3, [r7, #2]
2000225e:	81fb      	strh	r3, [r7, #14]

	ILI9341_Select();
20002260:	f7fe fe58 	bl	20000f14 <ILI9341_Select>
	ILI9341_DrawPixel(x0, y0 + r, color);
20002264:	88f8      	ldrh	r0, [r7, #6]
20002266:	88ba      	ldrh	r2, [r7, #4]
20002268:	887b      	ldrh	r3, [r7, #2]
2000226a:	4413      	add	r3, r2
2000226c:	b29b      	uxth	r3, r3
2000226e:	883a      	ldrh	r2, [r7, #0]
20002270:	4619      	mov	r1, r3
20002272:	f7ff f841 	bl	200012f8 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0, y0 - r, color);
20002276:	88f8      	ldrh	r0, [r7, #6]
20002278:	88ba      	ldrh	r2, [r7, #4]
2000227a:	887b      	ldrh	r3, [r7, #2]
2000227c:	1ad3      	subs	r3, r2, r3
2000227e:	b29b      	uxth	r3, r3
20002280:	883a      	ldrh	r2, [r7, #0]
20002282:	4619      	mov	r1, r3
20002284:	f7ff f838 	bl	200012f8 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0 + r, y0, color);
20002288:	88fa      	ldrh	r2, [r7, #6]
2000228a:	887b      	ldrh	r3, [r7, #2]
2000228c:	4413      	add	r3, r2
2000228e:	b29b      	uxth	r3, r3
20002290:	88b9      	ldrh	r1, [r7, #4]
20002292:	883a      	ldrh	r2, [r7, #0]
20002294:	4618      	mov	r0, r3
20002296:	f7ff f82f 	bl	200012f8 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0 - r, y0, color);
2000229a:	88fa      	ldrh	r2, [r7, #6]
2000229c:	887b      	ldrh	r3, [r7, #2]
2000229e:	1ad3      	subs	r3, r2, r3
200022a0:	b29b      	uxth	r3, r3
200022a2:	88b9      	ldrh	r1, [r7, #4]
200022a4:	883a      	ldrh	r2, [r7, #0]
200022a6:	4618      	mov	r0, r3
200022a8:	f7ff f826 	bl	200012f8 <ILI9341_DrawPixel>

	while (x < y) {
200022ac:	e081      	b.n	200023b2 <drawCircle+0x194>
		if (f >= 0) {
200022ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
200022b2:	2b00      	cmp	r3, #0
200022b4:	db0e      	blt.n	200022d4 <drawCircle+0xb6>
			y--;
200022b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
200022ba:	b29b      	uxth	r3, r3
200022bc:	3b01      	subs	r3, #1
200022be:	b29b      	uxth	r3, r3
200022c0:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
200022c2:	8a7b      	ldrh	r3, [r7, #18]
200022c4:	3302      	adds	r3, #2
200022c6:	b29b      	uxth	r3, r3
200022c8:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
200022ca:	8afa      	ldrh	r2, [r7, #22]
200022cc:	8a7b      	ldrh	r3, [r7, #18]
200022ce:	4413      	add	r3, r2
200022d0:	b29b      	uxth	r3, r3
200022d2:	82fb      	strh	r3, [r7, #22]
		}
		x++;
200022d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
200022d8:	b29b      	uxth	r3, r3
200022da:	3301      	adds	r3, #1
200022dc:	b29b      	uxth	r3, r3
200022de:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
200022e0:	8abb      	ldrh	r3, [r7, #20]
200022e2:	3302      	adds	r3, #2
200022e4:	b29b      	uxth	r3, r3
200022e6:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
200022e8:	8afa      	ldrh	r2, [r7, #22]
200022ea:	8abb      	ldrh	r3, [r7, #20]
200022ec:	4413      	add	r3, r2
200022ee:	b29b      	uxth	r3, r3
200022f0:	82fb      	strh	r3, [r7, #22]

		ILI9341_DrawPixel(x0 + x, y0 + y, color);
200022f2:	88fa      	ldrh	r2, [r7, #6]
200022f4:	8a3b      	ldrh	r3, [r7, #16]
200022f6:	4413      	add	r3, r2
200022f8:	b298      	uxth	r0, r3
200022fa:	88ba      	ldrh	r2, [r7, #4]
200022fc:	89fb      	ldrh	r3, [r7, #14]
200022fe:	4413      	add	r3, r2
20002300:	b29b      	uxth	r3, r3
20002302:	883a      	ldrh	r2, [r7, #0]
20002304:	4619      	mov	r1, r3
20002306:	f7fe fff7 	bl	200012f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - x, y0 + y, color);
2000230a:	88fa      	ldrh	r2, [r7, #6]
2000230c:	8a3b      	ldrh	r3, [r7, #16]
2000230e:	1ad3      	subs	r3, r2, r3
20002310:	b298      	uxth	r0, r3
20002312:	88ba      	ldrh	r2, [r7, #4]
20002314:	89fb      	ldrh	r3, [r7, #14]
20002316:	4413      	add	r3, r2
20002318:	b29b      	uxth	r3, r3
2000231a:	883a      	ldrh	r2, [r7, #0]
2000231c:	4619      	mov	r1, r3
2000231e:	f7fe ffeb 	bl	200012f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + x, y0 - y, color);
20002322:	88fa      	ldrh	r2, [r7, #6]
20002324:	8a3b      	ldrh	r3, [r7, #16]
20002326:	4413      	add	r3, r2
20002328:	b298      	uxth	r0, r3
2000232a:	88ba      	ldrh	r2, [r7, #4]
2000232c:	89fb      	ldrh	r3, [r7, #14]
2000232e:	1ad3      	subs	r3, r2, r3
20002330:	b29b      	uxth	r3, r3
20002332:	883a      	ldrh	r2, [r7, #0]
20002334:	4619      	mov	r1, r3
20002336:	f7fe ffdf 	bl	200012f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - x, y0 - y, color);
2000233a:	88fa      	ldrh	r2, [r7, #6]
2000233c:	8a3b      	ldrh	r3, [r7, #16]
2000233e:	1ad3      	subs	r3, r2, r3
20002340:	b298      	uxth	r0, r3
20002342:	88ba      	ldrh	r2, [r7, #4]
20002344:	89fb      	ldrh	r3, [r7, #14]
20002346:	1ad3      	subs	r3, r2, r3
20002348:	b29b      	uxth	r3, r3
2000234a:	883a      	ldrh	r2, [r7, #0]
2000234c:	4619      	mov	r1, r3
2000234e:	f7fe ffd3 	bl	200012f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + y, y0 + x, color);
20002352:	88fa      	ldrh	r2, [r7, #6]
20002354:	89fb      	ldrh	r3, [r7, #14]
20002356:	4413      	add	r3, r2
20002358:	b298      	uxth	r0, r3
2000235a:	88ba      	ldrh	r2, [r7, #4]
2000235c:	8a3b      	ldrh	r3, [r7, #16]
2000235e:	4413      	add	r3, r2
20002360:	b29b      	uxth	r3, r3
20002362:	883a      	ldrh	r2, [r7, #0]
20002364:	4619      	mov	r1, r3
20002366:	f7fe ffc7 	bl	200012f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - y, y0 + x, color);
2000236a:	88fa      	ldrh	r2, [r7, #6]
2000236c:	89fb      	ldrh	r3, [r7, #14]
2000236e:	1ad3      	subs	r3, r2, r3
20002370:	b298      	uxth	r0, r3
20002372:	88ba      	ldrh	r2, [r7, #4]
20002374:	8a3b      	ldrh	r3, [r7, #16]
20002376:	4413      	add	r3, r2
20002378:	b29b      	uxth	r3, r3
2000237a:	883a      	ldrh	r2, [r7, #0]
2000237c:	4619      	mov	r1, r3
2000237e:	f7fe ffbb 	bl	200012f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + y, y0 - x, color);
20002382:	88fa      	ldrh	r2, [r7, #6]
20002384:	89fb      	ldrh	r3, [r7, #14]
20002386:	4413      	add	r3, r2
20002388:	b298      	uxth	r0, r3
2000238a:	88ba      	ldrh	r2, [r7, #4]
2000238c:	8a3b      	ldrh	r3, [r7, #16]
2000238e:	1ad3      	subs	r3, r2, r3
20002390:	b29b      	uxth	r3, r3
20002392:	883a      	ldrh	r2, [r7, #0]
20002394:	4619      	mov	r1, r3
20002396:	f7fe ffaf 	bl	200012f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - y, y0 - x, color);
2000239a:	88fa      	ldrh	r2, [r7, #6]
2000239c:	89fb      	ldrh	r3, [r7, #14]
2000239e:	1ad3      	subs	r3, r2, r3
200023a0:	b298      	uxth	r0, r3
200023a2:	88ba      	ldrh	r2, [r7, #4]
200023a4:	8a3b      	ldrh	r3, [r7, #16]
200023a6:	1ad3      	subs	r3, r2, r3
200023a8:	b29b      	uxth	r3, r3
200023aa:	883a      	ldrh	r2, [r7, #0]
200023ac:	4619      	mov	r1, r3
200023ae:	f7fe ffa3 	bl	200012f8 <ILI9341_DrawPixel>
	while (x < y) {
200023b2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
200023b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
200023ba:	429a      	cmp	r2, r3
200023bc:	f6ff af77 	blt.w	200022ae <drawCircle+0x90>
	}
	ILI9341_Unselect();
200023c0:	f7fe fdb8 	bl	20000f34 <ILI9341_Unselect>
}
200023c4:	bf00      	nop
200023c6:	371c      	adds	r7, #28
200023c8:	46bd      	mov	sp, r7
200023ca:	bd90      	pop	{r4, r7, pc}

200023cc <ILI9341_ToucInit>:
uint32_t minRawY;
uint32_t maxRawY;
uint32_t minX, maxX, minY, maxY;
//------------------------------ функции ---------------------------------------------//

void ILI9341_ToucInit(void) {
200023cc:	b480      	push	{r7}
200023ce:	b083      	sub	sp, #12
200023d0:	af00      	add	r7, sp, #0
	uint32_t *tempAdr = (uint32_t*) ADR_DATA_MIN_X;
200023d2:	4b0f      	ldr	r3, [pc, #60]	; (20002410 <ILI9341_ToucInit+0x44>)
200023d4:	607b      	str	r3, [r7, #4]
	minRawX = *tempAdr;
200023d6:	687b      	ldr	r3, [r7, #4]
200023d8:	681b      	ldr	r3, [r3, #0]
200023da:	4a0e      	ldr	r2, [pc, #56]	; (20002414 <ILI9341_ToucInit+0x48>)
200023dc:	6013      	str	r3, [r2, #0]
	tempAdr = (uint32_t*) ADR_DATA_MAX_X;
200023de:	4b0e      	ldr	r3, [pc, #56]	; (20002418 <ILI9341_ToucInit+0x4c>)
200023e0:	607b      	str	r3, [r7, #4]
	maxRawX = *tempAdr;
200023e2:	687b      	ldr	r3, [r7, #4]
200023e4:	681b      	ldr	r3, [r3, #0]
200023e6:	4a0d      	ldr	r2, [pc, #52]	; (2000241c <ILI9341_ToucInit+0x50>)
200023e8:	6013      	str	r3, [r2, #0]
	tempAdr = (uint32_t*) ADR_DATA_MIN_Y;
200023ea:	4b0d      	ldr	r3, [pc, #52]	; (20002420 <ILI9341_ToucInit+0x54>)
200023ec:	607b      	str	r3, [r7, #4]
	minRawY = *tempAdr;
200023ee:	687b      	ldr	r3, [r7, #4]
200023f0:	681b      	ldr	r3, [r3, #0]
200023f2:	4a0c      	ldr	r2, [pc, #48]	; (20002424 <ILI9341_ToucInit+0x58>)
200023f4:	6013      	str	r3, [r2, #0]
	tempAdr = (uint32_t*) ADR_DATA_MAX_Y;
200023f6:	4b0c      	ldr	r3, [pc, #48]	; (20002428 <ILI9341_ToucInit+0x5c>)
200023f8:	607b      	str	r3, [r7, #4]
	maxRawY = *tempAdr;
200023fa:	687b      	ldr	r3, [r7, #4]
200023fc:	681b      	ldr	r3, [r3, #0]
200023fe:	4a0b      	ldr	r2, [pc, #44]	; (2000242c <ILI9341_ToucInit+0x60>)
20002400:	6013      	str	r3, [r2, #0]
}
20002402:	bf00      	nop
20002404:	370c      	adds	r7, #12
20002406:	46bd      	mov	sp, r7
20002408:	f85d 7b04 	ldr.w	r7, [sp], #4
2000240c:	4770      	bx	lr
2000240e:	bf00      	nop
20002410:	0807fff0 	.word	0x0807fff0
20002414:	20014974 	.word	0x20014974
20002418:	0807fff4 	.word	0x0807fff4
2000241c:	20014978 	.word	0x20014978
20002420:	0807fff8 	.word	0x0807fff8
20002424:	2001497c 	.word	0x2001497c
20002428:	0807fffc 	.word	0x0807fffc
2000242c:	20014980 	.word	0x20014980

20002430 <ILI9341_TouchSelect>:
/**************************************************************************
 @brief     will return the modulus of the num like abs in C
 @param    num  incoming number
 **************************************************************************/
static void ILI9341_TouchSelect() {
20002430:	b580      	push	{r7, lr}
20002432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
20002434:	2200      	movs	r2, #0
20002436:	f44f 7180 	mov.w	r1, #256	; 0x100
2000243a:	4802      	ldr	r0, [pc, #8]	; (20002444 <ILI9341_TouchSelect+0x14>)
2000243c:	f003 f81a 	bl	20005474 <HAL_GPIO_WritePin>
}
20002440:	bf00      	nop
20002442:	bd80      	pop	{r7, pc}
20002444:	40020000 	.word	0x40020000

20002448 <ILI9341_TouchUnselect>:
/**************************************************************************
 @brief     swaps values in variables
 @param    a  num first
 @param    a  num two
 **************************************************************************/
void ILI9341_TouchUnselect() {
20002448:	b580      	push	{r7, lr}
2000244a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
2000244c:	2201      	movs	r2, #1
2000244e:	f44f 7180 	mov.w	r1, #256	; 0x100
20002452:	4802      	ldr	r0, [pc, #8]	; (2000245c <ILI9341_TouchUnselect+0x14>)
20002454:	f003 f80e 	bl	20005474 <HAL_GPIO_WritePin>
}
20002458:	bf00      	nop
2000245a:	bd80      	pop	{r7, pc}
2000245c:	40020000 	.word	0x40020000

20002460 <ILI9341_TouchPressed>:

bool ILI9341_TouchPressed() {
20002460:	b580      	push	{r7, lr}
20002462:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(ILI9341_TOUCH_IRQ_GPIO_Port, ILI9341_TOUCH_IRQ_Pin) == GPIO_PIN_RESET;
20002464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
20002468:	4805      	ldr	r0, [pc, #20]	; (20002480 <ILI9341_TouchPressed+0x20>)
2000246a:	f002 ffeb 	bl	20005444 <HAL_GPIO_ReadPin>
2000246e:	4603      	mov	r3, r0
20002470:	2b00      	cmp	r3, #0
20002472:	bf0c      	ite	eq
20002474:	2301      	moveq	r3, #1
20002476:	2300      	movne	r3, #0
20002478:	b2db      	uxtb	r3, r3
}
2000247a:	4618      	mov	r0, r3
2000247c:	bd80      	pop	{r7, pc}
2000247e:	bf00      	nop
20002480:	40020400 	.word	0x40020400

20002484 <ILI9341_TouchGetCoordinates>:

bool ILI9341_TouchGetCoordinates(uint16_t *x, uint16_t *y) {
20002484:	b580      	push	{r7, lr}
20002486:	b08e      	sub	sp, #56	; 0x38
20002488:	af02      	add	r7, sp, #8
2000248a:	6078      	str	r0, [r7, #4]
2000248c:	6039      	str	r1, [r7, #0]
	static const uint8_t cmd_read_x[] = { READ_X };
	static const uint8_t cmd_read_y[] = { READ_Y };
	static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

	ILI9341_TouchSelect();
2000248e:	f7ff ffcf 	bl	20002430 <ILI9341_TouchSelect>

	uint32_t avg_x = 0;
20002492:	2300      	movs	r3, #0
20002494:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t avg_y = 0;
20002496:	2300      	movs	r3, #0
20002498:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t nsamples = 0;
2000249a:	2300      	movs	r3, #0
2000249c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < 16; i++) {
200024a0:	2300      	movs	r3, #0
200024a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
200024a6:	e04b      	b.n	20002540 <ILI9341_TouchGetCoordinates+0xbc>
		if (!ILI9341_TouchPressed())
200024a8:	f7ff ffda 	bl	20002460 <ILI9341_TouchPressed>
200024ac:	4603      	mov	r3, r0
200024ae:	f083 0301 	eor.w	r3, r3, #1
200024b2:	b2db      	uxtb	r3, r3
200024b4:	2b00      	cmp	r3, #0
200024b6:	d148      	bne.n	2000254a <ILI9341_TouchGetCoordinates+0xc6>
			break;

		nsamples++;
200024b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
200024bc:	3301      	adds	r3, #1
200024be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
200024c2:	f04f 33ff 	mov.w	r3, #4294967295
200024c6:	2201      	movs	r2, #1
200024c8:	494d      	ldr	r1, [pc, #308]	; (20002600 <ILI9341_TouchGetCoordinates+0x17c>)
200024ca:	484e      	ldr	r0, [pc, #312]	; (20002604 <ILI9341_TouchGetCoordinates+0x180>)
200024cc:	f003 fc99 	bl	20005e02 <HAL_SPI_Transmit>
		uint8_t y_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
200024d0:	f107 0210 	add.w	r2, r7, #16
200024d4:	f04f 33ff 	mov.w	r3, #4294967295
200024d8:	9300      	str	r3, [sp, #0]
200024da:	2302      	movs	r3, #2
200024dc:	494a      	ldr	r1, [pc, #296]	; (20002608 <ILI9341_TouchGetCoordinates+0x184>)
200024de:	4849      	ldr	r0, [pc, #292]	; (20002604 <ILI9341_TouchGetCoordinates+0x180>)
200024e0:	f003 fdcb 	bl	2000607a <HAL_SPI_TransmitReceive>

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
200024e4:	f04f 33ff 	mov.w	r3, #4294967295
200024e8:	2201      	movs	r2, #1
200024ea:	4948      	ldr	r1, [pc, #288]	; (2000260c <ILI9341_TouchGetCoordinates+0x188>)
200024ec:	4845      	ldr	r0, [pc, #276]	; (20002604 <ILI9341_TouchGetCoordinates+0x180>)
200024ee:	f003 fc88 	bl	20005e02 <HAL_SPI_Transmit>
		uint8_t x_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
200024f2:	f107 020c 	add.w	r2, r7, #12
200024f6:	f04f 33ff 	mov.w	r3, #4294967295
200024fa:	9300      	str	r3, [sp, #0]
200024fc:	2302      	movs	r3, #2
200024fe:	4942      	ldr	r1, [pc, #264]	; (20002608 <ILI9341_TouchGetCoordinates+0x184>)
20002500:	4840      	ldr	r0, [pc, #256]	; (20002604 <ILI9341_TouchGetCoordinates+0x180>)
20002502:	f003 fdba 	bl	2000607a <HAL_SPI_TransmitReceive>

		uint32_t mirrorX = ((((uint16_t) x_raw[0]) << 8) | (uint16_t) x_raw[1]);
20002506:	7b3b      	ldrb	r3, [r7, #12]
20002508:	021b      	lsls	r3, r3, #8
2000250a:	7b7a      	ldrb	r2, [r7, #13]
2000250c:	4313      	orrs	r3, r2
2000250e:	61bb      	str	r3, [r7, #24]
		avg_x += (mirrorX >> 3) & 0xFFF;
20002510:	69bb      	ldr	r3, [r7, #24]
20002512:	08db      	lsrs	r3, r3, #3
20002514:	f3c3 030b 	ubfx	r3, r3, #0, #12
20002518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000251a:	4413      	add	r3, r2
2000251c:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t mirrorY = ((((uint16_t) y_raw[0]) << 8) | (uint16_t) y_raw[1]);
2000251e:	7c3b      	ldrb	r3, [r7, #16]
20002520:	021b      	lsls	r3, r3, #8
20002522:	7c7a      	ldrb	r2, [r7, #17]
20002524:	4313      	orrs	r3, r2
20002526:	617b      	str	r3, [r7, #20]
		avg_y += (mirrorY >> 3) & 0xFFF;
20002528:	697b      	ldr	r3, [r7, #20]
2000252a:	08db      	lsrs	r3, r3, #3
2000252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
20002530:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002532:	4413      	add	r3, r2
20002534:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < 16; i++) {
20002536:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
2000253a:	3301      	adds	r3, #1
2000253c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
20002540:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
20002544:	2b0f      	cmp	r3, #15
20002546:	d9af      	bls.n	200024a8 <ILI9341_TouchGetCoordinates+0x24>
20002548:	e000      	b.n	2000254c <ILI9341_TouchGetCoordinates+0xc8>
			break;
2000254a:	bf00      	nop
	}

	ILI9341_TouchUnselect();
2000254c:	f7ff ff7c 	bl	20002448 <ILI9341_TouchUnselect>

	if (nsamples < 16)
20002550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20002554:	2b0f      	cmp	r3, #15
20002556:	d801      	bhi.n	2000255c <ILI9341_TouchGetCoordinates+0xd8>
		return false;
20002558:	2300      	movs	r3, #0
2000255a:	e04c      	b.n	200025f6 <ILI9341_TouchGetCoordinates+0x172>

	uint32_t raw_x = (avg_x / 16);
2000255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000255e:	091b      	lsrs	r3, r3, #4
20002560:	623b      	str	r3, [r7, #32]
	if (raw_x < minRawX)
20002562:	4b2b      	ldr	r3, [pc, #172]	; (20002610 <ILI9341_TouchGetCoordinates+0x18c>)
20002564:	681b      	ldr	r3, [r3, #0]
20002566:	6a3a      	ldr	r2, [r7, #32]
20002568:	429a      	cmp	r2, r3
2000256a:	d202      	bcs.n	20002572 <ILI9341_TouchGetCoordinates+0xee>
		raw_x = minRawX;
2000256c:	4b28      	ldr	r3, [pc, #160]	; (20002610 <ILI9341_TouchGetCoordinates+0x18c>)
2000256e:	681b      	ldr	r3, [r3, #0]
20002570:	623b      	str	r3, [r7, #32]
	if (raw_x > maxRawX)
20002572:	4b28      	ldr	r3, [pc, #160]	; (20002614 <ILI9341_TouchGetCoordinates+0x190>)
20002574:	681b      	ldr	r3, [r3, #0]
20002576:	6a3a      	ldr	r2, [r7, #32]
20002578:	429a      	cmp	r2, r3
2000257a:	d902      	bls.n	20002582 <ILI9341_TouchGetCoordinates+0xfe>
		raw_x = maxRawX;
2000257c:	4b25      	ldr	r3, [pc, #148]	; (20002614 <ILI9341_TouchGetCoordinates+0x190>)
2000257e:	681b      	ldr	r3, [r3, #0]
20002580:	623b      	str	r3, [r7, #32]

	uint32_t raw_y = (avg_y / 16);
20002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002584:	091b      	lsrs	r3, r3, #4
20002586:	61fb      	str	r3, [r7, #28]
	if (raw_y < minRawY)
20002588:	4b23      	ldr	r3, [pc, #140]	; (20002618 <ILI9341_TouchGetCoordinates+0x194>)
2000258a:	681b      	ldr	r3, [r3, #0]
2000258c:	69fa      	ldr	r2, [r7, #28]
2000258e:	429a      	cmp	r2, r3
20002590:	d202      	bcs.n	20002598 <ILI9341_TouchGetCoordinates+0x114>
		raw_y = minRawY;
20002592:	4b21      	ldr	r3, [pc, #132]	; (20002618 <ILI9341_TouchGetCoordinates+0x194>)
20002594:	681b      	ldr	r3, [r3, #0]
20002596:	61fb      	str	r3, [r7, #28]
	if (raw_y > maxRawY)
20002598:	4b20      	ldr	r3, [pc, #128]	; (2000261c <ILI9341_TouchGetCoordinates+0x198>)
2000259a:	681b      	ldr	r3, [r3, #0]
2000259c:	69fa      	ldr	r2, [r7, #28]
2000259e:	429a      	cmp	r2, r3
200025a0:	d902      	bls.n	200025a8 <ILI9341_TouchGetCoordinates+0x124>
		raw_y = maxRawY;
200025a2:	4b1e      	ldr	r3, [pc, #120]	; (2000261c <ILI9341_TouchGetCoordinates+0x198>)
200025a4:	681b      	ldr	r3, [r3, #0]
200025a6:	61fb      	str	r3, [r7, #28]

	// Uncomment this line to calibrate touchscreen:
	// UART_Printf("raw_x = %d, raw_y = %d\r\n", x, y);

	*x = (raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX);
200025a8:	4b19      	ldr	r3, [pc, #100]	; (20002610 <ILI9341_TouchGetCoordinates+0x18c>)
200025aa:	681b      	ldr	r3, [r3, #0]
200025ac:	6a3a      	ldr	r2, [r7, #32]
200025ae:	1ad2      	subs	r2, r2, r3
200025b0:	4613      	mov	r3, r2
200025b2:	009b      	lsls	r3, r3, #2
200025b4:	4413      	add	r3, r2
200025b6:	019b      	lsls	r3, r3, #6
200025b8:	4619      	mov	r1, r3
200025ba:	4b16      	ldr	r3, [pc, #88]	; (20002614 <ILI9341_TouchGetCoordinates+0x190>)
200025bc:	681a      	ldr	r2, [r3, #0]
200025be:	4b14      	ldr	r3, [pc, #80]	; (20002610 <ILI9341_TouchGetCoordinates+0x18c>)
200025c0:	681b      	ldr	r3, [r3, #0]
200025c2:	1ad3      	subs	r3, r2, r3
200025c4:	fbb1 f3f3 	udiv	r3, r1, r3
200025c8:	b29a      	uxth	r2, r3
200025ca:	687b      	ldr	r3, [r7, #4]
200025cc:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY);
200025ce:	4b12      	ldr	r3, [pc, #72]	; (20002618 <ILI9341_TouchGetCoordinates+0x194>)
200025d0:	681b      	ldr	r3, [r3, #0]
200025d2:	69fa      	ldr	r2, [r7, #28]
200025d4:	1ad2      	subs	r2, r2, r3
200025d6:	4613      	mov	r3, r2
200025d8:	011b      	lsls	r3, r3, #4
200025da:	1a9b      	subs	r3, r3, r2
200025dc:	011b      	lsls	r3, r3, #4
200025de:	4619      	mov	r1, r3
200025e0:	4b0e      	ldr	r3, [pc, #56]	; (2000261c <ILI9341_TouchGetCoordinates+0x198>)
200025e2:	681a      	ldr	r2, [r3, #0]
200025e4:	4b0c      	ldr	r3, [pc, #48]	; (20002618 <ILI9341_TouchGetCoordinates+0x194>)
200025e6:	681b      	ldr	r3, [r3, #0]
200025e8:	1ad3      	subs	r3, r2, r3
200025ea:	fbb1 f3f3 	udiv	r3, r1, r3
200025ee:	b29a      	uxth	r2, r3
200025f0:	683b      	ldr	r3, [r7, #0]
200025f2:	801a      	strh	r2, [r3, #0]

	return true;
200025f4:	2301      	movs	r3, #1
}
200025f6:	4618      	mov	r0, r3
200025f8:	3730      	adds	r7, #48	; 0x30
200025fa:	46bd      	mov	sp, r7
200025fc:	bd80      	pop	{r7, pc}
200025fe:	bf00      	nop
20002600:	200141ac 	.word	0x200141ac
20002604:	20014a24 	.word	0x20014a24
20002608:	200141b0 	.word	0x200141b0
2000260c:	200141b4 	.word	0x200141b4
20002610:	20014974 	.word	0x20014974
20002614:	20014978 	.word	0x20014978
20002618:	2001497c 	.word	0x2001497c
2000261c:	20014980 	.word	0x20014980

20002620 <figuringData>:

void figuringData(void) {
20002620:	b480      	push	{r7}
20002622:	b083      	sub	sp, #12
20002624:	af00      	add	r7, sp, #0
	uint32_t multiplicationFactorX, multiplicationFactorY;
	minX = minX / 2;
20002626:	4b29      	ldr	r3, [pc, #164]	; (200026cc <figuringData+0xac>)
20002628:	681b      	ldr	r3, [r3, #0]
2000262a:	085b      	lsrs	r3, r3, #1
2000262c:	4a27      	ldr	r2, [pc, #156]	; (200026cc <figuringData+0xac>)
2000262e:	6013      	str	r3, [r2, #0]
	minY = minY / 2;
20002630:	4b27      	ldr	r3, [pc, #156]	; (200026d0 <figuringData+0xb0>)
20002632:	681b      	ldr	r3, [r3, #0]
20002634:	085b      	lsrs	r3, r3, #1
20002636:	4a26      	ldr	r2, [pc, #152]	; (200026d0 <figuringData+0xb0>)
20002638:	6013      	str	r3, [r2, #0]
	maxX = maxX / 2;
2000263a:	4b26      	ldr	r3, [pc, #152]	; (200026d4 <figuringData+0xb4>)
2000263c:	681b      	ldr	r3, [r3, #0]
2000263e:	085b      	lsrs	r3, r3, #1
20002640:	4a24      	ldr	r2, [pc, #144]	; (200026d4 <figuringData+0xb4>)
20002642:	6013      	str	r3, [r2, #0]
	maxY = maxY / 2;
20002644:	4b24      	ldr	r3, [pc, #144]	; (200026d8 <figuringData+0xb8>)
20002646:	681b      	ldr	r3, [r3, #0]
20002648:	085b      	lsrs	r3, r3, #1
2000264a:	4a23      	ldr	r2, [pc, #140]	; (200026d8 <figuringData+0xb8>)
2000264c:	6013      	str	r3, [r2, #0]
	multiplicationFactorX = (maxX - minX) / 300;   // так как у нас отступ с обоих сторон 10 то рабочая область 300
2000264e:	4b21      	ldr	r3, [pc, #132]	; (200026d4 <figuringData+0xb4>)
20002650:	681a      	ldr	r2, [r3, #0]
20002652:	4b1e      	ldr	r3, [pc, #120]	; (200026cc <figuringData+0xac>)
20002654:	681b      	ldr	r3, [r3, #0]
20002656:	1ad3      	subs	r3, r2, r3
20002658:	4a20      	ldr	r2, [pc, #128]	; (200026dc <figuringData+0xbc>)
2000265a:	fba2 2303 	umull	r2, r3, r2, r3
2000265e:	095b      	lsrs	r3, r3, #5
20002660:	607b      	str	r3, [r7, #4]
	multiplicationFactorY = (maxY - minY) / 220;   // узнаем сколько единиц тача на 1 пиксель
20002662:	4b1d      	ldr	r3, [pc, #116]	; (200026d8 <figuringData+0xb8>)
20002664:	681a      	ldr	r2, [r3, #0]
20002666:	4b1a      	ldr	r3, [pc, #104]	; (200026d0 <figuringData+0xb0>)
20002668:	681b      	ldr	r3, [r3, #0]
2000266a:	1ad3      	subs	r3, r2, r3
2000266c:	089b      	lsrs	r3, r3, #2
2000266e:	4a1c      	ldr	r2, [pc, #112]	; (200026e0 <figuringData+0xc0>)
20002670:	fba2 2303 	umull	r2, r3, r2, r3
20002674:	085b      	lsrs	r3, r3, #1
20002676:	603b      	str	r3, [r7, #0]
	multiplicationFactorX = multiplicationFactorX * 10;  // так как нужно узнать сколько на 10 пикселей примерно отсчетов тача
20002678:	687a      	ldr	r2, [r7, #4]
2000267a:	4613      	mov	r3, r2
2000267c:	009b      	lsls	r3, r3, #2
2000267e:	4413      	add	r3, r2
20002680:	005b      	lsls	r3, r3, #1
20002682:	607b      	str	r3, [r7, #4]
	multiplicationFactorY = multiplicationFactorY * 10;
20002684:	683a      	ldr	r2, [r7, #0]
20002686:	4613      	mov	r3, r2
20002688:	009b      	lsls	r3, r3, #2
2000268a:	4413      	add	r3, r2
2000268c:	005b      	lsls	r3, r3, #1
2000268e:	603b      	str	r3, [r7, #0]
	minRawX = minX - multiplicationFactorX;
20002690:	4b0e      	ldr	r3, [pc, #56]	; (200026cc <figuringData+0xac>)
20002692:	681a      	ldr	r2, [r3, #0]
20002694:	687b      	ldr	r3, [r7, #4]
20002696:	1ad3      	subs	r3, r2, r3
20002698:	4a12      	ldr	r2, [pc, #72]	; (200026e4 <figuringData+0xc4>)
2000269a:	6013      	str	r3, [r2, #0]
	maxRawX = maxX + multiplicationFactorX;
2000269c:	4b0d      	ldr	r3, [pc, #52]	; (200026d4 <figuringData+0xb4>)
2000269e:	681a      	ldr	r2, [r3, #0]
200026a0:	687b      	ldr	r3, [r7, #4]
200026a2:	4413      	add	r3, r2
200026a4:	4a10      	ldr	r2, [pc, #64]	; (200026e8 <figuringData+0xc8>)
200026a6:	6013      	str	r3, [r2, #0]
	minRawY = minY - multiplicationFactorY;
200026a8:	4b09      	ldr	r3, [pc, #36]	; (200026d0 <figuringData+0xb0>)
200026aa:	681a      	ldr	r2, [r3, #0]
200026ac:	683b      	ldr	r3, [r7, #0]
200026ae:	1ad3      	subs	r3, r2, r3
200026b0:	4a0e      	ldr	r2, [pc, #56]	; (200026ec <figuringData+0xcc>)
200026b2:	6013      	str	r3, [r2, #0]
	maxRawY = maxY + multiplicationFactorY;
200026b4:	4b08      	ldr	r3, [pc, #32]	; (200026d8 <figuringData+0xb8>)
200026b6:	681a      	ldr	r2, [r3, #0]
200026b8:	683b      	ldr	r3, [r7, #0]
200026ba:	4413      	add	r3, r2
200026bc:	4a0c      	ldr	r2, [pc, #48]	; (200026f0 <figuringData+0xd0>)
200026be:	6013      	str	r3, [r2, #0]
}
200026c0:	bf00      	nop
200026c2:	370c      	adds	r7, #12
200026c4:	46bd      	mov	sp, r7
200026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200026ca:	4770      	bx	lr
200026cc:	20014984 	.word	0x20014984
200026d0:	2001498c 	.word	0x2001498c
200026d4:	20014988 	.word	0x20014988
200026d8:	20014990 	.word	0x20014990
200026dc:	1b4e81b5 	.word	0x1b4e81b5
200026e0:	094f2095 	.word	0x094f2095
200026e4:	20014974 	.word	0x20014974
200026e8:	20014978 	.word	0x20014978
200026ec:	2001497c 	.word	0x2001497c
200026f0:	20014980 	.word	0x20014980

200026f4 <calibTouch>:

uint8_t calibTouch(uint8_t poz) {
200026f4:	b580      	push	{r7, lr}
200026f6:	b08e      	sub	sp, #56	; 0x38
200026f8:	af02      	add	r7, sp, #8
200026fa:	4603      	mov	r3, r0
200026fc:	71fb      	strb	r3, [r7, #7]
	static const uint8_t cmd_read_x[] = { READ_X };
	static const uint8_t cmd_read_y[] = { READ_Y };
	static const uint8_t zeroes_tx[] = { 0x00, 0x00 };
	repit: while (!ILI9341_TouchPressed())
200026fe:	e001      	b.n	20002704 <calibTouch+0x10>
		ILI9341_TouchSelect();
20002700:	f7ff fe96 	bl	20002430 <ILI9341_TouchSelect>
	repit: while (!ILI9341_TouchPressed())
20002704:	f7ff feac 	bl	20002460 <ILI9341_TouchPressed>
20002708:	4603      	mov	r3, r0
2000270a:	f083 0301 	eor.w	r3, r3, #1
2000270e:	b2db      	uxtb	r3, r3
20002710:	2b00      	cmp	r3, #0
20002712:	d1f5      	bne.n	20002700 <calibTouch+0xc>
	uint32_t avg_x = 0;
20002714:	2300      	movs	r3, #0
20002716:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t avg_y = 0;
20002718:	2300      	movs	r3, #0
2000271a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t nsamples = 0;
2000271c:	2300      	movs	r3, #0
2000271e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < 16; i++) {
20002722:	2300      	movs	r3, #0
20002724:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
20002728:	e04b      	b.n	200027c2 <calibTouch+0xce>
		if (!ILI9341_TouchPressed())
2000272a:	f7ff fe99 	bl	20002460 <ILI9341_TouchPressed>
2000272e:	4603      	mov	r3, r0
20002730:	f083 0301 	eor.w	r3, r3, #1
20002734:	b2db      	uxtb	r3, r3
20002736:	2b00      	cmp	r3, #0
20002738:	d148      	bne.n	200027cc <calibTouch+0xd8>
			break;
		nsamples++;
2000273a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2000273e:	3301      	adds	r3, #1
20002740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
20002744:	f04f 33ff 	mov.w	r3, #4294967295
20002748:	2201      	movs	r2, #1
2000274a:	4981      	ldr	r1, [pc, #516]	; (20002950 <calibTouch+0x25c>)
2000274c:	4881      	ldr	r0, [pc, #516]	; (20002954 <calibTouch+0x260>)
2000274e:	f003 fb58 	bl	20005e02 <HAL_SPI_Transmit>
		uint8_t y_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
20002752:	f107 0210 	add.w	r2, r7, #16
20002756:	f04f 33ff 	mov.w	r3, #4294967295
2000275a:	9300      	str	r3, [sp, #0]
2000275c:	2302      	movs	r3, #2
2000275e:	497e      	ldr	r1, [pc, #504]	; (20002958 <calibTouch+0x264>)
20002760:	487c      	ldr	r0, [pc, #496]	; (20002954 <calibTouch+0x260>)
20002762:	f003 fc8a 	bl	2000607a <HAL_SPI_TransmitReceive>

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
20002766:	f04f 33ff 	mov.w	r3, #4294967295
2000276a:	2201      	movs	r2, #1
2000276c:	497b      	ldr	r1, [pc, #492]	; (2000295c <calibTouch+0x268>)
2000276e:	4879      	ldr	r0, [pc, #484]	; (20002954 <calibTouch+0x260>)
20002770:	f003 fb47 	bl	20005e02 <HAL_SPI_Transmit>
		uint8_t x_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
20002774:	f107 020c 	add.w	r2, r7, #12
20002778:	f04f 33ff 	mov.w	r3, #4294967295
2000277c:	9300      	str	r3, [sp, #0]
2000277e:	2302      	movs	r3, #2
20002780:	4975      	ldr	r1, [pc, #468]	; (20002958 <calibTouch+0x264>)
20002782:	4874      	ldr	r0, [pc, #464]	; (20002954 <calibTouch+0x260>)
20002784:	f003 fc79 	bl	2000607a <HAL_SPI_TransmitReceive>

		uint32_t mirrorX = ((((uint16_t) x_raw[0]) << 8) | (uint16_t) x_raw[1]);
20002788:	7b3b      	ldrb	r3, [r7, #12]
2000278a:	021b      	lsls	r3, r3, #8
2000278c:	7b7a      	ldrb	r2, [r7, #13]
2000278e:	4313      	orrs	r3, r2
20002790:	623b      	str	r3, [r7, #32]
		avg_x += (mirrorX >> 3) & 0xFFF;
20002792:	6a3b      	ldr	r3, [r7, #32]
20002794:	08db      	lsrs	r3, r3, #3
20002796:	f3c3 030b 	ubfx	r3, r3, #0, #12
2000279a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000279c:	4413      	add	r3, r2
2000279e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t mirrorY = ((((uint16_t) y_raw[0]) << 8) | (uint16_t) y_raw[1]);
200027a0:	7c3b      	ldrb	r3, [r7, #16]
200027a2:	021b      	lsls	r3, r3, #8
200027a4:	7c7a      	ldrb	r2, [r7, #17]
200027a6:	4313      	orrs	r3, r2
200027a8:	61fb      	str	r3, [r7, #28]
		avg_y += (mirrorY >> 3) & 0xFFF;
200027aa:	69fb      	ldr	r3, [r7, #28]
200027ac:	08db      	lsrs	r3, r3, #3
200027ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
200027b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
200027b4:	4413      	add	r3, r2
200027b6:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < 16; i++) {
200027b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
200027bc:	3301      	adds	r3, #1
200027be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
200027c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
200027c6:	2b0f      	cmp	r3, #15
200027c8:	d9af      	bls.n	2000272a <calibTouch+0x36>
200027ca:	e000      	b.n	200027ce <calibTouch+0xda>
			break;
200027cc:	bf00      	nop
	}
	ILI9341_TouchUnselect();
200027ce:	f7ff fe3b 	bl	20002448 <ILI9341_TouchUnselect>
	if (nsamples < 16)
200027d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
200027d6:	2b0f      	cmp	r3, #15
200027d8:	d800      	bhi.n	200027dc <calibTouch+0xe8>
		goto repit;
200027da:	e790      	b.n	200026fe <calibTouch+0xa>
	uint32_t raw_x = (avg_x / 16);
200027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200027de:	091b      	lsrs	r3, r3, #4
200027e0:	61bb      	str	r3, [r7, #24]
	uint32_t raw_y = (avg_y / 16);
200027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200027e4:	091b      	lsrs	r3, r3, #4
200027e6:	617b      	str	r3, [r7, #20]
	switch (poz) {
200027e8:	79fb      	ldrb	r3, [r7, #7]
200027ea:	2b04      	cmp	r3, #4
200027ec:	f200 80aa 	bhi.w	20002944 <calibTouch+0x250>
200027f0:	a201      	add	r2, pc, #4	; (adr r2, 200027f8 <calibTouch+0x104>)
200027f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200027f6:	bf00      	nop
200027f8:	2000280d 	.word	0x2000280d
200027fc:	20002821 	.word	0x20002821
20002800:	2000283b 	.word	0x2000283b
20002804:	20002855 	.word	0x20002855
20002808:	20002879 	.word	0x20002879
	case LEFTUP:
		minX = raw_x;
2000280c:	4a54      	ldr	r2, [pc, #336]	; (20002960 <calibTouch+0x26c>)
2000280e:	69bb      	ldr	r3, [r7, #24]
20002810:	6013      	str	r3, [r2, #0]
		minY = raw_y;
20002812:	4a54      	ldr	r2, [pc, #336]	; (20002964 <calibTouch+0x270>)
20002814:	697b      	ldr	r3, [r7, #20]
20002816:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
20002818:	2064      	movs	r0, #100	; 0x64
2000281a:	f001 fc65 	bl	200040e8 <buzzerSet>
		break;
2000281e:	e091      	b.n	20002944 <calibTouch+0x250>
	case RIGHTUP:
		maxX = raw_x;
20002820:	4a51      	ldr	r2, [pc, #324]	; (20002968 <calibTouch+0x274>)
20002822:	69bb      	ldr	r3, [r7, #24]
20002824:	6013      	str	r3, [r2, #0]
		minY += raw_y;
20002826:	4b4f      	ldr	r3, [pc, #316]	; (20002964 <calibTouch+0x270>)
20002828:	681a      	ldr	r2, [r3, #0]
2000282a:	697b      	ldr	r3, [r7, #20]
2000282c:	4413      	add	r3, r2
2000282e:	4a4d      	ldr	r2, [pc, #308]	; (20002964 <calibTouch+0x270>)
20002830:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
20002832:	2064      	movs	r0, #100	; 0x64
20002834:	f001 fc58 	bl	200040e8 <buzzerSet>
		break;
20002838:	e084      	b.n	20002944 <calibTouch+0x250>
	case LEFTDOWN:
		minX += raw_x;
2000283a:	4b49      	ldr	r3, [pc, #292]	; (20002960 <calibTouch+0x26c>)
2000283c:	681a      	ldr	r2, [r3, #0]
2000283e:	69bb      	ldr	r3, [r7, #24]
20002840:	4413      	add	r3, r2
20002842:	4a47      	ldr	r2, [pc, #284]	; (20002960 <calibTouch+0x26c>)
20002844:	6013      	str	r3, [r2, #0]
		maxY = raw_y;
20002846:	4a49      	ldr	r2, [pc, #292]	; (2000296c <calibTouch+0x278>)
20002848:	697b      	ldr	r3, [r7, #20]
2000284a:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
2000284c:	2064      	movs	r0, #100	; 0x64
2000284e:	f001 fc4b 	bl	200040e8 <buzzerSet>
		break;
20002852:	e077      	b.n	20002944 <calibTouch+0x250>
	case RIGHTDOWN:
		maxX += raw_x;
20002854:	4b44      	ldr	r3, [pc, #272]	; (20002968 <calibTouch+0x274>)
20002856:	681a      	ldr	r2, [r3, #0]
20002858:	69bb      	ldr	r3, [r7, #24]
2000285a:	4413      	add	r3, r2
2000285c:	4a42      	ldr	r2, [pc, #264]	; (20002968 <calibTouch+0x274>)
2000285e:	6013      	str	r3, [r2, #0]
		maxY += raw_y;
20002860:	4b42      	ldr	r3, [pc, #264]	; (2000296c <calibTouch+0x278>)
20002862:	681a      	ldr	r2, [r3, #0]
20002864:	697b      	ldr	r3, [r7, #20]
20002866:	4413      	add	r3, r2
20002868:	4a40      	ldr	r2, [pc, #256]	; (2000296c <calibTouch+0x278>)
2000286a:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
2000286c:	2064      	movs	r0, #100	; 0x64
2000286e:	f001 fc3b 	bl	200040e8 <buzzerSet>
		figuringData();
20002872:	f7ff fed5 	bl	20002620 <figuringData>
		break;
20002876:	e065      	b.n	20002944 <calibTouch+0x250>
	case CHECKCALIB:
		buzzerSet(100);
20002878:	2064      	movs	r0, #100	; 0x64
2000287a:	f001 fc35 	bl	200040e8 <buzzerSet>
		if ((((raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY)) < 125 && ((raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY)) > 115) \
2000287e:	4b3c      	ldr	r3, [pc, #240]	; (20002970 <calibTouch+0x27c>)
20002880:	681b      	ldr	r3, [r3, #0]
20002882:	697a      	ldr	r2, [r7, #20]
20002884:	1ad2      	subs	r2, r2, r3
20002886:	4613      	mov	r3, r2
20002888:	011b      	lsls	r3, r3, #4
2000288a:	1a9b      	subs	r3, r3, r2
2000288c:	011b      	lsls	r3, r3, #4
2000288e:	4619      	mov	r1, r3
20002890:	4b38      	ldr	r3, [pc, #224]	; (20002974 <calibTouch+0x280>)
20002892:	681a      	ldr	r2, [r3, #0]
20002894:	4b36      	ldr	r3, [pc, #216]	; (20002970 <calibTouch+0x27c>)
20002896:	681b      	ldr	r3, [r3, #0]
20002898:	1ad3      	subs	r3, r2, r3
2000289a:	fbb1 f3f3 	udiv	r3, r1, r3
2000289e:	2b7c      	cmp	r3, #124	; 0x7c
200028a0:	d84e      	bhi.n	20002940 <calibTouch+0x24c>
200028a2:	4b33      	ldr	r3, [pc, #204]	; (20002970 <calibTouch+0x27c>)
200028a4:	681b      	ldr	r3, [r3, #0]
200028a6:	697a      	ldr	r2, [r7, #20]
200028a8:	1ad2      	subs	r2, r2, r3
200028aa:	4613      	mov	r3, r2
200028ac:	011b      	lsls	r3, r3, #4
200028ae:	1a9b      	subs	r3, r3, r2
200028b0:	011b      	lsls	r3, r3, #4
200028b2:	4619      	mov	r1, r3
200028b4:	4b2f      	ldr	r3, [pc, #188]	; (20002974 <calibTouch+0x280>)
200028b6:	681a      	ldr	r2, [r3, #0]
200028b8:	4b2d      	ldr	r3, [pc, #180]	; (20002970 <calibTouch+0x27c>)
200028ba:	681b      	ldr	r3, [r3, #0]
200028bc:	1ad3      	subs	r3, r2, r3
200028be:	fbb1 f3f3 	udiv	r3, r1, r3
200028c2:	2b73      	cmp	r3, #115	; 0x73
200028c4:	d93c      	bls.n	20002940 <calibTouch+0x24c>
		&& (((raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX)) < 165 && ((raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX)) > 155)){
200028c6:	4b2c      	ldr	r3, [pc, #176]	; (20002978 <calibTouch+0x284>)
200028c8:	681b      	ldr	r3, [r3, #0]
200028ca:	69ba      	ldr	r2, [r7, #24]
200028cc:	1ad2      	subs	r2, r2, r3
200028ce:	4613      	mov	r3, r2
200028d0:	009b      	lsls	r3, r3, #2
200028d2:	4413      	add	r3, r2
200028d4:	019b      	lsls	r3, r3, #6
200028d6:	4619      	mov	r1, r3
200028d8:	4b28      	ldr	r3, [pc, #160]	; (2000297c <calibTouch+0x288>)
200028da:	681a      	ldr	r2, [r3, #0]
200028dc:	4b26      	ldr	r3, [pc, #152]	; (20002978 <calibTouch+0x284>)
200028de:	681b      	ldr	r3, [r3, #0]
200028e0:	1ad3      	subs	r3, r2, r3
200028e2:	fbb1 f3f3 	udiv	r3, r1, r3
200028e6:	2ba4      	cmp	r3, #164	; 0xa4
200028e8:	d82a      	bhi.n	20002940 <calibTouch+0x24c>
200028ea:	4b23      	ldr	r3, [pc, #140]	; (20002978 <calibTouch+0x284>)
200028ec:	681b      	ldr	r3, [r3, #0]
200028ee:	69ba      	ldr	r2, [r7, #24]
200028f0:	1ad2      	subs	r2, r2, r3
200028f2:	4613      	mov	r3, r2
200028f4:	009b      	lsls	r3, r3, #2
200028f6:	4413      	add	r3, r2
200028f8:	019b      	lsls	r3, r3, #6
200028fa:	4619      	mov	r1, r3
200028fc:	4b1f      	ldr	r3, [pc, #124]	; (2000297c <calibTouch+0x288>)
200028fe:	681a      	ldr	r2, [r3, #0]
20002900:	4b1d      	ldr	r3, [pc, #116]	; (20002978 <calibTouch+0x284>)
20002902:	681b      	ldr	r3, [r3, #0]
20002904:	1ad3      	subs	r3, r2, r3
20002906:	fbb1 f3f3 	udiv	r3, r1, r3
2000290a:	2b9b      	cmp	r3, #155	; 0x9b
2000290c:	d918      	bls.n	20002940 <calibTouch+0x24c>
			writeDataToMemory (ADR_DATA_MIN_X, minRawX);
2000290e:	4b1a      	ldr	r3, [pc, #104]	; (20002978 <calibTouch+0x284>)
20002910:	681b      	ldr	r3, [r3, #0]
20002912:	4619      	mov	r1, r3
20002914:	481a      	ldr	r0, [pc, #104]	; (20002980 <calibTouch+0x28c>)
20002916:	f001 fc05 	bl	20004124 <writeDataToMemory>
			writeDataToMemory (ADR_DATA_MAX_X, maxRawX);
2000291a:	4b18      	ldr	r3, [pc, #96]	; (2000297c <calibTouch+0x288>)
2000291c:	681b      	ldr	r3, [r3, #0]
2000291e:	4619      	mov	r1, r3
20002920:	4818      	ldr	r0, [pc, #96]	; (20002984 <calibTouch+0x290>)
20002922:	f001 fbff 	bl	20004124 <writeDataToMemory>
			writeDataToMemory (ADR_DATA_MIN_Y, minRawY);
20002926:	4b12      	ldr	r3, [pc, #72]	; (20002970 <calibTouch+0x27c>)
20002928:	681b      	ldr	r3, [r3, #0]
2000292a:	4619      	mov	r1, r3
2000292c:	4816      	ldr	r0, [pc, #88]	; (20002988 <calibTouch+0x294>)
2000292e:	f001 fbf9 	bl	20004124 <writeDataToMemory>
			writeDataToMemory (ADR_DATA_MAX_Y, maxRawY);
20002932:	4b10      	ldr	r3, [pc, #64]	; (20002974 <calibTouch+0x280>)
20002934:	681b      	ldr	r3, [r3, #0]
20002936:	4619      	mov	r1, r3
20002938:	4814      	ldr	r0, [pc, #80]	; (2000298c <calibTouch+0x298>)
2000293a:	f001 fbf3 	bl	20004124 <writeDataToMemory>
		} else {
			return false;
		}
		break;
2000293e:	e001      	b.n	20002944 <calibTouch+0x250>
			return false;
20002940:	2300      	movs	r3, #0
20002942:	e000      	b.n	20002946 <calibTouch+0x252>
	}
	return true;
20002944:	2301      	movs	r3, #1
}
20002946:	4618      	mov	r0, r3
20002948:	3730      	adds	r7, #48	; 0x30
2000294a:	46bd      	mov	sp, r7
2000294c:	bd80      	pop	{r7, pc}
2000294e:	bf00      	nop
20002950:	200141b8 	.word	0x200141b8
20002954:	20014a24 	.word	0x20014a24
20002958:	200141bc 	.word	0x200141bc
2000295c:	200141c0 	.word	0x200141c0
20002960:	20014984 	.word	0x20014984
20002964:	2001498c 	.word	0x2001498c
20002968:	20014988 	.word	0x20014988
2000296c:	20014990 	.word	0x20014990
20002970:	2001497c 	.word	0x2001497c
20002974:	20014980 	.word	0x20014980
20002978:	20014974 	.word	0x20014974
2000297c:	20014978 	.word	0x20014978
20002980:	0807fff0 	.word	0x0807fff0
20002984:	0807fff4 	.word	0x0807fff4
20002988:	0807fff8 	.word	0x0807fff8
2000298c:	0807fffc 	.word	0x0807fffc

20002990 <screenSaver>:
char *unitFreq[3] = { "Hz ", "kHz", "MHz", };
uint32_t multiplicationFreq[3] = { 1000000, 1000, 1 };
uint16_t x, y, countSpeed = 1;
uint32_t timBigArea = 0, timButtonPress = 0, timHoldButtonPress = 0;
//------------------------------ функции ---------------------------------------------//
void screenSaver (void) {
20002990:	b580      	push	{r7, lr}
20002992:	b084      	sub	sp, #16
20002994:	af04      	add	r7, sp, #16
	ILI9341_FillScreen(ILI9341_BLACK);
20002996:	2000      	movs	r0, #0
20002998:	f7fe fd4a 	bl	20001430 <ILI9341_FillScreen>
	strcpy(bufSpi, "PULSE");
2000299c:	4b21      	ldr	r3, [pc, #132]	; (20002a24 <screenSaver+0x94>)
2000299e:	4a22      	ldr	r2, [pc, #136]	; (20002a28 <screenSaver+0x98>)
200029a0:	e892 0003 	ldmia.w	r2, {r0, r1}
200029a4:	6018      	str	r0, [r3, #0]
200029a6:	3304      	adds	r3, #4
200029a8:	8019      	strh	r1, [r3, #0]
	ILI9341_WriteMyString(105, 76, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
200029aa:	2300      	movs	r3, #0
200029ac:	9300      	str	r3, [sp, #0]
200029ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
200029b2:	4a1c      	ldr	r2, [pc, #112]	; (20002a24 <screenSaver+0x94>)
200029b4:	214c      	movs	r1, #76	; 0x4c
200029b6:	2069      	movs	r0, #105	; 0x69
200029b8:	f7fe fe42 	bl	20001640 <ILI9341_WriteMyString>
	strcpy(bufSpi, "GENERATOR");
200029bc:	4b19      	ldr	r3, [pc, #100]	; (20002a24 <screenSaver+0x94>)
200029be:	4a1b      	ldr	r2, [pc, #108]	; (20002a2c <screenSaver+0x9c>)
200029c0:	ca07      	ldmia	r2, {r0, r1, r2}
200029c2:	c303      	stmia	r3!, {r0, r1}
200029c4:	801a      	strh	r2, [r3, #0]
	ILI9341_WriteMyString(65, 120, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
200029c6:	2300      	movs	r3, #0
200029c8:	9300      	str	r3, [sp, #0]
200029ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
200029ce:	4a15      	ldr	r2, [pc, #84]	; (20002a24 <screenSaver+0x94>)
200029d0:	2178      	movs	r1, #120	; 0x78
200029d2:	2041      	movs	r0, #65	; 0x41
200029d4:	f7fe fe34 	bl	20001640 <ILI9341_WriteMyString>
	ILI9341_WriteString(250, 220, "Ver1.1", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
200029d8:	4b15      	ldr	r3, [pc, #84]	; (20002a30 <screenSaver+0xa0>)
200029da:	2200      	movs	r2, #0
200029dc:	9202      	str	r2, [sp, #8]
200029de:	f64f 72e0 	movw	r2, #65504	; 0xffe0
200029e2:	9201      	str	r2, [sp, #4]
200029e4:	685a      	ldr	r2, [r3, #4]
200029e6:	9200      	str	r2, [sp, #0]
200029e8:	681b      	ldr	r3, [r3, #0]
200029ea:	4a12      	ldr	r2, [pc, #72]	; (20002a34 <screenSaver+0xa4>)
200029ec:	21dc      	movs	r1, #220	; 0xdc
200029ee:	20fa      	movs	r0, #250	; 0xfa
200029f0:	f7fe fefd 	bl	200017ee <ILI9341_WriteString>
	drawSomePixelRoundRect(40, 66, 240, 108, 4, 2, ILI9341_YELLOW);
200029f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200029f8:	9302      	str	r3, [sp, #8]
200029fa:	2302      	movs	r3, #2
200029fc:	9301      	str	r3, [sp, #4]
200029fe:	2304      	movs	r3, #4
20002a00:	9300      	str	r3, [sp, #0]
20002a02:	236c      	movs	r3, #108	; 0x6c
20002a04:	22f0      	movs	r2, #240	; 0xf0
20002a06:	2142      	movs	r1, #66	; 0x42
20002a08:	2028      	movs	r0, #40	; 0x28
20002a0a:	f7ff fb00 	bl	2000200e <drawSomePixelRoundRect>
	HAL_Delay(2000);
20002a0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
20002a12:	f002 f897 	bl	20004b44 <HAL_Delay>
	buzzerSet(100);
20002a16:	2064      	movs	r0, #100	; 0x64
20002a18:	f001 fb66 	bl	200040e8 <buzzerSet>
}
20002a1c:	bf00      	nop
20002a1e:	46bd      	mov	sp, r7
20002a20:	bd80      	pop	{r7, pc}
20002a22:	bf00      	nop
20002a24:	20014994 	.word	0x20014994
20002a28:	20009b00 	.word	0x20009b00
20002a2c:	20009b08 	.word	0x20009b08
20002a30:	2001472c 	.word	0x2001472c
20002a34:	20009b14 	.word	0x20009b14

20002a38 <GUICalibration>:

void GUICalibration(uint8_t pozition) {
20002a38:	b580      	push	{r7, lr}
20002a3a:	b086      	sub	sp, #24
20002a3c:	af04      	add	r7, sp, #16
20002a3e:	4603      	mov	r3, r0
20002a40:	71fb      	strb	r3, [r7, #7]
	switch (pozition) {
20002a42:	79fb      	ldrb	r3, [r7, #7]
20002a44:	2b06      	cmp	r3, #6
20002a46:	f200 8100 	bhi.w	20002c4a <GUICalibration+0x212>
20002a4a:	a201      	add	r2, pc, #4	; (adr r2, 20002a50 <GUICalibration+0x18>)
20002a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20002a50:	20002a6d 	.word	0x20002a6d
20002a54:	20002ac9 	.word	0x20002ac9
20002a58:	20002afb 	.word	0x20002afb
20002a5c:	20002b2b 	.word	0x20002b2b
20002a60:	20002b5d 	.word	0x20002b5d
20002a64:	20002bcb 	.word	0x20002bcb
20002a68:	20002c0b 	.word	0x20002c0b
	case LEFTUP:
		ILI9341_FillScreen(ILI9341_BLACK);
20002a6c:	2000      	movs	r0, #0
20002a6e:	f7fe fcdf 	bl	20001430 <ILI9341_FillScreen>
		ILI9341_WriteString(15, 50, "Display calibration, click", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
20002a72:	4b78      	ldr	r3, [pc, #480]	; (20002c54 <GUICalibration+0x21c>)
20002a74:	2200      	movs	r2, #0
20002a76:	9202      	str	r2, [sp, #8]
20002a78:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20002a7c:	9201      	str	r2, [sp, #4]
20002a7e:	685a      	ldr	r2, [r3, #4]
20002a80:	9200      	str	r2, [sp, #0]
20002a82:	681b      	ldr	r3, [r3, #0]
20002a84:	4a74      	ldr	r2, [pc, #464]	; (20002c58 <GUICalibration+0x220>)
20002a86:	2132      	movs	r1, #50	; 0x32
20002a88:	200f      	movs	r0, #15
20002a8a:	f7fe feb0 	bl	200017ee <ILI9341_WriteString>
		ILI9341_WriteString(15, 70, "on all the circles in turn", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
20002a8e:	4b71      	ldr	r3, [pc, #452]	; (20002c54 <GUICalibration+0x21c>)
20002a90:	2200      	movs	r2, #0
20002a92:	9202      	str	r2, [sp, #8]
20002a94:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20002a98:	9201      	str	r2, [sp, #4]
20002a9a:	685a      	ldr	r2, [r3, #4]
20002a9c:	9200      	str	r2, [sp, #0]
20002a9e:	681b      	ldr	r3, [r3, #0]
20002aa0:	4a6e      	ldr	r2, [pc, #440]	; (20002c5c <GUICalibration+0x224>)
20002aa2:	2146      	movs	r1, #70	; 0x46
20002aa4:	200f      	movs	r0, #15
20002aa6:	f7fe fea2 	bl	200017ee <ILI9341_WriteString>
		drawCircle(10, 10, 10, ILI9341_YELLOW);
20002aaa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002aae:	220a      	movs	r2, #10
20002ab0:	210a      	movs	r1, #10
20002ab2:	200a      	movs	r0, #10
20002ab4:	f7ff fbb3 	bl	2000221e <drawCircle>
		drawCircle(10, 10, 9, ILI9341_YELLOW);
20002ab8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002abc:	2209      	movs	r2, #9
20002abe:	210a      	movs	r1, #10
20002ac0:	200a      	movs	r0, #10
20002ac2:	f7ff fbac 	bl	2000221e <drawCircle>
		break;
20002ac6:	e0c0      	b.n	20002c4a <GUICalibration+0x212>
	case RIGHTUP:
		ILI9341_FillRectangle(0, 0, 25, 25, ILI9341_BLACK);
20002ac8:	2300      	movs	r3, #0
20002aca:	9300      	str	r3, [sp, #0]
20002acc:	2319      	movs	r3, #25
20002ace:	2219      	movs	r2, #25
20002ad0:	2100      	movs	r1, #0
20002ad2:	2000      	movs	r0, #0
20002ad4:	f7fe fc42 	bl	2000135c <ILI9341_FillRectangle>
		drawCircle(309, 10, 10, ILI9341_YELLOW);
20002ad8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002adc:	220a      	movs	r2, #10
20002ade:	210a      	movs	r1, #10
20002ae0:	f240 1035 	movw	r0, #309	; 0x135
20002ae4:	f7ff fb9b 	bl	2000221e <drawCircle>
		drawCircle(309, 10, 9, ILI9341_YELLOW);
20002ae8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002aec:	2209      	movs	r2, #9
20002aee:	210a      	movs	r1, #10
20002af0:	f240 1035 	movw	r0, #309	; 0x135
20002af4:	f7ff fb93 	bl	2000221e <drawCircle>
		break;
20002af8:	e0a7      	b.n	20002c4a <GUICalibration+0x212>
	case LEFTDOWN:
		ILI9341_FillRectangle(299, 0, 25, 25, ILI9341_BLACK);
20002afa:	2300      	movs	r3, #0
20002afc:	9300      	str	r3, [sp, #0]
20002afe:	2319      	movs	r3, #25
20002b00:	2219      	movs	r2, #25
20002b02:	2100      	movs	r1, #0
20002b04:	f240 102b 	movw	r0, #299	; 0x12b
20002b08:	f7fe fc28 	bl	2000135c <ILI9341_FillRectangle>
		drawCircle(10, 229, 10, ILI9341_YELLOW);
20002b0c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002b10:	220a      	movs	r2, #10
20002b12:	21e5      	movs	r1, #229	; 0xe5
20002b14:	200a      	movs	r0, #10
20002b16:	f7ff fb82 	bl	2000221e <drawCircle>
		drawCircle(10, 229, 9, ILI9341_YELLOW);
20002b1a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002b1e:	2209      	movs	r2, #9
20002b20:	21e5      	movs	r1, #229	; 0xe5
20002b22:	200a      	movs	r0, #10
20002b24:	f7ff fb7b 	bl	2000221e <drawCircle>
		break;
20002b28:	e08f      	b.n	20002c4a <GUICalibration+0x212>
	case RIGHTDOWN:
		ILI9341_FillRectangle(0, 219, 25, 25, ILI9341_BLACK);
20002b2a:	2300      	movs	r3, #0
20002b2c:	9300      	str	r3, [sp, #0]
20002b2e:	2319      	movs	r3, #25
20002b30:	2219      	movs	r2, #25
20002b32:	21db      	movs	r1, #219	; 0xdb
20002b34:	2000      	movs	r0, #0
20002b36:	f7fe fc11 	bl	2000135c <ILI9341_FillRectangle>
		drawCircle(309, 229, 10, ILI9341_YELLOW);
20002b3a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002b3e:	220a      	movs	r2, #10
20002b40:	21e5      	movs	r1, #229	; 0xe5
20002b42:	f240 1035 	movw	r0, #309	; 0x135
20002b46:	f7ff fb6a 	bl	2000221e <drawCircle>
		drawCircle(309, 229, 9, ILI9341_YELLOW);
20002b4a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002b4e:	2209      	movs	r2, #9
20002b50:	21e5      	movs	r1, #229	; 0xe5
20002b52:	f240 1035 	movw	r0, #309	; 0x135
20002b56:	f7ff fb62 	bl	2000221e <drawCircle>
		break;
20002b5a:	e076      	b.n	20002c4a <GUICalibration+0x212>
	case CHECKCALIB:
		ILI9341_FillRectangle(299, 219, 25, 25, ILI9341_BLACK);
20002b5c:	2300      	movs	r3, #0
20002b5e:	9300      	str	r3, [sp, #0]
20002b60:	2319      	movs	r3, #25
20002b62:	2219      	movs	r2, #25
20002b64:	21db      	movs	r1, #219	; 0xdb
20002b66:	f240 102b 	movw	r0, #299	; 0x12b
20002b6a:	f7fe fbf7 	bl	2000135c <ILI9341_FillRectangle>
		ILI9341_FillRectangle(15, 50, 290, 40, ILI9341_BLACK);
20002b6e:	2300      	movs	r3, #0
20002b70:	9300      	str	r3, [sp, #0]
20002b72:	2328      	movs	r3, #40	; 0x28
20002b74:	f44f 7291 	mov.w	r2, #290	; 0x122
20002b78:	2132      	movs	r1, #50	; 0x32
20002b7a:	200f      	movs	r0, #15
20002b7c:	f7fe fbee 	bl	2000135c <ILI9341_FillRectangle>
		ILI9341_FillRectangle(140, 100, 60, 20, ILI9341_BLACK);
20002b80:	2300      	movs	r3, #0
20002b82:	9300      	str	r3, [sp, #0]
20002b84:	2314      	movs	r3, #20
20002b86:	223c      	movs	r2, #60	; 0x3c
20002b88:	2164      	movs	r1, #100	; 0x64
20002b8a:	208c      	movs	r0, #140	; 0x8c
20002b8c:	f7fe fbe6 	bl	2000135c <ILI9341_FillRectangle>
		ILI9341_WriteString(60, 20, "Calibration check", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
20002b90:	4b30      	ldr	r3, [pc, #192]	; (20002c54 <GUICalibration+0x21c>)
20002b92:	2200      	movs	r2, #0
20002b94:	9202      	str	r2, [sp, #8]
20002b96:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20002b9a:	9201      	str	r2, [sp, #4]
20002b9c:	685a      	ldr	r2, [r3, #4]
20002b9e:	9200      	str	r2, [sp, #0]
20002ba0:	681b      	ldr	r3, [r3, #0]
20002ba2:	4a2f      	ldr	r2, [pc, #188]	; (20002c60 <GUICalibration+0x228>)
20002ba4:	2114      	movs	r1, #20
20002ba6:	203c      	movs	r0, #60	; 0x3c
20002ba8:	f7fe fe21 	bl	200017ee <ILI9341_WriteString>
		drawCircle(160, 120, 10, ILI9341_YELLOW);
20002bac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002bb0:	220a      	movs	r2, #10
20002bb2:	2178      	movs	r1, #120	; 0x78
20002bb4:	20a0      	movs	r0, #160	; 0xa0
20002bb6:	f7ff fb32 	bl	2000221e <drawCircle>
		drawCircle(160, 120, 9, ILI9341_YELLOW);
20002bba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002bbe:	2209      	movs	r2, #9
20002bc0:	2178      	movs	r1, #120	; 0x78
20002bc2:	20a0      	movs	r0, #160	; 0xa0
20002bc4:	f7ff fb2b 	bl	2000221e <drawCircle>
		break;
20002bc8:	e03f      	b.n	20002c4a <GUICalibration+0x212>
	case CALIBOK:
		ILI9341_FillRectangle(60, 20, 260, 20, ILI9341_BLACK);
20002bca:	2300      	movs	r3, #0
20002bcc:	9300      	str	r3, [sp, #0]
20002bce:	2314      	movs	r3, #20
20002bd0:	f44f 7282 	mov.w	r2, #260	; 0x104
20002bd4:	2114      	movs	r1, #20
20002bd6:	203c      	movs	r0, #60	; 0x3c
20002bd8:	f7fe fbc0 	bl	2000135c <ILI9341_FillRectangle>
		ILI9341_FillRectangle(150, 110, 30, 30, ILI9341_BLACK);
20002bdc:	2300      	movs	r3, #0
20002bde:	9300      	str	r3, [sp, #0]
20002be0:	231e      	movs	r3, #30
20002be2:	221e      	movs	r2, #30
20002be4:	216e      	movs	r1, #110	; 0x6e
20002be6:	2096      	movs	r0, #150	; 0x96
20002be8:	f7fe fbb8 	bl	2000135c <ILI9341_FillRectangle>
		ILI9341_WriteString(75, 20, "Calibration ok", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
20002bec:	4b19      	ldr	r3, [pc, #100]	; (20002c54 <GUICalibration+0x21c>)
20002bee:	2200      	movs	r2, #0
20002bf0:	9202      	str	r2, [sp, #8]
20002bf2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20002bf6:	9201      	str	r2, [sp, #4]
20002bf8:	685a      	ldr	r2, [r3, #4]
20002bfa:	9200      	str	r2, [sp, #0]
20002bfc:	681b      	ldr	r3, [r3, #0]
20002bfe:	4a19      	ldr	r2, [pc, #100]	; (20002c64 <GUICalibration+0x22c>)
20002c00:	2114      	movs	r1, #20
20002c02:	204b      	movs	r0, #75	; 0x4b
20002c04:	f7fe fdf3 	bl	200017ee <ILI9341_WriteString>
		break;
20002c08:	e01f      	b.n	20002c4a <GUICalibration+0x212>
	case ERRCALIB:
		ILI9341_FillRectangle(60, 50, 260, 20, ILI9341_BLACK);
20002c0a:	2300      	movs	r3, #0
20002c0c:	9300      	str	r3, [sp, #0]
20002c0e:	2314      	movs	r3, #20
20002c10:	f44f 7282 	mov.w	r2, #260	; 0x104
20002c14:	2132      	movs	r1, #50	; 0x32
20002c16:	203c      	movs	r0, #60	; 0x3c
20002c18:	f7fe fba0 	bl	2000135c <ILI9341_FillRectangle>
		ILI9341_FillRectangle(150, 110, 30, 30, ILI9341_BLACK);
20002c1c:	2300      	movs	r3, #0
20002c1e:	9300      	str	r3, [sp, #0]
20002c20:	231e      	movs	r3, #30
20002c22:	221e      	movs	r2, #30
20002c24:	216e      	movs	r1, #110	; 0x6e
20002c26:	2096      	movs	r0, #150	; 0x96
20002c28:	f7fe fb98 	bl	2000135c <ILI9341_FillRectangle>
		ILI9341_WriteString(60, 20, "Invalid calibration", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
20002c2c:	4b09      	ldr	r3, [pc, #36]	; (20002c54 <GUICalibration+0x21c>)
20002c2e:	2200      	movs	r2, #0
20002c30:	9202      	str	r2, [sp, #8]
20002c32:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20002c36:	9201      	str	r2, [sp, #4]
20002c38:	685a      	ldr	r2, [r3, #4]
20002c3a:	9200      	str	r2, [sp, #0]
20002c3c:	681b      	ldr	r3, [r3, #0]
20002c3e:	4a0a      	ldr	r2, [pc, #40]	; (20002c68 <GUICalibration+0x230>)
20002c40:	2114      	movs	r1, #20
20002c42:	203c      	movs	r0, #60	; 0x3c
20002c44:	f7fe fdd3 	bl	200017ee <ILI9341_WriteString>
		break;
20002c48:	bf00      	nop
	}
}
20002c4a:	bf00      	nop
20002c4c:	3708      	adds	r7, #8
20002c4e:	46bd      	mov	sp, r7
20002c50:	bd80      	pop	{r7, pc}
20002c52:	bf00      	nop
20002c54:	2001472c 	.word	0x2001472c
20002c58:	20009b1c 	.word	0x20009b1c
20002c5c:	20009b38 	.word	0x20009b38
20002c60:	20009b54 	.word	0x20009b54
20002c64:	20009b68 	.word	0x20009b68
20002c68:	20009b78 	.word	0x20009b78

20002c6c <setOK>:

void setOK(uint8_t flag) {
20002c6c:	b580      	push	{r7, lr}
20002c6e:	b086      	sub	sp, #24
20002c70:	af04      	add	r7, sp, #16
20002c72:	4603      	mov	r3, r0
20002c74:	71fb      	strb	r3, [r7, #7]
	if (flag) {
20002c76:	79fb      	ldrb	r3, [r7, #7]
20002c78:	2b00      	cmp	r3, #0
20002c7a:	d00e      	beq.n	20002c9a <setOK+0x2e>
		ILI9341_WriteString(140, 100, " OK    ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
20002c7c:	4b10      	ldr	r3, [pc, #64]	; (20002cc0 <setOK+0x54>)
20002c7e:	2200      	movs	r2, #0
20002c80:	9202      	str	r2, [sp, #8]
20002c82:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20002c86:	9201      	str	r2, [sp, #4]
20002c88:	685a      	ldr	r2, [r3, #4]
20002c8a:	9200      	str	r2, [sp, #0]
20002c8c:	681b      	ldr	r3, [r3, #0]
20002c8e:	4a0d      	ldr	r2, [pc, #52]	; (20002cc4 <setOK+0x58>)
20002c90:	2164      	movs	r1, #100	; 0x64
20002c92:	208c      	movs	r0, #140	; 0x8c
20002c94:	f7fe fdab 	bl	200017ee <ILI9341_WriteString>
	} else {
		ILI9341_WriteString(140, 100, "Wait", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
	}
}
20002c98:	e00d      	b.n	20002cb6 <setOK+0x4a>
		ILI9341_WriteString(140, 100, "Wait", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
20002c9a:	4b09      	ldr	r3, [pc, #36]	; (20002cc0 <setOK+0x54>)
20002c9c:	2200      	movs	r2, #0
20002c9e:	9202      	str	r2, [sp, #8]
20002ca0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20002ca4:	9201      	str	r2, [sp, #4]
20002ca6:	685a      	ldr	r2, [r3, #4]
20002ca8:	9200      	str	r2, [sp, #0]
20002caa:	681b      	ldr	r3, [r3, #0]
20002cac:	4a06      	ldr	r2, [pc, #24]	; (20002cc8 <setOK+0x5c>)
20002cae:	2164      	movs	r1, #100	; 0x64
20002cb0:	208c      	movs	r0, #140	; 0x8c
20002cb2:	f7fe fd9c 	bl	200017ee <ILI9341_WriteString>
}
20002cb6:	bf00      	nop
20002cb8:	3708      	adds	r7, #8
20002cba:	46bd      	mov	sp, r7
20002cbc:	bd80      	pop	{r7, pc}
20002cbe:	bf00      	nop
20002cc0:	2001472c 	.word	0x2001472c
20002cc4:	20009b8c 	.word	0x20009b8c
20002cc8:	20009b94 	.word	0x20009b94

20002ccc <startDisplay>:

void startDisplay(void) {
20002ccc:	b580      	push	{r7, lr}
20002cce:	af00      	add	r7, sp, #0
	ILI9341_TouchUnselect();
20002cd0:	f7ff fbba 	bl	20002448 <ILI9341_TouchUnselect>
	ILI9341_Unselect();
20002cd4:	f7fe f92e 	bl	20000f34 <ILI9341_Unselect>
	HAL_Delay(10);
20002cd8:	200a      	movs	r0, #10
20002cda:	f001 ff33 	bl	20004b44 <HAL_Delay>
	SET_BIT(SPI1->CR1, SPI_CR1_SPE);
20002cde:	4b09      	ldr	r3, [pc, #36]	; (20002d04 <startDisplay+0x38>)
20002ce0:	681b      	ldr	r3, [r3, #0]
20002ce2:	4a08      	ldr	r2, [pc, #32]	; (20002d04 <startDisplay+0x38>)
20002ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20002ce8:	6013      	str	r3, [r2, #0]
	ILI9341_Init();
20002cea:	f7fe f9cf 	bl	2000108c <ILI9341_Init>
	ILI9341_Select();
20002cee:	f7fe f911 	bl	20000f14 <ILI9341_Select>
	ILI9341_FillScreen(ILI9341_BLACK);
20002cf2:	2000      	movs	r0, #0
20002cf4:	f7fe fb9c 	bl	20001430 <ILI9341_FillScreen>
	HAL_Delay(100);
20002cf8:	2064      	movs	r0, #100	; 0x64
20002cfa:	f001 ff23 	bl	20004b44 <HAL_Delay>
}
20002cfe:	bf00      	nop
20002d00:	bd80      	pop	{r7, pc}
20002d02:	bf00      	nop
20002d04:	40013000 	.word	0x40013000

20002d08 <printFreeq>:

void printFreeq(void) {
20002d08:	b580      	push	{r7, lr}
20002d0a:	b086      	sub	sp, #24
20002d0c:	af04      	add	r7, sp, #16
	uint8_t count = 0;
20002d0e:	2300      	movs	r3, #0
20002d10:	71fb      	strb	r3, [r7, #7]
	float freq = 0;
20002d12:	f04f 0300 	mov.w	r3, #0
20002d16:	603b      	str	r3, [r7, #0]
	freq = (1 / (((float) ParamDevice.impuls / (float) multiplicationFreq[ParamDevice.unitImpuls]) +
20002d18:	4b43      	ldr	r3, [pc, #268]	; (20002e28 <printFreeq+0x120>)
20002d1a:	881b      	ldrh	r3, [r3, #0]
20002d1c:	ee07 3a90 	vmov	s15, r3
20002d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
20002d24:	4b40      	ldr	r3, [pc, #256]	; (20002e28 <printFreeq+0x120>)
20002d26:	7a1b      	ldrb	r3, [r3, #8]
20002d28:	461a      	mov	r2, r3
20002d2a:	4b40      	ldr	r3, [pc, #256]	; (20002e2c <printFreeq+0x124>)
20002d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002d30:	ee07 3a90 	vmov	s15, r3
20002d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
20002d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			((float) ParamDevice.pause / (float) multiplicationFreq[ParamDevice.unitPause])));
20002d3c:	4b3a      	ldr	r3, [pc, #232]	; (20002e28 <printFreeq+0x120>)
20002d3e:	885b      	ldrh	r3, [r3, #2]
20002d40:	ee07 3a90 	vmov	s15, r3
20002d44:	eeb8 6a67 	vcvt.f32.u32	s12, s15
20002d48:	4b37      	ldr	r3, [pc, #220]	; (20002e28 <printFreeq+0x120>)
20002d4a:	7a5b      	ldrb	r3, [r3, #9]
20002d4c:	461a      	mov	r2, r3
20002d4e:	4b37      	ldr	r3, [pc, #220]	; (20002e2c <printFreeq+0x124>)
20002d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002d54:	ee07 3a90 	vmov	s15, r3
20002d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
20002d5c:	eec6 7a26 	vdiv.f32	s15, s12, s13
	freq = (1 / (((float) ParamDevice.impuls / (float) multiplicationFreq[ParamDevice.unitImpuls]) +
20002d60:	ee37 7a27 	vadd.f32	s14, s14, s15
20002d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
20002d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
20002d6c:	edc7 7a00 	vstr	s15, [r7]
	if (freq >= 1000000) {
20002d70:	edd7 7a00 	vldr	s15, [r7]
20002d74:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 20002e30 <printFreeq+0x128>
20002d78:	eef4 7ac7 	vcmpe.f32	s15, s14
20002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20002d80:	db09      	blt.n	20002d96 <printFreeq+0x8e>
		count = 2;
20002d82:	2302      	movs	r3, #2
20002d84:	71fb      	strb	r3, [r7, #7]
		freq = freq / 1000000;
20002d86:	ed97 7a00 	vldr	s14, [r7]
20002d8a:	eddf 6a29 	vldr	s13, [pc, #164]	; 20002e30 <printFreeq+0x128>
20002d8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
20002d92:	edc7 7a00 	vstr	s15, [r7]
	}
	if (freq >= 1000) {
20002d96:	edd7 7a00 	vldr	s15, [r7]
20002d9a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 20002e34 <printFreeq+0x12c>
20002d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
20002da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20002da6:	db09      	blt.n	20002dbc <printFreeq+0xb4>
		count = 1;
20002da8:	2301      	movs	r3, #1
20002daa:	71fb      	strb	r3, [r7, #7]
		freq = freq / 1000;
20002dac:	ed97 7a00 	vldr	s14, [r7]
20002db0:	eddf 6a20 	vldr	s13, [pc, #128]	; 20002e34 <printFreeq+0x12c>
20002db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
20002db8:	edc7 7a00 	vstr	s15, [r7]
	}
	strcpy(bufSpi, "Freq=");
20002dbc:	4b1e      	ldr	r3, [pc, #120]	; (20002e38 <printFreeq+0x130>)
20002dbe:	4a1f      	ldr	r2, [pc, #124]	; (20002e3c <printFreeq+0x134>)
20002dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
20002dc4:	6018      	str	r0, [r3, #0]
20002dc6:	3304      	adds	r3, #4
20002dc8:	8019      	strh	r1, [r3, #0]
	ILI9341_WriteString(10, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
20002dca:	4b1d      	ldr	r3, [pc, #116]	; (20002e40 <printFreeq+0x138>)
20002dcc:	221f      	movs	r2, #31
20002dce:	9202      	str	r2, [sp, #8]
20002dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
20002dd4:	9201      	str	r2, [sp, #4]
20002dd6:	685a      	ldr	r2, [r3, #4]
20002dd8:	9200      	str	r2, [sp, #0]
20002dda:	681b      	ldr	r3, [r3, #0]
20002ddc:	4a16      	ldr	r2, [pc, #88]	; (20002e38 <printFreeq+0x130>)
20002dde:	2102      	movs	r1, #2
20002de0:	200a      	movs	r0, #10
20002de2:	f7fe fd04 	bl	200017ee <ILI9341_WriteString>
	sprintf(bufSpi, "%06.2f%s", freq, unitFreq[count]);
20002de6:	6838      	ldr	r0, [r7, #0]
20002de8:	f7fd fbb6 	bl	20000558 <__aeabi_f2d>
20002dec:	4602      	mov	r2, r0
20002dee:	460b      	mov	r3, r1
20002df0:	79f9      	ldrb	r1, [r7, #7]
20002df2:	4814      	ldr	r0, [pc, #80]	; (20002e44 <printFreeq+0x13c>)
20002df4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
20002df8:	9100      	str	r1, [sp, #0]
20002dfa:	4913      	ldr	r1, [pc, #76]	; (20002e48 <printFreeq+0x140>)
20002dfc:	480e      	ldr	r0, [pc, #56]	; (20002e38 <printFreeq+0x130>)
20002dfe:	f004 fbd1 	bl	200075a4 <siprintf>
	ILI9341_WriteString(65, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
20002e02:	4b0f      	ldr	r3, [pc, #60]	; (20002e40 <printFreeq+0x138>)
20002e04:	221f      	movs	r2, #31
20002e06:	9202      	str	r2, [sp, #8]
20002e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
20002e0c:	9201      	str	r2, [sp, #4]
20002e0e:	685a      	ldr	r2, [r3, #4]
20002e10:	9200      	str	r2, [sp, #0]
20002e12:	681b      	ldr	r3, [r3, #0]
20002e14:	4a08      	ldr	r2, [pc, #32]	; (20002e38 <printFreeq+0x130>)
20002e16:	2102      	movs	r1, #2
20002e18:	2041      	movs	r0, #65	; 0x41
20002e1a:	f7fe fce8 	bl	200017ee <ILI9341_WriteString>
}
20002e1e:	bf00      	nop
20002e20:	3708      	adds	r7, #8
20002e22:	46bd      	mov	sp, r7
20002e24:	bd80      	pop	{r7, pc}
20002e26:	bf00      	nop
20002e28:	2001476c 	.word	0x2001476c
20002e2c:	2001474c 	.word	0x2001474c
20002e30:	49742400 	.word	0x49742400
20002e34:	447a0000 	.word	0x447a0000
20002e38:	20014994 	.word	0x20014994
20002e3c:	20009b9c 	.word	0x20009b9c
20002e40:	2001472c 	.word	0x2001472c
20002e44:	20014740 	.word	0x20014740
20002e48:	20009ba4 	.word	0x20009ba4

20002e4c <printTypeOutput>:

void printTypeOutput(void) {
20002e4c:	b580      	push	{r7, lr}
20002e4e:	b084      	sub	sp, #16
20002e50:	af04      	add	r7, sp, #16
	ILI9341_FillRectangle(190, 0, 160, 22, ILI9341_BLUE);
20002e52:	231f      	movs	r3, #31
20002e54:	9300      	str	r3, [sp, #0]
20002e56:	2316      	movs	r3, #22
20002e58:	22a0      	movs	r2, #160	; 0xa0
20002e5a:	2100      	movs	r1, #0
20002e5c:	20be      	movs	r0, #190	; 0xbe
20002e5e:	f7fe fa7d 	bl	2000135c <ILI9341_FillRectangle>
	if (ParamDevice.NPNTranzistor && !ParamDevice.PNPTranzistor) {
20002e62:	4b3a      	ldr	r3, [pc, #232]	; (20002f4c <printTypeOutput+0x100>)
20002e64:	7adb      	ldrb	r3, [r3, #11]
20002e66:	2b00      	cmp	r3, #0
20002e68:	d017      	beq.n	20002e9a <printTypeOutput+0x4e>
20002e6a:	4b38      	ldr	r3, [pc, #224]	; (20002f4c <printTypeOutput+0x100>)
20002e6c:	7b1b      	ldrb	r3, [r3, #12]
20002e6e:	2b00      	cmp	r3, #0
20002e70:	d113      	bne.n	20002e9a <printTypeOutput+0x4e>
		strcpy(bufSpi, "Out:NPN");
20002e72:	4b37      	ldr	r3, [pc, #220]	; (20002f50 <printTypeOutput+0x104>)
20002e74:	4a37      	ldr	r2, [pc, #220]	; (20002f54 <printTypeOutput+0x108>)
20002e76:	e892 0003 	ldmia.w	r2, {r0, r1}
20002e7a:	e883 0003 	stmia.w	r3, {r0, r1}
		ILI9341_WriteString(190, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
20002e7e:	4b36      	ldr	r3, [pc, #216]	; (20002f58 <printTypeOutput+0x10c>)
20002e80:	221f      	movs	r2, #31
20002e82:	9202      	str	r2, [sp, #8]
20002e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
20002e88:	9201      	str	r2, [sp, #4]
20002e8a:	685a      	ldr	r2, [r3, #4]
20002e8c:	9200      	str	r2, [sp, #0]
20002e8e:	681b      	ldr	r3, [r3, #0]
20002e90:	4a2f      	ldr	r2, [pc, #188]	; (20002f50 <printTypeOutput+0x104>)
20002e92:	2102      	movs	r1, #2
20002e94:	20be      	movs	r0, #190	; 0xbe
20002e96:	f7fe fcaa 	bl	200017ee <ILI9341_WriteString>
	}
	if (ParamDevice.NPNTranzistor && ParamDevice.PNPTranzistor) {
20002e9a:	4b2c      	ldr	r3, [pc, #176]	; (20002f4c <printTypeOutput+0x100>)
20002e9c:	7adb      	ldrb	r3, [r3, #11]
20002e9e:	2b00      	cmp	r3, #0
20002ea0:	d016      	beq.n	20002ed0 <printTypeOutput+0x84>
20002ea2:	4b2a      	ldr	r3, [pc, #168]	; (20002f4c <printTypeOutput+0x100>)
20002ea4:	7b1b      	ldrb	r3, [r3, #12]
20002ea6:	2b00      	cmp	r3, #0
20002ea8:	d012      	beq.n	20002ed0 <printTypeOutput+0x84>
		strcpy(bufSpi, "Out:NPN+PNP");
20002eaa:	4b29      	ldr	r3, [pc, #164]	; (20002f50 <printTypeOutput+0x104>)
20002eac:	4a2b      	ldr	r2, [pc, #172]	; (20002f5c <printTypeOutput+0x110>)
20002eae:	ca07      	ldmia	r2, {r0, r1, r2}
20002eb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ILI9341_WriteString(190, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
20002eb4:	4b28      	ldr	r3, [pc, #160]	; (20002f58 <printTypeOutput+0x10c>)
20002eb6:	221f      	movs	r2, #31
20002eb8:	9202      	str	r2, [sp, #8]
20002eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
20002ebe:	9201      	str	r2, [sp, #4]
20002ec0:	685a      	ldr	r2, [r3, #4]
20002ec2:	9200      	str	r2, [sp, #0]
20002ec4:	681b      	ldr	r3, [r3, #0]
20002ec6:	4a22      	ldr	r2, [pc, #136]	; (20002f50 <printTypeOutput+0x104>)
20002ec8:	2102      	movs	r1, #2
20002eca:	20be      	movs	r0, #190	; 0xbe
20002ecc:	f7fe fc8f 	bl	200017ee <ILI9341_WriteString>
	}
	if (!ParamDevice.NPNTranzistor && ParamDevice.PNPTranzistor) {
20002ed0:	4b1e      	ldr	r3, [pc, #120]	; (20002f4c <printTypeOutput+0x100>)
20002ed2:	7adb      	ldrb	r3, [r3, #11]
20002ed4:	2b00      	cmp	r3, #0
20002ed6:	d117      	bne.n	20002f08 <printTypeOutput+0xbc>
20002ed8:	4b1c      	ldr	r3, [pc, #112]	; (20002f4c <printTypeOutput+0x100>)
20002eda:	7b1b      	ldrb	r3, [r3, #12]
20002edc:	2b00      	cmp	r3, #0
20002ede:	d013      	beq.n	20002f08 <printTypeOutput+0xbc>
		strcpy(bufSpi, "Out:PNP");
20002ee0:	4b1b      	ldr	r3, [pc, #108]	; (20002f50 <printTypeOutput+0x104>)
20002ee2:	4a1f      	ldr	r2, [pc, #124]	; (20002f60 <printTypeOutput+0x114>)
20002ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
20002ee8:	e883 0003 	stmia.w	r3, {r0, r1}
		ILI9341_WriteString(190, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
20002eec:	4b1a      	ldr	r3, [pc, #104]	; (20002f58 <printTypeOutput+0x10c>)
20002eee:	221f      	movs	r2, #31
20002ef0:	9202      	str	r2, [sp, #8]
20002ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
20002ef6:	9201      	str	r2, [sp, #4]
20002ef8:	685a      	ldr	r2, [r3, #4]
20002efa:	9200      	str	r2, [sp, #0]
20002efc:	681b      	ldr	r3, [r3, #0]
20002efe:	4a14      	ldr	r2, [pc, #80]	; (20002f50 <printTypeOutput+0x104>)
20002f00:	2102      	movs	r1, #2
20002f02:	20be      	movs	r0, #190	; 0xbe
20002f04:	f7fe fc73 	bl	200017ee <ILI9341_WriteString>
	}
	if (!ParamDevice.NPNTranzistor && !ParamDevice.PNPTranzistor) {
20002f08:	4b10      	ldr	r3, [pc, #64]	; (20002f4c <printTypeOutput+0x100>)
20002f0a:	7adb      	ldrb	r3, [r3, #11]
20002f0c:	2b00      	cmp	r3, #0
20002f0e:	d119      	bne.n	20002f44 <printTypeOutput+0xf8>
20002f10:	4b0e      	ldr	r3, [pc, #56]	; (20002f4c <printTypeOutput+0x100>)
20002f12:	7b1b      	ldrb	r3, [r3, #12]
20002f14:	2b00      	cmp	r3, #0
20002f16:	d115      	bne.n	20002f44 <printTypeOutput+0xf8>
		strcpy(bufSpi, "Out:No out");
20002f18:	4b0d      	ldr	r3, [pc, #52]	; (20002f50 <printTypeOutput+0x104>)
20002f1a:	4a12      	ldr	r2, [pc, #72]	; (20002f64 <printTypeOutput+0x118>)
20002f1c:	ca07      	ldmia	r2, {r0, r1, r2}
20002f1e:	c303      	stmia	r3!, {r0, r1}
20002f20:	801a      	strh	r2, [r3, #0]
20002f22:	3302      	adds	r3, #2
20002f24:	0c12      	lsrs	r2, r2, #16
20002f26:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteString(190, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
20002f28:	4b0b      	ldr	r3, [pc, #44]	; (20002f58 <printTypeOutput+0x10c>)
20002f2a:	221f      	movs	r2, #31
20002f2c:	9202      	str	r2, [sp, #8]
20002f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
20002f32:	9201      	str	r2, [sp, #4]
20002f34:	685a      	ldr	r2, [r3, #4]
20002f36:	9200      	str	r2, [sp, #0]
20002f38:	681b      	ldr	r3, [r3, #0]
20002f3a:	4a05      	ldr	r2, [pc, #20]	; (20002f50 <printTypeOutput+0x104>)
20002f3c:	2102      	movs	r1, #2
20002f3e:	20be      	movs	r0, #190	; 0xbe
20002f40:	f7fe fc55 	bl	200017ee <ILI9341_WriteString>
	}
}
20002f44:	bf00      	nop
20002f46:	46bd      	mov	sp, r7
20002f48:	bd80      	pop	{r7, pc}
20002f4a:	bf00      	nop
20002f4c:	2001476c 	.word	0x2001476c
20002f50:	20014994 	.word	0x20014994
20002f54:	20009bb0 	.word	0x20009bb0
20002f58:	2001472c 	.word	0x2001472c
20002f5c:	20009bb8 	.word	0x20009bb8
20002f60:	20009bc4 	.word	0x20009bc4
20002f64:	20009bcc 	.word	0x20009bcc

20002f68 <printTImpulse>:

void printTImpulse(void) {
20002f68:	b580      	push	{r7, lr}
20002f6a:	b082      	sub	sp, #8
20002f6c:	af02      	add	r7, sp, #8
	strcpy(bufSpi, "T imp:");
20002f6e:	4b16      	ldr	r3, [pc, #88]	; (20002fc8 <printTImpulse+0x60>)
20002f70:	4a16      	ldr	r2, [pc, #88]	; (20002fcc <printTImpulse+0x64>)
20002f72:	e892 0003 	ldmia.w	r2, {r0, r1}
20002f76:	6018      	str	r0, [r3, #0]
20002f78:	3304      	adds	r3, #4
20002f7a:	8019      	strh	r1, [r3, #0]
20002f7c:	3302      	adds	r3, #2
20002f7e:	0c0a      	lsrs	r2, r1, #16
20002f80:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteMyString(12, 30, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
20002f82:	2300      	movs	r3, #0
20002f84:	9300      	str	r3, [sp, #0]
20002f86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
20002f8a:	4a0f      	ldr	r2, [pc, #60]	; (20002fc8 <printTImpulse+0x60>)
20002f8c:	211e      	movs	r1, #30
20002f8e:	200c      	movs	r0, #12
20002f90:	f7fe fb56 	bl	20001640 <ILI9341_WriteMyString>
	sprintf(bufSpi, "%-3d %s  ", ParamDevice.impuls, unitTXT[ParamDevice.unitImpuls]);
20002f94:	4b0e      	ldr	r3, [pc, #56]	; (20002fd0 <printTImpulse+0x68>)
20002f96:	881b      	ldrh	r3, [r3, #0]
20002f98:	4619      	mov	r1, r3
20002f9a:	4b0d      	ldr	r3, [pc, #52]	; (20002fd0 <printTImpulse+0x68>)
20002f9c:	7a1b      	ldrb	r3, [r3, #8]
20002f9e:	461a      	mov	r2, r3
20002fa0:	4b0c      	ldr	r3, [pc, #48]	; (20002fd4 <printTImpulse+0x6c>)
20002fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002fa6:	460a      	mov	r2, r1
20002fa8:	490b      	ldr	r1, [pc, #44]	; (20002fd8 <printTImpulse+0x70>)
20002faa:	4807      	ldr	r0, [pc, #28]	; (20002fc8 <printTImpulse+0x60>)
20002fac:	f004 fafa 	bl	200075a4 <siprintf>
	ILI9341_WriteMyString(125, 30, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
20002fb0:	2300      	movs	r3, #0
20002fb2:	9300      	str	r3, [sp, #0]
20002fb4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
20002fb8:	4a03      	ldr	r2, [pc, #12]	; (20002fc8 <printTImpulse+0x60>)
20002fba:	211e      	movs	r1, #30
20002fbc:	207d      	movs	r0, #125	; 0x7d
20002fbe:	f7fe fb3f 	bl	20001640 <ILI9341_WriteMyString>
}
20002fc2:	bf00      	nop
20002fc4:	46bd      	mov	sp, r7
20002fc6:	bd80      	pop	{r7, pc}
20002fc8:	20014994 	.word	0x20014994
20002fcc:	20009bd8 	.word	0x20009bd8
20002fd0:	2001476c 	.word	0x2001476c
20002fd4:	20014734 	.word	0x20014734
20002fd8:	20009be0 	.word	0x20009be0

20002fdc <printTPause>:

void printTPause(void) {
20002fdc:	b580      	push	{r7, lr}
20002fde:	b082      	sub	sp, #8
20002fe0:	af02      	add	r7, sp, #8
	strcpy(bufSpi, "T paus:");
20002fe2:	4b14      	ldr	r3, [pc, #80]	; (20003034 <printTPause+0x58>)
20002fe4:	4a14      	ldr	r2, [pc, #80]	; (20003038 <printTPause+0x5c>)
20002fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
20002fea:	e883 0003 	stmia.w	r3, {r0, r1}
	ILI9341_WriteMyString(12, 78, bufSpi, ILI9341_YELLOW, ILI9341_BLACK);
20002fee:	2300      	movs	r3, #0
20002ff0:	9300      	str	r3, [sp, #0]
20002ff2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002ff6:	4a0f      	ldr	r2, [pc, #60]	; (20003034 <printTPause+0x58>)
20002ff8:	214e      	movs	r1, #78	; 0x4e
20002ffa:	200c      	movs	r0, #12
20002ffc:	f7fe fb20 	bl	20001640 <ILI9341_WriteMyString>
	sprintf(bufSpi, "%-3d %s  ", ParamDevice.pause, unitTXT[ParamDevice.unitPause]);
20003000:	4b0e      	ldr	r3, [pc, #56]	; (2000303c <printTPause+0x60>)
20003002:	885b      	ldrh	r3, [r3, #2]
20003004:	4619      	mov	r1, r3
20003006:	4b0d      	ldr	r3, [pc, #52]	; (2000303c <printTPause+0x60>)
20003008:	7a5b      	ldrb	r3, [r3, #9]
2000300a:	461a      	mov	r2, r3
2000300c:	4b0c      	ldr	r3, [pc, #48]	; (20003040 <printTPause+0x64>)
2000300e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20003012:	460a      	mov	r2, r1
20003014:	490b      	ldr	r1, [pc, #44]	; (20003044 <printTPause+0x68>)
20003016:	4807      	ldr	r0, [pc, #28]	; (20003034 <printTPause+0x58>)
20003018:	f004 fac4 	bl	200075a4 <siprintf>
	ILI9341_WriteMyString(125, 78, bufSpi, ILI9341_YELLOW, ILI9341_BLACK);
2000301c:	2300      	movs	r3, #0
2000301e:	9300      	str	r3, [sp, #0]
20003020:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20003024:	4a03      	ldr	r2, [pc, #12]	; (20003034 <printTPause+0x58>)
20003026:	214e      	movs	r1, #78	; 0x4e
20003028:	207d      	movs	r0, #125	; 0x7d
2000302a:	f7fe fb09 	bl	20001640 <ILI9341_WriteMyString>
}
2000302e:	bf00      	nop
20003030:	46bd      	mov	sp, r7
20003032:	bd80      	pop	{r7, pc}
20003034:	20014994 	.word	0x20014994
20003038:	20009bec 	.word	0x20009bec
2000303c:	2001476c 	.word	0x2001476c
20003040:	20014734 	.word	0x20014734
20003044:	20009be0 	.word	0x20009be0

20003048 <printCount>:

void printCount(void) {
20003048:	b580      	push	{r7, lr}
2000304a:	b082      	sub	sp, #8
2000304c:	af02      	add	r7, sp, #8
	strcpy(bufSpi, "Count:");
2000304e:	4b1d      	ldr	r3, [pc, #116]	; (200030c4 <printCount+0x7c>)
20003050:	4a1d      	ldr	r2, [pc, #116]	; (200030c8 <printCount+0x80>)
20003052:	e892 0003 	ldmia.w	r2, {r0, r1}
20003056:	6018      	str	r0, [r3, #0]
20003058:	3304      	adds	r3, #4
2000305a:	8019      	strh	r1, [r3, #0]
2000305c:	3302      	adds	r3, #2
2000305e:	0c0a      	lsrs	r2, r1, #16
20003060:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteMyString(12, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
20003062:	2300      	movs	r3, #0
20003064:	9300      	str	r3, [sp, #0]
20003066:	f64f 031f 	movw	r3, #63519	; 0xf81f
2000306a:	4a16      	ldr	r2, [pc, #88]	; (200030c4 <printCount+0x7c>)
2000306c:	217e      	movs	r1, #126	; 0x7e
2000306e:	200c      	movs	r0, #12
20003070:	f7fe fae6 	bl	20001640 <ILI9341_WriteMyString>
	if (ParamDevice.count) {
20003074:	4b15      	ldr	r3, [pc, #84]	; (200030cc <printCount+0x84>)
20003076:	889b      	ldrh	r3, [r3, #4]
20003078:	2b00      	cmp	r3, #0
2000307a:	d011      	beq.n	200030a0 <printCount+0x58>
		sprintf(bufSpi, "%-3d %s  ", ParamDevice.count, "rp");
2000307c:	4b13      	ldr	r3, [pc, #76]	; (200030cc <printCount+0x84>)
2000307e:	889b      	ldrh	r3, [r3, #4]
20003080:	461a      	mov	r2, r3
20003082:	4b13      	ldr	r3, [pc, #76]	; (200030d0 <printCount+0x88>)
20003084:	4913      	ldr	r1, [pc, #76]	; (200030d4 <printCount+0x8c>)
20003086:	480f      	ldr	r0, [pc, #60]	; (200030c4 <printCount+0x7c>)
20003088:	f004 fa8c 	bl	200075a4 <siprintf>
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
2000308c:	2300      	movs	r3, #0
2000308e:	9300      	str	r3, [sp, #0]
20003090:	f64f 031f 	movw	r3, #63519	; 0xf81f
20003094:	4a0b      	ldr	r2, [pc, #44]	; (200030c4 <printCount+0x7c>)
20003096:	217e      	movs	r1, #126	; 0x7e
20003098:	207d      	movs	r0, #125	; 0x7d
2000309a:	f7fe fad1 	bl	20001640 <ILI9341_WriteMyString>
	} else {
		sprintf(bufSpi, "~   %s  ", "rp");
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
	}
}
2000309e:	e00d      	b.n	200030bc <printCount+0x74>
		sprintf(bufSpi, "~   %s  ", "rp");
200030a0:	4a0b      	ldr	r2, [pc, #44]	; (200030d0 <printCount+0x88>)
200030a2:	490d      	ldr	r1, [pc, #52]	; (200030d8 <printCount+0x90>)
200030a4:	4807      	ldr	r0, [pc, #28]	; (200030c4 <printCount+0x7c>)
200030a6:	f004 fa7d 	bl	200075a4 <siprintf>
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
200030aa:	2300      	movs	r3, #0
200030ac:	9300      	str	r3, [sp, #0]
200030ae:	f64f 031f 	movw	r3, #63519	; 0xf81f
200030b2:	4a04      	ldr	r2, [pc, #16]	; (200030c4 <printCount+0x7c>)
200030b4:	217e      	movs	r1, #126	; 0x7e
200030b6:	207d      	movs	r0, #125	; 0x7d
200030b8:	f7fe fac2 	bl	20001640 <ILI9341_WriteMyString>
}
200030bc:	bf00      	nop
200030be:	46bd      	mov	sp, r7
200030c0:	bd80      	pop	{r7, pc}
200030c2:	bf00      	nop
200030c4:	20014994 	.word	0x20014994
200030c8:	20009bf4 	.word	0x20009bf4
200030cc:	2001476c 	.word	0x2001476c
200030d0:	20009bfc 	.word	0x20009bfc
200030d4:	20009be0 	.word	0x20009be0
200030d8:	20009c00 	.word	0x20009c00

200030dc <printColorImage>:

void printColorImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t status, const uint16_t *data) {
200030dc:	b590      	push	{r4, r7, lr}
200030de:	b085      	sub	sp, #20
200030e0:	af02      	add	r7, sp, #8
200030e2:	4604      	mov	r4, r0
200030e4:	4608      	mov	r0, r1
200030e6:	4611      	mov	r1, r2
200030e8:	461a      	mov	r2, r3
200030ea:	4623      	mov	r3, r4
200030ec:	80fb      	strh	r3, [r7, #6]
200030ee:	4603      	mov	r3, r0
200030f0:	80bb      	strh	r3, [r7, #4]
200030f2:	460b      	mov	r3, r1
200030f4:	807b      	strh	r3, [r7, #2]
200030f6:	4613      	mov	r3, r2
200030f8:	803b      	strh	r3, [r7, #0]
	if (status == NO_PRESSED) {
200030fa:	8b3b      	ldrh	r3, [r7, #24]
200030fc:	2b00      	cmp	r3, #0
200030fe:	d11c      	bne.n	2000313a <printColorImage+0x5e>
		drawRect(x - 1, y - 1, w + 2, h + 2, ILI9341_BLACK);
20003100:	88fb      	ldrh	r3, [r7, #6]
20003102:	3b01      	subs	r3, #1
20003104:	b29b      	uxth	r3, r3
20003106:	b218      	sxth	r0, r3
20003108:	88bb      	ldrh	r3, [r7, #4]
2000310a:	3b01      	subs	r3, #1
2000310c:	b29b      	uxth	r3, r3
2000310e:	b219      	sxth	r1, r3
20003110:	887b      	ldrh	r3, [r7, #2]
20003112:	3302      	adds	r3, #2
20003114:	b29b      	uxth	r3, r3
20003116:	b21a      	sxth	r2, r3
20003118:	883b      	ldrh	r3, [r7, #0]
2000311a:	3302      	adds	r3, #2
2000311c:	b29b      	uxth	r3, r3
2000311e:	b21b      	sxth	r3, r3
20003120:	2400      	movs	r4, #0
20003122:	9400      	str	r4, [sp, #0]
20003124:	f7fe fcc6 	bl	20001ab4 <drawRect>
		ILI9341_DrawImage(x, y, w, h, data);
20003128:	883c      	ldrh	r4, [r7, #0]
2000312a:	887a      	ldrh	r2, [r7, #2]
2000312c:	88b9      	ldrh	r1, [r7, #4]
2000312e:	88f8      	ldrh	r0, [r7, #6]
20003130:	69fb      	ldr	r3, [r7, #28]
20003132:	9300      	str	r3, [sp, #0]
20003134:	4623      	mov	r3, r4
20003136:	f7fe fba5 	bl	20001884 <ILI9341_DrawImage>
	}
	if (status == PRESSED) {
2000313a:	8b3b      	ldrh	r3, [r7, #24]
2000313c:	2b01      	cmp	r3, #1
2000313e:	d11c      	bne.n	2000317a <printColorImage+0x9e>
		drawRect(x, y, w + 2, h + 2, ILI9341_BLACK);
20003140:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
20003144:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
20003148:	887b      	ldrh	r3, [r7, #2]
2000314a:	3302      	adds	r3, #2
2000314c:	b29b      	uxth	r3, r3
2000314e:	b21a      	sxth	r2, r3
20003150:	883b      	ldrh	r3, [r7, #0]
20003152:	3302      	adds	r3, #2
20003154:	b29b      	uxth	r3, r3
20003156:	b21b      	sxth	r3, r3
20003158:	2400      	movs	r4, #0
2000315a:	9400      	str	r4, [sp, #0]
2000315c:	f7fe fcaa 	bl	20001ab4 <drawRect>
		ILI9341_DrawImage(x + 1, y + 1, w, h, data);
20003160:	88fb      	ldrh	r3, [r7, #6]
20003162:	3301      	adds	r3, #1
20003164:	b298      	uxth	r0, r3
20003166:	88bb      	ldrh	r3, [r7, #4]
20003168:	3301      	adds	r3, #1
2000316a:	b299      	uxth	r1, r3
2000316c:	883c      	ldrh	r4, [r7, #0]
2000316e:	887a      	ldrh	r2, [r7, #2]
20003170:	69fb      	ldr	r3, [r7, #28]
20003172:	9300      	str	r3, [sp, #0]
20003174:	4623      	mov	r3, r4
20003176:	f7fe fb85 	bl	20001884 <ILI9341_DrawImage>
	}
}
2000317a:	bf00      	nop
2000317c:	370c      	adds	r7, #12
2000317e:	46bd      	mov	sp, r7
20003180:	bd90      	pop	{r4, r7, pc}
	...

20003184 <mainDisplayPrint>:

void mainDisplayPrint(void) {
20003184:	b580      	push	{r7, lr}
20003186:	b084      	sub	sp, #16
20003188:	af04      	add	r7, sp, #16
	ILI9341_FillScreen(ILI9341_BLACK);
2000318a:	2000      	movs	r0, #0
2000318c:	f7fe f950 	bl	20001430 <ILI9341_FillScreen>
	ILI9341_FillRectangle(0, 0, 320, 22, ILI9341_BLUE);
20003190:	231f      	movs	r3, #31
20003192:	9300      	str	r3, [sp, #0]
20003194:	2316      	movs	r3, #22
20003196:	f44f 72a0 	mov.w	r2, #320	; 0x140
2000319a:	2100      	movs	r1, #0
2000319c:	2000      	movs	r0, #0
2000319e:	f7fe f8dd 	bl	2000135c <ILI9341_FillRectangle>
	printTypeOutput();
200031a2:	f7ff fe53 	bl	20002e4c <printTypeOutput>
	printFreeq();
200031a6:	f7ff fdaf 	bl	20002d08 <printFreeq>
	printTImpulse();
200031aa:	f7ff fedd 	bl	20002f68 <printTImpulse>
	printTPause();
200031ae:	f7ff ff15 	bl	20002fdc <printTPause>
	printCount();
200031b2:	f7ff ff49 	bl	20003048 <printCount>
	printColorImage(24, 182, 50, 50, NO_PRESSED, image_Plus);
200031b6:	4b20      	ldr	r3, [pc, #128]	; (20003238 <mainDisplayPrint+0xb4>)
200031b8:	9301      	str	r3, [sp, #4]
200031ba:	2300      	movs	r3, #0
200031bc:	9300      	str	r3, [sp, #0]
200031be:	2332      	movs	r3, #50	; 0x32
200031c0:	2232      	movs	r2, #50	; 0x32
200031c2:	21b6      	movs	r1, #182	; 0xb6
200031c4:	2018      	movs	r0, #24
200031c6:	f7ff ff89 	bl	200030dc <printColorImage>
	printColorImage(98, 182, 50, 50, NO_PRESSED, image_Arrow);
200031ca:	4b1c      	ldr	r3, [pc, #112]	; (2000323c <mainDisplayPrint+0xb8>)
200031cc:	9301      	str	r3, [sp, #4]
200031ce:	2300      	movs	r3, #0
200031d0:	9300      	str	r3, [sp, #0]
200031d2:	2332      	movs	r3, #50	; 0x32
200031d4:	2232      	movs	r2, #50	; 0x32
200031d6:	21b6      	movs	r1, #182	; 0xb6
200031d8:	2062      	movs	r0, #98	; 0x62
200031da:	f7ff ff7f 	bl	200030dc <printColorImage>
	printColorImage(172, 182, 50, 50, NO_PRESSED, image_Minus);
200031de:	4b18      	ldr	r3, [pc, #96]	; (20003240 <mainDisplayPrint+0xbc>)
200031e0:	9301      	str	r3, [sp, #4]
200031e2:	2300      	movs	r3, #0
200031e4:	9300      	str	r3, [sp, #0]
200031e6:	2332      	movs	r3, #50	; 0x32
200031e8:	2232      	movs	r2, #50	; 0x32
200031ea:	21b6      	movs	r1, #182	; 0xb6
200031ec:	20ac      	movs	r0, #172	; 0xac
200031ee:	f7ff ff75 	bl	200030dc <printColorImage>
	printColorImage(246, 182, 50, 50, NO_PRESSED, image_powerGreen);
200031f2:	4b14      	ldr	r3, [pc, #80]	; (20003244 <mainDisplayPrint+0xc0>)
200031f4:	9301      	str	r3, [sp, #4]
200031f6:	2300      	movs	r3, #0
200031f8:	9300      	str	r3, [sp, #0]
200031fa:	2332      	movs	r3, #50	; 0x32
200031fc:	2232      	movs	r2, #50	; 0x32
200031fe:	21b6      	movs	r1, #182	; 0xb6
20003200:	20f6      	movs	r0, #246	; 0xf6
20003202:	f7ff ff6b 	bl	200030dc <printColorImage>
	ILI9341_DrawMonochromeImage(260, 43, ILI9341_YELLOW, ILI9341_BLACK, tranzistor);
20003206:	4a10      	ldr	r2, [pc, #64]	; (20003248 <mainDisplayPrint+0xc4>)
20003208:	466b      	mov	r3, sp
2000320a:	ca07      	ldmia	r2, {r0, r1, r2}
2000320c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
20003210:	2300      	movs	r3, #0
20003212:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20003216:	212b      	movs	r1, #43	; 0x2b
20003218:	f44f 7082 	mov.w	r0, #260	; 0x104
2000321c:	f7fe fb7a 	bl	20001914 <ILI9341_DrawMonochromeImage>
	NPN_PNPButton(NPN, PRESSED);
20003220:	2101      	movs	r1, #1
20003222:	2001      	movs	r0, #1
20003224:	f000 fad6 	bl	200037d4 <NPN_PNPButton>
	NPN_PNPButton(PNP, NO_PRESSED);
20003228:	2100      	movs	r1, #0
2000322a:	2000      	movs	r0, #0
2000322c:	f000 fad2 	bl	200037d4 <NPN_PNPButton>
    /*if(ILI9341_TouchGetCoordinates(&x, &y)) {
	 ILI9341_DrawPixel(x, y, ILI9341_WHITE);
	 }*/
}
20003230:	bf00      	nop
20003232:	46bd      	mov	sp, r7
20003234:	bd80      	pop	{r7, pc}
20003236:	bf00      	nop
20003238:	2000c328 	.word	0x2000c328
2000323c:	2000eb64 	.word	0x2000eb64
20003240:	2000d6b0 	.word	0x2000d6b0
20003244:	2000afa0 	.word	0x2000afa0
20003248:	20014324 	.word	0x20014324

2000324c <checkAreaTouch>:

uint8_t checkAreaTouch(uint16_t xTouch, uint16_t yTouch, uint16_t xScan, uint16_t yScan, uint16_t weight, uint16_t height) {
2000324c:	b490      	push	{r4, r7}
2000324e:	b082      	sub	sp, #8
20003250:	af00      	add	r7, sp, #0
20003252:	4604      	mov	r4, r0
20003254:	4608      	mov	r0, r1
20003256:	4611      	mov	r1, r2
20003258:	461a      	mov	r2, r3
2000325a:	4623      	mov	r3, r4
2000325c:	80fb      	strh	r3, [r7, #6]
2000325e:	4603      	mov	r3, r0
20003260:	80bb      	strh	r3, [r7, #4]
20003262:	460b      	mov	r3, r1
20003264:	807b      	strh	r3, [r7, #2]
20003266:	4613      	mov	r3, r2
20003268:	803b      	strh	r3, [r7, #0]
	if (xTouch >= xScan && xTouch <= xScan + weight && yTouch >= yScan && yTouch <= yScan + height)
2000326a:	88fa      	ldrh	r2, [r7, #6]
2000326c:	887b      	ldrh	r3, [r7, #2]
2000326e:	429a      	cmp	r2, r3
20003270:	d311      	bcc.n	20003296 <checkAreaTouch+0x4a>
20003272:	88fa      	ldrh	r2, [r7, #6]
20003274:	8879      	ldrh	r1, [r7, #2]
20003276:	8a3b      	ldrh	r3, [r7, #16]
20003278:	440b      	add	r3, r1
2000327a:	429a      	cmp	r2, r3
2000327c:	dc0b      	bgt.n	20003296 <checkAreaTouch+0x4a>
2000327e:	88ba      	ldrh	r2, [r7, #4]
20003280:	883b      	ldrh	r3, [r7, #0]
20003282:	429a      	cmp	r2, r3
20003284:	d307      	bcc.n	20003296 <checkAreaTouch+0x4a>
20003286:	88ba      	ldrh	r2, [r7, #4]
20003288:	8839      	ldrh	r1, [r7, #0]
2000328a:	8abb      	ldrh	r3, [r7, #20]
2000328c:	440b      	add	r3, r1
2000328e:	429a      	cmp	r2, r3
20003290:	dc01      	bgt.n	20003296 <checkAreaTouch+0x4a>
		return true;
20003292:	2301      	movs	r3, #1
20003294:	e000      	b.n	20003298 <checkAreaTouch+0x4c>
	return false;
20003296:	2300      	movs	r3, #0
}
20003298:	4618      	mov	r0, r3
2000329a:	3708      	adds	r7, #8
2000329c:	46bd      	mov	sp, r7
2000329e:	bc90      	pop	{r4, r7}
200032a0:	4770      	bx	lr
	...

200032a4 <checkstrokeArea>:

void checkstrokeArea(void) {
200032a4:	b580      	push	{r7, lr}
200032a6:	b084      	sub	sp, #16
200032a8:	af04      	add	r7, sp, #16
	if (!READ_FLAG(AREA1_PRESS, globalFlag)) {
200032aa:	4b31      	ldr	r3, [pc, #196]	; (20003370 <checkstrokeArea+0xcc>)
200032ac:	681b      	ldr	r3, [r3, #0]
200032ae:	f003 0308 	and.w	r3, r3, #8
200032b2:	2b00      	cmp	r3, #0
200032b4:	d10c      	bne.n	200032d0 <checkstrokeArea+0x2c>
		drawSomePixelRoundRect(7, 28, 242, 48, 4, 2, ILI9341_BLACK);
200032b6:	2300      	movs	r3, #0
200032b8:	9302      	str	r3, [sp, #8]
200032ba:	2302      	movs	r3, #2
200032bc:	9301      	str	r3, [sp, #4]
200032be:	2304      	movs	r3, #4
200032c0:	9300      	str	r3, [sp, #0]
200032c2:	2330      	movs	r3, #48	; 0x30
200032c4:	22f2      	movs	r2, #242	; 0xf2
200032c6:	211c      	movs	r1, #28
200032c8:	2007      	movs	r0, #7
200032ca:	f7fe fea0 	bl	2000200e <drawSomePixelRoundRect>
200032ce:	e00c      	b.n	200032ea <checkstrokeArea+0x46>
	} else {
		drawSomePixelRoundRect(7, 28, 242, 48, 4, 2, ILI9341_YELLOW);
200032d0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200032d4:	9302      	str	r3, [sp, #8]
200032d6:	2302      	movs	r3, #2
200032d8:	9301      	str	r3, [sp, #4]
200032da:	2304      	movs	r3, #4
200032dc:	9300      	str	r3, [sp, #0]
200032de:	2330      	movs	r3, #48	; 0x30
200032e0:	22f2      	movs	r2, #242	; 0xf2
200032e2:	211c      	movs	r1, #28
200032e4:	2007      	movs	r0, #7
200032e6:	f7fe fe92 	bl	2000200e <drawSomePixelRoundRect>
	}
	if (!READ_FLAG(AREA2_PRESS, globalFlag)) {
200032ea:	4b21      	ldr	r3, [pc, #132]	; (20003370 <checkstrokeArea+0xcc>)
200032ec:	681b      	ldr	r3, [r3, #0]
200032ee:	f003 0310 	and.w	r3, r3, #16
200032f2:	2b00      	cmp	r3, #0
200032f4:	d10c      	bne.n	20003310 <checkstrokeArea+0x6c>
		drawSomePixelRoundRect(7, 76, 242, 48, 4, 2, ILI9341_BLACK);
200032f6:	2300      	movs	r3, #0
200032f8:	9302      	str	r3, [sp, #8]
200032fa:	2302      	movs	r3, #2
200032fc:	9301      	str	r3, [sp, #4]
200032fe:	2304      	movs	r3, #4
20003300:	9300      	str	r3, [sp, #0]
20003302:	2330      	movs	r3, #48	; 0x30
20003304:	22f2      	movs	r2, #242	; 0xf2
20003306:	214c      	movs	r1, #76	; 0x4c
20003308:	2007      	movs	r0, #7
2000330a:	f7fe fe80 	bl	2000200e <drawSomePixelRoundRect>
2000330e:	e00c      	b.n	2000332a <checkstrokeArea+0x86>
	} else {
		drawSomePixelRoundRect(7, 76, 242, 48, 4, 2, ILI9341_YELLOW);
20003310:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20003314:	9302      	str	r3, [sp, #8]
20003316:	2302      	movs	r3, #2
20003318:	9301      	str	r3, [sp, #4]
2000331a:	2304      	movs	r3, #4
2000331c:	9300      	str	r3, [sp, #0]
2000331e:	2330      	movs	r3, #48	; 0x30
20003320:	22f2      	movs	r2, #242	; 0xf2
20003322:	214c      	movs	r1, #76	; 0x4c
20003324:	2007      	movs	r0, #7
20003326:	f7fe fe72 	bl	2000200e <drawSomePixelRoundRect>
	}
	if (!READ_FLAG(AREA3_PRESS, globalFlag)) {
2000332a:	4b11      	ldr	r3, [pc, #68]	; (20003370 <checkstrokeArea+0xcc>)
2000332c:	681b      	ldr	r3, [r3, #0]
2000332e:	f003 0320 	and.w	r3, r3, #32
20003332:	2b00      	cmp	r3, #0
20003334:	d10c      	bne.n	20003350 <checkstrokeArea+0xac>
		drawSomePixelRoundRect(7, 124, 242, 48, 4, 2, ILI9341_BLACK);
20003336:	2300      	movs	r3, #0
20003338:	9302      	str	r3, [sp, #8]
2000333a:	2302      	movs	r3, #2
2000333c:	9301      	str	r3, [sp, #4]
2000333e:	2304      	movs	r3, #4
20003340:	9300      	str	r3, [sp, #0]
20003342:	2330      	movs	r3, #48	; 0x30
20003344:	22f2      	movs	r2, #242	; 0xf2
20003346:	217c      	movs	r1, #124	; 0x7c
20003348:	2007      	movs	r0, #7
2000334a:	f7fe fe60 	bl	2000200e <drawSomePixelRoundRect>
	} else {
		drawSomePixelRoundRect(7, 124, 242, 48, 4, 2, ILI9341_YELLOW);
	}
}
2000334e:	e00c      	b.n	2000336a <checkstrokeArea+0xc6>
		drawSomePixelRoundRect(7, 124, 242, 48, 4, 2, ILI9341_YELLOW);
20003350:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20003354:	9302      	str	r3, [sp, #8]
20003356:	2302      	movs	r3, #2
20003358:	9301      	str	r3, [sp, #4]
2000335a:	2304      	movs	r3, #4
2000335c:	9300      	str	r3, [sp, #0]
2000335e:	2330      	movs	r3, #48	; 0x30
20003360:	22f2      	movs	r2, #242	; 0xf2
20003362:	217c      	movs	r1, #124	; 0x7c
20003364:	2007      	movs	r0, #7
20003366:	f7fe fe52 	bl	2000200e <drawSomePixelRoundRect>
}
2000336a:	bf00      	nop
2000336c:	46bd      	mov	sp, r7
2000336e:	bd80      	pop	{r7, pc}
20003370:	20014ac4 	.word	0x20014ac4

20003374 <endOperationWindow>:

void endOperationWindow(uint8_t onOff) {
20003374:	b580      	push	{r7, lr}
20003376:	b086      	sub	sp, #24
20003378:	af04      	add	r7, sp, #16
2000337a:	4603      	mov	r3, r0
2000337c:	71fb      	strb	r3, [r7, #7]
	if (onOff) {
2000337e:	79fb      	ldrb	r3, [r7, #7]
20003380:	2b00      	cmp	r3, #0
20003382:	d023      	beq.n	200033cc <endOperationWindow+0x58>
		ILI9341_FillRectangle(40, 60, 180, 60, ILI9341_BLACK);
20003384:	2300      	movs	r3, #0
20003386:	9300      	str	r3, [sp, #0]
20003388:	233c      	movs	r3, #60	; 0x3c
2000338a:	22b4      	movs	r2, #180	; 0xb4
2000338c:	213c      	movs	r1, #60	; 0x3c
2000338e:	2028      	movs	r0, #40	; 0x28
20003390:	f7fd ffe4 	bl	2000135c <ILI9341_FillRectangle>
		drawSomePixelRoundRect(38, 58, 182, 62, 3, 2, ILI9341_YELLOW);
20003394:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20003398:	9302      	str	r3, [sp, #8]
2000339a:	2302      	movs	r3, #2
2000339c:	9301      	str	r3, [sp, #4]
2000339e:	2303      	movs	r3, #3
200033a0:	9300      	str	r3, [sp, #0]
200033a2:	233e      	movs	r3, #62	; 0x3e
200033a4:	22b6      	movs	r2, #182	; 0xb6
200033a6:	213a      	movs	r1, #58	; 0x3a
200033a8:	2026      	movs	r0, #38	; 0x26
200033aa:	f7fe fe30 	bl	2000200e <drawSomePixelRoundRect>
		strcpy(bufSpi, "COMPLETE");
200033ae:	4b10      	ldr	r3, [pc, #64]	; (200033f0 <endOperationWindow+0x7c>)
200033b0:	4a10      	ldr	r2, [pc, #64]	; (200033f4 <endOperationWindow+0x80>)
200033b2:	ca07      	ldmia	r2, {r0, r1, r2}
200033b4:	c303      	stmia	r3!, {r0, r1}
200033b6:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteMyString(48, 65, bufSpi, ILI9341_RED, ILI9341_BLACK);
200033b8:	2300      	movs	r3, #0
200033ba:	9300      	str	r3, [sp, #0]
200033bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
200033c0:	4a0b      	ldr	r2, [pc, #44]	; (200033f0 <endOperationWindow+0x7c>)
200033c2:	2141      	movs	r1, #65	; 0x41
200033c4:	2030      	movs	r0, #48	; 0x30
200033c6:	f7fe f93b 	bl	20001640 <ILI9341_WriteMyString>
		ILI9341_FillRectangle(38, 58, 182, 62, ILI9341_BLACK);
		printTImpulse();
		printTPause();
		checkstrokeArea();
	}
}
200033ca:	e00d      	b.n	200033e8 <endOperationWindow+0x74>
		ILI9341_FillRectangle(38, 58, 182, 62, ILI9341_BLACK);
200033cc:	2300      	movs	r3, #0
200033ce:	9300      	str	r3, [sp, #0]
200033d0:	233e      	movs	r3, #62	; 0x3e
200033d2:	22b6      	movs	r2, #182	; 0xb6
200033d4:	213a      	movs	r1, #58	; 0x3a
200033d6:	2026      	movs	r0, #38	; 0x26
200033d8:	f7fd ffc0 	bl	2000135c <ILI9341_FillRectangle>
		printTImpulse();
200033dc:	f7ff fdc4 	bl	20002f68 <printTImpulse>
		printTPause();
200033e0:	f7ff fdfc 	bl	20002fdc <printTPause>
		checkstrokeArea();
200033e4:	f7ff ff5e 	bl	200032a4 <checkstrokeArea>
}
200033e8:	bf00      	nop
200033ea:	3708      	adds	r7, #8
200033ec:	46bd      	mov	sp, r7
200033ee:	bd80      	pop	{r7, pc}
200033f0:	20014994 	.word	0x20014994
200033f4:	20009c0c 	.word	0x20009c0c

200033f8 <powerButton>:

void powerButton(void) {
200033f8:	b580      	push	{r7, lr}
200033fa:	b082      	sub	sp, #8
200033fc:	af02      	add	r7, sp, #8
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {
200033fe:	4b1b      	ldr	r3, [pc, #108]	; (2000346c <powerButton+0x74>)
20003400:	681b      	ldr	r3, [r3, #0]
20003402:	f003 0302 	and.w	r3, r3, #2
20003406:	2b00      	cmp	r3, #0
20003408:	d12c      	bne.n	20003464 <powerButton+0x6c>
		SET_FLAG(ONE_TOUCH, globalFlag);
2000340a:	4b18      	ldr	r3, [pc, #96]	; (2000346c <powerButton+0x74>)
2000340c:	681b      	ldr	r3, [r3, #0]
2000340e:	f043 0302 	orr.w	r3, r3, #2
20003412:	4a16      	ldr	r2, [pc, #88]	; (2000346c <powerButton+0x74>)
20003414:	6013      	str	r3, [r2, #0]
		if (ParamDevice.NPNTranzistor || ParamDevice.PNPTranzistor) {
20003416:	4b16      	ldr	r3, [pc, #88]	; (20003470 <powerButton+0x78>)
20003418:	7adb      	ldrb	r3, [r3, #11]
2000341a:	2b00      	cmp	r3, #0
2000341c:	d103      	bne.n	20003426 <powerButton+0x2e>
2000341e:	4b14      	ldr	r3, [pc, #80]	; (20003470 <powerButton+0x78>)
20003420:	7b1b      	ldrb	r3, [r3, #12]
20003422:	2b00      	cmp	r3, #0
20003424:	d01e      	beq.n	20003464 <powerButton+0x6c>
			if (ParamDevice.power) {
20003426:	4b12      	ldr	r3, [pc, #72]	; (20003470 <powerButton+0x78>)
20003428:	7b5b      	ldrb	r3, [r3, #13]
2000342a:	2b00      	cmp	r3, #0
2000342c:	d00d      	beq.n	2000344a <powerButton+0x52>
				ParamDevice.power = false;
2000342e:	4b10      	ldr	r3, [pc, #64]	; (20003470 <powerButton+0x78>)
20003430:	2200      	movs	r2, #0
20003432:	735a      	strb	r2, [r3, #13]
				printColorImage(246, 182, 50, 50, NO_PRESSED, image_powerGreen);
20003434:	4b0f      	ldr	r3, [pc, #60]	; (20003474 <powerButton+0x7c>)
20003436:	9301      	str	r3, [sp, #4]
20003438:	2300      	movs	r3, #0
2000343a:	9300      	str	r3, [sp, #0]
2000343c:	2332      	movs	r3, #50	; 0x32
2000343e:	2232      	movs	r2, #50	; 0x32
20003440:	21b6      	movs	r1, #182	; 0xb6
20003442:	20f6      	movs	r0, #246	; 0xf6
20003444:	f7ff fe4a 	bl	200030dc <printColorImage>
				ParamDevice.power = true;
				printColorImage(246, 182, 50, 50, PRESSED, image_powerRed);
			}
		}
	}
}
20003448:	e00c      	b.n	20003464 <powerButton+0x6c>
				ParamDevice.power = true;
2000344a:	4b09      	ldr	r3, [pc, #36]	; (20003470 <powerButton+0x78>)
2000344c:	2201      	movs	r2, #1
2000344e:	735a      	strb	r2, [r3, #13]
				printColorImage(246, 182, 50, 50, PRESSED, image_powerRed);
20003450:	4b09      	ldr	r3, [pc, #36]	; (20003478 <powerButton+0x80>)
20003452:	9301      	str	r3, [sp, #4]
20003454:	2301      	movs	r3, #1
20003456:	9300      	str	r3, [sp, #0]
20003458:	2332      	movs	r3, #50	; 0x32
2000345a:	2232      	movs	r2, #50	; 0x32
2000345c:	21b6      	movs	r1, #182	; 0xb6
2000345e:	20f6      	movs	r0, #246	; 0xf6
20003460:	f7ff fe3c 	bl	200030dc <printColorImage>
}
20003464:	bf00      	nop
20003466:	46bd      	mov	sp, r7
20003468:	bd80      	pop	{r7, pc}
2000346a:	bf00      	nop
2000346c:	20014ac4 	.word	0x20014ac4
20003470:	2001476c 	.word	0x2001476c
20003474:	2000afa0 	.word	0x2000afa0
20003478:	20009c18 	.word	0x20009c18

2000347c <externalPowerOff>:

void externalPowerOff(void) {
2000347c:	b580      	push	{r7, lr}
2000347e:	b082      	sub	sp, #8
20003480:	af02      	add	r7, sp, #8
	printColorImage(246, 182, 50, 50, NO_PRESSED, image_powerGreen);
20003482:	4b06      	ldr	r3, [pc, #24]	; (2000349c <externalPowerOff+0x20>)
20003484:	9301      	str	r3, [sp, #4]
20003486:	2300      	movs	r3, #0
20003488:	9300      	str	r3, [sp, #0]
2000348a:	2332      	movs	r3, #50	; 0x32
2000348c:	2232      	movs	r2, #50	; 0x32
2000348e:	21b6      	movs	r1, #182	; 0xb6
20003490:	20f6      	movs	r0, #246	; 0xf6
20003492:	f7ff fe23 	bl	200030dc <printColorImage>
}
20003496:	bf00      	nop
20003498:	46bd      	mov	sp, r7
2000349a:	bd80      	pop	{r7, pc}
2000349c:	2000afa0 	.word	0x2000afa0

200034a0 <rangeMinMax>:

void rangeMinMax(uint16_t *data, uint16_t count, uint16_t plus_minus, uint16_t min, uint16_t max) {
200034a0:	b480      	push	{r7}
200034a2:	b085      	sub	sp, #20
200034a4:	af00      	add	r7, sp, #0
200034a6:	60f8      	str	r0, [r7, #12]
200034a8:	4608      	mov	r0, r1
200034aa:	4611      	mov	r1, r2
200034ac:	461a      	mov	r2, r3
200034ae:	4603      	mov	r3, r0
200034b0:	817b      	strh	r3, [r7, #10]
200034b2:	460b      	mov	r3, r1
200034b4:	813b      	strh	r3, [r7, #8]
200034b6:	4613      	mov	r3, r2
200034b8:	80fb      	strh	r3, [r7, #6]
	if (plus_minus == PLUS) {
200034ba:	893b      	ldrh	r3, [r7, #8]
200034bc:	2b01      	cmp	r3, #1
200034be:	d11b      	bne.n	200034f8 <rangeMinMax+0x58>
		if (*data + count < max) {
200034c0:	68fb      	ldr	r3, [r7, #12]
200034c2:	881b      	ldrh	r3, [r3, #0]
200034c4:	461a      	mov	r2, r3
200034c6:	897b      	ldrh	r3, [r7, #10]
200034c8:	441a      	add	r2, r3
200034ca:	8b3b      	ldrh	r3, [r7, #24]
200034cc:	429a      	cmp	r2, r3
200034ce:	da07      	bge.n	200034e0 <rangeMinMax+0x40>
			*data += count;
200034d0:	68fb      	ldr	r3, [r7, #12]
200034d2:	881a      	ldrh	r2, [r3, #0]
200034d4:	897b      	ldrh	r3, [r7, #10]
200034d6:	4413      	add	r3, r2
200034d8:	b29a      	uxth	r2, r3
200034da:	68fb      	ldr	r3, [r7, #12]
200034dc:	801a      	strh	r2, [r3, #0]
		} else {
			if (*data > min)
				*data -= 1;
		}
	}
}
200034de:	e026      	b.n	2000352e <rangeMinMax+0x8e>
			if (*data < max)
200034e0:	68fb      	ldr	r3, [r7, #12]
200034e2:	881b      	ldrh	r3, [r3, #0]
200034e4:	8b3a      	ldrh	r2, [r7, #24]
200034e6:	429a      	cmp	r2, r3
200034e8:	d921      	bls.n	2000352e <rangeMinMax+0x8e>
				*data += 1;
200034ea:	68fb      	ldr	r3, [r7, #12]
200034ec:	881b      	ldrh	r3, [r3, #0]
200034ee:	3301      	adds	r3, #1
200034f0:	b29a      	uxth	r2, r3
200034f2:	68fb      	ldr	r3, [r7, #12]
200034f4:	801a      	strh	r2, [r3, #0]
}
200034f6:	e01a      	b.n	2000352e <rangeMinMax+0x8e>
		if (*data - count > min) {
200034f8:	68fb      	ldr	r3, [r7, #12]
200034fa:	881b      	ldrh	r3, [r3, #0]
200034fc:	461a      	mov	r2, r3
200034fe:	897b      	ldrh	r3, [r7, #10]
20003500:	1ad2      	subs	r2, r2, r3
20003502:	88fb      	ldrh	r3, [r7, #6]
20003504:	429a      	cmp	r2, r3
20003506:	dd07      	ble.n	20003518 <rangeMinMax+0x78>
			*data -= count;
20003508:	68fb      	ldr	r3, [r7, #12]
2000350a:	881a      	ldrh	r2, [r3, #0]
2000350c:	897b      	ldrh	r3, [r7, #10]
2000350e:	1ad3      	subs	r3, r2, r3
20003510:	b29a      	uxth	r2, r3
20003512:	68fb      	ldr	r3, [r7, #12]
20003514:	801a      	strh	r2, [r3, #0]
}
20003516:	e00a      	b.n	2000352e <rangeMinMax+0x8e>
			if (*data > min)
20003518:	68fb      	ldr	r3, [r7, #12]
2000351a:	881b      	ldrh	r3, [r3, #0]
2000351c:	88fa      	ldrh	r2, [r7, #6]
2000351e:	429a      	cmp	r2, r3
20003520:	d205      	bcs.n	2000352e <rangeMinMax+0x8e>
				*data -= 1;
20003522:	68fb      	ldr	r3, [r7, #12]
20003524:	881b      	ldrh	r3, [r3, #0]
20003526:	3b01      	subs	r3, #1
20003528:	b29a      	uxth	r2, r3
2000352a:	68fb      	ldr	r3, [r7, #12]
2000352c:	801a      	strh	r2, [r3, #0]
}
2000352e:	bf00      	nop
20003530:	3714      	adds	r7, #20
20003532:	46bd      	mov	sp, r7
20003534:	f85d 7b04 	ldr.w	r7, [sp], #4
20003538:	4770      	bx	lr
	...

2000353c <changeData>:

void changeData(uint16_t count, uint16_t plus_minus) {
2000353c:	b580      	push	{r7, lr}
2000353e:	b084      	sub	sp, #16
20003540:	af02      	add	r7, sp, #8
20003542:	4603      	mov	r3, r0
20003544:	460a      	mov	r2, r1
20003546:	80fb      	strh	r3, [r7, #6]
20003548:	4613      	mov	r3, r2
2000354a:	80bb      	strh	r3, [r7, #4]
	if (READ_FLAG(AREA1_PRESS, globalFlag)) {
2000354c:	4b29      	ldr	r3, [pc, #164]	; (200035f4 <changeData+0xb8>)
2000354e:	681b      	ldr	r3, [r3, #0]
20003550:	f003 0308 	and.w	r3, r3, #8
20003554:	2b00      	cmp	r3, #0
20003556:	d019      	beq.n	2000358c <changeData+0x50>
		if (ParamDevice.unitImpuls != 2) {
20003558:	4b27      	ldr	r3, [pc, #156]	; (200035f8 <changeData+0xbc>)
2000355a:	7a1b      	ldrb	r3, [r3, #8]
2000355c:	2b02      	cmp	r3, #2
2000355e:	d009      	beq.n	20003574 <changeData+0x38>
			rangeMinMax(&ParamDevice.impuls, count, plus_minus, 1, 999);
20003560:	88ba      	ldrh	r2, [r7, #4]
20003562:	88f9      	ldrh	r1, [r7, #6]
20003564:	f240 33e7 	movw	r3, #999	; 0x3e7
20003568:	9300      	str	r3, [sp, #0]
2000356a:	2301      	movs	r3, #1
2000356c:	4822      	ldr	r0, [pc, #136]	; (200035f8 <changeData+0xbc>)
2000356e:	f7ff ff97 	bl	200034a0 <rangeMinMax>
20003572:	e007      	b.n	20003584 <changeData+0x48>
		} else {
			rangeMinMax(&ParamDevice.impuls, count, plus_minus, 1, 20);
20003574:	88ba      	ldrh	r2, [r7, #4]
20003576:	88f9      	ldrh	r1, [r7, #6]
20003578:	2314      	movs	r3, #20
2000357a:	9300      	str	r3, [sp, #0]
2000357c:	2301      	movs	r3, #1
2000357e:	481e      	ldr	r0, [pc, #120]	; (200035f8 <changeData+0xbc>)
20003580:	f7ff ff8e 	bl	200034a0 <rangeMinMax>
		}
		printTImpulse();
20003584:	f7ff fcf0 	bl	20002f68 <printTImpulse>
		printFreeq();
20003588:	f7ff fbbe 	bl	20002d08 <printFreeq>
	}
	if (READ_FLAG(AREA2_PRESS, globalFlag)) {
2000358c:	4b19      	ldr	r3, [pc, #100]	; (200035f4 <changeData+0xb8>)
2000358e:	681b      	ldr	r3, [r3, #0]
20003590:	f003 0310 	and.w	r3, r3, #16
20003594:	2b00      	cmp	r3, #0
20003596:	d019      	beq.n	200035cc <changeData+0x90>
		if (ParamDevice.unitPause != 2) {
20003598:	4b17      	ldr	r3, [pc, #92]	; (200035f8 <changeData+0xbc>)
2000359a:	7a5b      	ldrb	r3, [r3, #9]
2000359c:	2b02      	cmp	r3, #2
2000359e:	d009      	beq.n	200035b4 <changeData+0x78>
			rangeMinMax(&ParamDevice.pause, count, plus_minus, 1, 999);
200035a0:	88ba      	ldrh	r2, [r7, #4]
200035a2:	88f9      	ldrh	r1, [r7, #6]
200035a4:	f240 33e7 	movw	r3, #999	; 0x3e7
200035a8:	9300      	str	r3, [sp, #0]
200035aa:	2301      	movs	r3, #1
200035ac:	4813      	ldr	r0, [pc, #76]	; (200035fc <changeData+0xc0>)
200035ae:	f7ff ff77 	bl	200034a0 <rangeMinMax>
200035b2:	e007      	b.n	200035c4 <changeData+0x88>
		} else {
			rangeMinMax(&ParamDevice.pause, count, plus_minus, 1, 20);
200035b4:	88ba      	ldrh	r2, [r7, #4]
200035b6:	88f9      	ldrh	r1, [r7, #6]
200035b8:	2314      	movs	r3, #20
200035ba:	9300      	str	r3, [sp, #0]
200035bc:	2301      	movs	r3, #1
200035be:	480f      	ldr	r0, [pc, #60]	; (200035fc <changeData+0xc0>)
200035c0:	f7ff ff6e 	bl	200034a0 <rangeMinMax>
		}
		printTPause();
200035c4:	f7ff fd0a 	bl	20002fdc <printTPause>
		printFreeq();
200035c8:	f7ff fb9e 	bl	20002d08 <printFreeq>
	}
	if (READ_FLAG(AREA3_PRESS, globalFlag)) {
200035cc:	4b09      	ldr	r3, [pc, #36]	; (200035f4 <changeData+0xb8>)
200035ce:	681b      	ldr	r3, [r3, #0]
200035d0:	f003 0320 	and.w	r3, r3, #32
200035d4:	2b00      	cmp	r3, #0
200035d6:	d009      	beq.n	200035ec <changeData+0xb0>
		rangeMinMax(&ParamDevice.count, count, plus_minus, 0, 255);
200035d8:	88ba      	ldrh	r2, [r7, #4]
200035da:	88f9      	ldrh	r1, [r7, #6]
200035dc:	23ff      	movs	r3, #255	; 0xff
200035de:	9300      	str	r3, [sp, #0]
200035e0:	2300      	movs	r3, #0
200035e2:	4807      	ldr	r0, [pc, #28]	; (20003600 <changeData+0xc4>)
200035e4:	f7ff ff5c 	bl	200034a0 <rangeMinMax>
		printCount();
200035e8:	f7ff fd2e 	bl	20003048 <printCount>
	}
}
200035ec:	bf00      	nop
200035ee:	3708      	adds	r7, #8
200035f0:	46bd      	mov	sp, r7
200035f2:	bd80      	pop	{r7, pc}
200035f4:	20014ac4 	.word	0x20014ac4
200035f8:	2001476c 	.word	0x2001476c
200035fc:	2001476e 	.word	0x2001476e
20003600:	20014770 	.word	0x20014770

20003604 <speedControl>:

void speedControl(void) {
20003604:	b480      	push	{r7}
20003606:	af00      	add	r7, sp, #0
	if (timHoldButtonPress < SPPED4 && timHoldButtonPress > SPPED3) {
20003608:	4b1b      	ldr	r3, [pc, #108]	; (20003678 <speedControl+0x74>)
2000360a:	681b      	ldr	r3, [r3, #0]
2000360c:	f241 3287 	movw	r2, #4999	; 0x1387
20003610:	4293      	cmp	r3, r2
20003612:	d807      	bhi.n	20003624 <speedControl+0x20>
20003614:	4b18      	ldr	r3, [pc, #96]	; (20003678 <speedControl+0x74>)
20003616:	681b      	ldr	r3, [r3, #0]
20003618:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
2000361c:	d902      	bls.n	20003624 <speedControl+0x20>
		countSpeed = 2;
2000361e:	4b17      	ldr	r3, [pc, #92]	; (2000367c <speedControl+0x78>)
20003620:	2202      	movs	r2, #2
20003622:	801a      	strh	r2, [r3, #0]
	}
	if (timHoldButtonPress < SPPED3 && timHoldButtonPress > SPPED2) {
20003624:	4b14      	ldr	r3, [pc, #80]	; (20003678 <speedControl+0x74>)
20003626:	681b      	ldr	r3, [r3, #0]
20003628:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
2000362c:	d208      	bcs.n	20003640 <speedControl+0x3c>
2000362e:	4b12      	ldr	r3, [pc, #72]	; (20003678 <speedControl+0x74>)
20003630:	681b      	ldr	r3, [r3, #0]
20003632:	f640 32b8 	movw	r2, #3000	; 0xbb8
20003636:	4293      	cmp	r3, r2
20003638:	d902      	bls.n	20003640 <speedControl+0x3c>
		countSpeed = 5;
2000363a:	4b10      	ldr	r3, [pc, #64]	; (2000367c <speedControl+0x78>)
2000363c:	2205      	movs	r2, #5
2000363e:	801a      	strh	r2, [r3, #0]
	}
	if (timHoldButtonPress < SPPED2 && timHoldButtonPress > SPPED1) {
20003640:	4b0d      	ldr	r3, [pc, #52]	; (20003678 <speedControl+0x74>)
20003642:	681b      	ldr	r3, [r3, #0]
20003644:	f640 32b7 	movw	r2, #2999	; 0xbb7
20003648:	4293      	cmp	r3, r2
2000364a:	d807      	bhi.n	2000365c <speedControl+0x58>
2000364c:	4b0a      	ldr	r3, [pc, #40]	; (20003678 <speedControl+0x74>)
2000364e:	681b      	ldr	r3, [r3, #0]
20003650:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
20003654:	d902      	bls.n	2000365c <speedControl+0x58>
		countSpeed = 10;
20003656:	4b09      	ldr	r3, [pc, #36]	; (2000367c <speedControl+0x78>)
20003658:	220a      	movs	r2, #10
2000365a:	801a      	strh	r2, [r3, #0]
	}
	if (timHoldButtonPress < SPPED1) {
2000365c:	4b06      	ldr	r3, [pc, #24]	; (20003678 <speedControl+0x74>)
2000365e:	681b      	ldr	r3, [r3, #0]
20003660:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
20003664:	d202      	bcs.n	2000366c <speedControl+0x68>
		countSpeed = 25;
20003666:	4b05      	ldr	r3, [pc, #20]	; (2000367c <speedControl+0x78>)
20003668:	2219      	movs	r2, #25
2000366a:	801a      	strh	r2, [r3, #0]
	}
}
2000366c:	bf00      	nop
2000366e:	46bd      	mov	sp, r7
20003670:	f85d 7b04 	ldr.w	r7, [sp], #4
20003674:	4770      	bx	lr
20003676:	bf00      	nop
20003678:	200149c8 	.word	0x200149c8
2000367c:	20014758 	.word	0x20014758

20003680 <changeParamPlusMinus>:

void changeParamPlusMinus(uint16_t plus_minus) {
20003680:	b580      	push	{r7, lr}
20003682:	b082      	sub	sp, #8
20003684:	af00      	add	r7, sp, #0
20003686:	4603      	mov	r3, r0
20003688:	80fb      	strh	r3, [r7, #6]
	if (!READ_FLAG(TOUCH_DISPLAY, globalFlag)) {
2000368a:	4b21      	ldr	r3, [pc, #132]	; (20003710 <changeParamPlusMinus+0x90>)
2000368c:	681b      	ldr	r3, [r3, #0]
2000368e:	f003 0301 	and.w	r3, r3, #1
20003692:	2b00      	cmp	r3, #0
20003694:	d109      	bne.n	200036aa <changeParamPlusMinus+0x2a>
		SET_FLAG(TOUCH_DISPLAY, globalFlag);
20003696:	4b1e      	ldr	r3, [pc, #120]	; (20003710 <changeParamPlusMinus+0x90>)
20003698:	681b      	ldr	r3, [r3, #0]
2000369a:	f043 0301 	orr.w	r3, r3, #1
2000369e:	4a1c      	ldr	r2, [pc, #112]	; (20003710 <changeParamPlusMinus+0x90>)
200036a0:	6013      	str	r3, [r2, #0]
		timHoldButtonPress = SPPED5;
200036a2:	4b1c      	ldr	r3, [pc, #112]	; (20003714 <changeParamPlusMinus+0x94>)
200036a4:	f241 527c 	movw	r2, #5500	; 0x157c
200036a8:	601a      	str	r2, [r3, #0]
	}
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {
200036aa:	4b19      	ldr	r3, [pc, #100]	; (20003710 <changeParamPlusMinus+0x90>)
200036ac:	681b      	ldr	r3, [r3, #0]
200036ae:	f003 0302 	and.w	r3, r3, #2
200036b2:	2b00      	cmp	r3, #0
200036b4:	d105      	bne.n	200036c2 <changeParamPlusMinus+0x42>
		changeData(1, plus_minus);
200036b6:	88fb      	ldrh	r3, [r7, #6]
200036b8:	4619      	mov	r1, r3
200036ba:	2001      	movs	r0, #1
200036bc:	f7ff ff3e 	bl	2000353c <changeData>
200036c0:	e013      	b.n	200036ea <changeParamPlusMinus+0x6a>
	} else {
		if (countSpeed >= 2) {
200036c2:	4b15      	ldr	r3, [pc, #84]	; (20003718 <changeParamPlusMinus+0x98>)
200036c4:	881b      	ldrh	r3, [r3, #0]
200036c6:	2b01      	cmp	r3, #1
200036c8:	d90f      	bls.n	200036ea <changeParamPlusMinus+0x6a>
			changeData(countSpeed, plus_minus);
200036ca:	4b13      	ldr	r3, [pc, #76]	; (20003718 <changeParamPlusMinus+0x98>)
200036cc:	881b      	ldrh	r3, [r3, #0]
200036ce:	88fa      	ldrh	r2, [r7, #6]
200036d0:	4611      	mov	r1, r2
200036d2:	4618      	mov	r0, r3
200036d4:	f7ff ff32 	bl	2000353c <changeData>
			buzzerSet(100 - countSpeed);
200036d8:	4b0f      	ldr	r3, [pc, #60]	; (20003718 <changeParamPlusMinus+0x98>)
200036da:	881b      	ldrh	r3, [r3, #0]
200036dc:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
200036e0:	b29b      	uxth	r3, r3
200036e2:	b21b      	sxth	r3, r3
200036e4:	4618      	mov	r0, r3
200036e6:	f000 fcff 	bl	200040e8 <buzzerSet>
		}
	}
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {
200036ea:	4b09      	ldr	r3, [pc, #36]	; (20003710 <changeParamPlusMinus+0x90>)
200036ec:	681b      	ldr	r3, [r3, #0]
200036ee:	f003 0302 	and.w	r3, r3, #2
200036f2:	2b00      	cmp	r3, #0
200036f4:	d105      	bne.n	20003702 <changeParamPlusMinus+0x82>
		SET_FLAG(ONE_TOUCH, globalFlag);
200036f6:	4b06      	ldr	r3, [pc, #24]	; (20003710 <changeParamPlusMinus+0x90>)
200036f8:	681b      	ldr	r3, [r3, #0]
200036fa:	f043 0302 	orr.w	r3, r3, #2
200036fe:	4a04      	ldr	r2, [pc, #16]	; (20003710 <changeParamPlusMinus+0x90>)
20003700:	6013      	str	r3, [r2, #0]
	}
	speedControl();
20003702:	f7ff ff7f 	bl	20003604 <speedControl>
}
20003706:	bf00      	nop
20003708:	3708      	adds	r7, #8
2000370a:	46bd      	mov	sp, r7
2000370c:	bd80      	pop	{r7, pc}
2000370e:	bf00      	nop
20003710:	20014ac4 	.word	0x20014ac4
20003714:	200149c8 	.word	0x200149c8
20003718:	20014758 	.word	0x20014758

2000371c <togleUnits>:

void togleUnits(void) {
2000371c:	b580      	push	{r7, lr}
2000371e:	af00      	add	r7, sp, #0
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {
20003720:	4b2a      	ldr	r3, [pc, #168]	; (200037cc <togleUnits+0xb0>)
20003722:	681b      	ldr	r3, [r3, #0]
20003724:	f003 0302 	and.w	r3, r3, #2
20003728:	2b00      	cmp	r3, #0
2000372a:	d14d      	bne.n	200037c8 <togleUnits+0xac>
		SET_FLAG(ONE_TOUCH, globalFlag);
2000372c:	4b27      	ldr	r3, [pc, #156]	; (200037cc <togleUnits+0xb0>)
2000372e:	681b      	ldr	r3, [r3, #0]
20003730:	f043 0302 	orr.w	r3, r3, #2
20003734:	4a25      	ldr	r2, [pc, #148]	; (200037cc <togleUnits+0xb0>)
20003736:	6013      	str	r3, [r2, #0]

		if (READ_FLAG(AREA1_PRESS, globalFlag)) {
20003738:	4b24      	ldr	r3, [pc, #144]	; (200037cc <togleUnits+0xb0>)
2000373a:	681b      	ldr	r3, [r3, #0]
2000373c:	f003 0308 	and.w	r3, r3, #8
20003740:	2b00      	cmp	r3, #0
20003742:	d01e      	beq.n	20003782 <togleUnits+0x66>
			if (ParamDevice.unitImpuls < 2)
20003744:	4b22      	ldr	r3, [pc, #136]	; (200037d0 <togleUnits+0xb4>)
20003746:	7a1b      	ldrb	r3, [r3, #8]
20003748:	2b01      	cmp	r3, #1
2000374a:	d806      	bhi.n	2000375a <togleUnits+0x3e>
				ParamDevice.unitImpuls++;
2000374c:	4b20      	ldr	r3, [pc, #128]	; (200037d0 <togleUnits+0xb4>)
2000374e:	7a1b      	ldrb	r3, [r3, #8]
20003750:	3301      	adds	r3, #1
20003752:	b2da      	uxtb	r2, r3
20003754:	4b1e      	ldr	r3, [pc, #120]	; (200037d0 <togleUnits+0xb4>)
20003756:	721a      	strb	r2, [r3, #8]
20003758:	e002      	b.n	20003760 <togleUnits+0x44>
			else
				ParamDevice.unitImpuls = 0;
2000375a:	4b1d      	ldr	r3, [pc, #116]	; (200037d0 <togleUnits+0xb4>)
2000375c:	2200      	movs	r2, #0
2000375e:	721a      	strb	r2, [r3, #8]
			printTImpulse();
20003760:	f7ff fc02 	bl	20002f68 <printTImpulse>
			if (ParamDevice.unitImpuls == 2 && ParamDevice.impuls > 20) {
20003764:	4b1a      	ldr	r3, [pc, #104]	; (200037d0 <togleUnits+0xb4>)
20003766:	7a1b      	ldrb	r3, [r3, #8]
20003768:	2b02      	cmp	r3, #2
2000376a:	d106      	bne.n	2000377a <togleUnits+0x5e>
2000376c:	4b18      	ldr	r3, [pc, #96]	; (200037d0 <togleUnits+0xb4>)
2000376e:	881b      	ldrh	r3, [r3, #0]
20003770:	2b14      	cmp	r3, #20
20003772:	d902      	bls.n	2000377a <togleUnits+0x5e>
				ParamDevice.impuls = 20;
20003774:	4b16      	ldr	r3, [pc, #88]	; (200037d0 <togleUnits+0xb4>)
20003776:	2214      	movs	r2, #20
20003778:	801a      	strh	r2, [r3, #0]
			}
			printTImpulse();
2000377a:	f7ff fbf5 	bl	20002f68 <printTImpulse>
			printFreeq();
2000377e:	f7ff fac3 	bl	20002d08 <printFreeq>
		}
		if (READ_FLAG(AREA2_PRESS, globalFlag)) {
20003782:	4b12      	ldr	r3, [pc, #72]	; (200037cc <togleUnits+0xb0>)
20003784:	681b      	ldr	r3, [r3, #0]
20003786:	f003 0310 	and.w	r3, r3, #16
2000378a:	2b00      	cmp	r3, #0
2000378c:	d01c      	beq.n	200037c8 <togleUnits+0xac>
			if (ParamDevice.unitPause < 2)
2000378e:	4b10      	ldr	r3, [pc, #64]	; (200037d0 <togleUnits+0xb4>)
20003790:	7a5b      	ldrb	r3, [r3, #9]
20003792:	2b01      	cmp	r3, #1
20003794:	d806      	bhi.n	200037a4 <togleUnits+0x88>
				ParamDevice.unitPause++;
20003796:	4b0e      	ldr	r3, [pc, #56]	; (200037d0 <togleUnits+0xb4>)
20003798:	7a5b      	ldrb	r3, [r3, #9]
2000379a:	3301      	adds	r3, #1
2000379c:	b2da      	uxtb	r2, r3
2000379e:	4b0c      	ldr	r3, [pc, #48]	; (200037d0 <togleUnits+0xb4>)
200037a0:	725a      	strb	r2, [r3, #9]
200037a2:	e002      	b.n	200037aa <togleUnits+0x8e>
			else
				ParamDevice.unitPause = 0;
200037a4:	4b0a      	ldr	r3, [pc, #40]	; (200037d0 <togleUnits+0xb4>)
200037a6:	2200      	movs	r2, #0
200037a8:	725a      	strb	r2, [r3, #9]
			if (ParamDevice.unitPause == 2 && ParamDevice.pause > 20) {
200037aa:	4b09      	ldr	r3, [pc, #36]	; (200037d0 <togleUnits+0xb4>)
200037ac:	7a5b      	ldrb	r3, [r3, #9]
200037ae:	2b02      	cmp	r3, #2
200037b0:	d106      	bne.n	200037c0 <togleUnits+0xa4>
200037b2:	4b07      	ldr	r3, [pc, #28]	; (200037d0 <togleUnits+0xb4>)
200037b4:	885b      	ldrh	r3, [r3, #2]
200037b6:	2b14      	cmp	r3, #20
200037b8:	d902      	bls.n	200037c0 <togleUnits+0xa4>
				ParamDevice.pause = 20;
200037ba:	4b05      	ldr	r3, [pc, #20]	; (200037d0 <togleUnits+0xb4>)
200037bc:	2214      	movs	r2, #20
200037be:	805a      	strh	r2, [r3, #2]
			}
			printTPause();
200037c0:	f7ff fc0c 	bl	20002fdc <printTPause>
			printFreeq();
200037c4:	f7ff faa0 	bl	20002d08 <printFreeq>
		}
	}
}
200037c8:	bf00      	nop
200037ca:	bd80      	pop	{r7, pc}
200037cc:	20014ac4 	.word	0x20014ac4
200037d0:	2001476c 	.word	0x2001476c

200037d4 <NPN_PNPButton>:

void NPN_PNPButton(uint8_t type, uint8_t status) {
200037d4:	b580      	push	{r7, lr}
200037d6:	b086      	sub	sp, #24
200037d8:	af04      	add	r7, sp, #16
200037da:	4603      	mov	r3, r0
200037dc:	460a      	mov	r2, r1
200037de:	71fb      	strb	r3, [r7, #7]
200037e0:	4613      	mov	r3, r2
200037e2:	71bb      	strb	r3, [r7, #6]
	if (type) {
200037e4:	79fb      	ldrb	r3, [r7, #7]
200037e6:	2b00      	cmp	r3, #0
200037e8:	d045      	beq.n	20003876 <NPN_PNPButton+0xa2>
		if (status) {
200037ea:	79bb      	ldrb	r3, [r7, #6]
200037ec:	2b00      	cmp	r3, #0
200037ee:	d021      	beq.n	20003834 <NPN_PNPButton+0x60>
			ParamDevice.NPNTranzistor = true;
200037f0:	4b46      	ldr	r3, [pc, #280]	; (2000390c <NPN_PNPButton+0x138>)
200037f2:	2201      	movs	r2, #1
200037f4:	72da      	strb	r2, [r3, #11]
			strcpy(bufSpi, "NPN");
200037f6:	4b46      	ldr	r3, [pc, #280]	; (20003910 <NPN_PNPButton+0x13c>)
200037f8:	4a46      	ldr	r2, [pc, #280]	; (20003914 <NPN_PNPButton+0x140>)
200037fa:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 102, 50, 26, 3, ILI9341_YELLOW);
200037fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20003800:	9301      	str	r3, [sp, #4]
20003802:	2303      	movs	r3, #3
20003804:	9300      	str	r3, [sp, #0]
20003806:	231a      	movs	r3, #26
20003808:	2232      	movs	r2, #50	; 0x32
2000380a:	2166      	movs	r1, #102	; 0x66
2000380c:	f44f 7082 	mov.w	r0, #260	; 0x104
20003810:	f7fe fc88 	bl	20002124 <fillRoundRect>
			ILI9341_WriteString(270, 106, bufSpi, Font_11x18, ILI9341_BLACK, ILI9341_YELLOW);
20003814:	4b40      	ldr	r3, [pc, #256]	; (20003918 <NPN_PNPButton+0x144>)
20003816:	f64f 72e0 	movw	r2, #65504	; 0xffe0
2000381a:	9202      	str	r2, [sp, #8]
2000381c:	2200      	movs	r2, #0
2000381e:	9201      	str	r2, [sp, #4]
20003820:	685a      	ldr	r2, [r3, #4]
20003822:	9200      	str	r2, [sp, #0]
20003824:	681b      	ldr	r3, [r3, #0]
20003826:	4a3a      	ldr	r2, [pc, #232]	; (20003910 <NPN_PNPButton+0x13c>)
20003828:	216a      	movs	r1, #106	; 0x6a
2000382a:	f44f 7087 	mov.w	r0, #270	; 0x10e
2000382e:	f7fd ffde 	bl	200017ee <ILI9341_WriteString>
20003832:	e065      	b.n	20003900 <NPN_PNPButton+0x12c>
		} else {
			ParamDevice.NPNTranzistor = false;
20003834:	4b35      	ldr	r3, [pc, #212]	; (2000390c <NPN_PNPButton+0x138>)
20003836:	2200      	movs	r2, #0
20003838:	72da      	strb	r2, [r3, #11]
			strcpy(bufSpi, "NPN");
2000383a:	4b35      	ldr	r3, [pc, #212]	; (20003910 <NPN_PNPButton+0x13c>)
2000383c:	4a35      	ldr	r2, [pc, #212]	; (20003914 <NPN_PNPButton+0x140>)
2000383e:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 102, 50, 26, 3, ILI9341_BLUE);
20003840:	231f      	movs	r3, #31
20003842:	9301      	str	r3, [sp, #4]
20003844:	2303      	movs	r3, #3
20003846:	9300      	str	r3, [sp, #0]
20003848:	231a      	movs	r3, #26
2000384a:	2232      	movs	r2, #50	; 0x32
2000384c:	2166      	movs	r1, #102	; 0x66
2000384e:	f44f 7082 	mov.w	r0, #260	; 0x104
20003852:	f7fe fc67 	bl	20002124 <fillRoundRect>
			ILI9341_WriteString(270, 106, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
20003856:	4b30      	ldr	r3, [pc, #192]	; (20003918 <NPN_PNPButton+0x144>)
20003858:	221f      	movs	r2, #31
2000385a:	9202      	str	r2, [sp, #8]
2000385c:	f64f 72ff 	movw	r2, #65535	; 0xffff
20003860:	9201      	str	r2, [sp, #4]
20003862:	685a      	ldr	r2, [r3, #4]
20003864:	9200      	str	r2, [sp, #0]
20003866:	681b      	ldr	r3, [r3, #0]
20003868:	4a29      	ldr	r2, [pc, #164]	; (20003910 <NPN_PNPButton+0x13c>)
2000386a:	216a      	movs	r1, #106	; 0x6a
2000386c:	f44f 7087 	mov.w	r0, #270	; 0x10e
20003870:	f7fd ffbd 	bl	200017ee <ILI9341_WriteString>
20003874:	e044      	b.n	20003900 <NPN_PNPButton+0x12c>
		}

	} else {
		if (status) {
20003876:	79bb      	ldrb	r3, [r7, #6]
20003878:	2b00      	cmp	r3, #0
2000387a:	d021      	beq.n	200038c0 <NPN_PNPButton+0xec>
			ParamDevice.PNPTranzistor = true;
2000387c:	4b23      	ldr	r3, [pc, #140]	; (2000390c <NPN_PNPButton+0x138>)
2000387e:	2201      	movs	r2, #1
20003880:	731a      	strb	r2, [r3, #12]
			strcpy(bufSpi, "PNP");
20003882:	4b23      	ldr	r3, [pc, #140]	; (20003910 <NPN_PNPButton+0x13c>)
20003884:	4a25      	ldr	r2, [pc, #148]	; (2000391c <NPN_PNPButton+0x148>)
20003886:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 140, 50, 26, 3, ILI9341_YELLOW);
20003888:	f64f 73e0 	movw	r3, #65504	; 0xffe0
2000388c:	9301      	str	r3, [sp, #4]
2000388e:	2303      	movs	r3, #3
20003890:	9300      	str	r3, [sp, #0]
20003892:	231a      	movs	r3, #26
20003894:	2232      	movs	r2, #50	; 0x32
20003896:	218c      	movs	r1, #140	; 0x8c
20003898:	f44f 7082 	mov.w	r0, #260	; 0x104
2000389c:	f7fe fc42 	bl	20002124 <fillRoundRect>
			ILI9341_WriteString(270, 144, bufSpi, Font_11x18, ILI9341_BLACK, ILI9341_YELLOW);
200038a0:	4b1d      	ldr	r3, [pc, #116]	; (20003918 <NPN_PNPButton+0x144>)
200038a2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
200038a6:	9202      	str	r2, [sp, #8]
200038a8:	2200      	movs	r2, #0
200038aa:	9201      	str	r2, [sp, #4]
200038ac:	685a      	ldr	r2, [r3, #4]
200038ae:	9200      	str	r2, [sp, #0]
200038b0:	681b      	ldr	r3, [r3, #0]
200038b2:	4a17      	ldr	r2, [pc, #92]	; (20003910 <NPN_PNPButton+0x13c>)
200038b4:	2190      	movs	r1, #144	; 0x90
200038b6:	f44f 7087 	mov.w	r0, #270	; 0x10e
200038ba:	f7fd ff98 	bl	200017ee <ILI9341_WriteString>
200038be:	e01f      	b.n	20003900 <NPN_PNPButton+0x12c>
		} else {
			ParamDevice.PNPTranzistor = false;
200038c0:	4b12      	ldr	r3, [pc, #72]	; (2000390c <NPN_PNPButton+0x138>)
200038c2:	2200      	movs	r2, #0
200038c4:	731a      	strb	r2, [r3, #12]
			strcpy(bufSpi, "PNP");
200038c6:	4b12      	ldr	r3, [pc, #72]	; (20003910 <NPN_PNPButton+0x13c>)
200038c8:	4a14      	ldr	r2, [pc, #80]	; (2000391c <NPN_PNPButton+0x148>)
200038ca:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 140, 50, 26, 3, ILI9341_BLUE);
200038cc:	231f      	movs	r3, #31
200038ce:	9301      	str	r3, [sp, #4]
200038d0:	2303      	movs	r3, #3
200038d2:	9300      	str	r3, [sp, #0]
200038d4:	231a      	movs	r3, #26
200038d6:	2232      	movs	r2, #50	; 0x32
200038d8:	218c      	movs	r1, #140	; 0x8c
200038da:	f44f 7082 	mov.w	r0, #260	; 0x104
200038de:	f7fe fc21 	bl	20002124 <fillRoundRect>
			ILI9341_WriteString(270, 144, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
200038e2:	4b0d      	ldr	r3, [pc, #52]	; (20003918 <NPN_PNPButton+0x144>)
200038e4:	221f      	movs	r2, #31
200038e6:	9202      	str	r2, [sp, #8]
200038e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
200038ec:	9201      	str	r2, [sp, #4]
200038ee:	685a      	ldr	r2, [r3, #4]
200038f0:	9200      	str	r2, [sp, #0]
200038f2:	681b      	ldr	r3, [r3, #0]
200038f4:	4a06      	ldr	r2, [pc, #24]	; (20003910 <NPN_PNPButton+0x13c>)
200038f6:	2190      	movs	r1, #144	; 0x90
200038f8:	f44f 7087 	mov.w	r0, #270	; 0x10e
200038fc:	f7fd ff77 	bl	200017ee <ILI9341_WriteString>
		}
	}
	printTypeOutput();
20003900:	f7ff faa4 	bl	20002e4c <printTypeOutput>
}
20003904:	bf00      	nop
20003906:	3708      	adds	r7, #8
20003908:	46bd      	mov	sp, r7
2000390a:	bd80      	pop	{r7, pc}
2000390c:	2001476c 	.word	0x2001476c
20003910:	20014994 	.word	0x20014994
20003914:	004e504e 	.word	0x004e504e
20003918:	2001472c 	.word	0x2001472c
2000391c:	00504e50 	.word	0x00504e50

20003920 <setParamNPN_PNP>:

void setParamNPN_PNP(uint8_t type) {
20003920:	b580      	push	{r7, lr}
20003922:	b082      	sub	sp, #8
20003924:	af00      	add	r7, sp, #0
20003926:	4603      	mov	r3, r0
20003928:	71fb      	strb	r3, [r7, #7]
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {
2000392a:	4b18      	ldr	r3, [pc, #96]	; (2000398c <setParamNPN_PNP+0x6c>)
2000392c:	681b      	ldr	r3, [r3, #0]
2000392e:	f003 0302 	and.w	r3, r3, #2
20003932:	2b00      	cmp	r3, #0
20003934:	d125      	bne.n	20003982 <setParamNPN_PNP+0x62>
		SET_FLAG(ONE_TOUCH, globalFlag);
20003936:	4b15      	ldr	r3, [pc, #84]	; (2000398c <setParamNPN_PNP+0x6c>)
20003938:	681b      	ldr	r3, [r3, #0]
2000393a:	f043 0302 	orr.w	r3, r3, #2
2000393e:	4a13      	ldr	r2, [pc, #76]	; (2000398c <setParamNPN_PNP+0x6c>)
20003940:	6013      	str	r3, [r2, #0]
		if (type == NPN) {
20003942:	79fb      	ldrb	r3, [r7, #7]
20003944:	2b01      	cmp	r3, #1
20003946:	d10c      	bne.n	20003962 <setParamNPN_PNP+0x42>
			if (ParamDevice.NPNTranzistor) {
20003948:	4b11      	ldr	r3, [pc, #68]	; (20003990 <setParamNPN_PNP+0x70>)
2000394a:	7adb      	ldrb	r3, [r3, #11]
2000394c:	2b00      	cmp	r3, #0
2000394e:	d004      	beq.n	2000395a <setParamNPN_PNP+0x3a>
				NPN_PNPButton(NPN, NO_PRESSED);
20003950:	2100      	movs	r1, #0
20003952:	2001      	movs	r0, #1
20003954:	f7ff ff3e 	bl	200037d4 <NPN_PNPButton>
20003958:	e003      	b.n	20003962 <setParamNPN_PNP+0x42>
			} else {
				NPN_PNPButton(NPN, PRESSED);
2000395a:	2101      	movs	r1, #1
2000395c:	2001      	movs	r0, #1
2000395e:	f7ff ff39 	bl	200037d4 <NPN_PNPButton>
			}
		}
		if (type == PNP) {
20003962:	79fb      	ldrb	r3, [r7, #7]
20003964:	2b00      	cmp	r3, #0
20003966:	d10c      	bne.n	20003982 <setParamNPN_PNP+0x62>
			if (ParamDevice.PNPTranzistor) {
20003968:	4b09      	ldr	r3, [pc, #36]	; (20003990 <setParamNPN_PNP+0x70>)
2000396a:	7b1b      	ldrb	r3, [r3, #12]
2000396c:	2b00      	cmp	r3, #0
2000396e:	d004      	beq.n	2000397a <setParamNPN_PNP+0x5a>
				NPN_PNPButton(PNP, NO_PRESSED);
20003970:	2100      	movs	r1, #0
20003972:	2000      	movs	r0, #0
20003974:	f7ff ff2e 	bl	200037d4 <NPN_PNPButton>
			} else {
				NPN_PNPButton(PNP, PRESSED);
			}
		}
	}
}
20003978:	e003      	b.n	20003982 <setParamNPN_PNP+0x62>
				NPN_PNPButton(PNP, PRESSED);
2000397a:	2101      	movs	r1, #1
2000397c:	2000      	movs	r0, #0
2000397e:	f7ff ff29 	bl	200037d4 <NPN_PNPButton>
}
20003982:	bf00      	nop
20003984:	3708      	adds	r7, #8
20003986:	46bd      	mov	sp, r7
20003988:	bd80      	pop	{r7, pc}
2000398a:	bf00      	nop
2000398c:	20014ac4 	.word	0x20014ac4
20003990:	2001476c 	.word	0x2001476c

20003994 <checkButtonPress>:

void checkButtonPress(void) {
20003994:	b580      	push	{r7, lr}
20003996:	b082      	sub	sp, #8
20003998:	af02      	add	r7, sp, #8
	if (!READ_BIT(GPIOB->IDR, GPIO_IDR_ID12)) {
2000399a:	4b8b      	ldr	r3, [pc, #556]	; (20003bc8 <checkButtonPress+0x234>)
2000399c:	691b      	ldr	r3, [r3, #16]
2000399e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
200039a2:	2b00      	cmp	r3, #0
200039a4:	f040 8105 	bne.w	20003bb2 <checkButtonPress+0x21e>
		if (ILI9341_TouchGetCoordinates(&x, &y)) {
200039a8:	4988      	ldr	r1, [pc, #544]	; (20003bcc <checkButtonPress+0x238>)
200039aa:	4889      	ldr	r0, [pc, #548]	; (20003bd0 <checkButtonPress+0x23c>)
200039ac:	f7fe fd6a 	bl	20002484 <ILI9341_TouchGetCoordinates>
200039b0:	4603      	mov	r3, r0
200039b2:	2b00      	cmp	r3, #0
200039b4:	f000 80f5 	beq.w	20003ba2 <checkButtonPress+0x20e>

			if (!READ_FLAG(ONE_BUZZER, globalFlag)) {
200039b8:	4b86      	ldr	r3, [pc, #536]	; (20003bd4 <checkButtonPress+0x240>)
200039ba:	681b      	ldr	r3, [r3, #0]
200039bc:	f003 0304 	and.w	r3, r3, #4
200039c0:	2b00      	cmp	r3, #0
200039c2:	d108      	bne.n	200039d6 <checkButtonPress+0x42>
				SET_FLAG(ONE_BUZZER, globalFlag);
200039c4:	4b83      	ldr	r3, [pc, #524]	; (20003bd4 <checkButtonPress+0x240>)
200039c6:	681b      	ldr	r3, [r3, #0]
200039c8:	f043 0304 	orr.w	r3, r3, #4
200039cc:	4a81      	ldr	r2, [pc, #516]	; (20003bd4 <checkButtonPress+0x240>)
200039ce:	6013      	str	r3, [r2, #0]
				buzzerSet(100);
200039d0:	2064      	movs	r0, #100	; 0x64
200039d2:	f000 fb89 	bl	200040e8 <buzzerSet>
			}

			if (checkAreaTouch(x, y, 246, 182, 50, 50)) {
200039d6:	4b7e      	ldr	r3, [pc, #504]	; (20003bd0 <checkButtonPress+0x23c>)
200039d8:	8818      	ldrh	r0, [r3, #0]
200039da:	4b7c      	ldr	r3, [pc, #496]	; (20003bcc <checkButtonPress+0x238>)
200039dc:	8819      	ldrh	r1, [r3, #0]
200039de:	2332      	movs	r3, #50	; 0x32
200039e0:	9301      	str	r3, [sp, #4]
200039e2:	2332      	movs	r3, #50	; 0x32
200039e4:	9300      	str	r3, [sp, #0]
200039e6:	23b6      	movs	r3, #182	; 0xb6
200039e8:	22f6      	movs	r2, #246	; 0xf6
200039ea:	f7ff fc2f 	bl	2000324c <checkAreaTouch>
200039ee:	4603      	mov	r3, r0
200039f0:	2b00      	cmp	r3, #0
200039f2:	d001      	beq.n	200039f8 <checkButtonPress+0x64>
				powerButton();
200039f4:	f7ff fd00 	bl	200033f8 <powerButton>
			}
			if (!ParamDevice.power) {
200039f8:	4b77      	ldr	r3, [pc, #476]	; (20003bd8 <checkButtonPress+0x244>)
200039fa:	7b5b      	ldrb	r3, [r3, #13]
200039fc:	2b00      	cmp	r3, #0
200039fe:	f040 80d0 	bne.w	20003ba2 <checkButtonPress+0x20e>
				if (checkAreaTouch(x, y, 15, 30, 235, 35)) {
20003a02:	4b73      	ldr	r3, [pc, #460]	; (20003bd0 <checkButtonPress+0x23c>)
20003a04:	8818      	ldrh	r0, [r3, #0]
20003a06:	4b71      	ldr	r3, [pc, #452]	; (20003bcc <checkButtonPress+0x238>)
20003a08:	8819      	ldrh	r1, [r3, #0]
20003a0a:	2323      	movs	r3, #35	; 0x23
20003a0c:	9301      	str	r3, [sp, #4]
20003a0e:	23eb      	movs	r3, #235	; 0xeb
20003a10:	9300      	str	r3, [sp, #0]
20003a12:	231e      	movs	r3, #30
20003a14:	220f      	movs	r2, #15
20003a16:	f7ff fc19 	bl	2000324c <checkAreaTouch>
20003a1a:	4603      	mov	r3, r0
20003a1c:	2b00      	cmp	r3, #0
20003a1e:	d00d      	beq.n	20003a3c <checkButtonPress+0xa8>
					RESET_FLAG(AREA2_PRESS|AREA3_PRESS, globalFlag);
20003a20:	4b6c      	ldr	r3, [pc, #432]	; (20003bd4 <checkButtonPress+0x240>)
20003a22:	681b      	ldr	r3, [r3, #0]
20003a24:	f023 0330 	bic.w	r3, r3, #48	; 0x30
20003a28:	4a6a      	ldr	r2, [pc, #424]	; (20003bd4 <checkButtonPress+0x240>)
20003a2a:	6013      	str	r3, [r2, #0]
					SET_FLAG(AREA1_PRESS, globalFlag);
20003a2c:	4b69      	ldr	r3, [pc, #420]	; (20003bd4 <checkButtonPress+0x240>)
20003a2e:	681b      	ldr	r3, [r3, #0]
20003a30:	f043 0308 	orr.w	r3, r3, #8
20003a34:	4a67      	ldr	r2, [pc, #412]	; (20003bd4 <checkButtonPress+0x240>)
20003a36:	6013      	str	r3, [r2, #0]
					checkstrokeArea();
20003a38:	f7ff fc34 	bl	200032a4 <checkstrokeArea>
				}

				if (checkAreaTouch(x, y, 15, 78, 235, 35)) {
20003a3c:	4b64      	ldr	r3, [pc, #400]	; (20003bd0 <checkButtonPress+0x23c>)
20003a3e:	8818      	ldrh	r0, [r3, #0]
20003a40:	4b62      	ldr	r3, [pc, #392]	; (20003bcc <checkButtonPress+0x238>)
20003a42:	8819      	ldrh	r1, [r3, #0]
20003a44:	2323      	movs	r3, #35	; 0x23
20003a46:	9301      	str	r3, [sp, #4]
20003a48:	23eb      	movs	r3, #235	; 0xeb
20003a4a:	9300      	str	r3, [sp, #0]
20003a4c:	234e      	movs	r3, #78	; 0x4e
20003a4e:	220f      	movs	r2, #15
20003a50:	f7ff fbfc 	bl	2000324c <checkAreaTouch>
20003a54:	4603      	mov	r3, r0
20003a56:	2b00      	cmp	r3, #0
20003a58:	d00d      	beq.n	20003a76 <checkButtonPress+0xe2>
					RESET_FLAG(AREA1_PRESS|AREA3_PRESS, globalFlag);
20003a5a:	4b5e      	ldr	r3, [pc, #376]	; (20003bd4 <checkButtonPress+0x240>)
20003a5c:	681b      	ldr	r3, [r3, #0]
20003a5e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
20003a62:	4a5c      	ldr	r2, [pc, #368]	; (20003bd4 <checkButtonPress+0x240>)
20003a64:	6013      	str	r3, [r2, #0]
					SET_FLAG(AREA2_PRESS, globalFlag);
20003a66:	4b5b      	ldr	r3, [pc, #364]	; (20003bd4 <checkButtonPress+0x240>)
20003a68:	681b      	ldr	r3, [r3, #0]
20003a6a:	f043 0310 	orr.w	r3, r3, #16
20003a6e:	4a59      	ldr	r2, [pc, #356]	; (20003bd4 <checkButtonPress+0x240>)
20003a70:	6013      	str	r3, [r2, #0]
					checkstrokeArea();
20003a72:	f7ff fc17 	bl	200032a4 <checkstrokeArea>
				}

				if (checkAreaTouch(x, y, 15, 126, 235, 35)) {
20003a76:	4b56      	ldr	r3, [pc, #344]	; (20003bd0 <checkButtonPress+0x23c>)
20003a78:	8818      	ldrh	r0, [r3, #0]
20003a7a:	4b54      	ldr	r3, [pc, #336]	; (20003bcc <checkButtonPress+0x238>)
20003a7c:	8819      	ldrh	r1, [r3, #0]
20003a7e:	2323      	movs	r3, #35	; 0x23
20003a80:	9301      	str	r3, [sp, #4]
20003a82:	23eb      	movs	r3, #235	; 0xeb
20003a84:	9300      	str	r3, [sp, #0]
20003a86:	237e      	movs	r3, #126	; 0x7e
20003a88:	220f      	movs	r2, #15
20003a8a:	f7ff fbdf 	bl	2000324c <checkAreaTouch>
20003a8e:	4603      	mov	r3, r0
20003a90:	2b00      	cmp	r3, #0
20003a92:	d00d      	beq.n	20003ab0 <checkButtonPress+0x11c>
					RESET_FLAG(AREA1_PRESS|AREA2_PRESS, globalFlag);
20003a94:	4b4f      	ldr	r3, [pc, #316]	; (20003bd4 <checkButtonPress+0x240>)
20003a96:	681b      	ldr	r3, [r3, #0]
20003a98:	f023 0318 	bic.w	r3, r3, #24
20003a9c:	4a4d      	ldr	r2, [pc, #308]	; (20003bd4 <checkButtonPress+0x240>)
20003a9e:	6013      	str	r3, [r2, #0]
					SET_FLAG(AREA3_PRESS, globalFlag);
20003aa0:	4b4c      	ldr	r3, [pc, #304]	; (20003bd4 <checkButtonPress+0x240>)
20003aa2:	681b      	ldr	r3, [r3, #0]
20003aa4:	f043 0320 	orr.w	r3, r3, #32
20003aa8:	4a4a      	ldr	r2, [pc, #296]	; (20003bd4 <checkButtonPress+0x240>)
20003aaa:	6013      	str	r3, [r2, #0]
					checkstrokeArea();
20003aac:	f7ff fbfa 	bl	200032a4 <checkstrokeArea>
				}

				if (checkAreaTouch(x, y, 24, 182, 50, 50)) {
20003ab0:	4b47      	ldr	r3, [pc, #284]	; (20003bd0 <checkButtonPress+0x23c>)
20003ab2:	8818      	ldrh	r0, [r3, #0]
20003ab4:	4b45      	ldr	r3, [pc, #276]	; (20003bcc <checkButtonPress+0x238>)
20003ab6:	8819      	ldrh	r1, [r3, #0]
20003ab8:	2332      	movs	r3, #50	; 0x32
20003aba:	9301      	str	r3, [sp, #4]
20003abc:	2332      	movs	r3, #50	; 0x32
20003abe:	9300      	str	r3, [sp, #0]
20003ac0:	23b6      	movs	r3, #182	; 0xb6
20003ac2:	2218      	movs	r2, #24
20003ac4:	f7ff fbc2 	bl	2000324c <checkAreaTouch>
20003ac8:	4603      	mov	r3, r0
20003aca:	2b00      	cmp	r3, #0
20003acc:	d00c      	beq.n	20003ae8 <checkButtonPress+0x154>
					printColorImage(24, 182, 50, 50, PRESSED, image_Plus);
20003ace:	4b43      	ldr	r3, [pc, #268]	; (20003bdc <checkButtonPress+0x248>)
20003ad0:	9301      	str	r3, [sp, #4]
20003ad2:	2301      	movs	r3, #1
20003ad4:	9300      	str	r3, [sp, #0]
20003ad6:	2332      	movs	r3, #50	; 0x32
20003ad8:	2232      	movs	r2, #50	; 0x32
20003ada:	21b6      	movs	r1, #182	; 0xb6
20003adc:	2018      	movs	r0, #24
20003ade:	f7ff fafd 	bl	200030dc <printColorImage>
					changeParamPlusMinus(PLUS);
20003ae2:	2001      	movs	r0, #1
20003ae4:	f7ff fdcc 	bl	20003680 <changeParamPlusMinus>
				}

				if (checkAreaTouch(x, y, 172, 182, 50, 50)) {
20003ae8:	4b39      	ldr	r3, [pc, #228]	; (20003bd0 <checkButtonPress+0x23c>)
20003aea:	8818      	ldrh	r0, [r3, #0]
20003aec:	4b37      	ldr	r3, [pc, #220]	; (20003bcc <checkButtonPress+0x238>)
20003aee:	8819      	ldrh	r1, [r3, #0]
20003af0:	2332      	movs	r3, #50	; 0x32
20003af2:	9301      	str	r3, [sp, #4]
20003af4:	2332      	movs	r3, #50	; 0x32
20003af6:	9300      	str	r3, [sp, #0]
20003af8:	23b6      	movs	r3, #182	; 0xb6
20003afa:	22ac      	movs	r2, #172	; 0xac
20003afc:	f7ff fba6 	bl	2000324c <checkAreaTouch>
20003b00:	4603      	mov	r3, r0
20003b02:	2b00      	cmp	r3, #0
20003b04:	d00c      	beq.n	20003b20 <checkButtonPress+0x18c>
					printColorImage(172, 182, 50, 50, PRESSED, image_Minus);
20003b06:	4b36      	ldr	r3, [pc, #216]	; (20003be0 <checkButtonPress+0x24c>)
20003b08:	9301      	str	r3, [sp, #4]
20003b0a:	2301      	movs	r3, #1
20003b0c:	9300      	str	r3, [sp, #0]
20003b0e:	2332      	movs	r3, #50	; 0x32
20003b10:	2232      	movs	r2, #50	; 0x32
20003b12:	21b6      	movs	r1, #182	; 0xb6
20003b14:	20ac      	movs	r0, #172	; 0xac
20003b16:	f7ff fae1 	bl	200030dc <printColorImage>
					changeParamPlusMinus(MINUS);
20003b1a:	2000      	movs	r0, #0
20003b1c:	f7ff fdb0 	bl	20003680 <changeParamPlusMinus>
				}

				if (checkAreaTouch(x, y, 98, 182, 50, 50)) {
20003b20:	4b2b      	ldr	r3, [pc, #172]	; (20003bd0 <checkButtonPress+0x23c>)
20003b22:	8818      	ldrh	r0, [r3, #0]
20003b24:	4b29      	ldr	r3, [pc, #164]	; (20003bcc <checkButtonPress+0x238>)
20003b26:	8819      	ldrh	r1, [r3, #0]
20003b28:	2332      	movs	r3, #50	; 0x32
20003b2a:	9301      	str	r3, [sp, #4]
20003b2c:	2332      	movs	r3, #50	; 0x32
20003b2e:	9300      	str	r3, [sp, #0]
20003b30:	23b6      	movs	r3, #182	; 0xb6
20003b32:	2262      	movs	r2, #98	; 0x62
20003b34:	f7ff fb8a 	bl	2000324c <checkAreaTouch>
20003b38:	4603      	mov	r3, r0
20003b3a:	2b00      	cmp	r3, #0
20003b3c:	d00b      	beq.n	20003b56 <checkButtonPress+0x1c2>
					printColorImage(98, 182, 50, 50, PRESSED, image_Arrow);
20003b3e:	4b29      	ldr	r3, [pc, #164]	; (20003be4 <checkButtonPress+0x250>)
20003b40:	9301      	str	r3, [sp, #4]
20003b42:	2301      	movs	r3, #1
20003b44:	9300      	str	r3, [sp, #0]
20003b46:	2332      	movs	r3, #50	; 0x32
20003b48:	2232      	movs	r2, #50	; 0x32
20003b4a:	21b6      	movs	r1, #182	; 0xb6
20003b4c:	2062      	movs	r0, #98	; 0x62
20003b4e:	f7ff fac5 	bl	200030dc <printColorImage>
					togleUnits();
20003b52:	f7ff fde3 	bl	2000371c <togleUnits>
				}

				if (checkAreaTouch(x, y, 260, 102, 50, 26)) {
20003b56:	4b1e      	ldr	r3, [pc, #120]	; (20003bd0 <checkButtonPress+0x23c>)
20003b58:	8818      	ldrh	r0, [r3, #0]
20003b5a:	4b1c      	ldr	r3, [pc, #112]	; (20003bcc <checkButtonPress+0x238>)
20003b5c:	8819      	ldrh	r1, [r3, #0]
20003b5e:	231a      	movs	r3, #26
20003b60:	9301      	str	r3, [sp, #4]
20003b62:	2332      	movs	r3, #50	; 0x32
20003b64:	9300      	str	r3, [sp, #0]
20003b66:	2366      	movs	r3, #102	; 0x66
20003b68:	f44f 7282 	mov.w	r2, #260	; 0x104
20003b6c:	f7ff fb6e 	bl	2000324c <checkAreaTouch>
20003b70:	4603      	mov	r3, r0
20003b72:	2b00      	cmp	r3, #0
20003b74:	d002      	beq.n	20003b7c <checkButtonPress+0x1e8>
					setParamNPN_PNP(NPN);
20003b76:	2001      	movs	r0, #1
20003b78:	f7ff fed2 	bl	20003920 <setParamNPN_PNP>
				}

				if (checkAreaTouch(x, y, 260, 140, 50, 26)) {
20003b7c:	4b14      	ldr	r3, [pc, #80]	; (20003bd0 <checkButtonPress+0x23c>)
20003b7e:	8818      	ldrh	r0, [r3, #0]
20003b80:	4b12      	ldr	r3, [pc, #72]	; (20003bcc <checkButtonPress+0x238>)
20003b82:	8819      	ldrh	r1, [r3, #0]
20003b84:	231a      	movs	r3, #26
20003b86:	9301      	str	r3, [sp, #4]
20003b88:	2332      	movs	r3, #50	; 0x32
20003b8a:	9300      	str	r3, [sp, #0]
20003b8c:	238c      	movs	r3, #140	; 0x8c
20003b8e:	f44f 7282 	mov.w	r2, #260	; 0x104
20003b92:	f7ff fb5b 	bl	2000324c <checkAreaTouch>
20003b96:	4603      	mov	r3, r0
20003b98:	2b00      	cmp	r3, #0
20003b9a:	d002      	beq.n	20003ba2 <checkButtonPress+0x20e>
					setParamNPN_PNP(PNP);
20003b9c:	2000      	movs	r0, #0
20003b9e:	f7ff febf 	bl	20003920 <setParamNPN_PNP>
				}
			}
		}
		timBigArea = 5000;
20003ba2:	4b11      	ldr	r3, [pc, #68]	; (20003be8 <checkButtonPress+0x254>)
20003ba4:	f241 3288 	movw	r2, #5000	; 0x1388
20003ba8:	601a      	str	r2, [r3, #0]
		timButtonPress = 50;
20003baa:	4b10      	ldr	r3, [pc, #64]	; (20003bec <checkButtonPress+0x258>)
20003bac:	2232      	movs	r2, #50	; 0x32
20003bae:	601a      	str	r2, [r3, #0]
20003bb0:	e005      	b.n	20003bbe <checkButtonPress+0x22a>
		//ParamDevice.changeParametrs = true;
	} else {
		RESET_FLAG(ONE_BUZZER, globalFlag);
20003bb2:	4b08      	ldr	r3, [pc, #32]	; (20003bd4 <checkButtonPress+0x240>)
20003bb4:	681b      	ldr	r3, [r3, #0]
20003bb6:	f023 0304 	bic.w	r3, r3, #4
20003bba:	4a06      	ldr	r2, [pc, #24]	; (20003bd4 <checkButtonPress+0x240>)
20003bbc:	6013      	str	r3, [r2, #0]
	}
	GUIPostHandler();
20003bbe:	f000 f817 	bl	20003bf0 <GUIPostHandler>
}
20003bc2:	bf00      	nop
20003bc4:	46bd      	mov	sp, r7
20003bc6:	bd80      	pop	{r7, pc}
20003bc8:	40020400 	.word	0x40020400
20003bcc:	200149be 	.word	0x200149be
20003bd0:	200149bc 	.word	0x200149bc
20003bd4:	20014ac4 	.word	0x20014ac4
20003bd8:	2001476c 	.word	0x2001476c
20003bdc:	2000c328 	.word	0x2000c328
20003be0:	2000d6b0 	.word	0x2000d6b0
20003be4:	2000eb64 	.word	0x2000eb64
20003be8:	200149c0 	.word	0x200149c0
20003bec:	200149c4 	.word	0x200149c4

20003bf0 <GUIPostHandler>:

void GUIPostHandler(void) {
20003bf0:	b580      	push	{r7, lr}
20003bf2:	b082      	sub	sp, #8
20003bf4:	af02      	add	r7, sp, #8
	if (timBigArea == 0 && (globalFlag & 0x38)) {
20003bf6:	4b26      	ldr	r3, [pc, #152]	; (20003c90 <GUIPostHandler+0xa0>)
20003bf8:	681b      	ldr	r3, [r3, #0]
20003bfa:	2b00      	cmp	r3, #0
20003bfc:	d10d      	bne.n	20003c1a <GUIPostHandler+0x2a>
20003bfe:	4b25      	ldr	r3, [pc, #148]	; (20003c94 <GUIPostHandler+0xa4>)
20003c00:	681b      	ldr	r3, [r3, #0]
20003c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
20003c06:	2b00      	cmp	r3, #0
20003c08:	d007      	beq.n	20003c1a <GUIPostHandler+0x2a>
		RESET_FLAG(AREA1_PRESS|AREA2_PRESS|AREA3_PRESS, globalFlag);
20003c0a:	4b22      	ldr	r3, [pc, #136]	; (20003c94 <GUIPostHandler+0xa4>)
20003c0c:	681b      	ldr	r3, [r3, #0]
20003c0e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
20003c12:	4a20      	ldr	r2, [pc, #128]	; (20003c94 <GUIPostHandler+0xa4>)
20003c14:	6013      	str	r3, [r2, #0]
		checkstrokeArea();
20003c16:	f7ff fb45 	bl	200032a4 <checkstrokeArea>
	}
	if (timButtonPress == 0 && READ_FLAG(ONE_TOUCH, globalFlag)) {
20003c1a:	4b1f      	ldr	r3, [pc, #124]	; (20003c98 <GUIPostHandler+0xa8>)
20003c1c:	681b      	ldr	r3, [r3, #0]
20003c1e:	2b00      	cmp	r3, #0
20003c20:	d132      	bne.n	20003c88 <GUIPostHandler+0x98>
20003c22:	4b1c      	ldr	r3, [pc, #112]	; (20003c94 <GUIPostHandler+0xa4>)
20003c24:	681b      	ldr	r3, [r3, #0]
20003c26:	f003 0302 	and.w	r3, r3, #2
20003c2a:	2b00      	cmp	r3, #0
20003c2c:	d02c      	beq.n	20003c88 <GUIPostHandler+0x98>
		printColorImage(24, 182, 50, 50, NO_PRESSED, image_Plus);
20003c2e:	4b1b      	ldr	r3, [pc, #108]	; (20003c9c <GUIPostHandler+0xac>)
20003c30:	9301      	str	r3, [sp, #4]
20003c32:	2300      	movs	r3, #0
20003c34:	9300      	str	r3, [sp, #0]
20003c36:	2332      	movs	r3, #50	; 0x32
20003c38:	2232      	movs	r2, #50	; 0x32
20003c3a:	21b6      	movs	r1, #182	; 0xb6
20003c3c:	2018      	movs	r0, #24
20003c3e:	f7ff fa4d 	bl	200030dc <printColorImage>
		printColorImage(172, 182, 50, 50, NO_PRESSED, image_Minus);
20003c42:	4b17      	ldr	r3, [pc, #92]	; (20003ca0 <GUIPostHandler+0xb0>)
20003c44:	9301      	str	r3, [sp, #4]
20003c46:	2300      	movs	r3, #0
20003c48:	9300      	str	r3, [sp, #0]
20003c4a:	2332      	movs	r3, #50	; 0x32
20003c4c:	2232      	movs	r2, #50	; 0x32
20003c4e:	21b6      	movs	r1, #182	; 0xb6
20003c50:	20ac      	movs	r0, #172	; 0xac
20003c52:	f7ff fa43 	bl	200030dc <printColorImage>
		printColorImage(98, 182, 50, 50, NO_PRESSED, image_Arrow);
20003c56:	4b13      	ldr	r3, [pc, #76]	; (20003ca4 <GUIPostHandler+0xb4>)
20003c58:	9301      	str	r3, [sp, #4]
20003c5a:	2300      	movs	r3, #0
20003c5c:	9300      	str	r3, [sp, #0]
20003c5e:	2332      	movs	r3, #50	; 0x32
20003c60:	2232      	movs	r2, #50	; 0x32
20003c62:	21b6      	movs	r1, #182	; 0xb6
20003c64:	2062      	movs	r0, #98	; 0x62
20003c66:	f7ff fa39 	bl	200030dc <printColorImage>
		RESET_FLAG(TOUCH_DISPLAY, globalFlag);
20003c6a:	4b0a      	ldr	r3, [pc, #40]	; (20003c94 <GUIPostHandler+0xa4>)
20003c6c:	681b      	ldr	r3, [r3, #0]
20003c6e:	f023 0301 	bic.w	r3, r3, #1
20003c72:	4a08      	ldr	r2, [pc, #32]	; (20003c94 <GUIPostHandler+0xa4>)
20003c74:	6013      	str	r3, [r2, #0]
		RESET_FLAG(ONE_TOUCH, globalFlag);
20003c76:	4b07      	ldr	r3, [pc, #28]	; (20003c94 <GUIPostHandler+0xa4>)
20003c78:	681b      	ldr	r3, [r3, #0]
20003c7a:	f023 0302 	bic.w	r3, r3, #2
20003c7e:	4a05      	ldr	r2, [pc, #20]	; (20003c94 <GUIPostHandler+0xa4>)
20003c80:	6013      	str	r3, [r2, #0]
		countSpeed = 1;
20003c82:	4b09      	ldr	r3, [pc, #36]	; (20003ca8 <GUIPostHandler+0xb8>)
20003c84:	2201      	movs	r2, #1
20003c86:	801a      	strh	r2, [r3, #0]
	}
}
20003c88:	bf00      	nop
20003c8a:	46bd      	mov	sp, r7
20003c8c:	bd80      	pop	{r7, pc}
20003c8e:	bf00      	nop
20003c90:	200149c0 	.word	0x200149c0
20003c94:	20014ac4 	.word	0x20014ac4
20003c98:	200149c4 	.word	0x200149c4
20003c9c:	2000c328 	.word	0x2000c328
20003ca0:	2000d6b0 	.word	0x2000d6b0
20003ca4:	2000eb64 	.word	0x2000eb64
20003ca8:	20014758 	.word	0x20014758

20003cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20003cac:	b580      	push	{r7, lr}
20003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SYSCFG->MEMRMP = 0x3;    // для запуска из SRAM
20003cb0:	4b09      	ldr	r3, [pc, #36]	; (20003cd8 <main+0x2c>)
20003cb2:	2203      	movs	r2, #3
20003cb4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
20003cb6:	f000 fed3 	bl	20004a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
20003cba:	f000 f80f 	bl	20003cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20003cbe:	f000 f94b 	bl	20003f58 <MX_GPIO_Init>
  MX_SPI1_Init();
20003cc2:	f000 f873 	bl	20003dac <MX_SPI1_Init>
  MX_SPI2_Init();
20003cc6:	f000 f8a7 	bl	20003e18 <MX_SPI2_Init>
  MX_TIM5_Init();
20003cca:	f000 f8db 	bl	20003e84 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  doWork ();
20003cce:	f000 fd9b 	bl	20004808 <doWork>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Work ();
20003cd2:	f000 fda7 	bl	20004824 <Work>
20003cd6:	e7fc      	b.n	20003cd2 <main+0x26>
20003cd8:	40013800 	.word	0x40013800

20003cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20003cdc:	b580      	push	{r7, lr}
20003cde:	b094      	sub	sp, #80	; 0x50
20003ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20003ce2:	f107 0320 	add.w	r3, r7, #32
20003ce6:	2230      	movs	r2, #48	; 0x30
20003ce8:	2100      	movs	r1, #0
20003cea:	4618      	mov	r0, r3
20003cec:	f002 ffe8 	bl	20006cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20003cf0:	f107 030c 	add.w	r3, r7, #12
20003cf4:	2200      	movs	r2, #0
20003cf6:	601a      	str	r2, [r3, #0]
20003cf8:	605a      	str	r2, [r3, #4]
20003cfa:	609a      	str	r2, [r3, #8]
20003cfc:	60da      	str	r2, [r3, #12]
20003cfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20003d00:	2300      	movs	r3, #0
20003d02:	60bb      	str	r3, [r7, #8]
20003d04:	4b27      	ldr	r3, [pc, #156]	; (20003da4 <SystemClock_Config+0xc8>)
20003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20003d08:	4a26      	ldr	r2, [pc, #152]	; (20003da4 <SystemClock_Config+0xc8>)
20003d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20003d0e:	6413      	str	r3, [r2, #64]	; 0x40
20003d10:	4b24      	ldr	r3, [pc, #144]	; (20003da4 <SystemClock_Config+0xc8>)
20003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20003d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20003d18:	60bb      	str	r3, [r7, #8]
20003d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20003d1c:	2300      	movs	r3, #0
20003d1e:	607b      	str	r3, [r7, #4]
20003d20:	4b21      	ldr	r3, [pc, #132]	; (20003da8 <SystemClock_Config+0xcc>)
20003d22:	681b      	ldr	r3, [r3, #0]
20003d24:	4a20      	ldr	r2, [pc, #128]	; (20003da8 <SystemClock_Config+0xcc>)
20003d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
20003d2a:	6013      	str	r3, [r2, #0]
20003d2c:	4b1e      	ldr	r3, [pc, #120]	; (20003da8 <SystemClock_Config+0xcc>)
20003d2e:	681b      	ldr	r3, [r3, #0]
20003d30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
20003d34:	607b      	str	r3, [r7, #4]
20003d36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
20003d38:	2301      	movs	r3, #1
20003d3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
20003d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20003d40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20003d42:	2302      	movs	r3, #2
20003d44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
20003d46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20003d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
20003d4c:	230c      	movs	r3, #12
20003d4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
20003d50:	2360      	movs	r3, #96	; 0x60
20003d52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20003d54:	2302      	movs	r3, #2
20003d56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
20003d58:	2304      	movs	r3, #4
20003d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20003d5c:	f107 0320 	add.w	r3, r7, #32
20003d60:	4618      	mov	r0, r3
20003d62:	f001 fba1 	bl	200054a8 <HAL_RCC_OscConfig>
20003d66:	4603      	mov	r3, r0
20003d68:	2b00      	cmp	r3, #0
20003d6a:	d001      	beq.n	20003d70 <SystemClock_Config+0x94>
  {
    Error_Handler();
20003d6c:	f000 f976 	bl	2000405c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20003d70:	230f      	movs	r3, #15
20003d72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20003d74:	2302      	movs	r3, #2
20003d76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20003d78:	2300      	movs	r3, #0
20003d7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
20003d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20003d80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
20003d82:	2300      	movs	r3, #0
20003d84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
20003d86:	f107 030c 	add.w	r3, r7, #12
20003d8a:	2103      	movs	r1, #3
20003d8c:	4618      	mov	r0, r3
20003d8e:	f001 fe03 	bl	20005998 <HAL_RCC_ClockConfig>
20003d92:	4603      	mov	r3, r0
20003d94:	2b00      	cmp	r3, #0
20003d96:	d001      	beq.n	20003d9c <SystemClock_Config+0xc0>
  {
    Error_Handler();
20003d98:	f000 f960 	bl	2000405c <Error_Handler>
  }
}
20003d9c:	bf00      	nop
20003d9e:	3750      	adds	r7, #80	; 0x50
20003da0:	46bd      	mov	sp, r7
20003da2:	bd80      	pop	{r7, pc}
20003da4:	40023800 	.word	0x40023800
20003da8:	40007000 	.word	0x40007000

20003dac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
20003dac:	b580      	push	{r7, lr}
20003dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
20003db0:	4b17      	ldr	r3, [pc, #92]	; (20003e10 <MX_SPI1_Init+0x64>)
20003db2:	4a18      	ldr	r2, [pc, #96]	; (20003e14 <MX_SPI1_Init+0x68>)
20003db4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
20003db6:	4b16      	ldr	r3, [pc, #88]	; (20003e10 <MX_SPI1_Init+0x64>)
20003db8:	f44f 7282 	mov.w	r2, #260	; 0x104
20003dbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
20003dbe:	4b14      	ldr	r3, [pc, #80]	; (20003e10 <MX_SPI1_Init+0x64>)
20003dc0:	2200      	movs	r2, #0
20003dc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
20003dc4:	4b12      	ldr	r3, [pc, #72]	; (20003e10 <MX_SPI1_Init+0x64>)
20003dc6:	2200      	movs	r2, #0
20003dc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
20003dca:	4b11      	ldr	r3, [pc, #68]	; (20003e10 <MX_SPI1_Init+0x64>)
20003dcc:	2200      	movs	r2, #0
20003dce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
20003dd0:	4b0f      	ldr	r3, [pc, #60]	; (20003e10 <MX_SPI1_Init+0x64>)
20003dd2:	2200      	movs	r2, #0
20003dd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
20003dd6:	4b0e      	ldr	r3, [pc, #56]	; (20003e10 <MX_SPI1_Init+0x64>)
20003dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
20003ddc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20003dde:	4b0c      	ldr	r3, [pc, #48]	; (20003e10 <MX_SPI1_Init+0x64>)
20003de0:	2200      	movs	r2, #0
20003de2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
20003de4:	4b0a      	ldr	r3, [pc, #40]	; (20003e10 <MX_SPI1_Init+0x64>)
20003de6:	2200      	movs	r2, #0
20003de8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
20003dea:	4b09      	ldr	r3, [pc, #36]	; (20003e10 <MX_SPI1_Init+0x64>)
20003dec:	2200      	movs	r2, #0
20003dee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20003df0:	4b07      	ldr	r3, [pc, #28]	; (20003e10 <MX_SPI1_Init+0x64>)
20003df2:	2200      	movs	r2, #0
20003df4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
20003df6:	4b06      	ldr	r3, [pc, #24]	; (20003e10 <MX_SPI1_Init+0x64>)
20003df8:	220a      	movs	r2, #10
20003dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
20003dfc:	4804      	ldr	r0, [pc, #16]	; (20003e10 <MX_SPI1_Init+0x64>)
20003dfe:	f001 ff77 	bl	20005cf0 <HAL_SPI_Init>
20003e02:	4603      	mov	r3, r0
20003e04:	2b00      	cmp	r3, #0
20003e06:	d001      	beq.n	20003e0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
20003e08:	f000 f928 	bl	2000405c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
20003e0c:	bf00      	nop
20003e0e:	bd80      	pop	{r7, pc}
20003e10:	200149cc 	.word	0x200149cc
20003e14:	40013000 	.word	0x40013000

20003e18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
20003e18:	b580      	push	{r7, lr}
20003e1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
20003e1c:	4b17      	ldr	r3, [pc, #92]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e1e:	4a18      	ldr	r2, [pc, #96]	; (20003e80 <MX_SPI2_Init+0x68>)
20003e20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
20003e22:	4b16      	ldr	r3, [pc, #88]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e24:	f44f 7282 	mov.w	r2, #260	; 0x104
20003e28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
20003e2a:	4b14      	ldr	r3, [pc, #80]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e2c:	2200      	movs	r2, #0
20003e2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
20003e30:	4b12      	ldr	r3, [pc, #72]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e32:	2200      	movs	r2, #0
20003e34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
20003e36:	4b11      	ldr	r3, [pc, #68]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e38:	2200      	movs	r2, #0
20003e3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
20003e3c:	4b0f      	ldr	r3, [pc, #60]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e3e:	2200      	movs	r2, #0
20003e40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
20003e42:	4b0e      	ldr	r3, [pc, #56]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e44:	f44f 7200 	mov.w	r2, #512	; 0x200
20003e48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
20003e4a:	4b0c      	ldr	r3, [pc, #48]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e4c:	2238      	movs	r2, #56	; 0x38
20003e4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
20003e50:	4b0a      	ldr	r3, [pc, #40]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e52:	2200      	movs	r2, #0
20003e54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
20003e56:	4b09      	ldr	r3, [pc, #36]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e58:	2200      	movs	r2, #0
20003e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20003e5c:	4b07      	ldr	r3, [pc, #28]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e5e:	2200      	movs	r2, #0
20003e60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
20003e62:	4b06      	ldr	r3, [pc, #24]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e64:	220a      	movs	r2, #10
20003e66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
20003e68:	4804      	ldr	r0, [pc, #16]	; (20003e7c <MX_SPI2_Init+0x64>)
20003e6a:	f001 ff41 	bl	20005cf0 <HAL_SPI_Init>
20003e6e:	4603      	mov	r3, r0
20003e70:	2b00      	cmp	r3, #0
20003e72:	d001      	beq.n	20003e78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
20003e74:	f000 f8f2 	bl	2000405c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
20003e78:	bf00      	nop
20003e7a:	bd80      	pop	{r7, pc}
20003e7c:	20014a24 	.word	0x20014a24
20003e80:	40003800 	.word	0x40003800

20003e84 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
20003e84:	b580      	push	{r7, lr}
20003e86:	b08a      	sub	sp, #40	; 0x28
20003e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
20003e8a:	f107 0320 	add.w	r3, r7, #32
20003e8e:	2200      	movs	r2, #0
20003e90:	601a      	str	r2, [r3, #0]
20003e92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
20003e94:	1d3b      	adds	r3, r7, #4
20003e96:	2200      	movs	r2, #0
20003e98:	601a      	str	r2, [r3, #0]
20003e9a:	605a      	str	r2, [r3, #4]
20003e9c:	609a      	str	r2, [r3, #8]
20003e9e:	60da      	str	r2, [r3, #12]
20003ea0:	611a      	str	r2, [r3, #16]
20003ea2:	615a      	str	r2, [r3, #20]
20003ea4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
20003ea6:	4b29      	ldr	r3, [pc, #164]	; (20003f4c <MX_TIM5_Init+0xc8>)
20003ea8:	4a29      	ldr	r2, [pc, #164]	; (20003f50 <MX_TIM5_Init+0xcc>)
20003eaa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
20003eac:	4b27      	ldr	r3, [pc, #156]	; (20003f4c <MX_TIM5_Init+0xc8>)
20003eae:	2200      	movs	r2, #0
20003eb0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
20003eb2:	4b26      	ldr	r3, [pc, #152]	; (20003f4c <MX_TIM5_Init+0xc8>)
20003eb4:	2200      	movs	r2, #0
20003eb6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000;
20003eb8:	4b24      	ldr	r3, [pc, #144]	; (20003f4c <MX_TIM5_Init+0xc8>)
20003eba:	4a26      	ldr	r2, [pc, #152]	; (20003f54 <MX_TIM5_Init+0xd0>)
20003ebc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
20003ebe:	4b23      	ldr	r3, [pc, #140]	; (20003f4c <MX_TIM5_Init+0xc8>)
20003ec0:	2200      	movs	r2, #0
20003ec2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
20003ec4:	4b21      	ldr	r3, [pc, #132]	; (20003f4c <MX_TIM5_Init+0xc8>)
20003ec6:	2280      	movs	r2, #128	; 0x80
20003ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
20003eca:	4820      	ldr	r0, [pc, #128]	; (20003f4c <MX_TIM5_Init+0xc8>)
20003ecc:	f002 fb42 	bl	20006554 <HAL_TIM_PWM_Init>
20003ed0:	4603      	mov	r3, r0
20003ed2:	2b00      	cmp	r3, #0
20003ed4:	d001      	beq.n	20003eda <MX_TIM5_Init+0x56>
  {
    Error_Handler();
20003ed6:	f000 f8c1 	bl	2000405c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
20003eda:	2300      	movs	r3, #0
20003edc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
20003ede:	2300      	movs	r3, #0
20003ee0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
20003ee2:	f107 0320 	add.w	r3, r7, #32
20003ee6:	4619      	mov	r1, r3
20003ee8:	4818      	ldr	r0, [pc, #96]	; (20003f4c <MX_TIM5_Init+0xc8>)
20003eea:	f002 fe51 	bl	20006b90 <HAL_TIMEx_MasterConfigSynchronization>
20003eee:	4603      	mov	r3, r0
20003ef0:	2b00      	cmp	r3, #0
20003ef2:	d001      	beq.n	20003ef8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
20003ef4:	f000 f8b2 	bl	2000405c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
20003ef8:	2360      	movs	r3, #96	; 0x60
20003efa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000;
20003efc:	f246 13a8 	movw	r3, #25000	; 0x61a8
20003f00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
20003f02:	2300      	movs	r3, #0
20003f04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
20003f06:	2300      	movs	r3, #0
20003f08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
20003f0a:	1d3b      	adds	r3, r7, #4
20003f0c:	2204      	movs	r2, #4
20003f0e:	4619      	mov	r1, r3
20003f10:	480e      	ldr	r0, [pc, #56]	; (20003f4c <MX_TIM5_Init+0xc8>)
20003f12:	f002 fb6f 	bl	200065f4 <HAL_TIM_PWM_ConfigChannel>
20003f16:	4603      	mov	r3, r0
20003f18:	2b00      	cmp	r3, #0
20003f1a:	d001      	beq.n	20003f20 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
20003f1c:	f000 f89e 	bl	2000405c <Error_Handler>
  }
  sConfigOC.Pulse = 2100;
20003f20:	f640 0334 	movw	r3, #2100	; 0x834
20003f24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
20003f26:	1d3b      	adds	r3, r7, #4
20003f28:	2208      	movs	r2, #8
20003f2a:	4619      	mov	r1, r3
20003f2c:	4807      	ldr	r0, [pc, #28]	; (20003f4c <MX_TIM5_Init+0xc8>)
20003f2e:	f002 fb61 	bl	200065f4 <HAL_TIM_PWM_ConfigChannel>
20003f32:	4603      	mov	r3, r0
20003f34:	2b00      	cmp	r3, #0
20003f36:	d001      	beq.n	20003f3c <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
20003f38:	f000 f890 	bl	2000405c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
20003f3c:	4803      	ldr	r0, [pc, #12]	; (20003f4c <MX_TIM5_Init+0xc8>)
20003f3e:	f000 f9db 	bl	200042f8 <HAL_TIM_MspPostInit>

}
20003f42:	bf00      	nop
20003f44:	3728      	adds	r7, #40	; 0x28
20003f46:	46bd      	mov	sp, r7
20003f48:	bd80      	pop	{r7, pc}
20003f4a:	bf00      	nop
20003f4c:	20014a7c 	.word	0x20014a7c
20003f50:	40000c00 	.word	0x40000c00
20003f54:	000186a0 	.word	0x000186a0

20003f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
20003f58:	b580      	push	{r7, lr}
20003f5a:	b088      	sub	sp, #32
20003f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20003f5e:	f107 030c 	add.w	r3, r7, #12
20003f62:	2200      	movs	r2, #0
20003f64:	601a      	str	r2, [r3, #0]
20003f66:	605a      	str	r2, [r3, #4]
20003f68:	609a      	str	r2, [r3, #8]
20003f6a:	60da      	str	r2, [r3, #12]
20003f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
20003f6e:	2300      	movs	r3, #0
20003f70:	60bb      	str	r3, [r7, #8]
20003f72:	4b37      	ldr	r3, [pc, #220]	; (20004050 <MX_GPIO_Init+0xf8>)
20003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003f76:	4a36      	ldr	r2, [pc, #216]	; (20004050 <MX_GPIO_Init+0xf8>)
20003f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20003f7c:	6313      	str	r3, [r2, #48]	; 0x30
20003f7e:	4b34      	ldr	r3, [pc, #208]	; (20004050 <MX_GPIO_Init+0xf8>)
20003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
20003f86:	60bb      	str	r3, [r7, #8]
20003f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20003f8a:	2300      	movs	r3, #0
20003f8c:	607b      	str	r3, [r7, #4]
20003f8e:	4b30      	ldr	r3, [pc, #192]	; (20004050 <MX_GPIO_Init+0xf8>)
20003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003f92:	4a2f      	ldr	r2, [pc, #188]	; (20004050 <MX_GPIO_Init+0xf8>)
20003f94:	f043 0301 	orr.w	r3, r3, #1
20003f98:	6313      	str	r3, [r2, #48]	; 0x30
20003f9a:	4b2d      	ldr	r3, [pc, #180]	; (20004050 <MX_GPIO_Init+0xf8>)
20003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003f9e:	f003 0301 	and.w	r3, r3, #1
20003fa2:	607b      	str	r3, [r7, #4]
20003fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
20003fa6:	2300      	movs	r3, #0
20003fa8:	603b      	str	r3, [r7, #0]
20003faa:	4b29      	ldr	r3, [pc, #164]	; (20004050 <MX_GPIO_Init+0xf8>)
20003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003fae:	4a28      	ldr	r2, [pc, #160]	; (20004050 <MX_GPIO_Init+0xf8>)
20003fb0:	f043 0302 	orr.w	r3, r3, #2
20003fb4:	6313      	str	r3, [r2, #48]	; 0x30
20003fb6:	4b26      	ldr	r3, [pc, #152]	; (20004050 <MX_GPIO_Init+0xf8>)
20003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003fba:	f003 0302 	and.w	r3, r3, #2
20003fbe:	603b      	str	r3, [r7, #0]
20003fc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|Led_Display_Pin|CS_Touch_Pin, GPIO_PIN_RESET);
20003fc2:	2200      	movs	r2, #0
20003fc4:	f240 1111 	movw	r1, #273	; 0x111
20003fc8:	4822      	ldr	r0, [pc, #136]	; (20004054 <MX_GPIO_Init+0xfc>)
20003fca:	f001 fa53 	bl	20005474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Data_Comand_Pin|Reset_Display_Pin|CS_Display_Pin, GPIO_PIN_RESET);
20003fce:	2200      	movs	r2, #0
20003fd0:	2107      	movs	r1, #7
20003fd2:	4821      	ldr	r0, [pc, #132]	; (20004058 <MX_GPIO_Init+0x100>)
20003fd4:	f001 fa4e 	bl	20005474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
20003fd8:	2301      	movs	r3, #1
20003fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20003fdc:	2301      	movs	r3, #1
20003fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20003fe0:	2300      	movs	r3, #0
20003fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003fe4:	2303      	movs	r3, #3
20003fe6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
20003fe8:	f107 030c 	add.w	r3, r7, #12
20003fec:	4619      	mov	r1, r3
20003fee:	4819      	ldr	r0, [pc, #100]	; (20004054 <MX_GPIO_Init+0xfc>)
20003ff0:	f001 f8a4 	bl	2000513c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_Display_Pin CS_Touch_Pin */
  GPIO_InitStruct.Pin = Led_Display_Pin|CS_Touch_Pin;
20003ff4:	f44f 7388 	mov.w	r3, #272	; 0x110
20003ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20003ffa:	2301      	movs	r3, #1
20003ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20003ffe:	2300      	movs	r3, #0
20004000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20004002:	2300      	movs	r3, #0
20004004:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20004006:	f107 030c 	add.w	r3, r7, #12
2000400a:	4619      	mov	r1, r3
2000400c:	4811      	ldr	r0, [pc, #68]	; (20004054 <MX_GPIO_Init+0xfc>)
2000400e:	f001 f895 	bl	2000513c <HAL_GPIO_Init>

  /*Configure GPIO pins : Data_Comand_Pin Reset_Display_Pin CS_Display_Pin */
  GPIO_InitStruct.Pin = Data_Comand_Pin|Reset_Display_Pin|CS_Display_Pin;
20004012:	2307      	movs	r3, #7
20004014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20004016:	2301      	movs	r3, #1
20004018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000401a:	2300      	movs	r3, #0
2000401c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2000401e:	2300      	movs	r3, #0
20004020:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20004022:	f107 030c 	add.w	r3, r7, #12
20004026:	4619      	mov	r1, r3
20004028:	480b      	ldr	r0, [pc, #44]	; (20004058 <MX_GPIO_Init+0x100>)
2000402a:	f001 f887 	bl	2000513c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Touch_Pin */
  GPIO_InitStruct.Pin = IRQ_Touch_Pin;
2000402e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20004032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20004034:	2300      	movs	r3, #0
20004036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20004038:	2300      	movs	r3, #0
2000403a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_Touch_GPIO_Port, &GPIO_InitStruct);
2000403c:	f107 030c 	add.w	r3, r7, #12
20004040:	4619      	mov	r1, r3
20004042:	4805      	ldr	r0, [pc, #20]	; (20004058 <MX_GPIO_Init+0x100>)
20004044:	f001 f87a 	bl	2000513c <HAL_GPIO_Init>

}
20004048:	bf00      	nop
2000404a:	3720      	adds	r7, #32
2000404c:	46bd      	mov	sp, r7
2000404e:	bd80      	pop	{r7, pc}
20004050:	40023800 	.word	0x40023800
20004054:	40020000 	.word	0x40020000
20004058:	40020400 	.word	0x40020400

2000405c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
2000405c:	b480      	push	{r7}
2000405e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
20004060:	b672      	cpsid	i
}
20004062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20004064:	e7fe      	b.n	20004064 <Error_Handler+0x8>

20004066 <wholeDevider>:
/**************************************************************************
   @brief     swaps values in variables
    @param    a  num first
    @param    a  num two
**************************************************************************/
int16_t wholeDevider (int16_t data, int16_t devider) {
20004066:	b480      	push	{r7}
20004068:	b087      	sub	sp, #28
2000406a:	af00      	add	r7, sp, #0
2000406c:	4603      	mov	r3, r0
2000406e:	460a      	mov	r2, r1
20004070:	80fb      	strh	r3, [r7, #6]
20004072:	4613      	mov	r3, r2
20004074:	80bb      	strh	r3, [r7, #4]
	int16_t result = 0;
20004076:	2300      	movs	r3, #0
20004078:	82fb      	strh	r3, [r7, #22]
	int16_t max = (data / devider) + 1;
2000407a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000407e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
20004082:	fb92 f3f3 	sdiv	r3, r2, r3
20004086:	b29b      	uxth	r3, r3
20004088:	3301      	adds	r3, #1
2000408a:	b29b      	uxth	r3, r3
2000408c:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < max; i ++) {
2000408e:	2300      	movs	r3, #0
20004090:	613b      	str	r3, [r7, #16]
20004092:	e013      	b.n	200040bc <wholeDevider+0x56>
		if (data <= devider) break;
20004094:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20004098:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
2000409c:	429a      	cmp	r2, r3
2000409e:	dd13      	ble.n	200040c8 <wholeDevider+0x62>
		data -= devider;
200040a0:	88fa      	ldrh	r2, [r7, #6]
200040a2:	88bb      	ldrh	r3, [r7, #4]
200040a4:	1ad3      	subs	r3, r2, r3
200040a6:	b29b      	uxth	r3, r3
200040a8:	80fb      	strh	r3, [r7, #6]
		result ++;
200040aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
200040ae:	b29b      	uxth	r3, r3
200040b0:	3301      	adds	r3, #1
200040b2:	b29b      	uxth	r3, r3
200040b4:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < max; i ++) {
200040b6:	693b      	ldr	r3, [r7, #16]
200040b8:	3301      	adds	r3, #1
200040ba:	613b      	str	r3, [r7, #16]
200040bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
200040c0:	693a      	ldr	r2, [r7, #16]
200040c2:	429a      	cmp	r2, r3
200040c4:	dbe6      	blt.n	20004094 <wholeDevider+0x2e>
200040c6:	e000      	b.n	200040ca <wholeDevider+0x64>
		if (data <= devider) break;
200040c8:	bf00      	nop
	}
	result ++;
200040ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
200040ce:	b29b      	uxth	r3, r3
200040d0:	3301      	adds	r3, #1
200040d2:	b29b      	uxth	r3, r3
200040d4:	82fb      	strh	r3, [r7, #22]
	return result;
200040d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
200040da:	4618      	mov	r0, r3
200040dc:	371c      	adds	r7, #28
200040de:	46bd      	mov	sp, r7
200040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
200040e4:	4770      	bx	lr
	...

200040e8 <buzzerSet>:

void buzzerSet (int16_t time) {
200040e8:	b480      	push	{r7}
200040ea:	b083      	sub	sp, #12
200040ec:	af00      	add	r7, sp, #0
200040ee:	4603      	mov	r3, r0
200040f0:	80fb      	strh	r3, [r7, #6]
	if (!timBuzzer){
200040f2:	4b0a      	ldr	r3, [pc, #40]	; (2000411c <buzzerSet+0x34>)
200040f4:	681b      	ldr	r3, [r3, #0]
200040f6:	2b00      	cmp	r3, #0
200040f8:	d109      	bne.n	2000410e <buzzerSet+0x26>
		timBuzzer = time;
200040fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
200040fe:	4a07      	ldr	r2, [pc, #28]	; (2000411c <buzzerSet+0x34>)
20004100:	6013      	str	r3, [r2, #0]
		BUZER_SET;
20004102:	4b07      	ldr	r3, [pc, #28]	; (20004120 <buzzerSet+0x38>)
20004104:	699b      	ldr	r3, [r3, #24]
20004106:	4a06      	ldr	r2, [pc, #24]	; (20004120 <buzzerSet+0x38>)
20004108:	f043 0301 	orr.w	r3, r3, #1
2000410c:	6193      	str	r3, [r2, #24]
	}
}
2000410e:	bf00      	nop
20004110:	370c      	adds	r7, #12
20004112:	46bd      	mov	sp, r7
20004114:	f85d 7b04 	ldr.w	r7, [sp], #4
20004118:	4770      	bx	lr
2000411a:	bf00      	nop
2000411c:	20014ac8 	.word	0x20014ac8
20004120:	40020000 	.word	0x40020000

20004124 <writeDataToMemory>:

void writeDataToMemory(uint32_t address, uint32_t data) {
20004124:	b5b0      	push	{r4, r5, r7, lr}
20004126:	b082      	sub	sp, #8
20004128:	af00      	add	r7, sp, #0
2000412a:	6078      	str	r0, [r7, #4]
2000412c:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
2000412e:	f000 fe93 	bl	20004e58 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
20004132:	4b09      	ldr	r3, [pc, #36]	; (20004158 <writeDataToMemory+0x34>)
20004134:	22f3      	movs	r2, #243	; 0xf3
20004136:	60da      	str	r2, [r3, #12]
	  //FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
20004138:	683b      	ldr	r3, [r7, #0]
2000413a:	2200      	movs	r2, #0
2000413c:	461c      	mov	r4, r3
2000413e:	4615      	mov	r5, r2
20004140:	4622      	mov	r2, r4
20004142:	462b      	mov	r3, r5
20004144:	6879      	ldr	r1, [r7, #4]
20004146:	2002      	movs	r0, #2
20004148:	f000 fe32 	bl	20004db0 <HAL_FLASH_Program>
	  HAL_FLASH_Lock();
2000414c:	f000 fea6 	bl	20004e9c <HAL_FLASH_Lock>
}
20004150:	bf00      	nop
20004152:	3708      	adds	r7, #8
20004154:	46bd      	mov	sp, r7
20004156:	bdb0      	pop	{r4, r5, r7, pc}
20004158:	40023c00 	.word	0x40023c00

2000415c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
2000415c:	b480      	push	{r7}
2000415e:	b083      	sub	sp, #12
20004160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
20004162:	2300      	movs	r3, #0
20004164:	607b      	str	r3, [r7, #4]
20004166:	4b10      	ldr	r3, [pc, #64]	; (200041a8 <HAL_MspInit+0x4c>)
20004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000416a:	4a0f      	ldr	r2, [pc, #60]	; (200041a8 <HAL_MspInit+0x4c>)
2000416c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20004170:	6453      	str	r3, [r2, #68]	; 0x44
20004172:	4b0d      	ldr	r3, [pc, #52]	; (200041a8 <HAL_MspInit+0x4c>)
20004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20004176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000417a:	607b      	str	r3, [r7, #4]
2000417c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
2000417e:	2300      	movs	r3, #0
20004180:	603b      	str	r3, [r7, #0]
20004182:	4b09      	ldr	r3, [pc, #36]	; (200041a8 <HAL_MspInit+0x4c>)
20004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20004186:	4a08      	ldr	r2, [pc, #32]	; (200041a8 <HAL_MspInit+0x4c>)
20004188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000418c:	6413      	str	r3, [r2, #64]	; 0x40
2000418e:	4b06      	ldr	r3, [pc, #24]	; (200041a8 <HAL_MspInit+0x4c>)
20004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20004192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20004196:	603b      	str	r3, [r7, #0]
20004198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2000419a:	bf00      	nop
2000419c:	370c      	adds	r7, #12
2000419e:	46bd      	mov	sp, r7
200041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
200041a4:	4770      	bx	lr
200041a6:	bf00      	nop
200041a8:	40023800 	.word	0x40023800

200041ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
200041ac:	b580      	push	{r7, lr}
200041ae:	b08c      	sub	sp, #48	; 0x30
200041b0:	af00      	add	r7, sp, #0
200041b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
200041b4:	f107 031c 	add.w	r3, r7, #28
200041b8:	2200      	movs	r2, #0
200041ba:	601a      	str	r2, [r3, #0]
200041bc:	605a      	str	r2, [r3, #4]
200041be:	609a      	str	r2, [r3, #8]
200041c0:	60da      	str	r2, [r3, #12]
200041c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
200041c4:	687b      	ldr	r3, [r7, #4]
200041c6:	681b      	ldr	r3, [r3, #0]
200041c8:	4a32      	ldr	r2, [pc, #200]	; (20004294 <HAL_SPI_MspInit+0xe8>)
200041ca:	4293      	cmp	r3, r2
200041cc:	d12c      	bne.n	20004228 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
200041ce:	2300      	movs	r3, #0
200041d0:	61bb      	str	r3, [r7, #24]
200041d2:	4b31      	ldr	r3, [pc, #196]	; (20004298 <HAL_SPI_MspInit+0xec>)
200041d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200041d6:	4a30      	ldr	r2, [pc, #192]	; (20004298 <HAL_SPI_MspInit+0xec>)
200041d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
200041dc:	6453      	str	r3, [r2, #68]	; 0x44
200041de:	4b2e      	ldr	r3, [pc, #184]	; (20004298 <HAL_SPI_MspInit+0xec>)
200041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200041e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
200041e6:	61bb      	str	r3, [r7, #24]
200041e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
200041ea:	2300      	movs	r3, #0
200041ec:	617b      	str	r3, [r7, #20]
200041ee:	4b2a      	ldr	r3, [pc, #168]	; (20004298 <HAL_SPI_MspInit+0xec>)
200041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200041f2:	4a29      	ldr	r2, [pc, #164]	; (20004298 <HAL_SPI_MspInit+0xec>)
200041f4:	f043 0301 	orr.w	r3, r3, #1
200041f8:	6313      	str	r3, [r2, #48]	; 0x30
200041fa:	4b27      	ldr	r3, [pc, #156]	; (20004298 <HAL_SPI_MspInit+0xec>)
200041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200041fe:	f003 0301 	and.w	r3, r3, #1
20004202:	617b      	str	r3, [r7, #20]
20004204:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
20004206:	23e0      	movs	r3, #224	; 0xe0
20004208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000420a:	2302      	movs	r3, #2
2000420c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000420e:	2300      	movs	r3, #0
20004210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20004212:	2303      	movs	r3, #3
20004214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
20004216:	2305      	movs	r3, #5
20004218:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000421a:	f107 031c 	add.w	r3, r7, #28
2000421e:	4619      	mov	r1, r3
20004220:	481e      	ldr	r0, [pc, #120]	; (2000429c <HAL_SPI_MspInit+0xf0>)
20004222:	f000 ff8b 	bl	2000513c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
20004226:	e031      	b.n	2000428c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
20004228:	687b      	ldr	r3, [r7, #4]
2000422a:	681b      	ldr	r3, [r3, #0]
2000422c:	4a1c      	ldr	r2, [pc, #112]	; (200042a0 <HAL_SPI_MspInit+0xf4>)
2000422e:	4293      	cmp	r3, r2
20004230:	d12c      	bne.n	2000428c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
20004232:	2300      	movs	r3, #0
20004234:	613b      	str	r3, [r7, #16]
20004236:	4b18      	ldr	r3, [pc, #96]	; (20004298 <HAL_SPI_MspInit+0xec>)
20004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000423a:	4a17      	ldr	r2, [pc, #92]	; (20004298 <HAL_SPI_MspInit+0xec>)
2000423c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20004240:	6413      	str	r3, [r2, #64]	; 0x40
20004242:	4b15      	ldr	r3, [pc, #84]	; (20004298 <HAL_SPI_MspInit+0xec>)
20004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20004246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000424a:	613b      	str	r3, [r7, #16]
2000424c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2000424e:	2300      	movs	r3, #0
20004250:	60fb      	str	r3, [r7, #12]
20004252:	4b11      	ldr	r3, [pc, #68]	; (20004298 <HAL_SPI_MspInit+0xec>)
20004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20004256:	4a10      	ldr	r2, [pc, #64]	; (20004298 <HAL_SPI_MspInit+0xec>)
20004258:	f043 0302 	orr.w	r3, r3, #2
2000425c:	6313      	str	r3, [r2, #48]	; 0x30
2000425e:	4b0e      	ldr	r3, [pc, #56]	; (20004298 <HAL_SPI_MspInit+0xec>)
20004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20004262:	f003 0302 	and.w	r3, r3, #2
20004266:	60fb      	str	r3, [r7, #12]
20004268:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
2000426a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
2000426e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20004270:	2302      	movs	r3, #2
20004272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20004274:	2300      	movs	r3, #0
20004276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20004278:	2303      	movs	r3, #3
2000427a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
2000427c:	2305      	movs	r3, #5
2000427e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20004280:	f107 031c 	add.w	r3, r7, #28
20004284:	4619      	mov	r1, r3
20004286:	4807      	ldr	r0, [pc, #28]	; (200042a4 <HAL_SPI_MspInit+0xf8>)
20004288:	f000 ff58 	bl	2000513c <HAL_GPIO_Init>
}
2000428c:	bf00      	nop
2000428e:	3730      	adds	r7, #48	; 0x30
20004290:	46bd      	mov	sp, r7
20004292:	bd80      	pop	{r7, pc}
20004294:	40013000 	.word	0x40013000
20004298:	40023800 	.word	0x40023800
2000429c:	40020000 	.word	0x40020000
200042a0:	40003800 	.word	0x40003800
200042a4:	40020400 	.word	0x40020400

200042a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
200042a8:	b580      	push	{r7, lr}
200042aa:	b084      	sub	sp, #16
200042ac:	af00      	add	r7, sp, #0
200042ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
200042b0:	687b      	ldr	r3, [r7, #4]
200042b2:	681b      	ldr	r3, [r3, #0]
200042b4:	4a0e      	ldr	r2, [pc, #56]	; (200042f0 <HAL_TIM_PWM_MspInit+0x48>)
200042b6:	4293      	cmp	r3, r2
200042b8:	d115      	bne.n	200042e6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
200042ba:	2300      	movs	r3, #0
200042bc:	60fb      	str	r3, [r7, #12]
200042be:	4b0d      	ldr	r3, [pc, #52]	; (200042f4 <HAL_TIM_PWM_MspInit+0x4c>)
200042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200042c2:	4a0c      	ldr	r2, [pc, #48]	; (200042f4 <HAL_TIM_PWM_MspInit+0x4c>)
200042c4:	f043 0308 	orr.w	r3, r3, #8
200042c8:	6413      	str	r3, [r2, #64]	; 0x40
200042ca:	4b0a      	ldr	r3, [pc, #40]	; (200042f4 <HAL_TIM_PWM_MspInit+0x4c>)
200042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200042ce:	f003 0308 	and.w	r3, r3, #8
200042d2:	60fb      	str	r3, [r7, #12]
200042d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
200042d6:	2200      	movs	r2, #0
200042d8:	2100      	movs	r1, #0
200042da:	2032      	movs	r0, #50	; 0x32
200042dc:	f000 fd31 	bl	20004d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
200042e0:	2032      	movs	r0, #50	; 0x32
200042e2:	f000 fd4a 	bl	20004d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
200042e6:	bf00      	nop
200042e8:	3710      	adds	r7, #16
200042ea:	46bd      	mov	sp, r7
200042ec:	bd80      	pop	{r7, pc}
200042ee:	bf00      	nop
200042f0:	40000c00 	.word	0x40000c00
200042f4:	40023800 	.word	0x40023800

200042f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
200042f8:	b580      	push	{r7, lr}
200042fa:	b088      	sub	sp, #32
200042fc:	af00      	add	r7, sp, #0
200042fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20004300:	f107 030c 	add.w	r3, r7, #12
20004304:	2200      	movs	r2, #0
20004306:	601a      	str	r2, [r3, #0]
20004308:	605a      	str	r2, [r3, #4]
2000430a:	609a      	str	r2, [r3, #8]
2000430c:	60da      	str	r2, [r3, #12]
2000430e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
20004310:	687b      	ldr	r3, [r7, #4]
20004312:	681b      	ldr	r3, [r3, #0]
20004314:	4a12      	ldr	r2, [pc, #72]	; (20004360 <HAL_TIM_MspPostInit+0x68>)
20004316:	4293      	cmp	r3, r2
20004318:	d11d      	bne.n	20004356 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
2000431a:	2300      	movs	r3, #0
2000431c:	60bb      	str	r3, [r7, #8]
2000431e:	4b11      	ldr	r3, [pc, #68]	; (20004364 <HAL_TIM_MspPostInit+0x6c>)
20004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20004322:	4a10      	ldr	r2, [pc, #64]	; (20004364 <HAL_TIM_MspPostInit+0x6c>)
20004324:	f043 0301 	orr.w	r3, r3, #1
20004328:	6313      	str	r3, [r2, #48]	; 0x30
2000432a:	4b0e      	ldr	r3, [pc, #56]	; (20004364 <HAL_TIM_MspPostInit+0x6c>)
2000432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000432e:	f003 0301 	and.w	r3, r3, #1
20004332:	60bb      	str	r3, [r7, #8]
20004334:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
20004336:	2306      	movs	r3, #6
20004338:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000433a:	2302      	movs	r3, #2
2000433c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000433e:	2300      	movs	r3, #0
20004340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20004342:	2300      	movs	r3, #0
20004344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
20004346:	2302      	movs	r3, #2
20004348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000434a:	f107 030c 	add.w	r3, r7, #12
2000434e:	4619      	mov	r1, r3
20004350:	4805      	ldr	r0, [pc, #20]	; (20004368 <HAL_TIM_MspPostInit+0x70>)
20004352:	f000 fef3 	bl	2000513c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
20004356:	bf00      	nop
20004358:	3720      	adds	r7, #32
2000435a:	46bd      	mov	sp, r7
2000435c:	bd80      	pop	{r7, pc}
2000435e:	bf00      	nop
20004360:	40000c00 	.word	0x40000c00
20004364:	40023800 	.word	0x40023800
20004368:	40020000 	.word	0x40020000

2000436c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2000436c:	b480      	push	{r7}
2000436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
20004370:	e7fe      	b.n	20004370 <NMI_Handler+0x4>

20004372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20004372:	b480      	push	{r7}
20004374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20004376:	e7fe      	b.n	20004376 <HardFault_Handler+0x4>

20004378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20004378:	b480      	push	{r7}
2000437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000437c:	e7fe      	b.n	2000437c <MemManage_Handler+0x4>

2000437e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000437e:	b480      	push	{r7}
20004380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20004382:	e7fe      	b.n	20004382 <BusFault_Handler+0x4>

20004384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20004384:	b480      	push	{r7}
20004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20004388:	e7fe      	b.n	20004388 <UsageFault_Handler+0x4>

2000438a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2000438a:	b480      	push	{r7}
2000438c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2000438e:	bf00      	nop
20004390:	46bd      	mov	sp, r7
20004392:	f85d 7b04 	ldr.w	r7, [sp], #4
20004396:	4770      	bx	lr

20004398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20004398:	b480      	push	{r7}
2000439a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2000439c:	bf00      	nop
2000439e:	46bd      	mov	sp, r7
200043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
200043a4:	4770      	bx	lr

200043a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
200043a6:	b480      	push	{r7}
200043a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
200043aa:	bf00      	nop
200043ac:	46bd      	mov	sp, r7
200043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
200043b2:	4770      	bx	lr

200043b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
200043b4:	b580      	push	{r7, lr}
200043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (timBigArea) timBigArea --;
200043b8:	4b21      	ldr	r3, [pc, #132]	; (20004440 <SysTick_Handler+0x8c>)
200043ba:	681b      	ldr	r3, [r3, #0]
200043bc:	2b00      	cmp	r3, #0
200043be:	d004      	beq.n	200043ca <SysTick_Handler+0x16>
200043c0:	4b1f      	ldr	r3, [pc, #124]	; (20004440 <SysTick_Handler+0x8c>)
200043c2:	681b      	ldr	r3, [r3, #0]
200043c4:	3b01      	subs	r3, #1
200043c6:	4a1e      	ldr	r2, [pc, #120]	; (20004440 <SysTick_Handler+0x8c>)
200043c8:	6013      	str	r3, [r2, #0]
	if (timButtonPress) timButtonPress --;
200043ca:	4b1e      	ldr	r3, [pc, #120]	; (20004444 <SysTick_Handler+0x90>)
200043cc:	681b      	ldr	r3, [r3, #0]
200043ce:	2b00      	cmp	r3, #0
200043d0:	d004      	beq.n	200043dc <SysTick_Handler+0x28>
200043d2:	4b1c      	ldr	r3, [pc, #112]	; (20004444 <SysTick_Handler+0x90>)
200043d4:	681b      	ldr	r3, [r3, #0]
200043d6:	3b01      	subs	r3, #1
200043d8:	4a1a      	ldr	r2, [pc, #104]	; (20004444 <SysTick_Handler+0x90>)
200043da:	6013      	str	r3, [r2, #0]
	if (timHoldButtonPress) timHoldButtonPress --;
200043dc:	4b1a      	ldr	r3, [pc, #104]	; (20004448 <SysTick_Handler+0x94>)
200043de:	681b      	ldr	r3, [r3, #0]
200043e0:	2b00      	cmp	r3, #0
200043e2:	d004      	beq.n	200043ee <SysTick_Handler+0x3a>
200043e4:	4b18      	ldr	r3, [pc, #96]	; (20004448 <SysTick_Handler+0x94>)
200043e6:	681b      	ldr	r3, [r3, #0]
200043e8:	3b01      	subs	r3, #1
200043ea:	4a17      	ldr	r2, [pc, #92]	; (20004448 <SysTick_Handler+0x94>)
200043ec:	6013      	str	r3, [r2, #0]
	if (timToDisplay) timToDisplay --;
200043ee:	4b17      	ldr	r3, [pc, #92]	; (2000444c <SysTick_Handler+0x98>)
200043f0:	681b      	ldr	r3, [r3, #0]
200043f2:	2b00      	cmp	r3, #0
200043f4:	d004      	beq.n	20004400 <SysTick_Handler+0x4c>
200043f6:	4b15      	ldr	r3, [pc, #84]	; (2000444c <SysTick_Handler+0x98>)
200043f8:	681b      	ldr	r3, [r3, #0]
200043fa:	3b01      	subs	r3, #1
200043fc:	4a13      	ldr	r2, [pc, #76]	; (2000444c <SysTick_Handler+0x98>)
200043fe:	6013      	str	r3, [r2, #0]
	if (timToEndOperation > 1) timToEndOperation --;
20004400:	4b13      	ldr	r3, [pc, #76]	; (20004450 <SysTick_Handler+0x9c>)
20004402:	681b      	ldr	r3, [r3, #0]
20004404:	2b01      	cmp	r3, #1
20004406:	d904      	bls.n	20004412 <SysTick_Handler+0x5e>
20004408:	4b11      	ldr	r3, [pc, #68]	; (20004450 <SysTick_Handler+0x9c>)
2000440a:	681b      	ldr	r3, [r3, #0]
2000440c:	3b01      	subs	r3, #1
2000440e:	4a10      	ldr	r2, [pc, #64]	; (20004450 <SysTick_Handler+0x9c>)
20004410:	6013      	str	r3, [r2, #0]
	if (timBuzzer) timBuzzer --;
20004412:	4b10      	ldr	r3, [pc, #64]	; (20004454 <SysTick_Handler+0xa0>)
20004414:	681b      	ldr	r3, [r3, #0]
20004416:	2b00      	cmp	r3, #0
20004418:	d004      	beq.n	20004424 <SysTick_Handler+0x70>
2000441a:	4b0e      	ldr	r3, [pc, #56]	; (20004454 <SysTick_Handler+0xa0>)
2000441c:	681b      	ldr	r3, [r3, #0]
2000441e:	3b01      	subs	r3, #1
20004420:	4a0c      	ldr	r2, [pc, #48]	; (20004454 <SysTick_Handler+0xa0>)
20004422:	6013      	str	r3, [r2, #0]
	if (timBuzzer == 10) SET_BIT(GPIOA->BSRR, GPIO_BSRR_BR_0);
20004424:	4b0b      	ldr	r3, [pc, #44]	; (20004454 <SysTick_Handler+0xa0>)
20004426:	681b      	ldr	r3, [r3, #0]
20004428:	2b0a      	cmp	r3, #10
2000442a:	d105      	bne.n	20004438 <SysTick_Handler+0x84>
2000442c:	4b0a      	ldr	r3, [pc, #40]	; (20004458 <SysTick_Handler+0xa4>)
2000442e:	699b      	ldr	r3, [r3, #24]
20004430:	4a09      	ldr	r2, [pc, #36]	; (20004458 <SysTick_Handler+0xa4>)
20004432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20004436:	6193      	str	r3, [r2, #24]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
20004438:	f000 fb64 	bl	20004b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2000443c:	bf00      	nop
2000443e:	bd80      	pop	{r7, pc}
20004440:	200149c0 	.word	0x200149c0
20004444:	200149c4 	.word	0x200149c4
20004448:	200149c8 	.word	0x200149c8
2000444c:	20014ad0 	.word	0x20014ad0
20004450:	20014ad4 	.word	0x20014ad4
20004454:	20014ac8 	.word	0x20014ac8
20004458:	40020000 	.word	0x40020000

2000445c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
2000445c:	b480      	push	{r7}
2000445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim5); гавно хал
  /* USER CODE BEGIN TIM5_IRQn 1 */
  CLEAR_BIT(TIM5->SR, TIM_SR_CC2IF|TIM_SR_CC3IF);
20004460:	4b1d      	ldr	r3, [pc, #116]	; (200044d8 <TIM5_IRQHandler+0x7c>)
20004462:	691b      	ldr	r3, [r3, #16]
20004464:	4a1c      	ldr	r2, [pc, #112]	; (200044d8 <TIM5_IRQHandler+0x7c>)
20004466:	f023 030c 	bic.w	r3, r3, #12
2000446a:	6113      	str	r3, [r2, #16]
  if (ParamDevice.changeCount) ParamDevice.changeCount --;
2000446c:	4b1b      	ldr	r3, [pc, #108]	; (200044dc <TIM5_IRQHandler+0x80>)
2000446e:	88db      	ldrh	r3, [r3, #6]
20004470:	2b00      	cmp	r3, #0
20004472:	d005      	beq.n	20004480 <TIM5_IRQHandler+0x24>
20004474:	4b19      	ldr	r3, [pc, #100]	; (200044dc <TIM5_IRQHandler+0x80>)
20004476:	88db      	ldrh	r3, [r3, #6]
20004478:	3b01      	subs	r3, #1
2000447a:	b29a      	uxth	r2, r3
2000447c:	4b17      	ldr	r3, [pc, #92]	; (200044dc <TIM5_IRQHandler+0x80>)
2000447e:	80da      	strh	r2, [r3, #6]
  if(!ParamDevice.changeCount && !ParamDevice.flagInfinity && !READ_FLAG(END_OPERATION, globalFlag)){
20004480:	4b16      	ldr	r3, [pc, #88]	; (200044dc <TIM5_IRQHandler+0x80>)
20004482:	88db      	ldrh	r3, [r3, #6]
20004484:	2b00      	cmp	r3, #0
20004486:	d121      	bne.n	200044cc <TIM5_IRQHandler+0x70>
20004488:	4b14      	ldr	r3, [pc, #80]	; (200044dc <TIM5_IRQHandler+0x80>)
2000448a:	7a9b      	ldrb	r3, [r3, #10]
2000448c:	2b00      	cmp	r3, #0
2000448e:	d11d      	bne.n	200044cc <TIM5_IRQHandler+0x70>
20004490:	4b13      	ldr	r3, [pc, #76]	; (200044e0 <TIM5_IRQHandler+0x84>)
20004492:	681b      	ldr	r3, [r3, #0]
20004494:	f003 0380 	and.w	r3, r3, #128	; 0x80
20004498:	2b00      	cmp	r3, #0
2000449a:	d117      	bne.n	200044cc <TIM5_IRQHandler+0x70>
	  //HAL_TIM_PWM_Stop_IT(&htim5, TIM_CHANNEL_2);
	  //HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);  гавно хал
	  //HAL_TIM_Base_Stop(&htim5);
	  CLEAR_BIT(TIM5->CCER, TIM_CCER_CC2E|TIM_CCER_CC3E);
2000449c:	4b0e      	ldr	r3, [pc, #56]	; (200044d8 <TIM5_IRQHandler+0x7c>)
2000449e:	6a1b      	ldr	r3, [r3, #32]
200044a0:	4a0d      	ldr	r2, [pc, #52]	; (200044d8 <TIM5_IRQHandler+0x7c>)
200044a2:	f423 7388 	bic.w	r3, r3, #272	; 0x110
200044a6:	6213      	str	r3, [r2, #32]
	  CLEAR_BIT(TIM5->DIER, TIM_DIER_CC2IE|TIM_DIER_CC3IE);
200044a8:	4b0b      	ldr	r3, [pc, #44]	; (200044d8 <TIM5_IRQHandler+0x7c>)
200044aa:	68db      	ldr	r3, [r3, #12]
200044ac:	4a0a      	ldr	r2, [pc, #40]	; (200044d8 <TIM5_IRQHandler+0x7c>)
200044ae:	f023 030c 	bic.w	r3, r3, #12
200044b2:	60d3      	str	r3, [r2, #12]
	  CLEAR_BIT(TIM5->CR1, TIM_CR1_CEN);
200044b4:	4b08      	ldr	r3, [pc, #32]	; (200044d8 <TIM5_IRQHandler+0x7c>)
200044b6:	681b      	ldr	r3, [r3, #0]
200044b8:	4a07      	ldr	r2, [pc, #28]	; (200044d8 <TIM5_IRQHandler+0x7c>)
200044ba:	f023 0301 	bic.w	r3, r3, #1
200044be:	6013      	str	r3, [r2, #0]
	  SET_FLAG (END_OPERATION, globalFlag);
200044c0:	4b07      	ldr	r3, [pc, #28]	; (200044e0 <TIM5_IRQHandler+0x84>)
200044c2:	681b      	ldr	r3, [r3, #0]
200044c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
200044c8:	4a05      	ldr	r2, [pc, #20]	; (200044e0 <TIM5_IRQHandler+0x84>)
200044ca:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END TIM5_IRQn 1 */
}
200044cc:	bf00      	nop
200044ce:	46bd      	mov	sp, r7
200044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
200044d4:	4770      	bx	lr
200044d6:	bf00      	nop
200044d8:	40000c00 	.word	0x40000c00
200044dc:	2001476c 	.word	0x2001476c
200044e0:	20014ac4 	.word	0x20014ac4

200044e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
200044e4:	b480      	push	{r7}
200044e6:	af00      	add	r7, sp, #0
  return 1;
200044e8:	2301      	movs	r3, #1
}
200044ea:	4618      	mov	r0, r3
200044ec:	46bd      	mov	sp, r7
200044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200044f2:	4770      	bx	lr

200044f4 <_kill>:

int _kill(int pid, int sig)
{
200044f4:	b580      	push	{r7, lr}
200044f6:	b082      	sub	sp, #8
200044f8:	af00      	add	r7, sp, #0
200044fa:	6078      	str	r0, [r7, #4]
200044fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
200044fe:	f002 fbb5 	bl	20006c6c <__errno>
20004502:	4603      	mov	r3, r0
20004504:	2216      	movs	r2, #22
20004506:	601a      	str	r2, [r3, #0]
  return -1;
20004508:	f04f 33ff 	mov.w	r3, #4294967295
}
2000450c:	4618      	mov	r0, r3
2000450e:	3708      	adds	r7, #8
20004510:	46bd      	mov	sp, r7
20004512:	bd80      	pop	{r7, pc}

20004514 <_exit>:

void _exit (int status)
{
20004514:	b580      	push	{r7, lr}
20004516:	b082      	sub	sp, #8
20004518:	af00      	add	r7, sp, #0
2000451a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
2000451c:	f04f 31ff 	mov.w	r1, #4294967295
20004520:	6878      	ldr	r0, [r7, #4]
20004522:	f7ff ffe7 	bl	200044f4 <_kill>
  while (1) {}    /* Make sure we hang here */
20004526:	e7fe      	b.n	20004526 <_exit+0x12>

20004528 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
20004528:	b580      	push	{r7, lr}
2000452a:	b086      	sub	sp, #24
2000452c:	af00      	add	r7, sp, #0
2000452e:	60f8      	str	r0, [r7, #12]
20004530:	60b9      	str	r1, [r7, #8]
20004532:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
20004534:	2300      	movs	r3, #0
20004536:	617b      	str	r3, [r7, #20]
20004538:	e00a      	b.n	20004550 <_read+0x28>
  {
    *ptr++ = __io_getchar();
2000453a:	f3af 8000 	nop.w
2000453e:	4601      	mov	r1, r0
20004540:	68bb      	ldr	r3, [r7, #8]
20004542:	1c5a      	adds	r2, r3, #1
20004544:	60ba      	str	r2, [r7, #8]
20004546:	b2ca      	uxtb	r2, r1
20004548:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
2000454a:	697b      	ldr	r3, [r7, #20]
2000454c:	3301      	adds	r3, #1
2000454e:	617b      	str	r3, [r7, #20]
20004550:	697a      	ldr	r2, [r7, #20]
20004552:	687b      	ldr	r3, [r7, #4]
20004554:	429a      	cmp	r2, r3
20004556:	dbf0      	blt.n	2000453a <_read+0x12>
  }

  return len;
20004558:	687b      	ldr	r3, [r7, #4]
}
2000455a:	4618      	mov	r0, r3
2000455c:	3718      	adds	r7, #24
2000455e:	46bd      	mov	sp, r7
20004560:	bd80      	pop	{r7, pc}

20004562 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
20004562:	b580      	push	{r7, lr}
20004564:	b086      	sub	sp, #24
20004566:	af00      	add	r7, sp, #0
20004568:	60f8      	str	r0, [r7, #12]
2000456a:	60b9      	str	r1, [r7, #8]
2000456c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
2000456e:	2300      	movs	r3, #0
20004570:	617b      	str	r3, [r7, #20]
20004572:	e009      	b.n	20004588 <_write+0x26>
  {
    __io_putchar(*ptr++);
20004574:	68bb      	ldr	r3, [r7, #8]
20004576:	1c5a      	adds	r2, r3, #1
20004578:	60ba      	str	r2, [r7, #8]
2000457a:	781b      	ldrb	r3, [r3, #0]
2000457c:	4618      	mov	r0, r3
2000457e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
20004582:	697b      	ldr	r3, [r7, #20]
20004584:	3301      	adds	r3, #1
20004586:	617b      	str	r3, [r7, #20]
20004588:	697a      	ldr	r2, [r7, #20]
2000458a:	687b      	ldr	r3, [r7, #4]
2000458c:	429a      	cmp	r2, r3
2000458e:	dbf1      	blt.n	20004574 <_write+0x12>
  }
  return len;
20004590:	687b      	ldr	r3, [r7, #4]
}
20004592:	4618      	mov	r0, r3
20004594:	3718      	adds	r7, #24
20004596:	46bd      	mov	sp, r7
20004598:	bd80      	pop	{r7, pc}

2000459a <_close>:

int _close(int file)
{
2000459a:	b480      	push	{r7}
2000459c:	b083      	sub	sp, #12
2000459e:	af00      	add	r7, sp, #0
200045a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
200045a2:	f04f 33ff 	mov.w	r3, #4294967295
}
200045a6:	4618      	mov	r0, r3
200045a8:	370c      	adds	r7, #12
200045aa:	46bd      	mov	sp, r7
200045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200045b0:	4770      	bx	lr

200045b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
200045b2:	b480      	push	{r7}
200045b4:	b083      	sub	sp, #12
200045b6:	af00      	add	r7, sp, #0
200045b8:	6078      	str	r0, [r7, #4]
200045ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
200045bc:	683b      	ldr	r3, [r7, #0]
200045be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
200045c2:	605a      	str	r2, [r3, #4]
  return 0;
200045c4:	2300      	movs	r3, #0
}
200045c6:	4618      	mov	r0, r3
200045c8:	370c      	adds	r7, #12
200045ca:	46bd      	mov	sp, r7
200045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
200045d0:	4770      	bx	lr

200045d2 <_isatty>:

int _isatty(int file)
{
200045d2:	b480      	push	{r7}
200045d4:	b083      	sub	sp, #12
200045d6:	af00      	add	r7, sp, #0
200045d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
200045da:	2301      	movs	r3, #1
}
200045dc:	4618      	mov	r0, r3
200045de:	370c      	adds	r7, #12
200045e0:	46bd      	mov	sp, r7
200045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200045e6:	4770      	bx	lr

200045e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
200045e8:	b480      	push	{r7}
200045ea:	b085      	sub	sp, #20
200045ec:	af00      	add	r7, sp, #0
200045ee:	60f8      	str	r0, [r7, #12]
200045f0:	60b9      	str	r1, [r7, #8]
200045f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
200045f4:	2300      	movs	r3, #0
}
200045f6:	4618      	mov	r0, r3
200045f8:	3714      	adds	r7, #20
200045fa:	46bd      	mov	sp, r7
200045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20004600:	4770      	bx	lr
	...

20004604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
20004604:	b580      	push	{r7, lr}
20004606:	b086      	sub	sp, #24
20004608:	af00      	add	r7, sp, #0
2000460a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
2000460c:	4a14      	ldr	r2, [pc, #80]	; (20004660 <_sbrk+0x5c>)
2000460e:	4b15      	ldr	r3, [pc, #84]	; (20004664 <_sbrk+0x60>)
20004610:	1ad3      	subs	r3, r2, r3
20004612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
20004614:	697b      	ldr	r3, [r7, #20]
20004616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
20004618:	4b13      	ldr	r3, [pc, #76]	; (20004668 <_sbrk+0x64>)
2000461a:	681b      	ldr	r3, [r3, #0]
2000461c:	2b00      	cmp	r3, #0
2000461e:	d102      	bne.n	20004626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
20004620:	4b11      	ldr	r3, [pc, #68]	; (20004668 <_sbrk+0x64>)
20004622:	4a12      	ldr	r2, [pc, #72]	; (2000466c <_sbrk+0x68>)
20004624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
20004626:	4b10      	ldr	r3, [pc, #64]	; (20004668 <_sbrk+0x64>)
20004628:	681a      	ldr	r2, [r3, #0]
2000462a:	687b      	ldr	r3, [r7, #4]
2000462c:	4413      	add	r3, r2
2000462e:	693a      	ldr	r2, [r7, #16]
20004630:	429a      	cmp	r2, r3
20004632:	d207      	bcs.n	20004644 <_sbrk+0x40>
  {
    errno = ENOMEM;
20004634:	f002 fb1a 	bl	20006c6c <__errno>
20004638:	4603      	mov	r3, r0
2000463a:	220c      	movs	r2, #12
2000463c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
2000463e:	f04f 33ff 	mov.w	r3, #4294967295
20004642:	e009      	b.n	20004658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
20004644:	4b08      	ldr	r3, [pc, #32]	; (20004668 <_sbrk+0x64>)
20004646:	681b      	ldr	r3, [r3, #0]
20004648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
2000464a:	4b07      	ldr	r3, [pc, #28]	; (20004668 <_sbrk+0x64>)
2000464c:	681a      	ldr	r2, [r3, #0]
2000464e:	687b      	ldr	r3, [r7, #4]
20004650:	4413      	add	r3, r2
20004652:	4a05      	ldr	r2, [pc, #20]	; (20004668 <_sbrk+0x64>)
20004654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
20004656:	68fb      	ldr	r3, [r7, #12]
}
20004658:	4618      	mov	r0, r3
2000465a:	3718      	adds	r7, #24
2000465c:	46bd      	mov	sp, r7
2000465e:	bd80      	pop	{r7, pc}
20004660:	20020000 	.word	0x20020000
20004664:	00000400 	.word	0x00000400
20004668:	20014acc 	.word	0x20014acc
2000466c:	20014b10 	.word	0x20014b10

20004670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20004670:	b480      	push	{r7}
20004672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20004674:	4b06      	ldr	r3, [pc, #24]	; (20004690 <SystemInit+0x20>)
20004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000467a:	4a05      	ldr	r2, [pc, #20]	; (20004690 <SystemInit+0x20>)
2000467c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20004680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
20004684:	bf00      	nop
20004686:	46bd      	mov	sp, r7
20004688:	f85d 7b04 	ldr.w	r7, [sp], #4
2000468c:	4770      	bx	lr
2000468e:	bf00      	nop
20004690:	e000ed00 	.word	0xe000ed00

20004694 <setTimAndStart>:
extern struct ChangParamDevice ParamDevice;
extern TIM_HandleTypeDef htim5;
//----------------------- переменные из этого файла ----------------------------------//
uint32_t multiplicationFactor[3] = { 100, 100000, 100000000 };
//------------------------------ функции ---------------------------------------------//
void setTimAndStart(void) {
20004694:	b480      	push	{r7}
20004696:	af00      	add	r7, sp, #0
	ParamDevice.changeCount = ParamDevice.count;
20004698:	4b48      	ldr	r3, [pc, #288]	; (200047bc <setTimAndStart+0x128>)
2000469a:	889a      	ldrh	r2, [r3, #4]
2000469c:	4b47      	ldr	r3, [pc, #284]	; (200047bc <setTimAndStart+0x128>)
2000469e:	80da      	strh	r2, [r3, #6]
	CLEAR_BIT(TIM5->SR, TIM_SR_CC2IF|TIM_SR_CC3IF); // очищаем флаг
200046a0:	4b47      	ldr	r3, [pc, #284]	; (200047c0 <setTimAndStart+0x12c>)
200046a2:	691b      	ldr	r3, [r3, #16]
200046a4:	4a46      	ldr	r2, [pc, #280]	; (200047c0 <setTimAndStart+0x12c>)
200046a6:	f023 030c 	bic.w	r3, r3, #12
200046aa:	6113      	str	r3, [r2, #16]
	//__HAL_TIM_CLEAR_FLAG(&htim5, TIM_SR_UIF);     // очищаем флаг
	TIM5->ARR = (ParamDevice.impuls * multiplicationFactor[ParamDevice.unitImpuls]) + (ParamDevice.pause * multiplicationFactor[ParamDevice.unitPause]);
200046ac:	4b43      	ldr	r3, [pc, #268]	; (200047bc <setTimAndStart+0x128>)
200046ae:	881b      	ldrh	r3, [r3, #0]
200046b0:	461a      	mov	r2, r3
200046b2:	4b42      	ldr	r3, [pc, #264]	; (200047bc <setTimAndStart+0x128>)
200046b4:	7a1b      	ldrb	r3, [r3, #8]
200046b6:	4619      	mov	r1, r3
200046b8:	4b42      	ldr	r3, [pc, #264]	; (200047c4 <setTimAndStart+0x130>)
200046ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
200046be:	fb03 f202 	mul.w	r2, r3, r2
200046c2:	4b3e      	ldr	r3, [pc, #248]	; (200047bc <setTimAndStart+0x128>)
200046c4:	885b      	ldrh	r3, [r3, #2]
200046c6:	4619      	mov	r1, r3
200046c8:	4b3c      	ldr	r3, [pc, #240]	; (200047bc <setTimAndStart+0x128>)
200046ca:	7a5b      	ldrb	r3, [r3, #9]
200046cc:	4618      	mov	r0, r3
200046ce:	4b3d      	ldr	r3, [pc, #244]	; (200047c4 <setTimAndStart+0x130>)
200046d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
200046d4:	fb01 f303 	mul.w	r3, r1, r3
200046d8:	4939      	ldr	r1, [pc, #228]	; (200047c0 <setTimAndStart+0x12c>)
200046da:	4413      	add	r3, r2
200046dc:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM5->CCR2 = (ParamDevice.impuls * multiplicationFactor[ParamDevice.unitImpuls]);
200046de:	4b37      	ldr	r3, [pc, #220]	; (200047bc <setTimAndStart+0x128>)
200046e0:	881b      	ldrh	r3, [r3, #0]
200046e2:	4619      	mov	r1, r3
200046e4:	4b35      	ldr	r3, [pc, #212]	; (200047bc <setTimAndStart+0x128>)
200046e6:	7a1b      	ldrb	r3, [r3, #8]
200046e8:	461a      	mov	r2, r3
200046ea:	4b36      	ldr	r3, [pc, #216]	; (200047c4 <setTimAndStart+0x130>)
200046ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200046f0:	4a33      	ldr	r2, [pc, #204]	; (200047c0 <setTimAndStart+0x12c>)
200046f2:	fb01 f303 	mul.w	r3, r1, r3
200046f6:	6393      	str	r3, [r2, #56]	; 0x38
	TIM5->CCR3 = (ParamDevice.impuls * multiplicationFactor[ParamDevice.unitImpuls]);
200046f8:	4b30      	ldr	r3, [pc, #192]	; (200047bc <setTimAndStart+0x128>)
200046fa:	881b      	ldrh	r3, [r3, #0]
200046fc:	4619      	mov	r1, r3
200046fe:	4b2f      	ldr	r3, [pc, #188]	; (200047bc <setTimAndStart+0x128>)
20004700:	7a1b      	ldrb	r3, [r3, #8]
20004702:	461a      	mov	r2, r3
20004704:	4b2f      	ldr	r3, [pc, #188]	; (200047c4 <setTimAndStart+0x130>)
20004706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000470a:	4a2d      	ldr	r2, [pc, #180]	; (200047c0 <setTimAndStart+0x12c>)
2000470c:	fb01 f303 	mul.w	r3, r1, r3
20004710:	63d3      	str	r3, [r2, #60]	; 0x3c
	//TIM5->CNT = TIM5->ARR;
	TIM5->CNT = 0;
20004712:	4b2b      	ldr	r3, [pc, #172]	; (200047c0 <setTimAndStart+0x12c>)
20004714:	2200      	movs	r2, #0
20004716:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(TIM5->EGR, TIM_EGR_UG);  // применим данные
20004718:	4b29      	ldr	r3, [pc, #164]	; (200047c0 <setTimAndStart+0x12c>)
2000471a:	695b      	ldr	r3, [r3, #20]
2000471c:	4a28      	ldr	r2, [pc, #160]	; (200047c0 <setTimAndStart+0x12c>)
2000471e:	f043 0301 	orr.w	r3, r3, #1
20004722:	6153      	str	r3, [r2, #20]
	if (!ParamDevice.changeCount) {
20004724:	4b25      	ldr	r3, [pc, #148]	; (200047bc <setTimAndStart+0x128>)
20004726:	88db      	ldrh	r3, [r3, #6]
20004728:	2b00      	cmp	r3, #0
2000472a:	d102      	bne.n	20004732 <setTimAndStart+0x9e>
		ParamDevice.flagInfinity = true;
2000472c:	4b23      	ldr	r3, [pc, #140]	; (200047bc <setTimAndStart+0x128>)
2000472e:	2201      	movs	r2, #1
20004730:	729a      	strb	r2, [r3, #10]
	}
	if (ParamDevice.PNPTranzistor && !ParamDevice.NPNTranzistor) {
20004732:	4b22      	ldr	r3, [pc, #136]	; (200047bc <setTimAndStart+0x128>)
20004734:	7b1b      	ldrb	r3, [r3, #12]
20004736:	2b00      	cmp	r3, #0
20004738:	d013      	beq.n	20004762 <setTimAndStart+0xce>
2000473a:	4b20      	ldr	r3, [pc, #128]	; (200047bc <setTimAndStart+0x128>)
2000473c:	7adb      	ldrb	r3, [r3, #11]
2000473e:	2b00      	cmp	r3, #0
20004740:	d10f      	bne.n	20004762 <setTimAndStart+0xce>
		if (!ParamDevice.flagInfinity) SET_BIT(TIM5->DIER, TIM_DIER_CC3IE);
20004742:	4b1e      	ldr	r3, [pc, #120]	; (200047bc <setTimAndStart+0x128>)
20004744:	7a9b      	ldrb	r3, [r3, #10]
20004746:	2b00      	cmp	r3, #0
20004748:	d105      	bne.n	20004756 <setTimAndStart+0xc2>
2000474a:	4b1d      	ldr	r3, [pc, #116]	; (200047c0 <setTimAndStart+0x12c>)
2000474c:	68db      	ldr	r3, [r3, #12]
2000474e:	4a1c      	ldr	r2, [pc, #112]	; (200047c0 <setTimAndStart+0x12c>)
20004750:	f043 0308 	orr.w	r3, r3, #8
20004754:	60d3      	str	r3, [r2, #12]
		SET_BIT(TIM5->CCER, TIM_CCER_CC3E);
20004756:	4b1a      	ldr	r3, [pc, #104]	; (200047c0 <setTimAndStart+0x12c>)
20004758:	6a1b      	ldr	r3, [r3, #32]
2000475a:	4a19      	ldr	r2, [pc, #100]	; (200047c0 <setTimAndStart+0x12c>)
2000475c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20004760:	6213      	str	r3, [r2, #32]
		//HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_3);
	}
	if (ParamDevice.NPNTranzistor) {
20004762:	4b16      	ldr	r3, [pc, #88]	; (200047bc <setTimAndStart+0x128>)
20004764:	7adb      	ldrb	r3, [r3, #11]
20004766:	2b00      	cmp	r3, #0
20004768:	d00f      	beq.n	2000478a <setTimAndStart+0xf6>
		if (!ParamDevice.flagInfinity) SET_BIT(TIM5->DIER, TIM_DIER_CC2IE);
2000476a:	4b14      	ldr	r3, [pc, #80]	; (200047bc <setTimAndStart+0x128>)
2000476c:	7a9b      	ldrb	r3, [r3, #10]
2000476e:	2b00      	cmp	r3, #0
20004770:	d105      	bne.n	2000477e <setTimAndStart+0xea>
20004772:	4b13      	ldr	r3, [pc, #76]	; (200047c0 <setTimAndStart+0x12c>)
20004774:	68db      	ldr	r3, [r3, #12]
20004776:	4a12      	ldr	r2, [pc, #72]	; (200047c0 <setTimAndStart+0x12c>)
20004778:	f043 0304 	orr.w	r3, r3, #4
2000477c:	60d3      	str	r3, [r2, #12]
		SET_BIT(TIM5->CCER, TIM_CCER_CC2E);
2000477e:	4b10      	ldr	r3, [pc, #64]	; (200047c0 <setTimAndStart+0x12c>)
20004780:	6a1b      	ldr	r3, [r3, #32]
20004782:	4a0f      	ldr	r2, [pc, #60]	; (200047c0 <setTimAndStart+0x12c>)
20004784:	f043 0310 	orr.w	r3, r3, #16
20004788:	6213      	str	r3, [r2, #32]
		//HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_2);
	}
	if (ParamDevice.PNPTranzistor && ParamDevice.NPNTranzistor) {
2000478a:	4b0c      	ldr	r3, [pc, #48]	; (200047bc <setTimAndStart+0x128>)
2000478c:	7b1b      	ldrb	r3, [r3, #12]
2000478e:	2b00      	cmp	r3, #0
20004790:	d009      	beq.n	200047a6 <setTimAndStart+0x112>
20004792:	4b0a      	ldr	r3, [pc, #40]	; (200047bc <setTimAndStart+0x128>)
20004794:	7adb      	ldrb	r3, [r3, #11]
20004796:	2b00      	cmp	r3, #0
20004798:	d005      	beq.n	200047a6 <setTimAndStart+0x112>
		SET_BIT(TIM5->CCER, TIM_CCER_CC3E);
2000479a:	4b09      	ldr	r3, [pc, #36]	; (200047c0 <setTimAndStart+0x12c>)
2000479c:	6a1b      	ldr	r3, [r3, #32]
2000479e:	4a08      	ldr	r2, [pc, #32]	; (200047c0 <setTimAndStart+0x12c>)
200047a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200047a4:	6213      	str	r3, [r2, #32]
		//HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
	}
	SET_BIT(TIM5->CR1, TIM_CR1_CEN);  // запустим таймер
200047a6:	4b06      	ldr	r3, [pc, #24]	; (200047c0 <setTimAndStart+0x12c>)
200047a8:	681b      	ldr	r3, [r3, #0]
200047aa:	4a05      	ldr	r2, [pc, #20]	; (200047c0 <setTimAndStart+0x12c>)
200047ac:	f043 0301 	orr.w	r3, r3, #1
200047b0:	6013      	str	r3, [r2, #0]
	//HAL_TIM_Base_Start(&htim5); гавно хал
}
200047b2:	bf00      	nop
200047b4:	46bd      	mov	sp, r7
200047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200047ba:	4770      	bx	lr
200047bc:	2001476c 	.word	0x2001476c
200047c0:	40000c00 	.word	0x40000c00
200047c4:	20014760 	.word	0x20014760

200047c8 <timerOff>:

void timerOff(void) {
200047c8:	b480      	push	{r7}
200047ca:	af00      	add	r7, sp, #0
	CLEAR_BIT(TIM5->CCER, TIM_CCER_CC2E|TIM_CCER_CC3E);
200047cc:	4b0c      	ldr	r3, [pc, #48]	; (20004800 <timerOff+0x38>)
200047ce:	6a1b      	ldr	r3, [r3, #32]
200047d0:	4a0b      	ldr	r2, [pc, #44]	; (20004800 <timerOff+0x38>)
200047d2:	f423 7388 	bic.w	r3, r3, #272	; 0x110
200047d6:	6213      	str	r3, [r2, #32]
	CLEAR_BIT(TIM5->DIER, TIM_DIER_CC2IE|TIM_DIER_CC3IE);
200047d8:	4b09      	ldr	r3, [pc, #36]	; (20004800 <timerOff+0x38>)
200047da:	68db      	ldr	r3, [r3, #12]
200047dc:	4a08      	ldr	r2, [pc, #32]	; (20004800 <timerOff+0x38>)
200047de:	f023 030c 	bic.w	r3, r3, #12
200047e2:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(TIM5->CR1, TIM_CR1_CEN);
200047e4:	4b06      	ldr	r3, [pc, #24]	; (20004800 <timerOff+0x38>)
200047e6:	681b      	ldr	r3, [r3, #0]
200047e8:	4a05      	ldr	r2, [pc, #20]	; (20004800 <timerOff+0x38>)
200047ea:	f023 0301 	bic.w	r3, r3, #1
200047ee:	6013      	str	r3, [r2, #0]
	ParamDevice.flagInfinity = false;
200047f0:	4b04      	ldr	r3, [pc, #16]	; (20004804 <timerOff+0x3c>)
200047f2:	2200      	movs	r2, #0
200047f4:	729a      	strb	r2, [r3, #10]
}
200047f6:	bf00      	nop
200047f8:	46bd      	mov	sp, r7
200047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
200047fe:	4770      	bx	lr
20004800:	40000c00 	.word	0x40000c00
20004804:	2001476c 	.word	0x2001476c

20004808 <doWork>:
uint32_t timToDisplay = 0;
uint32_t timToEndOperation = 0;
uint32_t* memADR = (uint32_t*)ADR_DATA_MIN_X;
//------------------------------ функции ---------------------------------------------//

void doWork (void){
20004808:	b580      	push	{r7, lr}
2000480a:	af00      	add	r7, sp, #0
	startDisplay ();
2000480c:	f7fe fa5e 	bl	20002ccc <startDisplay>
	calibration();
20004810:	f000 f896 	bl	20004940 <calibration>
	ILI9341_ToucInit();
20004814:	f7fd fdda 	bl	200023cc <ILI9341_ToucInit>
	screenSaver();
20004818:	f7fe f8ba 	bl	20002990 <screenSaver>
	mainDisplayPrint();
2000481c:	f7fe fcb2 	bl	20003184 <mainDisplayPrint>
}
20004820:	bf00      	nop
20004822:	bd80      	pop	{r7, pc}

20004824 <Work>:

void Work (void){
20004824:	b580      	push	{r7, lr}
20004826:	af00      	add	r7, sp, #0
	checkButtonPress();
20004828:	f7ff f8b4 	bl	20003994 <checkButtonPress>
	if (ParamDevice.power && !READ_FLAG(WORKING, globalFlag)){
2000482c:	4b41      	ldr	r3, [pc, #260]	; (20004934 <Work+0x110>)
2000482e:	7b5b      	ldrb	r3, [r3, #13]
20004830:	2b00      	cmp	r3, #0
20004832:	d00d      	beq.n	20004850 <Work+0x2c>
20004834:	4b40      	ldr	r3, [pc, #256]	; (20004938 <Work+0x114>)
20004836:	681b      	ldr	r3, [r3, #0]
20004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000483c:	2b00      	cmp	r3, #0
2000483e:	d107      	bne.n	20004850 <Work+0x2c>
		SET_FLAG(WORKING, globalFlag);
20004840:	4b3d      	ldr	r3, [pc, #244]	; (20004938 <Work+0x114>)
20004842:	681b      	ldr	r3, [r3, #0]
20004844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20004848:	4a3b      	ldr	r2, [pc, #236]	; (20004938 <Work+0x114>)
2000484a:	6013      	str	r3, [r2, #0]
		setTimAndStart ();
2000484c:	f7ff ff22 	bl	20004694 <setTimAndStart>
	}
	if (READ_FLAG(END_OPERATION, globalFlag) && READ_FLAG(WORKING, globalFlag)){
20004850:	4b39      	ldr	r3, [pc, #228]	; (20004938 <Work+0x114>)
20004852:	681b      	ldr	r3, [r3, #0]
20004854:	f003 0380 	and.w	r3, r3, #128	; 0x80
20004858:	2b00      	cmp	r3, #0
2000485a:	d015      	beq.n	20004888 <Work+0x64>
2000485c:	4b36      	ldr	r3, [pc, #216]	; (20004938 <Work+0x114>)
2000485e:	681b      	ldr	r3, [r3, #0]
20004860:	f403 7380 	and.w	r3, r3, #256	; 0x100
20004864:	2b00      	cmp	r3, #0
20004866:	d00f      	beq.n	20004888 <Work+0x64>
		RESET_FLAG(END_OPERATION, globalFlag);
20004868:	4b33      	ldr	r3, [pc, #204]	; (20004938 <Work+0x114>)
2000486a:	681b      	ldr	r3, [r3, #0]
2000486c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
20004870:	4a31      	ldr	r2, [pc, #196]	; (20004938 <Work+0x114>)
20004872:	6013      	str	r3, [r2, #0]
		endOperationWindow (true);
20004874:	2001      	movs	r0, #1
20004876:	f7fe fd7d 	bl	20003374 <endOperationWindow>
		timToEndOperation = 1000;
2000487a:	4b30      	ldr	r3, [pc, #192]	; (2000493c <Work+0x118>)
2000487c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
20004880:	601a      	str	r2, [r3, #0]
		buzzerSet(100);
20004882:	2064      	movs	r0, #100	; 0x64
20004884:	f7ff fc30 	bl	200040e8 <buzzerSet>
	}
	if (READ_FLAG(WORKING, globalFlag) && timToEndOperation == 1){
20004888:	4b2b      	ldr	r3, [pc, #172]	; (20004938 <Work+0x114>)
2000488a:	681b      	ldr	r3, [r3, #0]
2000488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20004890:	2b00      	cmp	r3, #0
20004892:	d014      	beq.n	200048be <Work+0x9a>
20004894:	4b29      	ldr	r3, [pc, #164]	; (2000493c <Work+0x118>)
20004896:	681b      	ldr	r3, [r3, #0]
20004898:	2b01      	cmp	r3, #1
2000489a:	d110      	bne.n	200048be <Work+0x9a>
		timToEndOperation = 0;
2000489c:	4b27      	ldr	r3, [pc, #156]	; (2000493c <Work+0x118>)
2000489e:	2200      	movs	r2, #0
200048a0:	601a      	str	r2, [r3, #0]
		RESET_FLAG(WORKING, globalFlag);
200048a2:	4b25      	ldr	r3, [pc, #148]	; (20004938 <Work+0x114>)
200048a4:	681b      	ldr	r3, [r3, #0]
200048a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
200048aa:	4a23      	ldr	r2, [pc, #140]	; (20004938 <Work+0x114>)
200048ac:	6013      	str	r3, [r2, #0]
		externalPowerOff ();
200048ae:	f7fe fde5 	bl	2000347c <externalPowerOff>
		ParamDevice.power = false;
200048b2:	4b20      	ldr	r3, [pc, #128]	; (20004934 <Work+0x110>)
200048b4:	2200      	movs	r2, #0
200048b6:	735a      	strb	r2, [r3, #13]
		endOperationWindow (false);
200048b8:	2000      	movs	r0, #0
200048ba:	f7fe fd5b 	bl	20003374 <endOperationWindow>
	}
	if (!ParamDevice.power && READ_FLAG(WORKING, globalFlag) && ParamDevice.flagInfinity){
200048be:	4b1d      	ldr	r3, [pc, #116]	; (20004934 <Work+0x110>)
200048c0:	7b5b      	ldrb	r3, [r3, #13]
200048c2:	2b00      	cmp	r3, #0
200048c4:	d111      	bne.n	200048ea <Work+0xc6>
200048c6:	4b1c      	ldr	r3, [pc, #112]	; (20004938 <Work+0x114>)
200048c8:	681b      	ldr	r3, [r3, #0]
200048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
200048ce:	2b00      	cmp	r3, #0
200048d0:	d00b      	beq.n	200048ea <Work+0xc6>
200048d2:	4b18      	ldr	r3, [pc, #96]	; (20004934 <Work+0x110>)
200048d4:	7a9b      	ldrb	r3, [r3, #10]
200048d6:	2b00      	cmp	r3, #0
200048d8:	d007      	beq.n	200048ea <Work+0xc6>
		timerOff ();
200048da:	f7ff ff75 	bl	200047c8 <timerOff>
		RESET_FLAG(WORKING, globalFlag);
200048de:	4b16      	ldr	r3, [pc, #88]	; (20004938 <Work+0x114>)
200048e0:	681b      	ldr	r3, [r3, #0]
200048e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
200048e6:	4a14      	ldr	r2, [pc, #80]	; (20004938 <Work+0x114>)
200048e8:	6013      	str	r3, [r2, #0]
	}
	if (!ParamDevice.power && READ_FLAG(WORKING, globalFlag) && !ParamDevice.flagInfinity && !READ_FLAG(END_OPERATION, globalFlag)){
200048ea:	4b12      	ldr	r3, [pc, #72]	; (20004934 <Work+0x110>)
200048ec:	7b5b      	ldrb	r3, [r3, #13]
200048ee:	2b00      	cmp	r3, #0
200048f0:	d11d      	bne.n	2000492e <Work+0x10a>
200048f2:	4b11      	ldr	r3, [pc, #68]	; (20004938 <Work+0x114>)
200048f4:	681b      	ldr	r3, [r3, #0]
200048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
200048fa:	2b00      	cmp	r3, #0
200048fc:	d017      	beq.n	2000492e <Work+0x10a>
200048fe:	4b0d      	ldr	r3, [pc, #52]	; (20004934 <Work+0x110>)
20004900:	7a9b      	ldrb	r3, [r3, #10]
20004902:	2b00      	cmp	r3, #0
20004904:	d113      	bne.n	2000492e <Work+0x10a>
20004906:	4b0c      	ldr	r3, [pc, #48]	; (20004938 <Work+0x114>)
20004908:	681b      	ldr	r3, [r3, #0]
2000490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000490e:	2b00      	cmp	r3, #0
20004910:	d10d      	bne.n	2000492e <Work+0x10a>
		timerOff();
20004912:	f7ff ff59 	bl	200047c8 <timerOff>
		RESET_FLAG(WORKING, globalFlag);
20004916:	4b08      	ldr	r3, [pc, #32]	; (20004938 <Work+0x114>)
20004918:	681b      	ldr	r3, [r3, #0]
2000491a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2000491e:	4a06      	ldr	r2, [pc, #24]	; (20004938 <Work+0x114>)
20004920:	6013      	str	r3, [r2, #0]
		RESET_FLAG(END_OPERATION, globalFlag);
20004922:	4b05      	ldr	r3, [pc, #20]	; (20004938 <Work+0x114>)
20004924:	681b      	ldr	r3, [r3, #0]
20004926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2000492a:	4a03      	ldr	r2, [pc, #12]	; (20004938 <Work+0x114>)
2000492c:	6013      	str	r3, [r2, #0]
	}
}
2000492e:	bf00      	nop
20004930:	bd80      	pop	{r7, pc}
20004932:	bf00      	nop
20004934:	2001476c 	.word	0x2001476c
20004938:	20014ac4 	.word	0x20014ac4
2000493c:	20014ad4 	.word	0x20014ad4

20004940 <calibration>:

void calibration (void){
20004940:	b580      	push	{r7, lr}
20004942:	af00      	add	r7, sp, #0
	if (*memADR == 0xFFFFFFFF) {
20004944:	4b30      	ldr	r3, [pc, #192]	; (20004a08 <calibration+0xc8>)
20004946:	681b      	ldr	r3, [r3, #0]
20004948:	681b      	ldr	r3, [r3, #0]
2000494a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000494e:	d159      	bne.n	20004a04 <calibration+0xc4>
		reset:
20004950:	bf00      	nop
		GUICalibration (LEFTUP);
20004952:	2000      	movs	r0, #0
20004954:	f7fe f870 	bl	20002a38 <GUICalibration>
		setOK (false);
20004958:	2000      	movs	r0, #0
2000495a:	f7fe f987 	bl	20002c6c <setOK>
		calibTouch(LEFTUP);
2000495e:	2000      	movs	r0, #0
20004960:	f7fd fec8 	bl	200026f4 <calibTouch>
		setOK (true);
20004964:	2001      	movs	r0, #1
20004966:	f7fe f981 	bl	20002c6c <setOK>
		HAL_Delay(1000);
2000496a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
2000496e:	f000 f8e9 	bl	20004b44 <HAL_Delay>

		GUICalibration (RIGHTUP);
20004972:	2001      	movs	r0, #1
20004974:	f7fe f860 	bl	20002a38 <GUICalibration>
		setOK (false);
20004978:	2000      	movs	r0, #0
2000497a:	f7fe f977 	bl	20002c6c <setOK>
		calibTouch(RIGHTUP);
2000497e:	2001      	movs	r0, #1
20004980:	f7fd feb8 	bl	200026f4 <calibTouch>
		setOK (true);
20004984:	2001      	movs	r0, #1
20004986:	f7fe f971 	bl	20002c6c <setOK>
		HAL_Delay(1000);
2000498a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
2000498e:	f000 f8d9 	bl	20004b44 <HAL_Delay>

		GUICalibration (LEFTDOWN);
20004992:	2002      	movs	r0, #2
20004994:	f7fe f850 	bl	20002a38 <GUICalibration>
		setOK (false);
20004998:	2000      	movs	r0, #0
2000499a:	f7fe f967 	bl	20002c6c <setOK>
		calibTouch(LEFTDOWN);
2000499e:	2002      	movs	r0, #2
200049a0:	f7fd fea8 	bl	200026f4 <calibTouch>
		setOK (true);
200049a4:	2001      	movs	r0, #1
200049a6:	f7fe f961 	bl	20002c6c <setOK>
		HAL_Delay(1000);
200049aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
200049ae:	f000 f8c9 	bl	20004b44 <HAL_Delay>

		GUICalibration (RIGHTDOWN);
200049b2:	2003      	movs	r0, #3
200049b4:	f7fe f840 	bl	20002a38 <GUICalibration>
		setOK (false);
200049b8:	2000      	movs	r0, #0
200049ba:	f7fe f957 	bl	20002c6c <setOK>
		calibTouch(RIGHTDOWN);
200049be:	2003      	movs	r0, #3
200049c0:	f7fd fe98 	bl	200026f4 <calibTouch>
		setOK (true);
200049c4:	2001      	movs	r0, #1
200049c6:	f7fe f951 	bl	20002c6c <setOK>
		HAL_Delay(1000);
200049ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
200049ce:	f000 f8b9 	bl	20004b44 <HAL_Delay>

		GUICalibration (CHECKCALIB);
200049d2:	2004      	movs	r0, #4
200049d4:	f7fe f830 	bl	20002a38 <GUICalibration>
		if (calibTouch(CHECKCALIB)) {
200049d8:	2004      	movs	r0, #4
200049da:	f7fd fe8b 	bl	200026f4 <calibTouch>
200049de:	4603      	mov	r3, r0
200049e0:	2b00      	cmp	r3, #0
200049e2:	d007      	beq.n	200049f4 <calibration+0xb4>
			GUICalibration(CALIBOK);
200049e4:	2005      	movs	r0, #5
200049e6:	f7fe f827 	bl	20002a38 <GUICalibration>
			HAL_Delay(1000);
200049ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
200049ee:	f000 f8a9 	bl	20004b44 <HAL_Delay>
			GUICalibration(ERRCALIB);
			HAL_Delay(1000);
			goto reset;
		}
	}
}
200049f2:	e007      	b.n	20004a04 <calibration+0xc4>
			GUICalibration(ERRCALIB);
200049f4:	2006      	movs	r0, #6
200049f6:	f7fe f81f 	bl	20002a38 <GUICalibration>
			HAL_Delay(1000);
200049fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
200049fe:	f000 f8a1 	bl	20004b44 <HAL_Delay>
			goto reset;
20004a02:	e7a6      	b.n	20004952 <calibration+0x12>
}
20004a04:	bf00      	nop
20004a06:	bd80      	pop	{r7, pc}
20004a08:	2001477c 	.word	0x2001477c

20004a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
20004a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 20004a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20004a10:	480d      	ldr	r0, [pc, #52]	; (20004a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
20004a12:	490e      	ldr	r1, [pc, #56]	; (20004a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
20004a14:	4a0e      	ldr	r2, [pc, #56]	; (20004a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
20004a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
20004a18:	e002      	b.n	20004a20 <LoopCopyDataInit>

20004a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20004a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20004a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20004a1e:	3304      	adds	r3, #4

20004a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20004a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20004a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
20004a24:	d3f9      	bcc.n	20004a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20004a26:	4a0b      	ldr	r2, [pc, #44]	; (20004a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
20004a28:	4c0b      	ldr	r4, [pc, #44]	; (20004a58 <LoopFillZerobss+0x26>)
  movs r3, #0
20004a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
20004a2c:	e001      	b.n	20004a32 <LoopFillZerobss>

20004a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20004a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20004a30:	3204      	adds	r2, #4

20004a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20004a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
20004a34:	d3fb      	bcc.n	20004a2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
20004a36:	f7ff fe1b 	bl	20004670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20004a3a:	f002 f91d 	bl	20006c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20004a3e:	f7ff f935 	bl	20003cac <main>
  bx  lr    
20004a42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
20004a44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
20004a48:	2001472c 	.word	0x2001472c
  ldr r1, =_edata
20004a4c:	20014958 	.word	0x20014958
  ldr r2, =_sidata
20004a50:	2001472c 	.word	0x2001472c
  ldr r2, =_sbss
20004a54:	20014958 	.word	0x20014958
  ldr r4, =_ebss
20004a58:	20014b0c 	.word	0x20014b0c

20004a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20004a5c:	e7fe      	b.n	20004a5c <ADC_IRQHandler>
	...

20004a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20004a60:	b580      	push	{r7, lr}
20004a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20004a64:	4b0e      	ldr	r3, [pc, #56]	; (20004aa0 <HAL_Init+0x40>)
20004a66:	681b      	ldr	r3, [r3, #0]
20004a68:	4a0d      	ldr	r2, [pc, #52]	; (20004aa0 <HAL_Init+0x40>)
20004a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20004a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
20004a70:	4b0b      	ldr	r3, [pc, #44]	; (20004aa0 <HAL_Init+0x40>)
20004a72:	681b      	ldr	r3, [r3, #0]
20004a74:	4a0a      	ldr	r2, [pc, #40]	; (20004aa0 <HAL_Init+0x40>)
20004a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20004a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20004a7c:	4b08      	ldr	r3, [pc, #32]	; (20004aa0 <HAL_Init+0x40>)
20004a7e:	681b      	ldr	r3, [r3, #0]
20004a80:	4a07      	ldr	r2, [pc, #28]	; (20004aa0 <HAL_Init+0x40>)
20004a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20004a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20004a88:	2003      	movs	r0, #3
20004a8a:	f000 f94f 	bl	20004d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20004a8e:	200f      	movs	r0, #15
20004a90:	f000 f808 	bl	20004aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20004a94:	f7ff fb62 	bl	2000415c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20004a98:	2300      	movs	r3, #0
}
20004a9a:	4618      	mov	r0, r3
20004a9c:	bd80      	pop	{r7, pc}
20004a9e:	bf00      	nop
20004aa0:	40023c00 	.word	0x40023c00

20004aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20004aa4:	b580      	push	{r7, lr}
20004aa6:	b082      	sub	sp, #8
20004aa8:	af00      	add	r7, sp, #0
20004aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20004aac:	4b12      	ldr	r3, [pc, #72]	; (20004af8 <HAL_InitTick+0x54>)
20004aae:	681a      	ldr	r2, [r3, #0]
20004ab0:	4b12      	ldr	r3, [pc, #72]	; (20004afc <HAL_InitTick+0x58>)
20004ab2:	781b      	ldrb	r3, [r3, #0]
20004ab4:	4619      	mov	r1, r3
20004ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
20004aba:	fbb3 f3f1 	udiv	r3, r3, r1
20004abe:	fbb2 f3f3 	udiv	r3, r2, r3
20004ac2:	4618      	mov	r0, r3
20004ac4:	f000 f967 	bl	20004d96 <HAL_SYSTICK_Config>
20004ac8:	4603      	mov	r3, r0
20004aca:	2b00      	cmp	r3, #0
20004acc:	d001      	beq.n	20004ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
20004ace:	2301      	movs	r3, #1
20004ad0:	e00e      	b.n	20004af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20004ad2:	687b      	ldr	r3, [r7, #4]
20004ad4:	2b0f      	cmp	r3, #15
20004ad6:	d80a      	bhi.n	20004aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20004ad8:	2200      	movs	r2, #0
20004ada:	6879      	ldr	r1, [r7, #4]
20004adc:	f04f 30ff 	mov.w	r0, #4294967295
20004ae0:	f000 f92f 	bl	20004d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20004ae4:	4a06      	ldr	r2, [pc, #24]	; (20004b00 <HAL_InitTick+0x5c>)
20004ae6:	687b      	ldr	r3, [r7, #4]
20004ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20004aea:	2300      	movs	r3, #0
20004aec:	e000      	b.n	20004af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
20004aee:	2301      	movs	r3, #1
}
20004af0:	4618      	mov	r0, r3
20004af2:	3708      	adds	r7, #8
20004af4:	46bd      	mov	sp, r7
20004af6:	bd80      	pop	{r7, pc}
20004af8:	2001475c 	.word	0x2001475c
20004afc:	20014784 	.word	0x20014784
20004b00:	20014780 	.word	0x20014780

20004b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20004b04:	b480      	push	{r7}
20004b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20004b08:	4b06      	ldr	r3, [pc, #24]	; (20004b24 <HAL_IncTick+0x20>)
20004b0a:	781b      	ldrb	r3, [r3, #0]
20004b0c:	461a      	mov	r2, r3
20004b0e:	4b06      	ldr	r3, [pc, #24]	; (20004b28 <HAL_IncTick+0x24>)
20004b10:	681b      	ldr	r3, [r3, #0]
20004b12:	4413      	add	r3, r2
20004b14:	4a04      	ldr	r2, [pc, #16]	; (20004b28 <HAL_IncTick+0x24>)
20004b16:	6013      	str	r3, [r2, #0]
}
20004b18:	bf00      	nop
20004b1a:	46bd      	mov	sp, r7
20004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b20:	4770      	bx	lr
20004b22:	bf00      	nop
20004b24:	20014784 	.word	0x20014784
20004b28:	20014ad8 	.word	0x20014ad8

20004b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20004b2c:	b480      	push	{r7}
20004b2e:	af00      	add	r7, sp, #0
  return uwTick;
20004b30:	4b03      	ldr	r3, [pc, #12]	; (20004b40 <HAL_GetTick+0x14>)
20004b32:	681b      	ldr	r3, [r3, #0]
}
20004b34:	4618      	mov	r0, r3
20004b36:	46bd      	mov	sp, r7
20004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b3c:	4770      	bx	lr
20004b3e:	bf00      	nop
20004b40:	20014ad8 	.word	0x20014ad8

20004b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20004b44:	b580      	push	{r7, lr}
20004b46:	b084      	sub	sp, #16
20004b48:	af00      	add	r7, sp, #0
20004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20004b4c:	f7ff ffee 	bl	20004b2c <HAL_GetTick>
20004b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20004b52:	687b      	ldr	r3, [r7, #4]
20004b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
20004b56:	68fb      	ldr	r3, [r7, #12]
20004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
20004b5c:	d005      	beq.n	20004b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
20004b5e:	4b0a      	ldr	r3, [pc, #40]	; (20004b88 <HAL_Delay+0x44>)
20004b60:	781b      	ldrb	r3, [r3, #0]
20004b62:	461a      	mov	r2, r3
20004b64:	68fb      	ldr	r3, [r7, #12]
20004b66:	4413      	add	r3, r2
20004b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
20004b6a:	bf00      	nop
20004b6c:	f7ff ffde 	bl	20004b2c <HAL_GetTick>
20004b70:	4602      	mov	r2, r0
20004b72:	68bb      	ldr	r3, [r7, #8]
20004b74:	1ad3      	subs	r3, r2, r3
20004b76:	68fa      	ldr	r2, [r7, #12]
20004b78:	429a      	cmp	r2, r3
20004b7a:	d8f7      	bhi.n	20004b6c <HAL_Delay+0x28>
  {
  }
}
20004b7c:	bf00      	nop
20004b7e:	bf00      	nop
20004b80:	3710      	adds	r7, #16
20004b82:	46bd      	mov	sp, r7
20004b84:	bd80      	pop	{r7, pc}
20004b86:	bf00      	nop
20004b88:	20014784 	.word	0x20014784

20004b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20004b8c:	b480      	push	{r7}
20004b8e:	b085      	sub	sp, #20
20004b90:	af00      	add	r7, sp, #0
20004b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20004b94:	687b      	ldr	r3, [r7, #4]
20004b96:	f003 0307 	and.w	r3, r3, #7
20004b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20004b9c:	4b0c      	ldr	r3, [pc, #48]	; (20004bd0 <__NVIC_SetPriorityGrouping+0x44>)
20004b9e:	68db      	ldr	r3, [r3, #12]
20004ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20004ba2:	68ba      	ldr	r2, [r7, #8]
20004ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
20004ba8:	4013      	ands	r3, r2
20004baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20004bac:	68fb      	ldr	r3, [r7, #12]
20004bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20004bb0:	68bb      	ldr	r3, [r7, #8]
20004bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20004bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
20004bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20004bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20004bbe:	4a04      	ldr	r2, [pc, #16]	; (20004bd0 <__NVIC_SetPriorityGrouping+0x44>)
20004bc0:	68bb      	ldr	r3, [r7, #8]
20004bc2:	60d3      	str	r3, [r2, #12]
}
20004bc4:	bf00      	nop
20004bc6:	3714      	adds	r7, #20
20004bc8:	46bd      	mov	sp, r7
20004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
20004bce:	4770      	bx	lr
20004bd0:	e000ed00 	.word	0xe000ed00

20004bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20004bd4:	b480      	push	{r7}
20004bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20004bd8:	4b04      	ldr	r3, [pc, #16]	; (20004bec <__NVIC_GetPriorityGrouping+0x18>)
20004bda:	68db      	ldr	r3, [r3, #12]
20004bdc:	0a1b      	lsrs	r3, r3, #8
20004bde:	f003 0307 	and.w	r3, r3, #7
}
20004be2:	4618      	mov	r0, r3
20004be4:	46bd      	mov	sp, r7
20004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
20004bea:	4770      	bx	lr
20004bec:	e000ed00 	.word	0xe000ed00

20004bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
20004bf0:	b480      	push	{r7}
20004bf2:	b083      	sub	sp, #12
20004bf4:	af00      	add	r7, sp, #0
20004bf6:	4603      	mov	r3, r0
20004bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004bfe:	2b00      	cmp	r3, #0
20004c00:	db0b      	blt.n	20004c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20004c02:	79fb      	ldrb	r3, [r7, #7]
20004c04:	f003 021f 	and.w	r2, r3, #31
20004c08:	4907      	ldr	r1, [pc, #28]	; (20004c28 <__NVIC_EnableIRQ+0x38>)
20004c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004c0e:	095b      	lsrs	r3, r3, #5
20004c10:	2001      	movs	r0, #1
20004c12:	fa00 f202 	lsl.w	r2, r0, r2
20004c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20004c1a:	bf00      	nop
20004c1c:	370c      	adds	r7, #12
20004c1e:	46bd      	mov	sp, r7
20004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
20004c24:	4770      	bx	lr
20004c26:	bf00      	nop
20004c28:	e000e100 	.word	0xe000e100

20004c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20004c2c:	b480      	push	{r7}
20004c2e:	b083      	sub	sp, #12
20004c30:	af00      	add	r7, sp, #0
20004c32:	4603      	mov	r3, r0
20004c34:	6039      	str	r1, [r7, #0]
20004c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20004c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004c3c:	2b00      	cmp	r3, #0
20004c3e:	db0a      	blt.n	20004c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20004c40:	683b      	ldr	r3, [r7, #0]
20004c42:	b2da      	uxtb	r2, r3
20004c44:	490c      	ldr	r1, [pc, #48]	; (20004c78 <__NVIC_SetPriority+0x4c>)
20004c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004c4a:	0112      	lsls	r2, r2, #4
20004c4c:	b2d2      	uxtb	r2, r2
20004c4e:	440b      	add	r3, r1
20004c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20004c54:	e00a      	b.n	20004c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20004c56:	683b      	ldr	r3, [r7, #0]
20004c58:	b2da      	uxtb	r2, r3
20004c5a:	4908      	ldr	r1, [pc, #32]	; (20004c7c <__NVIC_SetPriority+0x50>)
20004c5c:	79fb      	ldrb	r3, [r7, #7]
20004c5e:	f003 030f 	and.w	r3, r3, #15
20004c62:	3b04      	subs	r3, #4
20004c64:	0112      	lsls	r2, r2, #4
20004c66:	b2d2      	uxtb	r2, r2
20004c68:	440b      	add	r3, r1
20004c6a:	761a      	strb	r2, [r3, #24]
}
20004c6c:	bf00      	nop
20004c6e:	370c      	adds	r7, #12
20004c70:	46bd      	mov	sp, r7
20004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
20004c76:	4770      	bx	lr
20004c78:	e000e100 	.word	0xe000e100
20004c7c:	e000ed00 	.word	0xe000ed00

20004c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20004c80:	b480      	push	{r7}
20004c82:	b089      	sub	sp, #36	; 0x24
20004c84:	af00      	add	r7, sp, #0
20004c86:	60f8      	str	r0, [r7, #12]
20004c88:	60b9      	str	r1, [r7, #8]
20004c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20004c8c:	68fb      	ldr	r3, [r7, #12]
20004c8e:	f003 0307 	and.w	r3, r3, #7
20004c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20004c94:	69fb      	ldr	r3, [r7, #28]
20004c96:	f1c3 0307 	rsb	r3, r3, #7
20004c9a:	2b04      	cmp	r3, #4
20004c9c:	bf28      	it	cs
20004c9e:	2304      	movcs	r3, #4
20004ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20004ca2:	69fb      	ldr	r3, [r7, #28]
20004ca4:	3304      	adds	r3, #4
20004ca6:	2b06      	cmp	r3, #6
20004ca8:	d902      	bls.n	20004cb0 <NVIC_EncodePriority+0x30>
20004caa:	69fb      	ldr	r3, [r7, #28]
20004cac:	3b03      	subs	r3, #3
20004cae:	e000      	b.n	20004cb2 <NVIC_EncodePriority+0x32>
20004cb0:	2300      	movs	r3, #0
20004cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20004cb4:	f04f 32ff 	mov.w	r2, #4294967295
20004cb8:	69bb      	ldr	r3, [r7, #24]
20004cba:	fa02 f303 	lsl.w	r3, r2, r3
20004cbe:	43da      	mvns	r2, r3
20004cc0:	68bb      	ldr	r3, [r7, #8]
20004cc2:	401a      	ands	r2, r3
20004cc4:	697b      	ldr	r3, [r7, #20]
20004cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20004cc8:	f04f 31ff 	mov.w	r1, #4294967295
20004ccc:	697b      	ldr	r3, [r7, #20]
20004cce:	fa01 f303 	lsl.w	r3, r1, r3
20004cd2:	43d9      	mvns	r1, r3
20004cd4:	687b      	ldr	r3, [r7, #4]
20004cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20004cd8:	4313      	orrs	r3, r2
         );
}
20004cda:	4618      	mov	r0, r3
20004cdc:	3724      	adds	r7, #36	; 0x24
20004cde:	46bd      	mov	sp, r7
20004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ce4:	4770      	bx	lr
	...

20004ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20004ce8:	b580      	push	{r7, lr}
20004cea:	b082      	sub	sp, #8
20004cec:	af00      	add	r7, sp, #0
20004cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20004cf0:	687b      	ldr	r3, [r7, #4]
20004cf2:	3b01      	subs	r3, #1
20004cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20004cf8:	d301      	bcc.n	20004cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
20004cfa:	2301      	movs	r3, #1
20004cfc:	e00f      	b.n	20004d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20004cfe:	4a0a      	ldr	r2, [pc, #40]	; (20004d28 <SysTick_Config+0x40>)
20004d00:	687b      	ldr	r3, [r7, #4]
20004d02:	3b01      	subs	r3, #1
20004d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20004d06:	210f      	movs	r1, #15
20004d08:	f04f 30ff 	mov.w	r0, #4294967295
20004d0c:	f7ff ff8e 	bl	20004c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20004d10:	4b05      	ldr	r3, [pc, #20]	; (20004d28 <SysTick_Config+0x40>)
20004d12:	2200      	movs	r2, #0
20004d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20004d16:	4b04      	ldr	r3, [pc, #16]	; (20004d28 <SysTick_Config+0x40>)
20004d18:	2207      	movs	r2, #7
20004d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20004d1c:	2300      	movs	r3, #0
}
20004d1e:	4618      	mov	r0, r3
20004d20:	3708      	adds	r7, #8
20004d22:	46bd      	mov	sp, r7
20004d24:	bd80      	pop	{r7, pc}
20004d26:	bf00      	nop
20004d28:	e000e010 	.word	0xe000e010

20004d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20004d2c:	b580      	push	{r7, lr}
20004d2e:	b082      	sub	sp, #8
20004d30:	af00      	add	r7, sp, #0
20004d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20004d34:	6878      	ldr	r0, [r7, #4]
20004d36:	f7ff ff29 	bl	20004b8c <__NVIC_SetPriorityGrouping>
}
20004d3a:	bf00      	nop
20004d3c:	3708      	adds	r7, #8
20004d3e:	46bd      	mov	sp, r7
20004d40:	bd80      	pop	{r7, pc}

20004d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
20004d42:	b580      	push	{r7, lr}
20004d44:	b086      	sub	sp, #24
20004d46:	af00      	add	r7, sp, #0
20004d48:	4603      	mov	r3, r0
20004d4a:	60b9      	str	r1, [r7, #8]
20004d4c:	607a      	str	r2, [r7, #4]
20004d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
20004d50:	2300      	movs	r3, #0
20004d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20004d54:	f7ff ff3e 	bl	20004bd4 <__NVIC_GetPriorityGrouping>
20004d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
20004d5a:	687a      	ldr	r2, [r7, #4]
20004d5c:	68b9      	ldr	r1, [r7, #8]
20004d5e:	6978      	ldr	r0, [r7, #20]
20004d60:	f7ff ff8e 	bl	20004c80 <NVIC_EncodePriority>
20004d64:	4602      	mov	r2, r0
20004d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
20004d6a:	4611      	mov	r1, r2
20004d6c:	4618      	mov	r0, r3
20004d6e:	f7ff ff5d 	bl	20004c2c <__NVIC_SetPriority>
}
20004d72:	bf00      	nop
20004d74:	3718      	adds	r7, #24
20004d76:	46bd      	mov	sp, r7
20004d78:	bd80      	pop	{r7, pc}

20004d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
20004d7a:	b580      	push	{r7, lr}
20004d7c:	b082      	sub	sp, #8
20004d7e:	af00      	add	r7, sp, #0
20004d80:	4603      	mov	r3, r0
20004d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
20004d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004d88:	4618      	mov	r0, r3
20004d8a:	f7ff ff31 	bl	20004bf0 <__NVIC_EnableIRQ>
}
20004d8e:	bf00      	nop
20004d90:	3708      	adds	r7, #8
20004d92:	46bd      	mov	sp, r7
20004d94:	bd80      	pop	{r7, pc}

20004d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
20004d96:	b580      	push	{r7, lr}
20004d98:	b082      	sub	sp, #8
20004d9a:	af00      	add	r7, sp, #0
20004d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20004d9e:	6878      	ldr	r0, [r7, #4]
20004da0:	f7ff ffa2 	bl	20004ce8 <SysTick_Config>
20004da4:	4603      	mov	r3, r0
}
20004da6:	4618      	mov	r0, r3
20004da8:	3708      	adds	r7, #8
20004daa:	46bd      	mov	sp, r7
20004dac:	bd80      	pop	{r7, pc}
	...

20004db0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20004db0:	b580      	push	{r7, lr}
20004db2:	b086      	sub	sp, #24
20004db4:	af00      	add	r7, sp, #0
20004db6:	60f8      	str	r0, [r7, #12]
20004db8:	60b9      	str	r1, [r7, #8]
20004dba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
20004dbe:	2301      	movs	r3, #1
20004dc0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20004dc2:	4b23      	ldr	r3, [pc, #140]	; (20004e50 <HAL_FLASH_Program+0xa0>)
20004dc4:	7e1b      	ldrb	r3, [r3, #24]
20004dc6:	2b01      	cmp	r3, #1
20004dc8:	d101      	bne.n	20004dce <HAL_FLASH_Program+0x1e>
20004dca:	2302      	movs	r3, #2
20004dcc:	e03b      	b.n	20004e46 <HAL_FLASH_Program+0x96>
20004dce:	4b20      	ldr	r3, [pc, #128]	; (20004e50 <HAL_FLASH_Program+0xa0>)
20004dd0:	2201      	movs	r2, #1
20004dd2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004dd4:	f24c 3050 	movw	r0, #50000	; 0xc350
20004dd8:	f000 f870 	bl	20004ebc <FLASH_WaitForLastOperation>
20004ddc:	4603      	mov	r3, r0
20004dde:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
20004de0:	7dfb      	ldrb	r3, [r7, #23]
20004de2:	2b00      	cmp	r3, #0
20004de4:	d12b      	bne.n	20004e3e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
20004de6:	68fb      	ldr	r3, [r7, #12]
20004de8:	2b00      	cmp	r3, #0
20004dea:	d105      	bne.n	20004df8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
20004dec:	783b      	ldrb	r3, [r7, #0]
20004dee:	4619      	mov	r1, r3
20004df0:	68b8      	ldr	r0, [r7, #8]
20004df2:	f000 f91b 	bl	2000502c <FLASH_Program_Byte>
20004df6:	e016      	b.n	20004e26 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
20004df8:	68fb      	ldr	r3, [r7, #12]
20004dfa:	2b01      	cmp	r3, #1
20004dfc:	d105      	bne.n	20004e0a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
20004dfe:	883b      	ldrh	r3, [r7, #0]
20004e00:	4619      	mov	r1, r3
20004e02:	68b8      	ldr	r0, [r7, #8]
20004e04:	f000 f8ee 	bl	20004fe4 <FLASH_Program_HalfWord>
20004e08:	e00d      	b.n	20004e26 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
20004e0a:	68fb      	ldr	r3, [r7, #12]
20004e0c:	2b02      	cmp	r3, #2
20004e0e:	d105      	bne.n	20004e1c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
20004e10:	683b      	ldr	r3, [r7, #0]
20004e12:	4619      	mov	r1, r3
20004e14:	68b8      	ldr	r0, [r7, #8]
20004e16:	f000 f8c3 	bl	20004fa0 <FLASH_Program_Word>
20004e1a:	e004      	b.n	20004e26 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
20004e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
20004e20:	68b8      	ldr	r0, [r7, #8]
20004e22:	f000 f88b 	bl	20004f3c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004e26:	f24c 3050 	movw	r0, #50000	; 0xc350
20004e2a:	f000 f847 	bl	20004ebc <FLASH_WaitForLastOperation>
20004e2e:	4603      	mov	r3, r0
20004e30:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
20004e32:	4b08      	ldr	r3, [pc, #32]	; (20004e54 <HAL_FLASH_Program+0xa4>)
20004e34:	691b      	ldr	r3, [r3, #16]
20004e36:	4a07      	ldr	r2, [pc, #28]	; (20004e54 <HAL_FLASH_Program+0xa4>)
20004e38:	f023 0301 	bic.w	r3, r3, #1
20004e3c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20004e3e:	4b04      	ldr	r3, [pc, #16]	; (20004e50 <HAL_FLASH_Program+0xa0>)
20004e40:	2200      	movs	r2, #0
20004e42:	761a      	strb	r2, [r3, #24]
  
  return status;
20004e44:	7dfb      	ldrb	r3, [r7, #23]
}
20004e46:	4618      	mov	r0, r3
20004e48:	3718      	adds	r7, #24
20004e4a:	46bd      	mov	sp, r7
20004e4c:	bd80      	pop	{r7, pc}
20004e4e:	bf00      	nop
20004e50:	20014adc 	.word	0x20014adc
20004e54:	40023c00 	.word	0x40023c00

20004e58 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
20004e58:	b480      	push	{r7}
20004e5a:	b083      	sub	sp, #12
20004e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
20004e5e:	2300      	movs	r3, #0
20004e60:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20004e62:	4b0b      	ldr	r3, [pc, #44]	; (20004e90 <HAL_FLASH_Unlock+0x38>)
20004e64:	691b      	ldr	r3, [r3, #16]
20004e66:	2b00      	cmp	r3, #0
20004e68:	da0b      	bge.n	20004e82 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
20004e6a:	4b09      	ldr	r3, [pc, #36]	; (20004e90 <HAL_FLASH_Unlock+0x38>)
20004e6c:	4a09      	ldr	r2, [pc, #36]	; (20004e94 <HAL_FLASH_Unlock+0x3c>)
20004e6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
20004e70:	4b07      	ldr	r3, [pc, #28]	; (20004e90 <HAL_FLASH_Unlock+0x38>)
20004e72:	4a09      	ldr	r2, [pc, #36]	; (20004e98 <HAL_FLASH_Unlock+0x40>)
20004e74:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20004e76:	4b06      	ldr	r3, [pc, #24]	; (20004e90 <HAL_FLASH_Unlock+0x38>)
20004e78:	691b      	ldr	r3, [r3, #16]
20004e7a:	2b00      	cmp	r3, #0
20004e7c:	da01      	bge.n	20004e82 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
20004e7e:	2301      	movs	r3, #1
20004e80:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
20004e82:	79fb      	ldrb	r3, [r7, #7]
}
20004e84:	4618      	mov	r0, r3
20004e86:	370c      	adds	r7, #12
20004e88:	46bd      	mov	sp, r7
20004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e8e:	4770      	bx	lr
20004e90:	40023c00 	.word	0x40023c00
20004e94:	45670123 	.word	0x45670123
20004e98:	cdef89ab 	.word	0xcdef89ab

20004e9c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
20004e9c:	b480      	push	{r7}
20004e9e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
20004ea0:	4b05      	ldr	r3, [pc, #20]	; (20004eb8 <HAL_FLASH_Lock+0x1c>)
20004ea2:	691b      	ldr	r3, [r3, #16]
20004ea4:	4a04      	ldr	r2, [pc, #16]	; (20004eb8 <HAL_FLASH_Lock+0x1c>)
20004ea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20004eaa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
20004eac:	2300      	movs	r3, #0
}
20004eae:	4618      	mov	r0, r3
20004eb0:	46bd      	mov	sp, r7
20004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
20004eb6:	4770      	bx	lr
20004eb8:	40023c00 	.word	0x40023c00

20004ebc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
20004ebc:	b580      	push	{r7, lr}
20004ebe:	b084      	sub	sp, #16
20004ec0:	af00      	add	r7, sp, #0
20004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20004ec4:	2300      	movs	r3, #0
20004ec6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20004ec8:	4b1a      	ldr	r3, [pc, #104]	; (20004f34 <FLASH_WaitForLastOperation+0x78>)
20004eca:	2200      	movs	r2, #0
20004ecc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
20004ece:	f7ff fe2d 	bl	20004b2c <HAL_GetTick>
20004ed2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20004ed4:	e010      	b.n	20004ef8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
20004ed6:	687b      	ldr	r3, [r7, #4]
20004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
20004edc:	d00c      	beq.n	20004ef8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
20004ede:	687b      	ldr	r3, [r7, #4]
20004ee0:	2b00      	cmp	r3, #0
20004ee2:	d007      	beq.n	20004ef4 <FLASH_WaitForLastOperation+0x38>
20004ee4:	f7ff fe22 	bl	20004b2c <HAL_GetTick>
20004ee8:	4602      	mov	r2, r0
20004eea:	68fb      	ldr	r3, [r7, #12]
20004eec:	1ad3      	subs	r3, r2, r3
20004eee:	687a      	ldr	r2, [r7, #4]
20004ef0:	429a      	cmp	r2, r3
20004ef2:	d201      	bcs.n	20004ef8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
20004ef4:	2303      	movs	r3, #3
20004ef6:	e019      	b.n	20004f2c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20004ef8:	4b0f      	ldr	r3, [pc, #60]	; (20004f38 <FLASH_WaitForLastOperation+0x7c>)
20004efa:	68db      	ldr	r3, [r3, #12]
20004efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20004f00:	2b00      	cmp	r3, #0
20004f02:	d1e8      	bne.n	20004ed6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20004f04:	4b0c      	ldr	r3, [pc, #48]	; (20004f38 <FLASH_WaitForLastOperation+0x7c>)
20004f06:	68db      	ldr	r3, [r3, #12]
20004f08:	f003 0301 	and.w	r3, r3, #1
20004f0c:	2b00      	cmp	r3, #0
20004f0e:	d002      	beq.n	20004f16 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20004f10:	4b09      	ldr	r3, [pc, #36]	; (20004f38 <FLASH_WaitForLastOperation+0x7c>)
20004f12:	2201      	movs	r2, #1
20004f14:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
20004f16:	4b08      	ldr	r3, [pc, #32]	; (20004f38 <FLASH_WaitForLastOperation+0x7c>)
20004f18:	68db      	ldr	r3, [r3, #12]
20004f1a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
20004f1e:	2b00      	cmp	r3, #0
20004f20:	d003      	beq.n	20004f2a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
20004f22:	f000 f8a5 	bl	20005070 <FLASH_SetErrorCode>
    return HAL_ERROR;
20004f26:	2301      	movs	r3, #1
20004f28:	e000      	b.n	20004f2c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
20004f2a:	2300      	movs	r3, #0
  
}  
20004f2c:	4618      	mov	r0, r3
20004f2e:	3710      	adds	r7, #16
20004f30:	46bd      	mov	sp, r7
20004f32:	bd80      	pop	{r7, pc}
20004f34:	20014adc 	.word	0x20014adc
20004f38:	40023c00 	.word	0x40023c00

20004f3c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
20004f3c:	b480      	push	{r7}
20004f3e:	b085      	sub	sp, #20
20004f40:	af00      	add	r7, sp, #0
20004f42:	60f8      	str	r0, [r7, #12]
20004f44:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004f48:	4b14      	ldr	r3, [pc, #80]	; (20004f9c <FLASH_Program_DoubleWord+0x60>)
20004f4a:	691b      	ldr	r3, [r3, #16]
20004f4c:	4a13      	ldr	r2, [pc, #76]	; (20004f9c <FLASH_Program_DoubleWord+0x60>)
20004f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004f52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
20004f54:	4b11      	ldr	r3, [pc, #68]	; (20004f9c <FLASH_Program_DoubleWord+0x60>)
20004f56:	691b      	ldr	r3, [r3, #16]
20004f58:	4a10      	ldr	r2, [pc, #64]	; (20004f9c <FLASH_Program_DoubleWord+0x60>)
20004f5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
20004f5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004f60:	4b0e      	ldr	r3, [pc, #56]	; (20004f9c <FLASH_Program_DoubleWord+0x60>)
20004f62:	691b      	ldr	r3, [r3, #16]
20004f64:	4a0d      	ldr	r2, [pc, #52]	; (20004f9c <FLASH_Program_DoubleWord+0x60>)
20004f66:	f043 0301 	orr.w	r3, r3, #1
20004f6a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
20004f6c:	68fb      	ldr	r3, [r7, #12]
20004f6e:	683a      	ldr	r2, [r7, #0]
20004f70:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
20004f72:	f3bf 8f6f 	isb	sy
}
20004f76:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
20004f78:	e9d7 0100 	ldrd	r0, r1, [r7]
20004f7c:	f04f 0200 	mov.w	r2, #0
20004f80:	f04f 0300 	mov.w	r3, #0
20004f84:	000a      	movs	r2, r1
20004f86:	2300      	movs	r3, #0
20004f88:	68f9      	ldr	r1, [r7, #12]
20004f8a:	3104      	adds	r1, #4
20004f8c:	4613      	mov	r3, r2
20004f8e:	600b      	str	r3, [r1, #0]
}
20004f90:	bf00      	nop
20004f92:	3714      	adds	r7, #20
20004f94:	46bd      	mov	sp, r7
20004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f9a:	4770      	bx	lr
20004f9c:	40023c00 	.word	0x40023c00

20004fa0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
20004fa0:	b480      	push	{r7}
20004fa2:	b083      	sub	sp, #12
20004fa4:	af00      	add	r7, sp, #0
20004fa6:	6078      	str	r0, [r7, #4]
20004fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004faa:	4b0d      	ldr	r3, [pc, #52]	; (20004fe0 <FLASH_Program_Word+0x40>)
20004fac:	691b      	ldr	r3, [r3, #16]
20004fae:	4a0c      	ldr	r2, [pc, #48]	; (20004fe0 <FLASH_Program_Word+0x40>)
20004fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004fb4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
20004fb6:	4b0a      	ldr	r3, [pc, #40]	; (20004fe0 <FLASH_Program_Word+0x40>)
20004fb8:	691b      	ldr	r3, [r3, #16]
20004fba:	4a09      	ldr	r2, [pc, #36]	; (20004fe0 <FLASH_Program_Word+0x40>)
20004fbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20004fc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004fc2:	4b07      	ldr	r3, [pc, #28]	; (20004fe0 <FLASH_Program_Word+0x40>)
20004fc4:	691b      	ldr	r3, [r3, #16]
20004fc6:	4a06      	ldr	r2, [pc, #24]	; (20004fe0 <FLASH_Program_Word+0x40>)
20004fc8:	f043 0301 	orr.w	r3, r3, #1
20004fcc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
20004fce:	687b      	ldr	r3, [r7, #4]
20004fd0:	683a      	ldr	r2, [r7, #0]
20004fd2:	601a      	str	r2, [r3, #0]
}
20004fd4:	bf00      	nop
20004fd6:	370c      	adds	r7, #12
20004fd8:	46bd      	mov	sp, r7
20004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
20004fde:	4770      	bx	lr
20004fe0:	40023c00 	.word	0x40023c00

20004fe4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
20004fe4:	b480      	push	{r7}
20004fe6:	b083      	sub	sp, #12
20004fe8:	af00      	add	r7, sp, #0
20004fea:	6078      	str	r0, [r7, #4]
20004fec:	460b      	mov	r3, r1
20004fee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004ff0:	4b0d      	ldr	r3, [pc, #52]	; (20005028 <FLASH_Program_HalfWord+0x44>)
20004ff2:	691b      	ldr	r3, [r3, #16]
20004ff4:	4a0c      	ldr	r2, [pc, #48]	; (20005028 <FLASH_Program_HalfWord+0x44>)
20004ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004ffa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
20004ffc:	4b0a      	ldr	r3, [pc, #40]	; (20005028 <FLASH_Program_HalfWord+0x44>)
20004ffe:	691b      	ldr	r3, [r3, #16]
20005000:	4a09      	ldr	r2, [pc, #36]	; (20005028 <FLASH_Program_HalfWord+0x44>)
20005002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20005006:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20005008:	4b07      	ldr	r3, [pc, #28]	; (20005028 <FLASH_Program_HalfWord+0x44>)
2000500a:	691b      	ldr	r3, [r3, #16]
2000500c:	4a06      	ldr	r2, [pc, #24]	; (20005028 <FLASH_Program_HalfWord+0x44>)
2000500e:	f043 0301 	orr.w	r3, r3, #1
20005012:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
20005014:	687b      	ldr	r3, [r7, #4]
20005016:	887a      	ldrh	r2, [r7, #2]
20005018:	801a      	strh	r2, [r3, #0]
}
2000501a:	bf00      	nop
2000501c:	370c      	adds	r7, #12
2000501e:	46bd      	mov	sp, r7
20005020:	f85d 7b04 	ldr.w	r7, [sp], #4
20005024:	4770      	bx	lr
20005026:	bf00      	nop
20005028:	40023c00 	.word	0x40023c00

2000502c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
2000502c:	b480      	push	{r7}
2000502e:	b083      	sub	sp, #12
20005030:	af00      	add	r7, sp, #0
20005032:	6078      	str	r0, [r7, #4]
20005034:	460b      	mov	r3, r1
20005036:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20005038:	4b0c      	ldr	r3, [pc, #48]	; (2000506c <FLASH_Program_Byte+0x40>)
2000503a:	691b      	ldr	r3, [r3, #16]
2000503c:	4a0b      	ldr	r2, [pc, #44]	; (2000506c <FLASH_Program_Byte+0x40>)
2000503e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20005042:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
20005044:	4b09      	ldr	r3, [pc, #36]	; (2000506c <FLASH_Program_Byte+0x40>)
20005046:	4a09      	ldr	r2, [pc, #36]	; (2000506c <FLASH_Program_Byte+0x40>)
20005048:	691b      	ldr	r3, [r3, #16]
2000504a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
2000504c:	4b07      	ldr	r3, [pc, #28]	; (2000506c <FLASH_Program_Byte+0x40>)
2000504e:	691b      	ldr	r3, [r3, #16]
20005050:	4a06      	ldr	r2, [pc, #24]	; (2000506c <FLASH_Program_Byte+0x40>)
20005052:	f043 0301 	orr.w	r3, r3, #1
20005056:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
20005058:	687b      	ldr	r3, [r7, #4]
2000505a:	78fa      	ldrb	r2, [r7, #3]
2000505c:	701a      	strb	r2, [r3, #0]
}
2000505e:	bf00      	nop
20005060:	370c      	adds	r7, #12
20005062:	46bd      	mov	sp, r7
20005064:	f85d 7b04 	ldr.w	r7, [sp], #4
20005068:	4770      	bx	lr
2000506a:	bf00      	nop
2000506c:	40023c00 	.word	0x40023c00

20005070 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
20005070:	b480      	push	{r7}
20005072:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
20005074:	4b2f      	ldr	r3, [pc, #188]	; (20005134 <FLASH_SetErrorCode+0xc4>)
20005076:	68db      	ldr	r3, [r3, #12]
20005078:	f003 0310 	and.w	r3, r3, #16
2000507c:	2b00      	cmp	r3, #0
2000507e:	d008      	beq.n	20005092 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
20005080:	4b2d      	ldr	r3, [pc, #180]	; (20005138 <FLASH_SetErrorCode+0xc8>)
20005082:	69db      	ldr	r3, [r3, #28]
20005084:	f043 0310 	orr.w	r3, r3, #16
20005088:	4a2b      	ldr	r2, [pc, #172]	; (20005138 <FLASH_SetErrorCode+0xc8>)
2000508a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
2000508c:	4b29      	ldr	r3, [pc, #164]	; (20005134 <FLASH_SetErrorCode+0xc4>)
2000508e:	2210      	movs	r2, #16
20005090:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
20005092:	4b28      	ldr	r3, [pc, #160]	; (20005134 <FLASH_SetErrorCode+0xc4>)
20005094:	68db      	ldr	r3, [r3, #12]
20005096:	f003 0320 	and.w	r3, r3, #32
2000509a:	2b00      	cmp	r3, #0
2000509c:	d008      	beq.n	200050b0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
2000509e:	4b26      	ldr	r3, [pc, #152]	; (20005138 <FLASH_SetErrorCode+0xc8>)
200050a0:	69db      	ldr	r3, [r3, #28]
200050a2:	f043 0308 	orr.w	r3, r3, #8
200050a6:	4a24      	ldr	r2, [pc, #144]	; (20005138 <FLASH_SetErrorCode+0xc8>)
200050a8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
200050aa:	4b22      	ldr	r3, [pc, #136]	; (20005134 <FLASH_SetErrorCode+0xc4>)
200050ac:	2220      	movs	r2, #32
200050ae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
200050b0:	4b20      	ldr	r3, [pc, #128]	; (20005134 <FLASH_SetErrorCode+0xc4>)
200050b2:	68db      	ldr	r3, [r3, #12]
200050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
200050b8:	2b00      	cmp	r3, #0
200050ba:	d008      	beq.n	200050ce <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
200050bc:	4b1e      	ldr	r3, [pc, #120]	; (20005138 <FLASH_SetErrorCode+0xc8>)
200050be:	69db      	ldr	r3, [r3, #28]
200050c0:	f043 0304 	orr.w	r3, r3, #4
200050c4:	4a1c      	ldr	r2, [pc, #112]	; (20005138 <FLASH_SetErrorCode+0xc8>)
200050c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
200050c8:	4b1a      	ldr	r3, [pc, #104]	; (20005134 <FLASH_SetErrorCode+0xc4>)
200050ca:	2240      	movs	r2, #64	; 0x40
200050cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
200050ce:	4b19      	ldr	r3, [pc, #100]	; (20005134 <FLASH_SetErrorCode+0xc4>)
200050d0:	68db      	ldr	r3, [r3, #12]
200050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
200050d6:	2b00      	cmp	r3, #0
200050d8:	d008      	beq.n	200050ec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
200050da:	4b17      	ldr	r3, [pc, #92]	; (20005138 <FLASH_SetErrorCode+0xc8>)
200050dc:	69db      	ldr	r3, [r3, #28]
200050de:	f043 0302 	orr.w	r3, r3, #2
200050e2:	4a15      	ldr	r2, [pc, #84]	; (20005138 <FLASH_SetErrorCode+0xc8>)
200050e4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
200050e6:	4b13      	ldr	r3, [pc, #76]	; (20005134 <FLASH_SetErrorCode+0xc4>)
200050e8:	2280      	movs	r2, #128	; 0x80
200050ea:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
200050ec:	4b11      	ldr	r3, [pc, #68]	; (20005134 <FLASH_SetErrorCode+0xc4>)
200050ee:	68db      	ldr	r3, [r3, #12]
200050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
200050f4:	2b00      	cmp	r3, #0
200050f6:	d009      	beq.n	2000510c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
200050f8:	4b0f      	ldr	r3, [pc, #60]	; (20005138 <FLASH_SetErrorCode+0xc8>)
200050fa:	69db      	ldr	r3, [r3, #28]
200050fc:	f043 0301 	orr.w	r3, r3, #1
20005100:	4a0d      	ldr	r2, [pc, #52]	; (20005138 <FLASH_SetErrorCode+0xc8>)
20005102:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
20005104:	4b0b      	ldr	r3, [pc, #44]	; (20005134 <FLASH_SetErrorCode+0xc4>)
20005106:	f44f 7280 	mov.w	r2, #256	; 0x100
2000510a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
2000510c:	4b09      	ldr	r3, [pc, #36]	; (20005134 <FLASH_SetErrorCode+0xc4>)
2000510e:	68db      	ldr	r3, [r3, #12]
20005110:	f003 0302 	and.w	r3, r3, #2
20005114:	2b00      	cmp	r3, #0
20005116:	d008      	beq.n	2000512a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
20005118:	4b07      	ldr	r3, [pc, #28]	; (20005138 <FLASH_SetErrorCode+0xc8>)
2000511a:	69db      	ldr	r3, [r3, #28]
2000511c:	f043 0320 	orr.w	r3, r3, #32
20005120:	4a05      	ldr	r2, [pc, #20]	; (20005138 <FLASH_SetErrorCode+0xc8>)
20005122:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
20005124:	4b03      	ldr	r3, [pc, #12]	; (20005134 <FLASH_SetErrorCode+0xc4>)
20005126:	2202      	movs	r2, #2
20005128:	60da      	str	r2, [r3, #12]
  }
}
2000512a:	bf00      	nop
2000512c:	46bd      	mov	sp, r7
2000512e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005132:	4770      	bx	lr
20005134:	40023c00 	.word	0x40023c00
20005138:	20014adc 	.word	0x20014adc

2000513c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2000513c:	b480      	push	{r7}
2000513e:	b089      	sub	sp, #36	; 0x24
20005140:	af00      	add	r7, sp, #0
20005142:	6078      	str	r0, [r7, #4]
20005144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
20005146:	2300      	movs	r3, #0
20005148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
2000514a:	2300      	movs	r3, #0
2000514c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
2000514e:	2300      	movs	r3, #0
20005150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
20005152:	2300      	movs	r3, #0
20005154:	61fb      	str	r3, [r7, #28]
20005156:	e159      	b.n	2000540c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
20005158:	2201      	movs	r2, #1
2000515a:	69fb      	ldr	r3, [r7, #28]
2000515c:	fa02 f303 	lsl.w	r3, r2, r3
20005160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20005162:	683b      	ldr	r3, [r7, #0]
20005164:	681b      	ldr	r3, [r3, #0]
20005166:	697a      	ldr	r2, [r7, #20]
20005168:	4013      	ands	r3, r2
2000516a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
2000516c:	693a      	ldr	r2, [r7, #16]
2000516e:	697b      	ldr	r3, [r7, #20]
20005170:	429a      	cmp	r2, r3
20005172:	f040 8148 	bne.w	20005406 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20005176:	683b      	ldr	r3, [r7, #0]
20005178:	685b      	ldr	r3, [r3, #4]
2000517a:	f003 0303 	and.w	r3, r3, #3
2000517e:	2b01      	cmp	r3, #1
20005180:	d005      	beq.n	2000518e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20005182:	683b      	ldr	r3, [r7, #0]
20005184:	685b      	ldr	r3, [r3, #4]
20005186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
2000518a:	2b02      	cmp	r3, #2
2000518c:	d130      	bne.n	200051f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
2000518e:	687b      	ldr	r3, [r7, #4]
20005190:	689b      	ldr	r3, [r3, #8]
20005192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20005194:	69fb      	ldr	r3, [r7, #28]
20005196:	005b      	lsls	r3, r3, #1
20005198:	2203      	movs	r2, #3
2000519a:	fa02 f303 	lsl.w	r3, r2, r3
2000519e:	43db      	mvns	r3, r3
200051a0:	69ba      	ldr	r2, [r7, #24]
200051a2:	4013      	ands	r3, r2
200051a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
200051a6:	683b      	ldr	r3, [r7, #0]
200051a8:	68da      	ldr	r2, [r3, #12]
200051aa:	69fb      	ldr	r3, [r7, #28]
200051ac:	005b      	lsls	r3, r3, #1
200051ae:	fa02 f303 	lsl.w	r3, r2, r3
200051b2:	69ba      	ldr	r2, [r7, #24]
200051b4:	4313      	orrs	r3, r2
200051b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
200051b8:	687b      	ldr	r3, [r7, #4]
200051ba:	69ba      	ldr	r2, [r7, #24]
200051bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
200051be:	687b      	ldr	r3, [r7, #4]
200051c0:	685b      	ldr	r3, [r3, #4]
200051c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
200051c4:	2201      	movs	r2, #1
200051c6:	69fb      	ldr	r3, [r7, #28]
200051c8:	fa02 f303 	lsl.w	r3, r2, r3
200051cc:	43db      	mvns	r3, r3
200051ce:	69ba      	ldr	r2, [r7, #24]
200051d0:	4013      	ands	r3, r2
200051d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
200051d4:	683b      	ldr	r3, [r7, #0]
200051d6:	685b      	ldr	r3, [r3, #4]
200051d8:	091b      	lsrs	r3, r3, #4
200051da:	f003 0201 	and.w	r2, r3, #1
200051de:	69fb      	ldr	r3, [r7, #28]
200051e0:	fa02 f303 	lsl.w	r3, r2, r3
200051e4:	69ba      	ldr	r2, [r7, #24]
200051e6:	4313      	orrs	r3, r2
200051e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
200051ea:	687b      	ldr	r3, [r7, #4]
200051ec:	69ba      	ldr	r2, [r7, #24]
200051ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
200051f0:	683b      	ldr	r3, [r7, #0]
200051f2:	685b      	ldr	r3, [r3, #4]
200051f4:	f003 0303 	and.w	r3, r3, #3
200051f8:	2b03      	cmp	r3, #3
200051fa:	d017      	beq.n	2000522c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
200051fc:	687b      	ldr	r3, [r7, #4]
200051fe:	68db      	ldr	r3, [r3, #12]
20005200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
20005202:	69fb      	ldr	r3, [r7, #28]
20005204:	005b      	lsls	r3, r3, #1
20005206:	2203      	movs	r2, #3
20005208:	fa02 f303 	lsl.w	r3, r2, r3
2000520c:	43db      	mvns	r3, r3
2000520e:	69ba      	ldr	r2, [r7, #24]
20005210:	4013      	ands	r3, r2
20005212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
20005214:	683b      	ldr	r3, [r7, #0]
20005216:	689a      	ldr	r2, [r3, #8]
20005218:	69fb      	ldr	r3, [r7, #28]
2000521a:	005b      	lsls	r3, r3, #1
2000521c:	fa02 f303 	lsl.w	r3, r2, r3
20005220:	69ba      	ldr	r2, [r7, #24]
20005222:	4313      	orrs	r3, r2
20005224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
20005226:	687b      	ldr	r3, [r7, #4]
20005228:	69ba      	ldr	r2, [r7, #24]
2000522a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
2000522c:	683b      	ldr	r3, [r7, #0]
2000522e:	685b      	ldr	r3, [r3, #4]
20005230:	f003 0303 	and.w	r3, r3, #3
20005234:	2b02      	cmp	r3, #2
20005236:	d123      	bne.n	20005280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
20005238:	69fb      	ldr	r3, [r7, #28]
2000523a:	08da      	lsrs	r2, r3, #3
2000523c:	687b      	ldr	r3, [r7, #4]
2000523e:	3208      	adds	r2, #8
20005240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20005244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20005246:	69fb      	ldr	r3, [r7, #28]
20005248:	f003 0307 	and.w	r3, r3, #7
2000524c:	009b      	lsls	r3, r3, #2
2000524e:	220f      	movs	r2, #15
20005250:	fa02 f303 	lsl.w	r3, r2, r3
20005254:	43db      	mvns	r3, r3
20005256:	69ba      	ldr	r2, [r7, #24]
20005258:	4013      	ands	r3, r2
2000525a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
2000525c:	683b      	ldr	r3, [r7, #0]
2000525e:	691a      	ldr	r2, [r3, #16]
20005260:	69fb      	ldr	r3, [r7, #28]
20005262:	f003 0307 	and.w	r3, r3, #7
20005266:	009b      	lsls	r3, r3, #2
20005268:	fa02 f303 	lsl.w	r3, r2, r3
2000526c:	69ba      	ldr	r2, [r7, #24]
2000526e:	4313      	orrs	r3, r2
20005270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
20005272:	69fb      	ldr	r3, [r7, #28]
20005274:	08da      	lsrs	r2, r3, #3
20005276:	687b      	ldr	r3, [r7, #4]
20005278:	3208      	adds	r2, #8
2000527a:	69b9      	ldr	r1, [r7, #24]
2000527c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20005280:	687b      	ldr	r3, [r7, #4]
20005282:	681b      	ldr	r3, [r3, #0]
20005284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
20005286:	69fb      	ldr	r3, [r7, #28]
20005288:	005b      	lsls	r3, r3, #1
2000528a:	2203      	movs	r2, #3
2000528c:	fa02 f303 	lsl.w	r3, r2, r3
20005290:	43db      	mvns	r3, r3
20005292:	69ba      	ldr	r2, [r7, #24]
20005294:	4013      	ands	r3, r2
20005296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20005298:	683b      	ldr	r3, [r7, #0]
2000529a:	685b      	ldr	r3, [r3, #4]
2000529c:	f003 0203 	and.w	r2, r3, #3
200052a0:	69fb      	ldr	r3, [r7, #28]
200052a2:	005b      	lsls	r3, r3, #1
200052a4:	fa02 f303 	lsl.w	r3, r2, r3
200052a8:	69ba      	ldr	r2, [r7, #24]
200052aa:	4313      	orrs	r3, r2
200052ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
200052ae:	687b      	ldr	r3, [r7, #4]
200052b0:	69ba      	ldr	r2, [r7, #24]
200052b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
200052b4:	683b      	ldr	r3, [r7, #0]
200052b6:	685b      	ldr	r3, [r3, #4]
200052b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
200052bc:	2b00      	cmp	r3, #0
200052be:	f000 80a2 	beq.w	20005406 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
200052c2:	2300      	movs	r3, #0
200052c4:	60fb      	str	r3, [r7, #12]
200052c6:	4b57      	ldr	r3, [pc, #348]	; (20005424 <HAL_GPIO_Init+0x2e8>)
200052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200052ca:	4a56      	ldr	r2, [pc, #344]	; (20005424 <HAL_GPIO_Init+0x2e8>)
200052cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
200052d0:	6453      	str	r3, [r2, #68]	; 0x44
200052d2:	4b54      	ldr	r3, [pc, #336]	; (20005424 <HAL_GPIO_Init+0x2e8>)
200052d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200052d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
200052da:	60fb      	str	r3, [r7, #12]
200052dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
200052de:	4a52      	ldr	r2, [pc, #328]	; (20005428 <HAL_GPIO_Init+0x2ec>)
200052e0:	69fb      	ldr	r3, [r7, #28]
200052e2:	089b      	lsrs	r3, r3, #2
200052e4:	3302      	adds	r3, #2
200052e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200052ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
200052ec:	69fb      	ldr	r3, [r7, #28]
200052ee:	f003 0303 	and.w	r3, r3, #3
200052f2:	009b      	lsls	r3, r3, #2
200052f4:	220f      	movs	r2, #15
200052f6:	fa02 f303 	lsl.w	r3, r2, r3
200052fa:	43db      	mvns	r3, r3
200052fc:	69ba      	ldr	r2, [r7, #24]
200052fe:	4013      	ands	r3, r2
20005300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20005302:	687b      	ldr	r3, [r7, #4]
20005304:	4a49      	ldr	r2, [pc, #292]	; (2000542c <HAL_GPIO_Init+0x2f0>)
20005306:	4293      	cmp	r3, r2
20005308:	d019      	beq.n	2000533e <HAL_GPIO_Init+0x202>
2000530a:	687b      	ldr	r3, [r7, #4]
2000530c:	4a48      	ldr	r2, [pc, #288]	; (20005430 <HAL_GPIO_Init+0x2f4>)
2000530e:	4293      	cmp	r3, r2
20005310:	d013      	beq.n	2000533a <HAL_GPIO_Init+0x1fe>
20005312:	687b      	ldr	r3, [r7, #4]
20005314:	4a47      	ldr	r2, [pc, #284]	; (20005434 <HAL_GPIO_Init+0x2f8>)
20005316:	4293      	cmp	r3, r2
20005318:	d00d      	beq.n	20005336 <HAL_GPIO_Init+0x1fa>
2000531a:	687b      	ldr	r3, [r7, #4]
2000531c:	4a46      	ldr	r2, [pc, #280]	; (20005438 <HAL_GPIO_Init+0x2fc>)
2000531e:	4293      	cmp	r3, r2
20005320:	d007      	beq.n	20005332 <HAL_GPIO_Init+0x1f6>
20005322:	687b      	ldr	r3, [r7, #4]
20005324:	4a45      	ldr	r2, [pc, #276]	; (2000543c <HAL_GPIO_Init+0x300>)
20005326:	4293      	cmp	r3, r2
20005328:	d101      	bne.n	2000532e <HAL_GPIO_Init+0x1f2>
2000532a:	2304      	movs	r3, #4
2000532c:	e008      	b.n	20005340 <HAL_GPIO_Init+0x204>
2000532e:	2307      	movs	r3, #7
20005330:	e006      	b.n	20005340 <HAL_GPIO_Init+0x204>
20005332:	2303      	movs	r3, #3
20005334:	e004      	b.n	20005340 <HAL_GPIO_Init+0x204>
20005336:	2302      	movs	r3, #2
20005338:	e002      	b.n	20005340 <HAL_GPIO_Init+0x204>
2000533a:	2301      	movs	r3, #1
2000533c:	e000      	b.n	20005340 <HAL_GPIO_Init+0x204>
2000533e:	2300      	movs	r3, #0
20005340:	69fa      	ldr	r2, [r7, #28]
20005342:	f002 0203 	and.w	r2, r2, #3
20005346:	0092      	lsls	r2, r2, #2
20005348:	4093      	lsls	r3, r2
2000534a:	69ba      	ldr	r2, [r7, #24]
2000534c:	4313      	orrs	r3, r2
2000534e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
20005350:	4935      	ldr	r1, [pc, #212]	; (20005428 <HAL_GPIO_Init+0x2ec>)
20005352:	69fb      	ldr	r3, [r7, #28]
20005354:	089b      	lsrs	r3, r3, #2
20005356:	3302      	adds	r3, #2
20005358:	69ba      	ldr	r2, [r7, #24]
2000535a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
2000535e:	4b38      	ldr	r3, [pc, #224]	; (20005440 <HAL_GPIO_Init+0x304>)
20005360:	689b      	ldr	r3, [r3, #8]
20005362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005364:	693b      	ldr	r3, [r7, #16]
20005366:	43db      	mvns	r3, r3
20005368:	69ba      	ldr	r2, [r7, #24]
2000536a:	4013      	ands	r3, r2
2000536c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
2000536e:	683b      	ldr	r3, [r7, #0]
20005370:	685b      	ldr	r3, [r3, #4]
20005372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
20005376:	2b00      	cmp	r3, #0
20005378:	d003      	beq.n	20005382 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
2000537a:	69ba      	ldr	r2, [r7, #24]
2000537c:	693b      	ldr	r3, [r7, #16]
2000537e:	4313      	orrs	r3, r2
20005380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
20005382:	4a2f      	ldr	r2, [pc, #188]	; (20005440 <HAL_GPIO_Init+0x304>)
20005384:	69bb      	ldr	r3, [r7, #24]
20005386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20005388:	4b2d      	ldr	r3, [pc, #180]	; (20005440 <HAL_GPIO_Init+0x304>)
2000538a:	68db      	ldr	r3, [r3, #12]
2000538c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000538e:	693b      	ldr	r3, [r7, #16]
20005390:	43db      	mvns	r3, r3
20005392:	69ba      	ldr	r2, [r7, #24]
20005394:	4013      	ands	r3, r2
20005396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
20005398:	683b      	ldr	r3, [r7, #0]
2000539a:	685b      	ldr	r3, [r3, #4]
2000539c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
200053a0:	2b00      	cmp	r3, #0
200053a2:	d003      	beq.n	200053ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
200053a4:	69ba      	ldr	r2, [r7, #24]
200053a6:	693b      	ldr	r3, [r7, #16]
200053a8:	4313      	orrs	r3, r2
200053aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
200053ac:	4a24      	ldr	r2, [pc, #144]	; (20005440 <HAL_GPIO_Init+0x304>)
200053ae:	69bb      	ldr	r3, [r7, #24]
200053b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
200053b2:	4b23      	ldr	r3, [pc, #140]	; (20005440 <HAL_GPIO_Init+0x304>)
200053b4:	685b      	ldr	r3, [r3, #4]
200053b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200053b8:	693b      	ldr	r3, [r7, #16]
200053ba:	43db      	mvns	r3, r3
200053bc:	69ba      	ldr	r2, [r7, #24]
200053be:	4013      	ands	r3, r2
200053c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
200053c2:	683b      	ldr	r3, [r7, #0]
200053c4:	685b      	ldr	r3, [r3, #4]
200053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200053ca:	2b00      	cmp	r3, #0
200053cc:	d003      	beq.n	200053d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
200053ce:	69ba      	ldr	r2, [r7, #24]
200053d0:	693b      	ldr	r3, [r7, #16]
200053d2:	4313      	orrs	r3, r2
200053d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
200053d6:	4a1a      	ldr	r2, [pc, #104]	; (20005440 <HAL_GPIO_Init+0x304>)
200053d8:	69bb      	ldr	r3, [r7, #24]
200053da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
200053dc:	4b18      	ldr	r3, [pc, #96]	; (20005440 <HAL_GPIO_Init+0x304>)
200053de:	681b      	ldr	r3, [r3, #0]
200053e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200053e2:	693b      	ldr	r3, [r7, #16]
200053e4:	43db      	mvns	r3, r3
200053e6:	69ba      	ldr	r2, [r7, #24]
200053e8:	4013      	ands	r3, r2
200053ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
200053ec:	683b      	ldr	r3, [r7, #0]
200053ee:	685b      	ldr	r3, [r3, #4]
200053f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200053f4:	2b00      	cmp	r3, #0
200053f6:	d003      	beq.n	20005400 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
200053f8:	69ba      	ldr	r2, [r7, #24]
200053fa:	693b      	ldr	r3, [r7, #16]
200053fc:	4313      	orrs	r3, r2
200053fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20005400:	4a0f      	ldr	r2, [pc, #60]	; (20005440 <HAL_GPIO_Init+0x304>)
20005402:	69bb      	ldr	r3, [r7, #24]
20005404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
20005406:	69fb      	ldr	r3, [r7, #28]
20005408:	3301      	adds	r3, #1
2000540a:	61fb      	str	r3, [r7, #28]
2000540c:	69fb      	ldr	r3, [r7, #28]
2000540e:	2b0f      	cmp	r3, #15
20005410:	f67f aea2 	bls.w	20005158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
20005414:	bf00      	nop
20005416:	bf00      	nop
20005418:	3724      	adds	r7, #36	; 0x24
2000541a:	46bd      	mov	sp, r7
2000541c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005420:	4770      	bx	lr
20005422:	bf00      	nop
20005424:	40023800 	.word	0x40023800
20005428:	40013800 	.word	0x40013800
2000542c:	40020000 	.word	0x40020000
20005430:	40020400 	.word	0x40020400
20005434:	40020800 	.word	0x40020800
20005438:	40020c00 	.word	0x40020c00
2000543c:	40021000 	.word	0x40021000
20005440:	40013c00 	.word	0x40013c00

20005444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005444:	b480      	push	{r7}
20005446:	b085      	sub	sp, #20
20005448:	af00      	add	r7, sp, #0
2000544a:	6078      	str	r0, [r7, #4]
2000544c:	460b      	mov	r3, r1
2000544e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
20005450:	687b      	ldr	r3, [r7, #4]
20005452:	691a      	ldr	r2, [r3, #16]
20005454:	887b      	ldrh	r3, [r7, #2]
20005456:	4013      	ands	r3, r2
20005458:	2b00      	cmp	r3, #0
2000545a:	d002      	beq.n	20005462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
2000545c:	2301      	movs	r3, #1
2000545e:	73fb      	strb	r3, [r7, #15]
20005460:	e001      	b.n	20005466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
20005462:	2300      	movs	r3, #0
20005464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
20005466:	7bfb      	ldrb	r3, [r7, #15]
}
20005468:	4618      	mov	r0, r3
2000546a:	3714      	adds	r7, #20
2000546c:	46bd      	mov	sp, r7
2000546e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005472:	4770      	bx	lr

20005474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20005474:	b480      	push	{r7}
20005476:	b083      	sub	sp, #12
20005478:	af00      	add	r7, sp, #0
2000547a:	6078      	str	r0, [r7, #4]
2000547c:	460b      	mov	r3, r1
2000547e:	807b      	strh	r3, [r7, #2]
20005480:	4613      	mov	r3, r2
20005482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20005484:	787b      	ldrb	r3, [r7, #1]
20005486:	2b00      	cmp	r3, #0
20005488:	d003      	beq.n	20005492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2000548a:	887a      	ldrh	r2, [r7, #2]
2000548c:	687b      	ldr	r3, [r7, #4]
2000548e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
20005490:	e003      	b.n	2000549a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20005492:	887b      	ldrh	r3, [r7, #2]
20005494:	041a      	lsls	r2, r3, #16
20005496:	687b      	ldr	r3, [r7, #4]
20005498:	619a      	str	r2, [r3, #24]
}
2000549a:	bf00      	nop
2000549c:	370c      	adds	r7, #12
2000549e:	46bd      	mov	sp, r7
200054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
200054a4:	4770      	bx	lr
	...

200054a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
200054a8:	b580      	push	{r7, lr}
200054aa:	b086      	sub	sp, #24
200054ac:	af00      	add	r7, sp, #0
200054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
200054b0:	687b      	ldr	r3, [r7, #4]
200054b2:	2b00      	cmp	r3, #0
200054b4:	d101      	bne.n	200054ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
200054b6:	2301      	movs	r3, #1
200054b8:	e267      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
200054ba:	687b      	ldr	r3, [r7, #4]
200054bc:	681b      	ldr	r3, [r3, #0]
200054be:	f003 0301 	and.w	r3, r3, #1
200054c2:	2b00      	cmp	r3, #0
200054c4:	d075      	beq.n	200055b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
200054c6:	4b88      	ldr	r3, [pc, #544]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
200054c8:	689b      	ldr	r3, [r3, #8]
200054ca:	f003 030c 	and.w	r3, r3, #12
200054ce:	2b04      	cmp	r3, #4
200054d0:	d00c      	beq.n	200054ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200054d2:	4b85      	ldr	r3, [pc, #532]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
200054d4:	689b      	ldr	r3, [r3, #8]
200054d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
200054da:	2b08      	cmp	r3, #8
200054dc:	d112      	bne.n	20005504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200054de:	4b82      	ldr	r3, [pc, #520]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
200054e0:	685b      	ldr	r3, [r3, #4]
200054e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200054e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
200054ea:	d10b      	bne.n	20005504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200054ec:	4b7e      	ldr	r3, [pc, #504]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
200054ee:	681b      	ldr	r3, [r3, #0]
200054f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200054f4:	2b00      	cmp	r3, #0
200054f6:	d05b      	beq.n	200055b0 <HAL_RCC_OscConfig+0x108>
200054f8:	687b      	ldr	r3, [r7, #4]
200054fa:	685b      	ldr	r3, [r3, #4]
200054fc:	2b00      	cmp	r3, #0
200054fe:	d157      	bne.n	200055b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
20005500:	2301      	movs	r3, #1
20005502:	e242      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20005504:	687b      	ldr	r3, [r7, #4]
20005506:	685b      	ldr	r3, [r3, #4]
20005508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000550c:	d106      	bne.n	2000551c <HAL_RCC_OscConfig+0x74>
2000550e:	4b76      	ldr	r3, [pc, #472]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
20005510:	681b      	ldr	r3, [r3, #0]
20005512:	4a75      	ldr	r2, [pc, #468]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
20005514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005518:	6013      	str	r3, [r2, #0]
2000551a:	e01d      	b.n	20005558 <HAL_RCC_OscConfig+0xb0>
2000551c:	687b      	ldr	r3, [r7, #4]
2000551e:	685b      	ldr	r3, [r3, #4]
20005520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20005524:	d10c      	bne.n	20005540 <HAL_RCC_OscConfig+0x98>
20005526:	4b70      	ldr	r3, [pc, #448]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
20005528:	681b      	ldr	r3, [r3, #0]
2000552a:	4a6f      	ldr	r2, [pc, #444]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
2000552c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20005530:	6013      	str	r3, [r2, #0]
20005532:	4b6d      	ldr	r3, [pc, #436]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
20005534:	681b      	ldr	r3, [r3, #0]
20005536:	4a6c      	ldr	r2, [pc, #432]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
20005538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000553c:	6013      	str	r3, [r2, #0]
2000553e:	e00b      	b.n	20005558 <HAL_RCC_OscConfig+0xb0>
20005540:	4b69      	ldr	r3, [pc, #420]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
20005542:	681b      	ldr	r3, [r3, #0]
20005544:	4a68      	ldr	r2, [pc, #416]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
20005546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000554a:	6013      	str	r3, [r2, #0]
2000554c:	4b66      	ldr	r3, [pc, #408]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
2000554e:	681b      	ldr	r3, [r3, #0]
20005550:	4a65      	ldr	r2, [pc, #404]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
20005552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
20005556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
20005558:	687b      	ldr	r3, [r7, #4]
2000555a:	685b      	ldr	r3, [r3, #4]
2000555c:	2b00      	cmp	r3, #0
2000555e:	d013      	beq.n	20005588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20005560:	f7ff fae4 	bl	20004b2c <HAL_GetTick>
20005564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20005566:	e008      	b.n	2000557a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20005568:	f7ff fae0 	bl	20004b2c <HAL_GetTick>
2000556c:	4602      	mov	r2, r0
2000556e:	693b      	ldr	r3, [r7, #16]
20005570:	1ad3      	subs	r3, r2, r3
20005572:	2b64      	cmp	r3, #100	; 0x64
20005574:	d901      	bls.n	2000557a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
20005576:	2303      	movs	r3, #3
20005578:	e207      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000557a:	4b5b      	ldr	r3, [pc, #364]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
2000557c:	681b      	ldr	r3, [r3, #0]
2000557e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005582:	2b00      	cmp	r3, #0
20005584:	d0f0      	beq.n	20005568 <HAL_RCC_OscConfig+0xc0>
20005586:	e014      	b.n	200055b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20005588:	f7ff fad0 	bl	20004b2c <HAL_GetTick>
2000558c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000558e:	e008      	b.n	200055a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20005590:	f7ff facc 	bl	20004b2c <HAL_GetTick>
20005594:	4602      	mov	r2, r0
20005596:	693b      	ldr	r3, [r7, #16]
20005598:	1ad3      	subs	r3, r2, r3
2000559a:	2b64      	cmp	r3, #100	; 0x64
2000559c:	d901      	bls.n	200055a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
2000559e:	2303      	movs	r3, #3
200055a0:	e1f3      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200055a2:	4b51      	ldr	r3, [pc, #324]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
200055a4:	681b      	ldr	r3, [r3, #0]
200055a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200055aa:	2b00      	cmp	r3, #0
200055ac:	d1f0      	bne.n	20005590 <HAL_RCC_OscConfig+0xe8>
200055ae:	e000      	b.n	200055b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200055b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
200055b2:	687b      	ldr	r3, [r7, #4]
200055b4:	681b      	ldr	r3, [r3, #0]
200055b6:	f003 0302 	and.w	r3, r3, #2
200055ba:	2b00      	cmp	r3, #0
200055bc:	d063      	beq.n	20005686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
200055be:	4b4a      	ldr	r3, [pc, #296]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
200055c0:	689b      	ldr	r3, [r3, #8]
200055c2:	f003 030c 	and.w	r3, r3, #12
200055c6:	2b00      	cmp	r3, #0
200055c8:	d00b      	beq.n	200055e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200055ca:	4b47      	ldr	r3, [pc, #284]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
200055cc:	689b      	ldr	r3, [r3, #8]
200055ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
200055d2:	2b08      	cmp	r3, #8
200055d4:	d11c      	bne.n	20005610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200055d6:	4b44      	ldr	r3, [pc, #272]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
200055d8:	685b      	ldr	r3, [r3, #4]
200055da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200055de:	2b00      	cmp	r3, #0
200055e0:	d116      	bne.n	20005610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
200055e2:	4b41      	ldr	r3, [pc, #260]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
200055e4:	681b      	ldr	r3, [r3, #0]
200055e6:	f003 0302 	and.w	r3, r3, #2
200055ea:	2b00      	cmp	r3, #0
200055ec:	d005      	beq.n	200055fa <HAL_RCC_OscConfig+0x152>
200055ee:	687b      	ldr	r3, [r7, #4]
200055f0:	68db      	ldr	r3, [r3, #12]
200055f2:	2b01      	cmp	r3, #1
200055f4:	d001      	beq.n	200055fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
200055f6:	2301      	movs	r3, #1
200055f8:	e1c7      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
200055fa:	4b3b      	ldr	r3, [pc, #236]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
200055fc:	681b      	ldr	r3, [r3, #0]
200055fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20005602:	687b      	ldr	r3, [r7, #4]
20005604:	691b      	ldr	r3, [r3, #16]
20005606:	00db      	lsls	r3, r3, #3
20005608:	4937      	ldr	r1, [pc, #220]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
2000560a:	4313      	orrs	r3, r2
2000560c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000560e:	e03a      	b.n	20005686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
20005610:	687b      	ldr	r3, [r7, #4]
20005612:	68db      	ldr	r3, [r3, #12]
20005614:	2b00      	cmp	r3, #0
20005616:	d020      	beq.n	2000565a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20005618:	4b34      	ldr	r3, [pc, #208]	; (200056ec <HAL_RCC_OscConfig+0x244>)
2000561a:	2201      	movs	r2, #1
2000561c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000561e:	f7ff fa85 	bl	20004b2c <HAL_GetTick>
20005622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20005624:	e008      	b.n	20005638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20005626:	f7ff fa81 	bl	20004b2c <HAL_GetTick>
2000562a:	4602      	mov	r2, r0
2000562c:	693b      	ldr	r3, [r7, #16]
2000562e:	1ad3      	subs	r3, r2, r3
20005630:	2b02      	cmp	r3, #2
20005632:	d901      	bls.n	20005638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
20005634:	2303      	movs	r3, #3
20005636:	e1a8      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20005638:	4b2b      	ldr	r3, [pc, #172]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
2000563a:	681b      	ldr	r3, [r3, #0]
2000563c:	f003 0302 	and.w	r3, r3, #2
20005640:	2b00      	cmp	r3, #0
20005642:	d0f0      	beq.n	20005626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20005644:	4b28      	ldr	r3, [pc, #160]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
20005646:	681b      	ldr	r3, [r3, #0]
20005648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000564c:	687b      	ldr	r3, [r7, #4]
2000564e:	691b      	ldr	r3, [r3, #16]
20005650:	00db      	lsls	r3, r3, #3
20005652:	4925      	ldr	r1, [pc, #148]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
20005654:	4313      	orrs	r3, r2
20005656:	600b      	str	r3, [r1, #0]
20005658:	e015      	b.n	20005686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000565a:	4b24      	ldr	r3, [pc, #144]	; (200056ec <HAL_RCC_OscConfig+0x244>)
2000565c:	2200      	movs	r2, #0
2000565e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20005660:	f7ff fa64 	bl	20004b2c <HAL_GetTick>
20005664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20005666:	e008      	b.n	2000567a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20005668:	f7ff fa60 	bl	20004b2c <HAL_GetTick>
2000566c:	4602      	mov	r2, r0
2000566e:	693b      	ldr	r3, [r7, #16]
20005670:	1ad3      	subs	r3, r2, r3
20005672:	2b02      	cmp	r3, #2
20005674:	d901      	bls.n	2000567a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
20005676:	2303      	movs	r3, #3
20005678:	e187      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000567a:	4b1b      	ldr	r3, [pc, #108]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
2000567c:	681b      	ldr	r3, [r3, #0]
2000567e:	f003 0302 	and.w	r3, r3, #2
20005682:	2b00      	cmp	r3, #0
20005684:	d1f0      	bne.n	20005668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20005686:	687b      	ldr	r3, [r7, #4]
20005688:	681b      	ldr	r3, [r3, #0]
2000568a:	f003 0308 	and.w	r3, r3, #8
2000568e:	2b00      	cmp	r3, #0
20005690:	d036      	beq.n	20005700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
20005692:	687b      	ldr	r3, [r7, #4]
20005694:	695b      	ldr	r3, [r3, #20]
20005696:	2b00      	cmp	r3, #0
20005698:	d016      	beq.n	200056c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000569a:	4b15      	ldr	r3, [pc, #84]	; (200056f0 <HAL_RCC_OscConfig+0x248>)
2000569c:	2201      	movs	r2, #1
2000569e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200056a0:	f7ff fa44 	bl	20004b2c <HAL_GetTick>
200056a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200056a6:	e008      	b.n	200056ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
200056a8:	f7ff fa40 	bl	20004b2c <HAL_GetTick>
200056ac:	4602      	mov	r2, r0
200056ae:	693b      	ldr	r3, [r7, #16]
200056b0:	1ad3      	subs	r3, r2, r3
200056b2:	2b02      	cmp	r3, #2
200056b4:	d901      	bls.n	200056ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
200056b6:	2303      	movs	r3, #3
200056b8:	e167      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200056ba:	4b0b      	ldr	r3, [pc, #44]	; (200056e8 <HAL_RCC_OscConfig+0x240>)
200056bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200056be:	f003 0302 	and.w	r3, r3, #2
200056c2:	2b00      	cmp	r3, #0
200056c4:	d0f0      	beq.n	200056a8 <HAL_RCC_OscConfig+0x200>
200056c6:	e01b      	b.n	20005700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
200056c8:	4b09      	ldr	r3, [pc, #36]	; (200056f0 <HAL_RCC_OscConfig+0x248>)
200056ca:	2200      	movs	r2, #0
200056cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
200056ce:	f7ff fa2d 	bl	20004b2c <HAL_GetTick>
200056d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200056d4:	e00e      	b.n	200056f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
200056d6:	f7ff fa29 	bl	20004b2c <HAL_GetTick>
200056da:	4602      	mov	r2, r0
200056dc:	693b      	ldr	r3, [r7, #16]
200056de:	1ad3      	subs	r3, r2, r3
200056e0:	2b02      	cmp	r3, #2
200056e2:	d907      	bls.n	200056f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
200056e4:	2303      	movs	r3, #3
200056e6:	e150      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
200056e8:	40023800 	.word	0x40023800
200056ec:	42470000 	.word	0x42470000
200056f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200056f4:	4b88      	ldr	r3, [pc, #544]	; (20005918 <HAL_RCC_OscConfig+0x470>)
200056f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200056f8:	f003 0302 	and.w	r3, r3, #2
200056fc:	2b00      	cmp	r3, #0
200056fe:	d1ea      	bne.n	200056d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20005700:	687b      	ldr	r3, [r7, #4]
20005702:	681b      	ldr	r3, [r3, #0]
20005704:	f003 0304 	and.w	r3, r3, #4
20005708:	2b00      	cmp	r3, #0
2000570a:	f000 8097 	beq.w	2000583c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
2000570e:	2300      	movs	r3, #0
20005710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
20005712:	4b81      	ldr	r3, [pc, #516]	; (20005918 <HAL_RCC_OscConfig+0x470>)
20005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000571a:	2b00      	cmp	r3, #0
2000571c:	d10f      	bne.n	2000573e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
2000571e:	2300      	movs	r3, #0
20005720:	60bb      	str	r3, [r7, #8]
20005722:	4b7d      	ldr	r3, [pc, #500]	; (20005918 <HAL_RCC_OscConfig+0x470>)
20005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20005726:	4a7c      	ldr	r2, [pc, #496]	; (20005918 <HAL_RCC_OscConfig+0x470>)
20005728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000572c:	6413      	str	r3, [r2, #64]	; 0x40
2000572e:	4b7a      	ldr	r3, [pc, #488]	; (20005918 <HAL_RCC_OscConfig+0x470>)
20005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20005732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20005736:	60bb      	str	r3, [r7, #8]
20005738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
2000573a:	2301      	movs	r3, #1
2000573c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000573e:	4b77      	ldr	r3, [pc, #476]	; (2000591c <HAL_RCC_OscConfig+0x474>)
20005740:	681b      	ldr	r3, [r3, #0]
20005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
20005746:	2b00      	cmp	r3, #0
20005748:	d118      	bne.n	2000577c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
2000574a:	4b74      	ldr	r3, [pc, #464]	; (2000591c <HAL_RCC_OscConfig+0x474>)
2000574c:	681b      	ldr	r3, [r3, #0]
2000574e:	4a73      	ldr	r2, [pc, #460]	; (2000591c <HAL_RCC_OscConfig+0x474>)
20005750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20005754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
20005756:	f7ff f9e9 	bl	20004b2c <HAL_GetTick>
2000575a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000575c:	e008      	b.n	20005770 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000575e:	f7ff f9e5 	bl	20004b2c <HAL_GetTick>
20005762:	4602      	mov	r2, r0
20005764:	693b      	ldr	r3, [r7, #16]
20005766:	1ad3      	subs	r3, r2, r3
20005768:	2b02      	cmp	r3, #2
2000576a:	d901      	bls.n	20005770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
2000576c:	2303      	movs	r3, #3
2000576e:	e10c      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20005770:	4b6a      	ldr	r3, [pc, #424]	; (2000591c <HAL_RCC_OscConfig+0x474>)
20005772:	681b      	ldr	r3, [r3, #0]
20005774:	f403 7380 	and.w	r3, r3, #256	; 0x100
20005778:	2b00      	cmp	r3, #0
2000577a:	d0f0      	beq.n	2000575e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2000577c:	687b      	ldr	r3, [r7, #4]
2000577e:	689b      	ldr	r3, [r3, #8]
20005780:	2b01      	cmp	r3, #1
20005782:	d106      	bne.n	20005792 <HAL_RCC_OscConfig+0x2ea>
20005784:	4b64      	ldr	r3, [pc, #400]	; (20005918 <HAL_RCC_OscConfig+0x470>)
20005786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20005788:	4a63      	ldr	r2, [pc, #396]	; (20005918 <HAL_RCC_OscConfig+0x470>)
2000578a:	f043 0301 	orr.w	r3, r3, #1
2000578e:	6713      	str	r3, [r2, #112]	; 0x70
20005790:	e01c      	b.n	200057cc <HAL_RCC_OscConfig+0x324>
20005792:	687b      	ldr	r3, [r7, #4]
20005794:	689b      	ldr	r3, [r3, #8]
20005796:	2b05      	cmp	r3, #5
20005798:	d10c      	bne.n	200057b4 <HAL_RCC_OscConfig+0x30c>
2000579a:	4b5f      	ldr	r3, [pc, #380]	; (20005918 <HAL_RCC_OscConfig+0x470>)
2000579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000579e:	4a5e      	ldr	r2, [pc, #376]	; (20005918 <HAL_RCC_OscConfig+0x470>)
200057a0:	f043 0304 	orr.w	r3, r3, #4
200057a4:	6713      	str	r3, [r2, #112]	; 0x70
200057a6:	4b5c      	ldr	r3, [pc, #368]	; (20005918 <HAL_RCC_OscConfig+0x470>)
200057a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200057aa:	4a5b      	ldr	r2, [pc, #364]	; (20005918 <HAL_RCC_OscConfig+0x470>)
200057ac:	f043 0301 	orr.w	r3, r3, #1
200057b0:	6713      	str	r3, [r2, #112]	; 0x70
200057b2:	e00b      	b.n	200057cc <HAL_RCC_OscConfig+0x324>
200057b4:	4b58      	ldr	r3, [pc, #352]	; (20005918 <HAL_RCC_OscConfig+0x470>)
200057b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200057b8:	4a57      	ldr	r2, [pc, #348]	; (20005918 <HAL_RCC_OscConfig+0x470>)
200057ba:	f023 0301 	bic.w	r3, r3, #1
200057be:	6713      	str	r3, [r2, #112]	; 0x70
200057c0:	4b55      	ldr	r3, [pc, #340]	; (20005918 <HAL_RCC_OscConfig+0x470>)
200057c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200057c4:	4a54      	ldr	r2, [pc, #336]	; (20005918 <HAL_RCC_OscConfig+0x470>)
200057c6:	f023 0304 	bic.w	r3, r3, #4
200057ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
200057cc:	687b      	ldr	r3, [r7, #4]
200057ce:	689b      	ldr	r3, [r3, #8]
200057d0:	2b00      	cmp	r3, #0
200057d2:	d015      	beq.n	20005800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200057d4:	f7ff f9aa 	bl	20004b2c <HAL_GetTick>
200057d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200057da:	e00a      	b.n	200057f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
200057dc:	f7ff f9a6 	bl	20004b2c <HAL_GetTick>
200057e0:	4602      	mov	r2, r0
200057e2:	693b      	ldr	r3, [r7, #16]
200057e4:	1ad3      	subs	r3, r2, r3
200057e6:	f241 3288 	movw	r2, #5000	; 0x1388
200057ea:	4293      	cmp	r3, r2
200057ec:	d901      	bls.n	200057f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
200057ee:	2303      	movs	r3, #3
200057f0:	e0cb      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200057f2:	4b49      	ldr	r3, [pc, #292]	; (20005918 <HAL_RCC_OscConfig+0x470>)
200057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200057f6:	f003 0302 	and.w	r3, r3, #2
200057fa:	2b00      	cmp	r3, #0
200057fc:	d0ee      	beq.n	200057dc <HAL_RCC_OscConfig+0x334>
200057fe:	e014      	b.n	2000582a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
20005800:	f7ff f994 	bl	20004b2c <HAL_GetTick>
20005804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20005806:	e00a      	b.n	2000581e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20005808:	f7ff f990 	bl	20004b2c <HAL_GetTick>
2000580c:	4602      	mov	r2, r0
2000580e:	693b      	ldr	r3, [r7, #16]
20005810:	1ad3      	subs	r3, r2, r3
20005812:	f241 3288 	movw	r2, #5000	; 0x1388
20005816:	4293      	cmp	r3, r2
20005818:	d901      	bls.n	2000581e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
2000581a:	2303      	movs	r3, #3
2000581c:	e0b5      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000581e:	4b3e      	ldr	r3, [pc, #248]	; (20005918 <HAL_RCC_OscConfig+0x470>)
20005820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20005822:	f003 0302 	and.w	r3, r3, #2
20005826:	2b00      	cmp	r3, #0
20005828:	d1ee      	bne.n	20005808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
2000582a:	7dfb      	ldrb	r3, [r7, #23]
2000582c:	2b01      	cmp	r3, #1
2000582e:	d105      	bne.n	2000583c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
20005830:	4b39      	ldr	r3, [pc, #228]	; (20005918 <HAL_RCC_OscConfig+0x470>)
20005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20005834:	4a38      	ldr	r2, [pc, #224]	; (20005918 <HAL_RCC_OscConfig+0x470>)
20005836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000583a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2000583c:	687b      	ldr	r3, [r7, #4]
2000583e:	699b      	ldr	r3, [r3, #24]
20005840:	2b00      	cmp	r3, #0
20005842:	f000 80a1 	beq.w	20005988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20005846:	4b34      	ldr	r3, [pc, #208]	; (20005918 <HAL_RCC_OscConfig+0x470>)
20005848:	689b      	ldr	r3, [r3, #8]
2000584a:	f003 030c 	and.w	r3, r3, #12
2000584e:	2b08      	cmp	r3, #8
20005850:	d05c      	beq.n	2000590c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20005852:	687b      	ldr	r3, [r7, #4]
20005854:	699b      	ldr	r3, [r3, #24]
20005856:	2b02      	cmp	r3, #2
20005858:	d141      	bne.n	200058de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000585a:	4b31      	ldr	r3, [pc, #196]	; (20005920 <HAL_RCC_OscConfig+0x478>)
2000585c:	2200      	movs	r2, #0
2000585e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20005860:	f7ff f964 	bl	20004b2c <HAL_GetTick>
20005864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20005866:	e008      	b.n	2000587a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20005868:	f7ff f960 	bl	20004b2c <HAL_GetTick>
2000586c:	4602      	mov	r2, r0
2000586e:	693b      	ldr	r3, [r7, #16]
20005870:	1ad3      	subs	r3, r2, r3
20005872:	2b02      	cmp	r3, #2
20005874:	d901      	bls.n	2000587a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
20005876:	2303      	movs	r3, #3
20005878:	e087      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000587a:	4b27      	ldr	r3, [pc, #156]	; (20005918 <HAL_RCC_OscConfig+0x470>)
2000587c:	681b      	ldr	r3, [r3, #0]
2000587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20005882:	2b00      	cmp	r3, #0
20005884:	d1f0      	bne.n	20005868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
20005886:	687b      	ldr	r3, [r7, #4]
20005888:	69da      	ldr	r2, [r3, #28]
2000588a:	687b      	ldr	r3, [r7, #4]
2000588c:	6a1b      	ldr	r3, [r3, #32]
2000588e:	431a      	orrs	r2, r3
20005890:	687b      	ldr	r3, [r7, #4]
20005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005894:	019b      	lsls	r3, r3, #6
20005896:	431a      	orrs	r2, r3
20005898:	687b      	ldr	r3, [r7, #4]
2000589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000589c:	085b      	lsrs	r3, r3, #1
2000589e:	3b01      	subs	r3, #1
200058a0:	041b      	lsls	r3, r3, #16
200058a2:	431a      	orrs	r2, r3
200058a4:	687b      	ldr	r3, [r7, #4]
200058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200058a8:	061b      	lsls	r3, r3, #24
200058aa:	491b      	ldr	r1, [pc, #108]	; (20005918 <HAL_RCC_OscConfig+0x470>)
200058ac:	4313      	orrs	r3, r2
200058ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
200058b0:	4b1b      	ldr	r3, [pc, #108]	; (20005920 <HAL_RCC_OscConfig+0x478>)
200058b2:	2201      	movs	r2, #1
200058b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200058b6:	f7ff f939 	bl	20004b2c <HAL_GetTick>
200058ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200058bc:	e008      	b.n	200058d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200058be:	f7ff f935 	bl	20004b2c <HAL_GetTick>
200058c2:	4602      	mov	r2, r0
200058c4:	693b      	ldr	r3, [r7, #16]
200058c6:	1ad3      	subs	r3, r2, r3
200058c8:	2b02      	cmp	r3, #2
200058ca:	d901      	bls.n	200058d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
200058cc:	2303      	movs	r3, #3
200058ce:	e05c      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200058d0:	4b11      	ldr	r3, [pc, #68]	; (20005918 <HAL_RCC_OscConfig+0x470>)
200058d2:	681b      	ldr	r3, [r3, #0]
200058d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200058d8:	2b00      	cmp	r3, #0
200058da:	d0f0      	beq.n	200058be <HAL_RCC_OscConfig+0x416>
200058dc:	e054      	b.n	20005988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
200058de:	4b10      	ldr	r3, [pc, #64]	; (20005920 <HAL_RCC_OscConfig+0x478>)
200058e0:	2200      	movs	r2, #0
200058e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200058e4:	f7ff f922 	bl	20004b2c <HAL_GetTick>
200058e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200058ea:	e008      	b.n	200058fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200058ec:	f7ff f91e 	bl	20004b2c <HAL_GetTick>
200058f0:	4602      	mov	r2, r0
200058f2:	693b      	ldr	r3, [r7, #16]
200058f4:	1ad3      	subs	r3, r2, r3
200058f6:	2b02      	cmp	r3, #2
200058f8:	d901      	bls.n	200058fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
200058fa:	2303      	movs	r3, #3
200058fc:	e045      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200058fe:	4b06      	ldr	r3, [pc, #24]	; (20005918 <HAL_RCC_OscConfig+0x470>)
20005900:	681b      	ldr	r3, [r3, #0]
20005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20005906:	2b00      	cmp	r3, #0
20005908:	d1f0      	bne.n	200058ec <HAL_RCC_OscConfig+0x444>
2000590a:	e03d      	b.n	20005988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
2000590c:	687b      	ldr	r3, [r7, #4]
2000590e:	699b      	ldr	r3, [r3, #24]
20005910:	2b01      	cmp	r3, #1
20005912:	d107      	bne.n	20005924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
20005914:	2301      	movs	r3, #1
20005916:	e038      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
20005918:	40023800 	.word	0x40023800
2000591c:	40007000 	.word	0x40007000
20005920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
20005924:	4b1b      	ldr	r3, [pc, #108]	; (20005994 <HAL_RCC_OscConfig+0x4ec>)
20005926:	685b      	ldr	r3, [r3, #4]
20005928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2000592a:	687b      	ldr	r3, [r7, #4]
2000592c:	699b      	ldr	r3, [r3, #24]
2000592e:	2b01      	cmp	r3, #1
20005930:	d028      	beq.n	20005984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20005932:	68fb      	ldr	r3, [r7, #12]
20005934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
20005938:	687b      	ldr	r3, [r7, #4]
2000593a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2000593c:	429a      	cmp	r2, r3
2000593e:	d121      	bne.n	20005984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20005940:	68fb      	ldr	r3, [r7, #12]
20005942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
20005946:	687b      	ldr	r3, [r7, #4]
20005948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000594a:	429a      	cmp	r2, r3
2000594c:	d11a      	bne.n	20005984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
2000594e:	68fa      	ldr	r2, [r7, #12]
20005950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
20005954:	4013      	ands	r3, r2
20005956:	687a      	ldr	r2, [r7, #4]
20005958:	6a52      	ldr	r2, [r2, #36]	; 0x24
2000595a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
2000595c:	4293      	cmp	r3, r2
2000595e:	d111      	bne.n	20005984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20005960:	68fb      	ldr	r3, [r7, #12]
20005962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
20005966:	687b      	ldr	r3, [r7, #4]
20005968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000596a:	085b      	lsrs	r3, r3, #1
2000596c:	3b01      	subs	r3, #1
2000596e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20005970:	429a      	cmp	r2, r3
20005972:	d107      	bne.n	20005984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
20005974:	68fb      	ldr	r3, [r7, #12]
20005976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
2000597a:	687b      	ldr	r3, [r7, #4]
2000597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000597e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20005980:	429a      	cmp	r2, r3
20005982:	d001      	beq.n	20005988 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
20005984:	2301      	movs	r3, #1
20005986:	e000      	b.n	2000598a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
20005988:	2300      	movs	r3, #0
}
2000598a:	4618      	mov	r0, r3
2000598c:	3718      	adds	r7, #24
2000598e:	46bd      	mov	sp, r7
20005990:	bd80      	pop	{r7, pc}
20005992:	bf00      	nop
20005994:	40023800 	.word	0x40023800

20005998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20005998:	b580      	push	{r7, lr}
2000599a:	b084      	sub	sp, #16
2000599c:	af00      	add	r7, sp, #0
2000599e:	6078      	str	r0, [r7, #4]
200059a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
200059a2:	687b      	ldr	r3, [r7, #4]
200059a4:	2b00      	cmp	r3, #0
200059a6:	d101      	bne.n	200059ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
200059a8:	2301      	movs	r3, #1
200059aa:	e0cc      	b.n	20005b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
200059ac:	4b68      	ldr	r3, [pc, #416]	; (20005b50 <HAL_RCC_ClockConfig+0x1b8>)
200059ae:	681b      	ldr	r3, [r3, #0]
200059b0:	f003 0307 	and.w	r3, r3, #7
200059b4:	683a      	ldr	r2, [r7, #0]
200059b6:	429a      	cmp	r2, r3
200059b8:	d90c      	bls.n	200059d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200059ba:	4b65      	ldr	r3, [pc, #404]	; (20005b50 <HAL_RCC_ClockConfig+0x1b8>)
200059bc:	683a      	ldr	r2, [r7, #0]
200059be:	b2d2      	uxtb	r2, r2
200059c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
200059c2:	4b63      	ldr	r3, [pc, #396]	; (20005b50 <HAL_RCC_ClockConfig+0x1b8>)
200059c4:	681b      	ldr	r3, [r3, #0]
200059c6:	f003 0307 	and.w	r3, r3, #7
200059ca:	683a      	ldr	r2, [r7, #0]
200059cc:	429a      	cmp	r2, r3
200059ce:	d001      	beq.n	200059d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
200059d0:	2301      	movs	r3, #1
200059d2:	e0b8      	b.n	20005b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
200059d4:	687b      	ldr	r3, [r7, #4]
200059d6:	681b      	ldr	r3, [r3, #0]
200059d8:	f003 0302 	and.w	r3, r3, #2
200059dc:	2b00      	cmp	r3, #0
200059de:	d020      	beq.n	20005a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
200059e0:	687b      	ldr	r3, [r7, #4]
200059e2:	681b      	ldr	r3, [r3, #0]
200059e4:	f003 0304 	and.w	r3, r3, #4
200059e8:	2b00      	cmp	r3, #0
200059ea:	d005      	beq.n	200059f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
200059ec:	4b59      	ldr	r3, [pc, #356]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
200059ee:	689b      	ldr	r3, [r3, #8]
200059f0:	4a58      	ldr	r2, [pc, #352]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
200059f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
200059f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
200059f8:	687b      	ldr	r3, [r7, #4]
200059fa:	681b      	ldr	r3, [r3, #0]
200059fc:	f003 0308 	and.w	r3, r3, #8
20005a00:	2b00      	cmp	r3, #0
20005a02:	d005      	beq.n	20005a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20005a04:	4b53      	ldr	r3, [pc, #332]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005a06:	689b      	ldr	r3, [r3, #8]
20005a08:	4a52      	ldr	r2, [pc, #328]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
20005a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20005a10:	4b50      	ldr	r3, [pc, #320]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005a12:	689b      	ldr	r3, [r3, #8]
20005a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
20005a18:	687b      	ldr	r3, [r7, #4]
20005a1a:	689b      	ldr	r3, [r3, #8]
20005a1c:	494d      	ldr	r1, [pc, #308]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005a1e:	4313      	orrs	r3, r2
20005a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20005a22:	687b      	ldr	r3, [r7, #4]
20005a24:	681b      	ldr	r3, [r3, #0]
20005a26:	f003 0301 	and.w	r3, r3, #1
20005a2a:	2b00      	cmp	r3, #0
20005a2c:	d044      	beq.n	20005ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20005a2e:	687b      	ldr	r3, [r7, #4]
20005a30:	685b      	ldr	r3, [r3, #4]
20005a32:	2b01      	cmp	r3, #1
20005a34:	d107      	bne.n	20005a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20005a36:	4b47      	ldr	r3, [pc, #284]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005a38:	681b      	ldr	r3, [r3, #0]
20005a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005a3e:	2b00      	cmp	r3, #0
20005a40:	d119      	bne.n	20005a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20005a42:	2301      	movs	r3, #1
20005a44:	e07f      	b.n	20005b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20005a46:	687b      	ldr	r3, [r7, #4]
20005a48:	685b      	ldr	r3, [r3, #4]
20005a4a:	2b02      	cmp	r3, #2
20005a4c:	d003      	beq.n	20005a56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
20005a4e:	687b      	ldr	r3, [r7, #4]
20005a50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20005a52:	2b03      	cmp	r3, #3
20005a54:	d107      	bne.n	20005a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20005a56:	4b3f      	ldr	r3, [pc, #252]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005a58:	681b      	ldr	r3, [r3, #0]
20005a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20005a5e:	2b00      	cmp	r3, #0
20005a60:	d109      	bne.n	20005a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20005a62:	2301      	movs	r3, #1
20005a64:	e06f      	b.n	20005b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20005a66:	4b3b      	ldr	r3, [pc, #236]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005a68:	681b      	ldr	r3, [r3, #0]
20005a6a:	f003 0302 	and.w	r3, r3, #2
20005a6e:	2b00      	cmp	r3, #0
20005a70:	d101      	bne.n	20005a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20005a72:	2301      	movs	r3, #1
20005a74:	e067      	b.n	20005b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20005a76:	4b37      	ldr	r3, [pc, #220]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005a78:	689b      	ldr	r3, [r3, #8]
20005a7a:	f023 0203 	bic.w	r2, r3, #3
20005a7e:	687b      	ldr	r3, [r7, #4]
20005a80:	685b      	ldr	r3, [r3, #4]
20005a82:	4934      	ldr	r1, [pc, #208]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005a84:	4313      	orrs	r3, r2
20005a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
20005a88:	f7ff f850 	bl	20004b2c <HAL_GetTick>
20005a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20005a8e:	e00a      	b.n	20005aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20005a90:	f7ff f84c 	bl	20004b2c <HAL_GetTick>
20005a94:	4602      	mov	r2, r0
20005a96:	68fb      	ldr	r3, [r7, #12]
20005a98:	1ad3      	subs	r3, r2, r3
20005a9a:	f241 3288 	movw	r2, #5000	; 0x1388
20005a9e:	4293      	cmp	r3, r2
20005aa0:	d901      	bls.n	20005aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
20005aa2:	2303      	movs	r3, #3
20005aa4:	e04f      	b.n	20005b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20005aa6:	4b2b      	ldr	r3, [pc, #172]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005aa8:	689b      	ldr	r3, [r3, #8]
20005aaa:	f003 020c 	and.w	r2, r3, #12
20005aae:	687b      	ldr	r3, [r7, #4]
20005ab0:	685b      	ldr	r3, [r3, #4]
20005ab2:	009b      	lsls	r3, r3, #2
20005ab4:	429a      	cmp	r2, r3
20005ab6:	d1eb      	bne.n	20005a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
20005ab8:	4b25      	ldr	r3, [pc, #148]	; (20005b50 <HAL_RCC_ClockConfig+0x1b8>)
20005aba:	681b      	ldr	r3, [r3, #0]
20005abc:	f003 0307 	and.w	r3, r3, #7
20005ac0:	683a      	ldr	r2, [r7, #0]
20005ac2:	429a      	cmp	r2, r3
20005ac4:	d20c      	bcs.n	20005ae0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20005ac6:	4b22      	ldr	r3, [pc, #136]	; (20005b50 <HAL_RCC_ClockConfig+0x1b8>)
20005ac8:	683a      	ldr	r2, [r7, #0]
20005aca:	b2d2      	uxtb	r2, r2
20005acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20005ace:	4b20      	ldr	r3, [pc, #128]	; (20005b50 <HAL_RCC_ClockConfig+0x1b8>)
20005ad0:	681b      	ldr	r3, [r3, #0]
20005ad2:	f003 0307 	and.w	r3, r3, #7
20005ad6:	683a      	ldr	r2, [r7, #0]
20005ad8:	429a      	cmp	r2, r3
20005ada:	d001      	beq.n	20005ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
20005adc:	2301      	movs	r3, #1
20005ade:	e032      	b.n	20005b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20005ae0:	687b      	ldr	r3, [r7, #4]
20005ae2:	681b      	ldr	r3, [r3, #0]
20005ae4:	f003 0304 	and.w	r3, r3, #4
20005ae8:	2b00      	cmp	r3, #0
20005aea:	d008      	beq.n	20005afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20005aec:	4b19      	ldr	r3, [pc, #100]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005aee:	689b      	ldr	r3, [r3, #8]
20005af0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
20005af4:	687b      	ldr	r3, [r7, #4]
20005af6:	68db      	ldr	r3, [r3, #12]
20005af8:	4916      	ldr	r1, [pc, #88]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005afa:	4313      	orrs	r3, r2
20005afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20005afe:	687b      	ldr	r3, [r7, #4]
20005b00:	681b      	ldr	r3, [r3, #0]
20005b02:	f003 0308 	and.w	r3, r3, #8
20005b06:	2b00      	cmp	r3, #0
20005b08:	d009      	beq.n	20005b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20005b0a:	4b12      	ldr	r3, [pc, #72]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005b0c:	689b      	ldr	r3, [r3, #8]
20005b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20005b12:	687b      	ldr	r3, [r7, #4]
20005b14:	691b      	ldr	r3, [r3, #16]
20005b16:	00db      	lsls	r3, r3, #3
20005b18:	490e      	ldr	r1, [pc, #56]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005b1a:	4313      	orrs	r3, r2
20005b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
20005b1e:	f000 f821 	bl	20005b64 <HAL_RCC_GetSysClockFreq>
20005b22:	4602      	mov	r2, r0
20005b24:	4b0b      	ldr	r3, [pc, #44]	; (20005b54 <HAL_RCC_ClockConfig+0x1bc>)
20005b26:	689b      	ldr	r3, [r3, #8]
20005b28:	091b      	lsrs	r3, r3, #4
20005b2a:	f003 030f 	and.w	r3, r3, #15
20005b2e:	490a      	ldr	r1, [pc, #40]	; (20005b58 <HAL_RCC_ClockConfig+0x1c0>)
20005b30:	5ccb      	ldrb	r3, [r1, r3]
20005b32:	fa22 f303 	lsr.w	r3, r2, r3
20005b36:	4a09      	ldr	r2, [pc, #36]	; (20005b5c <HAL_RCC_ClockConfig+0x1c4>)
20005b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
20005b3a:	4b09      	ldr	r3, [pc, #36]	; (20005b60 <HAL_RCC_ClockConfig+0x1c8>)
20005b3c:	681b      	ldr	r3, [r3, #0]
20005b3e:	4618      	mov	r0, r3
20005b40:	f7fe ffb0 	bl	20004aa4 <HAL_InitTick>

  return HAL_OK;
20005b44:	2300      	movs	r3, #0
}
20005b46:	4618      	mov	r0, r3
20005b48:	3710      	adds	r7, #16
20005b4a:	46bd      	mov	sp, r7
20005b4c:	bd80      	pop	{r7, pc}
20005b4e:	bf00      	nop
20005b50:	40023c00 	.word	0x40023c00
20005b54:	40023800 	.word	0x40023800
20005b58:	20014330 	.word	0x20014330
20005b5c:	2001475c 	.word	0x2001475c
20005b60:	20014780 	.word	0x20014780

20005b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
20005b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20005b68:	b090      	sub	sp, #64	; 0x40
20005b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
20005b6c:	2300      	movs	r3, #0
20005b6e:	637b      	str	r3, [r7, #52]	; 0x34
20005b70:	2300      	movs	r3, #0
20005b72:	63fb      	str	r3, [r7, #60]	; 0x3c
20005b74:	2300      	movs	r3, #0
20005b76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
20005b78:	2300      	movs	r3, #0
20005b7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20005b7c:	4b59      	ldr	r3, [pc, #356]	; (20005ce4 <HAL_RCC_GetSysClockFreq+0x180>)
20005b7e:	689b      	ldr	r3, [r3, #8]
20005b80:	f003 030c 	and.w	r3, r3, #12
20005b84:	2b08      	cmp	r3, #8
20005b86:	d00d      	beq.n	20005ba4 <HAL_RCC_GetSysClockFreq+0x40>
20005b88:	2b08      	cmp	r3, #8
20005b8a:	f200 80a1 	bhi.w	20005cd0 <HAL_RCC_GetSysClockFreq+0x16c>
20005b8e:	2b00      	cmp	r3, #0
20005b90:	d002      	beq.n	20005b98 <HAL_RCC_GetSysClockFreq+0x34>
20005b92:	2b04      	cmp	r3, #4
20005b94:	d003      	beq.n	20005b9e <HAL_RCC_GetSysClockFreq+0x3a>
20005b96:	e09b      	b.n	20005cd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20005b98:	4b53      	ldr	r3, [pc, #332]	; (20005ce8 <HAL_RCC_GetSysClockFreq+0x184>)
20005b9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
20005b9c:	e09b      	b.n	20005cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20005b9e:	4b53      	ldr	r3, [pc, #332]	; (20005cec <HAL_RCC_GetSysClockFreq+0x188>)
20005ba0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
20005ba2:	e098      	b.n	20005cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20005ba4:	4b4f      	ldr	r3, [pc, #316]	; (20005ce4 <HAL_RCC_GetSysClockFreq+0x180>)
20005ba6:	685b      	ldr	r3, [r3, #4]
20005ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20005bac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20005bae:	4b4d      	ldr	r3, [pc, #308]	; (20005ce4 <HAL_RCC_GetSysClockFreq+0x180>)
20005bb0:	685b      	ldr	r3, [r3, #4]
20005bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20005bb6:	2b00      	cmp	r3, #0
20005bb8:	d028      	beq.n	20005c0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20005bba:	4b4a      	ldr	r3, [pc, #296]	; (20005ce4 <HAL_RCC_GetSysClockFreq+0x180>)
20005bbc:	685b      	ldr	r3, [r3, #4]
20005bbe:	099b      	lsrs	r3, r3, #6
20005bc0:	2200      	movs	r2, #0
20005bc2:	623b      	str	r3, [r7, #32]
20005bc4:	627a      	str	r2, [r7, #36]	; 0x24
20005bc6:	6a3b      	ldr	r3, [r7, #32]
20005bc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
20005bcc:	2100      	movs	r1, #0
20005bce:	4b47      	ldr	r3, [pc, #284]	; (20005cec <HAL_RCC_GetSysClockFreq+0x188>)
20005bd0:	fb03 f201 	mul.w	r2, r3, r1
20005bd4:	2300      	movs	r3, #0
20005bd6:	fb00 f303 	mul.w	r3, r0, r3
20005bda:	4413      	add	r3, r2
20005bdc:	4a43      	ldr	r2, [pc, #268]	; (20005cec <HAL_RCC_GetSysClockFreq+0x188>)
20005bde:	fba0 1202 	umull	r1, r2, r0, r2
20005be2:	62fa      	str	r2, [r7, #44]	; 0x2c
20005be4:	460a      	mov	r2, r1
20005be6:	62ba      	str	r2, [r7, #40]	; 0x28
20005be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20005bea:	4413      	add	r3, r2
20005bec:	62fb      	str	r3, [r7, #44]	; 0x2c
20005bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20005bf0:	2200      	movs	r2, #0
20005bf2:	61bb      	str	r3, [r7, #24]
20005bf4:	61fa      	str	r2, [r7, #28]
20005bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20005bfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
20005bfe:	f7fa ffdb 	bl	20000bb8 <__aeabi_uldivmod>
20005c02:	4602      	mov	r2, r0
20005c04:	460b      	mov	r3, r1
20005c06:	4613      	mov	r3, r2
20005c08:	63fb      	str	r3, [r7, #60]	; 0x3c
20005c0a:	e053      	b.n	20005cb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20005c0c:	4b35      	ldr	r3, [pc, #212]	; (20005ce4 <HAL_RCC_GetSysClockFreq+0x180>)
20005c0e:	685b      	ldr	r3, [r3, #4]
20005c10:	099b      	lsrs	r3, r3, #6
20005c12:	2200      	movs	r2, #0
20005c14:	613b      	str	r3, [r7, #16]
20005c16:	617a      	str	r2, [r7, #20]
20005c18:	693b      	ldr	r3, [r7, #16]
20005c1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
20005c1e:	f04f 0b00 	mov.w	fp, #0
20005c22:	4652      	mov	r2, sl
20005c24:	465b      	mov	r3, fp
20005c26:	f04f 0000 	mov.w	r0, #0
20005c2a:	f04f 0100 	mov.w	r1, #0
20005c2e:	0159      	lsls	r1, r3, #5
20005c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20005c34:	0150      	lsls	r0, r2, #5
20005c36:	4602      	mov	r2, r0
20005c38:	460b      	mov	r3, r1
20005c3a:	ebb2 080a 	subs.w	r8, r2, sl
20005c3e:	eb63 090b 	sbc.w	r9, r3, fp
20005c42:	f04f 0200 	mov.w	r2, #0
20005c46:	f04f 0300 	mov.w	r3, #0
20005c4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
20005c4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
20005c52:	ea4f 1288 	mov.w	r2, r8, lsl #6
20005c56:	ebb2 0408 	subs.w	r4, r2, r8
20005c5a:	eb63 0509 	sbc.w	r5, r3, r9
20005c5e:	f04f 0200 	mov.w	r2, #0
20005c62:	f04f 0300 	mov.w	r3, #0
20005c66:	00eb      	lsls	r3, r5, #3
20005c68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20005c6c:	00e2      	lsls	r2, r4, #3
20005c6e:	4614      	mov	r4, r2
20005c70:	461d      	mov	r5, r3
20005c72:	eb14 030a 	adds.w	r3, r4, sl
20005c76:	603b      	str	r3, [r7, #0]
20005c78:	eb45 030b 	adc.w	r3, r5, fp
20005c7c:	607b      	str	r3, [r7, #4]
20005c7e:	f04f 0200 	mov.w	r2, #0
20005c82:	f04f 0300 	mov.w	r3, #0
20005c86:	e9d7 4500 	ldrd	r4, r5, [r7]
20005c8a:	4629      	mov	r1, r5
20005c8c:	028b      	lsls	r3, r1, #10
20005c8e:	4621      	mov	r1, r4
20005c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20005c94:	4621      	mov	r1, r4
20005c96:	028a      	lsls	r2, r1, #10
20005c98:	4610      	mov	r0, r2
20005c9a:	4619      	mov	r1, r3
20005c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20005c9e:	2200      	movs	r2, #0
20005ca0:	60bb      	str	r3, [r7, #8]
20005ca2:	60fa      	str	r2, [r7, #12]
20005ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
20005ca8:	f7fa ff86 	bl	20000bb8 <__aeabi_uldivmod>
20005cac:	4602      	mov	r2, r0
20005cae:	460b      	mov	r3, r1
20005cb0:	4613      	mov	r3, r2
20005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
20005cb4:	4b0b      	ldr	r3, [pc, #44]	; (20005ce4 <HAL_RCC_GetSysClockFreq+0x180>)
20005cb6:	685b      	ldr	r3, [r3, #4]
20005cb8:	0c1b      	lsrs	r3, r3, #16
20005cba:	f003 0303 	and.w	r3, r3, #3
20005cbe:	3301      	adds	r3, #1
20005cc0:	005b      	lsls	r3, r3, #1
20005cc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
20005cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
20005ccc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
20005cce:	e002      	b.n	20005cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20005cd0:	4b05      	ldr	r3, [pc, #20]	; (20005ce8 <HAL_RCC_GetSysClockFreq+0x184>)
20005cd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
20005cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
20005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
20005cd8:	4618      	mov	r0, r3
20005cda:	3740      	adds	r7, #64	; 0x40
20005cdc:	46bd      	mov	sp, r7
20005cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20005ce2:	bf00      	nop
20005ce4:	40023800 	.word	0x40023800
20005ce8:	00f42400 	.word	0x00f42400
20005cec:	017d7840 	.word	0x017d7840

20005cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
20005cf0:	b580      	push	{r7, lr}
20005cf2:	b082      	sub	sp, #8
20005cf4:	af00      	add	r7, sp, #0
20005cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
20005cf8:	687b      	ldr	r3, [r7, #4]
20005cfa:	2b00      	cmp	r3, #0
20005cfc:	d101      	bne.n	20005d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
20005cfe:	2301      	movs	r3, #1
20005d00:	e07b      	b.n	20005dfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
20005d02:	687b      	ldr	r3, [r7, #4]
20005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005d06:	2b00      	cmp	r3, #0
20005d08:	d108      	bne.n	20005d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
20005d0a:	687b      	ldr	r3, [r7, #4]
20005d0c:	685b      	ldr	r3, [r3, #4]
20005d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20005d12:	d009      	beq.n	20005d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20005d14:	687b      	ldr	r3, [r7, #4]
20005d16:	2200      	movs	r2, #0
20005d18:	61da      	str	r2, [r3, #28]
20005d1a:	e005      	b.n	20005d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
20005d1c:	687b      	ldr	r3, [r7, #4]
20005d1e:	2200      	movs	r2, #0
20005d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
20005d22:	687b      	ldr	r3, [r7, #4]
20005d24:	2200      	movs	r2, #0
20005d26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20005d28:	687b      	ldr	r3, [r7, #4]
20005d2a:	2200      	movs	r2, #0
20005d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
20005d2e:	687b      	ldr	r3, [r7, #4]
20005d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20005d34:	b2db      	uxtb	r3, r3
20005d36:	2b00      	cmp	r3, #0
20005d38:	d106      	bne.n	20005d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
20005d3a:	687b      	ldr	r3, [r7, #4]
20005d3c:	2200      	movs	r2, #0
20005d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
20005d42:	6878      	ldr	r0, [r7, #4]
20005d44:	f7fe fa32 	bl	200041ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
20005d48:	687b      	ldr	r3, [r7, #4]
20005d4a:	2202      	movs	r2, #2
20005d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
20005d50:	687b      	ldr	r3, [r7, #4]
20005d52:	681b      	ldr	r3, [r3, #0]
20005d54:	681a      	ldr	r2, [r3, #0]
20005d56:	687b      	ldr	r3, [r7, #4]
20005d58:	681b      	ldr	r3, [r3, #0]
20005d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20005d5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
20005d60:	687b      	ldr	r3, [r7, #4]
20005d62:	685b      	ldr	r3, [r3, #4]
20005d64:	f403 7282 	and.w	r2, r3, #260	; 0x104
20005d68:	687b      	ldr	r3, [r7, #4]
20005d6a:	689b      	ldr	r3, [r3, #8]
20005d6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
20005d70:	431a      	orrs	r2, r3
20005d72:	687b      	ldr	r3, [r7, #4]
20005d74:	68db      	ldr	r3, [r3, #12]
20005d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
20005d7a:	431a      	orrs	r2, r3
20005d7c:	687b      	ldr	r3, [r7, #4]
20005d7e:	691b      	ldr	r3, [r3, #16]
20005d80:	f003 0302 	and.w	r3, r3, #2
20005d84:	431a      	orrs	r2, r3
20005d86:	687b      	ldr	r3, [r7, #4]
20005d88:	695b      	ldr	r3, [r3, #20]
20005d8a:	f003 0301 	and.w	r3, r3, #1
20005d8e:	431a      	orrs	r2, r3
20005d90:	687b      	ldr	r3, [r7, #4]
20005d92:	699b      	ldr	r3, [r3, #24]
20005d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
20005d98:	431a      	orrs	r2, r3
20005d9a:	687b      	ldr	r3, [r7, #4]
20005d9c:	69db      	ldr	r3, [r3, #28]
20005d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
20005da2:	431a      	orrs	r2, r3
20005da4:	687b      	ldr	r3, [r7, #4]
20005da6:	6a1b      	ldr	r3, [r3, #32]
20005da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
20005dac:	ea42 0103 	orr.w	r1, r2, r3
20005db0:	687b      	ldr	r3, [r7, #4]
20005db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005db4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
20005db8:	687b      	ldr	r3, [r7, #4]
20005dba:	681b      	ldr	r3, [r3, #0]
20005dbc:	430a      	orrs	r2, r1
20005dbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
20005dc0:	687b      	ldr	r3, [r7, #4]
20005dc2:	699b      	ldr	r3, [r3, #24]
20005dc4:	0c1b      	lsrs	r3, r3, #16
20005dc6:	f003 0104 	and.w	r1, r3, #4
20005dca:	687b      	ldr	r3, [r7, #4]
20005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005dce:	f003 0210 	and.w	r2, r3, #16
20005dd2:	687b      	ldr	r3, [r7, #4]
20005dd4:	681b      	ldr	r3, [r3, #0]
20005dd6:	430a      	orrs	r2, r1
20005dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
20005dda:	687b      	ldr	r3, [r7, #4]
20005ddc:	681b      	ldr	r3, [r3, #0]
20005dde:	69da      	ldr	r2, [r3, #28]
20005de0:	687b      	ldr	r3, [r7, #4]
20005de2:	681b      	ldr	r3, [r3, #0]
20005de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20005de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20005dea:	687b      	ldr	r3, [r7, #4]
20005dec:	2200      	movs	r2, #0
20005dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
20005df0:	687b      	ldr	r3, [r7, #4]
20005df2:	2201      	movs	r2, #1
20005df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
20005df8:	2300      	movs	r3, #0
}
20005dfa:	4618      	mov	r0, r3
20005dfc:	3708      	adds	r7, #8
20005dfe:	46bd      	mov	sp, r7
20005e00:	bd80      	pop	{r7, pc}

20005e02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
20005e02:	b580      	push	{r7, lr}
20005e04:	b088      	sub	sp, #32
20005e06:	af00      	add	r7, sp, #0
20005e08:	60f8      	str	r0, [r7, #12]
20005e0a:	60b9      	str	r1, [r7, #8]
20005e0c:	603b      	str	r3, [r7, #0]
20005e0e:	4613      	mov	r3, r2
20005e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
20005e12:	2300      	movs	r3, #0
20005e14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
20005e16:	68fb      	ldr	r3, [r7, #12]
20005e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20005e1c:	2b01      	cmp	r3, #1
20005e1e:	d101      	bne.n	20005e24 <HAL_SPI_Transmit+0x22>
20005e20:	2302      	movs	r3, #2
20005e22:	e126      	b.n	20006072 <HAL_SPI_Transmit+0x270>
20005e24:	68fb      	ldr	r3, [r7, #12]
20005e26:	2201      	movs	r2, #1
20005e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20005e2c:	f7fe fe7e 	bl	20004b2c <HAL_GetTick>
20005e30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
20005e32:	88fb      	ldrh	r3, [r7, #6]
20005e34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
20005e36:	68fb      	ldr	r3, [r7, #12]
20005e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20005e3c:	b2db      	uxtb	r3, r3
20005e3e:	2b01      	cmp	r3, #1
20005e40:	d002      	beq.n	20005e48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
20005e42:	2302      	movs	r3, #2
20005e44:	77fb      	strb	r3, [r7, #31]
    goto error;
20005e46:	e10b      	b.n	20006060 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
20005e48:	68bb      	ldr	r3, [r7, #8]
20005e4a:	2b00      	cmp	r3, #0
20005e4c:	d002      	beq.n	20005e54 <HAL_SPI_Transmit+0x52>
20005e4e:	88fb      	ldrh	r3, [r7, #6]
20005e50:	2b00      	cmp	r3, #0
20005e52:	d102      	bne.n	20005e5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
20005e54:	2301      	movs	r3, #1
20005e56:	77fb      	strb	r3, [r7, #31]
    goto error;
20005e58:	e102      	b.n	20006060 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
20005e5a:	68fb      	ldr	r3, [r7, #12]
20005e5c:	2203      	movs	r2, #3
20005e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20005e62:	68fb      	ldr	r3, [r7, #12]
20005e64:	2200      	movs	r2, #0
20005e66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
20005e68:	68fb      	ldr	r3, [r7, #12]
20005e6a:	68ba      	ldr	r2, [r7, #8]
20005e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20005e6e:	68fb      	ldr	r3, [r7, #12]
20005e70:	88fa      	ldrh	r2, [r7, #6]
20005e72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20005e74:	68fb      	ldr	r3, [r7, #12]
20005e76:	88fa      	ldrh	r2, [r7, #6]
20005e78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
20005e7a:	68fb      	ldr	r3, [r7, #12]
20005e7c:	2200      	movs	r2, #0
20005e7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
20005e80:	68fb      	ldr	r3, [r7, #12]
20005e82:	2200      	movs	r2, #0
20005e84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
20005e86:	68fb      	ldr	r3, [r7, #12]
20005e88:	2200      	movs	r2, #0
20005e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
20005e8c:	68fb      	ldr	r3, [r7, #12]
20005e8e:	2200      	movs	r2, #0
20005e90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
20005e92:	68fb      	ldr	r3, [r7, #12]
20005e94:	2200      	movs	r2, #0
20005e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20005e98:	68fb      	ldr	r3, [r7, #12]
20005e9a:	689b      	ldr	r3, [r3, #8]
20005e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20005ea0:	d10f      	bne.n	20005ec2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20005ea2:	68fb      	ldr	r3, [r7, #12]
20005ea4:	681b      	ldr	r3, [r3, #0]
20005ea6:	681a      	ldr	r2, [r3, #0]
20005ea8:	68fb      	ldr	r3, [r7, #12]
20005eaa:	681b      	ldr	r3, [r3, #0]
20005eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20005eb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
20005eb2:	68fb      	ldr	r3, [r7, #12]
20005eb4:	681b      	ldr	r3, [r3, #0]
20005eb6:	681a      	ldr	r2, [r3, #0]
20005eb8:	68fb      	ldr	r3, [r7, #12]
20005eba:	681b      	ldr	r3, [r3, #0]
20005ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20005ec0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20005ec2:	68fb      	ldr	r3, [r7, #12]
20005ec4:	681b      	ldr	r3, [r3, #0]
20005ec6:	681b      	ldr	r3, [r3, #0]
20005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
20005ecc:	2b40      	cmp	r3, #64	; 0x40
20005ece:	d007      	beq.n	20005ee0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20005ed0:	68fb      	ldr	r3, [r7, #12]
20005ed2:	681b      	ldr	r3, [r3, #0]
20005ed4:	681a      	ldr	r2, [r3, #0]
20005ed6:	68fb      	ldr	r3, [r7, #12]
20005ed8:	681b      	ldr	r3, [r3, #0]
20005eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20005ede:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
20005ee0:	68fb      	ldr	r3, [r7, #12]
20005ee2:	68db      	ldr	r3, [r3, #12]
20005ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20005ee8:	d14b      	bne.n	20005f82 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20005eea:	68fb      	ldr	r3, [r7, #12]
20005eec:	685b      	ldr	r3, [r3, #4]
20005eee:	2b00      	cmp	r3, #0
20005ef0:	d002      	beq.n	20005ef8 <HAL_SPI_Transmit+0xf6>
20005ef2:	8afb      	ldrh	r3, [r7, #22]
20005ef4:	2b01      	cmp	r3, #1
20005ef6:	d13e      	bne.n	20005f76 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20005ef8:	68fb      	ldr	r3, [r7, #12]
20005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005efc:	881a      	ldrh	r2, [r3, #0]
20005efe:	68fb      	ldr	r3, [r7, #12]
20005f00:	681b      	ldr	r3, [r3, #0]
20005f02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
20005f04:	68fb      	ldr	r3, [r7, #12]
20005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005f08:	1c9a      	adds	r2, r3, #2
20005f0a:	68fb      	ldr	r3, [r7, #12]
20005f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
20005f0e:	68fb      	ldr	r3, [r7, #12]
20005f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20005f12:	b29b      	uxth	r3, r3
20005f14:	3b01      	subs	r3, #1
20005f16:	b29a      	uxth	r2, r3
20005f18:	68fb      	ldr	r3, [r7, #12]
20005f1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
20005f1c:	e02b      	b.n	20005f76 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
20005f1e:	68fb      	ldr	r3, [r7, #12]
20005f20:	681b      	ldr	r3, [r3, #0]
20005f22:	689b      	ldr	r3, [r3, #8]
20005f24:	f003 0302 	and.w	r3, r3, #2
20005f28:	2b02      	cmp	r3, #2
20005f2a:	d112      	bne.n	20005f52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20005f2c:	68fb      	ldr	r3, [r7, #12]
20005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005f30:	881a      	ldrh	r2, [r3, #0]
20005f32:	68fb      	ldr	r3, [r7, #12]
20005f34:	681b      	ldr	r3, [r3, #0]
20005f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20005f38:	68fb      	ldr	r3, [r7, #12]
20005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005f3c:	1c9a      	adds	r2, r3, #2
20005f3e:	68fb      	ldr	r3, [r7, #12]
20005f40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20005f42:	68fb      	ldr	r3, [r7, #12]
20005f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20005f46:	b29b      	uxth	r3, r3
20005f48:	3b01      	subs	r3, #1
20005f4a:	b29a      	uxth	r2, r3
20005f4c:	68fb      	ldr	r3, [r7, #12]
20005f4e:	86da      	strh	r2, [r3, #54]	; 0x36
20005f50:	e011      	b.n	20005f76 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20005f52:	f7fe fdeb 	bl	20004b2c <HAL_GetTick>
20005f56:	4602      	mov	r2, r0
20005f58:	69bb      	ldr	r3, [r7, #24]
20005f5a:	1ad3      	subs	r3, r2, r3
20005f5c:	683a      	ldr	r2, [r7, #0]
20005f5e:	429a      	cmp	r2, r3
20005f60:	d803      	bhi.n	20005f6a <HAL_SPI_Transmit+0x168>
20005f62:	683b      	ldr	r3, [r7, #0]
20005f64:	f1b3 3fff 	cmp.w	r3, #4294967295
20005f68:	d102      	bne.n	20005f70 <HAL_SPI_Transmit+0x16e>
20005f6a:	683b      	ldr	r3, [r7, #0]
20005f6c:	2b00      	cmp	r3, #0
20005f6e:	d102      	bne.n	20005f76 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
20005f70:	2303      	movs	r3, #3
20005f72:	77fb      	strb	r3, [r7, #31]
          goto error;
20005f74:	e074      	b.n	20006060 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
20005f76:	68fb      	ldr	r3, [r7, #12]
20005f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20005f7a:	b29b      	uxth	r3, r3
20005f7c:	2b00      	cmp	r3, #0
20005f7e:	d1ce      	bne.n	20005f1e <HAL_SPI_Transmit+0x11c>
20005f80:	e04c      	b.n	2000601c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20005f82:	68fb      	ldr	r3, [r7, #12]
20005f84:	685b      	ldr	r3, [r3, #4]
20005f86:	2b00      	cmp	r3, #0
20005f88:	d002      	beq.n	20005f90 <HAL_SPI_Transmit+0x18e>
20005f8a:	8afb      	ldrh	r3, [r7, #22]
20005f8c:	2b01      	cmp	r3, #1
20005f8e:	d140      	bne.n	20006012 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
20005f90:	68fb      	ldr	r3, [r7, #12]
20005f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20005f94:	68fb      	ldr	r3, [r7, #12]
20005f96:	681b      	ldr	r3, [r3, #0]
20005f98:	330c      	adds	r3, #12
20005f9a:	7812      	ldrb	r2, [r2, #0]
20005f9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
20005f9e:	68fb      	ldr	r3, [r7, #12]
20005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005fa2:	1c5a      	adds	r2, r3, #1
20005fa4:	68fb      	ldr	r3, [r7, #12]
20005fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
20005fa8:	68fb      	ldr	r3, [r7, #12]
20005faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20005fac:	b29b      	uxth	r3, r3
20005fae:	3b01      	subs	r3, #1
20005fb0:	b29a      	uxth	r2, r3
20005fb2:	68fb      	ldr	r3, [r7, #12]
20005fb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
20005fb6:	e02c      	b.n	20006012 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
20005fb8:	68fb      	ldr	r3, [r7, #12]
20005fba:	681b      	ldr	r3, [r3, #0]
20005fbc:	689b      	ldr	r3, [r3, #8]
20005fbe:	f003 0302 	and.w	r3, r3, #2
20005fc2:	2b02      	cmp	r3, #2
20005fc4:	d113      	bne.n	20005fee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
20005fc6:	68fb      	ldr	r3, [r7, #12]
20005fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20005fca:	68fb      	ldr	r3, [r7, #12]
20005fcc:	681b      	ldr	r3, [r3, #0]
20005fce:	330c      	adds	r3, #12
20005fd0:	7812      	ldrb	r2, [r2, #0]
20005fd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
20005fd4:	68fb      	ldr	r3, [r7, #12]
20005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005fd8:	1c5a      	adds	r2, r3, #1
20005fda:	68fb      	ldr	r3, [r7, #12]
20005fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20005fde:	68fb      	ldr	r3, [r7, #12]
20005fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20005fe2:	b29b      	uxth	r3, r3
20005fe4:	3b01      	subs	r3, #1
20005fe6:	b29a      	uxth	r2, r3
20005fe8:	68fb      	ldr	r3, [r7, #12]
20005fea:	86da      	strh	r2, [r3, #54]	; 0x36
20005fec:	e011      	b.n	20006012 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20005fee:	f7fe fd9d 	bl	20004b2c <HAL_GetTick>
20005ff2:	4602      	mov	r2, r0
20005ff4:	69bb      	ldr	r3, [r7, #24]
20005ff6:	1ad3      	subs	r3, r2, r3
20005ff8:	683a      	ldr	r2, [r7, #0]
20005ffa:	429a      	cmp	r2, r3
20005ffc:	d803      	bhi.n	20006006 <HAL_SPI_Transmit+0x204>
20005ffe:	683b      	ldr	r3, [r7, #0]
20006000:	f1b3 3fff 	cmp.w	r3, #4294967295
20006004:	d102      	bne.n	2000600c <HAL_SPI_Transmit+0x20a>
20006006:	683b      	ldr	r3, [r7, #0]
20006008:	2b00      	cmp	r3, #0
2000600a:	d102      	bne.n	20006012 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
2000600c:	2303      	movs	r3, #3
2000600e:	77fb      	strb	r3, [r7, #31]
          goto error;
20006010:	e026      	b.n	20006060 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
20006012:	68fb      	ldr	r3, [r7, #12]
20006014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20006016:	b29b      	uxth	r3, r3
20006018:	2b00      	cmp	r3, #0
2000601a:	d1cd      	bne.n	20005fb8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
2000601c:	69ba      	ldr	r2, [r7, #24]
2000601e:	6839      	ldr	r1, [r7, #0]
20006020:	68f8      	ldr	r0, [r7, #12]
20006022:	f000 fa55 	bl	200064d0 <SPI_EndRxTxTransaction>
20006026:	4603      	mov	r3, r0
20006028:	2b00      	cmp	r3, #0
2000602a:	d002      	beq.n	20006032 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
2000602c:	68fb      	ldr	r3, [r7, #12]
2000602e:	2220      	movs	r2, #32
20006030:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20006032:	68fb      	ldr	r3, [r7, #12]
20006034:	689b      	ldr	r3, [r3, #8]
20006036:	2b00      	cmp	r3, #0
20006038:	d10a      	bne.n	20006050 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000603a:	2300      	movs	r3, #0
2000603c:	613b      	str	r3, [r7, #16]
2000603e:	68fb      	ldr	r3, [r7, #12]
20006040:	681b      	ldr	r3, [r3, #0]
20006042:	68db      	ldr	r3, [r3, #12]
20006044:	613b      	str	r3, [r7, #16]
20006046:	68fb      	ldr	r3, [r7, #12]
20006048:	681b      	ldr	r3, [r3, #0]
2000604a:	689b      	ldr	r3, [r3, #8]
2000604c:	613b      	str	r3, [r7, #16]
2000604e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20006050:	68fb      	ldr	r3, [r7, #12]
20006052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20006054:	2b00      	cmp	r3, #0
20006056:	d002      	beq.n	2000605e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
20006058:	2301      	movs	r3, #1
2000605a:	77fb      	strb	r3, [r7, #31]
2000605c:	e000      	b.n	20006060 <HAL_SPI_Transmit+0x25e>
  }

error:
2000605e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
20006060:	68fb      	ldr	r3, [r7, #12]
20006062:	2201      	movs	r2, #1
20006064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20006068:	68fb      	ldr	r3, [r7, #12]
2000606a:	2200      	movs	r2, #0
2000606c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20006070:	7ffb      	ldrb	r3, [r7, #31]
}
20006072:	4618      	mov	r0, r3
20006074:	3720      	adds	r7, #32
20006076:	46bd      	mov	sp, r7
20006078:	bd80      	pop	{r7, pc}

2000607a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
2000607a:	b580      	push	{r7, lr}
2000607c:	b08c      	sub	sp, #48	; 0x30
2000607e:	af00      	add	r7, sp, #0
20006080:	60f8      	str	r0, [r7, #12]
20006082:	60b9      	str	r1, [r7, #8]
20006084:	607a      	str	r2, [r7, #4]
20006086:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
20006088:	2301      	movs	r3, #1
2000608a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
2000608c:	2300      	movs	r3, #0
2000608e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
20006092:	68fb      	ldr	r3, [r7, #12]
20006094:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20006098:	2b01      	cmp	r3, #1
2000609a:	d101      	bne.n	200060a0 <HAL_SPI_TransmitReceive+0x26>
2000609c:	2302      	movs	r3, #2
2000609e:	e18a      	b.n	200063b6 <HAL_SPI_TransmitReceive+0x33c>
200060a0:	68fb      	ldr	r3, [r7, #12]
200060a2:	2201      	movs	r2, #1
200060a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
200060a8:	f7fe fd40 	bl	20004b2c <HAL_GetTick>
200060ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
200060ae:	68fb      	ldr	r3, [r7, #12]
200060b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200060b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
200060b8:	68fb      	ldr	r3, [r7, #12]
200060ba:	685b      	ldr	r3, [r3, #4]
200060bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
200060be:	887b      	ldrh	r3, [r7, #2]
200060c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
200060c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
200060c6:	2b01      	cmp	r3, #1
200060c8:	d00f      	beq.n	200060ea <HAL_SPI_TransmitReceive+0x70>
200060ca:	69fb      	ldr	r3, [r7, #28]
200060cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
200060d0:	d107      	bne.n	200060e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
200060d2:	68fb      	ldr	r3, [r7, #12]
200060d4:	689b      	ldr	r3, [r3, #8]
200060d6:	2b00      	cmp	r3, #0
200060d8:	d103      	bne.n	200060e2 <HAL_SPI_TransmitReceive+0x68>
200060da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
200060de:	2b04      	cmp	r3, #4
200060e0:	d003      	beq.n	200060ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
200060e2:	2302      	movs	r3, #2
200060e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
200060e8:	e15b      	b.n	200063a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
200060ea:	68bb      	ldr	r3, [r7, #8]
200060ec:	2b00      	cmp	r3, #0
200060ee:	d005      	beq.n	200060fc <HAL_SPI_TransmitReceive+0x82>
200060f0:	687b      	ldr	r3, [r7, #4]
200060f2:	2b00      	cmp	r3, #0
200060f4:	d002      	beq.n	200060fc <HAL_SPI_TransmitReceive+0x82>
200060f6:	887b      	ldrh	r3, [r7, #2]
200060f8:	2b00      	cmp	r3, #0
200060fa:	d103      	bne.n	20006104 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
200060fc:	2301      	movs	r3, #1
200060fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
20006102:	e14e      	b.n	200063a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20006104:	68fb      	ldr	r3, [r7, #12]
20006106:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000610a:	b2db      	uxtb	r3, r3
2000610c:	2b04      	cmp	r3, #4
2000610e:	d003      	beq.n	20006118 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20006110:	68fb      	ldr	r3, [r7, #12]
20006112:	2205      	movs	r2, #5
20006114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20006118:	68fb      	ldr	r3, [r7, #12]
2000611a:	2200      	movs	r2, #0
2000611c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2000611e:	68fb      	ldr	r3, [r7, #12]
20006120:	687a      	ldr	r2, [r7, #4]
20006122:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
20006124:	68fb      	ldr	r3, [r7, #12]
20006126:	887a      	ldrh	r2, [r7, #2]
20006128:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
2000612a:	68fb      	ldr	r3, [r7, #12]
2000612c:	887a      	ldrh	r2, [r7, #2]
2000612e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
20006130:	68fb      	ldr	r3, [r7, #12]
20006132:	68ba      	ldr	r2, [r7, #8]
20006134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
20006136:	68fb      	ldr	r3, [r7, #12]
20006138:	887a      	ldrh	r2, [r7, #2]
2000613a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
2000613c:	68fb      	ldr	r3, [r7, #12]
2000613e:	887a      	ldrh	r2, [r7, #2]
20006140:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20006142:	68fb      	ldr	r3, [r7, #12]
20006144:	2200      	movs	r2, #0
20006146:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20006148:	68fb      	ldr	r3, [r7, #12]
2000614a:	2200      	movs	r2, #0
2000614c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000614e:	68fb      	ldr	r3, [r7, #12]
20006150:	681b      	ldr	r3, [r3, #0]
20006152:	681b      	ldr	r3, [r3, #0]
20006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
20006158:	2b40      	cmp	r3, #64	; 0x40
2000615a:	d007      	beq.n	2000616c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
2000615c:	68fb      	ldr	r3, [r7, #12]
2000615e:	681b      	ldr	r3, [r3, #0]
20006160:	681a      	ldr	r2, [r3, #0]
20006162:	68fb      	ldr	r3, [r7, #12]
20006164:	681b      	ldr	r3, [r3, #0]
20006166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2000616a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
2000616c:	68fb      	ldr	r3, [r7, #12]
2000616e:	68db      	ldr	r3, [r3, #12]
20006170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20006174:	d178      	bne.n	20006268 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20006176:	68fb      	ldr	r3, [r7, #12]
20006178:	685b      	ldr	r3, [r3, #4]
2000617a:	2b00      	cmp	r3, #0
2000617c:	d002      	beq.n	20006184 <HAL_SPI_TransmitReceive+0x10a>
2000617e:	8b7b      	ldrh	r3, [r7, #26]
20006180:	2b01      	cmp	r3, #1
20006182:	d166      	bne.n	20006252 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20006184:	68fb      	ldr	r3, [r7, #12]
20006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006188:	881a      	ldrh	r2, [r3, #0]
2000618a:	68fb      	ldr	r3, [r7, #12]
2000618c:	681b      	ldr	r3, [r3, #0]
2000618e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
20006190:	68fb      	ldr	r3, [r7, #12]
20006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006194:	1c9a      	adds	r2, r3, #2
20006196:	68fb      	ldr	r3, [r7, #12]
20006198:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
2000619a:	68fb      	ldr	r3, [r7, #12]
2000619c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000619e:	b29b      	uxth	r3, r3
200061a0:	3b01      	subs	r3, #1
200061a2:	b29a      	uxth	r2, r3
200061a4:	68fb      	ldr	r3, [r7, #12]
200061a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
200061a8:	e053      	b.n	20006252 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
200061aa:	68fb      	ldr	r3, [r7, #12]
200061ac:	681b      	ldr	r3, [r3, #0]
200061ae:	689b      	ldr	r3, [r3, #8]
200061b0:	f003 0302 	and.w	r3, r3, #2
200061b4:	2b02      	cmp	r3, #2
200061b6:	d11b      	bne.n	200061f0 <HAL_SPI_TransmitReceive+0x176>
200061b8:	68fb      	ldr	r3, [r7, #12]
200061ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200061bc:	b29b      	uxth	r3, r3
200061be:	2b00      	cmp	r3, #0
200061c0:	d016      	beq.n	200061f0 <HAL_SPI_TransmitReceive+0x176>
200061c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200061c4:	2b01      	cmp	r3, #1
200061c6:	d113      	bne.n	200061f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
200061c8:	68fb      	ldr	r3, [r7, #12]
200061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200061cc:	881a      	ldrh	r2, [r3, #0]
200061ce:	68fb      	ldr	r3, [r7, #12]
200061d0:	681b      	ldr	r3, [r3, #0]
200061d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
200061d4:	68fb      	ldr	r3, [r7, #12]
200061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200061d8:	1c9a      	adds	r2, r3, #2
200061da:	68fb      	ldr	r3, [r7, #12]
200061dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
200061de:	68fb      	ldr	r3, [r7, #12]
200061e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200061e2:	b29b      	uxth	r3, r3
200061e4:	3b01      	subs	r3, #1
200061e6:	b29a      	uxth	r2, r3
200061e8:	68fb      	ldr	r3, [r7, #12]
200061ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
200061ec:	2300      	movs	r3, #0
200061ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
200061f0:	68fb      	ldr	r3, [r7, #12]
200061f2:	681b      	ldr	r3, [r3, #0]
200061f4:	689b      	ldr	r3, [r3, #8]
200061f6:	f003 0301 	and.w	r3, r3, #1
200061fa:	2b01      	cmp	r3, #1
200061fc:	d119      	bne.n	20006232 <HAL_SPI_TransmitReceive+0x1b8>
200061fe:	68fb      	ldr	r3, [r7, #12]
20006200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20006202:	b29b      	uxth	r3, r3
20006204:	2b00      	cmp	r3, #0
20006206:	d014      	beq.n	20006232 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20006208:	68fb      	ldr	r3, [r7, #12]
2000620a:	681b      	ldr	r3, [r3, #0]
2000620c:	68da      	ldr	r2, [r3, #12]
2000620e:	68fb      	ldr	r3, [r7, #12]
20006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20006212:	b292      	uxth	r2, r2
20006214:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20006216:	68fb      	ldr	r3, [r7, #12]
20006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000621a:	1c9a      	adds	r2, r3, #2
2000621c:	68fb      	ldr	r3, [r7, #12]
2000621e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20006220:	68fb      	ldr	r3, [r7, #12]
20006222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20006224:	b29b      	uxth	r3, r3
20006226:	3b01      	subs	r3, #1
20006228:	b29a      	uxth	r2, r3
2000622a:	68fb      	ldr	r3, [r7, #12]
2000622c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
2000622e:	2301      	movs	r3, #1
20006230:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
20006232:	f7fe fc7b 	bl	20004b2c <HAL_GetTick>
20006236:	4602      	mov	r2, r0
20006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000623a:	1ad3      	subs	r3, r2, r3
2000623c:	6bba      	ldr	r2, [r7, #56]	; 0x38
2000623e:	429a      	cmp	r2, r3
20006240:	d807      	bhi.n	20006252 <HAL_SPI_TransmitReceive+0x1d8>
20006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20006244:	f1b3 3fff 	cmp.w	r3, #4294967295
20006248:	d003      	beq.n	20006252 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
2000624a:	2303      	movs	r3, #3
2000624c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
20006250:	e0a7      	b.n	200063a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20006252:	68fb      	ldr	r3, [r7, #12]
20006254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20006256:	b29b      	uxth	r3, r3
20006258:	2b00      	cmp	r3, #0
2000625a:	d1a6      	bne.n	200061aa <HAL_SPI_TransmitReceive+0x130>
2000625c:	68fb      	ldr	r3, [r7, #12]
2000625e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20006260:	b29b      	uxth	r3, r3
20006262:	2b00      	cmp	r3, #0
20006264:	d1a1      	bne.n	200061aa <HAL_SPI_TransmitReceive+0x130>
20006266:	e07c      	b.n	20006362 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20006268:	68fb      	ldr	r3, [r7, #12]
2000626a:	685b      	ldr	r3, [r3, #4]
2000626c:	2b00      	cmp	r3, #0
2000626e:	d002      	beq.n	20006276 <HAL_SPI_TransmitReceive+0x1fc>
20006270:	8b7b      	ldrh	r3, [r7, #26]
20006272:	2b01      	cmp	r3, #1
20006274:	d16b      	bne.n	2000634e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
20006276:	68fb      	ldr	r3, [r7, #12]
20006278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000627a:	68fb      	ldr	r3, [r7, #12]
2000627c:	681b      	ldr	r3, [r3, #0]
2000627e:	330c      	adds	r3, #12
20006280:	7812      	ldrb	r2, [r2, #0]
20006282:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
20006284:	68fb      	ldr	r3, [r7, #12]
20006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006288:	1c5a      	adds	r2, r3, #1
2000628a:	68fb      	ldr	r3, [r7, #12]
2000628c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
2000628e:	68fb      	ldr	r3, [r7, #12]
20006290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20006292:	b29b      	uxth	r3, r3
20006294:	3b01      	subs	r3, #1
20006296:	b29a      	uxth	r2, r3
20006298:	68fb      	ldr	r3, [r7, #12]
2000629a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
2000629c:	e057      	b.n	2000634e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
2000629e:	68fb      	ldr	r3, [r7, #12]
200062a0:	681b      	ldr	r3, [r3, #0]
200062a2:	689b      	ldr	r3, [r3, #8]
200062a4:	f003 0302 	and.w	r3, r3, #2
200062a8:	2b02      	cmp	r3, #2
200062aa:	d11c      	bne.n	200062e6 <HAL_SPI_TransmitReceive+0x26c>
200062ac:	68fb      	ldr	r3, [r7, #12]
200062ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200062b0:	b29b      	uxth	r3, r3
200062b2:	2b00      	cmp	r3, #0
200062b4:	d017      	beq.n	200062e6 <HAL_SPI_TransmitReceive+0x26c>
200062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200062b8:	2b01      	cmp	r3, #1
200062ba:	d114      	bne.n	200062e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
200062bc:	68fb      	ldr	r3, [r7, #12]
200062be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200062c0:	68fb      	ldr	r3, [r7, #12]
200062c2:	681b      	ldr	r3, [r3, #0]
200062c4:	330c      	adds	r3, #12
200062c6:	7812      	ldrb	r2, [r2, #0]
200062c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
200062ca:	68fb      	ldr	r3, [r7, #12]
200062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200062ce:	1c5a      	adds	r2, r3, #1
200062d0:	68fb      	ldr	r3, [r7, #12]
200062d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
200062d4:	68fb      	ldr	r3, [r7, #12]
200062d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200062d8:	b29b      	uxth	r3, r3
200062da:	3b01      	subs	r3, #1
200062dc:	b29a      	uxth	r2, r3
200062de:	68fb      	ldr	r3, [r7, #12]
200062e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
200062e2:	2300      	movs	r3, #0
200062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
200062e6:	68fb      	ldr	r3, [r7, #12]
200062e8:	681b      	ldr	r3, [r3, #0]
200062ea:	689b      	ldr	r3, [r3, #8]
200062ec:	f003 0301 	and.w	r3, r3, #1
200062f0:	2b01      	cmp	r3, #1
200062f2:	d119      	bne.n	20006328 <HAL_SPI_TransmitReceive+0x2ae>
200062f4:	68fb      	ldr	r3, [r7, #12]
200062f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200062f8:	b29b      	uxth	r3, r3
200062fa:	2b00      	cmp	r3, #0
200062fc:	d014      	beq.n	20006328 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
200062fe:	68fb      	ldr	r3, [r7, #12]
20006300:	681b      	ldr	r3, [r3, #0]
20006302:	68da      	ldr	r2, [r3, #12]
20006304:	68fb      	ldr	r3, [r7, #12]
20006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20006308:	b2d2      	uxtb	r2, r2
2000630a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
2000630c:	68fb      	ldr	r3, [r7, #12]
2000630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20006310:	1c5a      	adds	r2, r3, #1
20006312:	68fb      	ldr	r3, [r7, #12]
20006314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20006316:	68fb      	ldr	r3, [r7, #12]
20006318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000631a:	b29b      	uxth	r3, r3
2000631c:	3b01      	subs	r3, #1
2000631e:	b29a      	uxth	r2, r3
20006320:	68fb      	ldr	r3, [r7, #12]
20006322:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20006324:	2301      	movs	r3, #1
20006326:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
20006328:	f7fe fc00 	bl	20004b2c <HAL_GetTick>
2000632c:	4602      	mov	r2, r0
2000632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20006330:	1ad3      	subs	r3, r2, r3
20006332:	6bba      	ldr	r2, [r7, #56]	; 0x38
20006334:	429a      	cmp	r2, r3
20006336:	d803      	bhi.n	20006340 <HAL_SPI_TransmitReceive+0x2c6>
20006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000633a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000633e:	d102      	bne.n	20006346 <HAL_SPI_TransmitReceive+0x2cc>
20006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20006342:	2b00      	cmp	r3, #0
20006344:	d103      	bne.n	2000634e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
20006346:	2303      	movs	r3, #3
20006348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
2000634c:	e029      	b.n	200063a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
2000634e:	68fb      	ldr	r3, [r7, #12]
20006350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20006352:	b29b      	uxth	r3, r3
20006354:	2b00      	cmp	r3, #0
20006356:	d1a2      	bne.n	2000629e <HAL_SPI_TransmitReceive+0x224>
20006358:	68fb      	ldr	r3, [r7, #12]
2000635a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000635c:	b29b      	uxth	r3, r3
2000635e:	2b00      	cmp	r3, #0
20006360:	d19d      	bne.n	2000629e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20006362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20006364:	6bb9      	ldr	r1, [r7, #56]	; 0x38
20006366:	68f8      	ldr	r0, [r7, #12]
20006368:	f000 f8b2 	bl	200064d0 <SPI_EndRxTxTransaction>
2000636c:	4603      	mov	r3, r0
2000636e:	2b00      	cmp	r3, #0
20006370:	d006      	beq.n	20006380 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
20006372:	2301      	movs	r3, #1
20006374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20006378:	68fb      	ldr	r3, [r7, #12]
2000637a:	2220      	movs	r2, #32
2000637c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
2000637e:	e010      	b.n	200063a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20006380:	68fb      	ldr	r3, [r7, #12]
20006382:	689b      	ldr	r3, [r3, #8]
20006384:	2b00      	cmp	r3, #0
20006386:	d10b      	bne.n	200063a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20006388:	2300      	movs	r3, #0
2000638a:	617b      	str	r3, [r7, #20]
2000638c:	68fb      	ldr	r3, [r7, #12]
2000638e:	681b      	ldr	r3, [r3, #0]
20006390:	68db      	ldr	r3, [r3, #12]
20006392:	617b      	str	r3, [r7, #20]
20006394:	68fb      	ldr	r3, [r7, #12]
20006396:	681b      	ldr	r3, [r3, #0]
20006398:	689b      	ldr	r3, [r3, #8]
2000639a:	617b      	str	r3, [r7, #20]
2000639c:	697b      	ldr	r3, [r7, #20]
2000639e:	e000      	b.n	200063a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
200063a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
200063a2:	68fb      	ldr	r3, [r7, #12]
200063a4:	2201      	movs	r2, #1
200063a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
200063aa:	68fb      	ldr	r3, [r7, #12]
200063ac:	2200      	movs	r2, #0
200063ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
200063b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
200063b6:	4618      	mov	r0, r3
200063b8:	3730      	adds	r7, #48	; 0x30
200063ba:	46bd      	mov	sp, r7
200063bc:	bd80      	pop	{r7, pc}
	...

200063c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
200063c0:	b580      	push	{r7, lr}
200063c2:	b088      	sub	sp, #32
200063c4:	af00      	add	r7, sp, #0
200063c6:	60f8      	str	r0, [r7, #12]
200063c8:	60b9      	str	r1, [r7, #8]
200063ca:	603b      	str	r3, [r7, #0]
200063cc:	4613      	mov	r3, r2
200063ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
200063d0:	f7fe fbac 	bl	20004b2c <HAL_GetTick>
200063d4:	4602      	mov	r2, r0
200063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200063d8:	1a9b      	subs	r3, r3, r2
200063da:	683a      	ldr	r2, [r7, #0]
200063dc:	4413      	add	r3, r2
200063de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
200063e0:	f7fe fba4 	bl	20004b2c <HAL_GetTick>
200063e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
200063e6:	4b39      	ldr	r3, [pc, #228]	; (200064cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
200063e8:	681b      	ldr	r3, [r3, #0]
200063ea:	015b      	lsls	r3, r3, #5
200063ec:	0d1b      	lsrs	r3, r3, #20
200063ee:	69fa      	ldr	r2, [r7, #28]
200063f0:	fb02 f303 	mul.w	r3, r2, r3
200063f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
200063f6:	e054      	b.n	200064a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
200063f8:	683b      	ldr	r3, [r7, #0]
200063fa:	f1b3 3fff 	cmp.w	r3, #4294967295
200063fe:	d050      	beq.n	200064a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
20006400:	f7fe fb94 	bl	20004b2c <HAL_GetTick>
20006404:	4602      	mov	r2, r0
20006406:	69bb      	ldr	r3, [r7, #24]
20006408:	1ad3      	subs	r3, r2, r3
2000640a:	69fa      	ldr	r2, [r7, #28]
2000640c:	429a      	cmp	r2, r3
2000640e:	d902      	bls.n	20006416 <SPI_WaitFlagStateUntilTimeout+0x56>
20006410:	69fb      	ldr	r3, [r7, #28]
20006412:	2b00      	cmp	r3, #0
20006414:	d13d      	bne.n	20006492 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
20006416:	68fb      	ldr	r3, [r7, #12]
20006418:	681b      	ldr	r3, [r3, #0]
2000641a:	685a      	ldr	r2, [r3, #4]
2000641c:	68fb      	ldr	r3, [r7, #12]
2000641e:	681b      	ldr	r3, [r3, #0]
20006420:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
20006424:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
20006426:	68fb      	ldr	r3, [r7, #12]
20006428:	685b      	ldr	r3, [r3, #4]
2000642a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000642e:	d111      	bne.n	20006454 <SPI_WaitFlagStateUntilTimeout+0x94>
20006430:	68fb      	ldr	r3, [r7, #12]
20006432:	689b      	ldr	r3, [r3, #8]
20006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20006438:	d004      	beq.n	20006444 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
2000643a:	68fb      	ldr	r3, [r7, #12]
2000643c:	689b      	ldr	r3, [r3, #8]
2000643e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20006442:	d107      	bne.n	20006454 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
20006444:	68fb      	ldr	r3, [r7, #12]
20006446:	681b      	ldr	r3, [r3, #0]
20006448:	681a      	ldr	r2, [r3, #0]
2000644a:	68fb      	ldr	r3, [r7, #12]
2000644c:	681b      	ldr	r3, [r3, #0]
2000644e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20006452:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
20006454:	68fb      	ldr	r3, [r7, #12]
20006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20006458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2000645c:	d10f      	bne.n	2000647e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
2000645e:	68fb      	ldr	r3, [r7, #12]
20006460:	681b      	ldr	r3, [r3, #0]
20006462:	681a      	ldr	r2, [r3, #0]
20006464:	68fb      	ldr	r3, [r7, #12]
20006466:	681b      	ldr	r3, [r3, #0]
20006468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
2000646c:	601a      	str	r2, [r3, #0]
2000646e:	68fb      	ldr	r3, [r7, #12]
20006470:	681b      	ldr	r3, [r3, #0]
20006472:	681a      	ldr	r2, [r3, #0]
20006474:	68fb      	ldr	r3, [r7, #12]
20006476:	681b      	ldr	r3, [r3, #0]
20006478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
2000647c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
2000647e:	68fb      	ldr	r3, [r7, #12]
20006480:	2201      	movs	r2, #1
20006482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
20006486:	68fb      	ldr	r3, [r7, #12]
20006488:	2200      	movs	r2, #0
2000648a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
2000648e:	2303      	movs	r3, #3
20006490:	e017      	b.n	200064c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
20006492:	697b      	ldr	r3, [r7, #20]
20006494:	2b00      	cmp	r3, #0
20006496:	d101      	bne.n	2000649c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
20006498:	2300      	movs	r3, #0
2000649a:	61fb      	str	r3, [r7, #28]
      }
      count--;
2000649c:	697b      	ldr	r3, [r7, #20]
2000649e:	3b01      	subs	r3, #1
200064a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
200064a2:	68fb      	ldr	r3, [r7, #12]
200064a4:	681b      	ldr	r3, [r3, #0]
200064a6:	689a      	ldr	r2, [r3, #8]
200064a8:	68bb      	ldr	r3, [r7, #8]
200064aa:	4013      	ands	r3, r2
200064ac:	68ba      	ldr	r2, [r7, #8]
200064ae:	429a      	cmp	r2, r3
200064b0:	bf0c      	ite	eq
200064b2:	2301      	moveq	r3, #1
200064b4:	2300      	movne	r3, #0
200064b6:	b2db      	uxtb	r3, r3
200064b8:	461a      	mov	r2, r3
200064ba:	79fb      	ldrb	r3, [r7, #7]
200064bc:	429a      	cmp	r2, r3
200064be:	d19b      	bne.n	200063f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
200064c0:	2300      	movs	r3, #0
}
200064c2:	4618      	mov	r0, r3
200064c4:	3720      	adds	r7, #32
200064c6:	46bd      	mov	sp, r7
200064c8:	bd80      	pop	{r7, pc}
200064ca:	bf00      	nop
200064cc:	2001475c 	.word	0x2001475c

200064d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
200064d0:	b580      	push	{r7, lr}
200064d2:	b088      	sub	sp, #32
200064d4:	af02      	add	r7, sp, #8
200064d6:	60f8      	str	r0, [r7, #12]
200064d8:	60b9      	str	r1, [r7, #8]
200064da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
200064dc:	4b1b      	ldr	r3, [pc, #108]	; (2000654c <SPI_EndRxTxTransaction+0x7c>)
200064de:	681b      	ldr	r3, [r3, #0]
200064e0:	4a1b      	ldr	r2, [pc, #108]	; (20006550 <SPI_EndRxTxTransaction+0x80>)
200064e2:	fba2 2303 	umull	r2, r3, r2, r3
200064e6:	0d5b      	lsrs	r3, r3, #21
200064e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
200064ec:	fb02 f303 	mul.w	r3, r2, r3
200064f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
200064f2:	68fb      	ldr	r3, [r7, #12]
200064f4:	685b      	ldr	r3, [r3, #4]
200064f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
200064fa:	d112      	bne.n	20006522 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
200064fc:	687b      	ldr	r3, [r7, #4]
200064fe:	9300      	str	r3, [sp, #0]
20006500:	68bb      	ldr	r3, [r7, #8]
20006502:	2200      	movs	r2, #0
20006504:	2180      	movs	r1, #128	; 0x80
20006506:	68f8      	ldr	r0, [r7, #12]
20006508:	f7ff ff5a 	bl	200063c0 <SPI_WaitFlagStateUntilTimeout>
2000650c:	4603      	mov	r3, r0
2000650e:	2b00      	cmp	r3, #0
20006510:	d016      	beq.n	20006540 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20006512:	68fb      	ldr	r3, [r7, #12]
20006514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20006516:	f043 0220 	orr.w	r2, r3, #32
2000651a:	68fb      	ldr	r3, [r7, #12]
2000651c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
2000651e:	2303      	movs	r3, #3
20006520:	e00f      	b.n	20006542 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
20006522:	697b      	ldr	r3, [r7, #20]
20006524:	2b00      	cmp	r3, #0
20006526:	d00a      	beq.n	2000653e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
20006528:	697b      	ldr	r3, [r7, #20]
2000652a:	3b01      	subs	r3, #1
2000652c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
2000652e:	68fb      	ldr	r3, [r7, #12]
20006530:	681b      	ldr	r3, [r3, #0]
20006532:	689b      	ldr	r3, [r3, #8]
20006534:	f003 0380 	and.w	r3, r3, #128	; 0x80
20006538:	2b80      	cmp	r3, #128	; 0x80
2000653a:	d0f2      	beq.n	20006522 <SPI_EndRxTxTransaction+0x52>
2000653c:	e000      	b.n	20006540 <SPI_EndRxTxTransaction+0x70>
        break;
2000653e:	bf00      	nop
  }

  return HAL_OK;
20006540:	2300      	movs	r3, #0
}
20006542:	4618      	mov	r0, r3
20006544:	3718      	adds	r7, #24
20006546:	46bd      	mov	sp, r7
20006548:	bd80      	pop	{r7, pc}
2000654a:	bf00      	nop
2000654c:	2001475c 	.word	0x2001475c
20006550:	165e9f81 	.word	0x165e9f81

20006554 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
20006554:	b580      	push	{r7, lr}
20006556:	b082      	sub	sp, #8
20006558:	af00      	add	r7, sp, #0
2000655a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
2000655c:	687b      	ldr	r3, [r7, #4]
2000655e:	2b00      	cmp	r3, #0
20006560:	d101      	bne.n	20006566 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
20006562:	2301      	movs	r3, #1
20006564:	e041      	b.n	200065ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
20006566:	687b      	ldr	r3, [r7, #4]
20006568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2000656c:	b2db      	uxtb	r3, r3
2000656e:	2b00      	cmp	r3, #0
20006570:	d106      	bne.n	20006580 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
20006572:	687b      	ldr	r3, [r7, #4]
20006574:	2200      	movs	r2, #0
20006576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
2000657a:	6878      	ldr	r0, [r7, #4]
2000657c:	f7fd fe94 	bl	200042a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
20006580:	687b      	ldr	r3, [r7, #4]
20006582:	2202      	movs	r2, #2
20006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
20006588:	687b      	ldr	r3, [r7, #4]
2000658a:	681a      	ldr	r2, [r3, #0]
2000658c:	687b      	ldr	r3, [r7, #4]
2000658e:	3304      	adds	r3, #4
20006590:	4619      	mov	r1, r3
20006592:	4610      	mov	r0, r2
20006594:	f000 f8f0 	bl	20006778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
20006598:	687b      	ldr	r3, [r7, #4]
2000659a:	2201      	movs	r2, #1
2000659c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
200065a0:	687b      	ldr	r3, [r7, #4]
200065a2:	2201      	movs	r2, #1
200065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
200065a8:	687b      	ldr	r3, [r7, #4]
200065aa:	2201      	movs	r2, #1
200065ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
200065b0:	687b      	ldr	r3, [r7, #4]
200065b2:	2201      	movs	r2, #1
200065b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
200065b8:	687b      	ldr	r3, [r7, #4]
200065ba:	2201      	movs	r2, #1
200065bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
200065c0:	687b      	ldr	r3, [r7, #4]
200065c2:	2201      	movs	r2, #1
200065c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
200065c8:	687b      	ldr	r3, [r7, #4]
200065ca:	2201      	movs	r2, #1
200065cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
200065d0:	687b      	ldr	r3, [r7, #4]
200065d2:	2201      	movs	r2, #1
200065d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200065d8:	687b      	ldr	r3, [r7, #4]
200065da:	2201      	movs	r2, #1
200065dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
200065e0:	687b      	ldr	r3, [r7, #4]
200065e2:	2201      	movs	r2, #1
200065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
200065e8:	2300      	movs	r3, #0
}
200065ea:	4618      	mov	r0, r3
200065ec:	3708      	adds	r7, #8
200065ee:	46bd      	mov	sp, r7
200065f0:	bd80      	pop	{r7, pc}
	...

200065f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
200065f4:	b580      	push	{r7, lr}
200065f6:	b086      	sub	sp, #24
200065f8:	af00      	add	r7, sp, #0
200065fa:	60f8      	str	r0, [r7, #12]
200065fc:	60b9      	str	r1, [r7, #8]
200065fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20006600:	2300      	movs	r3, #0
20006602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
20006604:	68fb      	ldr	r3, [r7, #12]
20006606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2000660a:	2b01      	cmp	r3, #1
2000660c:	d101      	bne.n	20006612 <HAL_TIM_PWM_ConfigChannel+0x1e>
2000660e:	2302      	movs	r3, #2
20006610:	e0ae      	b.n	20006770 <HAL_TIM_PWM_ConfigChannel+0x17c>
20006612:	68fb      	ldr	r3, [r7, #12]
20006614:	2201      	movs	r2, #1
20006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
2000661a:	687b      	ldr	r3, [r7, #4]
2000661c:	2b0c      	cmp	r3, #12
2000661e:	f200 809f 	bhi.w	20006760 <HAL_TIM_PWM_ConfigChannel+0x16c>
20006622:	a201      	add	r2, pc, #4	; (adr r2, 20006628 <HAL_TIM_PWM_ConfigChannel+0x34>)
20006624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20006628:	2000665d 	.word	0x2000665d
2000662c:	20006761 	.word	0x20006761
20006630:	20006761 	.word	0x20006761
20006634:	20006761 	.word	0x20006761
20006638:	2000669d 	.word	0x2000669d
2000663c:	20006761 	.word	0x20006761
20006640:	20006761 	.word	0x20006761
20006644:	20006761 	.word	0x20006761
20006648:	200066df 	.word	0x200066df
2000664c:	20006761 	.word	0x20006761
20006650:	20006761 	.word	0x20006761
20006654:	20006761 	.word	0x20006761
20006658:	2000671f 	.word	0x2000671f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
2000665c:	68fb      	ldr	r3, [r7, #12]
2000665e:	681b      	ldr	r3, [r3, #0]
20006660:	68b9      	ldr	r1, [r7, #8]
20006662:	4618      	mov	r0, r3
20006664:	f000 f908 	bl	20006878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
20006668:	68fb      	ldr	r3, [r7, #12]
2000666a:	681b      	ldr	r3, [r3, #0]
2000666c:	699a      	ldr	r2, [r3, #24]
2000666e:	68fb      	ldr	r3, [r7, #12]
20006670:	681b      	ldr	r3, [r3, #0]
20006672:	f042 0208 	orr.w	r2, r2, #8
20006676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
20006678:	68fb      	ldr	r3, [r7, #12]
2000667a:	681b      	ldr	r3, [r3, #0]
2000667c:	699a      	ldr	r2, [r3, #24]
2000667e:	68fb      	ldr	r3, [r7, #12]
20006680:	681b      	ldr	r3, [r3, #0]
20006682:	f022 0204 	bic.w	r2, r2, #4
20006686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
20006688:	68fb      	ldr	r3, [r7, #12]
2000668a:	681b      	ldr	r3, [r3, #0]
2000668c:	6999      	ldr	r1, [r3, #24]
2000668e:	68bb      	ldr	r3, [r7, #8]
20006690:	691a      	ldr	r2, [r3, #16]
20006692:	68fb      	ldr	r3, [r7, #12]
20006694:	681b      	ldr	r3, [r3, #0]
20006696:	430a      	orrs	r2, r1
20006698:	619a      	str	r2, [r3, #24]
      break;
2000669a:	e064      	b.n	20006766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
2000669c:	68fb      	ldr	r3, [r7, #12]
2000669e:	681b      	ldr	r3, [r3, #0]
200066a0:	68b9      	ldr	r1, [r7, #8]
200066a2:	4618      	mov	r0, r3
200066a4:	f000 f94e 	bl	20006944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
200066a8:	68fb      	ldr	r3, [r7, #12]
200066aa:	681b      	ldr	r3, [r3, #0]
200066ac:	699a      	ldr	r2, [r3, #24]
200066ae:	68fb      	ldr	r3, [r7, #12]
200066b0:	681b      	ldr	r3, [r3, #0]
200066b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
200066b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
200066b8:	68fb      	ldr	r3, [r7, #12]
200066ba:	681b      	ldr	r3, [r3, #0]
200066bc:	699a      	ldr	r2, [r3, #24]
200066be:	68fb      	ldr	r3, [r7, #12]
200066c0:	681b      	ldr	r3, [r3, #0]
200066c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
200066c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
200066c8:	68fb      	ldr	r3, [r7, #12]
200066ca:	681b      	ldr	r3, [r3, #0]
200066cc:	6999      	ldr	r1, [r3, #24]
200066ce:	68bb      	ldr	r3, [r7, #8]
200066d0:	691b      	ldr	r3, [r3, #16]
200066d2:	021a      	lsls	r2, r3, #8
200066d4:	68fb      	ldr	r3, [r7, #12]
200066d6:	681b      	ldr	r3, [r3, #0]
200066d8:	430a      	orrs	r2, r1
200066da:	619a      	str	r2, [r3, #24]
      break;
200066dc:	e043      	b.n	20006766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
200066de:	68fb      	ldr	r3, [r7, #12]
200066e0:	681b      	ldr	r3, [r3, #0]
200066e2:	68b9      	ldr	r1, [r7, #8]
200066e4:	4618      	mov	r0, r3
200066e6:	f000 f999 	bl	20006a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
200066ea:	68fb      	ldr	r3, [r7, #12]
200066ec:	681b      	ldr	r3, [r3, #0]
200066ee:	69da      	ldr	r2, [r3, #28]
200066f0:	68fb      	ldr	r3, [r7, #12]
200066f2:	681b      	ldr	r3, [r3, #0]
200066f4:	f042 0208 	orr.w	r2, r2, #8
200066f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
200066fa:	68fb      	ldr	r3, [r7, #12]
200066fc:	681b      	ldr	r3, [r3, #0]
200066fe:	69da      	ldr	r2, [r3, #28]
20006700:	68fb      	ldr	r3, [r7, #12]
20006702:	681b      	ldr	r3, [r3, #0]
20006704:	f022 0204 	bic.w	r2, r2, #4
20006708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
2000670a:	68fb      	ldr	r3, [r7, #12]
2000670c:	681b      	ldr	r3, [r3, #0]
2000670e:	69d9      	ldr	r1, [r3, #28]
20006710:	68bb      	ldr	r3, [r7, #8]
20006712:	691a      	ldr	r2, [r3, #16]
20006714:	68fb      	ldr	r3, [r7, #12]
20006716:	681b      	ldr	r3, [r3, #0]
20006718:	430a      	orrs	r2, r1
2000671a:	61da      	str	r2, [r3, #28]
      break;
2000671c:	e023      	b.n	20006766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
2000671e:	68fb      	ldr	r3, [r7, #12]
20006720:	681b      	ldr	r3, [r3, #0]
20006722:	68b9      	ldr	r1, [r7, #8]
20006724:	4618      	mov	r0, r3
20006726:	f000 f9e3 	bl	20006af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
2000672a:	68fb      	ldr	r3, [r7, #12]
2000672c:	681b      	ldr	r3, [r3, #0]
2000672e:	69da      	ldr	r2, [r3, #28]
20006730:	68fb      	ldr	r3, [r7, #12]
20006732:	681b      	ldr	r3, [r3, #0]
20006734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
20006738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
2000673a:	68fb      	ldr	r3, [r7, #12]
2000673c:	681b      	ldr	r3, [r3, #0]
2000673e:	69da      	ldr	r2, [r3, #28]
20006740:	68fb      	ldr	r3, [r7, #12]
20006742:	681b      	ldr	r3, [r3, #0]
20006744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20006748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
2000674a:	68fb      	ldr	r3, [r7, #12]
2000674c:	681b      	ldr	r3, [r3, #0]
2000674e:	69d9      	ldr	r1, [r3, #28]
20006750:	68bb      	ldr	r3, [r7, #8]
20006752:	691b      	ldr	r3, [r3, #16]
20006754:	021a      	lsls	r2, r3, #8
20006756:	68fb      	ldr	r3, [r7, #12]
20006758:	681b      	ldr	r3, [r3, #0]
2000675a:	430a      	orrs	r2, r1
2000675c:	61da      	str	r2, [r3, #28]
      break;
2000675e:	e002      	b.n	20006766 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
20006760:	2301      	movs	r3, #1
20006762:	75fb      	strb	r3, [r7, #23]
      break;
20006764:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
20006766:	68fb      	ldr	r3, [r7, #12]
20006768:	2200      	movs	r2, #0
2000676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2000676e:	7dfb      	ldrb	r3, [r7, #23]
}
20006770:	4618      	mov	r0, r3
20006772:	3718      	adds	r7, #24
20006774:	46bd      	mov	sp, r7
20006776:	bd80      	pop	{r7, pc}

20006778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
20006778:	b480      	push	{r7}
2000677a:	b085      	sub	sp, #20
2000677c:	af00      	add	r7, sp, #0
2000677e:	6078      	str	r0, [r7, #4]
20006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
20006782:	687b      	ldr	r3, [r7, #4]
20006784:	681b      	ldr	r3, [r3, #0]
20006786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
20006788:	687b      	ldr	r3, [r7, #4]
2000678a:	4a34      	ldr	r2, [pc, #208]	; (2000685c <TIM_Base_SetConfig+0xe4>)
2000678c:	4293      	cmp	r3, r2
2000678e:	d00f      	beq.n	200067b0 <TIM_Base_SetConfig+0x38>
20006790:	687b      	ldr	r3, [r7, #4]
20006792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20006796:	d00b      	beq.n	200067b0 <TIM_Base_SetConfig+0x38>
20006798:	687b      	ldr	r3, [r7, #4]
2000679a:	4a31      	ldr	r2, [pc, #196]	; (20006860 <TIM_Base_SetConfig+0xe8>)
2000679c:	4293      	cmp	r3, r2
2000679e:	d007      	beq.n	200067b0 <TIM_Base_SetConfig+0x38>
200067a0:	687b      	ldr	r3, [r7, #4]
200067a2:	4a30      	ldr	r2, [pc, #192]	; (20006864 <TIM_Base_SetConfig+0xec>)
200067a4:	4293      	cmp	r3, r2
200067a6:	d003      	beq.n	200067b0 <TIM_Base_SetConfig+0x38>
200067a8:	687b      	ldr	r3, [r7, #4]
200067aa:	4a2f      	ldr	r2, [pc, #188]	; (20006868 <TIM_Base_SetConfig+0xf0>)
200067ac:	4293      	cmp	r3, r2
200067ae:	d108      	bne.n	200067c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
200067b0:	68fb      	ldr	r3, [r7, #12]
200067b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
200067b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
200067b8:	683b      	ldr	r3, [r7, #0]
200067ba:	685b      	ldr	r3, [r3, #4]
200067bc:	68fa      	ldr	r2, [r7, #12]
200067be:	4313      	orrs	r3, r2
200067c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
200067c2:	687b      	ldr	r3, [r7, #4]
200067c4:	4a25      	ldr	r2, [pc, #148]	; (2000685c <TIM_Base_SetConfig+0xe4>)
200067c6:	4293      	cmp	r3, r2
200067c8:	d01b      	beq.n	20006802 <TIM_Base_SetConfig+0x8a>
200067ca:	687b      	ldr	r3, [r7, #4]
200067cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
200067d0:	d017      	beq.n	20006802 <TIM_Base_SetConfig+0x8a>
200067d2:	687b      	ldr	r3, [r7, #4]
200067d4:	4a22      	ldr	r2, [pc, #136]	; (20006860 <TIM_Base_SetConfig+0xe8>)
200067d6:	4293      	cmp	r3, r2
200067d8:	d013      	beq.n	20006802 <TIM_Base_SetConfig+0x8a>
200067da:	687b      	ldr	r3, [r7, #4]
200067dc:	4a21      	ldr	r2, [pc, #132]	; (20006864 <TIM_Base_SetConfig+0xec>)
200067de:	4293      	cmp	r3, r2
200067e0:	d00f      	beq.n	20006802 <TIM_Base_SetConfig+0x8a>
200067e2:	687b      	ldr	r3, [r7, #4]
200067e4:	4a20      	ldr	r2, [pc, #128]	; (20006868 <TIM_Base_SetConfig+0xf0>)
200067e6:	4293      	cmp	r3, r2
200067e8:	d00b      	beq.n	20006802 <TIM_Base_SetConfig+0x8a>
200067ea:	687b      	ldr	r3, [r7, #4]
200067ec:	4a1f      	ldr	r2, [pc, #124]	; (2000686c <TIM_Base_SetConfig+0xf4>)
200067ee:	4293      	cmp	r3, r2
200067f0:	d007      	beq.n	20006802 <TIM_Base_SetConfig+0x8a>
200067f2:	687b      	ldr	r3, [r7, #4]
200067f4:	4a1e      	ldr	r2, [pc, #120]	; (20006870 <TIM_Base_SetConfig+0xf8>)
200067f6:	4293      	cmp	r3, r2
200067f8:	d003      	beq.n	20006802 <TIM_Base_SetConfig+0x8a>
200067fa:	687b      	ldr	r3, [r7, #4]
200067fc:	4a1d      	ldr	r2, [pc, #116]	; (20006874 <TIM_Base_SetConfig+0xfc>)
200067fe:	4293      	cmp	r3, r2
20006800:	d108      	bne.n	20006814 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
20006802:	68fb      	ldr	r3, [r7, #12]
20006804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20006808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
2000680a:	683b      	ldr	r3, [r7, #0]
2000680c:	68db      	ldr	r3, [r3, #12]
2000680e:	68fa      	ldr	r2, [r7, #12]
20006810:	4313      	orrs	r3, r2
20006812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
20006814:	68fb      	ldr	r3, [r7, #12]
20006816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
2000681a:	683b      	ldr	r3, [r7, #0]
2000681c:	695b      	ldr	r3, [r3, #20]
2000681e:	4313      	orrs	r3, r2
20006820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
20006822:	687b      	ldr	r3, [r7, #4]
20006824:	68fa      	ldr	r2, [r7, #12]
20006826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
20006828:	683b      	ldr	r3, [r7, #0]
2000682a:	689a      	ldr	r2, [r3, #8]
2000682c:	687b      	ldr	r3, [r7, #4]
2000682e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
20006830:	683b      	ldr	r3, [r7, #0]
20006832:	681a      	ldr	r2, [r3, #0]
20006834:	687b      	ldr	r3, [r7, #4]
20006836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
20006838:	687b      	ldr	r3, [r7, #4]
2000683a:	4a08      	ldr	r2, [pc, #32]	; (2000685c <TIM_Base_SetConfig+0xe4>)
2000683c:	4293      	cmp	r3, r2
2000683e:	d103      	bne.n	20006848 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
20006840:	683b      	ldr	r3, [r7, #0]
20006842:	691a      	ldr	r2, [r3, #16]
20006844:	687b      	ldr	r3, [r7, #4]
20006846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
20006848:	687b      	ldr	r3, [r7, #4]
2000684a:	2201      	movs	r2, #1
2000684c:	615a      	str	r2, [r3, #20]
}
2000684e:	bf00      	nop
20006850:	3714      	adds	r7, #20
20006852:	46bd      	mov	sp, r7
20006854:	f85d 7b04 	ldr.w	r7, [sp], #4
20006858:	4770      	bx	lr
2000685a:	bf00      	nop
2000685c:	40010000 	.word	0x40010000
20006860:	40000400 	.word	0x40000400
20006864:	40000800 	.word	0x40000800
20006868:	40000c00 	.word	0x40000c00
2000686c:	40014000 	.word	0x40014000
20006870:	40014400 	.word	0x40014400
20006874:	40014800 	.word	0x40014800

20006878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
20006878:	b480      	push	{r7}
2000687a:	b087      	sub	sp, #28
2000687c:	af00      	add	r7, sp, #0
2000687e:	6078      	str	r0, [r7, #4]
20006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
20006882:	687b      	ldr	r3, [r7, #4]
20006884:	6a1b      	ldr	r3, [r3, #32]
20006886:	f023 0201 	bic.w	r2, r3, #1
2000688a:	687b      	ldr	r3, [r7, #4]
2000688c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
2000688e:	687b      	ldr	r3, [r7, #4]
20006890:	6a1b      	ldr	r3, [r3, #32]
20006892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20006894:	687b      	ldr	r3, [r7, #4]
20006896:	685b      	ldr	r3, [r3, #4]
20006898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
2000689a:	687b      	ldr	r3, [r7, #4]
2000689c:	699b      	ldr	r3, [r3, #24]
2000689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
200068a0:	68fb      	ldr	r3, [r7, #12]
200068a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
200068a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
200068a8:	68fb      	ldr	r3, [r7, #12]
200068aa:	f023 0303 	bic.w	r3, r3, #3
200068ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
200068b0:	683b      	ldr	r3, [r7, #0]
200068b2:	681b      	ldr	r3, [r3, #0]
200068b4:	68fa      	ldr	r2, [r7, #12]
200068b6:	4313      	orrs	r3, r2
200068b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
200068ba:	697b      	ldr	r3, [r7, #20]
200068bc:	f023 0302 	bic.w	r3, r3, #2
200068c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
200068c2:	683b      	ldr	r3, [r7, #0]
200068c4:	689b      	ldr	r3, [r3, #8]
200068c6:	697a      	ldr	r2, [r7, #20]
200068c8:	4313      	orrs	r3, r2
200068ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
200068cc:	687b      	ldr	r3, [r7, #4]
200068ce:	4a1c      	ldr	r2, [pc, #112]	; (20006940 <TIM_OC1_SetConfig+0xc8>)
200068d0:	4293      	cmp	r3, r2
200068d2:	d10c      	bne.n	200068ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
200068d4:	697b      	ldr	r3, [r7, #20]
200068d6:	f023 0308 	bic.w	r3, r3, #8
200068da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
200068dc:	683b      	ldr	r3, [r7, #0]
200068de:	68db      	ldr	r3, [r3, #12]
200068e0:	697a      	ldr	r2, [r7, #20]
200068e2:	4313      	orrs	r3, r2
200068e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
200068e6:	697b      	ldr	r3, [r7, #20]
200068e8:	f023 0304 	bic.w	r3, r3, #4
200068ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
200068ee:	687b      	ldr	r3, [r7, #4]
200068f0:	4a13      	ldr	r2, [pc, #76]	; (20006940 <TIM_OC1_SetConfig+0xc8>)
200068f2:	4293      	cmp	r3, r2
200068f4:	d111      	bne.n	2000691a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
200068f6:	693b      	ldr	r3, [r7, #16]
200068f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
200068fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
200068fe:	693b      	ldr	r3, [r7, #16]
20006900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
20006904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
20006906:	683b      	ldr	r3, [r7, #0]
20006908:	695b      	ldr	r3, [r3, #20]
2000690a:	693a      	ldr	r2, [r7, #16]
2000690c:	4313      	orrs	r3, r2
2000690e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
20006910:	683b      	ldr	r3, [r7, #0]
20006912:	699b      	ldr	r3, [r3, #24]
20006914:	693a      	ldr	r2, [r7, #16]
20006916:	4313      	orrs	r3, r2
20006918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
2000691a:	687b      	ldr	r3, [r7, #4]
2000691c:	693a      	ldr	r2, [r7, #16]
2000691e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
20006920:	687b      	ldr	r3, [r7, #4]
20006922:	68fa      	ldr	r2, [r7, #12]
20006924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
20006926:	683b      	ldr	r3, [r7, #0]
20006928:	685a      	ldr	r2, [r3, #4]
2000692a:	687b      	ldr	r3, [r7, #4]
2000692c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
2000692e:	687b      	ldr	r3, [r7, #4]
20006930:	697a      	ldr	r2, [r7, #20]
20006932:	621a      	str	r2, [r3, #32]
}
20006934:	bf00      	nop
20006936:	371c      	adds	r7, #28
20006938:	46bd      	mov	sp, r7
2000693a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000693e:	4770      	bx	lr
20006940:	40010000 	.word	0x40010000

20006944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
20006944:	b480      	push	{r7}
20006946:	b087      	sub	sp, #28
20006948:	af00      	add	r7, sp, #0
2000694a:	6078      	str	r0, [r7, #4]
2000694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
2000694e:	687b      	ldr	r3, [r7, #4]
20006950:	6a1b      	ldr	r3, [r3, #32]
20006952:	f023 0210 	bic.w	r2, r3, #16
20006956:	687b      	ldr	r3, [r7, #4]
20006958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
2000695a:	687b      	ldr	r3, [r7, #4]
2000695c:	6a1b      	ldr	r3, [r3, #32]
2000695e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20006960:	687b      	ldr	r3, [r7, #4]
20006962:	685b      	ldr	r3, [r3, #4]
20006964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
20006966:	687b      	ldr	r3, [r7, #4]
20006968:	699b      	ldr	r3, [r3, #24]
2000696a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
2000696c:	68fb      	ldr	r3, [r7, #12]
2000696e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
20006972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
20006974:	68fb      	ldr	r3, [r7, #12]
20006976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000697a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
2000697c:	683b      	ldr	r3, [r7, #0]
2000697e:	681b      	ldr	r3, [r3, #0]
20006980:	021b      	lsls	r3, r3, #8
20006982:	68fa      	ldr	r2, [r7, #12]
20006984:	4313      	orrs	r3, r2
20006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
20006988:	697b      	ldr	r3, [r7, #20]
2000698a:	f023 0320 	bic.w	r3, r3, #32
2000698e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
20006990:	683b      	ldr	r3, [r7, #0]
20006992:	689b      	ldr	r3, [r3, #8]
20006994:	011b      	lsls	r3, r3, #4
20006996:	697a      	ldr	r2, [r7, #20]
20006998:	4313      	orrs	r3, r2
2000699a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
2000699c:	687b      	ldr	r3, [r7, #4]
2000699e:	4a1e      	ldr	r2, [pc, #120]	; (20006a18 <TIM_OC2_SetConfig+0xd4>)
200069a0:	4293      	cmp	r3, r2
200069a2:	d10d      	bne.n	200069c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
200069a4:	697b      	ldr	r3, [r7, #20]
200069a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
200069aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
200069ac:	683b      	ldr	r3, [r7, #0]
200069ae:	68db      	ldr	r3, [r3, #12]
200069b0:	011b      	lsls	r3, r3, #4
200069b2:	697a      	ldr	r2, [r7, #20]
200069b4:	4313      	orrs	r3, r2
200069b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
200069b8:	697b      	ldr	r3, [r7, #20]
200069ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
200069be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
200069c0:	687b      	ldr	r3, [r7, #4]
200069c2:	4a15      	ldr	r2, [pc, #84]	; (20006a18 <TIM_OC2_SetConfig+0xd4>)
200069c4:	4293      	cmp	r3, r2
200069c6:	d113      	bne.n	200069f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
200069c8:	693b      	ldr	r3, [r7, #16]
200069ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
200069ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
200069d0:	693b      	ldr	r3, [r7, #16]
200069d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
200069d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
200069d8:	683b      	ldr	r3, [r7, #0]
200069da:	695b      	ldr	r3, [r3, #20]
200069dc:	009b      	lsls	r3, r3, #2
200069de:	693a      	ldr	r2, [r7, #16]
200069e0:	4313      	orrs	r3, r2
200069e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
200069e4:	683b      	ldr	r3, [r7, #0]
200069e6:	699b      	ldr	r3, [r3, #24]
200069e8:	009b      	lsls	r3, r3, #2
200069ea:	693a      	ldr	r2, [r7, #16]
200069ec:	4313      	orrs	r3, r2
200069ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
200069f0:	687b      	ldr	r3, [r7, #4]
200069f2:	693a      	ldr	r2, [r7, #16]
200069f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
200069f6:	687b      	ldr	r3, [r7, #4]
200069f8:	68fa      	ldr	r2, [r7, #12]
200069fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
200069fc:	683b      	ldr	r3, [r7, #0]
200069fe:	685a      	ldr	r2, [r3, #4]
20006a00:	687b      	ldr	r3, [r7, #4]
20006a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20006a04:	687b      	ldr	r3, [r7, #4]
20006a06:	697a      	ldr	r2, [r7, #20]
20006a08:	621a      	str	r2, [r3, #32]
}
20006a0a:	bf00      	nop
20006a0c:	371c      	adds	r7, #28
20006a0e:	46bd      	mov	sp, r7
20006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
20006a14:	4770      	bx	lr
20006a16:	bf00      	nop
20006a18:	40010000 	.word	0x40010000

20006a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
20006a1c:	b480      	push	{r7}
20006a1e:	b087      	sub	sp, #28
20006a20:	af00      	add	r7, sp, #0
20006a22:	6078      	str	r0, [r7, #4]
20006a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
20006a26:	687b      	ldr	r3, [r7, #4]
20006a28:	6a1b      	ldr	r3, [r3, #32]
20006a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
20006a2e:	687b      	ldr	r3, [r7, #4]
20006a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20006a32:	687b      	ldr	r3, [r7, #4]
20006a34:	6a1b      	ldr	r3, [r3, #32]
20006a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20006a38:	687b      	ldr	r3, [r7, #4]
20006a3a:	685b      	ldr	r3, [r3, #4]
20006a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
20006a3e:	687b      	ldr	r3, [r7, #4]
20006a40:	69db      	ldr	r3, [r3, #28]
20006a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
20006a44:	68fb      	ldr	r3, [r7, #12]
20006a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
20006a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
20006a4c:	68fb      	ldr	r3, [r7, #12]
20006a4e:	f023 0303 	bic.w	r3, r3, #3
20006a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
20006a54:	683b      	ldr	r3, [r7, #0]
20006a56:	681b      	ldr	r3, [r3, #0]
20006a58:	68fa      	ldr	r2, [r7, #12]
20006a5a:	4313      	orrs	r3, r2
20006a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
20006a5e:	697b      	ldr	r3, [r7, #20]
20006a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
20006a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
20006a66:	683b      	ldr	r3, [r7, #0]
20006a68:	689b      	ldr	r3, [r3, #8]
20006a6a:	021b      	lsls	r3, r3, #8
20006a6c:	697a      	ldr	r2, [r7, #20]
20006a6e:	4313      	orrs	r3, r2
20006a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
20006a72:	687b      	ldr	r3, [r7, #4]
20006a74:	4a1d      	ldr	r2, [pc, #116]	; (20006aec <TIM_OC3_SetConfig+0xd0>)
20006a76:	4293      	cmp	r3, r2
20006a78:	d10d      	bne.n	20006a96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
20006a7a:	697b      	ldr	r3, [r7, #20]
20006a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
20006a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
20006a82:	683b      	ldr	r3, [r7, #0]
20006a84:	68db      	ldr	r3, [r3, #12]
20006a86:	021b      	lsls	r3, r3, #8
20006a88:	697a      	ldr	r2, [r7, #20]
20006a8a:	4313      	orrs	r3, r2
20006a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
20006a8e:	697b      	ldr	r3, [r7, #20]
20006a90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
20006a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
20006a96:	687b      	ldr	r3, [r7, #4]
20006a98:	4a14      	ldr	r2, [pc, #80]	; (20006aec <TIM_OC3_SetConfig+0xd0>)
20006a9a:	4293      	cmp	r3, r2
20006a9c:	d113      	bne.n	20006ac6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
20006a9e:	693b      	ldr	r3, [r7, #16]
20006aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
20006aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
20006aa6:	693b      	ldr	r3, [r7, #16]
20006aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
20006aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
20006aae:	683b      	ldr	r3, [r7, #0]
20006ab0:	695b      	ldr	r3, [r3, #20]
20006ab2:	011b      	lsls	r3, r3, #4
20006ab4:	693a      	ldr	r2, [r7, #16]
20006ab6:	4313      	orrs	r3, r2
20006ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
20006aba:	683b      	ldr	r3, [r7, #0]
20006abc:	699b      	ldr	r3, [r3, #24]
20006abe:	011b      	lsls	r3, r3, #4
20006ac0:	693a      	ldr	r2, [r7, #16]
20006ac2:	4313      	orrs	r3, r2
20006ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20006ac6:	687b      	ldr	r3, [r7, #4]
20006ac8:	693a      	ldr	r2, [r7, #16]
20006aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
20006acc:	687b      	ldr	r3, [r7, #4]
20006ace:	68fa      	ldr	r2, [r7, #12]
20006ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
20006ad2:	683b      	ldr	r3, [r7, #0]
20006ad4:	685a      	ldr	r2, [r3, #4]
20006ad6:	687b      	ldr	r3, [r7, #4]
20006ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20006ada:	687b      	ldr	r3, [r7, #4]
20006adc:	697a      	ldr	r2, [r7, #20]
20006ade:	621a      	str	r2, [r3, #32]
}
20006ae0:	bf00      	nop
20006ae2:	371c      	adds	r7, #28
20006ae4:	46bd      	mov	sp, r7
20006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
20006aea:	4770      	bx	lr
20006aec:	40010000 	.word	0x40010000

20006af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
20006af0:	b480      	push	{r7}
20006af2:	b087      	sub	sp, #28
20006af4:	af00      	add	r7, sp, #0
20006af6:	6078      	str	r0, [r7, #4]
20006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
20006afa:	687b      	ldr	r3, [r7, #4]
20006afc:	6a1b      	ldr	r3, [r3, #32]
20006afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
20006b02:	687b      	ldr	r3, [r7, #4]
20006b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20006b06:	687b      	ldr	r3, [r7, #4]
20006b08:	6a1b      	ldr	r3, [r3, #32]
20006b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20006b0c:	687b      	ldr	r3, [r7, #4]
20006b0e:	685b      	ldr	r3, [r3, #4]
20006b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
20006b12:	687b      	ldr	r3, [r7, #4]
20006b14:	69db      	ldr	r3, [r3, #28]
20006b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
20006b18:	68fb      	ldr	r3, [r7, #12]
20006b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
20006b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
20006b20:	68fb      	ldr	r3, [r7, #12]
20006b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20006b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
20006b28:	683b      	ldr	r3, [r7, #0]
20006b2a:	681b      	ldr	r3, [r3, #0]
20006b2c:	021b      	lsls	r3, r3, #8
20006b2e:	68fa      	ldr	r2, [r7, #12]
20006b30:	4313      	orrs	r3, r2
20006b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
20006b34:	693b      	ldr	r3, [r7, #16]
20006b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
20006b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
20006b3c:	683b      	ldr	r3, [r7, #0]
20006b3e:	689b      	ldr	r3, [r3, #8]
20006b40:	031b      	lsls	r3, r3, #12
20006b42:	693a      	ldr	r2, [r7, #16]
20006b44:	4313      	orrs	r3, r2
20006b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
20006b48:	687b      	ldr	r3, [r7, #4]
20006b4a:	4a10      	ldr	r2, [pc, #64]	; (20006b8c <TIM_OC4_SetConfig+0x9c>)
20006b4c:	4293      	cmp	r3, r2
20006b4e:	d109      	bne.n	20006b64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
20006b50:	697b      	ldr	r3, [r7, #20]
20006b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
20006b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
20006b58:	683b      	ldr	r3, [r7, #0]
20006b5a:	695b      	ldr	r3, [r3, #20]
20006b5c:	019b      	lsls	r3, r3, #6
20006b5e:	697a      	ldr	r2, [r7, #20]
20006b60:	4313      	orrs	r3, r2
20006b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20006b64:	687b      	ldr	r3, [r7, #4]
20006b66:	697a      	ldr	r2, [r7, #20]
20006b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
20006b6a:	687b      	ldr	r3, [r7, #4]
20006b6c:	68fa      	ldr	r2, [r7, #12]
20006b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
20006b70:	683b      	ldr	r3, [r7, #0]
20006b72:	685a      	ldr	r2, [r3, #4]
20006b74:	687b      	ldr	r3, [r7, #4]
20006b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20006b78:	687b      	ldr	r3, [r7, #4]
20006b7a:	693a      	ldr	r2, [r7, #16]
20006b7c:	621a      	str	r2, [r3, #32]
}
20006b7e:	bf00      	nop
20006b80:	371c      	adds	r7, #28
20006b82:	46bd      	mov	sp, r7
20006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
20006b88:	4770      	bx	lr
20006b8a:	bf00      	nop
20006b8c:	40010000 	.word	0x40010000

20006b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
20006b90:	b480      	push	{r7}
20006b92:	b085      	sub	sp, #20
20006b94:	af00      	add	r7, sp, #0
20006b96:	6078      	str	r0, [r7, #4]
20006b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
20006b9a:	687b      	ldr	r3, [r7, #4]
20006b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20006ba0:	2b01      	cmp	r3, #1
20006ba2:	d101      	bne.n	20006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
20006ba4:	2302      	movs	r3, #2
20006ba6:	e050      	b.n	20006c4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
20006ba8:	687b      	ldr	r3, [r7, #4]
20006baa:	2201      	movs	r2, #1
20006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
20006bb0:	687b      	ldr	r3, [r7, #4]
20006bb2:	2202      	movs	r2, #2
20006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
20006bb8:	687b      	ldr	r3, [r7, #4]
20006bba:	681b      	ldr	r3, [r3, #0]
20006bbc:	685b      	ldr	r3, [r3, #4]
20006bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
20006bc0:	687b      	ldr	r3, [r7, #4]
20006bc2:	681b      	ldr	r3, [r3, #0]
20006bc4:	689b      	ldr	r3, [r3, #8]
20006bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
20006bc8:	68fb      	ldr	r3, [r7, #12]
20006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
20006bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
20006bd0:	683b      	ldr	r3, [r7, #0]
20006bd2:	681b      	ldr	r3, [r3, #0]
20006bd4:	68fa      	ldr	r2, [r7, #12]
20006bd6:	4313      	orrs	r3, r2
20006bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
20006bda:	687b      	ldr	r3, [r7, #4]
20006bdc:	681b      	ldr	r3, [r3, #0]
20006bde:	68fa      	ldr	r2, [r7, #12]
20006be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
20006be2:	687b      	ldr	r3, [r7, #4]
20006be4:	681b      	ldr	r3, [r3, #0]
20006be6:	4a1c      	ldr	r2, [pc, #112]	; (20006c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
20006be8:	4293      	cmp	r3, r2
20006bea:	d018      	beq.n	20006c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20006bec:	687b      	ldr	r3, [r7, #4]
20006bee:	681b      	ldr	r3, [r3, #0]
20006bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20006bf4:	d013      	beq.n	20006c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20006bf6:	687b      	ldr	r3, [r7, #4]
20006bf8:	681b      	ldr	r3, [r3, #0]
20006bfa:	4a18      	ldr	r2, [pc, #96]	; (20006c5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
20006bfc:	4293      	cmp	r3, r2
20006bfe:	d00e      	beq.n	20006c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20006c00:	687b      	ldr	r3, [r7, #4]
20006c02:	681b      	ldr	r3, [r3, #0]
20006c04:	4a16      	ldr	r2, [pc, #88]	; (20006c60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
20006c06:	4293      	cmp	r3, r2
20006c08:	d009      	beq.n	20006c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20006c0a:	687b      	ldr	r3, [r7, #4]
20006c0c:	681b      	ldr	r3, [r3, #0]
20006c0e:	4a15      	ldr	r2, [pc, #84]	; (20006c64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
20006c10:	4293      	cmp	r3, r2
20006c12:	d004      	beq.n	20006c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20006c14:	687b      	ldr	r3, [r7, #4]
20006c16:	681b      	ldr	r3, [r3, #0]
20006c18:	4a13      	ldr	r2, [pc, #76]	; (20006c68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
20006c1a:	4293      	cmp	r3, r2
20006c1c:	d10c      	bne.n	20006c38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
20006c1e:	68bb      	ldr	r3, [r7, #8]
20006c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
20006c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
20006c26:	683b      	ldr	r3, [r7, #0]
20006c28:	685b      	ldr	r3, [r3, #4]
20006c2a:	68ba      	ldr	r2, [r7, #8]
20006c2c:	4313      	orrs	r3, r2
20006c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
20006c30:	687b      	ldr	r3, [r7, #4]
20006c32:	681b      	ldr	r3, [r3, #0]
20006c34:	68ba      	ldr	r2, [r7, #8]
20006c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
20006c38:	687b      	ldr	r3, [r7, #4]
20006c3a:	2201      	movs	r2, #1
20006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
20006c40:	687b      	ldr	r3, [r7, #4]
20006c42:	2200      	movs	r2, #0
20006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
20006c48:	2300      	movs	r3, #0
}
20006c4a:	4618      	mov	r0, r3
20006c4c:	3714      	adds	r7, #20
20006c4e:	46bd      	mov	sp, r7
20006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
20006c54:	4770      	bx	lr
20006c56:	bf00      	nop
20006c58:	40010000 	.word	0x40010000
20006c5c:	40000400 	.word	0x40000400
20006c60:	40000800 	.word	0x40000800
20006c64:	40000c00 	.word	0x40000c00
20006c68:	40014000 	.word	0x40014000

20006c6c <__errno>:
20006c6c:	4b01      	ldr	r3, [pc, #4]	; (20006c74 <__errno+0x8>)
20006c6e:	6818      	ldr	r0, [r3, #0]
20006c70:	4770      	bx	lr
20006c72:	bf00      	nop
20006c74:	20014788 	.word	0x20014788

20006c78 <__libc_init_array>:
20006c78:	b570      	push	{r4, r5, r6, lr}
20006c7a:	4d0d      	ldr	r5, [pc, #52]	; (20006cb0 <__libc_init_array+0x38>)
20006c7c:	4c0d      	ldr	r4, [pc, #52]	; (20006cb4 <__libc_init_array+0x3c>)
20006c7e:	1b64      	subs	r4, r4, r5
20006c80:	10a4      	asrs	r4, r4, #2
20006c82:	2600      	movs	r6, #0
20006c84:	42a6      	cmp	r6, r4
20006c86:	d109      	bne.n	20006c9c <__libc_init_array+0x24>
20006c88:	4d0b      	ldr	r5, [pc, #44]	; (20006cb8 <__libc_init_array+0x40>)
20006c8a:	4c0c      	ldr	r4, [pc, #48]	; (20006cbc <__libc_init_array+0x44>)
20006c8c:	f002 ff04 	bl	20009a98 <_init>
20006c90:	1b64      	subs	r4, r4, r5
20006c92:	10a4      	asrs	r4, r4, #2
20006c94:	2600      	movs	r6, #0
20006c96:	42a6      	cmp	r6, r4
20006c98:	d105      	bne.n	20006ca6 <__libc_init_array+0x2e>
20006c9a:	bd70      	pop	{r4, r5, r6, pc}
20006c9c:	f855 3b04 	ldr.w	r3, [r5], #4
20006ca0:	4798      	blx	r3
20006ca2:	3601      	adds	r6, #1
20006ca4:	e7ee      	b.n	20006c84 <__libc_init_array+0xc>
20006ca6:	f855 3b04 	ldr.w	r3, [r5], #4
20006caa:	4798      	blx	r3
20006cac:	3601      	adds	r6, #1
20006cae:	e7f2      	b.n	20006c96 <__libc_init_array+0x1e>
20006cb0:	20014724 	.word	0x20014724
20006cb4:	20014724 	.word	0x20014724
20006cb8:	20014724 	.word	0x20014724
20006cbc:	20014728 	.word	0x20014728

20006cc0 <memset>:
20006cc0:	4402      	add	r2, r0
20006cc2:	4603      	mov	r3, r0
20006cc4:	4293      	cmp	r3, r2
20006cc6:	d100      	bne.n	20006cca <memset+0xa>
20006cc8:	4770      	bx	lr
20006cca:	f803 1b01 	strb.w	r1, [r3], #1
20006cce:	e7f9      	b.n	20006cc4 <memset+0x4>

20006cd0 <__cvt>:
20006cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
20006cd4:	ec55 4b10 	vmov	r4, r5, d0
20006cd8:	2d00      	cmp	r5, #0
20006cda:	460e      	mov	r6, r1
20006cdc:	4619      	mov	r1, r3
20006cde:	462b      	mov	r3, r5
20006ce0:	bfbb      	ittet	lt
20006ce2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
20006ce6:	461d      	movlt	r5, r3
20006ce8:	2300      	movge	r3, #0
20006cea:	232d      	movlt	r3, #45	; 0x2d
20006cec:	700b      	strb	r3, [r1, #0]
20006cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
20006cf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
20006cf4:	4691      	mov	r9, r2
20006cf6:	f023 0820 	bic.w	r8, r3, #32
20006cfa:	bfbc      	itt	lt
20006cfc:	4622      	movlt	r2, r4
20006cfe:	4614      	movlt	r4, r2
20006d00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
20006d04:	d005      	beq.n	20006d12 <__cvt+0x42>
20006d06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
20006d0a:	d100      	bne.n	20006d0e <__cvt+0x3e>
20006d0c:	3601      	adds	r6, #1
20006d0e:	2102      	movs	r1, #2
20006d10:	e000      	b.n	20006d14 <__cvt+0x44>
20006d12:	2103      	movs	r1, #3
20006d14:	ab03      	add	r3, sp, #12
20006d16:	9301      	str	r3, [sp, #4]
20006d18:	ab02      	add	r3, sp, #8
20006d1a:	9300      	str	r3, [sp, #0]
20006d1c:	ec45 4b10 	vmov	d0, r4, r5
20006d20:	4653      	mov	r3, sl
20006d22:	4632      	mov	r2, r6
20006d24:	f000 fcec 	bl	20007700 <_dtoa_r>
20006d28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
20006d2c:	4607      	mov	r7, r0
20006d2e:	d102      	bne.n	20006d36 <__cvt+0x66>
20006d30:	f019 0f01 	tst.w	r9, #1
20006d34:	d022      	beq.n	20006d7c <__cvt+0xac>
20006d36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
20006d3a:	eb07 0906 	add.w	r9, r7, r6
20006d3e:	d110      	bne.n	20006d62 <__cvt+0x92>
20006d40:	783b      	ldrb	r3, [r7, #0]
20006d42:	2b30      	cmp	r3, #48	; 0x30
20006d44:	d10a      	bne.n	20006d5c <__cvt+0x8c>
20006d46:	2200      	movs	r2, #0
20006d48:	2300      	movs	r3, #0
20006d4a:	4620      	mov	r0, r4
20006d4c:	4629      	mov	r1, r5
20006d4e:	f7f9 fec3 	bl	20000ad8 <__aeabi_dcmpeq>
20006d52:	b918      	cbnz	r0, 20006d5c <__cvt+0x8c>
20006d54:	f1c6 0601 	rsb	r6, r6, #1
20006d58:	f8ca 6000 	str.w	r6, [sl]
20006d5c:	f8da 3000 	ldr.w	r3, [sl]
20006d60:	4499      	add	r9, r3
20006d62:	2200      	movs	r2, #0
20006d64:	2300      	movs	r3, #0
20006d66:	4620      	mov	r0, r4
20006d68:	4629      	mov	r1, r5
20006d6a:	f7f9 feb5 	bl	20000ad8 <__aeabi_dcmpeq>
20006d6e:	b108      	cbz	r0, 20006d74 <__cvt+0xa4>
20006d70:	f8cd 900c 	str.w	r9, [sp, #12]
20006d74:	2230      	movs	r2, #48	; 0x30
20006d76:	9b03      	ldr	r3, [sp, #12]
20006d78:	454b      	cmp	r3, r9
20006d7a:	d307      	bcc.n	20006d8c <__cvt+0xbc>
20006d7c:	9b03      	ldr	r3, [sp, #12]
20006d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
20006d80:	1bdb      	subs	r3, r3, r7
20006d82:	4638      	mov	r0, r7
20006d84:	6013      	str	r3, [r2, #0]
20006d86:	b004      	add	sp, #16
20006d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20006d8c:	1c59      	adds	r1, r3, #1
20006d8e:	9103      	str	r1, [sp, #12]
20006d90:	701a      	strb	r2, [r3, #0]
20006d92:	e7f0      	b.n	20006d76 <__cvt+0xa6>

20006d94 <__exponent>:
20006d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
20006d96:	4603      	mov	r3, r0
20006d98:	2900      	cmp	r1, #0
20006d9a:	bfb8      	it	lt
20006d9c:	4249      	neglt	r1, r1
20006d9e:	f803 2b02 	strb.w	r2, [r3], #2
20006da2:	bfb4      	ite	lt
20006da4:	222d      	movlt	r2, #45	; 0x2d
20006da6:	222b      	movge	r2, #43	; 0x2b
20006da8:	2909      	cmp	r1, #9
20006daa:	7042      	strb	r2, [r0, #1]
20006dac:	dd2a      	ble.n	20006e04 <__exponent+0x70>
20006dae:	f10d 0407 	add.w	r4, sp, #7
20006db2:	46a4      	mov	ip, r4
20006db4:	270a      	movs	r7, #10
20006db6:	46a6      	mov	lr, r4
20006db8:	460a      	mov	r2, r1
20006dba:	fb91 f6f7 	sdiv	r6, r1, r7
20006dbe:	fb07 1516 	mls	r5, r7, r6, r1
20006dc2:	3530      	adds	r5, #48	; 0x30
20006dc4:	2a63      	cmp	r2, #99	; 0x63
20006dc6:	f104 34ff 	add.w	r4, r4, #4294967295
20006dca:	f80e 5c01 	strb.w	r5, [lr, #-1]
20006dce:	4631      	mov	r1, r6
20006dd0:	dcf1      	bgt.n	20006db6 <__exponent+0x22>
20006dd2:	3130      	adds	r1, #48	; 0x30
20006dd4:	f1ae 0502 	sub.w	r5, lr, #2
20006dd8:	f804 1c01 	strb.w	r1, [r4, #-1]
20006ddc:	1c44      	adds	r4, r0, #1
20006dde:	4629      	mov	r1, r5
20006de0:	4561      	cmp	r1, ip
20006de2:	d30a      	bcc.n	20006dfa <__exponent+0x66>
20006de4:	f10d 0209 	add.w	r2, sp, #9
20006de8:	eba2 020e 	sub.w	r2, r2, lr
20006dec:	4565      	cmp	r5, ip
20006dee:	bf88      	it	hi
20006df0:	2200      	movhi	r2, #0
20006df2:	4413      	add	r3, r2
20006df4:	1a18      	subs	r0, r3, r0
20006df6:	b003      	add	sp, #12
20006df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
20006dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
20006dfe:	f804 2f01 	strb.w	r2, [r4, #1]!
20006e02:	e7ed      	b.n	20006de0 <__exponent+0x4c>
20006e04:	2330      	movs	r3, #48	; 0x30
20006e06:	3130      	adds	r1, #48	; 0x30
20006e08:	7083      	strb	r3, [r0, #2]
20006e0a:	70c1      	strb	r1, [r0, #3]
20006e0c:	1d03      	adds	r3, r0, #4
20006e0e:	e7f1      	b.n	20006df4 <__exponent+0x60>

20006e10 <_printf_float>:
20006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20006e14:	ed2d 8b02 	vpush	{d8}
20006e18:	b08d      	sub	sp, #52	; 0x34
20006e1a:	460c      	mov	r4, r1
20006e1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
20006e20:	4616      	mov	r6, r2
20006e22:	461f      	mov	r7, r3
20006e24:	4605      	mov	r5, r0
20006e26:	f001 fa59 	bl	200082dc <_localeconv_r>
20006e2a:	f8d0 a000 	ldr.w	sl, [r0]
20006e2e:	4650      	mov	r0, sl
20006e30:	f7f9 f9d6 	bl	200001e0 <strlen>
20006e34:	2300      	movs	r3, #0
20006e36:	930a      	str	r3, [sp, #40]	; 0x28
20006e38:	6823      	ldr	r3, [r4, #0]
20006e3a:	9305      	str	r3, [sp, #20]
20006e3c:	f8d8 3000 	ldr.w	r3, [r8]
20006e40:	f894 b018 	ldrb.w	fp, [r4, #24]
20006e44:	3307      	adds	r3, #7
20006e46:	f023 0307 	bic.w	r3, r3, #7
20006e4a:	f103 0208 	add.w	r2, r3, #8
20006e4e:	f8c8 2000 	str.w	r2, [r8]
20006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
20006e56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
20006e5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
20006e5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
20006e62:	9307      	str	r3, [sp, #28]
20006e64:	f8cd 8018 	str.w	r8, [sp, #24]
20006e68:	ee08 0a10 	vmov	s16, r0
20006e6c:	4b9f      	ldr	r3, [pc, #636]	; (200070ec <_printf_float+0x2dc>)
20006e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
20006e72:	f04f 32ff 	mov.w	r2, #4294967295
20006e76:	f7f9 fe61 	bl	20000b3c <__aeabi_dcmpun>
20006e7a:	bb88      	cbnz	r0, 20006ee0 <_printf_float+0xd0>
20006e7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
20006e80:	4b9a      	ldr	r3, [pc, #616]	; (200070ec <_printf_float+0x2dc>)
20006e82:	f04f 32ff 	mov.w	r2, #4294967295
20006e86:	f7f9 fe3b 	bl	20000b00 <__aeabi_dcmple>
20006e8a:	bb48      	cbnz	r0, 20006ee0 <_printf_float+0xd0>
20006e8c:	2200      	movs	r2, #0
20006e8e:	2300      	movs	r3, #0
20006e90:	4640      	mov	r0, r8
20006e92:	4649      	mov	r1, r9
20006e94:	f7f9 fe2a 	bl	20000aec <__aeabi_dcmplt>
20006e98:	b110      	cbz	r0, 20006ea0 <_printf_float+0x90>
20006e9a:	232d      	movs	r3, #45	; 0x2d
20006e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
20006ea0:	4b93      	ldr	r3, [pc, #588]	; (200070f0 <_printf_float+0x2e0>)
20006ea2:	4894      	ldr	r0, [pc, #592]	; (200070f4 <_printf_float+0x2e4>)
20006ea4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
20006ea8:	bf94      	ite	ls
20006eaa:	4698      	movls	r8, r3
20006eac:	4680      	movhi	r8, r0
20006eae:	2303      	movs	r3, #3
20006eb0:	6123      	str	r3, [r4, #16]
20006eb2:	9b05      	ldr	r3, [sp, #20]
20006eb4:	f023 0204 	bic.w	r2, r3, #4
20006eb8:	6022      	str	r2, [r4, #0]
20006eba:	f04f 0900 	mov.w	r9, #0
20006ebe:	9700      	str	r7, [sp, #0]
20006ec0:	4633      	mov	r3, r6
20006ec2:	aa0b      	add	r2, sp, #44	; 0x2c
20006ec4:	4621      	mov	r1, r4
20006ec6:	4628      	mov	r0, r5
20006ec8:	f000 f9d8 	bl	2000727c <_printf_common>
20006ecc:	3001      	adds	r0, #1
20006ece:	f040 8090 	bne.w	20006ff2 <_printf_float+0x1e2>
20006ed2:	f04f 30ff 	mov.w	r0, #4294967295
20006ed6:	b00d      	add	sp, #52	; 0x34
20006ed8:	ecbd 8b02 	vpop	{d8}
20006edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20006ee0:	4642      	mov	r2, r8
20006ee2:	464b      	mov	r3, r9
20006ee4:	4640      	mov	r0, r8
20006ee6:	4649      	mov	r1, r9
20006ee8:	f7f9 fe28 	bl	20000b3c <__aeabi_dcmpun>
20006eec:	b140      	cbz	r0, 20006f00 <_printf_float+0xf0>
20006eee:	464b      	mov	r3, r9
20006ef0:	2b00      	cmp	r3, #0
20006ef2:	bfbc      	itt	lt
20006ef4:	232d      	movlt	r3, #45	; 0x2d
20006ef6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
20006efa:	487f      	ldr	r0, [pc, #508]	; (200070f8 <_printf_float+0x2e8>)
20006efc:	4b7f      	ldr	r3, [pc, #508]	; (200070fc <_printf_float+0x2ec>)
20006efe:	e7d1      	b.n	20006ea4 <_printf_float+0x94>
20006f00:	6863      	ldr	r3, [r4, #4]
20006f02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
20006f06:	9206      	str	r2, [sp, #24]
20006f08:	1c5a      	adds	r2, r3, #1
20006f0a:	d13f      	bne.n	20006f8c <_printf_float+0x17c>
20006f0c:	2306      	movs	r3, #6
20006f0e:	6063      	str	r3, [r4, #4]
20006f10:	9b05      	ldr	r3, [sp, #20]
20006f12:	6861      	ldr	r1, [r4, #4]
20006f14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
20006f18:	2300      	movs	r3, #0
20006f1a:	9303      	str	r3, [sp, #12]
20006f1c:	ab0a      	add	r3, sp, #40	; 0x28
20006f1e:	e9cd b301 	strd	fp, r3, [sp, #4]
20006f22:	ab09      	add	r3, sp, #36	; 0x24
20006f24:	ec49 8b10 	vmov	d0, r8, r9
20006f28:	9300      	str	r3, [sp, #0]
20006f2a:	6022      	str	r2, [r4, #0]
20006f2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
20006f30:	4628      	mov	r0, r5
20006f32:	f7ff fecd 	bl	20006cd0 <__cvt>
20006f36:	9b06      	ldr	r3, [sp, #24]
20006f38:	9909      	ldr	r1, [sp, #36]	; 0x24
20006f3a:	2b47      	cmp	r3, #71	; 0x47
20006f3c:	4680      	mov	r8, r0
20006f3e:	d108      	bne.n	20006f52 <_printf_float+0x142>
20006f40:	1cc8      	adds	r0, r1, #3
20006f42:	db02      	blt.n	20006f4a <_printf_float+0x13a>
20006f44:	6863      	ldr	r3, [r4, #4]
20006f46:	4299      	cmp	r1, r3
20006f48:	dd41      	ble.n	20006fce <_printf_float+0x1be>
20006f4a:	f1ab 0b02 	sub.w	fp, fp, #2
20006f4e:	fa5f fb8b 	uxtb.w	fp, fp
20006f52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
20006f56:	d820      	bhi.n	20006f9a <_printf_float+0x18a>
20006f58:	3901      	subs	r1, #1
20006f5a:	465a      	mov	r2, fp
20006f5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
20006f60:	9109      	str	r1, [sp, #36]	; 0x24
20006f62:	f7ff ff17 	bl	20006d94 <__exponent>
20006f66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
20006f68:	1813      	adds	r3, r2, r0
20006f6a:	2a01      	cmp	r2, #1
20006f6c:	4681      	mov	r9, r0
20006f6e:	6123      	str	r3, [r4, #16]
20006f70:	dc02      	bgt.n	20006f78 <_printf_float+0x168>
20006f72:	6822      	ldr	r2, [r4, #0]
20006f74:	07d2      	lsls	r2, r2, #31
20006f76:	d501      	bpl.n	20006f7c <_printf_float+0x16c>
20006f78:	3301      	adds	r3, #1
20006f7a:	6123      	str	r3, [r4, #16]
20006f7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
20006f80:	2b00      	cmp	r3, #0
20006f82:	d09c      	beq.n	20006ebe <_printf_float+0xae>
20006f84:	232d      	movs	r3, #45	; 0x2d
20006f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
20006f8a:	e798      	b.n	20006ebe <_printf_float+0xae>
20006f8c:	9a06      	ldr	r2, [sp, #24]
20006f8e:	2a47      	cmp	r2, #71	; 0x47
20006f90:	d1be      	bne.n	20006f10 <_printf_float+0x100>
20006f92:	2b00      	cmp	r3, #0
20006f94:	d1bc      	bne.n	20006f10 <_printf_float+0x100>
20006f96:	2301      	movs	r3, #1
20006f98:	e7b9      	b.n	20006f0e <_printf_float+0xfe>
20006f9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
20006f9e:	d118      	bne.n	20006fd2 <_printf_float+0x1c2>
20006fa0:	2900      	cmp	r1, #0
20006fa2:	6863      	ldr	r3, [r4, #4]
20006fa4:	dd0b      	ble.n	20006fbe <_printf_float+0x1ae>
20006fa6:	6121      	str	r1, [r4, #16]
20006fa8:	b913      	cbnz	r3, 20006fb0 <_printf_float+0x1a0>
20006faa:	6822      	ldr	r2, [r4, #0]
20006fac:	07d0      	lsls	r0, r2, #31
20006fae:	d502      	bpl.n	20006fb6 <_printf_float+0x1a6>
20006fb0:	3301      	adds	r3, #1
20006fb2:	440b      	add	r3, r1
20006fb4:	6123      	str	r3, [r4, #16]
20006fb6:	65a1      	str	r1, [r4, #88]	; 0x58
20006fb8:	f04f 0900 	mov.w	r9, #0
20006fbc:	e7de      	b.n	20006f7c <_printf_float+0x16c>
20006fbe:	b913      	cbnz	r3, 20006fc6 <_printf_float+0x1b6>
20006fc0:	6822      	ldr	r2, [r4, #0]
20006fc2:	07d2      	lsls	r2, r2, #31
20006fc4:	d501      	bpl.n	20006fca <_printf_float+0x1ba>
20006fc6:	3302      	adds	r3, #2
20006fc8:	e7f4      	b.n	20006fb4 <_printf_float+0x1a4>
20006fca:	2301      	movs	r3, #1
20006fcc:	e7f2      	b.n	20006fb4 <_printf_float+0x1a4>
20006fce:	f04f 0b67 	mov.w	fp, #103	; 0x67
20006fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
20006fd4:	4299      	cmp	r1, r3
20006fd6:	db05      	blt.n	20006fe4 <_printf_float+0x1d4>
20006fd8:	6823      	ldr	r3, [r4, #0]
20006fda:	6121      	str	r1, [r4, #16]
20006fdc:	07d8      	lsls	r0, r3, #31
20006fde:	d5ea      	bpl.n	20006fb6 <_printf_float+0x1a6>
20006fe0:	1c4b      	adds	r3, r1, #1
20006fe2:	e7e7      	b.n	20006fb4 <_printf_float+0x1a4>
20006fe4:	2900      	cmp	r1, #0
20006fe6:	bfd4      	ite	le
20006fe8:	f1c1 0202 	rsble	r2, r1, #2
20006fec:	2201      	movgt	r2, #1
20006fee:	4413      	add	r3, r2
20006ff0:	e7e0      	b.n	20006fb4 <_printf_float+0x1a4>
20006ff2:	6823      	ldr	r3, [r4, #0]
20006ff4:	055a      	lsls	r2, r3, #21
20006ff6:	d407      	bmi.n	20007008 <_printf_float+0x1f8>
20006ff8:	6923      	ldr	r3, [r4, #16]
20006ffa:	4642      	mov	r2, r8
20006ffc:	4631      	mov	r1, r6
20006ffe:	4628      	mov	r0, r5
20007000:	47b8      	blx	r7
20007002:	3001      	adds	r0, #1
20007004:	d12c      	bne.n	20007060 <_printf_float+0x250>
20007006:	e764      	b.n	20006ed2 <_printf_float+0xc2>
20007008:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
2000700c:	f240 80e0 	bls.w	200071d0 <_printf_float+0x3c0>
20007010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
20007014:	2200      	movs	r2, #0
20007016:	2300      	movs	r3, #0
20007018:	f7f9 fd5e 	bl	20000ad8 <__aeabi_dcmpeq>
2000701c:	2800      	cmp	r0, #0
2000701e:	d034      	beq.n	2000708a <_printf_float+0x27a>
20007020:	4a37      	ldr	r2, [pc, #220]	; (20007100 <_printf_float+0x2f0>)
20007022:	2301      	movs	r3, #1
20007024:	4631      	mov	r1, r6
20007026:	4628      	mov	r0, r5
20007028:	47b8      	blx	r7
2000702a:	3001      	adds	r0, #1
2000702c:	f43f af51 	beq.w	20006ed2 <_printf_float+0xc2>
20007030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
20007034:	429a      	cmp	r2, r3
20007036:	db02      	blt.n	2000703e <_printf_float+0x22e>
20007038:	6823      	ldr	r3, [r4, #0]
2000703a:	07d8      	lsls	r0, r3, #31
2000703c:	d510      	bpl.n	20007060 <_printf_float+0x250>
2000703e:	ee18 3a10 	vmov	r3, s16
20007042:	4652      	mov	r2, sl
20007044:	4631      	mov	r1, r6
20007046:	4628      	mov	r0, r5
20007048:	47b8      	blx	r7
2000704a:	3001      	adds	r0, #1
2000704c:	f43f af41 	beq.w	20006ed2 <_printf_float+0xc2>
20007050:	f04f 0800 	mov.w	r8, #0
20007054:	f104 091a 	add.w	r9, r4, #26
20007058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000705a:	3b01      	subs	r3, #1
2000705c:	4543      	cmp	r3, r8
2000705e:	dc09      	bgt.n	20007074 <_printf_float+0x264>
20007060:	6823      	ldr	r3, [r4, #0]
20007062:	079b      	lsls	r3, r3, #30
20007064:	f100 8105 	bmi.w	20007272 <_printf_float+0x462>
20007068:	68e0      	ldr	r0, [r4, #12]
2000706a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2000706c:	4298      	cmp	r0, r3
2000706e:	bfb8      	it	lt
20007070:	4618      	movlt	r0, r3
20007072:	e730      	b.n	20006ed6 <_printf_float+0xc6>
20007074:	2301      	movs	r3, #1
20007076:	464a      	mov	r2, r9
20007078:	4631      	mov	r1, r6
2000707a:	4628      	mov	r0, r5
2000707c:	47b8      	blx	r7
2000707e:	3001      	adds	r0, #1
20007080:	f43f af27 	beq.w	20006ed2 <_printf_float+0xc2>
20007084:	f108 0801 	add.w	r8, r8, #1
20007088:	e7e6      	b.n	20007058 <_printf_float+0x248>
2000708a:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000708c:	2b00      	cmp	r3, #0
2000708e:	dc39      	bgt.n	20007104 <_printf_float+0x2f4>
20007090:	4a1b      	ldr	r2, [pc, #108]	; (20007100 <_printf_float+0x2f0>)
20007092:	2301      	movs	r3, #1
20007094:	4631      	mov	r1, r6
20007096:	4628      	mov	r0, r5
20007098:	47b8      	blx	r7
2000709a:	3001      	adds	r0, #1
2000709c:	f43f af19 	beq.w	20006ed2 <_printf_float+0xc2>
200070a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
200070a4:	4313      	orrs	r3, r2
200070a6:	d102      	bne.n	200070ae <_printf_float+0x29e>
200070a8:	6823      	ldr	r3, [r4, #0]
200070aa:	07d9      	lsls	r1, r3, #31
200070ac:	d5d8      	bpl.n	20007060 <_printf_float+0x250>
200070ae:	ee18 3a10 	vmov	r3, s16
200070b2:	4652      	mov	r2, sl
200070b4:	4631      	mov	r1, r6
200070b6:	4628      	mov	r0, r5
200070b8:	47b8      	blx	r7
200070ba:	3001      	adds	r0, #1
200070bc:	f43f af09 	beq.w	20006ed2 <_printf_float+0xc2>
200070c0:	f04f 0900 	mov.w	r9, #0
200070c4:	f104 0a1a 	add.w	sl, r4, #26
200070c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
200070ca:	425b      	negs	r3, r3
200070cc:	454b      	cmp	r3, r9
200070ce:	dc01      	bgt.n	200070d4 <_printf_float+0x2c4>
200070d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
200070d2:	e792      	b.n	20006ffa <_printf_float+0x1ea>
200070d4:	2301      	movs	r3, #1
200070d6:	4652      	mov	r2, sl
200070d8:	4631      	mov	r1, r6
200070da:	4628      	mov	r0, r5
200070dc:	47b8      	blx	r7
200070de:	3001      	adds	r0, #1
200070e0:	f43f aef7 	beq.w	20006ed2 <_printf_float+0xc2>
200070e4:	f109 0901 	add.w	r9, r9, #1
200070e8:	e7ee      	b.n	200070c8 <_printf_float+0x2b8>
200070ea:	bf00      	nop
200070ec:	7fefffff 	.word	0x7fefffff
200070f0:	20014344 	.word	0x20014344
200070f4:	20014348 	.word	0x20014348
200070f8:	20014350 	.word	0x20014350
200070fc:	2001434c 	.word	0x2001434c
20007100:	20014354 	.word	0x20014354
20007104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
20007106:	6da3      	ldr	r3, [r4, #88]	; 0x58
20007108:	429a      	cmp	r2, r3
2000710a:	bfa8      	it	ge
2000710c:	461a      	movge	r2, r3
2000710e:	2a00      	cmp	r2, #0
20007110:	4691      	mov	r9, r2
20007112:	dc37      	bgt.n	20007184 <_printf_float+0x374>
20007114:	f04f 0b00 	mov.w	fp, #0
20007118:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
2000711c:	f104 021a 	add.w	r2, r4, #26
20007120:	6da3      	ldr	r3, [r4, #88]	; 0x58
20007122:	9305      	str	r3, [sp, #20]
20007124:	eba3 0309 	sub.w	r3, r3, r9
20007128:	455b      	cmp	r3, fp
2000712a:	dc33      	bgt.n	20007194 <_printf_float+0x384>
2000712c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
20007130:	429a      	cmp	r2, r3
20007132:	db3b      	blt.n	200071ac <_printf_float+0x39c>
20007134:	6823      	ldr	r3, [r4, #0]
20007136:	07da      	lsls	r2, r3, #31
20007138:	d438      	bmi.n	200071ac <_printf_float+0x39c>
2000713a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000713c:	9a05      	ldr	r2, [sp, #20]
2000713e:	9909      	ldr	r1, [sp, #36]	; 0x24
20007140:	1a9a      	subs	r2, r3, r2
20007142:	eba3 0901 	sub.w	r9, r3, r1
20007146:	4591      	cmp	r9, r2
20007148:	bfa8      	it	ge
2000714a:	4691      	movge	r9, r2
2000714c:	f1b9 0f00 	cmp.w	r9, #0
20007150:	dc35      	bgt.n	200071be <_printf_float+0x3ae>
20007152:	f04f 0800 	mov.w	r8, #0
20007156:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
2000715a:	f104 0a1a 	add.w	sl, r4, #26
2000715e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
20007162:	1a9b      	subs	r3, r3, r2
20007164:	eba3 0309 	sub.w	r3, r3, r9
20007168:	4543      	cmp	r3, r8
2000716a:	f77f af79 	ble.w	20007060 <_printf_float+0x250>
2000716e:	2301      	movs	r3, #1
20007170:	4652      	mov	r2, sl
20007172:	4631      	mov	r1, r6
20007174:	4628      	mov	r0, r5
20007176:	47b8      	blx	r7
20007178:	3001      	adds	r0, #1
2000717a:	f43f aeaa 	beq.w	20006ed2 <_printf_float+0xc2>
2000717e:	f108 0801 	add.w	r8, r8, #1
20007182:	e7ec      	b.n	2000715e <_printf_float+0x34e>
20007184:	4613      	mov	r3, r2
20007186:	4631      	mov	r1, r6
20007188:	4642      	mov	r2, r8
2000718a:	4628      	mov	r0, r5
2000718c:	47b8      	blx	r7
2000718e:	3001      	adds	r0, #1
20007190:	d1c0      	bne.n	20007114 <_printf_float+0x304>
20007192:	e69e      	b.n	20006ed2 <_printf_float+0xc2>
20007194:	2301      	movs	r3, #1
20007196:	4631      	mov	r1, r6
20007198:	4628      	mov	r0, r5
2000719a:	9205      	str	r2, [sp, #20]
2000719c:	47b8      	blx	r7
2000719e:	3001      	adds	r0, #1
200071a0:	f43f ae97 	beq.w	20006ed2 <_printf_float+0xc2>
200071a4:	9a05      	ldr	r2, [sp, #20]
200071a6:	f10b 0b01 	add.w	fp, fp, #1
200071aa:	e7b9      	b.n	20007120 <_printf_float+0x310>
200071ac:	ee18 3a10 	vmov	r3, s16
200071b0:	4652      	mov	r2, sl
200071b2:	4631      	mov	r1, r6
200071b4:	4628      	mov	r0, r5
200071b6:	47b8      	blx	r7
200071b8:	3001      	adds	r0, #1
200071ba:	d1be      	bne.n	2000713a <_printf_float+0x32a>
200071bc:	e689      	b.n	20006ed2 <_printf_float+0xc2>
200071be:	9a05      	ldr	r2, [sp, #20]
200071c0:	464b      	mov	r3, r9
200071c2:	4442      	add	r2, r8
200071c4:	4631      	mov	r1, r6
200071c6:	4628      	mov	r0, r5
200071c8:	47b8      	blx	r7
200071ca:	3001      	adds	r0, #1
200071cc:	d1c1      	bne.n	20007152 <_printf_float+0x342>
200071ce:	e680      	b.n	20006ed2 <_printf_float+0xc2>
200071d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
200071d2:	2a01      	cmp	r2, #1
200071d4:	dc01      	bgt.n	200071da <_printf_float+0x3ca>
200071d6:	07db      	lsls	r3, r3, #31
200071d8:	d538      	bpl.n	2000724c <_printf_float+0x43c>
200071da:	2301      	movs	r3, #1
200071dc:	4642      	mov	r2, r8
200071de:	4631      	mov	r1, r6
200071e0:	4628      	mov	r0, r5
200071e2:	47b8      	blx	r7
200071e4:	3001      	adds	r0, #1
200071e6:	f43f ae74 	beq.w	20006ed2 <_printf_float+0xc2>
200071ea:	ee18 3a10 	vmov	r3, s16
200071ee:	4652      	mov	r2, sl
200071f0:	4631      	mov	r1, r6
200071f2:	4628      	mov	r0, r5
200071f4:	47b8      	blx	r7
200071f6:	3001      	adds	r0, #1
200071f8:	f43f ae6b 	beq.w	20006ed2 <_printf_float+0xc2>
200071fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
20007200:	2200      	movs	r2, #0
20007202:	2300      	movs	r3, #0
20007204:	f7f9 fc68 	bl	20000ad8 <__aeabi_dcmpeq>
20007208:	b9d8      	cbnz	r0, 20007242 <_printf_float+0x432>
2000720a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2000720c:	f108 0201 	add.w	r2, r8, #1
20007210:	3b01      	subs	r3, #1
20007212:	4631      	mov	r1, r6
20007214:	4628      	mov	r0, r5
20007216:	47b8      	blx	r7
20007218:	3001      	adds	r0, #1
2000721a:	d10e      	bne.n	2000723a <_printf_float+0x42a>
2000721c:	e659      	b.n	20006ed2 <_printf_float+0xc2>
2000721e:	2301      	movs	r3, #1
20007220:	4652      	mov	r2, sl
20007222:	4631      	mov	r1, r6
20007224:	4628      	mov	r0, r5
20007226:	47b8      	blx	r7
20007228:	3001      	adds	r0, #1
2000722a:	f43f ae52 	beq.w	20006ed2 <_printf_float+0xc2>
2000722e:	f108 0801 	add.w	r8, r8, #1
20007232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
20007234:	3b01      	subs	r3, #1
20007236:	4543      	cmp	r3, r8
20007238:	dcf1      	bgt.n	2000721e <_printf_float+0x40e>
2000723a:	464b      	mov	r3, r9
2000723c:	f104 0250 	add.w	r2, r4, #80	; 0x50
20007240:	e6dc      	b.n	20006ffc <_printf_float+0x1ec>
20007242:	f04f 0800 	mov.w	r8, #0
20007246:	f104 0a1a 	add.w	sl, r4, #26
2000724a:	e7f2      	b.n	20007232 <_printf_float+0x422>
2000724c:	2301      	movs	r3, #1
2000724e:	4642      	mov	r2, r8
20007250:	e7df      	b.n	20007212 <_printf_float+0x402>
20007252:	2301      	movs	r3, #1
20007254:	464a      	mov	r2, r9
20007256:	4631      	mov	r1, r6
20007258:	4628      	mov	r0, r5
2000725a:	47b8      	blx	r7
2000725c:	3001      	adds	r0, #1
2000725e:	f43f ae38 	beq.w	20006ed2 <_printf_float+0xc2>
20007262:	f108 0801 	add.w	r8, r8, #1
20007266:	68e3      	ldr	r3, [r4, #12]
20007268:	990b      	ldr	r1, [sp, #44]	; 0x2c
2000726a:	1a5b      	subs	r3, r3, r1
2000726c:	4543      	cmp	r3, r8
2000726e:	dcf0      	bgt.n	20007252 <_printf_float+0x442>
20007270:	e6fa      	b.n	20007068 <_printf_float+0x258>
20007272:	f04f 0800 	mov.w	r8, #0
20007276:	f104 0919 	add.w	r9, r4, #25
2000727a:	e7f4      	b.n	20007266 <_printf_float+0x456>

2000727c <_printf_common>:
2000727c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20007280:	4616      	mov	r6, r2
20007282:	4699      	mov	r9, r3
20007284:	688a      	ldr	r2, [r1, #8]
20007286:	690b      	ldr	r3, [r1, #16]
20007288:	f8dd 8020 	ldr.w	r8, [sp, #32]
2000728c:	4293      	cmp	r3, r2
2000728e:	bfb8      	it	lt
20007290:	4613      	movlt	r3, r2
20007292:	6033      	str	r3, [r6, #0]
20007294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
20007298:	4607      	mov	r7, r0
2000729a:	460c      	mov	r4, r1
2000729c:	b10a      	cbz	r2, 200072a2 <_printf_common+0x26>
2000729e:	3301      	adds	r3, #1
200072a0:	6033      	str	r3, [r6, #0]
200072a2:	6823      	ldr	r3, [r4, #0]
200072a4:	0699      	lsls	r1, r3, #26
200072a6:	bf42      	ittt	mi
200072a8:	6833      	ldrmi	r3, [r6, #0]
200072aa:	3302      	addmi	r3, #2
200072ac:	6033      	strmi	r3, [r6, #0]
200072ae:	6825      	ldr	r5, [r4, #0]
200072b0:	f015 0506 	ands.w	r5, r5, #6
200072b4:	d106      	bne.n	200072c4 <_printf_common+0x48>
200072b6:	f104 0a19 	add.w	sl, r4, #25
200072ba:	68e3      	ldr	r3, [r4, #12]
200072bc:	6832      	ldr	r2, [r6, #0]
200072be:	1a9b      	subs	r3, r3, r2
200072c0:	42ab      	cmp	r3, r5
200072c2:	dc26      	bgt.n	20007312 <_printf_common+0x96>
200072c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
200072c8:	1e13      	subs	r3, r2, #0
200072ca:	6822      	ldr	r2, [r4, #0]
200072cc:	bf18      	it	ne
200072ce:	2301      	movne	r3, #1
200072d0:	0692      	lsls	r2, r2, #26
200072d2:	d42b      	bmi.n	2000732c <_printf_common+0xb0>
200072d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
200072d8:	4649      	mov	r1, r9
200072da:	4638      	mov	r0, r7
200072dc:	47c0      	blx	r8
200072de:	3001      	adds	r0, #1
200072e0:	d01e      	beq.n	20007320 <_printf_common+0xa4>
200072e2:	6823      	ldr	r3, [r4, #0]
200072e4:	68e5      	ldr	r5, [r4, #12]
200072e6:	6832      	ldr	r2, [r6, #0]
200072e8:	f003 0306 	and.w	r3, r3, #6
200072ec:	2b04      	cmp	r3, #4
200072ee:	bf08      	it	eq
200072f0:	1aad      	subeq	r5, r5, r2
200072f2:	68a3      	ldr	r3, [r4, #8]
200072f4:	6922      	ldr	r2, [r4, #16]
200072f6:	bf0c      	ite	eq
200072f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
200072fc:	2500      	movne	r5, #0
200072fe:	4293      	cmp	r3, r2
20007300:	bfc4      	itt	gt
20007302:	1a9b      	subgt	r3, r3, r2
20007304:	18ed      	addgt	r5, r5, r3
20007306:	2600      	movs	r6, #0
20007308:	341a      	adds	r4, #26
2000730a:	42b5      	cmp	r5, r6
2000730c:	d11a      	bne.n	20007344 <_printf_common+0xc8>
2000730e:	2000      	movs	r0, #0
20007310:	e008      	b.n	20007324 <_printf_common+0xa8>
20007312:	2301      	movs	r3, #1
20007314:	4652      	mov	r2, sl
20007316:	4649      	mov	r1, r9
20007318:	4638      	mov	r0, r7
2000731a:	47c0      	blx	r8
2000731c:	3001      	adds	r0, #1
2000731e:	d103      	bne.n	20007328 <_printf_common+0xac>
20007320:	f04f 30ff 	mov.w	r0, #4294967295
20007324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20007328:	3501      	adds	r5, #1
2000732a:	e7c6      	b.n	200072ba <_printf_common+0x3e>
2000732c:	18e1      	adds	r1, r4, r3
2000732e:	1c5a      	adds	r2, r3, #1
20007330:	2030      	movs	r0, #48	; 0x30
20007332:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
20007336:	4422      	add	r2, r4
20007338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
2000733c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
20007340:	3302      	adds	r3, #2
20007342:	e7c7      	b.n	200072d4 <_printf_common+0x58>
20007344:	2301      	movs	r3, #1
20007346:	4622      	mov	r2, r4
20007348:	4649      	mov	r1, r9
2000734a:	4638      	mov	r0, r7
2000734c:	47c0      	blx	r8
2000734e:	3001      	adds	r0, #1
20007350:	d0e6      	beq.n	20007320 <_printf_common+0xa4>
20007352:	3601      	adds	r6, #1
20007354:	e7d9      	b.n	2000730a <_printf_common+0x8e>
	...

20007358 <_printf_i>:
20007358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
2000735c:	7e0f      	ldrb	r7, [r1, #24]
2000735e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
20007360:	2f78      	cmp	r7, #120	; 0x78
20007362:	4691      	mov	r9, r2
20007364:	4680      	mov	r8, r0
20007366:	460c      	mov	r4, r1
20007368:	469a      	mov	sl, r3
2000736a:	f101 0243 	add.w	r2, r1, #67	; 0x43
2000736e:	d807      	bhi.n	20007380 <_printf_i+0x28>
20007370:	2f62      	cmp	r7, #98	; 0x62
20007372:	d80a      	bhi.n	2000738a <_printf_i+0x32>
20007374:	2f00      	cmp	r7, #0
20007376:	f000 80d8 	beq.w	2000752a <_printf_i+0x1d2>
2000737a:	2f58      	cmp	r7, #88	; 0x58
2000737c:	f000 80a3 	beq.w	200074c6 <_printf_i+0x16e>
20007380:	f104 0542 	add.w	r5, r4, #66	; 0x42
20007384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
20007388:	e03a      	b.n	20007400 <_printf_i+0xa8>
2000738a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
2000738e:	2b15      	cmp	r3, #21
20007390:	d8f6      	bhi.n	20007380 <_printf_i+0x28>
20007392:	a101      	add	r1, pc, #4	; (adr r1, 20007398 <_printf_i+0x40>)
20007394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
20007398:	200073f1 	.word	0x200073f1
2000739c:	20007405 	.word	0x20007405
200073a0:	20007381 	.word	0x20007381
200073a4:	20007381 	.word	0x20007381
200073a8:	20007381 	.word	0x20007381
200073ac:	20007381 	.word	0x20007381
200073b0:	20007405 	.word	0x20007405
200073b4:	20007381 	.word	0x20007381
200073b8:	20007381 	.word	0x20007381
200073bc:	20007381 	.word	0x20007381
200073c0:	20007381 	.word	0x20007381
200073c4:	20007511 	.word	0x20007511
200073c8:	20007435 	.word	0x20007435
200073cc:	200074f3 	.word	0x200074f3
200073d0:	20007381 	.word	0x20007381
200073d4:	20007381 	.word	0x20007381
200073d8:	20007533 	.word	0x20007533
200073dc:	20007381 	.word	0x20007381
200073e0:	20007435 	.word	0x20007435
200073e4:	20007381 	.word	0x20007381
200073e8:	20007381 	.word	0x20007381
200073ec:	200074fb 	.word	0x200074fb
200073f0:	682b      	ldr	r3, [r5, #0]
200073f2:	1d1a      	adds	r2, r3, #4
200073f4:	681b      	ldr	r3, [r3, #0]
200073f6:	602a      	str	r2, [r5, #0]
200073f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
200073fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
20007400:	2301      	movs	r3, #1
20007402:	e0a3      	b.n	2000754c <_printf_i+0x1f4>
20007404:	6820      	ldr	r0, [r4, #0]
20007406:	6829      	ldr	r1, [r5, #0]
20007408:	0606      	lsls	r6, r0, #24
2000740a:	f101 0304 	add.w	r3, r1, #4
2000740e:	d50a      	bpl.n	20007426 <_printf_i+0xce>
20007410:	680e      	ldr	r6, [r1, #0]
20007412:	602b      	str	r3, [r5, #0]
20007414:	2e00      	cmp	r6, #0
20007416:	da03      	bge.n	20007420 <_printf_i+0xc8>
20007418:	232d      	movs	r3, #45	; 0x2d
2000741a:	4276      	negs	r6, r6
2000741c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
20007420:	485e      	ldr	r0, [pc, #376]	; (2000759c <_printf_i+0x244>)
20007422:	230a      	movs	r3, #10
20007424:	e019      	b.n	2000745a <_printf_i+0x102>
20007426:	680e      	ldr	r6, [r1, #0]
20007428:	602b      	str	r3, [r5, #0]
2000742a:	f010 0f40 	tst.w	r0, #64	; 0x40
2000742e:	bf18      	it	ne
20007430:	b236      	sxthne	r6, r6
20007432:	e7ef      	b.n	20007414 <_printf_i+0xbc>
20007434:	682b      	ldr	r3, [r5, #0]
20007436:	6820      	ldr	r0, [r4, #0]
20007438:	1d19      	adds	r1, r3, #4
2000743a:	6029      	str	r1, [r5, #0]
2000743c:	0601      	lsls	r1, r0, #24
2000743e:	d501      	bpl.n	20007444 <_printf_i+0xec>
20007440:	681e      	ldr	r6, [r3, #0]
20007442:	e002      	b.n	2000744a <_printf_i+0xf2>
20007444:	0646      	lsls	r6, r0, #25
20007446:	d5fb      	bpl.n	20007440 <_printf_i+0xe8>
20007448:	881e      	ldrh	r6, [r3, #0]
2000744a:	4854      	ldr	r0, [pc, #336]	; (2000759c <_printf_i+0x244>)
2000744c:	2f6f      	cmp	r7, #111	; 0x6f
2000744e:	bf0c      	ite	eq
20007450:	2308      	moveq	r3, #8
20007452:	230a      	movne	r3, #10
20007454:	2100      	movs	r1, #0
20007456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
2000745a:	6865      	ldr	r5, [r4, #4]
2000745c:	60a5      	str	r5, [r4, #8]
2000745e:	2d00      	cmp	r5, #0
20007460:	bfa2      	ittt	ge
20007462:	6821      	ldrge	r1, [r4, #0]
20007464:	f021 0104 	bicge.w	r1, r1, #4
20007468:	6021      	strge	r1, [r4, #0]
2000746a:	b90e      	cbnz	r6, 20007470 <_printf_i+0x118>
2000746c:	2d00      	cmp	r5, #0
2000746e:	d04d      	beq.n	2000750c <_printf_i+0x1b4>
20007470:	4615      	mov	r5, r2
20007472:	fbb6 f1f3 	udiv	r1, r6, r3
20007476:	fb03 6711 	mls	r7, r3, r1, r6
2000747a:	5dc7      	ldrb	r7, [r0, r7]
2000747c:	f805 7d01 	strb.w	r7, [r5, #-1]!
20007480:	4637      	mov	r7, r6
20007482:	42bb      	cmp	r3, r7
20007484:	460e      	mov	r6, r1
20007486:	d9f4      	bls.n	20007472 <_printf_i+0x11a>
20007488:	2b08      	cmp	r3, #8
2000748a:	d10b      	bne.n	200074a4 <_printf_i+0x14c>
2000748c:	6823      	ldr	r3, [r4, #0]
2000748e:	07de      	lsls	r6, r3, #31
20007490:	d508      	bpl.n	200074a4 <_printf_i+0x14c>
20007492:	6923      	ldr	r3, [r4, #16]
20007494:	6861      	ldr	r1, [r4, #4]
20007496:	4299      	cmp	r1, r3
20007498:	bfde      	ittt	le
2000749a:	2330      	movle	r3, #48	; 0x30
2000749c:	f805 3c01 	strble.w	r3, [r5, #-1]
200074a0:	f105 35ff 	addle.w	r5, r5, #4294967295
200074a4:	1b52      	subs	r2, r2, r5
200074a6:	6122      	str	r2, [r4, #16]
200074a8:	f8cd a000 	str.w	sl, [sp]
200074ac:	464b      	mov	r3, r9
200074ae:	aa03      	add	r2, sp, #12
200074b0:	4621      	mov	r1, r4
200074b2:	4640      	mov	r0, r8
200074b4:	f7ff fee2 	bl	2000727c <_printf_common>
200074b8:	3001      	adds	r0, #1
200074ba:	d14c      	bne.n	20007556 <_printf_i+0x1fe>
200074bc:	f04f 30ff 	mov.w	r0, #4294967295
200074c0:	b004      	add	sp, #16
200074c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200074c6:	4835      	ldr	r0, [pc, #212]	; (2000759c <_printf_i+0x244>)
200074c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
200074cc:	6829      	ldr	r1, [r5, #0]
200074ce:	6823      	ldr	r3, [r4, #0]
200074d0:	f851 6b04 	ldr.w	r6, [r1], #4
200074d4:	6029      	str	r1, [r5, #0]
200074d6:	061d      	lsls	r5, r3, #24
200074d8:	d514      	bpl.n	20007504 <_printf_i+0x1ac>
200074da:	07df      	lsls	r7, r3, #31
200074dc:	bf44      	itt	mi
200074de:	f043 0320 	orrmi.w	r3, r3, #32
200074e2:	6023      	strmi	r3, [r4, #0]
200074e4:	b91e      	cbnz	r6, 200074ee <_printf_i+0x196>
200074e6:	6823      	ldr	r3, [r4, #0]
200074e8:	f023 0320 	bic.w	r3, r3, #32
200074ec:	6023      	str	r3, [r4, #0]
200074ee:	2310      	movs	r3, #16
200074f0:	e7b0      	b.n	20007454 <_printf_i+0xfc>
200074f2:	6823      	ldr	r3, [r4, #0]
200074f4:	f043 0320 	orr.w	r3, r3, #32
200074f8:	6023      	str	r3, [r4, #0]
200074fa:	2378      	movs	r3, #120	; 0x78
200074fc:	4828      	ldr	r0, [pc, #160]	; (200075a0 <_printf_i+0x248>)
200074fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
20007502:	e7e3      	b.n	200074cc <_printf_i+0x174>
20007504:	0659      	lsls	r1, r3, #25
20007506:	bf48      	it	mi
20007508:	b2b6      	uxthmi	r6, r6
2000750a:	e7e6      	b.n	200074da <_printf_i+0x182>
2000750c:	4615      	mov	r5, r2
2000750e:	e7bb      	b.n	20007488 <_printf_i+0x130>
20007510:	682b      	ldr	r3, [r5, #0]
20007512:	6826      	ldr	r6, [r4, #0]
20007514:	6961      	ldr	r1, [r4, #20]
20007516:	1d18      	adds	r0, r3, #4
20007518:	6028      	str	r0, [r5, #0]
2000751a:	0635      	lsls	r5, r6, #24
2000751c:	681b      	ldr	r3, [r3, #0]
2000751e:	d501      	bpl.n	20007524 <_printf_i+0x1cc>
20007520:	6019      	str	r1, [r3, #0]
20007522:	e002      	b.n	2000752a <_printf_i+0x1d2>
20007524:	0670      	lsls	r0, r6, #25
20007526:	d5fb      	bpl.n	20007520 <_printf_i+0x1c8>
20007528:	8019      	strh	r1, [r3, #0]
2000752a:	2300      	movs	r3, #0
2000752c:	6123      	str	r3, [r4, #16]
2000752e:	4615      	mov	r5, r2
20007530:	e7ba      	b.n	200074a8 <_printf_i+0x150>
20007532:	682b      	ldr	r3, [r5, #0]
20007534:	1d1a      	adds	r2, r3, #4
20007536:	602a      	str	r2, [r5, #0]
20007538:	681d      	ldr	r5, [r3, #0]
2000753a:	6862      	ldr	r2, [r4, #4]
2000753c:	2100      	movs	r1, #0
2000753e:	4628      	mov	r0, r5
20007540:	f7f8 fe56 	bl	200001f0 <memchr>
20007544:	b108      	cbz	r0, 2000754a <_printf_i+0x1f2>
20007546:	1b40      	subs	r0, r0, r5
20007548:	6060      	str	r0, [r4, #4]
2000754a:	6863      	ldr	r3, [r4, #4]
2000754c:	6123      	str	r3, [r4, #16]
2000754e:	2300      	movs	r3, #0
20007550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
20007554:	e7a8      	b.n	200074a8 <_printf_i+0x150>
20007556:	6923      	ldr	r3, [r4, #16]
20007558:	462a      	mov	r2, r5
2000755a:	4649      	mov	r1, r9
2000755c:	4640      	mov	r0, r8
2000755e:	47d0      	blx	sl
20007560:	3001      	adds	r0, #1
20007562:	d0ab      	beq.n	200074bc <_printf_i+0x164>
20007564:	6823      	ldr	r3, [r4, #0]
20007566:	079b      	lsls	r3, r3, #30
20007568:	d413      	bmi.n	20007592 <_printf_i+0x23a>
2000756a:	68e0      	ldr	r0, [r4, #12]
2000756c:	9b03      	ldr	r3, [sp, #12]
2000756e:	4298      	cmp	r0, r3
20007570:	bfb8      	it	lt
20007572:	4618      	movlt	r0, r3
20007574:	e7a4      	b.n	200074c0 <_printf_i+0x168>
20007576:	2301      	movs	r3, #1
20007578:	4632      	mov	r2, r6
2000757a:	4649      	mov	r1, r9
2000757c:	4640      	mov	r0, r8
2000757e:	47d0      	blx	sl
20007580:	3001      	adds	r0, #1
20007582:	d09b      	beq.n	200074bc <_printf_i+0x164>
20007584:	3501      	adds	r5, #1
20007586:	68e3      	ldr	r3, [r4, #12]
20007588:	9903      	ldr	r1, [sp, #12]
2000758a:	1a5b      	subs	r3, r3, r1
2000758c:	42ab      	cmp	r3, r5
2000758e:	dcf2      	bgt.n	20007576 <_printf_i+0x21e>
20007590:	e7eb      	b.n	2000756a <_printf_i+0x212>
20007592:	2500      	movs	r5, #0
20007594:	f104 0619 	add.w	r6, r4, #25
20007598:	e7f5      	b.n	20007586 <_printf_i+0x22e>
2000759a:	bf00      	nop
2000759c:	20014356 	.word	0x20014356
200075a0:	20014367 	.word	0x20014367

200075a4 <siprintf>:
200075a4:	b40e      	push	{r1, r2, r3}
200075a6:	b500      	push	{lr}
200075a8:	b09c      	sub	sp, #112	; 0x70
200075aa:	ab1d      	add	r3, sp, #116	; 0x74
200075ac:	9002      	str	r0, [sp, #8]
200075ae:	9006      	str	r0, [sp, #24]
200075b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
200075b4:	4809      	ldr	r0, [pc, #36]	; (200075dc <siprintf+0x38>)
200075b6:	9107      	str	r1, [sp, #28]
200075b8:	9104      	str	r1, [sp, #16]
200075ba:	4909      	ldr	r1, [pc, #36]	; (200075e0 <siprintf+0x3c>)
200075bc:	f853 2b04 	ldr.w	r2, [r3], #4
200075c0:	9105      	str	r1, [sp, #20]
200075c2:	6800      	ldr	r0, [r0, #0]
200075c4:	9301      	str	r3, [sp, #4]
200075c6:	a902      	add	r1, sp, #8
200075c8:	f001 fb78 	bl	20008cbc <_svfiprintf_r>
200075cc:	9b02      	ldr	r3, [sp, #8]
200075ce:	2200      	movs	r2, #0
200075d0:	701a      	strb	r2, [r3, #0]
200075d2:	b01c      	add	sp, #112	; 0x70
200075d4:	f85d eb04 	ldr.w	lr, [sp], #4
200075d8:	b003      	add	sp, #12
200075da:	4770      	bx	lr
200075dc:	20014788 	.word	0x20014788
200075e0:	ffff0208 	.word	0xffff0208

200075e4 <quorem>:
200075e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
200075e8:	6903      	ldr	r3, [r0, #16]
200075ea:	690c      	ldr	r4, [r1, #16]
200075ec:	42a3      	cmp	r3, r4
200075ee:	4607      	mov	r7, r0
200075f0:	f2c0 8081 	blt.w	200076f6 <quorem+0x112>
200075f4:	3c01      	subs	r4, #1
200075f6:	f101 0814 	add.w	r8, r1, #20
200075fa:	f100 0514 	add.w	r5, r0, #20
200075fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
20007602:	9301      	str	r3, [sp, #4]
20007604:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
20007608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
2000760c:	3301      	adds	r3, #1
2000760e:	429a      	cmp	r2, r3
20007610:	ea4f 0b84 	mov.w	fp, r4, lsl #2
20007614:	eb08 0984 	add.w	r9, r8, r4, lsl #2
20007618:	fbb2 f6f3 	udiv	r6, r2, r3
2000761c:	d331      	bcc.n	20007682 <quorem+0x9e>
2000761e:	f04f 0e00 	mov.w	lr, #0
20007622:	4640      	mov	r0, r8
20007624:	46ac      	mov	ip, r5
20007626:	46f2      	mov	sl, lr
20007628:	f850 2b04 	ldr.w	r2, [r0], #4
2000762c:	b293      	uxth	r3, r2
2000762e:	fb06 e303 	mla	r3, r6, r3, lr
20007632:	ea4f 4e13 	mov.w	lr, r3, lsr #16
20007636:	b29b      	uxth	r3, r3
20007638:	ebaa 0303 	sub.w	r3, sl, r3
2000763c:	f8dc a000 	ldr.w	sl, [ip]
20007640:	0c12      	lsrs	r2, r2, #16
20007642:	fa13 f38a 	uxtah	r3, r3, sl
20007646:	fb06 e202 	mla	r2, r6, r2, lr
2000764a:	9300      	str	r3, [sp, #0]
2000764c:	9b00      	ldr	r3, [sp, #0]
2000764e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
20007652:	b292      	uxth	r2, r2
20007654:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
20007658:	eb02 4223 	add.w	r2, r2, r3, asr #16
2000765c:	f8bd 3000 	ldrh.w	r3, [sp]
20007660:	4581      	cmp	r9, r0
20007662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
20007666:	f84c 3b04 	str.w	r3, [ip], #4
2000766a:	ea4f 4a22 	mov.w	sl, r2, asr #16
2000766e:	d2db      	bcs.n	20007628 <quorem+0x44>
20007670:	f855 300b 	ldr.w	r3, [r5, fp]
20007674:	b92b      	cbnz	r3, 20007682 <quorem+0x9e>
20007676:	9b01      	ldr	r3, [sp, #4]
20007678:	3b04      	subs	r3, #4
2000767a:	429d      	cmp	r5, r3
2000767c:	461a      	mov	r2, r3
2000767e:	d32e      	bcc.n	200076de <quorem+0xfa>
20007680:	613c      	str	r4, [r7, #16]
20007682:	4638      	mov	r0, r7
20007684:	f001 f8c6 	bl	20008814 <__mcmp>
20007688:	2800      	cmp	r0, #0
2000768a:	db24      	blt.n	200076d6 <quorem+0xf2>
2000768c:	3601      	adds	r6, #1
2000768e:	4628      	mov	r0, r5
20007690:	f04f 0c00 	mov.w	ip, #0
20007694:	f858 2b04 	ldr.w	r2, [r8], #4
20007698:	f8d0 e000 	ldr.w	lr, [r0]
2000769c:	b293      	uxth	r3, r2
2000769e:	ebac 0303 	sub.w	r3, ip, r3
200076a2:	0c12      	lsrs	r2, r2, #16
200076a4:	fa13 f38e 	uxtah	r3, r3, lr
200076a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
200076ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
200076b0:	b29b      	uxth	r3, r3
200076b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
200076b6:	45c1      	cmp	r9, r8
200076b8:	f840 3b04 	str.w	r3, [r0], #4
200076bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
200076c0:	d2e8      	bcs.n	20007694 <quorem+0xb0>
200076c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
200076c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
200076ca:	b922      	cbnz	r2, 200076d6 <quorem+0xf2>
200076cc:	3b04      	subs	r3, #4
200076ce:	429d      	cmp	r5, r3
200076d0:	461a      	mov	r2, r3
200076d2:	d30a      	bcc.n	200076ea <quorem+0x106>
200076d4:	613c      	str	r4, [r7, #16]
200076d6:	4630      	mov	r0, r6
200076d8:	b003      	add	sp, #12
200076da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
200076de:	6812      	ldr	r2, [r2, #0]
200076e0:	3b04      	subs	r3, #4
200076e2:	2a00      	cmp	r2, #0
200076e4:	d1cc      	bne.n	20007680 <quorem+0x9c>
200076e6:	3c01      	subs	r4, #1
200076e8:	e7c7      	b.n	2000767a <quorem+0x96>
200076ea:	6812      	ldr	r2, [r2, #0]
200076ec:	3b04      	subs	r3, #4
200076ee:	2a00      	cmp	r2, #0
200076f0:	d1f0      	bne.n	200076d4 <quorem+0xf0>
200076f2:	3c01      	subs	r4, #1
200076f4:	e7eb      	b.n	200076ce <quorem+0xea>
200076f6:	2000      	movs	r0, #0
200076f8:	e7ee      	b.n	200076d8 <quorem+0xf4>
200076fa:	0000      	movs	r0, r0
200076fc:	0000      	movs	r0, r0
	...

20007700 <_dtoa_r>:
20007700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20007704:	ed2d 8b04 	vpush	{d8-d9}
20007708:	ec57 6b10 	vmov	r6, r7, d0
2000770c:	b093      	sub	sp, #76	; 0x4c
2000770e:	6a45      	ldr	r5, [r0, #36]	; 0x24
20007710:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
20007714:	9106      	str	r1, [sp, #24]
20007716:	ee10 aa10 	vmov	sl, s0
2000771a:	4604      	mov	r4, r0
2000771c:	9209      	str	r2, [sp, #36]	; 0x24
2000771e:	930c      	str	r3, [sp, #48]	; 0x30
20007720:	46bb      	mov	fp, r7
20007722:	b975      	cbnz	r5, 20007742 <_dtoa_r+0x42>
20007724:	2010      	movs	r0, #16
20007726:	f000 fddd 	bl	200082e4 <malloc>
2000772a:	4602      	mov	r2, r0
2000772c:	6260      	str	r0, [r4, #36]	; 0x24
2000772e:	b920      	cbnz	r0, 2000773a <_dtoa_r+0x3a>
20007730:	4ba7      	ldr	r3, [pc, #668]	; (200079d0 <_dtoa_r+0x2d0>)
20007732:	21ea      	movs	r1, #234	; 0xea
20007734:	48a7      	ldr	r0, [pc, #668]	; (200079d4 <_dtoa_r+0x2d4>)
20007736:	f001 fbd1 	bl	20008edc <__assert_func>
2000773a:	e9c0 5501 	strd	r5, r5, [r0, #4]
2000773e:	6005      	str	r5, [r0, #0]
20007740:	60c5      	str	r5, [r0, #12]
20007742:	6a63      	ldr	r3, [r4, #36]	; 0x24
20007744:	6819      	ldr	r1, [r3, #0]
20007746:	b151      	cbz	r1, 2000775e <_dtoa_r+0x5e>
20007748:	685a      	ldr	r2, [r3, #4]
2000774a:	604a      	str	r2, [r1, #4]
2000774c:	2301      	movs	r3, #1
2000774e:	4093      	lsls	r3, r2
20007750:	608b      	str	r3, [r1, #8]
20007752:	4620      	mov	r0, r4
20007754:	f000 fe1c 	bl	20008390 <_Bfree>
20007758:	6a63      	ldr	r3, [r4, #36]	; 0x24
2000775a:	2200      	movs	r2, #0
2000775c:	601a      	str	r2, [r3, #0]
2000775e:	1e3b      	subs	r3, r7, #0
20007760:	bfaa      	itet	ge
20007762:	2300      	movge	r3, #0
20007764:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
20007768:	f8c8 3000 	strge.w	r3, [r8]
2000776c:	4b9a      	ldr	r3, [pc, #616]	; (200079d8 <_dtoa_r+0x2d8>)
2000776e:	bfbc      	itt	lt
20007770:	2201      	movlt	r2, #1
20007772:	f8c8 2000 	strlt.w	r2, [r8]
20007776:	ea33 030b 	bics.w	r3, r3, fp
2000777a:	d11b      	bne.n	200077b4 <_dtoa_r+0xb4>
2000777c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
2000777e:	f242 730f 	movw	r3, #9999	; 0x270f
20007782:	6013      	str	r3, [r2, #0]
20007784:	f3cb 0313 	ubfx	r3, fp, #0, #20
20007788:	4333      	orrs	r3, r6
2000778a:	f000 8592 	beq.w	200082b2 <_dtoa_r+0xbb2>
2000778e:	9b21      	ldr	r3, [sp, #132]	; 0x84
20007790:	b963      	cbnz	r3, 200077ac <_dtoa_r+0xac>
20007792:	4b92      	ldr	r3, [pc, #584]	; (200079dc <_dtoa_r+0x2dc>)
20007794:	e022      	b.n	200077dc <_dtoa_r+0xdc>
20007796:	4b92      	ldr	r3, [pc, #584]	; (200079e0 <_dtoa_r+0x2e0>)
20007798:	9301      	str	r3, [sp, #4]
2000779a:	3308      	adds	r3, #8
2000779c:	9a21      	ldr	r2, [sp, #132]	; 0x84
2000779e:	6013      	str	r3, [r2, #0]
200077a0:	9801      	ldr	r0, [sp, #4]
200077a2:	b013      	add	sp, #76	; 0x4c
200077a4:	ecbd 8b04 	vpop	{d8-d9}
200077a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
200077ac:	4b8b      	ldr	r3, [pc, #556]	; (200079dc <_dtoa_r+0x2dc>)
200077ae:	9301      	str	r3, [sp, #4]
200077b0:	3303      	adds	r3, #3
200077b2:	e7f3      	b.n	2000779c <_dtoa_r+0x9c>
200077b4:	2200      	movs	r2, #0
200077b6:	2300      	movs	r3, #0
200077b8:	4650      	mov	r0, sl
200077ba:	4659      	mov	r1, fp
200077bc:	f7f9 f98c 	bl	20000ad8 <__aeabi_dcmpeq>
200077c0:	ec4b ab19 	vmov	d9, sl, fp
200077c4:	4680      	mov	r8, r0
200077c6:	b158      	cbz	r0, 200077e0 <_dtoa_r+0xe0>
200077c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
200077ca:	2301      	movs	r3, #1
200077cc:	6013      	str	r3, [r2, #0]
200077ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
200077d0:	2b00      	cmp	r3, #0
200077d2:	f000 856b 	beq.w	200082ac <_dtoa_r+0xbac>
200077d6:	4883      	ldr	r0, [pc, #524]	; (200079e4 <_dtoa_r+0x2e4>)
200077d8:	6018      	str	r0, [r3, #0]
200077da:	1e43      	subs	r3, r0, #1
200077dc:	9301      	str	r3, [sp, #4]
200077de:	e7df      	b.n	200077a0 <_dtoa_r+0xa0>
200077e0:	ec4b ab10 	vmov	d0, sl, fp
200077e4:	aa10      	add	r2, sp, #64	; 0x40
200077e6:	a911      	add	r1, sp, #68	; 0x44
200077e8:	4620      	mov	r0, r4
200077ea:	f001 f8b9 	bl	20008960 <__d2b>
200077ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
200077f2:	ee08 0a10 	vmov	s16, r0
200077f6:	2d00      	cmp	r5, #0
200077f8:	f000 8084 	beq.w	20007904 <_dtoa_r+0x204>
200077fc:	ee19 3a90 	vmov	r3, s19
20007800:	f3c3 0313 	ubfx	r3, r3, #0, #20
20007804:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
20007808:	4656      	mov	r6, sl
2000780a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
2000780e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
20007812:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
20007816:	4b74      	ldr	r3, [pc, #464]	; (200079e8 <_dtoa_r+0x2e8>)
20007818:	2200      	movs	r2, #0
2000781a:	4630      	mov	r0, r6
2000781c:	4639      	mov	r1, r7
2000781e:	f7f8 fd3b 	bl	20000298 <__aeabi_dsub>
20007822:	a365      	add	r3, pc, #404	; (adr r3, 200079b8 <_dtoa_r+0x2b8>)
20007824:	e9d3 2300 	ldrd	r2, r3, [r3]
20007828:	f7f8 feee 	bl	20000608 <__aeabi_dmul>
2000782c:	a364      	add	r3, pc, #400	; (adr r3, 200079c0 <_dtoa_r+0x2c0>)
2000782e:	e9d3 2300 	ldrd	r2, r3, [r3]
20007832:	f7f8 fd33 	bl	2000029c <__adddf3>
20007836:	4606      	mov	r6, r0
20007838:	4628      	mov	r0, r5
2000783a:	460f      	mov	r7, r1
2000783c:	f7f8 fe7a 	bl	20000534 <__aeabi_i2d>
20007840:	a361      	add	r3, pc, #388	; (adr r3, 200079c8 <_dtoa_r+0x2c8>)
20007842:	e9d3 2300 	ldrd	r2, r3, [r3]
20007846:	f7f8 fedf 	bl	20000608 <__aeabi_dmul>
2000784a:	4602      	mov	r2, r0
2000784c:	460b      	mov	r3, r1
2000784e:	4630      	mov	r0, r6
20007850:	4639      	mov	r1, r7
20007852:	f7f8 fd23 	bl	2000029c <__adddf3>
20007856:	4606      	mov	r6, r0
20007858:	460f      	mov	r7, r1
2000785a:	f7f9 f985 	bl	20000b68 <__aeabi_d2iz>
2000785e:	2200      	movs	r2, #0
20007860:	9000      	str	r0, [sp, #0]
20007862:	2300      	movs	r3, #0
20007864:	4630      	mov	r0, r6
20007866:	4639      	mov	r1, r7
20007868:	f7f9 f940 	bl	20000aec <__aeabi_dcmplt>
2000786c:	b150      	cbz	r0, 20007884 <_dtoa_r+0x184>
2000786e:	9800      	ldr	r0, [sp, #0]
20007870:	f7f8 fe60 	bl	20000534 <__aeabi_i2d>
20007874:	4632      	mov	r2, r6
20007876:	463b      	mov	r3, r7
20007878:	f7f9 f92e 	bl	20000ad8 <__aeabi_dcmpeq>
2000787c:	b910      	cbnz	r0, 20007884 <_dtoa_r+0x184>
2000787e:	9b00      	ldr	r3, [sp, #0]
20007880:	3b01      	subs	r3, #1
20007882:	9300      	str	r3, [sp, #0]
20007884:	9b00      	ldr	r3, [sp, #0]
20007886:	2b16      	cmp	r3, #22
20007888:	d85a      	bhi.n	20007940 <_dtoa_r+0x240>
2000788a:	9a00      	ldr	r2, [sp, #0]
2000788c:	4b57      	ldr	r3, [pc, #348]	; (200079ec <_dtoa_r+0x2ec>)
2000788e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
20007892:	e9d3 2300 	ldrd	r2, r3, [r3]
20007896:	ec51 0b19 	vmov	r0, r1, d9
2000789a:	f7f9 f927 	bl	20000aec <__aeabi_dcmplt>
2000789e:	2800      	cmp	r0, #0
200078a0:	d050      	beq.n	20007944 <_dtoa_r+0x244>
200078a2:	9b00      	ldr	r3, [sp, #0]
200078a4:	3b01      	subs	r3, #1
200078a6:	9300      	str	r3, [sp, #0]
200078a8:	2300      	movs	r3, #0
200078aa:	930b      	str	r3, [sp, #44]	; 0x2c
200078ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
200078ae:	1b5d      	subs	r5, r3, r5
200078b0:	1e6b      	subs	r3, r5, #1
200078b2:	9305      	str	r3, [sp, #20]
200078b4:	bf45      	ittet	mi
200078b6:	f1c5 0301 	rsbmi	r3, r5, #1
200078ba:	9304      	strmi	r3, [sp, #16]
200078bc:	2300      	movpl	r3, #0
200078be:	2300      	movmi	r3, #0
200078c0:	bf4c      	ite	mi
200078c2:	9305      	strmi	r3, [sp, #20]
200078c4:	9304      	strpl	r3, [sp, #16]
200078c6:	9b00      	ldr	r3, [sp, #0]
200078c8:	2b00      	cmp	r3, #0
200078ca:	db3d      	blt.n	20007948 <_dtoa_r+0x248>
200078cc:	9b05      	ldr	r3, [sp, #20]
200078ce:	9a00      	ldr	r2, [sp, #0]
200078d0:	920a      	str	r2, [sp, #40]	; 0x28
200078d2:	4413      	add	r3, r2
200078d4:	9305      	str	r3, [sp, #20]
200078d6:	2300      	movs	r3, #0
200078d8:	9307      	str	r3, [sp, #28]
200078da:	9b06      	ldr	r3, [sp, #24]
200078dc:	2b09      	cmp	r3, #9
200078de:	f200 8089 	bhi.w	200079f4 <_dtoa_r+0x2f4>
200078e2:	2b05      	cmp	r3, #5
200078e4:	bfc4      	itt	gt
200078e6:	3b04      	subgt	r3, #4
200078e8:	9306      	strgt	r3, [sp, #24]
200078ea:	9b06      	ldr	r3, [sp, #24]
200078ec:	f1a3 0302 	sub.w	r3, r3, #2
200078f0:	bfcc      	ite	gt
200078f2:	2500      	movgt	r5, #0
200078f4:	2501      	movle	r5, #1
200078f6:	2b03      	cmp	r3, #3
200078f8:	f200 8087 	bhi.w	20007a0a <_dtoa_r+0x30a>
200078fc:	e8df f003 	tbb	[pc, r3]
20007900:	59383a2d 	.word	0x59383a2d
20007904:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
20007908:	441d      	add	r5, r3
2000790a:	f205 4332 	addw	r3, r5, #1074	; 0x432
2000790e:	2b20      	cmp	r3, #32
20007910:	bfc1      	itttt	gt
20007912:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
20007916:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
2000791a:	fa0b f303 	lslgt.w	r3, fp, r3
2000791e:	fa26 f000 	lsrgt.w	r0, r6, r0
20007922:	bfda      	itte	le
20007924:	f1c3 0320 	rsble	r3, r3, #32
20007928:	fa06 f003 	lslle.w	r0, r6, r3
2000792c:	4318      	orrgt	r0, r3
2000792e:	f7f8 fdf1 	bl	20000514 <__aeabi_ui2d>
20007932:	2301      	movs	r3, #1
20007934:	4606      	mov	r6, r0
20007936:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
2000793a:	3d01      	subs	r5, #1
2000793c:	930e      	str	r3, [sp, #56]	; 0x38
2000793e:	e76a      	b.n	20007816 <_dtoa_r+0x116>
20007940:	2301      	movs	r3, #1
20007942:	e7b2      	b.n	200078aa <_dtoa_r+0x1aa>
20007944:	900b      	str	r0, [sp, #44]	; 0x2c
20007946:	e7b1      	b.n	200078ac <_dtoa_r+0x1ac>
20007948:	9b04      	ldr	r3, [sp, #16]
2000794a:	9a00      	ldr	r2, [sp, #0]
2000794c:	1a9b      	subs	r3, r3, r2
2000794e:	9304      	str	r3, [sp, #16]
20007950:	4253      	negs	r3, r2
20007952:	9307      	str	r3, [sp, #28]
20007954:	2300      	movs	r3, #0
20007956:	930a      	str	r3, [sp, #40]	; 0x28
20007958:	e7bf      	b.n	200078da <_dtoa_r+0x1da>
2000795a:	2300      	movs	r3, #0
2000795c:	9308      	str	r3, [sp, #32]
2000795e:	9b09      	ldr	r3, [sp, #36]	; 0x24
20007960:	2b00      	cmp	r3, #0
20007962:	dc55      	bgt.n	20007a10 <_dtoa_r+0x310>
20007964:	2301      	movs	r3, #1
20007966:	e9cd 3302 	strd	r3, r3, [sp, #8]
2000796a:	461a      	mov	r2, r3
2000796c:	9209      	str	r2, [sp, #36]	; 0x24
2000796e:	e00c      	b.n	2000798a <_dtoa_r+0x28a>
20007970:	2301      	movs	r3, #1
20007972:	e7f3      	b.n	2000795c <_dtoa_r+0x25c>
20007974:	2300      	movs	r3, #0
20007976:	9a09      	ldr	r2, [sp, #36]	; 0x24
20007978:	9308      	str	r3, [sp, #32]
2000797a:	9b00      	ldr	r3, [sp, #0]
2000797c:	4413      	add	r3, r2
2000797e:	9302      	str	r3, [sp, #8]
20007980:	3301      	adds	r3, #1
20007982:	2b01      	cmp	r3, #1
20007984:	9303      	str	r3, [sp, #12]
20007986:	bfb8      	it	lt
20007988:	2301      	movlt	r3, #1
2000798a:	6a60      	ldr	r0, [r4, #36]	; 0x24
2000798c:	2200      	movs	r2, #0
2000798e:	6042      	str	r2, [r0, #4]
20007990:	2204      	movs	r2, #4
20007992:	f102 0614 	add.w	r6, r2, #20
20007996:	429e      	cmp	r6, r3
20007998:	6841      	ldr	r1, [r0, #4]
2000799a:	d93d      	bls.n	20007a18 <_dtoa_r+0x318>
2000799c:	4620      	mov	r0, r4
2000799e:	f000 fcb7 	bl	20008310 <_Balloc>
200079a2:	9001      	str	r0, [sp, #4]
200079a4:	2800      	cmp	r0, #0
200079a6:	d13b      	bne.n	20007a20 <_dtoa_r+0x320>
200079a8:	4b11      	ldr	r3, [pc, #68]	; (200079f0 <_dtoa_r+0x2f0>)
200079aa:	4602      	mov	r2, r0
200079ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
200079b0:	e6c0      	b.n	20007734 <_dtoa_r+0x34>
200079b2:	2301      	movs	r3, #1
200079b4:	e7df      	b.n	20007976 <_dtoa_r+0x276>
200079b6:	bf00      	nop
200079b8:	636f4361 	.word	0x636f4361
200079bc:	3fd287a7 	.word	0x3fd287a7
200079c0:	8b60c8b3 	.word	0x8b60c8b3
200079c4:	3fc68a28 	.word	0x3fc68a28
200079c8:	509f79fb 	.word	0x509f79fb
200079cc:	3fd34413 	.word	0x3fd34413
200079d0:	20014385 	.word	0x20014385
200079d4:	2001439c 	.word	0x2001439c
200079d8:	7ff00000 	.word	0x7ff00000
200079dc:	20014381 	.word	0x20014381
200079e0:	20014378 	.word	0x20014378
200079e4:	20014355 	.word	0x20014355
200079e8:	3ff80000 	.word	0x3ff80000
200079ec:	20014490 	.word	0x20014490
200079f0:	200143f7 	.word	0x200143f7
200079f4:	2501      	movs	r5, #1
200079f6:	2300      	movs	r3, #0
200079f8:	9306      	str	r3, [sp, #24]
200079fa:	9508      	str	r5, [sp, #32]
200079fc:	f04f 33ff 	mov.w	r3, #4294967295
20007a00:	e9cd 3302 	strd	r3, r3, [sp, #8]
20007a04:	2200      	movs	r2, #0
20007a06:	2312      	movs	r3, #18
20007a08:	e7b0      	b.n	2000796c <_dtoa_r+0x26c>
20007a0a:	2301      	movs	r3, #1
20007a0c:	9308      	str	r3, [sp, #32]
20007a0e:	e7f5      	b.n	200079fc <_dtoa_r+0x2fc>
20007a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
20007a12:	e9cd 3302 	strd	r3, r3, [sp, #8]
20007a16:	e7b8      	b.n	2000798a <_dtoa_r+0x28a>
20007a18:	3101      	adds	r1, #1
20007a1a:	6041      	str	r1, [r0, #4]
20007a1c:	0052      	lsls	r2, r2, #1
20007a1e:	e7b8      	b.n	20007992 <_dtoa_r+0x292>
20007a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
20007a22:	9a01      	ldr	r2, [sp, #4]
20007a24:	601a      	str	r2, [r3, #0]
20007a26:	9b03      	ldr	r3, [sp, #12]
20007a28:	2b0e      	cmp	r3, #14
20007a2a:	f200 809d 	bhi.w	20007b68 <_dtoa_r+0x468>
20007a2e:	2d00      	cmp	r5, #0
20007a30:	f000 809a 	beq.w	20007b68 <_dtoa_r+0x468>
20007a34:	9b00      	ldr	r3, [sp, #0]
20007a36:	2b00      	cmp	r3, #0
20007a38:	dd32      	ble.n	20007aa0 <_dtoa_r+0x3a0>
20007a3a:	4ab7      	ldr	r2, [pc, #732]	; (20007d18 <_dtoa_r+0x618>)
20007a3c:	f003 030f 	and.w	r3, r3, #15
20007a40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
20007a44:	e9d3 8900 	ldrd	r8, r9, [r3]
20007a48:	9b00      	ldr	r3, [sp, #0]
20007a4a:	05d8      	lsls	r0, r3, #23
20007a4c:	ea4f 1723 	mov.w	r7, r3, asr #4
20007a50:	d516      	bpl.n	20007a80 <_dtoa_r+0x380>
20007a52:	4bb2      	ldr	r3, [pc, #712]	; (20007d1c <_dtoa_r+0x61c>)
20007a54:	ec51 0b19 	vmov	r0, r1, d9
20007a58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
20007a5c:	f7f8 fefe 	bl	2000085c <__aeabi_ddiv>
20007a60:	f007 070f 	and.w	r7, r7, #15
20007a64:	4682      	mov	sl, r0
20007a66:	468b      	mov	fp, r1
20007a68:	2503      	movs	r5, #3
20007a6a:	4eac      	ldr	r6, [pc, #688]	; (20007d1c <_dtoa_r+0x61c>)
20007a6c:	b957      	cbnz	r7, 20007a84 <_dtoa_r+0x384>
20007a6e:	4642      	mov	r2, r8
20007a70:	464b      	mov	r3, r9
20007a72:	4650      	mov	r0, sl
20007a74:	4659      	mov	r1, fp
20007a76:	f7f8 fef1 	bl	2000085c <__aeabi_ddiv>
20007a7a:	4682      	mov	sl, r0
20007a7c:	468b      	mov	fp, r1
20007a7e:	e028      	b.n	20007ad2 <_dtoa_r+0x3d2>
20007a80:	2502      	movs	r5, #2
20007a82:	e7f2      	b.n	20007a6a <_dtoa_r+0x36a>
20007a84:	07f9      	lsls	r1, r7, #31
20007a86:	d508      	bpl.n	20007a9a <_dtoa_r+0x39a>
20007a88:	4640      	mov	r0, r8
20007a8a:	4649      	mov	r1, r9
20007a8c:	e9d6 2300 	ldrd	r2, r3, [r6]
20007a90:	f7f8 fdba 	bl	20000608 <__aeabi_dmul>
20007a94:	3501      	adds	r5, #1
20007a96:	4680      	mov	r8, r0
20007a98:	4689      	mov	r9, r1
20007a9a:	107f      	asrs	r7, r7, #1
20007a9c:	3608      	adds	r6, #8
20007a9e:	e7e5      	b.n	20007a6c <_dtoa_r+0x36c>
20007aa0:	f000 809b 	beq.w	20007bda <_dtoa_r+0x4da>
20007aa4:	9b00      	ldr	r3, [sp, #0]
20007aa6:	4f9d      	ldr	r7, [pc, #628]	; (20007d1c <_dtoa_r+0x61c>)
20007aa8:	425e      	negs	r6, r3
20007aaa:	4b9b      	ldr	r3, [pc, #620]	; (20007d18 <_dtoa_r+0x618>)
20007aac:	f006 020f 	and.w	r2, r6, #15
20007ab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
20007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
20007ab8:	ec51 0b19 	vmov	r0, r1, d9
20007abc:	f7f8 fda4 	bl	20000608 <__aeabi_dmul>
20007ac0:	1136      	asrs	r6, r6, #4
20007ac2:	4682      	mov	sl, r0
20007ac4:	468b      	mov	fp, r1
20007ac6:	2300      	movs	r3, #0
20007ac8:	2502      	movs	r5, #2
20007aca:	2e00      	cmp	r6, #0
20007acc:	d17a      	bne.n	20007bc4 <_dtoa_r+0x4c4>
20007ace:	2b00      	cmp	r3, #0
20007ad0:	d1d3      	bne.n	20007a7a <_dtoa_r+0x37a>
20007ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
20007ad4:	2b00      	cmp	r3, #0
20007ad6:	f000 8082 	beq.w	20007bde <_dtoa_r+0x4de>
20007ada:	4b91      	ldr	r3, [pc, #580]	; (20007d20 <_dtoa_r+0x620>)
20007adc:	2200      	movs	r2, #0
20007ade:	4650      	mov	r0, sl
20007ae0:	4659      	mov	r1, fp
20007ae2:	f7f9 f803 	bl	20000aec <__aeabi_dcmplt>
20007ae6:	2800      	cmp	r0, #0
20007ae8:	d079      	beq.n	20007bde <_dtoa_r+0x4de>
20007aea:	9b03      	ldr	r3, [sp, #12]
20007aec:	2b00      	cmp	r3, #0
20007aee:	d076      	beq.n	20007bde <_dtoa_r+0x4de>
20007af0:	9b02      	ldr	r3, [sp, #8]
20007af2:	2b00      	cmp	r3, #0
20007af4:	dd36      	ble.n	20007b64 <_dtoa_r+0x464>
20007af6:	9b00      	ldr	r3, [sp, #0]
20007af8:	4650      	mov	r0, sl
20007afa:	4659      	mov	r1, fp
20007afc:	1e5f      	subs	r7, r3, #1
20007afe:	2200      	movs	r2, #0
20007b00:	4b88      	ldr	r3, [pc, #544]	; (20007d24 <_dtoa_r+0x624>)
20007b02:	f7f8 fd81 	bl	20000608 <__aeabi_dmul>
20007b06:	9e02      	ldr	r6, [sp, #8]
20007b08:	4682      	mov	sl, r0
20007b0a:	468b      	mov	fp, r1
20007b0c:	3501      	adds	r5, #1
20007b0e:	4628      	mov	r0, r5
20007b10:	f7f8 fd10 	bl	20000534 <__aeabi_i2d>
20007b14:	4652      	mov	r2, sl
20007b16:	465b      	mov	r3, fp
20007b18:	f7f8 fd76 	bl	20000608 <__aeabi_dmul>
20007b1c:	4b82      	ldr	r3, [pc, #520]	; (20007d28 <_dtoa_r+0x628>)
20007b1e:	2200      	movs	r2, #0
20007b20:	f7f8 fbbc 	bl	2000029c <__adddf3>
20007b24:	46d0      	mov	r8, sl
20007b26:	46d9      	mov	r9, fp
20007b28:	4682      	mov	sl, r0
20007b2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
20007b2e:	2e00      	cmp	r6, #0
20007b30:	d158      	bne.n	20007be4 <_dtoa_r+0x4e4>
20007b32:	4b7e      	ldr	r3, [pc, #504]	; (20007d2c <_dtoa_r+0x62c>)
20007b34:	2200      	movs	r2, #0
20007b36:	4640      	mov	r0, r8
20007b38:	4649      	mov	r1, r9
20007b3a:	f7f8 fbad 	bl	20000298 <__aeabi_dsub>
20007b3e:	4652      	mov	r2, sl
20007b40:	465b      	mov	r3, fp
20007b42:	4680      	mov	r8, r0
20007b44:	4689      	mov	r9, r1
20007b46:	f7f8 ffef 	bl	20000b28 <__aeabi_dcmpgt>
20007b4a:	2800      	cmp	r0, #0
20007b4c:	f040 8295 	bne.w	2000807a <_dtoa_r+0x97a>
20007b50:	4652      	mov	r2, sl
20007b52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
20007b56:	4640      	mov	r0, r8
20007b58:	4649      	mov	r1, r9
20007b5a:	f7f8 ffc7 	bl	20000aec <__aeabi_dcmplt>
20007b5e:	2800      	cmp	r0, #0
20007b60:	f040 8289 	bne.w	20008076 <_dtoa_r+0x976>
20007b64:	ec5b ab19 	vmov	sl, fp, d9
20007b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
20007b6a:	2b00      	cmp	r3, #0
20007b6c:	f2c0 8148 	blt.w	20007e00 <_dtoa_r+0x700>
20007b70:	9a00      	ldr	r2, [sp, #0]
20007b72:	2a0e      	cmp	r2, #14
20007b74:	f300 8144 	bgt.w	20007e00 <_dtoa_r+0x700>
20007b78:	4b67      	ldr	r3, [pc, #412]	; (20007d18 <_dtoa_r+0x618>)
20007b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
20007b7e:	e9d3 8900 	ldrd	r8, r9, [r3]
20007b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
20007b84:	2b00      	cmp	r3, #0
20007b86:	f280 80d5 	bge.w	20007d34 <_dtoa_r+0x634>
20007b8a:	9b03      	ldr	r3, [sp, #12]
20007b8c:	2b00      	cmp	r3, #0
20007b8e:	f300 80d1 	bgt.w	20007d34 <_dtoa_r+0x634>
20007b92:	f040 826f 	bne.w	20008074 <_dtoa_r+0x974>
20007b96:	4b65      	ldr	r3, [pc, #404]	; (20007d2c <_dtoa_r+0x62c>)
20007b98:	2200      	movs	r2, #0
20007b9a:	4640      	mov	r0, r8
20007b9c:	4649      	mov	r1, r9
20007b9e:	f7f8 fd33 	bl	20000608 <__aeabi_dmul>
20007ba2:	4652      	mov	r2, sl
20007ba4:	465b      	mov	r3, fp
20007ba6:	f7f8 ffb5 	bl	20000b14 <__aeabi_dcmpge>
20007baa:	9e03      	ldr	r6, [sp, #12]
20007bac:	4637      	mov	r7, r6
20007bae:	2800      	cmp	r0, #0
20007bb0:	f040 8245 	bne.w	2000803e <_dtoa_r+0x93e>
20007bb4:	9d01      	ldr	r5, [sp, #4]
20007bb6:	2331      	movs	r3, #49	; 0x31
20007bb8:	f805 3b01 	strb.w	r3, [r5], #1
20007bbc:	9b00      	ldr	r3, [sp, #0]
20007bbe:	3301      	adds	r3, #1
20007bc0:	9300      	str	r3, [sp, #0]
20007bc2:	e240      	b.n	20008046 <_dtoa_r+0x946>
20007bc4:	07f2      	lsls	r2, r6, #31
20007bc6:	d505      	bpl.n	20007bd4 <_dtoa_r+0x4d4>
20007bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
20007bcc:	f7f8 fd1c 	bl	20000608 <__aeabi_dmul>
20007bd0:	3501      	adds	r5, #1
20007bd2:	2301      	movs	r3, #1
20007bd4:	1076      	asrs	r6, r6, #1
20007bd6:	3708      	adds	r7, #8
20007bd8:	e777      	b.n	20007aca <_dtoa_r+0x3ca>
20007bda:	2502      	movs	r5, #2
20007bdc:	e779      	b.n	20007ad2 <_dtoa_r+0x3d2>
20007bde:	9f00      	ldr	r7, [sp, #0]
20007be0:	9e03      	ldr	r6, [sp, #12]
20007be2:	e794      	b.n	20007b0e <_dtoa_r+0x40e>
20007be4:	9901      	ldr	r1, [sp, #4]
20007be6:	4b4c      	ldr	r3, [pc, #304]	; (20007d18 <_dtoa_r+0x618>)
20007be8:	4431      	add	r1, r6
20007bea:	910d      	str	r1, [sp, #52]	; 0x34
20007bec:	9908      	ldr	r1, [sp, #32]
20007bee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
20007bf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
20007bf6:	2900      	cmp	r1, #0
20007bf8:	d043      	beq.n	20007c82 <_dtoa_r+0x582>
20007bfa:	494d      	ldr	r1, [pc, #308]	; (20007d30 <_dtoa_r+0x630>)
20007bfc:	2000      	movs	r0, #0
20007bfe:	f7f8 fe2d 	bl	2000085c <__aeabi_ddiv>
20007c02:	4652      	mov	r2, sl
20007c04:	465b      	mov	r3, fp
20007c06:	f7f8 fb47 	bl	20000298 <__aeabi_dsub>
20007c0a:	9d01      	ldr	r5, [sp, #4]
20007c0c:	4682      	mov	sl, r0
20007c0e:	468b      	mov	fp, r1
20007c10:	4649      	mov	r1, r9
20007c12:	4640      	mov	r0, r8
20007c14:	f7f8 ffa8 	bl	20000b68 <__aeabi_d2iz>
20007c18:	4606      	mov	r6, r0
20007c1a:	f7f8 fc8b 	bl	20000534 <__aeabi_i2d>
20007c1e:	4602      	mov	r2, r0
20007c20:	460b      	mov	r3, r1
20007c22:	4640      	mov	r0, r8
20007c24:	4649      	mov	r1, r9
20007c26:	f7f8 fb37 	bl	20000298 <__aeabi_dsub>
20007c2a:	3630      	adds	r6, #48	; 0x30
20007c2c:	f805 6b01 	strb.w	r6, [r5], #1
20007c30:	4652      	mov	r2, sl
20007c32:	465b      	mov	r3, fp
20007c34:	4680      	mov	r8, r0
20007c36:	4689      	mov	r9, r1
20007c38:	f7f8 ff58 	bl	20000aec <__aeabi_dcmplt>
20007c3c:	2800      	cmp	r0, #0
20007c3e:	d163      	bne.n	20007d08 <_dtoa_r+0x608>
20007c40:	4642      	mov	r2, r8
20007c42:	464b      	mov	r3, r9
20007c44:	4936      	ldr	r1, [pc, #216]	; (20007d20 <_dtoa_r+0x620>)
20007c46:	2000      	movs	r0, #0
20007c48:	f7f8 fb26 	bl	20000298 <__aeabi_dsub>
20007c4c:	4652      	mov	r2, sl
20007c4e:	465b      	mov	r3, fp
20007c50:	f7f8 ff4c 	bl	20000aec <__aeabi_dcmplt>
20007c54:	2800      	cmp	r0, #0
20007c56:	f040 80b5 	bne.w	20007dc4 <_dtoa_r+0x6c4>
20007c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
20007c5c:	429d      	cmp	r5, r3
20007c5e:	d081      	beq.n	20007b64 <_dtoa_r+0x464>
20007c60:	4b30      	ldr	r3, [pc, #192]	; (20007d24 <_dtoa_r+0x624>)
20007c62:	2200      	movs	r2, #0
20007c64:	4650      	mov	r0, sl
20007c66:	4659      	mov	r1, fp
20007c68:	f7f8 fcce 	bl	20000608 <__aeabi_dmul>
20007c6c:	4b2d      	ldr	r3, [pc, #180]	; (20007d24 <_dtoa_r+0x624>)
20007c6e:	4682      	mov	sl, r0
20007c70:	468b      	mov	fp, r1
20007c72:	4640      	mov	r0, r8
20007c74:	4649      	mov	r1, r9
20007c76:	2200      	movs	r2, #0
20007c78:	f7f8 fcc6 	bl	20000608 <__aeabi_dmul>
20007c7c:	4680      	mov	r8, r0
20007c7e:	4689      	mov	r9, r1
20007c80:	e7c6      	b.n	20007c10 <_dtoa_r+0x510>
20007c82:	4650      	mov	r0, sl
20007c84:	4659      	mov	r1, fp
20007c86:	f7f8 fcbf 	bl	20000608 <__aeabi_dmul>
20007c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
20007c8c:	9d01      	ldr	r5, [sp, #4]
20007c8e:	930f      	str	r3, [sp, #60]	; 0x3c
20007c90:	4682      	mov	sl, r0
20007c92:	468b      	mov	fp, r1
20007c94:	4649      	mov	r1, r9
20007c96:	4640      	mov	r0, r8
20007c98:	f7f8 ff66 	bl	20000b68 <__aeabi_d2iz>
20007c9c:	4606      	mov	r6, r0
20007c9e:	f7f8 fc49 	bl	20000534 <__aeabi_i2d>
20007ca2:	3630      	adds	r6, #48	; 0x30
20007ca4:	4602      	mov	r2, r0
20007ca6:	460b      	mov	r3, r1
20007ca8:	4640      	mov	r0, r8
20007caa:	4649      	mov	r1, r9
20007cac:	f7f8 faf4 	bl	20000298 <__aeabi_dsub>
20007cb0:	f805 6b01 	strb.w	r6, [r5], #1
20007cb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
20007cb6:	429d      	cmp	r5, r3
20007cb8:	4680      	mov	r8, r0
20007cba:	4689      	mov	r9, r1
20007cbc:	f04f 0200 	mov.w	r2, #0
20007cc0:	d124      	bne.n	20007d0c <_dtoa_r+0x60c>
20007cc2:	4b1b      	ldr	r3, [pc, #108]	; (20007d30 <_dtoa_r+0x630>)
20007cc4:	4650      	mov	r0, sl
20007cc6:	4659      	mov	r1, fp
20007cc8:	f7f8 fae8 	bl	2000029c <__adddf3>
20007ccc:	4602      	mov	r2, r0
20007cce:	460b      	mov	r3, r1
20007cd0:	4640      	mov	r0, r8
20007cd2:	4649      	mov	r1, r9
20007cd4:	f7f8 ff28 	bl	20000b28 <__aeabi_dcmpgt>
20007cd8:	2800      	cmp	r0, #0
20007cda:	d173      	bne.n	20007dc4 <_dtoa_r+0x6c4>
20007cdc:	4652      	mov	r2, sl
20007cde:	465b      	mov	r3, fp
20007ce0:	4913      	ldr	r1, [pc, #76]	; (20007d30 <_dtoa_r+0x630>)
20007ce2:	2000      	movs	r0, #0
20007ce4:	f7f8 fad8 	bl	20000298 <__aeabi_dsub>
20007ce8:	4602      	mov	r2, r0
20007cea:	460b      	mov	r3, r1
20007cec:	4640      	mov	r0, r8
20007cee:	4649      	mov	r1, r9
20007cf0:	f7f8 fefc 	bl	20000aec <__aeabi_dcmplt>
20007cf4:	2800      	cmp	r0, #0
20007cf6:	f43f af35 	beq.w	20007b64 <_dtoa_r+0x464>
20007cfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
20007cfc:	1e6b      	subs	r3, r5, #1
20007cfe:	930f      	str	r3, [sp, #60]	; 0x3c
20007d00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
20007d04:	2b30      	cmp	r3, #48	; 0x30
20007d06:	d0f8      	beq.n	20007cfa <_dtoa_r+0x5fa>
20007d08:	9700      	str	r7, [sp, #0]
20007d0a:	e049      	b.n	20007da0 <_dtoa_r+0x6a0>
20007d0c:	4b05      	ldr	r3, [pc, #20]	; (20007d24 <_dtoa_r+0x624>)
20007d0e:	f7f8 fc7b 	bl	20000608 <__aeabi_dmul>
20007d12:	4680      	mov	r8, r0
20007d14:	4689      	mov	r9, r1
20007d16:	e7bd      	b.n	20007c94 <_dtoa_r+0x594>
20007d18:	20014490 	.word	0x20014490
20007d1c:	20014468 	.word	0x20014468
20007d20:	3ff00000 	.word	0x3ff00000
20007d24:	40240000 	.word	0x40240000
20007d28:	401c0000 	.word	0x401c0000
20007d2c:	40140000 	.word	0x40140000
20007d30:	3fe00000 	.word	0x3fe00000
20007d34:	9d01      	ldr	r5, [sp, #4]
20007d36:	4656      	mov	r6, sl
20007d38:	465f      	mov	r7, fp
20007d3a:	4642      	mov	r2, r8
20007d3c:	464b      	mov	r3, r9
20007d3e:	4630      	mov	r0, r6
20007d40:	4639      	mov	r1, r7
20007d42:	f7f8 fd8b 	bl	2000085c <__aeabi_ddiv>
20007d46:	f7f8 ff0f 	bl	20000b68 <__aeabi_d2iz>
20007d4a:	4682      	mov	sl, r0
20007d4c:	f7f8 fbf2 	bl	20000534 <__aeabi_i2d>
20007d50:	4642      	mov	r2, r8
20007d52:	464b      	mov	r3, r9
20007d54:	f7f8 fc58 	bl	20000608 <__aeabi_dmul>
20007d58:	4602      	mov	r2, r0
20007d5a:	460b      	mov	r3, r1
20007d5c:	4630      	mov	r0, r6
20007d5e:	4639      	mov	r1, r7
20007d60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
20007d64:	f7f8 fa98 	bl	20000298 <__aeabi_dsub>
20007d68:	f805 6b01 	strb.w	r6, [r5], #1
20007d6c:	9e01      	ldr	r6, [sp, #4]
20007d6e:	9f03      	ldr	r7, [sp, #12]
20007d70:	1bae      	subs	r6, r5, r6
20007d72:	42b7      	cmp	r7, r6
20007d74:	4602      	mov	r2, r0
20007d76:	460b      	mov	r3, r1
20007d78:	d135      	bne.n	20007de6 <_dtoa_r+0x6e6>
20007d7a:	f7f8 fa8f 	bl	2000029c <__adddf3>
20007d7e:	4642      	mov	r2, r8
20007d80:	464b      	mov	r3, r9
20007d82:	4606      	mov	r6, r0
20007d84:	460f      	mov	r7, r1
20007d86:	f7f8 fecf 	bl	20000b28 <__aeabi_dcmpgt>
20007d8a:	b9d0      	cbnz	r0, 20007dc2 <_dtoa_r+0x6c2>
20007d8c:	4642      	mov	r2, r8
20007d8e:	464b      	mov	r3, r9
20007d90:	4630      	mov	r0, r6
20007d92:	4639      	mov	r1, r7
20007d94:	f7f8 fea0 	bl	20000ad8 <__aeabi_dcmpeq>
20007d98:	b110      	cbz	r0, 20007da0 <_dtoa_r+0x6a0>
20007d9a:	f01a 0f01 	tst.w	sl, #1
20007d9e:	d110      	bne.n	20007dc2 <_dtoa_r+0x6c2>
20007da0:	4620      	mov	r0, r4
20007da2:	ee18 1a10 	vmov	r1, s16
20007da6:	f000 faf3 	bl	20008390 <_Bfree>
20007daa:	2300      	movs	r3, #0
20007dac:	9800      	ldr	r0, [sp, #0]
20007dae:	702b      	strb	r3, [r5, #0]
20007db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
20007db2:	3001      	adds	r0, #1
20007db4:	6018      	str	r0, [r3, #0]
20007db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
20007db8:	2b00      	cmp	r3, #0
20007dba:	f43f acf1 	beq.w	200077a0 <_dtoa_r+0xa0>
20007dbe:	601d      	str	r5, [r3, #0]
20007dc0:	e4ee      	b.n	200077a0 <_dtoa_r+0xa0>
20007dc2:	9f00      	ldr	r7, [sp, #0]
20007dc4:	462b      	mov	r3, r5
20007dc6:	461d      	mov	r5, r3
20007dc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
20007dcc:	2a39      	cmp	r2, #57	; 0x39
20007dce:	d106      	bne.n	20007dde <_dtoa_r+0x6de>
20007dd0:	9a01      	ldr	r2, [sp, #4]
20007dd2:	429a      	cmp	r2, r3
20007dd4:	d1f7      	bne.n	20007dc6 <_dtoa_r+0x6c6>
20007dd6:	9901      	ldr	r1, [sp, #4]
20007dd8:	2230      	movs	r2, #48	; 0x30
20007dda:	3701      	adds	r7, #1
20007ddc:	700a      	strb	r2, [r1, #0]
20007dde:	781a      	ldrb	r2, [r3, #0]
20007de0:	3201      	adds	r2, #1
20007de2:	701a      	strb	r2, [r3, #0]
20007de4:	e790      	b.n	20007d08 <_dtoa_r+0x608>
20007de6:	4ba6      	ldr	r3, [pc, #664]	; (20008080 <_dtoa_r+0x980>)
20007de8:	2200      	movs	r2, #0
20007dea:	f7f8 fc0d 	bl	20000608 <__aeabi_dmul>
20007dee:	2200      	movs	r2, #0
20007df0:	2300      	movs	r3, #0
20007df2:	4606      	mov	r6, r0
20007df4:	460f      	mov	r7, r1
20007df6:	f7f8 fe6f 	bl	20000ad8 <__aeabi_dcmpeq>
20007dfa:	2800      	cmp	r0, #0
20007dfc:	d09d      	beq.n	20007d3a <_dtoa_r+0x63a>
20007dfe:	e7cf      	b.n	20007da0 <_dtoa_r+0x6a0>
20007e00:	9a08      	ldr	r2, [sp, #32]
20007e02:	2a00      	cmp	r2, #0
20007e04:	f000 80d7 	beq.w	20007fb6 <_dtoa_r+0x8b6>
20007e08:	9a06      	ldr	r2, [sp, #24]
20007e0a:	2a01      	cmp	r2, #1
20007e0c:	f300 80ba 	bgt.w	20007f84 <_dtoa_r+0x884>
20007e10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
20007e12:	2a00      	cmp	r2, #0
20007e14:	f000 80b2 	beq.w	20007f7c <_dtoa_r+0x87c>
20007e18:	f203 4333 	addw	r3, r3, #1075	; 0x433
20007e1c:	9e07      	ldr	r6, [sp, #28]
20007e1e:	9d04      	ldr	r5, [sp, #16]
20007e20:	9a04      	ldr	r2, [sp, #16]
20007e22:	441a      	add	r2, r3
20007e24:	9204      	str	r2, [sp, #16]
20007e26:	9a05      	ldr	r2, [sp, #20]
20007e28:	2101      	movs	r1, #1
20007e2a:	441a      	add	r2, r3
20007e2c:	4620      	mov	r0, r4
20007e2e:	9205      	str	r2, [sp, #20]
20007e30:	f000 fb66 	bl	20008500 <__i2b>
20007e34:	4607      	mov	r7, r0
20007e36:	2d00      	cmp	r5, #0
20007e38:	dd0c      	ble.n	20007e54 <_dtoa_r+0x754>
20007e3a:	9b05      	ldr	r3, [sp, #20]
20007e3c:	2b00      	cmp	r3, #0
20007e3e:	dd09      	ble.n	20007e54 <_dtoa_r+0x754>
20007e40:	42ab      	cmp	r3, r5
20007e42:	9a04      	ldr	r2, [sp, #16]
20007e44:	bfa8      	it	ge
20007e46:	462b      	movge	r3, r5
20007e48:	1ad2      	subs	r2, r2, r3
20007e4a:	9204      	str	r2, [sp, #16]
20007e4c:	9a05      	ldr	r2, [sp, #20]
20007e4e:	1aed      	subs	r5, r5, r3
20007e50:	1ad3      	subs	r3, r2, r3
20007e52:	9305      	str	r3, [sp, #20]
20007e54:	9b07      	ldr	r3, [sp, #28]
20007e56:	b31b      	cbz	r3, 20007ea0 <_dtoa_r+0x7a0>
20007e58:	9b08      	ldr	r3, [sp, #32]
20007e5a:	2b00      	cmp	r3, #0
20007e5c:	f000 80af 	beq.w	20007fbe <_dtoa_r+0x8be>
20007e60:	2e00      	cmp	r6, #0
20007e62:	dd13      	ble.n	20007e8c <_dtoa_r+0x78c>
20007e64:	4639      	mov	r1, r7
20007e66:	4632      	mov	r2, r6
20007e68:	4620      	mov	r0, r4
20007e6a:	f000 fc09 	bl	20008680 <__pow5mult>
20007e6e:	ee18 2a10 	vmov	r2, s16
20007e72:	4601      	mov	r1, r0
20007e74:	4607      	mov	r7, r0
20007e76:	4620      	mov	r0, r4
20007e78:	f000 fb58 	bl	2000852c <__multiply>
20007e7c:	ee18 1a10 	vmov	r1, s16
20007e80:	4680      	mov	r8, r0
20007e82:	4620      	mov	r0, r4
20007e84:	f000 fa84 	bl	20008390 <_Bfree>
20007e88:	ee08 8a10 	vmov	s16, r8
20007e8c:	9b07      	ldr	r3, [sp, #28]
20007e8e:	1b9a      	subs	r2, r3, r6
20007e90:	d006      	beq.n	20007ea0 <_dtoa_r+0x7a0>
20007e92:	ee18 1a10 	vmov	r1, s16
20007e96:	4620      	mov	r0, r4
20007e98:	f000 fbf2 	bl	20008680 <__pow5mult>
20007e9c:	ee08 0a10 	vmov	s16, r0
20007ea0:	2101      	movs	r1, #1
20007ea2:	4620      	mov	r0, r4
20007ea4:	f000 fb2c 	bl	20008500 <__i2b>
20007ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
20007eaa:	2b00      	cmp	r3, #0
20007eac:	4606      	mov	r6, r0
20007eae:	f340 8088 	ble.w	20007fc2 <_dtoa_r+0x8c2>
20007eb2:	461a      	mov	r2, r3
20007eb4:	4601      	mov	r1, r0
20007eb6:	4620      	mov	r0, r4
20007eb8:	f000 fbe2 	bl	20008680 <__pow5mult>
20007ebc:	9b06      	ldr	r3, [sp, #24]
20007ebe:	2b01      	cmp	r3, #1
20007ec0:	4606      	mov	r6, r0
20007ec2:	f340 8081 	ble.w	20007fc8 <_dtoa_r+0x8c8>
20007ec6:	f04f 0800 	mov.w	r8, #0
20007eca:	6933      	ldr	r3, [r6, #16]
20007ecc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
20007ed0:	6918      	ldr	r0, [r3, #16]
20007ed2:	f000 fac5 	bl	20008460 <__hi0bits>
20007ed6:	f1c0 0020 	rsb	r0, r0, #32
20007eda:	9b05      	ldr	r3, [sp, #20]
20007edc:	4418      	add	r0, r3
20007ede:	f010 001f 	ands.w	r0, r0, #31
20007ee2:	f000 8092 	beq.w	2000800a <_dtoa_r+0x90a>
20007ee6:	f1c0 0320 	rsb	r3, r0, #32
20007eea:	2b04      	cmp	r3, #4
20007eec:	f340 808a 	ble.w	20008004 <_dtoa_r+0x904>
20007ef0:	f1c0 001c 	rsb	r0, r0, #28
20007ef4:	9b04      	ldr	r3, [sp, #16]
20007ef6:	4403      	add	r3, r0
20007ef8:	9304      	str	r3, [sp, #16]
20007efa:	9b05      	ldr	r3, [sp, #20]
20007efc:	4403      	add	r3, r0
20007efe:	4405      	add	r5, r0
20007f00:	9305      	str	r3, [sp, #20]
20007f02:	9b04      	ldr	r3, [sp, #16]
20007f04:	2b00      	cmp	r3, #0
20007f06:	dd07      	ble.n	20007f18 <_dtoa_r+0x818>
20007f08:	ee18 1a10 	vmov	r1, s16
20007f0c:	461a      	mov	r2, r3
20007f0e:	4620      	mov	r0, r4
20007f10:	f000 fc10 	bl	20008734 <__lshift>
20007f14:	ee08 0a10 	vmov	s16, r0
20007f18:	9b05      	ldr	r3, [sp, #20]
20007f1a:	2b00      	cmp	r3, #0
20007f1c:	dd05      	ble.n	20007f2a <_dtoa_r+0x82a>
20007f1e:	4631      	mov	r1, r6
20007f20:	461a      	mov	r2, r3
20007f22:	4620      	mov	r0, r4
20007f24:	f000 fc06 	bl	20008734 <__lshift>
20007f28:	4606      	mov	r6, r0
20007f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
20007f2c:	2b00      	cmp	r3, #0
20007f2e:	d06e      	beq.n	2000800e <_dtoa_r+0x90e>
20007f30:	ee18 0a10 	vmov	r0, s16
20007f34:	4631      	mov	r1, r6
20007f36:	f000 fc6d 	bl	20008814 <__mcmp>
20007f3a:	2800      	cmp	r0, #0
20007f3c:	da67      	bge.n	2000800e <_dtoa_r+0x90e>
20007f3e:	9b00      	ldr	r3, [sp, #0]
20007f40:	3b01      	subs	r3, #1
20007f42:	ee18 1a10 	vmov	r1, s16
20007f46:	9300      	str	r3, [sp, #0]
20007f48:	220a      	movs	r2, #10
20007f4a:	2300      	movs	r3, #0
20007f4c:	4620      	mov	r0, r4
20007f4e:	f000 fa41 	bl	200083d4 <__multadd>
20007f52:	9b08      	ldr	r3, [sp, #32]
20007f54:	ee08 0a10 	vmov	s16, r0
20007f58:	2b00      	cmp	r3, #0
20007f5a:	f000 81b1 	beq.w	200082c0 <_dtoa_r+0xbc0>
20007f5e:	2300      	movs	r3, #0
20007f60:	4639      	mov	r1, r7
20007f62:	220a      	movs	r2, #10
20007f64:	4620      	mov	r0, r4
20007f66:	f000 fa35 	bl	200083d4 <__multadd>
20007f6a:	9b02      	ldr	r3, [sp, #8]
20007f6c:	2b00      	cmp	r3, #0
20007f6e:	4607      	mov	r7, r0
20007f70:	f300 808e 	bgt.w	20008090 <_dtoa_r+0x990>
20007f74:	9b06      	ldr	r3, [sp, #24]
20007f76:	2b02      	cmp	r3, #2
20007f78:	dc51      	bgt.n	2000801e <_dtoa_r+0x91e>
20007f7a:	e089      	b.n	20008090 <_dtoa_r+0x990>
20007f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
20007f7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
20007f82:	e74b      	b.n	20007e1c <_dtoa_r+0x71c>
20007f84:	9b03      	ldr	r3, [sp, #12]
20007f86:	1e5e      	subs	r6, r3, #1
20007f88:	9b07      	ldr	r3, [sp, #28]
20007f8a:	42b3      	cmp	r3, r6
20007f8c:	bfbf      	itttt	lt
20007f8e:	9b07      	ldrlt	r3, [sp, #28]
20007f90:	9607      	strlt	r6, [sp, #28]
20007f92:	1af2      	sublt	r2, r6, r3
20007f94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
20007f96:	bfb6      	itet	lt
20007f98:	189b      	addlt	r3, r3, r2
20007f9a:	1b9e      	subge	r6, r3, r6
20007f9c:	930a      	strlt	r3, [sp, #40]	; 0x28
20007f9e:	9b03      	ldr	r3, [sp, #12]
20007fa0:	bfb8      	it	lt
20007fa2:	2600      	movlt	r6, #0
20007fa4:	2b00      	cmp	r3, #0
20007fa6:	bfb7      	itett	lt
20007fa8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
20007fac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
20007fb0:	1a9d      	sublt	r5, r3, r2
20007fb2:	2300      	movlt	r3, #0
20007fb4:	e734      	b.n	20007e20 <_dtoa_r+0x720>
20007fb6:	9e07      	ldr	r6, [sp, #28]
20007fb8:	9d04      	ldr	r5, [sp, #16]
20007fba:	9f08      	ldr	r7, [sp, #32]
20007fbc:	e73b      	b.n	20007e36 <_dtoa_r+0x736>
20007fbe:	9a07      	ldr	r2, [sp, #28]
20007fc0:	e767      	b.n	20007e92 <_dtoa_r+0x792>
20007fc2:	9b06      	ldr	r3, [sp, #24]
20007fc4:	2b01      	cmp	r3, #1
20007fc6:	dc18      	bgt.n	20007ffa <_dtoa_r+0x8fa>
20007fc8:	f1ba 0f00 	cmp.w	sl, #0
20007fcc:	d115      	bne.n	20007ffa <_dtoa_r+0x8fa>
20007fce:	f3cb 0313 	ubfx	r3, fp, #0, #20
20007fd2:	b993      	cbnz	r3, 20007ffa <_dtoa_r+0x8fa>
20007fd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
20007fd8:	0d1b      	lsrs	r3, r3, #20
20007fda:	051b      	lsls	r3, r3, #20
20007fdc:	b183      	cbz	r3, 20008000 <_dtoa_r+0x900>
20007fde:	9b04      	ldr	r3, [sp, #16]
20007fe0:	3301      	adds	r3, #1
20007fe2:	9304      	str	r3, [sp, #16]
20007fe4:	9b05      	ldr	r3, [sp, #20]
20007fe6:	3301      	adds	r3, #1
20007fe8:	9305      	str	r3, [sp, #20]
20007fea:	f04f 0801 	mov.w	r8, #1
20007fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
20007ff0:	2b00      	cmp	r3, #0
20007ff2:	f47f af6a 	bne.w	20007eca <_dtoa_r+0x7ca>
20007ff6:	2001      	movs	r0, #1
20007ff8:	e76f      	b.n	20007eda <_dtoa_r+0x7da>
20007ffa:	f04f 0800 	mov.w	r8, #0
20007ffe:	e7f6      	b.n	20007fee <_dtoa_r+0x8ee>
20008000:	4698      	mov	r8, r3
20008002:	e7f4      	b.n	20007fee <_dtoa_r+0x8ee>
20008004:	f43f af7d 	beq.w	20007f02 <_dtoa_r+0x802>
20008008:	4618      	mov	r0, r3
2000800a:	301c      	adds	r0, #28
2000800c:	e772      	b.n	20007ef4 <_dtoa_r+0x7f4>
2000800e:	9b03      	ldr	r3, [sp, #12]
20008010:	2b00      	cmp	r3, #0
20008012:	dc37      	bgt.n	20008084 <_dtoa_r+0x984>
20008014:	9b06      	ldr	r3, [sp, #24]
20008016:	2b02      	cmp	r3, #2
20008018:	dd34      	ble.n	20008084 <_dtoa_r+0x984>
2000801a:	9b03      	ldr	r3, [sp, #12]
2000801c:	9302      	str	r3, [sp, #8]
2000801e:	9b02      	ldr	r3, [sp, #8]
20008020:	b96b      	cbnz	r3, 2000803e <_dtoa_r+0x93e>
20008022:	4631      	mov	r1, r6
20008024:	2205      	movs	r2, #5
20008026:	4620      	mov	r0, r4
20008028:	f000 f9d4 	bl	200083d4 <__multadd>
2000802c:	4601      	mov	r1, r0
2000802e:	4606      	mov	r6, r0
20008030:	ee18 0a10 	vmov	r0, s16
20008034:	f000 fbee 	bl	20008814 <__mcmp>
20008038:	2800      	cmp	r0, #0
2000803a:	f73f adbb 	bgt.w	20007bb4 <_dtoa_r+0x4b4>
2000803e:	9b09      	ldr	r3, [sp, #36]	; 0x24
20008040:	9d01      	ldr	r5, [sp, #4]
20008042:	43db      	mvns	r3, r3
20008044:	9300      	str	r3, [sp, #0]
20008046:	f04f 0800 	mov.w	r8, #0
2000804a:	4631      	mov	r1, r6
2000804c:	4620      	mov	r0, r4
2000804e:	f000 f99f 	bl	20008390 <_Bfree>
20008052:	2f00      	cmp	r7, #0
20008054:	f43f aea4 	beq.w	20007da0 <_dtoa_r+0x6a0>
20008058:	f1b8 0f00 	cmp.w	r8, #0
2000805c:	d005      	beq.n	2000806a <_dtoa_r+0x96a>
2000805e:	45b8      	cmp	r8, r7
20008060:	d003      	beq.n	2000806a <_dtoa_r+0x96a>
20008062:	4641      	mov	r1, r8
20008064:	4620      	mov	r0, r4
20008066:	f000 f993 	bl	20008390 <_Bfree>
2000806a:	4639      	mov	r1, r7
2000806c:	4620      	mov	r0, r4
2000806e:	f000 f98f 	bl	20008390 <_Bfree>
20008072:	e695      	b.n	20007da0 <_dtoa_r+0x6a0>
20008074:	2600      	movs	r6, #0
20008076:	4637      	mov	r7, r6
20008078:	e7e1      	b.n	2000803e <_dtoa_r+0x93e>
2000807a:	9700      	str	r7, [sp, #0]
2000807c:	4637      	mov	r7, r6
2000807e:	e599      	b.n	20007bb4 <_dtoa_r+0x4b4>
20008080:	40240000 	.word	0x40240000
20008084:	9b08      	ldr	r3, [sp, #32]
20008086:	2b00      	cmp	r3, #0
20008088:	f000 80ca 	beq.w	20008220 <_dtoa_r+0xb20>
2000808c:	9b03      	ldr	r3, [sp, #12]
2000808e:	9302      	str	r3, [sp, #8]
20008090:	2d00      	cmp	r5, #0
20008092:	dd05      	ble.n	200080a0 <_dtoa_r+0x9a0>
20008094:	4639      	mov	r1, r7
20008096:	462a      	mov	r2, r5
20008098:	4620      	mov	r0, r4
2000809a:	f000 fb4b 	bl	20008734 <__lshift>
2000809e:	4607      	mov	r7, r0
200080a0:	f1b8 0f00 	cmp.w	r8, #0
200080a4:	d05b      	beq.n	2000815e <_dtoa_r+0xa5e>
200080a6:	6879      	ldr	r1, [r7, #4]
200080a8:	4620      	mov	r0, r4
200080aa:	f000 f931 	bl	20008310 <_Balloc>
200080ae:	4605      	mov	r5, r0
200080b0:	b928      	cbnz	r0, 200080be <_dtoa_r+0x9be>
200080b2:	4b87      	ldr	r3, [pc, #540]	; (200082d0 <_dtoa_r+0xbd0>)
200080b4:	4602      	mov	r2, r0
200080b6:	f240 21ea 	movw	r1, #746	; 0x2ea
200080ba:	f7ff bb3b 	b.w	20007734 <_dtoa_r+0x34>
200080be:	693a      	ldr	r2, [r7, #16]
200080c0:	3202      	adds	r2, #2
200080c2:	0092      	lsls	r2, r2, #2
200080c4:	f107 010c 	add.w	r1, r7, #12
200080c8:	300c      	adds	r0, #12
200080ca:	f000 f913 	bl	200082f4 <memcpy>
200080ce:	2201      	movs	r2, #1
200080d0:	4629      	mov	r1, r5
200080d2:	4620      	mov	r0, r4
200080d4:	f000 fb2e 	bl	20008734 <__lshift>
200080d8:	9b01      	ldr	r3, [sp, #4]
200080da:	f103 0901 	add.w	r9, r3, #1
200080de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
200080e2:	4413      	add	r3, r2
200080e4:	9305      	str	r3, [sp, #20]
200080e6:	f00a 0301 	and.w	r3, sl, #1
200080ea:	46b8      	mov	r8, r7
200080ec:	9304      	str	r3, [sp, #16]
200080ee:	4607      	mov	r7, r0
200080f0:	4631      	mov	r1, r6
200080f2:	ee18 0a10 	vmov	r0, s16
200080f6:	f7ff fa75 	bl	200075e4 <quorem>
200080fa:	4641      	mov	r1, r8
200080fc:	9002      	str	r0, [sp, #8]
200080fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
20008102:	ee18 0a10 	vmov	r0, s16
20008106:	f000 fb85 	bl	20008814 <__mcmp>
2000810a:	463a      	mov	r2, r7
2000810c:	9003      	str	r0, [sp, #12]
2000810e:	4631      	mov	r1, r6
20008110:	4620      	mov	r0, r4
20008112:	f000 fb9b 	bl	2000884c <__mdiff>
20008116:	68c2      	ldr	r2, [r0, #12]
20008118:	f109 3bff 	add.w	fp, r9, #4294967295
2000811c:	4605      	mov	r5, r0
2000811e:	bb02      	cbnz	r2, 20008162 <_dtoa_r+0xa62>
20008120:	4601      	mov	r1, r0
20008122:	ee18 0a10 	vmov	r0, s16
20008126:	f000 fb75 	bl	20008814 <__mcmp>
2000812a:	4602      	mov	r2, r0
2000812c:	4629      	mov	r1, r5
2000812e:	4620      	mov	r0, r4
20008130:	9207      	str	r2, [sp, #28]
20008132:	f000 f92d 	bl	20008390 <_Bfree>
20008136:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
2000813a:	ea43 0102 	orr.w	r1, r3, r2
2000813e:	9b04      	ldr	r3, [sp, #16]
20008140:	430b      	orrs	r3, r1
20008142:	464d      	mov	r5, r9
20008144:	d10f      	bne.n	20008166 <_dtoa_r+0xa66>
20008146:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
2000814a:	d02a      	beq.n	200081a2 <_dtoa_r+0xaa2>
2000814c:	9b03      	ldr	r3, [sp, #12]
2000814e:	2b00      	cmp	r3, #0
20008150:	dd02      	ble.n	20008158 <_dtoa_r+0xa58>
20008152:	9b02      	ldr	r3, [sp, #8]
20008154:	f103 0a31 	add.w	sl, r3, #49	; 0x31
20008158:	f88b a000 	strb.w	sl, [fp]
2000815c:	e775      	b.n	2000804a <_dtoa_r+0x94a>
2000815e:	4638      	mov	r0, r7
20008160:	e7ba      	b.n	200080d8 <_dtoa_r+0x9d8>
20008162:	2201      	movs	r2, #1
20008164:	e7e2      	b.n	2000812c <_dtoa_r+0xa2c>
20008166:	9b03      	ldr	r3, [sp, #12]
20008168:	2b00      	cmp	r3, #0
2000816a:	db04      	blt.n	20008176 <_dtoa_r+0xa76>
2000816c:	9906      	ldr	r1, [sp, #24]
2000816e:	430b      	orrs	r3, r1
20008170:	9904      	ldr	r1, [sp, #16]
20008172:	430b      	orrs	r3, r1
20008174:	d122      	bne.n	200081bc <_dtoa_r+0xabc>
20008176:	2a00      	cmp	r2, #0
20008178:	ddee      	ble.n	20008158 <_dtoa_r+0xa58>
2000817a:	ee18 1a10 	vmov	r1, s16
2000817e:	2201      	movs	r2, #1
20008180:	4620      	mov	r0, r4
20008182:	f000 fad7 	bl	20008734 <__lshift>
20008186:	4631      	mov	r1, r6
20008188:	ee08 0a10 	vmov	s16, r0
2000818c:	f000 fb42 	bl	20008814 <__mcmp>
20008190:	2800      	cmp	r0, #0
20008192:	dc03      	bgt.n	2000819c <_dtoa_r+0xa9c>
20008194:	d1e0      	bne.n	20008158 <_dtoa_r+0xa58>
20008196:	f01a 0f01 	tst.w	sl, #1
2000819a:	d0dd      	beq.n	20008158 <_dtoa_r+0xa58>
2000819c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
200081a0:	d1d7      	bne.n	20008152 <_dtoa_r+0xa52>
200081a2:	2339      	movs	r3, #57	; 0x39
200081a4:	f88b 3000 	strb.w	r3, [fp]
200081a8:	462b      	mov	r3, r5
200081aa:	461d      	mov	r5, r3
200081ac:	3b01      	subs	r3, #1
200081ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
200081b2:	2a39      	cmp	r2, #57	; 0x39
200081b4:	d071      	beq.n	2000829a <_dtoa_r+0xb9a>
200081b6:	3201      	adds	r2, #1
200081b8:	701a      	strb	r2, [r3, #0]
200081ba:	e746      	b.n	2000804a <_dtoa_r+0x94a>
200081bc:	2a00      	cmp	r2, #0
200081be:	dd07      	ble.n	200081d0 <_dtoa_r+0xad0>
200081c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
200081c4:	d0ed      	beq.n	200081a2 <_dtoa_r+0xaa2>
200081c6:	f10a 0301 	add.w	r3, sl, #1
200081ca:	f88b 3000 	strb.w	r3, [fp]
200081ce:	e73c      	b.n	2000804a <_dtoa_r+0x94a>
200081d0:	9b05      	ldr	r3, [sp, #20]
200081d2:	f809 ac01 	strb.w	sl, [r9, #-1]
200081d6:	4599      	cmp	r9, r3
200081d8:	d047      	beq.n	2000826a <_dtoa_r+0xb6a>
200081da:	ee18 1a10 	vmov	r1, s16
200081de:	2300      	movs	r3, #0
200081e0:	220a      	movs	r2, #10
200081e2:	4620      	mov	r0, r4
200081e4:	f000 f8f6 	bl	200083d4 <__multadd>
200081e8:	45b8      	cmp	r8, r7
200081ea:	ee08 0a10 	vmov	s16, r0
200081ee:	f04f 0300 	mov.w	r3, #0
200081f2:	f04f 020a 	mov.w	r2, #10
200081f6:	4641      	mov	r1, r8
200081f8:	4620      	mov	r0, r4
200081fa:	d106      	bne.n	2000820a <_dtoa_r+0xb0a>
200081fc:	f000 f8ea 	bl	200083d4 <__multadd>
20008200:	4680      	mov	r8, r0
20008202:	4607      	mov	r7, r0
20008204:	f109 0901 	add.w	r9, r9, #1
20008208:	e772      	b.n	200080f0 <_dtoa_r+0x9f0>
2000820a:	f000 f8e3 	bl	200083d4 <__multadd>
2000820e:	4639      	mov	r1, r7
20008210:	4680      	mov	r8, r0
20008212:	2300      	movs	r3, #0
20008214:	220a      	movs	r2, #10
20008216:	4620      	mov	r0, r4
20008218:	f000 f8dc 	bl	200083d4 <__multadd>
2000821c:	4607      	mov	r7, r0
2000821e:	e7f1      	b.n	20008204 <_dtoa_r+0xb04>
20008220:	9b03      	ldr	r3, [sp, #12]
20008222:	9302      	str	r3, [sp, #8]
20008224:	9d01      	ldr	r5, [sp, #4]
20008226:	ee18 0a10 	vmov	r0, s16
2000822a:	4631      	mov	r1, r6
2000822c:	f7ff f9da 	bl	200075e4 <quorem>
20008230:	f100 0a30 	add.w	sl, r0, #48	; 0x30
20008234:	9b01      	ldr	r3, [sp, #4]
20008236:	f805 ab01 	strb.w	sl, [r5], #1
2000823a:	1aea      	subs	r2, r5, r3
2000823c:	9b02      	ldr	r3, [sp, #8]
2000823e:	4293      	cmp	r3, r2
20008240:	dd09      	ble.n	20008256 <_dtoa_r+0xb56>
20008242:	ee18 1a10 	vmov	r1, s16
20008246:	2300      	movs	r3, #0
20008248:	220a      	movs	r2, #10
2000824a:	4620      	mov	r0, r4
2000824c:	f000 f8c2 	bl	200083d4 <__multadd>
20008250:	ee08 0a10 	vmov	s16, r0
20008254:	e7e7      	b.n	20008226 <_dtoa_r+0xb26>
20008256:	9b02      	ldr	r3, [sp, #8]
20008258:	2b00      	cmp	r3, #0
2000825a:	bfc8      	it	gt
2000825c:	461d      	movgt	r5, r3
2000825e:	9b01      	ldr	r3, [sp, #4]
20008260:	bfd8      	it	le
20008262:	2501      	movle	r5, #1
20008264:	441d      	add	r5, r3
20008266:	f04f 0800 	mov.w	r8, #0
2000826a:	ee18 1a10 	vmov	r1, s16
2000826e:	2201      	movs	r2, #1
20008270:	4620      	mov	r0, r4
20008272:	f000 fa5f 	bl	20008734 <__lshift>
20008276:	4631      	mov	r1, r6
20008278:	ee08 0a10 	vmov	s16, r0
2000827c:	f000 faca 	bl	20008814 <__mcmp>
20008280:	2800      	cmp	r0, #0
20008282:	dc91      	bgt.n	200081a8 <_dtoa_r+0xaa8>
20008284:	d102      	bne.n	2000828c <_dtoa_r+0xb8c>
20008286:	f01a 0f01 	tst.w	sl, #1
2000828a:	d18d      	bne.n	200081a8 <_dtoa_r+0xaa8>
2000828c:	462b      	mov	r3, r5
2000828e:	461d      	mov	r5, r3
20008290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
20008294:	2a30      	cmp	r2, #48	; 0x30
20008296:	d0fa      	beq.n	2000828e <_dtoa_r+0xb8e>
20008298:	e6d7      	b.n	2000804a <_dtoa_r+0x94a>
2000829a:	9a01      	ldr	r2, [sp, #4]
2000829c:	429a      	cmp	r2, r3
2000829e:	d184      	bne.n	200081aa <_dtoa_r+0xaaa>
200082a0:	9b00      	ldr	r3, [sp, #0]
200082a2:	3301      	adds	r3, #1
200082a4:	9300      	str	r3, [sp, #0]
200082a6:	2331      	movs	r3, #49	; 0x31
200082a8:	7013      	strb	r3, [r2, #0]
200082aa:	e6ce      	b.n	2000804a <_dtoa_r+0x94a>
200082ac:	4b09      	ldr	r3, [pc, #36]	; (200082d4 <_dtoa_r+0xbd4>)
200082ae:	f7ff ba95 	b.w	200077dc <_dtoa_r+0xdc>
200082b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
200082b4:	2b00      	cmp	r3, #0
200082b6:	f47f aa6e 	bne.w	20007796 <_dtoa_r+0x96>
200082ba:	4b07      	ldr	r3, [pc, #28]	; (200082d8 <_dtoa_r+0xbd8>)
200082bc:	f7ff ba8e 	b.w	200077dc <_dtoa_r+0xdc>
200082c0:	9b02      	ldr	r3, [sp, #8]
200082c2:	2b00      	cmp	r3, #0
200082c4:	dcae      	bgt.n	20008224 <_dtoa_r+0xb24>
200082c6:	9b06      	ldr	r3, [sp, #24]
200082c8:	2b02      	cmp	r3, #2
200082ca:	f73f aea8 	bgt.w	2000801e <_dtoa_r+0x91e>
200082ce:	e7a9      	b.n	20008224 <_dtoa_r+0xb24>
200082d0:	200143f7 	.word	0x200143f7
200082d4:	20014354 	.word	0x20014354
200082d8:	20014378 	.word	0x20014378

200082dc <_localeconv_r>:
200082dc:	4800      	ldr	r0, [pc, #0]	; (200082e0 <_localeconv_r+0x4>)
200082de:	4770      	bx	lr
200082e0:	200148dc 	.word	0x200148dc

200082e4 <malloc>:
200082e4:	4b02      	ldr	r3, [pc, #8]	; (200082f0 <malloc+0xc>)
200082e6:	4601      	mov	r1, r0
200082e8:	6818      	ldr	r0, [r3, #0]
200082ea:	f000 bc17 	b.w	20008b1c <_malloc_r>
200082ee:	bf00      	nop
200082f0:	20014788 	.word	0x20014788

200082f4 <memcpy>:
200082f4:	440a      	add	r2, r1
200082f6:	4291      	cmp	r1, r2
200082f8:	f100 33ff 	add.w	r3, r0, #4294967295
200082fc:	d100      	bne.n	20008300 <memcpy+0xc>
200082fe:	4770      	bx	lr
20008300:	b510      	push	{r4, lr}
20008302:	f811 4b01 	ldrb.w	r4, [r1], #1
20008306:	f803 4f01 	strb.w	r4, [r3, #1]!
2000830a:	4291      	cmp	r1, r2
2000830c:	d1f9      	bne.n	20008302 <memcpy+0xe>
2000830e:	bd10      	pop	{r4, pc}

20008310 <_Balloc>:
20008310:	b570      	push	{r4, r5, r6, lr}
20008312:	6a46      	ldr	r6, [r0, #36]	; 0x24
20008314:	4604      	mov	r4, r0
20008316:	460d      	mov	r5, r1
20008318:	b976      	cbnz	r6, 20008338 <_Balloc+0x28>
2000831a:	2010      	movs	r0, #16
2000831c:	f7ff ffe2 	bl	200082e4 <malloc>
20008320:	4602      	mov	r2, r0
20008322:	6260      	str	r0, [r4, #36]	; 0x24
20008324:	b920      	cbnz	r0, 20008330 <_Balloc+0x20>
20008326:	4b18      	ldr	r3, [pc, #96]	; (20008388 <_Balloc+0x78>)
20008328:	4818      	ldr	r0, [pc, #96]	; (2000838c <_Balloc+0x7c>)
2000832a:	2166      	movs	r1, #102	; 0x66
2000832c:	f000 fdd6 	bl	20008edc <__assert_func>
20008330:	e9c0 6601 	strd	r6, r6, [r0, #4]
20008334:	6006      	str	r6, [r0, #0]
20008336:	60c6      	str	r6, [r0, #12]
20008338:	6a66      	ldr	r6, [r4, #36]	; 0x24
2000833a:	68f3      	ldr	r3, [r6, #12]
2000833c:	b183      	cbz	r3, 20008360 <_Balloc+0x50>
2000833e:	6a63      	ldr	r3, [r4, #36]	; 0x24
20008340:	68db      	ldr	r3, [r3, #12]
20008342:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
20008346:	b9b8      	cbnz	r0, 20008378 <_Balloc+0x68>
20008348:	2101      	movs	r1, #1
2000834a:	fa01 f605 	lsl.w	r6, r1, r5
2000834e:	1d72      	adds	r2, r6, #5
20008350:	0092      	lsls	r2, r2, #2
20008352:	4620      	mov	r0, r4
20008354:	f000 fb60 	bl	20008a18 <_calloc_r>
20008358:	b160      	cbz	r0, 20008374 <_Balloc+0x64>
2000835a:	e9c0 5601 	strd	r5, r6, [r0, #4]
2000835e:	e00e      	b.n	2000837e <_Balloc+0x6e>
20008360:	2221      	movs	r2, #33	; 0x21
20008362:	2104      	movs	r1, #4
20008364:	4620      	mov	r0, r4
20008366:	f000 fb57 	bl	20008a18 <_calloc_r>
2000836a:	6a63      	ldr	r3, [r4, #36]	; 0x24
2000836c:	60f0      	str	r0, [r6, #12]
2000836e:	68db      	ldr	r3, [r3, #12]
20008370:	2b00      	cmp	r3, #0
20008372:	d1e4      	bne.n	2000833e <_Balloc+0x2e>
20008374:	2000      	movs	r0, #0
20008376:	bd70      	pop	{r4, r5, r6, pc}
20008378:	6802      	ldr	r2, [r0, #0]
2000837a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
2000837e:	2300      	movs	r3, #0
20008380:	e9c0 3303 	strd	r3, r3, [r0, #12]
20008384:	e7f7      	b.n	20008376 <_Balloc+0x66>
20008386:	bf00      	nop
20008388:	20014385 	.word	0x20014385
2000838c:	20014408 	.word	0x20014408

20008390 <_Bfree>:
20008390:	b570      	push	{r4, r5, r6, lr}
20008392:	6a46      	ldr	r6, [r0, #36]	; 0x24
20008394:	4605      	mov	r5, r0
20008396:	460c      	mov	r4, r1
20008398:	b976      	cbnz	r6, 200083b8 <_Bfree+0x28>
2000839a:	2010      	movs	r0, #16
2000839c:	f7ff ffa2 	bl	200082e4 <malloc>
200083a0:	4602      	mov	r2, r0
200083a2:	6268      	str	r0, [r5, #36]	; 0x24
200083a4:	b920      	cbnz	r0, 200083b0 <_Bfree+0x20>
200083a6:	4b09      	ldr	r3, [pc, #36]	; (200083cc <_Bfree+0x3c>)
200083a8:	4809      	ldr	r0, [pc, #36]	; (200083d0 <_Bfree+0x40>)
200083aa:	218a      	movs	r1, #138	; 0x8a
200083ac:	f000 fd96 	bl	20008edc <__assert_func>
200083b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
200083b4:	6006      	str	r6, [r0, #0]
200083b6:	60c6      	str	r6, [r0, #12]
200083b8:	b13c      	cbz	r4, 200083ca <_Bfree+0x3a>
200083ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
200083bc:	6862      	ldr	r2, [r4, #4]
200083be:	68db      	ldr	r3, [r3, #12]
200083c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
200083c4:	6021      	str	r1, [r4, #0]
200083c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
200083ca:	bd70      	pop	{r4, r5, r6, pc}
200083cc:	20014385 	.word	0x20014385
200083d0:	20014408 	.word	0x20014408

200083d4 <__multadd>:
200083d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
200083d8:	690d      	ldr	r5, [r1, #16]
200083da:	4607      	mov	r7, r0
200083dc:	460c      	mov	r4, r1
200083de:	461e      	mov	r6, r3
200083e0:	f101 0c14 	add.w	ip, r1, #20
200083e4:	2000      	movs	r0, #0
200083e6:	f8dc 3000 	ldr.w	r3, [ip]
200083ea:	b299      	uxth	r1, r3
200083ec:	fb02 6101 	mla	r1, r2, r1, r6
200083f0:	0c1e      	lsrs	r6, r3, #16
200083f2:	0c0b      	lsrs	r3, r1, #16
200083f4:	fb02 3306 	mla	r3, r2, r6, r3
200083f8:	b289      	uxth	r1, r1
200083fa:	3001      	adds	r0, #1
200083fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
20008400:	4285      	cmp	r5, r0
20008402:	f84c 1b04 	str.w	r1, [ip], #4
20008406:	ea4f 4613 	mov.w	r6, r3, lsr #16
2000840a:	dcec      	bgt.n	200083e6 <__multadd+0x12>
2000840c:	b30e      	cbz	r6, 20008452 <__multadd+0x7e>
2000840e:	68a3      	ldr	r3, [r4, #8]
20008410:	42ab      	cmp	r3, r5
20008412:	dc19      	bgt.n	20008448 <__multadd+0x74>
20008414:	6861      	ldr	r1, [r4, #4]
20008416:	4638      	mov	r0, r7
20008418:	3101      	adds	r1, #1
2000841a:	f7ff ff79 	bl	20008310 <_Balloc>
2000841e:	4680      	mov	r8, r0
20008420:	b928      	cbnz	r0, 2000842e <__multadd+0x5a>
20008422:	4602      	mov	r2, r0
20008424:	4b0c      	ldr	r3, [pc, #48]	; (20008458 <__multadd+0x84>)
20008426:	480d      	ldr	r0, [pc, #52]	; (2000845c <__multadd+0x88>)
20008428:	21b5      	movs	r1, #181	; 0xb5
2000842a:	f000 fd57 	bl	20008edc <__assert_func>
2000842e:	6922      	ldr	r2, [r4, #16]
20008430:	3202      	adds	r2, #2
20008432:	f104 010c 	add.w	r1, r4, #12
20008436:	0092      	lsls	r2, r2, #2
20008438:	300c      	adds	r0, #12
2000843a:	f7ff ff5b 	bl	200082f4 <memcpy>
2000843e:	4621      	mov	r1, r4
20008440:	4638      	mov	r0, r7
20008442:	f7ff ffa5 	bl	20008390 <_Bfree>
20008446:	4644      	mov	r4, r8
20008448:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000844c:	3501      	adds	r5, #1
2000844e:	615e      	str	r6, [r3, #20]
20008450:	6125      	str	r5, [r4, #16]
20008452:	4620      	mov	r0, r4
20008454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20008458:	200143f7 	.word	0x200143f7
2000845c:	20014408 	.word	0x20014408

20008460 <__hi0bits>:
20008460:	0c03      	lsrs	r3, r0, #16
20008462:	041b      	lsls	r3, r3, #16
20008464:	b9d3      	cbnz	r3, 2000849c <__hi0bits+0x3c>
20008466:	0400      	lsls	r0, r0, #16
20008468:	2310      	movs	r3, #16
2000846a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
2000846e:	bf04      	itt	eq
20008470:	0200      	lsleq	r0, r0, #8
20008472:	3308      	addeq	r3, #8
20008474:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
20008478:	bf04      	itt	eq
2000847a:	0100      	lsleq	r0, r0, #4
2000847c:	3304      	addeq	r3, #4
2000847e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
20008482:	bf04      	itt	eq
20008484:	0080      	lsleq	r0, r0, #2
20008486:	3302      	addeq	r3, #2
20008488:	2800      	cmp	r0, #0
2000848a:	db05      	blt.n	20008498 <__hi0bits+0x38>
2000848c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
20008490:	f103 0301 	add.w	r3, r3, #1
20008494:	bf08      	it	eq
20008496:	2320      	moveq	r3, #32
20008498:	4618      	mov	r0, r3
2000849a:	4770      	bx	lr
2000849c:	2300      	movs	r3, #0
2000849e:	e7e4      	b.n	2000846a <__hi0bits+0xa>

200084a0 <__lo0bits>:
200084a0:	6803      	ldr	r3, [r0, #0]
200084a2:	f013 0207 	ands.w	r2, r3, #7
200084a6:	4601      	mov	r1, r0
200084a8:	d00b      	beq.n	200084c2 <__lo0bits+0x22>
200084aa:	07da      	lsls	r2, r3, #31
200084ac:	d423      	bmi.n	200084f6 <__lo0bits+0x56>
200084ae:	0798      	lsls	r0, r3, #30
200084b0:	bf49      	itett	mi
200084b2:	085b      	lsrmi	r3, r3, #1
200084b4:	089b      	lsrpl	r3, r3, #2
200084b6:	2001      	movmi	r0, #1
200084b8:	600b      	strmi	r3, [r1, #0]
200084ba:	bf5c      	itt	pl
200084bc:	600b      	strpl	r3, [r1, #0]
200084be:	2002      	movpl	r0, #2
200084c0:	4770      	bx	lr
200084c2:	b298      	uxth	r0, r3
200084c4:	b9a8      	cbnz	r0, 200084f2 <__lo0bits+0x52>
200084c6:	0c1b      	lsrs	r3, r3, #16
200084c8:	2010      	movs	r0, #16
200084ca:	b2da      	uxtb	r2, r3
200084cc:	b90a      	cbnz	r2, 200084d2 <__lo0bits+0x32>
200084ce:	3008      	adds	r0, #8
200084d0:	0a1b      	lsrs	r3, r3, #8
200084d2:	071a      	lsls	r2, r3, #28
200084d4:	bf04      	itt	eq
200084d6:	091b      	lsreq	r3, r3, #4
200084d8:	3004      	addeq	r0, #4
200084da:	079a      	lsls	r2, r3, #30
200084dc:	bf04      	itt	eq
200084de:	089b      	lsreq	r3, r3, #2
200084e0:	3002      	addeq	r0, #2
200084e2:	07da      	lsls	r2, r3, #31
200084e4:	d403      	bmi.n	200084ee <__lo0bits+0x4e>
200084e6:	085b      	lsrs	r3, r3, #1
200084e8:	f100 0001 	add.w	r0, r0, #1
200084ec:	d005      	beq.n	200084fa <__lo0bits+0x5a>
200084ee:	600b      	str	r3, [r1, #0]
200084f0:	4770      	bx	lr
200084f2:	4610      	mov	r0, r2
200084f4:	e7e9      	b.n	200084ca <__lo0bits+0x2a>
200084f6:	2000      	movs	r0, #0
200084f8:	4770      	bx	lr
200084fa:	2020      	movs	r0, #32
200084fc:	4770      	bx	lr
	...

20008500 <__i2b>:
20008500:	b510      	push	{r4, lr}
20008502:	460c      	mov	r4, r1
20008504:	2101      	movs	r1, #1
20008506:	f7ff ff03 	bl	20008310 <_Balloc>
2000850a:	4602      	mov	r2, r0
2000850c:	b928      	cbnz	r0, 2000851a <__i2b+0x1a>
2000850e:	4b05      	ldr	r3, [pc, #20]	; (20008524 <__i2b+0x24>)
20008510:	4805      	ldr	r0, [pc, #20]	; (20008528 <__i2b+0x28>)
20008512:	f44f 71a0 	mov.w	r1, #320	; 0x140
20008516:	f000 fce1 	bl	20008edc <__assert_func>
2000851a:	2301      	movs	r3, #1
2000851c:	6144      	str	r4, [r0, #20]
2000851e:	6103      	str	r3, [r0, #16]
20008520:	bd10      	pop	{r4, pc}
20008522:	bf00      	nop
20008524:	200143f7 	.word	0x200143f7
20008528:	20014408 	.word	0x20014408

2000852c <__multiply>:
2000852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20008530:	4691      	mov	r9, r2
20008532:	690a      	ldr	r2, [r1, #16]
20008534:	f8d9 3010 	ldr.w	r3, [r9, #16]
20008538:	429a      	cmp	r2, r3
2000853a:	bfb8      	it	lt
2000853c:	460b      	movlt	r3, r1
2000853e:	460c      	mov	r4, r1
20008540:	bfbc      	itt	lt
20008542:	464c      	movlt	r4, r9
20008544:	4699      	movlt	r9, r3
20008546:	6927      	ldr	r7, [r4, #16]
20008548:	f8d9 a010 	ldr.w	sl, [r9, #16]
2000854c:	68a3      	ldr	r3, [r4, #8]
2000854e:	6861      	ldr	r1, [r4, #4]
20008550:	eb07 060a 	add.w	r6, r7, sl
20008554:	42b3      	cmp	r3, r6
20008556:	b085      	sub	sp, #20
20008558:	bfb8      	it	lt
2000855a:	3101      	addlt	r1, #1
2000855c:	f7ff fed8 	bl	20008310 <_Balloc>
20008560:	b930      	cbnz	r0, 20008570 <__multiply+0x44>
20008562:	4602      	mov	r2, r0
20008564:	4b44      	ldr	r3, [pc, #272]	; (20008678 <__multiply+0x14c>)
20008566:	4845      	ldr	r0, [pc, #276]	; (2000867c <__multiply+0x150>)
20008568:	f240 115d 	movw	r1, #349	; 0x15d
2000856c:	f000 fcb6 	bl	20008edc <__assert_func>
20008570:	f100 0514 	add.w	r5, r0, #20
20008574:	eb05 0886 	add.w	r8, r5, r6, lsl #2
20008578:	462b      	mov	r3, r5
2000857a:	2200      	movs	r2, #0
2000857c:	4543      	cmp	r3, r8
2000857e:	d321      	bcc.n	200085c4 <__multiply+0x98>
20008580:	f104 0314 	add.w	r3, r4, #20
20008584:	eb03 0787 	add.w	r7, r3, r7, lsl #2
20008588:	f109 0314 	add.w	r3, r9, #20
2000858c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
20008590:	9202      	str	r2, [sp, #8]
20008592:	1b3a      	subs	r2, r7, r4
20008594:	3a15      	subs	r2, #21
20008596:	f022 0203 	bic.w	r2, r2, #3
2000859a:	3204      	adds	r2, #4
2000859c:	f104 0115 	add.w	r1, r4, #21
200085a0:	428f      	cmp	r7, r1
200085a2:	bf38      	it	cc
200085a4:	2204      	movcc	r2, #4
200085a6:	9201      	str	r2, [sp, #4]
200085a8:	9a02      	ldr	r2, [sp, #8]
200085aa:	9303      	str	r3, [sp, #12]
200085ac:	429a      	cmp	r2, r3
200085ae:	d80c      	bhi.n	200085ca <__multiply+0x9e>
200085b0:	2e00      	cmp	r6, #0
200085b2:	dd03      	ble.n	200085bc <__multiply+0x90>
200085b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
200085b8:	2b00      	cmp	r3, #0
200085ba:	d05a      	beq.n	20008672 <__multiply+0x146>
200085bc:	6106      	str	r6, [r0, #16]
200085be:	b005      	add	sp, #20
200085c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
200085c4:	f843 2b04 	str.w	r2, [r3], #4
200085c8:	e7d8      	b.n	2000857c <__multiply+0x50>
200085ca:	f8b3 a000 	ldrh.w	sl, [r3]
200085ce:	f1ba 0f00 	cmp.w	sl, #0
200085d2:	d024      	beq.n	2000861e <__multiply+0xf2>
200085d4:	f104 0e14 	add.w	lr, r4, #20
200085d8:	46a9      	mov	r9, r5
200085da:	f04f 0c00 	mov.w	ip, #0
200085de:	f85e 2b04 	ldr.w	r2, [lr], #4
200085e2:	f8d9 1000 	ldr.w	r1, [r9]
200085e6:	fa1f fb82 	uxth.w	fp, r2
200085ea:	b289      	uxth	r1, r1
200085ec:	fb0a 110b 	mla	r1, sl, fp, r1
200085f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
200085f4:	f8d9 2000 	ldr.w	r2, [r9]
200085f8:	4461      	add	r1, ip
200085fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
200085fe:	fb0a c20b 	mla	r2, sl, fp, ip
20008602:	eb02 4211 	add.w	r2, r2, r1, lsr #16
20008606:	b289      	uxth	r1, r1
20008608:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
2000860c:	4577      	cmp	r7, lr
2000860e:	f849 1b04 	str.w	r1, [r9], #4
20008612:	ea4f 4c12 	mov.w	ip, r2, lsr #16
20008616:	d8e2      	bhi.n	200085de <__multiply+0xb2>
20008618:	9a01      	ldr	r2, [sp, #4]
2000861a:	f845 c002 	str.w	ip, [r5, r2]
2000861e:	9a03      	ldr	r2, [sp, #12]
20008620:	f8b2 9002 	ldrh.w	r9, [r2, #2]
20008624:	3304      	adds	r3, #4
20008626:	f1b9 0f00 	cmp.w	r9, #0
2000862a:	d020      	beq.n	2000866e <__multiply+0x142>
2000862c:	6829      	ldr	r1, [r5, #0]
2000862e:	f104 0c14 	add.w	ip, r4, #20
20008632:	46ae      	mov	lr, r5
20008634:	f04f 0a00 	mov.w	sl, #0
20008638:	f8bc b000 	ldrh.w	fp, [ip]
2000863c:	f8be 2002 	ldrh.w	r2, [lr, #2]
20008640:	fb09 220b 	mla	r2, r9, fp, r2
20008644:	4492      	add	sl, r2
20008646:	b289      	uxth	r1, r1
20008648:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
2000864c:	f84e 1b04 	str.w	r1, [lr], #4
20008650:	f85c 2b04 	ldr.w	r2, [ip], #4
20008654:	f8be 1000 	ldrh.w	r1, [lr]
20008658:	0c12      	lsrs	r2, r2, #16
2000865a:	fb09 1102 	mla	r1, r9, r2, r1
2000865e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
20008662:	4567      	cmp	r7, ip
20008664:	ea4f 4a11 	mov.w	sl, r1, lsr #16
20008668:	d8e6      	bhi.n	20008638 <__multiply+0x10c>
2000866a:	9a01      	ldr	r2, [sp, #4]
2000866c:	50a9      	str	r1, [r5, r2]
2000866e:	3504      	adds	r5, #4
20008670:	e79a      	b.n	200085a8 <__multiply+0x7c>
20008672:	3e01      	subs	r6, #1
20008674:	e79c      	b.n	200085b0 <__multiply+0x84>
20008676:	bf00      	nop
20008678:	200143f7 	.word	0x200143f7
2000867c:	20014408 	.word	0x20014408

20008680 <__pow5mult>:
20008680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
20008684:	4615      	mov	r5, r2
20008686:	f012 0203 	ands.w	r2, r2, #3
2000868a:	4606      	mov	r6, r0
2000868c:	460f      	mov	r7, r1
2000868e:	d007      	beq.n	200086a0 <__pow5mult+0x20>
20008690:	4c25      	ldr	r4, [pc, #148]	; (20008728 <__pow5mult+0xa8>)
20008692:	3a01      	subs	r2, #1
20008694:	2300      	movs	r3, #0
20008696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
2000869a:	f7ff fe9b 	bl	200083d4 <__multadd>
2000869e:	4607      	mov	r7, r0
200086a0:	10ad      	asrs	r5, r5, #2
200086a2:	d03d      	beq.n	20008720 <__pow5mult+0xa0>
200086a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
200086a6:	b97c      	cbnz	r4, 200086c8 <__pow5mult+0x48>
200086a8:	2010      	movs	r0, #16
200086aa:	f7ff fe1b 	bl	200082e4 <malloc>
200086ae:	4602      	mov	r2, r0
200086b0:	6270      	str	r0, [r6, #36]	; 0x24
200086b2:	b928      	cbnz	r0, 200086c0 <__pow5mult+0x40>
200086b4:	4b1d      	ldr	r3, [pc, #116]	; (2000872c <__pow5mult+0xac>)
200086b6:	481e      	ldr	r0, [pc, #120]	; (20008730 <__pow5mult+0xb0>)
200086b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
200086bc:	f000 fc0e 	bl	20008edc <__assert_func>
200086c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
200086c4:	6004      	str	r4, [r0, #0]
200086c6:	60c4      	str	r4, [r0, #12]
200086c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
200086cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
200086d0:	b94c      	cbnz	r4, 200086e6 <__pow5mult+0x66>
200086d2:	f240 2171 	movw	r1, #625	; 0x271
200086d6:	4630      	mov	r0, r6
200086d8:	f7ff ff12 	bl	20008500 <__i2b>
200086dc:	2300      	movs	r3, #0
200086de:	f8c8 0008 	str.w	r0, [r8, #8]
200086e2:	4604      	mov	r4, r0
200086e4:	6003      	str	r3, [r0, #0]
200086e6:	f04f 0900 	mov.w	r9, #0
200086ea:	07eb      	lsls	r3, r5, #31
200086ec:	d50a      	bpl.n	20008704 <__pow5mult+0x84>
200086ee:	4639      	mov	r1, r7
200086f0:	4622      	mov	r2, r4
200086f2:	4630      	mov	r0, r6
200086f4:	f7ff ff1a 	bl	2000852c <__multiply>
200086f8:	4639      	mov	r1, r7
200086fa:	4680      	mov	r8, r0
200086fc:	4630      	mov	r0, r6
200086fe:	f7ff fe47 	bl	20008390 <_Bfree>
20008702:	4647      	mov	r7, r8
20008704:	106d      	asrs	r5, r5, #1
20008706:	d00b      	beq.n	20008720 <__pow5mult+0xa0>
20008708:	6820      	ldr	r0, [r4, #0]
2000870a:	b938      	cbnz	r0, 2000871c <__pow5mult+0x9c>
2000870c:	4622      	mov	r2, r4
2000870e:	4621      	mov	r1, r4
20008710:	4630      	mov	r0, r6
20008712:	f7ff ff0b 	bl	2000852c <__multiply>
20008716:	6020      	str	r0, [r4, #0]
20008718:	f8c0 9000 	str.w	r9, [r0]
2000871c:	4604      	mov	r4, r0
2000871e:	e7e4      	b.n	200086ea <__pow5mult+0x6a>
20008720:	4638      	mov	r0, r7
20008722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
20008726:	bf00      	nop
20008728:	20014558 	.word	0x20014558
2000872c:	20014385 	.word	0x20014385
20008730:	20014408 	.word	0x20014408

20008734 <__lshift>:
20008734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20008738:	460c      	mov	r4, r1
2000873a:	6849      	ldr	r1, [r1, #4]
2000873c:	6923      	ldr	r3, [r4, #16]
2000873e:	eb03 1862 	add.w	r8, r3, r2, asr #5
20008742:	68a3      	ldr	r3, [r4, #8]
20008744:	4607      	mov	r7, r0
20008746:	4691      	mov	r9, r2
20008748:	ea4f 1a62 	mov.w	sl, r2, asr #5
2000874c:	f108 0601 	add.w	r6, r8, #1
20008750:	42b3      	cmp	r3, r6
20008752:	db0b      	blt.n	2000876c <__lshift+0x38>
20008754:	4638      	mov	r0, r7
20008756:	f7ff fddb 	bl	20008310 <_Balloc>
2000875a:	4605      	mov	r5, r0
2000875c:	b948      	cbnz	r0, 20008772 <__lshift+0x3e>
2000875e:	4602      	mov	r2, r0
20008760:	4b2a      	ldr	r3, [pc, #168]	; (2000880c <__lshift+0xd8>)
20008762:	482b      	ldr	r0, [pc, #172]	; (20008810 <__lshift+0xdc>)
20008764:	f240 11d9 	movw	r1, #473	; 0x1d9
20008768:	f000 fbb8 	bl	20008edc <__assert_func>
2000876c:	3101      	adds	r1, #1
2000876e:	005b      	lsls	r3, r3, #1
20008770:	e7ee      	b.n	20008750 <__lshift+0x1c>
20008772:	2300      	movs	r3, #0
20008774:	f100 0114 	add.w	r1, r0, #20
20008778:	f100 0210 	add.w	r2, r0, #16
2000877c:	4618      	mov	r0, r3
2000877e:	4553      	cmp	r3, sl
20008780:	db37      	blt.n	200087f2 <__lshift+0xbe>
20008782:	6920      	ldr	r0, [r4, #16]
20008784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
20008788:	f104 0314 	add.w	r3, r4, #20
2000878c:	f019 091f 	ands.w	r9, r9, #31
20008790:	eb01 018a 	add.w	r1, r1, sl, lsl #2
20008794:	eb03 0080 	add.w	r0, r3, r0, lsl #2
20008798:	d02f      	beq.n	200087fa <__lshift+0xc6>
2000879a:	f1c9 0e20 	rsb	lr, r9, #32
2000879e:	468a      	mov	sl, r1
200087a0:	f04f 0c00 	mov.w	ip, #0
200087a4:	681a      	ldr	r2, [r3, #0]
200087a6:	fa02 f209 	lsl.w	r2, r2, r9
200087aa:	ea42 020c 	orr.w	r2, r2, ip
200087ae:	f84a 2b04 	str.w	r2, [sl], #4
200087b2:	f853 2b04 	ldr.w	r2, [r3], #4
200087b6:	4298      	cmp	r0, r3
200087b8:	fa22 fc0e 	lsr.w	ip, r2, lr
200087bc:	d8f2      	bhi.n	200087a4 <__lshift+0x70>
200087be:	1b03      	subs	r3, r0, r4
200087c0:	3b15      	subs	r3, #21
200087c2:	f023 0303 	bic.w	r3, r3, #3
200087c6:	3304      	adds	r3, #4
200087c8:	f104 0215 	add.w	r2, r4, #21
200087cc:	4290      	cmp	r0, r2
200087ce:	bf38      	it	cc
200087d0:	2304      	movcc	r3, #4
200087d2:	f841 c003 	str.w	ip, [r1, r3]
200087d6:	f1bc 0f00 	cmp.w	ip, #0
200087da:	d001      	beq.n	200087e0 <__lshift+0xac>
200087dc:	f108 0602 	add.w	r6, r8, #2
200087e0:	3e01      	subs	r6, #1
200087e2:	4638      	mov	r0, r7
200087e4:	612e      	str	r6, [r5, #16]
200087e6:	4621      	mov	r1, r4
200087e8:	f7ff fdd2 	bl	20008390 <_Bfree>
200087ec:	4628      	mov	r0, r5
200087ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200087f2:	f842 0f04 	str.w	r0, [r2, #4]!
200087f6:	3301      	adds	r3, #1
200087f8:	e7c1      	b.n	2000877e <__lshift+0x4a>
200087fa:	3904      	subs	r1, #4
200087fc:	f853 2b04 	ldr.w	r2, [r3], #4
20008800:	f841 2f04 	str.w	r2, [r1, #4]!
20008804:	4298      	cmp	r0, r3
20008806:	d8f9      	bhi.n	200087fc <__lshift+0xc8>
20008808:	e7ea      	b.n	200087e0 <__lshift+0xac>
2000880a:	bf00      	nop
2000880c:	200143f7 	.word	0x200143f7
20008810:	20014408 	.word	0x20014408

20008814 <__mcmp>:
20008814:	b530      	push	{r4, r5, lr}
20008816:	6902      	ldr	r2, [r0, #16]
20008818:	690c      	ldr	r4, [r1, #16]
2000881a:	1b12      	subs	r2, r2, r4
2000881c:	d10e      	bne.n	2000883c <__mcmp+0x28>
2000881e:	f100 0314 	add.w	r3, r0, #20
20008822:	3114      	adds	r1, #20
20008824:	eb03 0084 	add.w	r0, r3, r4, lsl #2
20008828:	eb01 0184 	add.w	r1, r1, r4, lsl #2
2000882c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
20008830:	f851 4d04 	ldr.w	r4, [r1, #-4]!
20008834:	42a5      	cmp	r5, r4
20008836:	d003      	beq.n	20008840 <__mcmp+0x2c>
20008838:	d305      	bcc.n	20008846 <__mcmp+0x32>
2000883a:	2201      	movs	r2, #1
2000883c:	4610      	mov	r0, r2
2000883e:	bd30      	pop	{r4, r5, pc}
20008840:	4283      	cmp	r3, r0
20008842:	d3f3      	bcc.n	2000882c <__mcmp+0x18>
20008844:	e7fa      	b.n	2000883c <__mcmp+0x28>
20008846:	f04f 32ff 	mov.w	r2, #4294967295
2000884a:	e7f7      	b.n	2000883c <__mcmp+0x28>

2000884c <__mdiff>:
2000884c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
20008850:	460c      	mov	r4, r1
20008852:	4606      	mov	r6, r0
20008854:	4611      	mov	r1, r2
20008856:	4620      	mov	r0, r4
20008858:	4690      	mov	r8, r2
2000885a:	f7ff ffdb 	bl	20008814 <__mcmp>
2000885e:	1e05      	subs	r5, r0, #0
20008860:	d110      	bne.n	20008884 <__mdiff+0x38>
20008862:	4629      	mov	r1, r5
20008864:	4630      	mov	r0, r6
20008866:	f7ff fd53 	bl	20008310 <_Balloc>
2000886a:	b930      	cbnz	r0, 2000887a <__mdiff+0x2e>
2000886c:	4b3a      	ldr	r3, [pc, #232]	; (20008958 <__mdiff+0x10c>)
2000886e:	4602      	mov	r2, r0
20008870:	f240 2132 	movw	r1, #562	; 0x232
20008874:	4839      	ldr	r0, [pc, #228]	; (2000895c <__mdiff+0x110>)
20008876:	f000 fb31 	bl	20008edc <__assert_func>
2000887a:	2301      	movs	r3, #1
2000887c:	e9c0 3504 	strd	r3, r5, [r0, #16]
20008880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
20008884:	bfa4      	itt	ge
20008886:	4643      	movge	r3, r8
20008888:	46a0      	movge	r8, r4
2000888a:	4630      	mov	r0, r6
2000888c:	f8d8 1004 	ldr.w	r1, [r8, #4]
20008890:	bfa6      	itte	ge
20008892:	461c      	movge	r4, r3
20008894:	2500      	movge	r5, #0
20008896:	2501      	movlt	r5, #1
20008898:	f7ff fd3a 	bl	20008310 <_Balloc>
2000889c:	b920      	cbnz	r0, 200088a8 <__mdiff+0x5c>
2000889e:	4b2e      	ldr	r3, [pc, #184]	; (20008958 <__mdiff+0x10c>)
200088a0:	4602      	mov	r2, r0
200088a2:	f44f 7110 	mov.w	r1, #576	; 0x240
200088a6:	e7e5      	b.n	20008874 <__mdiff+0x28>
200088a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
200088ac:	6926      	ldr	r6, [r4, #16]
200088ae:	60c5      	str	r5, [r0, #12]
200088b0:	f104 0914 	add.w	r9, r4, #20
200088b4:	f108 0514 	add.w	r5, r8, #20
200088b8:	f100 0e14 	add.w	lr, r0, #20
200088bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
200088c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
200088c4:	f108 0210 	add.w	r2, r8, #16
200088c8:	46f2      	mov	sl, lr
200088ca:	2100      	movs	r1, #0
200088cc:	f859 3b04 	ldr.w	r3, [r9], #4
200088d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
200088d4:	fa1f f883 	uxth.w	r8, r3
200088d8:	fa11 f18b 	uxtah	r1, r1, fp
200088dc:	0c1b      	lsrs	r3, r3, #16
200088de:	eba1 0808 	sub.w	r8, r1, r8
200088e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
200088e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
200088ea:	fa1f f888 	uxth.w	r8, r8
200088ee:	1419      	asrs	r1, r3, #16
200088f0:	454e      	cmp	r6, r9
200088f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
200088f6:	f84a 3b04 	str.w	r3, [sl], #4
200088fa:	d8e7      	bhi.n	200088cc <__mdiff+0x80>
200088fc:	1b33      	subs	r3, r6, r4
200088fe:	3b15      	subs	r3, #21
20008900:	f023 0303 	bic.w	r3, r3, #3
20008904:	3304      	adds	r3, #4
20008906:	3415      	adds	r4, #21
20008908:	42a6      	cmp	r6, r4
2000890a:	bf38      	it	cc
2000890c:	2304      	movcc	r3, #4
2000890e:	441d      	add	r5, r3
20008910:	4473      	add	r3, lr
20008912:	469e      	mov	lr, r3
20008914:	462e      	mov	r6, r5
20008916:	4566      	cmp	r6, ip
20008918:	d30e      	bcc.n	20008938 <__mdiff+0xec>
2000891a:	f10c 0203 	add.w	r2, ip, #3
2000891e:	1b52      	subs	r2, r2, r5
20008920:	f022 0203 	bic.w	r2, r2, #3
20008924:	3d03      	subs	r5, #3
20008926:	45ac      	cmp	ip, r5
20008928:	bf38      	it	cc
2000892a:	2200      	movcc	r2, #0
2000892c:	441a      	add	r2, r3
2000892e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
20008932:	b17b      	cbz	r3, 20008954 <__mdiff+0x108>
20008934:	6107      	str	r7, [r0, #16]
20008936:	e7a3      	b.n	20008880 <__mdiff+0x34>
20008938:	f856 8b04 	ldr.w	r8, [r6], #4
2000893c:	fa11 f288 	uxtah	r2, r1, r8
20008940:	1414      	asrs	r4, r2, #16
20008942:	eb04 4418 	add.w	r4, r4, r8, lsr #16
20008946:	b292      	uxth	r2, r2
20008948:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
2000894c:	f84e 2b04 	str.w	r2, [lr], #4
20008950:	1421      	asrs	r1, r4, #16
20008952:	e7e0      	b.n	20008916 <__mdiff+0xca>
20008954:	3f01      	subs	r7, #1
20008956:	e7ea      	b.n	2000892e <__mdiff+0xe2>
20008958:	200143f7 	.word	0x200143f7
2000895c:	20014408 	.word	0x20014408

20008960 <__d2b>:
20008960:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
20008964:	4689      	mov	r9, r1
20008966:	2101      	movs	r1, #1
20008968:	ec57 6b10 	vmov	r6, r7, d0
2000896c:	4690      	mov	r8, r2
2000896e:	f7ff fccf 	bl	20008310 <_Balloc>
20008972:	4604      	mov	r4, r0
20008974:	b930      	cbnz	r0, 20008984 <__d2b+0x24>
20008976:	4602      	mov	r2, r0
20008978:	4b25      	ldr	r3, [pc, #148]	; (20008a10 <__d2b+0xb0>)
2000897a:	4826      	ldr	r0, [pc, #152]	; (20008a14 <__d2b+0xb4>)
2000897c:	f240 310a 	movw	r1, #778	; 0x30a
20008980:	f000 faac 	bl	20008edc <__assert_func>
20008984:	f3c7 550a 	ubfx	r5, r7, #20, #11
20008988:	f3c7 0313 	ubfx	r3, r7, #0, #20
2000898c:	bb35      	cbnz	r5, 200089dc <__d2b+0x7c>
2000898e:	2e00      	cmp	r6, #0
20008990:	9301      	str	r3, [sp, #4]
20008992:	d028      	beq.n	200089e6 <__d2b+0x86>
20008994:	4668      	mov	r0, sp
20008996:	9600      	str	r6, [sp, #0]
20008998:	f7ff fd82 	bl	200084a0 <__lo0bits>
2000899c:	9900      	ldr	r1, [sp, #0]
2000899e:	b300      	cbz	r0, 200089e2 <__d2b+0x82>
200089a0:	9a01      	ldr	r2, [sp, #4]
200089a2:	f1c0 0320 	rsb	r3, r0, #32
200089a6:	fa02 f303 	lsl.w	r3, r2, r3
200089aa:	430b      	orrs	r3, r1
200089ac:	40c2      	lsrs	r2, r0
200089ae:	6163      	str	r3, [r4, #20]
200089b0:	9201      	str	r2, [sp, #4]
200089b2:	9b01      	ldr	r3, [sp, #4]
200089b4:	61a3      	str	r3, [r4, #24]
200089b6:	2b00      	cmp	r3, #0
200089b8:	bf14      	ite	ne
200089ba:	2202      	movne	r2, #2
200089bc:	2201      	moveq	r2, #1
200089be:	6122      	str	r2, [r4, #16]
200089c0:	b1d5      	cbz	r5, 200089f8 <__d2b+0x98>
200089c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
200089c6:	4405      	add	r5, r0
200089c8:	f8c9 5000 	str.w	r5, [r9]
200089cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
200089d0:	f8c8 0000 	str.w	r0, [r8]
200089d4:	4620      	mov	r0, r4
200089d6:	b003      	add	sp, #12
200089d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
200089dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
200089e0:	e7d5      	b.n	2000898e <__d2b+0x2e>
200089e2:	6161      	str	r1, [r4, #20]
200089e4:	e7e5      	b.n	200089b2 <__d2b+0x52>
200089e6:	a801      	add	r0, sp, #4
200089e8:	f7ff fd5a 	bl	200084a0 <__lo0bits>
200089ec:	9b01      	ldr	r3, [sp, #4]
200089ee:	6163      	str	r3, [r4, #20]
200089f0:	2201      	movs	r2, #1
200089f2:	6122      	str	r2, [r4, #16]
200089f4:	3020      	adds	r0, #32
200089f6:	e7e3      	b.n	200089c0 <__d2b+0x60>
200089f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
200089fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
20008a00:	f8c9 0000 	str.w	r0, [r9]
20008a04:	6918      	ldr	r0, [r3, #16]
20008a06:	f7ff fd2b 	bl	20008460 <__hi0bits>
20008a0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
20008a0e:	e7df      	b.n	200089d0 <__d2b+0x70>
20008a10:	200143f7 	.word	0x200143f7
20008a14:	20014408 	.word	0x20014408

20008a18 <_calloc_r>:
20008a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
20008a1a:	fba1 2402 	umull	r2, r4, r1, r2
20008a1e:	b94c      	cbnz	r4, 20008a34 <_calloc_r+0x1c>
20008a20:	4611      	mov	r1, r2
20008a22:	9201      	str	r2, [sp, #4]
20008a24:	f000 f87a 	bl	20008b1c <_malloc_r>
20008a28:	9a01      	ldr	r2, [sp, #4]
20008a2a:	4605      	mov	r5, r0
20008a2c:	b930      	cbnz	r0, 20008a3c <_calloc_r+0x24>
20008a2e:	4628      	mov	r0, r5
20008a30:	b003      	add	sp, #12
20008a32:	bd30      	pop	{r4, r5, pc}
20008a34:	220c      	movs	r2, #12
20008a36:	6002      	str	r2, [r0, #0]
20008a38:	2500      	movs	r5, #0
20008a3a:	e7f8      	b.n	20008a2e <_calloc_r+0x16>
20008a3c:	4621      	mov	r1, r4
20008a3e:	f7fe f93f 	bl	20006cc0 <memset>
20008a42:	e7f4      	b.n	20008a2e <_calloc_r+0x16>

20008a44 <_free_r>:
20008a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
20008a46:	2900      	cmp	r1, #0
20008a48:	d044      	beq.n	20008ad4 <_free_r+0x90>
20008a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
20008a4e:	9001      	str	r0, [sp, #4]
20008a50:	2b00      	cmp	r3, #0
20008a52:	f1a1 0404 	sub.w	r4, r1, #4
20008a56:	bfb8      	it	lt
20008a58:	18e4      	addlt	r4, r4, r3
20008a5a:	f000 fa9b 	bl	20008f94 <__malloc_lock>
20008a5e:	4a1e      	ldr	r2, [pc, #120]	; (20008ad8 <_free_r+0x94>)
20008a60:	9801      	ldr	r0, [sp, #4]
20008a62:	6813      	ldr	r3, [r2, #0]
20008a64:	b933      	cbnz	r3, 20008a74 <_free_r+0x30>
20008a66:	6063      	str	r3, [r4, #4]
20008a68:	6014      	str	r4, [r2, #0]
20008a6a:	b003      	add	sp, #12
20008a6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
20008a70:	f000 ba96 	b.w	20008fa0 <__malloc_unlock>
20008a74:	42a3      	cmp	r3, r4
20008a76:	d908      	bls.n	20008a8a <_free_r+0x46>
20008a78:	6825      	ldr	r5, [r4, #0]
20008a7a:	1961      	adds	r1, r4, r5
20008a7c:	428b      	cmp	r3, r1
20008a7e:	bf01      	itttt	eq
20008a80:	6819      	ldreq	r1, [r3, #0]
20008a82:	685b      	ldreq	r3, [r3, #4]
20008a84:	1949      	addeq	r1, r1, r5
20008a86:	6021      	streq	r1, [r4, #0]
20008a88:	e7ed      	b.n	20008a66 <_free_r+0x22>
20008a8a:	461a      	mov	r2, r3
20008a8c:	685b      	ldr	r3, [r3, #4]
20008a8e:	b10b      	cbz	r3, 20008a94 <_free_r+0x50>
20008a90:	42a3      	cmp	r3, r4
20008a92:	d9fa      	bls.n	20008a8a <_free_r+0x46>
20008a94:	6811      	ldr	r1, [r2, #0]
20008a96:	1855      	adds	r5, r2, r1
20008a98:	42a5      	cmp	r5, r4
20008a9a:	d10b      	bne.n	20008ab4 <_free_r+0x70>
20008a9c:	6824      	ldr	r4, [r4, #0]
20008a9e:	4421      	add	r1, r4
20008aa0:	1854      	adds	r4, r2, r1
20008aa2:	42a3      	cmp	r3, r4
20008aa4:	6011      	str	r1, [r2, #0]
20008aa6:	d1e0      	bne.n	20008a6a <_free_r+0x26>
20008aa8:	681c      	ldr	r4, [r3, #0]
20008aaa:	685b      	ldr	r3, [r3, #4]
20008aac:	6053      	str	r3, [r2, #4]
20008aae:	4421      	add	r1, r4
20008ab0:	6011      	str	r1, [r2, #0]
20008ab2:	e7da      	b.n	20008a6a <_free_r+0x26>
20008ab4:	d902      	bls.n	20008abc <_free_r+0x78>
20008ab6:	230c      	movs	r3, #12
20008ab8:	6003      	str	r3, [r0, #0]
20008aba:	e7d6      	b.n	20008a6a <_free_r+0x26>
20008abc:	6825      	ldr	r5, [r4, #0]
20008abe:	1961      	adds	r1, r4, r5
20008ac0:	428b      	cmp	r3, r1
20008ac2:	bf04      	itt	eq
20008ac4:	6819      	ldreq	r1, [r3, #0]
20008ac6:	685b      	ldreq	r3, [r3, #4]
20008ac8:	6063      	str	r3, [r4, #4]
20008aca:	bf04      	itt	eq
20008acc:	1949      	addeq	r1, r1, r5
20008ace:	6021      	streq	r1, [r4, #0]
20008ad0:	6054      	str	r4, [r2, #4]
20008ad2:	e7ca      	b.n	20008a6a <_free_r+0x26>
20008ad4:	b003      	add	sp, #12
20008ad6:	bd30      	pop	{r4, r5, pc}
20008ad8:	20014afc 	.word	0x20014afc

20008adc <sbrk_aligned>:
20008adc:	b570      	push	{r4, r5, r6, lr}
20008ade:	4e0e      	ldr	r6, [pc, #56]	; (20008b18 <sbrk_aligned+0x3c>)
20008ae0:	460c      	mov	r4, r1
20008ae2:	6831      	ldr	r1, [r6, #0]
20008ae4:	4605      	mov	r5, r0
20008ae6:	b911      	cbnz	r1, 20008aee <sbrk_aligned+0x12>
20008ae8:	f000 f9e8 	bl	20008ebc <_sbrk_r>
20008aec:	6030      	str	r0, [r6, #0]
20008aee:	4621      	mov	r1, r4
20008af0:	4628      	mov	r0, r5
20008af2:	f000 f9e3 	bl	20008ebc <_sbrk_r>
20008af6:	1c43      	adds	r3, r0, #1
20008af8:	d00a      	beq.n	20008b10 <sbrk_aligned+0x34>
20008afa:	1cc4      	adds	r4, r0, #3
20008afc:	f024 0403 	bic.w	r4, r4, #3
20008b00:	42a0      	cmp	r0, r4
20008b02:	d007      	beq.n	20008b14 <sbrk_aligned+0x38>
20008b04:	1a21      	subs	r1, r4, r0
20008b06:	4628      	mov	r0, r5
20008b08:	f000 f9d8 	bl	20008ebc <_sbrk_r>
20008b0c:	3001      	adds	r0, #1
20008b0e:	d101      	bne.n	20008b14 <sbrk_aligned+0x38>
20008b10:	f04f 34ff 	mov.w	r4, #4294967295
20008b14:	4620      	mov	r0, r4
20008b16:	bd70      	pop	{r4, r5, r6, pc}
20008b18:	20014b00 	.word	0x20014b00

20008b1c <_malloc_r>:
20008b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20008b20:	1ccd      	adds	r5, r1, #3
20008b22:	f025 0503 	bic.w	r5, r5, #3
20008b26:	3508      	adds	r5, #8
20008b28:	2d0c      	cmp	r5, #12
20008b2a:	bf38      	it	cc
20008b2c:	250c      	movcc	r5, #12
20008b2e:	2d00      	cmp	r5, #0
20008b30:	4607      	mov	r7, r0
20008b32:	db01      	blt.n	20008b38 <_malloc_r+0x1c>
20008b34:	42a9      	cmp	r1, r5
20008b36:	d905      	bls.n	20008b44 <_malloc_r+0x28>
20008b38:	230c      	movs	r3, #12
20008b3a:	603b      	str	r3, [r7, #0]
20008b3c:	2600      	movs	r6, #0
20008b3e:	4630      	mov	r0, r6
20008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20008b44:	4e2e      	ldr	r6, [pc, #184]	; (20008c00 <_malloc_r+0xe4>)
20008b46:	f000 fa25 	bl	20008f94 <__malloc_lock>
20008b4a:	6833      	ldr	r3, [r6, #0]
20008b4c:	461c      	mov	r4, r3
20008b4e:	bb34      	cbnz	r4, 20008b9e <_malloc_r+0x82>
20008b50:	4629      	mov	r1, r5
20008b52:	4638      	mov	r0, r7
20008b54:	f7ff ffc2 	bl	20008adc <sbrk_aligned>
20008b58:	1c43      	adds	r3, r0, #1
20008b5a:	4604      	mov	r4, r0
20008b5c:	d14d      	bne.n	20008bfa <_malloc_r+0xde>
20008b5e:	6834      	ldr	r4, [r6, #0]
20008b60:	4626      	mov	r6, r4
20008b62:	2e00      	cmp	r6, #0
20008b64:	d140      	bne.n	20008be8 <_malloc_r+0xcc>
20008b66:	6823      	ldr	r3, [r4, #0]
20008b68:	4631      	mov	r1, r6
20008b6a:	4638      	mov	r0, r7
20008b6c:	eb04 0803 	add.w	r8, r4, r3
20008b70:	f000 f9a4 	bl	20008ebc <_sbrk_r>
20008b74:	4580      	cmp	r8, r0
20008b76:	d13a      	bne.n	20008bee <_malloc_r+0xd2>
20008b78:	6821      	ldr	r1, [r4, #0]
20008b7a:	3503      	adds	r5, #3
20008b7c:	1a6d      	subs	r5, r5, r1
20008b7e:	f025 0503 	bic.w	r5, r5, #3
20008b82:	3508      	adds	r5, #8
20008b84:	2d0c      	cmp	r5, #12
20008b86:	bf38      	it	cc
20008b88:	250c      	movcc	r5, #12
20008b8a:	4629      	mov	r1, r5
20008b8c:	4638      	mov	r0, r7
20008b8e:	f7ff ffa5 	bl	20008adc <sbrk_aligned>
20008b92:	3001      	adds	r0, #1
20008b94:	d02b      	beq.n	20008bee <_malloc_r+0xd2>
20008b96:	6823      	ldr	r3, [r4, #0]
20008b98:	442b      	add	r3, r5
20008b9a:	6023      	str	r3, [r4, #0]
20008b9c:	e00e      	b.n	20008bbc <_malloc_r+0xa0>
20008b9e:	6822      	ldr	r2, [r4, #0]
20008ba0:	1b52      	subs	r2, r2, r5
20008ba2:	d41e      	bmi.n	20008be2 <_malloc_r+0xc6>
20008ba4:	2a0b      	cmp	r2, #11
20008ba6:	d916      	bls.n	20008bd6 <_malloc_r+0xba>
20008ba8:	1961      	adds	r1, r4, r5
20008baa:	42a3      	cmp	r3, r4
20008bac:	6025      	str	r5, [r4, #0]
20008bae:	bf18      	it	ne
20008bb0:	6059      	strne	r1, [r3, #4]
20008bb2:	6863      	ldr	r3, [r4, #4]
20008bb4:	bf08      	it	eq
20008bb6:	6031      	streq	r1, [r6, #0]
20008bb8:	5162      	str	r2, [r4, r5]
20008bba:	604b      	str	r3, [r1, #4]
20008bbc:	4638      	mov	r0, r7
20008bbe:	f104 060b 	add.w	r6, r4, #11
20008bc2:	f000 f9ed 	bl	20008fa0 <__malloc_unlock>
20008bc6:	f026 0607 	bic.w	r6, r6, #7
20008bca:	1d23      	adds	r3, r4, #4
20008bcc:	1af2      	subs	r2, r6, r3
20008bce:	d0b6      	beq.n	20008b3e <_malloc_r+0x22>
20008bd0:	1b9b      	subs	r3, r3, r6
20008bd2:	50a3      	str	r3, [r4, r2]
20008bd4:	e7b3      	b.n	20008b3e <_malloc_r+0x22>
20008bd6:	6862      	ldr	r2, [r4, #4]
20008bd8:	42a3      	cmp	r3, r4
20008bda:	bf0c      	ite	eq
20008bdc:	6032      	streq	r2, [r6, #0]
20008bde:	605a      	strne	r2, [r3, #4]
20008be0:	e7ec      	b.n	20008bbc <_malloc_r+0xa0>
20008be2:	4623      	mov	r3, r4
20008be4:	6864      	ldr	r4, [r4, #4]
20008be6:	e7b2      	b.n	20008b4e <_malloc_r+0x32>
20008be8:	4634      	mov	r4, r6
20008bea:	6876      	ldr	r6, [r6, #4]
20008bec:	e7b9      	b.n	20008b62 <_malloc_r+0x46>
20008bee:	230c      	movs	r3, #12
20008bf0:	603b      	str	r3, [r7, #0]
20008bf2:	4638      	mov	r0, r7
20008bf4:	f000 f9d4 	bl	20008fa0 <__malloc_unlock>
20008bf8:	e7a1      	b.n	20008b3e <_malloc_r+0x22>
20008bfa:	6025      	str	r5, [r4, #0]
20008bfc:	e7de      	b.n	20008bbc <_malloc_r+0xa0>
20008bfe:	bf00      	nop
20008c00:	20014afc 	.word	0x20014afc

20008c04 <__ssputs_r>:
20008c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20008c08:	688e      	ldr	r6, [r1, #8]
20008c0a:	429e      	cmp	r6, r3
20008c0c:	4682      	mov	sl, r0
20008c0e:	460c      	mov	r4, r1
20008c10:	4690      	mov	r8, r2
20008c12:	461f      	mov	r7, r3
20008c14:	d838      	bhi.n	20008c88 <__ssputs_r+0x84>
20008c16:	898a      	ldrh	r2, [r1, #12]
20008c18:	f412 6f90 	tst.w	r2, #1152	; 0x480
20008c1c:	d032      	beq.n	20008c84 <__ssputs_r+0x80>
20008c1e:	6825      	ldr	r5, [r4, #0]
20008c20:	6909      	ldr	r1, [r1, #16]
20008c22:	eba5 0901 	sub.w	r9, r5, r1
20008c26:	6965      	ldr	r5, [r4, #20]
20008c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
20008c2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
20008c30:	3301      	adds	r3, #1
20008c32:	444b      	add	r3, r9
20008c34:	106d      	asrs	r5, r5, #1
20008c36:	429d      	cmp	r5, r3
20008c38:	bf38      	it	cc
20008c3a:	461d      	movcc	r5, r3
20008c3c:	0553      	lsls	r3, r2, #21
20008c3e:	d531      	bpl.n	20008ca4 <__ssputs_r+0xa0>
20008c40:	4629      	mov	r1, r5
20008c42:	f7ff ff6b 	bl	20008b1c <_malloc_r>
20008c46:	4606      	mov	r6, r0
20008c48:	b950      	cbnz	r0, 20008c60 <__ssputs_r+0x5c>
20008c4a:	230c      	movs	r3, #12
20008c4c:	f8ca 3000 	str.w	r3, [sl]
20008c50:	89a3      	ldrh	r3, [r4, #12]
20008c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20008c56:	81a3      	strh	r3, [r4, #12]
20008c58:	f04f 30ff 	mov.w	r0, #4294967295
20008c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20008c60:	6921      	ldr	r1, [r4, #16]
20008c62:	464a      	mov	r2, r9
20008c64:	f7ff fb46 	bl	200082f4 <memcpy>
20008c68:	89a3      	ldrh	r3, [r4, #12]
20008c6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
20008c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20008c72:	81a3      	strh	r3, [r4, #12]
20008c74:	6126      	str	r6, [r4, #16]
20008c76:	6165      	str	r5, [r4, #20]
20008c78:	444e      	add	r6, r9
20008c7a:	eba5 0509 	sub.w	r5, r5, r9
20008c7e:	6026      	str	r6, [r4, #0]
20008c80:	60a5      	str	r5, [r4, #8]
20008c82:	463e      	mov	r6, r7
20008c84:	42be      	cmp	r6, r7
20008c86:	d900      	bls.n	20008c8a <__ssputs_r+0x86>
20008c88:	463e      	mov	r6, r7
20008c8a:	6820      	ldr	r0, [r4, #0]
20008c8c:	4632      	mov	r2, r6
20008c8e:	4641      	mov	r1, r8
20008c90:	f000 f966 	bl	20008f60 <memmove>
20008c94:	68a3      	ldr	r3, [r4, #8]
20008c96:	1b9b      	subs	r3, r3, r6
20008c98:	60a3      	str	r3, [r4, #8]
20008c9a:	6823      	ldr	r3, [r4, #0]
20008c9c:	4433      	add	r3, r6
20008c9e:	6023      	str	r3, [r4, #0]
20008ca0:	2000      	movs	r0, #0
20008ca2:	e7db      	b.n	20008c5c <__ssputs_r+0x58>
20008ca4:	462a      	mov	r2, r5
20008ca6:	f000 f981 	bl	20008fac <_realloc_r>
20008caa:	4606      	mov	r6, r0
20008cac:	2800      	cmp	r0, #0
20008cae:	d1e1      	bne.n	20008c74 <__ssputs_r+0x70>
20008cb0:	6921      	ldr	r1, [r4, #16]
20008cb2:	4650      	mov	r0, sl
20008cb4:	f7ff fec6 	bl	20008a44 <_free_r>
20008cb8:	e7c7      	b.n	20008c4a <__ssputs_r+0x46>
	...

20008cbc <_svfiprintf_r>:
20008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20008cc0:	4698      	mov	r8, r3
20008cc2:	898b      	ldrh	r3, [r1, #12]
20008cc4:	061b      	lsls	r3, r3, #24
20008cc6:	b09d      	sub	sp, #116	; 0x74
20008cc8:	4607      	mov	r7, r0
20008cca:	460d      	mov	r5, r1
20008ccc:	4614      	mov	r4, r2
20008cce:	d50e      	bpl.n	20008cee <_svfiprintf_r+0x32>
20008cd0:	690b      	ldr	r3, [r1, #16]
20008cd2:	b963      	cbnz	r3, 20008cee <_svfiprintf_r+0x32>
20008cd4:	2140      	movs	r1, #64	; 0x40
20008cd6:	f7ff ff21 	bl	20008b1c <_malloc_r>
20008cda:	6028      	str	r0, [r5, #0]
20008cdc:	6128      	str	r0, [r5, #16]
20008cde:	b920      	cbnz	r0, 20008cea <_svfiprintf_r+0x2e>
20008ce0:	230c      	movs	r3, #12
20008ce2:	603b      	str	r3, [r7, #0]
20008ce4:	f04f 30ff 	mov.w	r0, #4294967295
20008ce8:	e0d1      	b.n	20008e8e <_svfiprintf_r+0x1d2>
20008cea:	2340      	movs	r3, #64	; 0x40
20008cec:	616b      	str	r3, [r5, #20]
20008cee:	2300      	movs	r3, #0
20008cf0:	9309      	str	r3, [sp, #36]	; 0x24
20008cf2:	2320      	movs	r3, #32
20008cf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
20008cf8:	f8cd 800c 	str.w	r8, [sp, #12]
20008cfc:	2330      	movs	r3, #48	; 0x30
20008cfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 20008ea8 <_svfiprintf_r+0x1ec>
20008d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
20008d06:	f04f 0901 	mov.w	r9, #1
20008d0a:	4623      	mov	r3, r4
20008d0c:	469a      	mov	sl, r3
20008d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
20008d12:	b10a      	cbz	r2, 20008d18 <_svfiprintf_r+0x5c>
20008d14:	2a25      	cmp	r2, #37	; 0x25
20008d16:	d1f9      	bne.n	20008d0c <_svfiprintf_r+0x50>
20008d18:	ebba 0b04 	subs.w	fp, sl, r4
20008d1c:	d00b      	beq.n	20008d36 <_svfiprintf_r+0x7a>
20008d1e:	465b      	mov	r3, fp
20008d20:	4622      	mov	r2, r4
20008d22:	4629      	mov	r1, r5
20008d24:	4638      	mov	r0, r7
20008d26:	f7ff ff6d 	bl	20008c04 <__ssputs_r>
20008d2a:	3001      	adds	r0, #1
20008d2c:	f000 80aa 	beq.w	20008e84 <_svfiprintf_r+0x1c8>
20008d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
20008d32:	445a      	add	r2, fp
20008d34:	9209      	str	r2, [sp, #36]	; 0x24
20008d36:	f89a 3000 	ldrb.w	r3, [sl]
20008d3a:	2b00      	cmp	r3, #0
20008d3c:	f000 80a2 	beq.w	20008e84 <_svfiprintf_r+0x1c8>
20008d40:	2300      	movs	r3, #0
20008d42:	f04f 32ff 	mov.w	r2, #4294967295
20008d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
20008d4a:	f10a 0a01 	add.w	sl, sl, #1
20008d4e:	9304      	str	r3, [sp, #16]
20008d50:	9307      	str	r3, [sp, #28]
20008d52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
20008d56:	931a      	str	r3, [sp, #104]	; 0x68
20008d58:	4654      	mov	r4, sl
20008d5a:	2205      	movs	r2, #5
20008d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
20008d60:	4851      	ldr	r0, [pc, #324]	; (20008ea8 <_svfiprintf_r+0x1ec>)
20008d62:	f7f7 fa45 	bl	200001f0 <memchr>
20008d66:	9a04      	ldr	r2, [sp, #16]
20008d68:	b9d8      	cbnz	r0, 20008da2 <_svfiprintf_r+0xe6>
20008d6a:	06d0      	lsls	r0, r2, #27
20008d6c:	bf44      	itt	mi
20008d6e:	2320      	movmi	r3, #32
20008d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
20008d74:	0711      	lsls	r1, r2, #28
20008d76:	bf44      	itt	mi
20008d78:	232b      	movmi	r3, #43	; 0x2b
20008d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
20008d7e:	f89a 3000 	ldrb.w	r3, [sl]
20008d82:	2b2a      	cmp	r3, #42	; 0x2a
20008d84:	d015      	beq.n	20008db2 <_svfiprintf_r+0xf6>
20008d86:	9a07      	ldr	r2, [sp, #28]
20008d88:	4654      	mov	r4, sl
20008d8a:	2000      	movs	r0, #0
20008d8c:	f04f 0c0a 	mov.w	ip, #10
20008d90:	4621      	mov	r1, r4
20008d92:	f811 3b01 	ldrb.w	r3, [r1], #1
20008d96:	3b30      	subs	r3, #48	; 0x30
20008d98:	2b09      	cmp	r3, #9
20008d9a:	d94e      	bls.n	20008e3a <_svfiprintf_r+0x17e>
20008d9c:	b1b0      	cbz	r0, 20008dcc <_svfiprintf_r+0x110>
20008d9e:	9207      	str	r2, [sp, #28]
20008da0:	e014      	b.n	20008dcc <_svfiprintf_r+0x110>
20008da2:	eba0 0308 	sub.w	r3, r0, r8
20008da6:	fa09 f303 	lsl.w	r3, r9, r3
20008daa:	4313      	orrs	r3, r2
20008dac:	9304      	str	r3, [sp, #16]
20008dae:	46a2      	mov	sl, r4
20008db0:	e7d2      	b.n	20008d58 <_svfiprintf_r+0x9c>
20008db2:	9b03      	ldr	r3, [sp, #12]
20008db4:	1d19      	adds	r1, r3, #4
20008db6:	681b      	ldr	r3, [r3, #0]
20008db8:	9103      	str	r1, [sp, #12]
20008dba:	2b00      	cmp	r3, #0
20008dbc:	bfbb      	ittet	lt
20008dbe:	425b      	neglt	r3, r3
20008dc0:	f042 0202 	orrlt.w	r2, r2, #2
20008dc4:	9307      	strge	r3, [sp, #28]
20008dc6:	9307      	strlt	r3, [sp, #28]
20008dc8:	bfb8      	it	lt
20008dca:	9204      	strlt	r2, [sp, #16]
20008dcc:	7823      	ldrb	r3, [r4, #0]
20008dce:	2b2e      	cmp	r3, #46	; 0x2e
20008dd0:	d10c      	bne.n	20008dec <_svfiprintf_r+0x130>
20008dd2:	7863      	ldrb	r3, [r4, #1]
20008dd4:	2b2a      	cmp	r3, #42	; 0x2a
20008dd6:	d135      	bne.n	20008e44 <_svfiprintf_r+0x188>
20008dd8:	9b03      	ldr	r3, [sp, #12]
20008dda:	1d1a      	adds	r2, r3, #4
20008ddc:	681b      	ldr	r3, [r3, #0]
20008dde:	9203      	str	r2, [sp, #12]
20008de0:	2b00      	cmp	r3, #0
20008de2:	bfb8      	it	lt
20008de4:	f04f 33ff 	movlt.w	r3, #4294967295
20008de8:	3402      	adds	r4, #2
20008dea:	9305      	str	r3, [sp, #20]
20008dec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 20008eb8 <_svfiprintf_r+0x1fc>
20008df0:	7821      	ldrb	r1, [r4, #0]
20008df2:	2203      	movs	r2, #3
20008df4:	4650      	mov	r0, sl
20008df6:	f7f7 f9fb 	bl	200001f0 <memchr>
20008dfa:	b140      	cbz	r0, 20008e0e <_svfiprintf_r+0x152>
20008dfc:	2340      	movs	r3, #64	; 0x40
20008dfe:	eba0 000a 	sub.w	r0, r0, sl
20008e02:	fa03 f000 	lsl.w	r0, r3, r0
20008e06:	9b04      	ldr	r3, [sp, #16]
20008e08:	4303      	orrs	r3, r0
20008e0a:	3401      	adds	r4, #1
20008e0c:	9304      	str	r3, [sp, #16]
20008e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
20008e12:	4826      	ldr	r0, [pc, #152]	; (20008eac <_svfiprintf_r+0x1f0>)
20008e14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
20008e18:	2206      	movs	r2, #6
20008e1a:	f7f7 f9e9 	bl	200001f0 <memchr>
20008e1e:	2800      	cmp	r0, #0
20008e20:	d038      	beq.n	20008e94 <_svfiprintf_r+0x1d8>
20008e22:	4b23      	ldr	r3, [pc, #140]	; (20008eb0 <_svfiprintf_r+0x1f4>)
20008e24:	bb1b      	cbnz	r3, 20008e6e <_svfiprintf_r+0x1b2>
20008e26:	9b03      	ldr	r3, [sp, #12]
20008e28:	3307      	adds	r3, #7
20008e2a:	f023 0307 	bic.w	r3, r3, #7
20008e2e:	3308      	adds	r3, #8
20008e30:	9303      	str	r3, [sp, #12]
20008e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
20008e34:	4433      	add	r3, r6
20008e36:	9309      	str	r3, [sp, #36]	; 0x24
20008e38:	e767      	b.n	20008d0a <_svfiprintf_r+0x4e>
20008e3a:	fb0c 3202 	mla	r2, ip, r2, r3
20008e3e:	460c      	mov	r4, r1
20008e40:	2001      	movs	r0, #1
20008e42:	e7a5      	b.n	20008d90 <_svfiprintf_r+0xd4>
20008e44:	2300      	movs	r3, #0
20008e46:	3401      	adds	r4, #1
20008e48:	9305      	str	r3, [sp, #20]
20008e4a:	4619      	mov	r1, r3
20008e4c:	f04f 0c0a 	mov.w	ip, #10
20008e50:	4620      	mov	r0, r4
20008e52:	f810 2b01 	ldrb.w	r2, [r0], #1
20008e56:	3a30      	subs	r2, #48	; 0x30
20008e58:	2a09      	cmp	r2, #9
20008e5a:	d903      	bls.n	20008e64 <_svfiprintf_r+0x1a8>
20008e5c:	2b00      	cmp	r3, #0
20008e5e:	d0c5      	beq.n	20008dec <_svfiprintf_r+0x130>
20008e60:	9105      	str	r1, [sp, #20]
20008e62:	e7c3      	b.n	20008dec <_svfiprintf_r+0x130>
20008e64:	fb0c 2101 	mla	r1, ip, r1, r2
20008e68:	4604      	mov	r4, r0
20008e6a:	2301      	movs	r3, #1
20008e6c:	e7f0      	b.n	20008e50 <_svfiprintf_r+0x194>
20008e6e:	ab03      	add	r3, sp, #12
20008e70:	9300      	str	r3, [sp, #0]
20008e72:	462a      	mov	r2, r5
20008e74:	4b0f      	ldr	r3, [pc, #60]	; (20008eb4 <_svfiprintf_r+0x1f8>)
20008e76:	a904      	add	r1, sp, #16
20008e78:	4638      	mov	r0, r7
20008e7a:	f7fd ffc9 	bl	20006e10 <_printf_float>
20008e7e:	1c42      	adds	r2, r0, #1
20008e80:	4606      	mov	r6, r0
20008e82:	d1d6      	bne.n	20008e32 <_svfiprintf_r+0x176>
20008e84:	89ab      	ldrh	r3, [r5, #12]
20008e86:	065b      	lsls	r3, r3, #25
20008e88:	f53f af2c 	bmi.w	20008ce4 <_svfiprintf_r+0x28>
20008e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
20008e8e:	b01d      	add	sp, #116	; 0x74
20008e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20008e94:	ab03      	add	r3, sp, #12
20008e96:	9300      	str	r3, [sp, #0]
20008e98:	462a      	mov	r2, r5
20008e9a:	4b06      	ldr	r3, [pc, #24]	; (20008eb4 <_svfiprintf_r+0x1f8>)
20008e9c:	a904      	add	r1, sp, #16
20008e9e:	4638      	mov	r0, r7
20008ea0:	f7fe fa5a 	bl	20007358 <_printf_i>
20008ea4:	e7eb      	b.n	20008e7e <_svfiprintf_r+0x1c2>
20008ea6:	bf00      	nop
20008ea8:	20014564 	.word	0x20014564
20008eac:	2001456e 	.word	0x2001456e
20008eb0:	20006e11 	.word	0x20006e11
20008eb4:	20008c05 	.word	0x20008c05
20008eb8:	2001456a 	.word	0x2001456a

20008ebc <_sbrk_r>:
20008ebc:	b538      	push	{r3, r4, r5, lr}
20008ebe:	4d06      	ldr	r5, [pc, #24]	; (20008ed8 <_sbrk_r+0x1c>)
20008ec0:	2300      	movs	r3, #0
20008ec2:	4604      	mov	r4, r0
20008ec4:	4608      	mov	r0, r1
20008ec6:	602b      	str	r3, [r5, #0]
20008ec8:	f7fb fb9c 	bl	20004604 <_sbrk>
20008ecc:	1c43      	adds	r3, r0, #1
20008ece:	d102      	bne.n	20008ed6 <_sbrk_r+0x1a>
20008ed0:	682b      	ldr	r3, [r5, #0]
20008ed2:	b103      	cbz	r3, 20008ed6 <_sbrk_r+0x1a>
20008ed4:	6023      	str	r3, [r4, #0]
20008ed6:	bd38      	pop	{r3, r4, r5, pc}
20008ed8:	20014b04 	.word	0x20014b04

20008edc <__assert_func>:
20008edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
20008ede:	4614      	mov	r4, r2
20008ee0:	461a      	mov	r2, r3
20008ee2:	4b09      	ldr	r3, [pc, #36]	; (20008f08 <__assert_func+0x2c>)
20008ee4:	681b      	ldr	r3, [r3, #0]
20008ee6:	4605      	mov	r5, r0
20008ee8:	68d8      	ldr	r0, [r3, #12]
20008eea:	b14c      	cbz	r4, 20008f00 <__assert_func+0x24>
20008eec:	4b07      	ldr	r3, [pc, #28]	; (20008f0c <__assert_func+0x30>)
20008eee:	9100      	str	r1, [sp, #0]
20008ef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
20008ef4:	4906      	ldr	r1, [pc, #24]	; (20008f10 <__assert_func+0x34>)
20008ef6:	462b      	mov	r3, r5
20008ef8:	f000 f80e 	bl	20008f18 <fiprintf>
20008efc:	f000 faac 	bl	20009458 <abort>
20008f00:	4b04      	ldr	r3, [pc, #16]	; (20008f14 <__assert_func+0x38>)
20008f02:	461c      	mov	r4, r3
20008f04:	e7f3      	b.n	20008eee <__assert_func+0x12>
20008f06:	bf00      	nop
20008f08:	20014788 	.word	0x20014788
20008f0c:	20014575 	.word	0x20014575
20008f10:	20014582 	.word	0x20014582
20008f14:	200145b0 	.word	0x200145b0

20008f18 <fiprintf>:
20008f18:	b40e      	push	{r1, r2, r3}
20008f1a:	b503      	push	{r0, r1, lr}
20008f1c:	4601      	mov	r1, r0
20008f1e:	ab03      	add	r3, sp, #12
20008f20:	4805      	ldr	r0, [pc, #20]	; (20008f38 <fiprintf+0x20>)
20008f22:	f853 2b04 	ldr.w	r2, [r3], #4
20008f26:	6800      	ldr	r0, [r0, #0]
20008f28:	9301      	str	r3, [sp, #4]
20008f2a:	f000 f897 	bl	2000905c <_vfiprintf_r>
20008f2e:	b002      	add	sp, #8
20008f30:	f85d eb04 	ldr.w	lr, [sp], #4
20008f34:	b003      	add	sp, #12
20008f36:	4770      	bx	lr
20008f38:	20014788 	.word	0x20014788

20008f3c <__ascii_mbtowc>:
20008f3c:	b082      	sub	sp, #8
20008f3e:	b901      	cbnz	r1, 20008f42 <__ascii_mbtowc+0x6>
20008f40:	a901      	add	r1, sp, #4
20008f42:	b142      	cbz	r2, 20008f56 <__ascii_mbtowc+0x1a>
20008f44:	b14b      	cbz	r3, 20008f5a <__ascii_mbtowc+0x1e>
20008f46:	7813      	ldrb	r3, [r2, #0]
20008f48:	600b      	str	r3, [r1, #0]
20008f4a:	7812      	ldrb	r2, [r2, #0]
20008f4c:	1e10      	subs	r0, r2, #0
20008f4e:	bf18      	it	ne
20008f50:	2001      	movne	r0, #1
20008f52:	b002      	add	sp, #8
20008f54:	4770      	bx	lr
20008f56:	4610      	mov	r0, r2
20008f58:	e7fb      	b.n	20008f52 <__ascii_mbtowc+0x16>
20008f5a:	f06f 0001 	mvn.w	r0, #1
20008f5e:	e7f8      	b.n	20008f52 <__ascii_mbtowc+0x16>

20008f60 <memmove>:
20008f60:	4288      	cmp	r0, r1
20008f62:	b510      	push	{r4, lr}
20008f64:	eb01 0402 	add.w	r4, r1, r2
20008f68:	d902      	bls.n	20008f70 <memmove+0x10>
20008f6a:	4284      	cmp	r4, r0
20008f6c:	4623      	mov	r3, r4
20008f6e:	d807      	bhi.n	20008f80 <memmove+0x20>
20008f70:	1e43      	subs	r3, r0, #1
20008f72:	42a1      	cmp	r1, r4
20008f74:	d008      	beq.n	20008f88 <memmove+0x28>
20008f76:	f811 2b01 	ldrb.w	r2, [r1], #1
20008f7a:	f803 2f01 	strb.w	r2, [r3, #1]!
20008f7e:	e7f8      	b.n	20008f72 <memmove+0x12>
20008f80:	4402      	add	r2, r0
20008f82:	4601      	mov	r1, r0
20008f84:	428a      	cmp	r2, r1
20008f86:	d100      	bne.n	20008f8a <memmove+0x2a>
20008f88:	bd10      	pop	{r4, pc}
20008f8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
20008f8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
20008f92:	e7f7      	b.n	20008f84 <memmove+0x24>

20008f94 <__malloc_lock>:
20008f94:	4801      	ldr	r0, [pc, #4]	; (20008f9c <__malloc_lock+0x8>)
20008f96:	f000 bc1f 	b.w	200097d8 <__retarget_lock_acquire_recursive>
20008f9a:	bf00      	nop
20008f9c:	20014b08 	.word	0x20014b08

20008fa0 <__malloc_unlock>:
20008fa0:	4801      	ldr	r0, [pc, #4]	; (20008fa8 <__malloc_unlock+0x8>)
20008fa2:	f000 bc1a 	b.w	200097da <__retarget_lock_release_recursive>
20008fa6:	bf00      	nop
20008fa8:	20014b08 	.word	0x20014b08

20008fac <_realloc_r>:
20008fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20008fb0:	4680      	mov	r8, r0
20008fb2:	4614      	mov	r4, r2
20008fb4:	460e      	mov	r6, r1
20008fb6:	b921      	cbnz	r1, 20008fc2 <_realloc_r+0x16>
20008fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
20008fbc:	4611      	mov	r1, r2
20008fbe:	f7ff bdad 	b.w	20008b1c <_malloc_r>
20008fc2:	b92a      	cbnz	r2, 20008fd0 <_realloc_r+0x24>
20008fc4:	f7ff fd3e 	bl	20008a44 <_free_r>
20008fc8:	4625      	mov	r5, r4
20008fca:	4628      	mov	r0, r5
20008fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20008fd0:	f000 fc6a 	bl	200098a8 <_malloc_usable_size_r>
20008fd4:	4284      	cmp	r4, r0
20008fd6:	4607      	mov	r7, r0
20008fd8:	d802      	bhi.n	20008fe0 <_realloc_r+0x34>
20008fda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
20008fde:	d812      	bhi.n	20009006 <_realloc_r+0x5a>
20008fe0:	4621      	mov	r1, r4
20008fe2:	4640      	mov	r0, r8
20008fe4:	f7ff fd9a 	bl	20008b1c <_malloc_r>
20008fe8:	4605      	mov	r5, r0
20008fea:	2800      	cmp	r0, #0
20008fec:	d0ed      	beq.n	20008fca <_realloc_r+0x1e>
20008fee:	42bc      	cmp	r4, r7
20008ff0:	4622      	mov	r2, r4
20008ff2:	4631      	mov	r1, r6
20008ff4:	bf28      	it	cs
20008ff6:	463a      	movcs	r2, r7
20008ff8:	f7ff f97c 	bl	200082f4 <memcpy>
20008ffc:	4631      	mov	r1, r6
20008ffe:	4640      	mov	r0, r8
20009000:	f7ff fd20 	bl	20008a44 <_free_r>
20009004:	e7e1      	b.n	20008fca <_realloc_r+0x1e>
20009006:	4635      	mov	r5, r6
20009008:	e7df      	b.n	20008fca <_realloc_r+0x1e>

2000900a <__sfputc_r>:
2000900a:	6893      	ldr	r3, [r2, #8]
2000900c:	3b01      	subs	r3, #1
2000900e:	2b00      	cmp	r3, #0
20009010:	b410      	push	{r4}
20009012:	6093      	str	r3, [r2, #8]
20009014:	da08      	bge.n	20009028 <__sfputc_r+0x1e>
20009016:	6994      	ldr	r4, [r2, #24]
20009018:	42a3      	cmp	r3, r4
2000901a:	db01      	blt.n	20009020 <__sfputc_r+0x16>
2000901c:	290a      	cmp	r1, #10
2000901e:	d103      	bne.n	20009028 <__sfputc_r+0x1e>
20009020:	f85d 4b04 	ldr.w	r4, [sp], #4
20009024:	f000 b94a 	b.w	200092bc <__swbuf_r>
20009028:	6813      	ldr	r3, [r2, #0]
2000902a:	1c58      	adds	r0, r3, #1
2000902c:	6010      	str	r0, [r2, #0]
2000902e:	7019      	strb	r1, [r3, #0]
20009030:	4608      	mov	r0, r1
20009032:	f85d 4b04 	ldr.w	r4, [sp], #4
20009036:	4770      	bx	lr

20009038 <__sfputs_r>:
20009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000903a:	4606      	mov	r6, r0
2000903c:	460f      	mov	r7, r1
2000903e:	4614      	mov	r4, r2
20009040:	18d5      	adds	r5, r2, r3
20009042:	42ac      	cmp	r4, r5
20009044:	d101      	bne.n	2000904a <__sfputs_r+0x12>
20009046:	2000      	movs	r0, #0
20009048:	e007      	b.n	2000905a <__sfputs_r+0x22>
2000904a:	f814 1b01 	ldrb.w	r1, [r4], #1
2000904e:	463a      	mov	r2, r7
20009050:	4630      	mov	r0, r6
20009052:	f7ff ffda 	bl	2000900a <__sfputc_r>
20009056:	1c43      	adds	r3, r0, #1
20009058:	d1f3      	bne.n	20009042 <__sfputs_r+0xa>
2000905a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

2000905c <_vfiprintf_r>:
2000905c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20009060:	460d      	mov	r5, r1
20009062:	b09d      	sub	sp, #116	; 0x74
20009064:	4614      	mov	r4, r2
20009066:	4698      	mov	r8, r3
20009068:	4606      	mov	r6, r0
2000906a:	b118      	cbz	r0, 20009074 <_vfiprintf_r+0x18>
2000906c:	6983      	ldr	r3, [r0, #24]
2000906e:	b90b      	cbnz	r3, 20009074 <_vfiprintf_r+0x18>
20009070:	f000 fb14 	bl	2000969c <__sinit>
20009074:	4b89      	ldr	r3, [pc, #548]	; (2000929c <_vfiprintf_r+0x240>)
20009076:	429d      	cmp	r5, r3
20009078:	d11b      	bne.n	200090b2 <_vfiprintf_r+0x56>
2000907a:	6875      	ldr	r5, [r6, #4]
2000907c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
2000907e:	07d9      	lsls	r1, r3, #31
20009080:	d405      	bmi.n	2000908e <_vfiprintf_r+0x32>
20009082:	89ab      	ldrh	r3, [r5, #12]
20009084:	059a      	lsls	r2, r3, #22
20009086:	d402      	bmi.n	2000908e <_vfiprintf_r+0x32>
20009088:	6da8      	ldr	r0, [r5, #88]	; 0x58
2000908a:	f000 fba5 	bl	200097d8 <__retarget_lock_acquire_recursive>
2000908e:	89ab      	ldrh	r3, [r5, #12]
20009090:	071b      	lsls	r3, r3, #28
20009092:	d501      	bpl.n	20009098 <_vfiprintf_r+0x3c>
20009094:	692b      	ldr	r3, [r5, #16]
20009096:	b9eb      	cbnz	r3, 200090d4 <_vfiprintf_r+0x78>
20009098:	4629      	mov	r1, r5
2000909a:	4630      	mov	r0, r6
2000909c:	f000 f96e 	bl	2000937c <__swsetup_r>
200090a0:	b1c0      	cbz	r0, 200090d4 <_vfiprintf_r+0x78>
200090a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
200090a4:	07dc      	lsls	r4, r3, #31
200090a6:	d50e      	bpl.n	200090c6 <_vfiprintf_r+0x6a>
200090a8:	f04f 30ff 	mov.w	r0, #4294967295
200090ac:	b01d      	add	sp, #116	; 0x74
200090ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
200090b2:	4b7b      	ldr	r3, [pc, #492]	; (200092a0 <_vfiprintf_r+0x244>)
200090b4:	429d      	cmp	r5, r3
200090b6:	d101      	bne.n	200090bc <_vfiprintf_r+0x60>
200090b8:	68b5      	ldr	r5, [r6, #8]
200090ba:	e7df      	b.n	2000907c <_vfiprintf_r+0x20>
200090bc:	4b79      	ldr	r3, [pc, #484]	; (200092a4 <_vfiprintf_r+0x248>)
200090be:	429d      	cmp	r5, r3
200090c0:	bf08      	it	eq
200090c2:	68f5      	ldreq	r5, [r6, #12]
200090c4:	e7da      	b.n	2000907c <_vfiprintf_r+0x20>
200090c6:	89ab      	ldrh	r3, [r5, #12]
200090c8:	0598      	lsls	r0, r3, #22
200090ca:	d4ed      	bmi.n	200090a8 <_vfiprintf_r+0x4c>
200090cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
200090ce:	f000 fb84 	bl	200097da <__retarget_lock_release_recursive>
200090d2:	e7e9      	b.n	200090a8 <_vfiprintf_r+0x4c>
200090d4:	2300      	movs	r3, #0
200090d6:	9309      	str	r3, [sp, #36]	; 0x24
200090d8:	2320      	movs	r3, #32
200090da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
200090de:	f8cd 800c 	str.w	r8, [sp, #12]
200090e2:	2330      	movs	r3, #48	; 0x30
200090e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 200092a8 <_vfiprintf_r+0x24c>
200090e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
200090ec:	f04f 0901 	mov.w	r9, #1
200090f0:	4623      	mov	r3, r4
200090f2:	469a      	mov	sl, r3
200090f4:	f813 2b01 	ldrb.w	r2, [r3], #1
200090f8:	b10a      	cbz	r2, 200090fe <_vfiprintf_r+0xa2>
200090fa:	2a25      	cmp	r2, #37	; 0x25
200090fc:	d1f9      	bne.n	200090f2 <_vfiprintf_r+0x96>
200090fe:	ebba 0b04 	subs.w	fp, sl, r4
20009102:	d00b      	beq.n	2000911c <_vfiprintf_r+0xc0>
20009104:	465b      	mov	r3, fp
20009106:	4622      	mov	r2, r4
20009108:	4629      	mov	r1, r5
2000910a:	4630      	mov	r0, r6
2000910c:	f7ff ff94 	bl	20009038 <__sfputs_r>
20009110:	3001      	adds	r0, #1
20009112:	f000 80aa 	beq.w	2000926a <_vfiprintf_r+0x20e>
20009116:	9a09      	ldr	r2, [sp, #36]	; 0x24
20009118:	445a      	add	r2, fp
2000911a:	9209      	str	r2, [sp, #36]	; 0x24
2000911c:	f89a 3000 	ldrb.w	r3, [sl]
20009120:	2b00      	cmp	r3, #0
20009122:	f000 80a2 	beq.w	2000926a <_vfiprintf_r+0x20e>
20009126:	2300      	movs	r3, #0
20009128:	f04f 32ff 	mov.w	r2, #4294967295
2000912c:	e9cd 2305 	strd	r2, r3, [sp, #20]
20009130:	f10a 0a01 	add.w	sl, sl, #1
20009134:	9304      	str	r3, [sp, #16]
20009136:	9307      	str	r3, [sp, #28]
20009138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
2000913c:	931a      	str	r3, [sp, #104]	; 0x68
2000913e:	4654      	mov	r4, sl
20009140:	2205      	movs	r2, #5
20009142:	f814 1b01 	ldrb.w	r1, [r4], #1
20009146:	4858      	ldr	r0, [pc, #352]	; (200092a8 <_vfiprintf_r+0x24c>)
20009148:	f7f7 f852 	bl	200001f0 <memchr>
2000914c:	9a04      	ldr	r2, [sp, #16]
2000914e:	b9d8      	cbnz	r0, 20009188 <_vfiprintf_r+0x12c>
20009150:	06d1      	lsls	r1, r2, #27
20009152:	bf44      	itt	mi
20009154:	2320      	movmi	r3, #32
20009156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2000915a:	0713      	lsls	r3, r2, #28
2000915c:	bf44      	itt	mi
2000915e:	232b      	movmi	r3, #43	; 0x2b
20009160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
20009164:	f89a 3000 	ldrb.w	r3, [sl]
20009168:	2b2a      	cmp	r3, #42	; 0x2a
2000916a:	d015      	beq.n	20009198 <_vfiprintf_r+0x13c>
2000916c:	9a07      	ldr	r2, [sp, #28]
2000916e:	4654      	mov	r4, sl
20009170:	2000      	movs	r0, #0
20009172:	f04f 0c0a 	mov.w	ip, #10
20009176:	4621      	mov	r1, r4
20009178:	f811 3b01 	ldrb.w	r3, [r1], #1
2000917c:	3b30      	subs	r3, #48	; 0x30
2000917e:	2b09      	cmp	r3, #9
20009180:	d94e      	bls.n	20009220 <_vfiprintf_r+0x1c4>
20009182:	b1b0      	cbz	r0, 200091b2 <_vfiprintf_r+0x156>
20009184:	9207      	str	r2, [sp, #28]
20009186:	e014      	b.n	200091b2 <_vfiprintf_r+0x156>
20009188:	eba0 0308 	sub.w	r3, r0, r8
2000918c:	fa09 f303 	lsl.w	r3, r9, r3
20009190:	4313      	orrs	r3, r2
20009192:	9304      	str	r3, [sp, #16]
20009194:	46a2      	mov	sl, r4
20009196:	e7d2      	b.n	2000913e <_vfiprintf_r+0xe2>
20009198:	9b03      	ldr	r3, [sp, #12]
2000919a:	1d19      	adds	r1, r3, #4
2000919c:	681b      	ldr	r3, [r3, #0]
2000919e:	9103      	str	r1, [sp, #12]
200091a0:	2b00      	cmp	r3, #0
200091a2:	bfbb      	ittet	lt
200091a4:	425b      	neglt	r3, r3
200091a6:	f042 0202 	orrlt.w	r2, r2, #2
200091aa:	9307      	strge	r3, [sp, #28]
200091ac:	9307      	strlt	r3, [sp, #28]
200091ae:	bfb8      	it	lt
200091b0:	9204      	strlt	r2, [sp, #16]
200091b2:	7823      	ldrb	r3, [r4, #0]
200091b4:	2b2e      	cmp	r3, #46	; 0x2e
200091b6:	d10c      	bne.n	200091d2 <_vfiprintf_r+0x176>
200091b8:	7863      	ldrb	r3, [r4, #1]
200091ba:	2b2a      	cmp	r3, #42	; 0x2a
200091bc:	d135      	bne.n	2000922a <_vfiprintf_r+0x1ce>
200091be:	9b03      	ldr	r3, [sp, #12]
200091c0:	1d1a      	adds	r2, r3, #4
200091c2:	681b      	ldr	r3, [r3, #0]
200091c4:	9203      	str	r2, [sp, #12]
200091c6:	2b00      	cmp	r3, #0
200091c8:	bfb8      	it	lt
200091ca:	f04f 33ff 	movlt.w	r3, #4294967295
200091ce:	3402      	adds	r4, #2
200091d0:	9305      	str	r3, [sp, #20]
200091d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 200092b8 <_vfiprintf_r+0x25c>
200091d6:	7821      	ldrb	r1, [r4, #0]
200091d8:	2203      	movs	r2, #3
200091da:	4650      	mov	r0, sl
200091dc:	f7f7 f808 	bl	200001f0 <memchr>
200091e0:	b140      	cbz	r0, 200091f4 <_vfiprintf_r+0x198>
200091e2:	2340      	movs	r3, #64	; 0x40
200091e4:	eba0 000a 	sub.w	r0, r0, sl
200091e8:	fa03 f000 	lsl.w	r0, r3, r0
200091ec:	9b04      	ldr	r3, [sp, #16]
200091ee:	4303      	orrs	r3, r0
200091f0:	3401      	adds	r4, #1
200091f2:	9304      	str	r3, [sp, #16]
200091f4:	f814 1b01 	ldrb.w	r1, [r4], #1
200091f8:	482c      	ldr	r0, [pc, #176]	; (200092ac <_vfiprintf_r+0x250>)
200091fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
200091fe:	2206      	movs	r2, #6
20009200:	f7f6 fff6 	bl	200001f0 <memchr>
20009204:	2800      	cmp	r0, #0
20009206:	d03f      	beq.n	20009288 <_vfiprintf_r+0x22c>
20009208:	4b29      	ldr	r3, [pc, #164]	; (200092b0 <_vfiprintf_r+0x254>)
2000920a:	bb1b      	cbnz	r3, 20009254 <_vfiprintf_r+0x1f8>
2000920c:	9b03      	ldr	r3, [sp, #12]
2000920e:	3307      	adds	r3, #7
20009210:	f023 0307 	bic.w	r3, r3, #7
20009214:	3308      	adds	r3, #8
20009216:	9303      	str	r3, [sp, #12]
20009218:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000921a:	443b      	add	r3, r7
2000921c:	9309      	str	r3, [sp, #36]	; 0x24
2000921e:	e767      	b.n	200090f0 <_vfiprintf_r+0x94>
20009220:	fb0c 3202 	mla	r2, ip, r2, r3
20009224:	460c      	mov	r4, r1
20009226:	2001      	movs	r0, #1
20009228:	e7a5      	b.n	20009176 <_vfiprintf_r+0x11a>
2000922a:	2300      	movs	r3, #0
2000922c:	3401      	adds	r4, #1
2000922e:	9305      	str	r3, [sp, #20]
20009230:	4619      	mov	r1, r3
20009232:	f04f 0c0a 	mov.w	ip, #10
20009236:	4620      	mov	r0, r4
20009238:	f810 2b01 	ldrb.w	r2, [r0], #1
2000923c:	3a30      	subs	r2, #48	; 0x30
2000923e:	2a09      	cmp	r2, #9
20009240:	d903      	bls.n	2000924a <_vfiprintf_r+0x1ee>
20009242:	2b00      	cmp	r3, #0
20009244:	d0c5      	beq.n	200091d2 <_vfiprintf_r+0x176>
20009246:	9105      	str	r1, [sp, #20]
20009248:	e7c3      	b.n	200091d2 <_vfiprintf_r+0x176>
2000924a:	fb0c 2101 	mla	r1, ip, r1, r2
2000924e:	4604      	mov	r4, r0
20009250:	2301      	movs	r3, #1
20009252:	e7f0      	b.n	20009236 <_vfiprintf_r+0x1da>
20009254:	ab03      	add	r3, sp, #12
20009256:	9300      	str	r3, [sp, #0]
20009258:	462a      	mov	r2, r5
2000925a:	4b16      	ldr	r3, [pc, #88]	; (200092b4 <_vfiprintf_r+0x258>)
2000925c:	a904      	add	r1, sp, #16
2000925e:	4630      	mov	r0, r6
20009260:	f7fd fdd6 	bl	20006e10 <_printf_float>
20009264:	4607      	mov	r7, r0
20009266:	1c78      	adds	r0, r7, #1
20009268:	d1d6      	bne.n	20009218 <_vfiprintf_r+0x1bc>
2000926a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
2000926c:	07d9      	lsls	r1, r3, #31
2000926e:	d405      	bmi.n	2000927c <_vfiprintf_r+0x220>
20009270:	89ab      	ldrh	r3, [r5, #12]
20009272:	059a      	lsls	r2, r3, #22
20009274:	d402      	bmi.n	2000927c <_vfiprintf_r+0x220>
20009276:	6da8      	ldr	r0, [r5, #88]	; 0x58
20009278:	f000 faaf 	bl	200097da <__retarget_lock_release_recursive>
2000927c:	89ab      	ldrh	r3, [r5, #12]
2000927e:	065b      	lsls	r3, r3, #25
20009280:	f53f af12 	bmi.w	200090a8 <_vfiprintf_r+0x4c>
20009284:	9809      	ldr	r0, [sp, #36]	; 0x24
20009286:	e711      	b.n	200090ac <_vfiprintf_r+0x50>
20009288:	ab03      	add	r3, sp, #12
2000928a:	9300      	str	r3, [sp, #0]
2000928c:	462a      	mov	r2, r5
2000928e:	4b09      	ldr	r3, [pc, #36]	; (200092b4 <_vfiprintf_r+0x258>)
20009290:	a904      	add	r1, sp, #16
20009292:	4630      	mov	r0, r6
20009294:	f7fe f860 	bl	20007358 <_printf_i>
20009298:	e7e4      	b.n	20009264 <_vfiprintf_r+0x208>
2000929a:	bf00      	nop
2000929c:	200146dc 	.word	0x200146dc
200092a0:	200146fc 	.word	0x200146fc
200092a4:	200146bc 	.word	0x200146bc
200092a8:	20014564 	.word	0x20014564
200092ac:	2001456e 	.word	0x2001456e
200092b0:	20006e11 	.word	0x20006e11
200092b4:	20009039 	.word	0x20009039
200092b8:	2001456a 	.word	0x2001456a

200092bc <__swbuf_r>:
200092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200092be:	460e      	mov	r6, r1
200092c0:	4614      	mov	r4, r2
200092c2:	4605      	mov	r5, r0
200092c4:	b118      	cbz	r0, 200092ce <__swbuf_r+0x12>
200092c6:	6983      	ldr	r3, [r0, #24]
200092c8:	b90b      	cbnz	r3, 200092ce <__swbuf_r+0x12>
200092ca:	f000 f9e7 	bl	2000969c <__sinit>
200092ce:	4b21      	ldr	r3, [pc, #132]	; (20009354 <__swbuf_r+0x98>)
200092d0:	429c      	cmp	r4, r3
200092d2:	d12b      	bne.n	2000932c <__swbuf_r+0x70>
200092d4:	686c      	ldr	r4, [r5, #4]
200092d6:	69a3      	ldr	r3, [r4, #24]
200092d8:	60a3      	str	r3, [r4, #8]
200092da:	89a3      	ldrh	r3, [r4, #12]
200092dc:	071a      	lsls	r2, r3, #28
200092de:	d52f      	bpl.n	20009340 <__swbuf_r+0x84>
200092e0:	6923      	ldr	r3, [r4, #16]
200092e2:	b36b      	cbz	r3, 20009340 <__swbuf_r+0x84>
200092e4:	6923      	ldr	r3, [r4, #16]
200092e6:	6820      	ldr	r0, [r4, #0]
200092e8:	1ac0      	subs	r0, r0, r3
200092ea:	6963      	ldr	r3, [r4, #20]
200092ec:	b2f6      	uxtb	r6, r6
200092ee:	4283      	cmp	r3, r0
200092f0:	4637      	mov	r7, r6
200092f2:	dc04      	bgt.n	200092fe <__swbuf_r+0x42>
200092f4:	4621      	mov	r1, r4
200092f6:	4628      	mov	r0, r5
200092f8:	f000 f93c 	bl	20009574 <_fflush_r>
200092fc:	bb30      	cbnz	r0, 2000934c <__swbuf_r+0x90>
200092fe:	68a3      	ldr	r3, [r4, #8]
20009300:	3b01      	subs	r3, #1
20009302:	60a3      	str	r3, [r4, #8]
20009304:	6823      	ldr	r3, [r4, #0]
20009306:	1c5a      	adds	r2, r3, #1
20009308:	6022      	str	r2, [r4, #0]
2000930a:	701e      	strb	r6, [r3, #0]
2000930c:	6963      	ldr	r3, [r4, #20]
2000930e:	3001      	adds	r0, #1
20009310:	4283      	cmp	r3, r0
20009312:	d004      	beq.n	2000931e <__swbuf_r+0x62>
20009314:	89a3      	ldrh	r3, [r4, #12]
20009316:	07db      	lsls	r3, r3, #31
20009318:	d506      	bpl.n	20009328 <__swbuf_r+0x6c>
2000931a:	2e0a      	cmp	r6, #10
2000931c:	d104      	bne.n	20009328 <__swbuf_r+0x6c>
2000931e:	4621      	mov	r1, r4
20009320:	4628      	mov	r0, r5
20009322:	f000 f927 	bl	20009574 <_fflush_r>
20009326:	b988      	cbnz	r0, 2000934c <__swbuf_r+0x90>
20009328:	4638      	mov	r0, r7
2000932a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000932c:	4b0a      	ldr	r3, [pc, #40]	; (20009358 <__swbuf_r+0x9c>)
2000932e:	429c      	cmp	r4, r3
20009330:	d101      	bne.n	20009336 <__swbuf_r+0x7a>
20009332:	68ac      	ldr	r4, [r5, #8]
20009334:	e7cf      	b.n	200092d6 <__swbuf_r+0x1a>
20009336:	4b09      	ldr	r3, [pc, #36]	; (2000935c <__swbuf_r+0xa0>)
20009338:	429c      	cmp	r4, r3
2000933a:	bf08      	it	eq
2000933c:	68ec      	ldreq	r4, [r5, #12]
2000933e:	e7ca      	b.n	200092d6 <__swbuf_r+0x1a>
20009340:	4621      	mov	r1, r4
20009342:	4628      	mov	r0, r5
20009344:	f000 f81a 	bl	2000937c <__swsetup_r>
20009348:	2800      	cmp	r0, #0
2000934a:	d0cb      	beq.n	200092e4 <__swbuf_r+0x28>
2000934c:	f04f 37ff 	mov.w	r7, #4294967295
20009350:	e7ea      	b.n	20009328 <__swbuf_r+0x6c>
20009352:	bf00      	nop
20009354:	200146dc 	.word	0x200146dc
20009358:	200146fc 	.word	0x200146fc
2000935c:	200146bc 	.word	0x200146bc

20009360 <__ascii_wctomb>:
20009360:	b149      	cbz	r1, 20009376 <__ascii_wctomb+0x16>
20009362:	2aff      	cmp	r2, #255	; 0xff
20009364:	bf85      	ittet	hi
20009366:	238a      	movhi	r3, #138	; 0x8a
20009368:	6003      	strhi	r3, [r0, #0]
2000936a:	700a      	strbls	r2, [r1, #0]
2000936c:	f04f 30ff 	movhi.w	r0, #4294967295
20009370:	bf98      	it	ls
20009372:	2001      	movls	r0, #1
20009374:	4770      	bx	lr
20009376:	4608      	mov	r0, r1
20009378:	4770      	bx	lr
	...

2000937c <__swsetup_r>:
2000937c:	4b32      	ldr	r3, [pc, #200]	; (20009448 <__swsetup_r+0xcc>)
2000937e:	b570      	push	{r4, r5, r6, lr}
20009380:	681d      	ldr	r5, [r3, #0]
20009382:	4606      	mov	r6, r0
20009384:	460c      	mov	r4, r1
20009386:	b125      	cbz	r5, 20009392 <__swsetup_r+0x16>
20009388:	69ab      	ldr	r3, [r5, #24]
2000938a:	b913      	cbnz	r3, 20009392 <__swsetup_r+0x16>
2000938c:	4628      	mov	r0, r5
2000938e:	f000 f985 	bl	2000969c <__sinit>
20009392:	4b2e      	ldr	r3, [pc, #184]	; (2000944c <__swsetup_r+0xd0>)
20009394:	429c      	cmp	r4, r3
20009396:	d10f      	bne.n	200093b8 <__swsetup_r+0x3c>
20009398:	686c      	ldr	r4, [r5, #4]
2000939a:	89a3      	ldrh	r3, [r4, #12]
2000939c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
200093a0:	0719      	lsls	r1, r3, #28
200093a2:	d42c      	bmi.n	200093fe <__swsetup_r+0x82>
200093a4:	06dd      	lsls	r5, r3, #27
200093a6:	d411      	bmi.n	200093cc <__swsetup_r+0x50>
200093a8:	2309      	movs	r3, #9
200093aa:	6033      	str	r3, [r6, #0]
200093ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
200093b0:	81a3      	strh	r3, [r4, #12]
200093b2:	f04f 30ff 	mov.w	r0, #4294967295
200093b6:	e03e      	b.n	20009436 <__swsetup_r+0xba>
200093b8:	4b25      	ldr	r3, [pc, #148]	; (20009450 <__swsetup_r+0xd4>)
200093ba:	429c      	cmp	r4, r3
200093bc:	d101      	bne.n	200093c2 <__swsetup_r+0x46>
200093be:	68ac      	ldr	r4, [r5, #8]
200093c0:	e7eb      	b.n	2000939a <__swsetup_r+0x1e>
200093c2:	4b24      	ldr	r3, [pc, #144]	; (20009454 <__swsetup_r+0xd8>)
200093c4:	429c      	cmp	r4, r3
200093c6:	bf08      	it	eq
200093c8:	68ec      	ldreq	r4, [r5, #12]
200093ca:	e7e6      	b.n	2000939a <__swsetup_r+0x1e>
200093cc:	0758      	lsls	r0, r3, #29
200093ce:	d512      	bpl.n	200093f6 <__swsetup_r+0x7a>
200093d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
200093d2:	b141      	cbz	r1, 200093e6 <__swsetup_r+0x6a>
200093d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
200093d8:	4299      	cmp	r1, r3
200093da:	d002      	beq.n	200093e2 <__swsetup_r+0x66>
200093dc:	4630      	mov	r0, r6
200093de:	f7ff fb31 	bl	20008a44 <_free_r>
200093e2:	2300      	movs	r3, #0
200093e4:	6363      	str	r3, [r4, #52]	; 0x34
200093e6:	89a3      	ldrh	r3, [r4, #12]
200093e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
200093ec:	81a3      	strh	r3, [r4, #12]
200093ee:	2300      	movs	r3, #0
200093f0:	6063      	str	r3, [r4, #4]
200093f2:	6923      	ldr	r3, [r4, #16]
200093f4:	6023      	str	r3, [r4, #0]
200093f6:	89a3      	ldrh	r3, [r4, #12]
200093f8:	f043 0308 	orr.w	r3, r3, #8
200093fc:	81a3      	strh	r3, [r4, #12]
200093fe:	6923      	ldr	r3, [r4, #16]
20009400:	b94b      	cbnz	r3, 20009416 <__swsetup_r+0x9a>
20009402:	89a3      	ldrh	r3, [r4, #12]
20009404:	f403 7320 	and.w	r3, r3, #640	; 0x280
20009408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2000940c:	d003      	beq.n	20009416 <__swsetup_r+0x9a>
2000940e:	4621      	mov	r1, r4
20009410:	4630      	mov	r0, r6
20009412:	f000 fa09 	bl	20009828 <__smakebuf_r>
20009416:	89a0      	ldrh	r0, [r4, #12]
20009418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
2000941c:	f010 0301 	ands.w	r3, r0, #1
20009420:	d00a      	beq.n	20009438 <__swsetup_r+0xbc>
20009422:	2300      	movs	r3, #0
20009424:	60a3      	str	r3, [r4, #8]
20009426:	6963      	ldr	r3, [r4, #20]
20009428:	425b      	negs	r3, r3
2000942a:	61a3      	str	r3, [r4, #24]
2000942c:	6923      	ldr	r3, [r4, #16]
2000942e:	b943      	cbnz	r3, 20009442 <__swsetup_r+0xc6>
20009430:	f010 0080 	ands.w	r0, r0, #128	; 0x80
20009434:	d1ba      	bne.n	200093ac <__swsetup_r+0x30>
20009436:	bd70      	pop	{r4, r5, r6, pc}
20009438:	0781      	lsls	r1, r0, #30
2000943a:	bf58      	it	pl
2000943c:	6963      	ldrpl	r3, [r4, #20]
2000943e:	60a3      	str	r3, [r4, #8]
20009440:	e7f4      	b.n	2000942c <__swsetup_r+0xb0>
20009442:	2000      	movs	r0, #0
20009444:	e7f7      	b.n	20009436 <__swsetup_r+0xba>
20009446:	bf00      	nop
20009448:	20014788 	.word	0x20014788
2000944c:	200146dc 	.word	0x200146dc
20009450:	200146fc 	.word	0x200146fc
20009454:	200146bc 	.word	0x200146bc

20009458 <abort>:
20009458:	b508      	push	{r3, lr}
2000945a:	2006      	movs	r0, #6
2000945c:	f000 fa54 	bl	20009908 <raise>
20009460:	2001      	movs	r0, #1
20009462:	f7fb f857 	bl	20004514 <_exit>
	...

20009468 <__sflush_r>:
20009468:	898a      	ldrh	r2, [r1, #12]
2000946a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000946e:	4605      	mov	r5, r0
20009470:	0710      	lsls	r0, r2, #28
20009472:	460c      	mov	r4, r1
20009474:	d458      	bmi.n	20009528 <__sflush_r+0xc0>
20009476:	684b      	ldr	r3, [r1, #4]
20009478:	2b00      	cmp	r3, #0
2000947a:	dc05      	bgt.n	20009488 <__sflush_r+0x20>
2000947c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
2000947e:	2b00      	cmp	r3, #0
20009480:	dc02      	bgt.n	20009488 <__sflush_r+0x20>
20009482:	2000      	movs	r0, #0
20009484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20009488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
2000948a:	2e00      	cmp	r6, #0
2000948c:	d0f9      	beq.n	20009482 <__sflush_r+0x1a>
2000948e:	2300      	movs	r3, #0
20009490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
20009494:	682f      	ldr	r7, [r5, #0]
20009496:	602b      	str	r3, [r5, #0]
20009498:	d032      	beq.n	20009500 <__sflush_r+0x98>
2000949a:	6d60      	ldr	r0, [r4, #84]	; 0x54
2000949c:	89a3      	ldrh	r3, [r4, #12]
2000949e:	075a      	lsls	r2, r3, #29
200094a0:	d505      	bpl.n	200094ae <__sflush_r+0x46>
200094a2:	6863      	ldr	r3, [r4, #4]
200094a4:	1ac0      	subs	r0, r0, r3
200094a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
200094a8:	b10b      	cbz	r3, 200094ae <__sflush_r+0x46>
200094aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
200094ac:	1ac0      	subs	r0, r0, r3
200094ae:	2300      	movs	r3, #0
200094b0:	4602      	mov	r2, r0
200094b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
200094b4:	6a21      	ldr	r1, [r4, #32]
200094b6:	4628      	mov	r0, r5
200094b8:	47b0      	blx	r6
200094ba:	1c43      	adds	r3, r0, #1
200094bc:	89a3      	ldrh	r3, [r4, #12]
200094be:	d106      	bne.n	200094ce <__sflush_r+0x66>
200094c0:	6829      	ldr	r1, [r5, #0]
200094c2:	291d      	cmp	r1, #29
200094c4:	d82c      	bhi.n	20009520 <__sflush_r+0xb8>
200094c6:	4a2a      	ldr	r2, [pc, #168]	; (20009570 <__sflush_r+0x108>)
200094c8:	40ca      	lsrs	r2, r1
200094ca:	07d6      	lsls	r6, r2, #31
200094cc:	d528      	bpl.n	20009520 <__sflush_r+0xb8>
200094ce:	2200      	movs	r2, #0
200094d0:	6062      	str	r2, [r4, #4]
200094d2:	04d9      	lsls	r1, r3, #19
200094d4:	6922      	ldr	r2, [r4, #16]
200094d6:	6022      	str	r2, [r4, #0]
200094d8:	d504      	bpl.n	200094e4 <__sflush_r+0x7c>
200094da:	1c42      	adds	r2, r0, #1
200094dc:	d101      	bne.n	200094e2 <__sflush_r+0x7a>
200094de:	682b      	ldr	r3, [r5, #0]
200094e0:	b903      	cbnz	r3, 200094e4 <__sflush_r+0x7c>
200094e2:	6560      	str	r0, [r4, #84]	; 0x54
200094e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
200094e6:	602f      	str	r7, [r5, #0]
200094e8:	2900      	cmp	r1, #0
200094ea:	d0ca      	beq.n	20009482 <__sflush_r+0x1a>
200094ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
200094f0:	4299      	cmp	r1, r3
200094f2:	d002      	beq.n	200094fa <__sflush_r+0x92>
200094f4:	4628      	mov	r0, r5
200094f6:	f7ff faa5 	bl	20008a44 <_free_r>
200094fa:	2000      	movs	r0, #0
200094fc:	6360      	str	r0, [r4, #52]	; 0x34
200094fe:	e7c1      	b.n	20009484 <__sflush_r+0x1c>
20009500:	6a21      	ldr	r1, [r4, #32]
20009502:	2301      	movs	r3, #1
20009504:	4628      	mov	r0, r5
20009506:	47b0      	blx	r6
20009508:	1c41      	adds	r1, r0, #1
2000950a:	d1c7      	bne.n	2000949c <__sflush_r+0x34>
2000950c:	682b      	ldr	r3, [r5, #0]
2000950e:	2b00      	cmp	r3, #0
20009510:	d0c4      	beq.n	2000949c <__sflush_r+0x34>
20009512:	2b1d      	cmp	r3, #29
20009514:	d001      	beq.n	2000951a <__sflush_r+0xb2>
20009516:	2b16      	cmp	r3, #22
20009518:	d101      	bne.n	2000951e <__sflush_r+0xb6>
2000951a:	602f      	str	r7, [r5, #0]
2000951c:	e7b1      	b.n	20009482 <__sflush_r+0x1a>
2000951e:	89a3      	ldrh	r3, [r4, #12]
20009520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20009524:	81a3      	strh	r3, [r4, #12]
20009526:	e7ad      	b.n	20009484 <__sflush_r+0x1c>
20009528:	690f      	ldr	r7, [r1, #16]
2000952a:	2f00      	cmp	r7, #0
2000952c:	d0a9      	beq.n	20009482 <__sflush_r+0x1a>
2000952e:	0793      	lsls	r3, r2, #30
20009530:	680e      	ldr	r6, [r1, #0]
20009532:	bf08      	it	eq
20009534:	694b      	ldreq	r3, [r1, #20]
20009536:	600f      	str	r7, [r1, #0]
20009538:	bf18      	it	ne
2000953a:	2300      	movne	r3, #0
2000953c:	eba6 0807 	sub.w	r8, r6, r7
20009540:	608b      	str	r3, [r1, #8]
20009542:	f1b8 0f00 	cmp.w	r8, #0
20009546:	dd9c      	ble.n	20009482 <__sflush_r+0x1a>
20009548:	6a21      	ldr	r1, [r4, #32]
2000954a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
2000954c:	4643      	mov	r3, r8
2000954e:	463a      	mov	r2, r7
20009550:	4628      	mov	r0, r5
20009552:	47b0      	blx	r6
20009554:	2800      	cmp	r0, #0
20009556:	dc06      	bgt.n	20009566 <__sflush_r+0xfe>
20009558:	89a3      	ldrh	r3, [r4, #12]
2000955a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000955e:	81a3      	strh	r3, [r4, #12]
20009560:	f04f 30ff 	mov.w	r0, #4294967295
20009564:	e78e      	b.n	20009484 <__sflush_r+0x1c>
20009566:	4407      	add	r7, r0
20009568:	eba8 0800 	sub.w	r8, r8, r0
2000956c:	e7e9      	b.n	20009542 <__sflush_r+0xda>
2000956e:	bf00      	nop
20009570:	20400001 	.word	0x20400001

20009574 <_fflush_r>:
20009574:	b538      	push	{r3, r4, r5, lr}
20009576:	690b      	ldr	r3, [r1, #16]
20009578:	4605      	mov	r5, r0
2000957a:	460c      	mov	r4, r1
2000957c:	b913      	cbnz	r3, 20009584 <_fflush_r+0x10>
2000957e:	2500      	movs	r5, #0
20009580:	4628      	mov	r0, r5
20009582:	bd38      	pop	{r3, r4, r5, pc}
20009584:	b118      	cbz	r0, 2000958e <_fflush_r+0x1a>
20009586:	6983      	ldr	r3, [r0, #24]
20009588:	b90b      	cbnz	r3, 2000958e <_fflush_r+0x1a>
2000958a:	f000 f887 	bl	2000969c <__sinit>
2000958e:	4b14      	ldr	r3, [pc, #80]	; (200095e0 <_fflush_r+0x6c>)
20009590:	429c      	cmp	r4, r3
20009592:	d11b      	bne.n	200095cc <_fflush_r+0x58>
20009594:	686c      	ldr	r4, [r5, #4]
20009596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2000959a:	2b00      	cmp	r3, #0
2000959c:	d0ef      	beq.n	2000957e <_fflush_r+0xa>
2000959e:	6e62      	ldr	r2, [r4, #100]	; 0x64
200095a0:	07d0      	lsls	r0, r2, #31
200095a2:	d404      	bmi.n	200095ae <_fflush_r+0x3a>
200095a4:	0599      	lsls	r1, r3, #22
200095a6:	d402      	bmi.n	200095ae <_fflush_r+0x3a>
200095a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
200095aa:	f000 f915 	bl	200097d8 <__retarget_lock_acquire_recursive>
200095ae:	4628      	mov	r0, r5
200095b0:	4621      	mov	r1, r4
200095b2:	f7ff ff59 	bl	20009468 <__sflush_r>
200095b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
200095b8:	07da      	lsls	r2, r3, #31
200095ba:	4605      	mov	r5, r0
200095bc:	d4e0      	bmi.n	20009580 <_fflush_r+0xc>
200095be:	89a3      	ldrh	r3, [r4, #12]
200095c0:	059b      	lsls	r3, r3, #22
200095c2:	d4dd      	bmi.n	20009580 <_fflush_r+0xc>
200095c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
200095c6:	f000 f908 	bl	200097da <__retarget_lock_release_recursive>
200095ca:	e7d9      	b.n	20009580 <_fflush_r+0xc>
200095cc:	4b05      	ldr	r3, [pc, #20]	; (200095e4 <_fflush_r+0x70>)
200095ce:	429c      	cmp	r4, r3
200095d0:	d101      	bne.n	200095d6 <_fflush_r+0x62>
200095d2:	68ac      	ldr	r4, [r5, #8]
200095d4:	e7df      	b.n	20009596 <_fflush_r+0x22>
200095d6:	4b04      	ldr	r3, [pc, #16]	; (200095e8 <_fflush_r+0x74>)
200095d8:	429c      	cmp	r4, r3
200095da:	bf08      	it	eq
200095dc:	68ec      	ldreq	r4, [r5, #12]
200095de:	e7da      	b.n	20009596 <_fflush_r+0x22>
200095e0:	200146dc 	.word	0x200146dc
200095e4:	200146fc 	.word	0x200146fc
200095e8:	200146bc 	.word	0x200146bc

200095ec <std>:
200095ec:	2300      	movs	r3, #0
200095ee:	b510      	push	{r4, lr}
200095f0:	4604      	mov	r4, r0
200095f2:	e9c0 3300 	strd	r3, r3, [r0]
200095f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
200095fa:	6083      	str	r3, [r0, #8]
200095fc:	8181      	strh	r1, [r0, #12]
200095fe:	6643      	str	r3, [r0, #100]	; 0x64
20009600:	81c2      	strh	r2, [r0, #14]
20009602:	6183      	str	r3, [r0, #24]
20009604:	4619      	mov	r1, r3
20009606:	2208      	movs	r2, #8
20009608:	305c      	adds	r0, #92	; 0x5c
2000960a:	f7fd fb59 	bl	20006cc0 <memset>
2000960e:	4b05      	ldr	r3, [pc, #20]	; (20009624 <std+0x38>)
20009610:	6263      	str	r3, [r4, #36]	; 0x24
20009612:	4b05      	ldr	r3, [pc, #20]	; (20009628 <std+0x3c>)
20009614:	62a3      	str	r3, [r4, #40]	; 0x28
20009616:	4b05      	ldr	r3, [pc, #20]	; (2000962c <std+0x40>)
20009618:	62e3      	str	r3, [r4, #44]	; 0x2c
2000961a:	4b05      	ldr	r3, [pc, #20]	; (20009630 <std+0x44>)
2000961c:	6224      	str	r4, [r4, #32]
2000961e:	6323      	str	r3, [r4, #48]	; 0x30
20009620:	bd10      	pop	{r4, pc}
20009622:	bf00      	nop
20009624:	20009941 	.word	0x20009941
20009628:	20009963 	.word	0x20009963
2000962c:	2000999b 	.word	0x2000999b
20009630:	200099bf 	.word	0x200099bf

20009634 <_cleanup_r>:
20009634:	4901      	ldr	r1, [pc, #4]	; (2000963c <_cleanup_r+0x8>)
20009636:	f000 b8af 	b.w	20009798 <_fwalk_reent>
2000963a:	bf00      	nop
2000963c:	20009575 	.word	0x20009575

20009640 <__sfmoreglue>:
20009640:	b570      	push	{r4, r5, r6, lr}
20009642:	2268      	movs	r2, #104	; 0x68
20009644:	1e4d      	subs	r5, r1, #1
20009646:	4355      	muls	r5, r2
20009648:	460e      	mov	r6, r1
2000964a:	f105 0174 	add.w	r1, r5, #116	; 0x74
2000964e:	f7ff fa65 	bl	20008b1c <_malloc_r>
20009652:	4604      	mov	r4, r0
20009654:	b140      	cbz	r0, 20009668 <__sfmoreglue+0x28>
20009656:	2100      	movs	r1, #0
20009658:	e9c0 1600 	strd	r1, r6, [r0]
2000965c:	300c      	adds	r0, #12
2000965e:	60a0      	str	r0, [r4, #8]
20009660:	f105 0268 	add.w	r2, r5, #104	; 0x68
20009664:	f7fd fb2c 	bl	20006cc0 <memset>
20009668:	4620      	mov	r0, r4
2000966a:	bd70      	pop	{r4, r5, r6, pc}

2000966c <__sfp_lock_acquire>:
2000966c:	4801      	ldr	r0, [pc, #4]	; (20009674 <__sfp_lock_acquire+0x8>)
2000966e:	f000 b8b3 	b.w	200097d8 <__retarget_lock_acquire_recursive>
20009672:	bf00      	nop
20009674:	20014b09 	.word	0x20014b09

20009678 <__sfp_lock_release>:
20009678:	4801      	ldr	r0, [pc, #4]	; (20009680 <__sfp_lock_release+0x8>)
2000967a:	f000 b8ae 	b.w	200097da <__retarget_lock_release_recursive>
2000967e:	bf00      	nop
20009680:	20014b09 	.word	0x20014b09

20009684 <__sinit_lock_acquire>:
20009684:	4801      	ldr	r0, [pc, #4]	; (2000968c <__sinit_lock_acquire+0x8>)
20009686:	f000 b8a7 	b.w	200097d8 <__retarget_lock_acquire_recursive>
2000968a:	bf00      	nop
2000968c:	20014b0a 	.word	0x20014b0a

20009690 <__sinit_lock_release>:
20009690:	4801      	ldr	r0, [pc, #4]	; (20009698 <__sinit_lock_release+0x8>)
20009692:	f000 b8a2 	b.w	200097da <__retarget_lock_release_recursive>
20009696:	bf00      	nop
20009698:	20014b0a 	.word	0x20014b0a

2000969c <__sinit>:
2000969c:	b510      	push	{r4, lr}
2000969e:	4604      	mov	r4, r0
200096a0:	f7ff fff0 	bl	20009684 <__sinit_lock_acquire>
200096a4:	69a3      	ldr	r3, [r4, #24]
200096a6:	b11b      	cbz	r3, 200096b0 <__sinit+0x14>
200096a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
200096ac:	f7ff bff0 	b.w	20009690 <__sinit_lock_release>
200096b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
200096b4:	6523      	str	r3, [r4, #80]	; 0x50
200096b6:	4b13      	ldr	r3, [pc, #76]	; (20009704 <__sinit+0x68>)
200096b8:	4a13      	ldr	r2, [pc, #76]	; (20009708 <__sinit+0x6c>)
200096ba:	681b      	ldr	r3, [r3, #0]
200096bc:	62a2      	str	r2, [r4, #40]	; 0x28
200096be:	42a3      	cmp	r3, r4
200096c0:	bf04      	itt	eq
200096c2:	2301      	moveq	r3, #1
200096c4:	61a3      	streq	r3, [r4, #24]
200096c6:	4620      	mov	r0, r4
200096c8:	f000 f820 	bl	2000970c <__sfp>
200096cc:	6060      	str	r0, [r4, #4]
200096ce:	4620      	mov	r0, r4
200096d0:	f000 f81c 	bl	2000970c <__sfp>
200096d4:	60a0      	str	r0, [r4, #8]
200096d6:	4620      	mov	r0, r4
200096d8:	f000 f818 	bl	2000970c <__sfp>
200096dc:	2200      	movs	r2, #0
200096de:	60e0      	str	r0, [r4, #12]
200096e0:	2104      	movs	r1, #4
200096e2:	6860      	ldr	r0, [r4, #4]
200096e4:	f7ff ff82 	bl	200095ec <std>
200096e8:	68a0      	ldr	r0, [r4, #8]
200096ea:	2201      	movs	r2, #1
200096ec:	2109      	movs	r1, #9
200096ee:	f7ff ff7d 	bl	200095ec <std>
200096f2:	68e0      	ldr	r0, [r4, #12]
200096f4:	2202      	movs	r2, #2
200096f6:	2112      	movs	r1, #18
200096f8:	f7ff ff78 	bl	200095ec <std>
200096fc:	2301      	movs	r3, #1
200096fe:	61a3      	str	r3, [r4, #24]
20009700:	e7d2      	b.n	200096a8 <__sinit+0xc>
20009702:	bf00      	nop
20009704:	20014340 	.word	0x20014340
20009708:	20009635 	.word	0x20009635

2000970c <__sfp>:
2000970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000970e:	4607      	mov	r7, r0
20009710:	f7ff ffac 	bl	2000966c <__sfp_lock_acquire>
20009714:	4b1e      	ldr	r3, [pc, #120]	; (20009790 <__sfp+0x84>)
20009716:	681e      	ldr	r6, [r3, #0]
20009718:	69b3      	ldr	r3, [r6, #24]
2000971a:	b913      	cbnz	r3, 20009722 <__sfp+0x16>
2000971c:	4630      	mov	r0, r6
2000971e:	f7ff ffbd 	bl	2000969c <__sinit>
20009722:	3648      	adds	r6, #72	; 0x48
20009724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
20009728:	3b01      	subs	r3, #1
2000972a:	d503      	bpl.n	20009734 <__sfp+0x28>
2000972c:	6833      	ldr	r3, [r6, #0]
2000972e:	b30b      	cbz	r3, 20009774 <__sfp+0x68>
20009730:	6836      	ldr	r6, [r6, #0]
20009732:	e7f7      	b.n	20009724 <__sfp+0x18>
20009734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
20009738:	b9d5      	cbnz	r5, 20009770 <__sfp+0x64>
2000973a:	4b16      	ldr	r3, [pc, #88]	; (20009794 <__sfp+0x88>)
2000973c:	60e3      	str	r3, [r4, #12]
2000973e:	f104 0058 	add.w	r0, r4, #88	; 0x58
20009742:	6665      	str	r5, [r4, #100]	; 0x64
20009744:	f000 f847 	bl	200097d6 <__retarget_lock_init_recursive>
20009748:	f7ff ff96 	bl	20009678 <__sfp_lock_release>
2000974c:	e9c4 5501 	strd	r5, r5, [r4, #4]
20009750:	e9c4 5504 	strd	r5, r5, [r4, #16]
20009754:	6025      	str	r5, [r4, #0]
20009756:	61a5      	str	r5, [r4, #24]
20009758:	2208      	movs	r2, #8
2000975a:	4629      	mov	r1, r5
2000975c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
20009760:	f7fd faae 	bl	20006cc0 <memset>
20009764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
20009768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
2000976c:	4620      	mov	r0, r4
2000976e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20009770:	3468      	adds	r4, #104	; 0x68
20009772:	e7d9      	b.n	20009728 <__sfp+0x1c>
20009774:	2104      	movs	r1, #4
20009776:	4638      	mov	r0, r7
20009778:	f7ff ff62 	bl	20009640 <__sfmoreglue>
2000977c:	4604      	mov	r4, r0
2000977e:	6030      	str	r0, [r6, #0]
20009780:	2800      	cmp	r0, #0
20009782:	d1d5      	bne.n	20009730 <__sfp+0x24>
20009784:	f7ff ff78 	bl	20009678 <__sfp_lock_release>
20009788:	230c      	movs	r3, #12
2000978a:	603b      	str	r3, [r7, #0]
2000978c:	e7ee      	b.n	2000976c <__sfp+0x60>
2000978e:	bf00      	nop
20009790:	20014340 	.word	0x20014340
20009794:	ffff0001 	.word	0xffff0001

20009798 <_fwalk_reent>:
20009798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000979c:	4606      	mov	r6, r0
2000979e:	4688      	mov	r8, r1
200097a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
200097a4:	2700      	movs	r7, #0
200097a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
200097aa:	f1b9 0901 	subs.w	r9, r9, #1
200097ae:	d505      	bpl.n	200097bc <_fwalk_reent+0x24>
200097b0:	6824      	ldr	r4, [r4, #0]
200097b2:	2c00      	cmp	r4, #0
200097b4:	d1f7      	bne.n	200097a6 <_fwalk_reent+0xe>
200097b6:	4638      	mov	r0, r7
200097b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
200097bc:	89ab      	ldrh	r3, [r5, #12]
200097be:	2b01      	cmp	r3, #1
200097c0:	d907      	bls.n	200097d2 <_fwalk_reent+0x3a>
200097c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
200097c6:	3301      	adds	r3, #1
200097c8:	d003      	beq.n	200097d2 <_fwalk_reent+0x3a>
200097ca:	4629      	mov	r1, r5
200097cc:	4630      	mov	r0, r6
200097ce:	47c0      	blx	r8
200097d0:	4307      	orrs	r7, r0
200097d2:	3568      	adds	r5, #104	; 0x68
200097d4:	e7e9      	b.n	200097aa <_fwalk_reent+0x12>

200097d6 <__retarget_lock_init_recursive>:
200097d6:	4770      	bx	lr

200097d8 <__retarget_lock_acquire_recursive>:
200097d8:	4770      	bx	lr

200097da <__retarget_lock_release_recursive>:
200097da:	4770      	bx	lr

200097dc <__swhatbuf_r>:
200097dc:	b570      	push	{r4, r5, r6, lr}
200097de:	460e      	mov	r6, r1
200097e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
200097e4:	2900      	cmp	r1, #0
200097e6:	b096      	sub	sp, #88	; 0x58
200097e8:	4614      	mov	r4, r2
200097ea:	461d      	mov	r5, r3
200097ec:	da08      	bge.n	20009800 <__swhatbuf_r+0x24>
200097ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
200097f2:	2200      	movs	r2, #0
200097f4:	602a      	str	r2, [r5, #0]
200097f6:	061a      	lsls	r2, r3, #24
200097f8:	d410      	bmi.n	2000981c <__swhatbuf_r+0x40>
200097fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
200097fe:	e00e      	b.n	2000981e <__swhatbuf_r+0x42>
20009800:	466a      	mov	r2, sp
20009802:	f000 f903 	bl	20009a0c <_fstat_r>
20009806:	2800      	cmp	r0, #0
20009808:	dbf1      	blt.n	200097ee <__swhatbuf_r+0x12>
2000980a:	9a01      	ldr	r2, [sp, #4]
2000980c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
20009810:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
20009814:	425a      	negs	r2, r3
20009816:	415a      	adcs	r2, r3
20009818:	602a      	str	r2, [r5, #0]
2000981a:	e7ee      	b.n	200097fa <__swhatbuf_r+0x1e>
2000981c:	2340      	movs	r3, #64	; 0x40
2000981e:	2000      	movs	r0, #0
20009820:	6023      	str	r3, [r4, #0]
20009822:	b016      	add	sp, #88	; 0x58
20009824:	bd70      	pop	{r4, r5, r6, pc}
	...

20009828 <__smakebuf_r>:
20009828:	898b      	ldrh	r3, [r1, #12]
2000982a:	b573      	push	{r0, r1, r4, r5, r6, lr}
2000982c:	079d      	lsls	r5, r3, #30
2000982e:	4606      	mov	r6, r0
20009830:	460c      	mov	r4, r1
20009832:	d507      	bpl.n	20009844 <__smakebuf_r+0x1c>
20009834:	f104 0347 	add.w	r3, r4, #71	; 0x47
20009838:	6023      	str	r3, [r4, #0]
2000983a:	6123      	str	r3, [r4, #16]
2000983c:	2301      	movs	r3, #1
2000983e:	6163      	str	r3, [r4, #20]
20009840:	b002      	add	sp, #8
20009842:	bd70      	pop	{r4, r5, r6, pc}
20009844:	ab01      	add	r3, sp, #4
20009846:	466a      	mov	r2, sp
20009848:	f7ff ffc8 	bl	200097dc <__swhatbuf_r>
2000984c:	9900      	ldr	r1, [sp, #0]
2000984e:	4605      	mov	r5, r0
20009850:	4630      	mov	r0, r6
20009852:	f7ff f963 	bl	20008b1c <_malloc_r>
20009856:	b948      	cbnz	r0, 2000986c <__smakebuf_r+0x44>
20009858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2000985c:	059a      	lsls	r2, r3, #22
2000985e:	d4ef      	bmi.n	20009840 <__smakebuf_r+0x18>
20009860:	f023 0303 	bic.w	r3, r3, #3
20009864:	f043 0302 	orr.w	r3, r3, #2
20009868:	81a3      	strh	r3, [r4, #12]
2000986a:	e7e3      	b.n	20009834 <__smakebuf_r+0xc>
2000986c:	4b0d      	ldr	r3, [pc, #52]	; (200098a4 <__smakebuf_r+0x7c>)
2000986e:	62b3      	str	r3, [r6, #40]	; 0x28
20009870:	89a3      	ldrh	r3, [r4, #12]
20009872:	6020      	str	r0, [r4, #0]
20009874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20009878:	81a3      	strh	r3, [r4, #12]
2000987a:	9b00      	ldr	r3, [sp, #0]
2000987c:	6163      	str	r3, [r4, #20]
2000987e:	9b01      	ldr	r3, [sp, #4]
20009880:	6120      	str	r0, [r4, #16]
20009882:	b15b      	cbz	r3, 2000989c <__smakebuf_r+0x74>
20009884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
20009888:	4630      	mov	r0, r6
2000988a:	f000 f8d1 	bl	20009a30 <_isatty_r>
2000988e:	b128      	cbz	r0, 2000989c <__smakebuf_r+0x74>
20009890:	89a3      	ldrh	r3, [r4, #12]
20009892:	f023 0303 	bic.w	r3, r3, #3
20009896:	f043 0301 	orr.w	r3, r3, #1
2000989a:	81a3      	strh	r3, [r4, #12]
2000989c:	89a0      	ldrh	r0, [r4, #12]
2000989e:	4305      	orrs	r5, r0
200098a0:	81a5      	strh	r5, [r4, #12]
200098a2:	e7cd      	b.n	20009840 <__smakebuf_r+0x18>
200098a4:	20009635 	.word	0x20009635

200098a8 <_malloc_usable_size_r>:
200098a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
200098ac:	1f18      	subs	r0, r3, #4
200098ae:	2b00      	cmp	r3, #0
200098b0:	bfbc      	itt	lt
200098b2:	580b      	ldrlt	r3, [r1, r0]
200098b4:	18c0      	addlt	r0, r0, r3
200098b6:	4770      	bx	lr

200098b8 <_raise_r>:
200098b8:	291f      	cmp	r1, #31
200098ba:	b538      	push	{r3, r4, r5, lr}
200098bc:	4604      	mov	r4, r0
200098be:	460d      	mov	r5, r1
200098c0:	d904      	bls.n	200098cc <_raise_r+0x14>
200098c2:	2316      	movs	r3, #22
200098c4:	6003      	str	r3, [r0, #0]
200098c6:	f04f 30ff 	mov.w	r0, #4294967295
200098ca:	bd38      	pop	{r3, r4, r5, pc}
200098cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
200098ce:	b112      	cbz	r2, 200098d6 <_raise_r+0x1e>
200098d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
200098d4:	b94b      	cbnz	r3, 200098ea <_raise_r+0x32>
200098d6:	4620      	mov	r0, r4
200098d8:	f000 f830 	bl	2000993c <_getpid_r>
200098dc:	462a      	mov	r2, r5
200098de:	4601      	mov	r1, r0
200098e0:	4620      	mov	r0, r4
200098e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
200098e6:	f000 b817 	b.w	20009918 <_kill_r>
200098ea:	2b01      	cmp	r3, #1
200098ec:	d00a      	beq.n	20009904 <_raise_r+0x4c>
200098ee:	1c59      	adds	r1, r3, #1
200098f0:	d103      	bne.n	200098fa <_raise_r+0x42>
200098f2:	2316      	movs	r3, #22
200098f4:	6003      	str	r3, [r0, #0]
200098f6:	2001      	movs	r0, #1
200098f8:	e7e7      	b.n	200098ca <_raise_r+0x12>
200098fa:	2400      	movs	r4, #0
200098fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
20009900:	4628      	mov	r0, r5
20009902:	4798      	blx	r3
20009904:	2000      	movs	r0, #0
20009906:	e7e0      	b.n	200098ca <_raise_r+0x12>

20009908 <raise>:
20009908:	4b02      	ldr	r3, [pc, #8]	; (20009914 <raise+0xc>)
2000990a:	4601      	mov	r1, r0
2000990c:	6818      	ldr	r0, [r3, #0]
2000990e:	f7ff bfd3 	b.w	200098b8 <_raise_r>
20009912:	bf00      	nop
20009914:	20014788 	.word	0x20014788

20009918 <_kill_r>:
20009918:	b538      	push	{r3, r4, r5, lr}
2000991a:	4d07      	ldr	r5, [pc, #28]	; (20009938 <_kill_r+0x20>)
2000991c:	2300      	movs	r3, #0
2000991e:	4604      	mov	r4, r0
20009920:	4608      	mov	r0, r1
20009922:	4611      	mov	r1, r2
20009924:	602b      	str	r3, [r5, #0]
20009926:	f7fa fde5 	bl	200044f4 <_kill>
2000992a:	1c43      	adds	r3, r0, #1
2000992c:	d102      	bne.n	20009934 <_kill_r+0x1c>
2000992e:	682b      	ldr	r3, [r5, #0]
20009930:	b103      	cbz	r3, 20009934 <_kill_r+0x1c>
20009932:	6023      	str	r3, [r4, #0]
20009934:	bd38      	pop	{r3, r4, r5, pc}
20009936:	bf00      	nop
20009938:	20014b04 	.word	0x20014b04

2000993c <_getpid_r>:
2000993c:	f7fa bdd2 	b.w	200044e4 <_getpid>

20009940 <__sread>:
20009940:	b510      	push	{r4, lr}
20009942:	460c      	mov	r4, r1
20009944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20009948:	f000 f894 	bl	20009a74 <_read_r>
2000994c:	2800      	cmp	r0, #0
2000994e:	bfab      	itete	ge
20009950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
20009952:	89a3      	ldrhlt	r3, [r4, #12]
20009954:	181b      	addge	r3, r3, r0
20009956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
2000995a:	bfac      	ite	ge
2000995c:	6563      	strge	r3, [r4, #84]	; 0x54
2000995e:	81a3      	strhlt	r3, [r4, #12]
20009960:	bd10      	pop	{r4, pc}

20009962 <__swrite>:
20009962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20009966:	461f      	mov	r7, r3
20009968:	898b      	ldrh	r3, [r1, #12]
2000996a:	05db      	lsls	r3, r3, #23
2000996c:	4605      	mov	r5, r0
2000996e:	460c      	mov	r4, r1
20009970:	4616      	mov	r6, r2
20009972:	d505      	bpl.n	20009980 <__swrite+0x1e>
20009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20009978:	2302      	movs	r3, #2
2000997a:	2200      	movs	r2, #0
2000997c:	f000 f868 	bl	20009a50 <_lseek_r>
20009980:	89a3      	ldrh	r3, [r4, #12]
20009982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
20009986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2000998a:	81a3      	strh	r3, [r4, #12]
2000998c:	4632      	mov	r2, r6
2000998e:	463b      	mov	r3, r7
20009990:	4628      	mov	r0, r5
20009992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
20009996:	f000 b817 	b.w	200099c8 <_write_r>

2000999a <__sseek>:
2000999a:	b510      	push	{r4, lr}
2000999c:	460c      	mov	r4, r1
2000999e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
200099a2:	f000 f855 	bl	20009a50 <_lseek_r>
200099a6:	1c43      	adds	r3, r0, #1
200099a8:	89a3      	ldrh	r3, [r4, #12]
200099aa:	bf15      	itete	ne
200099ac:	6560      	strne	r0, [r4, #84]	; 0x54
200099ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
200099b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
200099b6:	81a3      	strheq	r3, [r4, #12]
200099b8:	bf18      	it	ne
200099ba:	81a3      	strhne	r3, [r4, #12]
200099bc:	bd10      	pop	{r4, pc}

200099be <__sclose>:
200099be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
200099c2:	f000 b813 	b.w	200099ec <_close_r>
	...

200099c8 <_write_r>:
200099c8:	b538      	push	{r3, r4, r5, lr}
200099ca:	4d07      	ldr	r5, [pc, #28]	; (200099e8 <_write_r+0x20>)
200099cc:	4604      	mov	r4, r0
200099ce:	4608      	mov	r0, r1
200099d0:	4611      	mov	r1, r2
200099d2:	2200      	movs	r2, #0
200099d4:	602a      	str	r2, [r5, #0]
200099d6:	461a      	mov	r2, r3
200099d8:	f7fa fdc3 	bl	20004562 <_write>
200099dc:	1c43      	adds	r3, r0, #1
200099de:	d102      	bne.n	200099e6 <_write_r+0x1e>
200099e0:	682b      	ldr	r3, [r5, #0]
200099e2:	b103      	cbz	r3, 200099e6 <_write_r+0x1e>
200099e4:	6023      	str	r3, [r4, #0]
200099e6:	bd38      	pop	{r3, r4, r5, pc}
200099e8:	20014b04 	.word	0x20014b04

200099ec <_close_r>:
200099ec:	b538      	push	{r3, r4, r5, lr}
200099ee:	4d06      	ldr	r5, [pc, #24]	; (20009a08 <_close_r+0x1c>)
200099f0:	2300      	movs	r3, #0
200099f2:	4604      	mov	r4, r0
200099f4:	4608      	mov	r0, r1
200099f6:	602b      	str	r3, [r5, #0]
200099f8:	f7fa fdcf 	bl	2000459a <_close>
200099fc:	1c43      	adds	r3, r0, #1
200099fe:	d102      	bne.n	20009a06 <_close_r+0x1a>
20009a00:	682b      	ldr	r3, [r5, #0]
20009a02:	b103      	cbz	r3, 20009a06 <_close_r+0x1a>
20009a04:	6023      	str	r3, [r4, #0]
20009a06:	bd38      	pop	{r3, r4, r5, pc}
20009a08:	20014b04 	.word	0x20014b04

20009a0c <_fstat_r>:
20009a0c:	b538      	push	{r3, r4, r5, lr}
20009a0e:	4d07      	ldr	r5, [pc, #28]	; (20009a2c <_fstat_r+0x20>)
20009a10:	2300      	movs	r3, #0
20009a12:	4604      	mov	r4, r0
20009a14:	4608      	mov	r0, r1
20009a16:	4611      	mov	r1, r2
20009a18:	602b      	str	r3, [r5, #0]
20009a1a:	f7fa fdca 	bl	200045b2 <_fstat>
20009a1e:	1c43      	adds	r3, r0, #1
20009a20:	d102      	bne.n	20009a28 <_fstat_r+0x1c>
20009a22:	682b      	ldr	r3, [r5, #0]
20009a24:	b103      	cbz	r3, 20009a28 <_fstat_r+0x1c>
20009a26:	6023      	str	r3, [r4, #0]
20009a28:	bd38      	pop	{r3, r4, r5, pc}
20009a2a:	bf00      	nop
20009a2c:	20014b04 	.word	0x20014b04

20009a30 <_isatty_r>:
20009a30:	b538      	push	{r3, r4, r5, lr}
20009a32:	4d06      	ldr	r5, [pc, #24]	; (20009a4c <_isatty_r+0x1c>)
20009a34:	2300      	movs	r3, #0
20009a36:	4604      	mov	r4, r0
20009a38:	4608      	mov	r0, r1
20009a3a:	602b      	str	r3, [r5, #0]
20009a3c:	f7fa fdc9 	bl	200045d2 <_isatty>
20009a40:	1c43      	adds	r3, r0, #1
20009a42:	d102      	bne.n	20009a4a <_isatty_r+0x1a>
20009a44:	682b      	ldr	r3, [r5, #0]
20009a46:	b103      	cbz	r3, 20009a4a <_isatty_r+0x1a>
20009a48:	6023      	str	r3, [r4, #0]
20009a4a:	bd38      	pop	{r3, r4, r5, pc}
20009a4c:	20014b04 	.word	0x20014b04

20009a50 <_lseek_r>:
20009a50:	b538      	push	{r3, r4, r5, lr}
20009a52:	4d07      	ldr	r5, [pc, #28]	; (20009a70 <_lseek_r+0x20>)
20009a54:	4604      	mov	r4, r0
20009a56:	4608      	mov	r0, r1
20009a58:	4611      	mov	r1, r2
20009a5a:	2200      	movs	r2, #0
20009a5c:	602a      	str	r2, [r5, #0]
20009a5e:	461a      	mov	r2, r3
20009a60:	f7fa fdc2 	bl	200045e8 <_lseek>
20009a64:	1c43      	adds	r3, r0, #1
20009a66:	d102      	bne.n	20009a6e <_lseek_r+0x1e>
20009a68:	682b      	ldr	r3, [r5, #0]
20009a6a:	b103      	cbz	r3, 20009a6e <_lseek_r+0x1e>
20009a6c:	6023      	str	r3, [r4, #0]
20009a6e:	bd38      	pop	{r3, r4, r5, pc}
20009a70:	20014b04 	.word	0x20014b04

20009a74 <_read_r>:
20009a74:	b538      	push	{r3, r4, r5, lr}
20009a76:	4d07      	ldr	r5, [pc, #28]	; (20009a94 <_read_r+0x20>)
20009a78:	4604      	mov	r4, r0
20009a7a:	4608      	mov	r0, r1
20009a7c:	4611      	mov	r1, r2
20009a7e:	2200      	movs	r2, #0
20009a80:	602a      	str	r2, [r5, #0]
20009a82:	461a      	mov	r2, r3
20009a84:	f7fa fd50 	bl	20004528 <_read>
20009a88:	1c43      	adds	r3, r0, #1
20009a8a:	d102      	bne.n	20009a92 <_read_r+0x1e>
20009a8c:	682b      	ldr	r3, [r5, #0]
20009a8e:	b103      	cbz	r3, 20009a92 <_read_r+0x1e>
20009a90:	6023      	str	r3, [r4, #0]
20009a92:	bd38      	pop	{r3, r4, r5, pc}
20009a94:	20014b04 	.word	0x20014b04

20009a98 <_init>:
20009a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20009a9a:	bf00      	nop
20009a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
20009a9e:	bc08      	pop	{r3}
20009aa0:	469e      	mov	lr, r3
20009aa2:	4770      	bx	lr

20009aa4 <_fini>:
20009aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20009aa6:	bf00      	nop
20009aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
20009aaa:	bc08      	pop	{r3}
20009aac:	469e      	mov	lr, r3
20009aae:	4770      	bx	lr
