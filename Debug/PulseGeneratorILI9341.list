
PulseGeneratorILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  20000000  20000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eac  200001a0  200001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a8a0  2000704c  2000704c  0001704c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  200118ec  200118ec  0002199c  2**0
                  CONTENTS
  4 .ARM          00000008  200118ec  200118ec  000218ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  200118f4  2001199c  0002199c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  200118f4  200118f4  000218f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  200118f8  200118f8  000218f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  200118fc  200118fc  000218fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2001199c  2001199c  0002199c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011b38  20011b38  0002199c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002199c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fda4  00000000  00000000  000219cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002926  00000000  00000000  00031770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00034098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001824f  00000000  00000000  00034fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012a5a  00000000  00000000  0004d1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008f5e3  00000000  00000000  0005fc59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000ef23c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000dc0  00000000  00000000  000ef290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040e8  00000000  00000000  000f0050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001a0 <__do_global_dtors_aux>:
200001a0:	b510      	push	{r4, lr}
200001a2:	4c05      	ldr	r4, [pc, #20]	; (200001b8 <__do_global_dtors_aux+0x18>)
200001a4:	7823      	ldrb	r3, [r4, #0]
200001a6:	b933      	cbnz	r3, 200001b6 <__do_global_dtors_aux+0x16>
200001a8:	4b04      	ldr	r3, [pc, #16]	; (200001bc <__do_global_dtors_aux+0x1c>)
200001aa:	b113      	cbz	r3, 200001b2 <__do_global_dtors_aux+0x12>
200001ac:	4804      	ldr	r0, [pc, #16]	; (200001c0 <__do_global_dtors_aux+0x20>)
200001ae:	f3af 8000 	nop.w
200001b2:	2301      	movs	r3, #1
200001b4:	7023      	strb	r3, [r4, #0]
200001b6:	bd10      	pop	{r4, pc}
200001b8:	2001199c 	.word	0x2001199c
200001bc:	00000000 	.word	0x00000000
200001c0:	20007034 	.word	0x20007034

200001c4 <frame_dummy>:
200001c4:	b508      	push	{r3, lr}
200001c6:	4b03      	ldr	r3, [pc, #12]	; (200001d4 <frame_dummy+0x10>)
200001c8:	b11b      	cbz	r3, 200001d2 <frame_dummy+0xe>
200001ca:	4903      	ldr	r1, [pc, #12]	; (200001d8 <frame_dummy+0x14>)
200001cc:	4803      	ldr	r0, [pc, #12]	; (200001dc <frame_dummy+0x18>)
200001ce:	f3af 8000 	nop.w
200001d2:	bd08      	pop	{r3, pc}
200001d4:	00000000 	.word	0x00000000
200001d8:	200119a0 	.word	0x200119a0
200001dc:	20007034 	.word	0x20007034

200001e0 <memchr>:
200001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
200001e4:	2a10      	cmp	r2, #16
200001e6:	db2b      	blt.n	20000240 <memchr+0x60>
200001e8:	f010 0f07 	tst.w	r0, #7
200001ec:	d008      	beq.n	20000200 <memchr+0x20>
200001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
200001f2:	3a01      	subs	r2, #1
200001f4:	428b      	cmp	r3, r1
200001f6:	d02d      	beq.n	20000254 <memchr+0x74>
200001f8:	f010 0f07 	tst.w	r0, #7
200001fc:	b342      	cbz	r2, 20000250 <memchr+0x70>
200001fe:	d1f6      	bne.n	200001ee <memchr+0xe>
20000200:	b4f0      	push	{r4, r5, r6, r7}
20000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
20000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2000020a:	f022 0407 	bic.w	r4, r2, #7
2000020e:	f07f 0700 	mvns.w	r7, #0
20000212:	2300      	movs	r3, #0
20000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
20000218:	3c08      	subs	r4, #8
2000021a:	ea85 0501 	eor.w	r5, r5, r1
2000021e:	ea86 0601 	eor.w	r6, r6, r1
20000222:	fa85 f547 	uadd8	r5, r5, r7
20000226:	faa3 f587 	sel	r5, r3, r7
2000022a:	fa86 f647 	uadd8	r6, r6, r7
2000022e:	faa5 f687 	sel	r6, r5, r7
20000232:	b98e      	cbnz	r6, 20000258 <memchr+0x78>
20000234:	d1ee      	bne.n	20000214 <memchr+0x34>
20000236:	bcf0      	pop	{r4, r5, r6, r7}
20000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000023c:	f002 0207 	and.w	r2, r2, #7
20000240:	b132      	cbz	r2, 20000250 <memchr+0x70>
20000242:	f810 3b01 	ldrb.w	r3, [r0], #1
20000246:	3a01      	subs	r2, #1
20000248:	ea83 0301 	eor.w	r3, r3, r1
2000024c:	b113      	cbz	r3, 20000254 <memchr+0x74>
2000024e:	d1f8      	bne.n	20000242 <memchr+0x62>
20000250:	2000      	movs	r0, #0
20000252:	4770      	bx	lr
20000254:	3801      	subs	r0, #1
20000256:	4770      	bx	lr
20000258:	2d00      	cmp	r5, #0
2000025a:	bf06      	itte	eq
2000025c:	4635      	moveq	r5, r6
2000025e:	3803      	subeq	r0, #3
20000260:	3807      	subne	r0, #7
20000262:	f015 0f01 	tst.w	r5, #1
20000266:	d107      	bne.n	20000278 <memchr+0x98>
20000268:	3001      	adds	r0, #1
2000026a:	f415 7f80 	tst.w	r5, #256	; 0x100
2000026e:	bf02      	ittt	eq
20000270:	3001      	addeq	r0, #1
20000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
20000276:	3001      	addeq	r0, #1
20000278:	bcf0      	pop	{r4, r5, r6, r7}
2000027a:	3801      	subs	r0, #1
2000027c:	4770      	bx	lr
2000027e:	bf00      	nop

20000280 <__aeabi_uldivmod>:
20000280:	b953      	cbnz	r3, 20000298 <__aeabi_uldivmod+0x18>
20000282:	b94a      	cbnz	r2, 20000298 <__aeabi_uldivmod+0x18>
20000284:	2900      	cmp	r1, #0
20000286:	bf08      	it	eq
20000288:	2800      	cmpeq	r0, #0
2000028a:	bf1c      	itt	ne
2000028c:	f04f 31ff 	movne.w	r1, #4294967295
20000290:	f04f 30ff 	movne.w	r0, #4294967295
20000294:	f000 b974 	b.w	20000580 <__aeabi_idiv0>
20000298:	f1ad 0c08 	sub.w	ip, sp, #8
2000029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
200002a0:	f000 f806 	bl	200002b0 <__udivmoddi4>
200002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
200002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
200002ac:	b004      	add	sp, #16
200002ae:	4770      	bx	lr

200002b0 <__udivmoddi4>:
200002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
200002b4:	9d08      	ldr	r5, [sp, #32]
200002b6:	4604      	mov	r4, r0
200002b8:	468e      	mov	lr, r1
200002ba:	2b00      	cmp	r3, #0
200002bc:	d14d      	bne.n	2000035a <__udivmoddi4+0xaa>
200002be:	428a      	cmp	r2, r1
200002c0:	4694      	mov	ip, r2
200002c2:	d969      	bls.n	20000398 <__udivmoddi4+0xe8>
200002c4:	fab2 f282 	clz	r2, r2
200002c8:	b152      	cbz	r2, 200002e0 <__udivmoddi4+0x30>
200002ca:	fa01 f302 	lsl.w	r3, r1, r2
200002ce:	f1c2 0120 	rsb	r1, r2, #32
200002d2:	fa20 f101 	lsr.w	r1, r0, r1
200002d6:	fa0c fc02 	lsl.w	ip, ip, r2
200002da:	ea41 0e03 	orr.w	lr, r1, r3
200002de:	4094      	lsls	r4, r2
200002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
200002e4:	0c21      	lsrs	r1, r4, #16
200002e6:	fbbe f6f8 	udiv	r6, lr, r8
200002ea:	fa1f f78c 	uxth.w	r7, ip
200002ee:	fb08 e316 	mls	r3, r8, r6, lr
200002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
200002f6:	fb06 f107 	mul.w	r1, r6, r7
200002fa:	4299      	cmp	r1, r3
200002fc:	d90a      	bls.n	20000314 <__udivmoddi4+0x64>
200002fe:	eb1c 0303 	adds.w	r3, ip, r3
20000302:	f106 30ff 	add.w	r0, r6, #4294967295
20000306:	f080 811f 	bcs.w	20000548 <__udivmoddi4+0x298>
2000030a:	4299      	cmp	r1, r3
2000030c:	f240 811c 	bls.w	20000548 <__udivmoddi4+0x298>
20000310:	3e02      	subs	r6, #2
20000312:	4463      	add	r3, ip
20000314:	1a5b      	subs	r3, r3, r1
20000316:	b2a4      	uxth	r4, r4
20000318:	fbb3 f0f8 	udiv	r0, r3, r8
2000031c:	fb08 3310 	mls	r3, r8, r0, r3
20000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000324:	fb00 f707 	mul.w	r7, r0, r7
20000328:	42a7      	cmp	r7, r4
2000032a:	d90a      	bls.n	20000342 <__udivmoddi4+0x92>
2000032c:	eb1c 0404 	adds.w	r4, ip, r4
20000330:	f100 33ff 	add.w	r3, r0, #4294967295
20000334:	f080 810a 	bcs.w	2000054c <__udivmoddi4+0x29c>
20000338:	42a7      	cmp	r7, r4
2000033a:	f240 8107 	bls.w	2000054c <__udivmoddi4+0x29c>
2000033e:	4464      	add	r4, ip
20000340:	3802      	subs	r0, #2
20000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000346:	1be4      	subs	r4, r4, r7
20000348:	2600      	movs	r6, #0
2000034a:	b11d      	cbz	r5, 20000354 <__udivmoddi4+0xa4>
2000034c:	40d4      	lsrs	r4, r2
2000034e:	2300      	movs	r3, #0
20000350:	e9c5 4300 	strd	r4, r3, [r5]
20000354:	4631      	mov	r1, r6
20000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000035a:	428b      	cmp	r3, r1
2000035c:	d909      	bls.n	20000372 <__udivmoddi4+0xc2>
2000035e:	2d00      	cmp	r5, #0
20000360:	f000 80ef 	beq.w	20000542 <__udivmoddi4+0x292>
20000364:	2600      	movs	r6, #0
20000366:	e9c5 0100 	strd	r0, r1, [r5]
2000036a:	4630      	mov	r0, r6
2000036c:	4631      	mov	r1, r6
2000036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000372:	fab3 f683 	clz	r6, r3
20000376:	2e00      	cmp	r6, #0
20000378:	d14a      	bne.n	20000410 <__udivmoddi4+0x160>
2000037a:	428b      	cmp	r3, r1
2000037c:	d302      	bcc.n	20000384 <__udivmoddi4+0xd4>
2000037e:	4282      	cmp	r2, r0
20000380:	f200 80f9 	bhi.w	20000576 <__udivmoddi4+0x2c6>
20000384:	1a84      	subs	r4, r0, r2
20000386:	eb61 0303 	sbc.w	r3, r1, r3
2000038a:	2001      	movs	r0, #1
2000038c:	469e      	mov	lr, r3
2000038e:	2d00      	cmp	r5, #0
20000390:	d0e0      	beq.n	20000354 <__udivmoddi4+0xa4>
20000392:	e9c5 4e00 	strd	r4, lr, [r5]
20000396:	e7dd      	b.n	20000354 <__udivmoddi4+0xa4>
20000398:	b902      	cbnz	r2, 2000039c <__udivmoddi4+0xec>
2000039a:	deff      	udf	#255	; 0xff
2000039c:	fab2 f282 	clz	r2, r2
200003a0:	2a00      	cmp	r2, #0
200003a2:	f040 8092 	bne.w	200004ca <__udivmoddi4+0x21a>
200003a6:	eba1 010c 	sub.w	r1, r1, ip
200003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
200003ae:	fa1f fe8c 	uxth.w	lr, ip
200003b2:	2601      	movs	r6, #1
200003b4:	0c20      	lsrs	r0, r4, #16
200003b6:	fbb1 f3f7 	udiv	r3, r1, r7
200003ba:	fb07 1113 	mls	r1, r7, r3, r1
200003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
200003c2:	fb0e f003 	mul.w	r0, lr, r3
200003c6:	4288      	cmp	r0, r1
200003c8:	d908      	bls.n	200003dc <__udivmoddi4+0x12c>
200003ca:	eb1c 0101 	adds.w	r1, ip, r1
200003ce:	f103 38ff 	add.w	r8, r3, #4294967295
200003d2:	d202      	bcs.n	200003da <__udivmoddi4+0x12a>
200003d4:	4288      	cmp	r0, r1
200003d6:	f200 80cb 	bhi.w	20000570 <__udivmoddi4+0x2c0>
200003da:	4643      	mov	r3, r8
200003dc:	1a09      	subs	r1, r1, r0
200003de:	b2a4      	uxth	r4, r4
200003e0:	fbb1 f0f7 	udiv	r0, r1, r7
200003e4:	fb07 1110 	mls	r1, r7, r0, r1
200003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
200003ec:	fb0e fe00 	mul.w	lr, lr, r0
200003f0:	45a6      	cmp	lr, r4
200003f2:	d908      	bls.n	20000406 <__udivmoddi4+0x156>
200003f4:	eb1c 0404 	adds.w	r4, ip, r4
200003f8:	f100 31ff 	add.w	r1, r0, #4294967295
200003fc:	d202      	bcs.n	20000404 <__udivmoddi4+0x154>
200003fe:	45a6      	cmp	lr, r4
20000400:	f200 80bb 	bhi.w	2000057a <__udivmoddi4+0x2ca>
20000404:	4608      	mov	r0, r1
20000406:	eba4 040e 	sub.w	r4, r4, lr
2000040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
2000040e:	e79c      	b.n	2000034a <__udivmoddi4+0x9a>
20000410:	f1c6 0720 	rsb	r7, r6, #32
20000414:	40b3      	lsls	r3, r6
20000416:	fa22 fc07 	lsr.w	ip, r2, r7
2000041a:	ea4c 0c03 	orr.w	ip, ip, r3
2000041e:	fa20 f407 	lsr.w	r4, r0, r7
20000422:	fa01 f306 	lsl.w	r3, r1, r6
20000426:	431c      	orrs	r4, r3
20000428:	40f9      	lsrs	r1, r7
2000042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
2000042e:	fa00 f306 	lsl.w	r3, r0, r6
20000432:	fbb1 f8f9 	udiv	r8, r1, r9
20000436:	0c20      	lsrs	r0, r4, #16
20000438:	fa1f fe8c 	uxth.w	lr, ip
2000043c:	fb09 1118 	mls	r1, r9, r8, r1
20000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
20000444:	fb08 f00e 	mul.w	r0, r8, lr
20000448:	4288      	cmp	r0, r1
2000044a:	fa02 f206 	lsl.w	r2, r2, r6
2000044e:	d90b      	bls.n	20000468 <__udivmoddi4+0x1b8>
20000450:	eb1c 0101 	adds.w	r1, ip, r1
20000454:	f108 3aff 	add.w	sl, r8, #4294967295
20000458:	f080 8088 	bcs.w	2000056c <__udivmoddi4+0x2bc>
2000045c:	4288      	cmp	r0, r1
2000045e:	f240 8085 	bls.w	2000056c <__udivmoddi4+0x2bc>
20000462:	f1a8 0802 	sub.w	r8, r8, #2
20000466:	4461      	add	r1, ip
20000468:	1a09      	subs	r1, r1, r0
2000046a:	b2a4      	uxth	r4, r4
2000046c:	fbb1 f0f9 	udiv	r0, r1, r9
20000470:	fb09 1110 	mls	r1, r9, r0, r1
20000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
20000478:	fb00 fe0e 	mul.w	lr, r0, lr
2000047c:	458e      	cmp	lr, r1
2000047e:	d908      	bls.n	20000492 <__udivmoddi4+0x1e2>
20000480:	eb1c 0101 	adds.w	r1, ip, r1
20000484:	f100 34ff 	add.w	r4, r0, #4294967295
20000488:	d26c      	bcs.n	20000564 <__udivmoddi4+0x2b4>
2000048a:	458e      	cmp	lr, r1
2000048c:	d96a      	bls.n	20000564 <__udivmoddi4+0x2b4>
2000048e:	3802      	subs	r0, #2
20000490:	4461      	add	r1, ip
20000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
20000496:	fba0 9402 	umull	r9, r4, r0, r2
2000049a:	eba1 010e 	sub.w	r1, r1, lr
2000049e:	42a1      	cmp	r1, r4
200004a0:	46c8      	mov	r8, r9
200004a2:	46a6      	mov	lr, r4
200004a4:	d356      	bcc.n	20000554 <__udivmoddi4+0x2a4>
200004a6:	d053      	beq.n	20000550 <__udivmoddi4+0x2a0>
200004a8:	b15d      	cbz	r5, 200004c2 <__udivmoddi4+0x212>
200004aa:	ebb3 0208 	subs.w	r2, r3, r8
200004ae:	eb61 010e 	sbc.w	r1, r1, lr
200004b2:	fa01 f707 	lsl.w	r7, r1, r7
200004b6:	fa22 f306 	lsr.w	r3, r2, r6
200004ba:	40f1      	lsrs	r1, r6
200004bc:	431f      	orrs	r7, r3
200004be:	e9c5 7100 	strd	r7, r1, [r5]
200004c2:	2600      	movs	r6, #0
200004c4:	4631      	mov	r1, r6
200004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200004ca:	f1c2 0320 	rsb	r3, r2, #32
200004ce:	40d8      	lsrs	r0, r3
200004d0:	fa0c fc02 	lsl.w	ip, ip, r2
200004d4:	fa21 f303 	lsr.w	r3, r1, r3
200004d8:	4091      	lsls	r1, r2
200004da:	4301      	orrs	r1, r0
200004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
200004e0:	fa1f fe8c 	uxth.w	lr, ip
200004e4:	fbb3 f0f7 	udiv	r0, r3, r7
200004e8:	fb07 3610 	mls	r6, r7, r0, r3
200004ec:	0c0b      	lsrs	r3, r1, #16
200004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
200004f2:	fb00 f60e 	mul.w	r6, r0, lr
200004f6:	429e      	cmp	r6, r3
200004f8:	fa04 f402 	lsl.w	r4, r4, r2
200004fc:	d908      	bls.n	20000510 <__udivmoddi4+0x260>
200004fe:	eb1c 0303 	adds.w	r3, ip, r3
20000502:	f100 38ff 	add.w	r8, r0, #4294967295
20000506:	d22f      	bcs.n	20000568 <__udivmoddi4+0x2b8>
20000508:	429e      	cmp	r6, r3
2000050a:	d92d      	bls.n	20000568 <__udivmoddi4+0x2b8>
2000050c:	3802      	subs	r0, #2
2000050e:	4463      	add	r3, ip
20000510:	1b9b      	subs	r3, r3, r6
20000512:	b289      	uxth	r1, r1
20000514:	fbb3 f6f7 	udiv	r6, r3, r7
20000518:	fb07 3316 	mls	r3, r7, r6, r3
2000051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
20000520:	fb06 f30e 	mul.w	r3, r6, lr
20000524:	428b      	cmp	r3, r1
20000526:	d908      	bls.n	2000053a <__udivmoddi4+0x28a>
20000528:	eb1c 0101 	adds.w	r1, ip, r1
2000052c:	f106 38ff 	add.w	r8, r6, #4294967295
20000530:	d216      	bcs.n	20000560 <__udivmoddi4+0x2b0>
20000532:	428b      	cmp	r3, r1
20000534:	d914      	bls.n	20000560 <__udivmoddi4+0x2b0>
20000536:	3e02      	subs	r6, #2
20000538:	4461      	add	r1, ip
2000053a:	1ac9      	subs	r1, r1, r3
2000053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
20000540:	e738      	b.n	200003b4 <__udivmoddi4+0x104>
20000542:	462e      	mov	r6, r5
20000544:	4628      	mov	r0, r5
20000546:	e705      	b.n	20000354 <__udivmoddi4+0xa4>
20000548:	4606      	mov	r6, r0
2000054a:	e6e3      	b.n	20000314 <__udivmoddi4+0x64>
2000054c:	4618      	mov	r0, r3
2000054e:	e6f8      	b.n	20000342 <__udivmoddi4+0x92>
20000550:	454b      	cmp	r3, r9
20000552:	d2a9      	bcs.n	200004a8 <__udivmoddi4+0x1f8>
20000554:	ebb9 0802 	subs.w	r8, r9, r2
20000558:	eb64 0e0c 	sbc.w	lr, r4, ip
2000055c:	3801      	subs	r0, #1
2000055e:	e7a3      	b.n	200004a8 <__udivmoddi4+0x1f8>
20000560:	4646      	mov	r6, r8
20000562:	e7ea      	b.n	2000053a <__udivmoddi4+0x28a>
20000564:	4620      	mov	r0, r4
20000566:	e794      	b.n	20000492 <__udivmoddi4+0x1e2>
20000568:	4640      	mov	r0, r8
2000056a:	e7d1      	b.n	20000510 <__udivmoddi4+0x260>
2000056c:	46d0      	mov	r8, sl
2000056e:	e77b      	b.n	20000468 <__udivmoddi4+0x1b8>
20000570:	3b02      	subs	r3, #2
20000572:	4461      	add	r1, ip
20000574:	e732      	b.n	200003dc <__udivmoddi4+0x12c>
20000576:	4630      	mov	r0, r6
20000578:	e709      	b.n	2000038e <__udivmoddi4+0xde>
2000057a:	4464      	add	r4, ip
2000057c:	3802      	subs	r0, #2
2000057e:	e742      	b.n	20000406 <__udivmoddi4+0x156>

20000580 <__aeabi_idiv0>:
20000580:	4770      	bx	lr
20000582:	bf00      	nop

20000584 <mySPISend>:
/**************************************************************************
 @brief     функция для отправки в SPI. + ожидание окончания передачи.
 @param    buff указатель на буфер отправки
 @param    buff_size размер буфера
 **************************************************************************/
void mySPISend(uint8_t *buff, uint16_t buff_size) {
20000584:	b480      	push	{r7}
20000586:	b083      	sub	sp, #12
20000588:	af00      	add	r7, sp, #0
2000058a:	6078      	str	r0, [r7, #4]
2000058c:	460b      	mov	r3, r1
2000058e:	807b      	strh	r3, [r7, #2]
	while (buff_size > 0) {
20000590:	e010      	b.n	200005b4 <mySPISend+0x30>
		SPI1->DR = *buff;
20000592:	687b      	ldr	r3, [r7, #4]
20000594:	781a      	ldrb	r2, [r3, #0]
20000596:	4b10      	ldr	r3, [pc, #64]	; (200005d8 <mySPISend+0x54>)
20000598:	60da      	str	r2, [r3, #12]
		while (!READ_BIT(SPI1->SR, SPI_SR_TXE))
2000059a:	bf00      	nop
2000059c:	4b0e      	ldr	r3, [pc, #56]	; (200005d8 <mySPISend+0x54>)
2000059e:	689b      	ldr	r3, [r3, #8]
200005a0:	f003 0302 	and.w	r3, r3, #2
200005a4:	2b00      	cmp	r3, #0
200005a6:	d0f9      	beq.n	2000059c <mySPISend+0x18>
			;
		buff++;
200005a8:	687b      	ldr	r3, [r7, #4]
200005aa:	3301      	adds	r3, #1
200005ac:	607b      	str	r3, [r7, #4]
		buff_size--;
200005ae:	887b      	ldrh	r3, [r7, #2]
200005b0:	3b01      	subs	r3, #1
200005b2:	807b      	strh	r3, [r7, #2]
	while (buff_size > 0) {
200005b4:	887b      	ldrh	r3, [r7, #2]
200005b6:	2b00      	cmp	r3, #0
200005b8:	d1eb      	bne.n	20000592 <mySPISend+0xe>
	}
	while (READ_BIT(SPI1->SR, SPI_SR_BSY))
200005ba:	bf00      	nop
200005bc:	4b06      	ldr	r3, [pc, #24]	; (200005d8 <mySPISend+0x54>)
200005be:	689b      	ldr	r3, [r3, #8]
200005c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
200005c4:	2b00      	cmp	r3, #0
200005c6:	d1f9      	bne.n	200005bc <mySPISend+0x38>
		;
}
200005c8:	bf00      	nop
200005ca:	bf00      	nop
200005cc:	370c      	adds	r7, #12
200005ce:	46bd      	mov	sp, r7
200005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
200005d4:	4770      	bx	lr
200005d6:	bf00      	nop
200005d8:	40013000 	.word	0x40013000

200005dc <ILI9341_Select>:

/**************************************************************************
 @brief     drive pin CS to GND
 **************************************************************************/
void ILI9341_Select() {
200005dc:	b480      	push	{r7}
200005de:	af00      	add	r7, sp, #0
	CS_RESET;
200005e0:	4b05      	ldr	r3, [pc, #20]	; (200005f8 <ILI9341_Select+0x1c>)
200005e2:	699b      	ldr	r3, [r3, #24]
200005e4:	4a04      	ldr	r2, [pc, #16]	; (200005f8 <ILI9341_Select+0x1c>)
200005e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
200005ea:	6193      	str	r3, [r2, #24]
	//HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
}
200005ec:	bf00      	nop
200005ee:	46bd      	mov	sp, r7
200005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
200005f4:	4770      	bx	lr
200005f6:	bf00      	nop
200005f8:	40020400 	.word	0x40020400

200005fc <ILI9341_Unselect>:

/**************************************************************************
 @brief     drive pin CS to UP
 **************************************************************************/
void ILI9341_Unselect() {
200005fc:	b480      	push	{r7}
200005fe:	af00      	add	r7, sp, #0
	CS_SET;
20000600:	4b05      	ldr	r3, [pc, #20]	; (20000618 <ILI9341_Unselect+0x1c>)
20000602:	699b      	ldr	r3, [r3, #24]
20000604:	4a04      	ldr	r2, [pc, #16]	; (20000618 <ILI9341_Unselect+0x1c>)
20000606:	f043 0304 	orr.w	r3, r3, #4
2000060a:	6193      	str	r3, [r2, #24]
	//HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
}
2000060c:	bf00      	nop
2000060e:	46bd      	mov	sp, r7
20000610:	f85d 7b04 	ldr.w	r7, [sp], #4
20000614:	4770      	bx	lr
20000616:	bf00      	nop
20000618:	40020400 	.word	0x40020400

2000061c <ILI9341_Reset>:

/**************************************************************************
 @brief     drive pin Reset
 **************************************************************************/
static void ILI9341_Reset() {
2000061c:	b580      	push	{r7, lr}
2000061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
20000620:	2200      	movs	r2, #0
20000622:	2102      	movs	r1, #2
20000624:	4806      	ldr	r0, [pc, #24]	; (20000640 <ILI9341_Reset+0x24>)
20000626:	f003 ffb1 	bl	2000458c <HAL_GPIO_WritePin>
	HAL_Delay(5);
2000062a:	2005      	movs	r0, #5
2000062c:	f003 fb16 	bl	20003c5c <HAL_Delay>
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
20000630:	2201      	movs	r2, #1
20000632:	2102      	movs	r1, #2
20000634:	4802      	ldr	r0, [pc, #8]	; (20000640 <ILI9341_Reset+0x24>)
20000636:	f003 ffa9 	bl	2000458c <HAL_GPIO_WritePin>
}
2000063a:	bf00      	nop
2000063c:	bd80      	pop	{r7, pc}
2000063e:	bf00      	nop
20000640:	40020400 	.word	0x40020400

20000644 <ILI9341_WriteCommand>:

/**************************************************************************
 @brief     write comand to display
 @param    cmd number comand
 **************************************************************************/
static void ILI9341_WriteCommand(uint8_t cmd) {
20000644:	b580      	push	{r7, lr}
20000646:	b082      	sub	sp, #8
20000648:	af00      	add	r7, sp, #0
2000064a:	4603      	mov	r3, r0
2000064c:	71fb      	strb	r3, [r7, #7]
	DC_RESET;                      // данные или команда
2000064e:	4b07      	ldr	r3, [pc, #28]	; (2000066c <ILI9341_WriteCommand+0x28>)
20000650:	699b      	ldr	r3, [r3, #24]
20000652:	4a06      	ldr	r2, [pc, #24]	; (2000066c <ILI9341_WriteCommand+0x28>)
20000654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000658:	6193      	str	r3, [r2, #24]
	mySPISend(&cmd, 1);
2000065a:	1dfb      	adds	r3, r7, #7
2000065c:	2101      	movs	r1, #1
2000065e:	4618      	mov	r0, r3
20000660:	f7ff ff90 	bl	20000584 <mySPISend>
}
20000664:	bf00      	nop
20000666:	3708      	adds	r7, #8
20000668:	46bd      	mov	sp, r7
2000066a:	bd80      	pop	{r7, pc}
2000066c:	40020400 	.word	0x40020400

20000670 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t *buff, size_t buff_size) {
20000670:	b580      	push	{r7, lr}
20000672:	b084      	sub	sp, #16
20000674:	af00      	add	r7, sp, #0
20000676:	6078      	str	r0, [r7, #4]
20000678:	6039      	str	r1, [r7, #0]
	DC_SET;                        // данные или команда
2000067a:	4b11      	ldr	r3, [pc, #68]	; (200006c0 <ILI9341_WriteData+0x50>)
2000067c:	699b      	ldr	r3, [r3, #24]
2000067e:	4a10      	ldr	r2, [pc, #64]	; (200006c0 <ILI9341_WriteData+0x50>)
20000680:	f043 0301 	orr.w	r3, r3, #1
20000684:	6193      	str	r3, [r2, #24]
	// split data in small chunks because HAL can't send more then 64K at once
	while (buff_size > 0) {
20000686:	e013      	b.n	200006b0 <ILI9341_WriteData+0x40>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
20000688:	683b      	ldr	r3, [r7, #0]
2000068a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000068e:	bf28      	it	cs
20000690:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
20000694:	81fb      	strh	r3, [r7, #14]
		mySPISend(buff, chunk_size);
20000696:	89fb      	ldrh	r3, [r7, #14]
20000698:	4619      	mov	r1, r3
2000069a:	6878      	ldr	r0, [r7, #4]
2000069c:	f7ff ff72 	bl	20000584 <mySPISend>
		buff += chunk_size;
200006a0:	89fb      	ldrh	r3, [r7, #14]
200006a2:	687a      	ldr	r2, [r7, #4]
200006a4:	4413      	add	r3, r2
200006a6:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
200006a8:	89fb      	ldrh	r3, [r7, #14]
200006aa:	683a      	ldr	r2, [r7, #0]
200006ac:	1ad3      	subs	r3, r2, r3
200006ae:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
200006b0:	683b      	ldr	r3, [r7, #0]
200006b2:	2b00      	cmp	r3, #0
200006b4:	d1e8      	bne.n	20000688 <ILI9341_WriteData+0x18>
	}
}
200006b6:	bf00      	nop
200006b8:	bf00      	nop
200006ba:	3710      	adds	r7, #16
200006bc:	46bd      	mov	sp, r7
200006be:	bd80      	pop	{r7, pc}
200006c0:	40020400 	.word	0x40020400

200006c4 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1,
		uint16_t y1) {
200006c4:	b590      	push	{r4, r7, lr}
200006c6:	b085      	sub	sp, #20
200006c8:	af00      	add	r7, sp, #0
200006ca:	4604      	mov	r4, r0
200006cc:	4608      	mov	r0, r1
200006ce:	4611      	mov	r1, r2
200006d0:	461a      	mov	r2, r3
200006d2:	4623      	mov	r3, r4
200006d4:	80fb      	strh	r3, [r7, #6]
200006d6:	4603      	mov	r3, r0
200006d8:	80bb      	strh	r3, [r7, #4]
200006da:	460b      	mov	r3, r1
200006dc:	807b      	strh	r3, [r7, #2]
200006de:	4613      	mov	r3, r2
200006e0:	803b      	strh	r3, [r7, #0]
	// column address set
	ILI9341_WriteCommand(0x2A); // CASET
200006e2:	202a      	movs	r0, #42	; 0x2a
200006e4:	f7ff ffae 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1
200006e8:	88fb      	ldrh	r3, [r7, #6]
200006ea:	0a1b      	lsrs	r3, r3, #8
200006ec:	b29b      	uxth	r3, r3
200006ee:	b2db      	uxtb	r3, r3
200006f0:	733b      	strb	r3, [r7, #12]
200006f2:	88fb      	ldrh	r3, [r7, #6]
200006f4:	b2db      	uxtb	r3, r3
200006f6:	737b      	strb	r3, [r7, #13]
200006f8:	887b      	ldrh	r3, [r7, #2]
200006fa:	0a1b      	lsrs	r3, r3, #8
200006fc:	b29b      	uxth	r3, r3
200006fe:	b2db      	uxtb	r3, r3
20000700:	73bb      	strb	r3, [r7, #14]
20000702:	887b      	ldrh	r3, [r7, #2]
20000704:	b2db      	uxtb	r3, r3
20000706:	73fb      	strb	r3, [r7, #15]
				& 0xFF };
		ILI9341_WriteData(data, sizeof(data));
20000708:	f107 030c 	add.w	r3, r7, #12
2000070c:	2104      	movs	r1, #4
2000070e:	4618      	mov	r0, r3
20000710:	f7ff ffae 	bl	20000670 <ILI9341_WriteData>
	}
	// row address set
	ILI9341_WriteCommand(0x2B); // RASET
20000714:	202b      	movs	r0, #43	; 0x2b
20000716:	f7ff ff95 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1
2000071a:	88bb      	ldrh	r3, [r7, #4]
2000071c:	0a1b      	lsrs	r3, r3, #8
2000071e:	b29b      	uxth	r3, r3
20000720:	b2db      	uxtb	r3, r3
20000722:	723b      	strb	r3, [r7, #8]
20000724:	88bb      	ldrh	r3, [r7, #4]
20000726:	b2db      	uxtb	r3, r3
20000728:	727b      	strb	r3, [r7, #9]
2000072a:	883b      	ldrh	r3, [r7, #0]
2000072c:	0a1b      	lsrs	r3, r3, #8
2000072e:	b29b      	uxth	r3, r3
20000730:	b2db      	uxtb	r3, r3
20000732:	72bb      	strb	r3, [r7, #10]
20000734:	883b      	ldrh	r3, [r7, #0]
20000736:	b2db      	uxtb	r3, r3
20000738:	72fb      	strb	r3, [r7, #11]
				& 0xFF };
		ILI9341_WriteData(data, sizeof(data));
2000073a:	f107 0308 	add.w	r3, r7, #8
2000073e:	2104      	movs	r1, #4
20000740:	4618      	mov	r0, r3
20000742:	f7ff ff95 	bl	20000670 <ILI9341_WriteData>
	}
	// write to RAM
	ILI9341_WriteCommand(0x2C); // RAMWR
20000746:	202c      	movs	r0, #44	; 0x2c
20000748:	f7ff ff7c 	bl	20000644 <ILI9341_WriteCommand>
}
2000074c:	bf00      	nop
2000074e:	3714      	adds	r7, #20
20000750:	46bd      	mov	sp, r7
20000752:	bd90      	pop	{r4, r7, pc}

20000754 <ILI9341_Init>:

void ILI9341_Init() {
20000754:	b590      	push	{r4, r7, lr}
20000756:	b09b      	sub	sp, #108	; 0x6c
20000758:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Led_Display_GPIO_Port, Led_Display_Pin, GPIO_PIN_SET);
2000075a:	2201      	movs	r2, #1
2000075c:	2110      	movs	r1, #16
2000075e:	4890      	ldr	r0, [pc, #576]	; (200009a0 <ILI9341_Init+0x24c>)
20000760:	f003 ff14 	bl	2000458c <HAL_GPIO_WritePin>
	ILI9341_Select();
20000764:	f7ff ff3a 	bl	200005dc <ILI9341_Select>
	ILI9341_Reset();
20000768:	f7ff ff58 	bl	2000061c <ILI9341_Reset>
	// command list is based on https://github.com/martnak/STM32-ILI9341
	ILI9341_WriteCommand(0x01); // SOFTWARE RESET
2000076c:	2001      	movs	r0, #1
2000076e:	f7ff ff69 	bl	20000644 <ILI9341_WriteCommand>
	HAL_Delay(1000);
20000772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20000776:	f003 fa71 	bl	20003c5c <HAL_Delay>
	ILI9341_WriteCommand(0xCB); // POWER CONTROL A
2000077a:	20cb      	movs	r0, #203	; 0xcb
2000077c:	f7ff ff62 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
20000780:	4a88      	ldr	r2, [pc, #544]	; (200009a4 <ILI9341_Init+0x250>)
20000782:	f107 0360 	add.w	r3, r7, #96	; 0x60
20000786:	e892 0003 	ldmia.w	r2, {r0, r1}
2000078a:	6018      	str	r0, [r3, #0]
2000078c:	3304      	adds	r3, #4
2000078e:	7019      	strb	r1, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
20000790:	f107 0360 	add.w	r3, r7, #96	; 0x60
20000794:	2105      	movs	r1, #5
20000796:	4618      	mov	r0, r3
20000798:	f7ff ff6a 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xCF); // POWER CONTROL B
2000079c:	20cf      	movs	r0, #207	; 0xcf
2000079e:	f7ff ff51 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0xC1, 0x30 };
200007a2:	4a81      	ldr	r2, [pc, #516]	; (200009a8 <ILI9341_Init+0x254>)
200007a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
200007a8:	6812      	ldr	r2, [r2, #0]
200007aa:	4611      	mov	r1, r2
200007ac:	8019      	strh	r1, [r3, #0]
200007ae:	3302      	adds	r3, #2
200007b0:	0c12      	lsrs	r2, r2, #16
200007b2:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
200007b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
200007b8:	2103      	movs	r1, #3
200007ba:	4618      	mov	r0, r3
200007bc:	f7ff ff58 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE8); // DRIVER TIMING CONTROL A
200007c0:	20e8      	movs	r0, #232	; 0xe8
200007c2:	f7ff ff3f 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x85, 0x00, 0x78 };
200007c6:	4a79      	ldr	r2, [pc, #484]	; (200009ac <ILI9341_Init+0x258>)
200007c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
200007cc:	6812      	ldr	r2, [r2, #0]
200007ce:	4611      	mov	r1, r2
200007d0:	8019      	strh	r1, [r3, #0]
200007d2:	3302      	adds	r3, #2
200007d4:	0c12      	lsrs	r2, r2, #16
200007d6:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
200007d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
200007dc:	2103      	movs	r1, #3
200007de:	4618      	mov	r0, r3
200007e0:	f7ff ff46 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xEA); // DRIVER TIMING CONTROL B
200007e4:	20ea      	movs	r0, #234	; 0xea
200007e6:	f7ff ff2d 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x00 };
200007ea:	2300      	movs	r3, #0
200007ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		ILI9341_WriteData(data, sizeof(data));
200007f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
200007f4:	2102      	movs	r1, #2
200007f6:	4618      	mov	r0, r3
200007f8:	f7ff ff3a 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xED);  // POWER ON SEQUENCE CONTROL
200007fc:	20ed      	movs	r0, #237	; 0xed
200007fe:	f7ff ff21 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
20000802:	4b6b      	ldr	r3, [pc, #428]	; (200009b0 <ILI9341_Init+0x25c>)
20000804:	653b      	str	r3, [r7, #80]	; 0x50
		ILI9341_WriteData(data, sizeof(data));
20000806:	f107 0350 	add.w	r3, r7, #80	; 0x50
2000080a:	2104      	movs	r1, #4
2000080c:	4618      	mov	r0, r3
2000080e:	f7ff ff2f 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xF7);  // PUMP RATIO CONTROL
20000812:	20f7      	movs	r0, #247	; 0xf7
20000814:	f7ff ff16 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x20 };
20000818:	2320      	movs	r3, #32
2000081a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		ILI9341_WriteData(data, sizeof(data));
2000081e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
20000822:	2101      	movs	r1, #1
20000824:	4618      	mov	r0, r3
20000826:	f7ff ff23 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC0); // POWER CONTROL,VRH[5:0]
2000082a:	20c0      	movs	r0, #192	; 0xc0
2000082c:	f7ff ff0a 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x23 };
20000830:	2323      	movs	r3, #35	; 0x23
20000832:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		ILI9341_WriteData(data, sizeof(data));
20000836:	f107 0348 	add.w	r3, r7, #72	; 0x48
2000083a:	2101      	movs	r1, #1
2000083c:	4618      	mov	r0, r3
2000083e:	f7ff ff17 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC1); // POWER CONTROL,SAP[2:0];BT[3:0]
20000842:	20c1      	movs	r0, #193	; 0xc1
20000844:	f7ff fefe 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x10 };
20000848:	2310      	movs	r3, #16
2000084a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		ILI9341_WriteData(data, sizeof(data));
2000084e:	f107 0344 	add.w	r3, r7, #68	; 0x44
20000852:	2101      	movs	r1, #1
20000854:	4618      	mov	r0, r3
20000856:	f7ff ff0b 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC5); // VCM CONTROL
2000085a:	20c5      	movs	r0, #197	; 0xc5
2000085c:	f7ff fef2 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x3E, 0x28 };
20000860:	f642 033e 	movw	r3, #10302	; 0x283e
20000864:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		ILI9341_WriteData(data, sizeof(data));
20000868:	f107 0340 	add.w	r3, r7, #64	; 0x40
2000086c:	2102      	movs	r1, #2
2000086e:	4618      	mov	r0, r3
20000870:	f7ff fefe 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC7);  // VCM CONTROL 2
20000874:	20c7      	movs	r0, #199	; 0xc7
20000876:	f7ff fee5 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x86 };
2000087a:	2386      	movs	r3, #134	; 0x86
2000087c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		ILI9341_WriteData(data, sizeof(data));
20000880:	f107 033c 	add.w	r3, r7, #60	; 0x3c
20000884:	2101      	movs	r1, #1
20000886:	4618      	mov	r0, r3
20000888:	f7ff fef2 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x36); // MEMORY ACCESS CONTROL
2000088c:	2036      	movs	r0, #54	; 0x36
2000088e:	f7ff fed9 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x48 };
20000892:	2348      	movs	r3, #72	; 0x48
20000894:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		ILI9341_WriteData(data, sizeof(data));
20000898:	f107 0338 	add.w	r3, r7, #56	; 0x38
2000089c:	2101      	movs	r1, #1
2000089e:	4618      	mov	r0, r3
200008a0:	f7ff fee6 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x3A); // PIXEL FORMAT
200008a4:	203a      	movs	r0, #58	; 0x3a
200008a6:	f7ff fecd 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x55 };
200008aa:	2355      	movs	r3, #85	; 0x55
200008ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		ILI9341_WriteData(data, sizeof(data));
200008b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
200008b4:	2101      	movs	r1, #1
200008b6:	4618      	mov	r0, r3
200008b8:	f7ff feda 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xB1); // FRAME RATIO CONTROL, STANDARD RGB COLOR
200008bc:	20b1      	movs	r0, #177	; 0xb1
200008be:	f7ff fec1 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x18 };
200008c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
200008c6:	863b      	strh	r3, [r7, #48]	; 0x30
		ILI9341_WriteData(data, sizeof(data));
200008c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
200008cc:	2102      	movs	r1, #2
200008ce:	4618      	mov	r0, r3
200008d0:	f7ff fece 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xB6); // DISPLAY FUNCTION CONTROL
200008d4:	20b6      	movs	r0, #182	; 0xb6
200008d6:	f7ff feb5 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x08, 0x82, 0x27 };
200008da:	4a36      	ldr	r2, [pc, #216]	; (200009b4 <ILI9341_Init+0x260>)
200008dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
200008e0:	6812      	ldr	r2, [r2, #0]
200008e2:	4611      	mov	r1, r2
200008e4:	8019      	strh	r1, [r3, #0]
200008e6:	3302      	adds	r3, #2
200008e8:	0c12      	lsrs	r2, r2, #16
200008ea:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
200008ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
200008f0:	2103      	movs	r1, #3
200008f2:	4618      	mov	r0, r3
200008f4:	f7ff febc 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xF2); // 3GAMMA FUNCTION DISABLE
200008f8:	20f2      	movs	r0, #242	; 0xf2
200008fa:	f7ff fea3 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00 };
200008fe:	2300      	movs	r3, #0
20000900:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		ILI9341_WriteData(data, sizeof(data));
20000904:	f107 0328 	add.w	r3, r7, #40	; 0x28
20000908:	2101      	movs	r1, #1
2000090a:	4618      	mov	r0, r3
2000090c:	f7ff feb0 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x26); // GAMMA CURVE SELECTED
20000910:	2026      	movs	r0, #38	; 0x26
20000912:	f7ff fe97 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x01 };
20000916:	2301      	movs	r3, #1
20000918:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		ILI9341_WriteData(data, sizeof(data));
2000091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
20000920:	2101      	movs	r1, #1
20000922:	4618      	mov	r0, r3
20000924:	f7ff fea4 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE0); // POSITIVE GAMMA CORRECTION
20000928:	20e0      	movs	r0, #224	; 0xe0
2000092a:	f7ff fe8b 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1, 0x37,
2000092e:	4b22      	ldr	r3, [pc, #136]	; (200009b8 <ILI9341_Init+0x264>)
20000930:	f107 0414 	add.w	r4, r7, #20
20000934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
20000936:	c407      	stmia	r4!, {r0, r1, r2}
20000938:	8023      	strh	r3, [r4, #0]
2000093a:	3402      	adds	r4, #2
2000093c:	0c1b      	lsrs	r3, r3, #16
2000093e:	7023      	strb	r3, [r4, #0]
				0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
		ILI9341_WriteData(data, sizeof(data));
20000940:	f107 0314 	add.w	r3, r7, #20
20000944:	210f      	movs	r1, #15
20000946:	4618      	mov	r0, r3
20000948:	f7ff fe92 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE1); // NEGATIVE GAMMA CORRECTION
2000094c:	20e1      	movs	r0, #225	; 0xe1
2000094e:	f7ff fe79 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48,
20000952:	4b1a      	ldr	r3, [pc, #104]	; (200009bc <ILI9341_Init+0x268>)
20000954:	1d3c      	adds	r4, r7, #4
20000956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
20000958:	c407      	stmia	r4!, {r0, r1, r2}
2000095a:	8023      	strh	r3, [r4, #0]
2000095c:	3402      	adds	r4, #2
2000095e:	0c1b      	lsrs	r3, r3, #16
20000960:	7023      	strb	r3, [r4, #0]
				0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
		ILI9341_WriteData(data, sizeof(data));
20000962:	1d3b      	adds	r3, r7, #4
20000964:	210f      	movs	r1, #15
20000966:	4618      	mov	r0, r3
20000968:	f7ff fe82 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x11); // EXIT SLEEP
2000096c:	2011      	movs	r0, #17
2000096e:	f7ff fe69 	bl	20000644 <ILI9341_WriteCommand>
	HAL_Delay(120);
20000972:	2078      	movs	r0, #120	; 0x78
20000974:	f003 f972 	bl	20003c5c <HAL_Delay>
	ILI9341_WriteCommand(0x29); // TURN ON DISPLAY
20000978:	2029      	movs	r0, #41	; 0x29
2000097a:	f7ff fe63 	bl	20000644 <ILI9341_WriteCommand>
	ILI9341_WriteCommand(0x36); // MADCTL
2000097e:	2036      	movs	r0, #54	; 0x36
20000980:	f7ff fe60 	bl	20000644 <ILI9341_WriteCommand>
	{
		uint8_t data[] = { ILI9341_ROTATION };
20000984:	23e8      	movs	r3, #232	; 0xe8
20000986:	703b      	strb	r3, [r7, #0]
		ILI9341_WriteData(data, sizeof(data));
20000988:	463b      	mov	r3, r7
2000098a:	2101      	movs	r1, #1
2000098c:	4618      	mov	r0, r3
2000098e:	f7ff fe6f 	bl	20000670 <ILI9341_WriteData>
	}
	ILI9341_Unselect();
20000992:	f7ff fe33 	bl	200005fc <ILI9341_Unselect>
}
20000996:	bf00      	nop
20000998:	376c      	adds	r7, #108	; 0x6c
2000099a:	46bd      	mov	sp, r7
2000099c:	bd90      	pop	{r4, r7, pc}
2000099e:	bf00      	nop
200009a0:	40020000 	.word	0x40020000
200009a4:	2000704c 	.word	0x2000704c
200009a8:	20007054 	.word	0x20007054
200009ac:	20007058 	.word	0x20007058
200009b0:	81120364 	.word	0x81120364
200009b4:	2000705c 	.word	0x2000705c
200009b8:	20007060 	.word	0x20007060
200009bc:	20007070 	.word	0x20007070

200009c0 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
200009c0:	b580      	push	{r7, lr}
200009c2:	b084      	sub	sp, #16
200009c4:	af00      	add	r7, sp, #0
200009c6:	4603      	mov	r3, r0
200009c8:	80fb      	strh	r3, [r7, #6]
200009ca:	460b      	mov	r3, r1
200009cc:	80bb      	strh	r3, [r7, #4]
200009ce:	4613      	mov	r3, r2
200009d0:	807b      	strh	r3, [r7, #2]
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
200009d2:	88fb      	ldrh	r3, [r7, #6]
200009d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
200009d8:	d21f      	bcs.n	20000a1a <ILI9341_DrawPixel+0x5a>
200009da:	88bb      	ldrh	r3, [r7, #4]
200009dc:	2bef      	cmp	r3, #239	; 0xef
200009de:	d81c      	bhi.n	20000a1a <ILI9341_DrawPixel+0x5a>
		return;
	ILI9341_Select();
200009e0:	f7ff fdfc 	bl	200005dc <ILI9341_Select>

	ILI9341_SetAddressWindow(x, y, x + 1, y + 1);
200009e4:	88fb      	ldrh	r3, [r7, #6]
200009e6:	3301      	adds	r3, #1
200009e8:	b29a      	uxth	r2, r3
200009ea:	88bb      	ldrh	r3, [r7, #4]
200009ec:	3301      	adds	r3, #1
200009ee:	b29b      	uxth	r3, r3
200009f0:	88b9      	ldrh	r1, [r7, #4]
200009f2:	88f8      	ldrh	r0, [r7, #6]
200009f4:	f7ff fe66 	bl	200006c4 <ILI9341_SetAddressWindow>
	uint8_t data[] = { color >> 8, color & 0xFF };
200009f8:	887b      	ldrh	r3, [r7, #2]
200009fa:	0a1b      	lsrs	r3, r3, #8
200009fc:	b29b      	uxth	r3, r3
200009fe:	b2db      	uxtb	r3, r3
20000a00:	733b      	strb	r3, [r7, #12]
20000a02:	887b      	ldrh	r3, [r7, #2]
20000a04:	b2db      	uxtb	r3, r3
20000a06:	737b      	strb	r3, [r7, #13]
	ILI9341_WriteData(data, sizeof(data));
20000a08:	f107 030c 	add.w	r3, r7, #12
20000a0c:	2102      	movs	r1, #2
20000a0e:	4618      	mov	r0, r3
20000a10:	f7ff fe2e 	bl	20000670 <ILI9341_WriteData>

	ILI9341_Unselect();
20000a14:	f7ff fdf2 	bl	200005fc <ILI9341_Unselect>
20000a18:	e000      	b.n	20000a1c <ILI9341_DrawPixel+0x5c>
		return;
20000a1a:	bf00      	nop
}
20000a1c:	3710      	adds	r7, #16
20000a1e:	46bd      	mov	sp, r7
20000a20:	bd80      	pop	{r7, pc}
	...

20000a24 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t color) {
20000a24:	b590      	push	{r4, r7, lr}
20000a26:	b085      	sub	sp, #20
20000a28:	af00      	add	r7, sp, #0
20000a2a:	4604      	mov	r4, r0
20000a2c:	4608      	mov	r0, r1
20000a2e:	4611      	mov	r1, r2
20000a30:	461a      	mov	r2, r3
20000a32:	4623      	mov	r3, r4
20000a34:	80fb      	strh	r3, [r7, #6]
20000a36:	4603      	mov	r3, r0
20000a38:	80bb      	strh	r3, [r7, #4]
20000a3a:	460b      	mov	r3, r1
20000a3c:	807b      	strh	r3, [r7, #2]
20000a3e:	4613      	mov	r3, r2
20000a40:	803b      	strh	r3, [r7, #0]
	// clipping
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
20000a42:	88fb      	ldrh	r3, [r7, #6]
20000a44:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20000a48:	d250      	bcs.n	20000aec <ILI9341_FillRectangle+0xc8>
20000a4a:	88bb      	ldrh	r3, [r7, #4]
20000a4c:	2bef      	cmp	r3, #239	; 0xef
20000a4e:	d84d      	bhi.n	20000aec <ILI9341_FillRectangle+0xc8>
		return;
	if ((x + w - 1) >= ILI9341_WIDTH)
20000a50:	88fa      	ldrh	r2, [r7, #6]
20000a52:	887b      	ldrh	r3, [r7, #2]
20000a54:	4413      	add	r3, r2
20000a56:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20000a5a:	dd03      	ble.n	20000a64 <ILI9341_FillRectangle+0x40>
		w = ILI9341_WIDTH - x;
20000a5c:	88fb      	ldrh	r3, [r7, #6]
20000a5e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
20000a62:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= ILI9341_HEIGHT)
20000a64:	88ba      	ldrh	r2, [r7, #4]
20000a66:	883b      	ldrh	r3, [r7, #0]
20000a68:	4413      	add	r3, r2
20000a6a:	2bf0      	cmp	r3, #240	; 0xf0
20000a6c:	dd03      	ble.n	20000a76 <ILI9341_FillRectangle+0x52>
		h = ILI9341_HEIGHT - y;
20000a6e:	88bb      	ldrh	r3, [r7, #4]
20000a70:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
20000a74:	803b      	strh	r3, [r7, #0]

	ILI9341_Select();
20000a76:	f7ff fdb1 	bl	200005dc <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + w - 1, y + h - 1);
20000a7a:	88fa      	ldrh	r2, [r7, #6]
20000a7c:	887b      	ldrh	r3, [r7, #2]
20000a7e:	4413      	add	r3, r2
20000a80:	b29b      	uxth	r3, r3
20000a82:	3b01      	subs	r3, #1
20000a84:	b29c      	uxth	r4, r3
20000a86:	88ba      	ldrh	r2, [r7, #4]
20000a88:	883b      	ldrh	r3, [r7, #0]
20000a8a:	4413      	add	r3, r2
20000a8c:	b29b      	uxth	r3, r3
20000a8e:	3b01      	subs	r3, #1
20000a90:	b29b      	uxth	r3, r3
20000a92:	88b9      	ldrh	r1, [r7, #4]
20000a94:	88f8      	ldrh	r0, [r7, #6]
20000a96:	4622      	mov	r2, r4
20000a98:	f7ff fe14 	bl	200006c4 <ILI9341_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
20000a9c:	8c3b      	ldrh	r3, [r7, #32]
20000a9e:	0a1b      	lsrs	r3, r3, #8
20000aa0:	b29b      	uxth	r3, r3
20000aa2:	b2db      	uxtb	r3, r3
20000aa4:	733b      	strb	r3, [r7, #12]
20000aa6:	8c3b      	ldrh	r3, [r7, #32]
20000aa8:	b2db      	uxtb	r3, r3
20000aaa:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
20000aac:	2201      	movs	r2, #1
20000aae:	2101      	movs	r1, #1
20000ab0:	4810      	ldr	r0, [pc, #64]	; (20000af4 <ILI9341_FillRectangle+0xd0>)
20000ab2:	f003 fd6b 	bl	2000458c <HAL_GPIO_WritePin>
	for (y = h; y > 0; y--) {
20000ab6:	883b      	ldrh	r3, [r7, #0]
20000ab8:	80bb      	strh	r3, [r7, #4]
20000aba:	e011      	b.n	20000ae0 <ILI9341_FillRectangle+0xbc>
		for (x = w; x > 0; x--) {
20000abc:	887b      	ldrh	r3, [r7, #2]
20000abe:	80fb      	strh	r3, [r7, #6]
20000ac0:	e008      	b.n	20000ad4 <ILI9341_FillRectangle+0xb0>
			mySPISend(data, sizeof(data));
20000ac2:	f107 030c 	add.w	r3, r7, #12
20000ac6:	2102      	movs	r1, #2
20000ac8:	4618      	mov	r0, r3
20000aca:	f7ff fd5b 	bl	20000584 <mySPISend>
		for (x = w; x > 0; x--) {
20000ace:	88fb      	ldrh	r3, [r7, #6]
20000ad0:	3b01      	subs	r3, #1
20000ad2:	80fb      	strh	r3, [r7, #6]
20000ad4:	88fb      	ldrh	r3, [r7, #6]
20000ad6:	2b00      	cmp	r3, #0
20000ad8:	d1f3      	bne.n	20000ac2 <ILI9341_FillRectangle+0x9e>
	for (y = h; y > 0; y--) {
20000ada:	88bb      	ldrh	r3, [r7, #4]
20000adc:	3b01      	subs	r3, #1
20000ade:	80bb      	strh	r3, [r7, #4]
20000ae0:	88bb      	ldrh	r3, [r7, #4]
20000ae2:	2b00      	cmp	r3, #0
20000ae4:	d1ea      	bne.n	20000abc <ILI9341_FillRectangle+0x98>
		}
	}

	ILI9341_Unselect();
20000ae6:	f7ff fd89 	bl	200005fc <ILI9341_Unselect>
20000aea:	e000      	b.n	20000aee <ILI9341_FillRectangle+0xca>
		return;
20000aec:	bf00      	nop
}
20000aee:	3714      	adds	r7, #20
20000af0:	46bd      	mov	sp, r7
20000af2:	bd90      	pop	{r4, r7, pc}
20000af4:	40020400 	.word	0x40020400

20000af8 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
20000af8:	b580      	push	{r7, lr}
20000afa:	b084      	sub	sp, #16
20000afc:	af02      	add	r7, sp, #8
20000afe:	4603      	mov	r3, r0
20000b00:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
20000b02:	88fb      	ldrh	r3, [r7, #6]
20000b04:	9300      	str	r3, [sp, #0]
20000b06:	23f0      	movs	r3, #240	; 0xf0
20000b08:	f44f 72a0 	mov.w	r2, #320	; 0x140
20000b0c:	2100      	movs	r1, #0
20000b0e:	2000      	movs	r0, #0
20000b10:	f7ff ff88 	bl	20000a24 <ILI9341_FillRectangle>
}
20000b14:	bf00      	nop
20000b16:	3708      	adds	r7, #8
20000b18:	46bd      	mov	sp, r7
20000b1a:	bd80      	pop	{r7, pc}

20000b1c <ILI9341_WriteMyChar>:

static void ILI9341_WriteMyChar(uint16_t x, uint16_t y, char ch, uint16_t color,
		uint16_t bgcolor) {
20000b1c:	b590      	push	{r4, r7, lr}
20000b1e:	b089      	sub	sp, #36	; 0x24
20000b20:	af00      	add	r7, sp, #0
20000b22:	4604      	mov	r4, r0
20000b24:	4608      	mov	r0, r1
20000b26:	4611      	mov	r1, r2
20000b28:	461a      	mov	r2, r3
20000b2a:	4623      	mov	r3, r4
20000b2c:	80fb      	strh	r3, [r7, #6]
20000b2e:	4603      	mov	r3, r0
20000b30:	80bb      	strh	r3, [r7, #4]
20000b32:	460b      	mov	r3, r1
20000b34:	70fb      	strb	r3, [r7, #3]
20000b36:	4613      	mov	r3, r2
20000b38:	803b      	strh	r3, [r7, #0]
	uint16_t i, j, value;
	uint32_t devider, b;

	ILI9341_SetAddressWindow(x, y,
			x + Font24x36_array[(ch - 32)].image->width - 1,
20000b3a:	78fb      	ldrb	r3, [r7, #3]
20000b3c:	3b20      	subs	r3, #32
20000b3e:	4a71      	ldr	r2, [pc, #452]	; (20000d04 <ILI9341_WriteMyChar+0x1e8>)
20000b40:	00db      	lsls	r3, r3, #3
20000b42:	4413      	add	r3, r2
20000b44:	685b      	ldr	r3, [r3, #4]
20000b46:	889a      	ldrh	r2, [r3, #4]
20000b48:	88fb      	ldrh	r3, [r7, #6]
20000b4a:	4413      	add	r3, r2
20000b4c:	b29b      	uxth	r3, r3
	ILI9341_SetAddressWindow(x, y,
20000b4e:	3b01      	subs	r3, #1
20000b50:	b29c      	uxth	r4, r3
			y + Font24x36_array[(ch - 32)].image->height - 1);
20000b52:	78fb      	ldrb	r3, [r7, #3]
20000b54:	3b20      	subs	r3, #32
20000b56:	4a6b      	ldr	r2, [pc, #428]	; (20000d04 <ILI9341_WriteMyChar+0x1e8>)
20000b58:	00db      	lsls	r3, r3, #3
20000b5a:	4413      	add	r3, r2
20000b5c:	685b      	ldr	r3, [r3, #4]
20000b5e:	88da      	ldrh	r2, [r3, #6]
20000b60:	88bb      	ldrh	r3, [r7, #4]
20000b62:	4413      	add	r3, r2
20000b64:	b29b      	uxth	r3, r3
	ILI9341_SetAddressWindow(x, y,
20000b66:	3b01      	subs	r3, #1
20000b68:	b29b      	uxth	r3, r3
20000b6a:	88b9      	ldrh	r1, [r7, #4]
20000b6c:	88f8      	ldrh	r0, [r7, #6]
20000b6e:	4622      	mov	r2, r4
20000b70:	f7ff fda8 	bl	200006c4 <ILI9341_SetAddressWindow>
	value = 1;
20000b74:	2301      	movs	r3, #1
20000b76:	837b      	strh	r3, [r7, #26]
	devider = 0x80;
20000b78:	2380      	movs	r3, #128	; 0x80
20000b7a:	617b      	str	r3, [r7, #20]
	if ((Font24x36_array[(ch - 32)].image->width) > 8) {
20000b7c:	78fb      	ldrb	r3, [r7, #3]
20000b7e:	3b20      	subs	r3, #32
20000b80:	4a60      	ldr	r2, [pc, #384]	; (20000d04 <ILI9341_WriteMyChar+0x1e8>)
20000b82:	00db      	lsls	r3, r3, #3
20000b84:	4413      	add	r3, r2
20000b86:	685b      	ldr	r3, [r3, #4]
20000b88:	889b      	ldrh	r3, [r3, #4]
20000b8a:	2b08      	cmp	r3, #8
20000b8c:	d904      	bls.n	20000b98 <ILI9341_WriteMyChar+0x7c>
		value = 2;
20000b8e:	2302      	movs	r3, #2
20000b90:	837b      	strh	r3, [r7, #26]
		devider = 0x8000;
20000b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
20000b96:	617b      	str	r3, [r7, #20]
	}
	if ((Font24x36_array[(ch - 32)].image->width) > 16) {
20000b98:	78fb      	ldrb	r3, [r7, #3]
20000b9a:	3b20      	subs	r3, #32
20000b9c:	4a59      	ldr	r2, [pc, #356]	; (20000d04 <ILI9341_WriteMyChar+0x1e8>)
20000b9e:	00db      	lsls	r3, r3, #3
20000ba0:	4413      	add	r3, r2
20000ba2:	685b      	ldr	r3, [r3, #4]
20000ba4:	889b      	ldrh	r3, [r3, #4]
20000ba6:	2b10      	cmp	r3, #16
20000ba8:	d904      	bls.n	20000bb4 <ILI9341_WriteMyChar+0x98>
		value = 3;
20000baa:	2303      	movs	r3, #3
20000bac:	837b      	strh	r3, [r7, #26]
		devider = 0x800000;
20000bae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
20000bb2:	617b      	str	r3, [r7, #20]
	}
	if ((Font24x36_array[(ch - 32)].image->width) > 24) {
20000bb4:	78fb      	ldrb	r3, [r7, #3]
20000bb6:	3b20      	subs	r3, #32
20000bb8:	4a52      	ldr	r2, [pc, #328]	; (20000d04 <ILI9341_WriteMyChar+0x1e8>)
20000bba:	00db      	lsls	r3, r3, #3
20000bbc:	4413      	add	r3, r2
20000bbe:	685b      	ldr	r3, [r3, #4]
20000bc0:	889b      	ldrh	r3, [r3, #4]
20000bc2:	2b18      	cmp	r3, #24
20000bc4:	d904      	bls.n	20000bd0 <ILI9341_WriteMyChar+0xb4>
		value = 4;
20000bc6:	2304      	movs	r3, #4
20000bc8:	837b      	strh	r3, [r7, #26]
		devider = 0x80000000;
20000bca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
20000bce:	617b      	str	r3, [r7, #20]
	}
	for (i = 0; i < (Font24x36_array[(ch - 32)].image->height) * value; i +=
20000bd0:	2300      	movs	r3, #0
20000bd2:	83fb      	strh	r3, [r7, #30]
20000bd4:	e081      	b.n	20000cda <ILI9341_WriteMyChar+0x1be>
			value) {
		b = Font24x36_array[(ch - 32)].image->data[i];
20000bd6:	78fb      	ldrb	r3, [r7, #3]
20000bd8:	3b20      	subs	r3, #32
20000bda:	4a4a      	ldr	r2, [pc, #296]	; (20000d04 <ILI9341_WriteMyChar+0x1e8>)
20000bdc:	00db      	lsls	r3, r3, #3
20000bde:	4413      	add	r3, r2
20000be0:	685b      	ldr	r3, [r3, #4]
20000be2:	681a      	ldr	r2, [r3, #0]
20000be4:	8bfb      	ldrh	r3, [r7, #30]
20000be6:	4413      	add	r3, r2
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	613b      	str	r3, [r7, #16]
		if (value >= 2) {
20000bec:	8b7b      	ldrh	r3, [r7, #26]
20000bee:	2b01      	cmp	r3, #1
20000bf0:	d911      	bls.n	20000c16 <ILI9341_WriteMyChar+0xfa>
			b = b << 8;
20000bf2:	693b      	ldr	r3, [r7, #16]
20000bf4:	021b      	lsls	r3, r3, #8
20000bf6:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 1];
20000bf8:	78fb      	ldrb	r3, [r7, #3]
20000bfa:	3b20      	subs	r3, #32
20000bfc:	4a41      	ldr	r2, [pc, #260]	; (20000d04 <ILI9341_WriteMyChar+0x1e8>)
20000bfe:	00db      	lsls	r3, r3, #3
20000c00:	4413      	add	r3, r2
20000c02:	685b      	ldr	r3, [r3, #4]
20000c04:	681a      	ldr	r2, [r3, #0]
20000c06:	8bfb      	ldrh	r3, [r7, #30]
20000c08:	3301      	adds	r3, #1
20000c0a:	4413      	add	r3, r2
20000c0c:	781b      	ldrb	r3, [r3, #0]
20000c0e:	461a      	mov	r2, r3
20000c10:	693b      	ldr	r3, [r7, #16]
20000c12:	4313      	orrs	r3, r2
20000c14:	613b      	str	r3, [r7, #16]
		}
		if (value >= 3) {
20000c16:	8b7b      	ldrh	r3, [r7, #26]
20000c18:	2b02      	cmp	r3, #2
20000c1a:	d911      	bls.n	20000c40 <ILI9341_WriteMyChar+0x124>
			b = b << 8;
20000c1c:	693b      	ldr	r3, [r7, #16]
20000c1e:	021b      	lsls	r3, r3, #8
20000c20:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 2];
20000c22:	78fb      	ldrb	r3, [r7, #3]
20000c24:	3b20      	subs	r3, #32
20000c26:	4a37      	ldr	r2, [pc, #220]	; (20000d04 <ILI9341_WriteMyChar+0x1e8>)
20000c28:	00db      	lsls	r3, r3, #3
20000c2a:	4413      	add	r3, r2
20000c2c:	685b      	ldr	r3, [r3, #4]
20000c2e:	681a      	ldr	r2, [r3, #0]
20000c30:	8bfb      	ldrh	r3, [r7, #30]
20000c32:	3302      	adds	r3, #2
20000c34:	4413      	add	r3, r2
20000c36:	781b      	ldrb	r3, [r3, #0]
20000c38:	461a      	mov	r2, r3
20000c3a:	693b      	ldr	r3, [r7, #16]
20000c3c:	4313      	orrs	r3, r2
20000c3e:	613b      	str	r3, [r7, #16]
		}
		if (value >= 4) {
20000c40:	8b7b      	ldrh	r3, [r7, #26]
20000c42:	2b03      	cmp	r3, #3
20000c44:	d911      	bls.n	20000c6a <ILI9341_WriteMyChar+0x14e>
			b = b << 8;
20000c46:	693b      	ldr	r3, [r7, #16]
20000c48:	021b      	lsls	r3, r3, #8
20000c4a:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 3];
20000c4c:	78fb      	ldrb	r3, [r7, #3]
20000c4e:	3b20      	subs	r3, #32
20000c50:	4a2c      	ldr	r2, [pc, #176]	; (20000d04 <ILI9341_WriteMyChar+0x1e8>)
20000c52:	00db      	lsls	r3, r3, #3
20000c54:	4413      	add	r3, r2
20000c56:	685b      	ldr	r3, [r3, #4]
20000c58:	681a      	ldr	r2, [r3, #0]
20000c5a:	8bfb      	ldrh	r3, [r7, #30]
20000c5c:	3303      	adds	r3, #3
20000c5e:	4413      	add	r3, r2
20000c60:	781b      	ldrb	r3, [r3, #0]
20000c62:	461a      	mov	r2, r3
20000c64:	693b      	ldr	r3, [r7, #16]
20000c66:	4313      	orrs	r3, r2
20000c68:	613b      	str	r3, [r7, #16]
		}
		for (j = 0; j < Font24x36_array[(ch - 32)].image->width; j++) {
20000c6a:	2300      	movs	r3, #0
20000c6c:	83bb      	strh	r3, [r7, #28]
20000c6e:	e026      	b.n	20000cbe <ILI9341_WriteMyChar+0x1a2>
			if ((b << j) & devider) {
20000c70:	8bbb      	ldrh	r3, [r7, #28]
20000c72:	693a      	ldr	r2, [r7, #16]
20000c74:	409a      	lsls	r2, r3
20000c76:	697b      	ldr	r3, [r7, #20]
20000c78:	4013      	ands	r3, r2
20000c7a:	2b00      	cmp	r3, #0
20000c7c:	d00e      	beq.n	20000c9c <ILI9341_WriteMyChar+0x180>
				uint8_t data[] = { color >> 8, color & 0xFF };
20000c7e:	883b      	ldrh	r3, [r7, #0]
20000c80:	0a1b      	lsrs	r3, r3, #8
20000c82:	b29b      	uxth	r3, r3
20000c84:	b2db      	uxtb	r3, r3
20000c86:	733b      	strb	r3, [r7, #12]
20000c88:	883b      	ldrh	r3, [r7, #0]
20000c8a:	b2db      	uxtb	r3, r3
20000c8c:	737b      	strb	r3, [r7, #13]
				ILI9341_WriteData(data, sizeof(data));
20000c8e:	f107 030c 	add.w	r3, r7, #12
20000c92:	2102      	movs	r1, #2
20000c94:	4618      	mov	r0, r3
20000c96:	f7ff fceb 	bl	20000670 <ILI9341_WriteData>
20000c9a:	e00d      	b.n	20000cb8 <ILI9341_WriteMyChar+0x19c>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
20000c9c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
20000c9e:	0a1b      	lsrs	r3, r3, #8
20000ca0:	b29b      	uxth	r3, r3
20000ca2:	b2db      	uxtb	r3, r3
20000ca4:	723b      	strb	r3, [r7, #8]
20000ca6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
20000ca8:	b2db      	uxtb	r3, r3
20000caa:	727b      	strb	r3, [r7, #9]
				ILI9341_WriteData(data, sizeof(data));
20000cac:	f107 0308 	add.w	r3, r7, #8
20000cb0:	2102      	movs	r1, #2
20000cb2:	4618      	mov	r0, r3
20000cb4:	f7ff fcdc 	bl	20000670 <ILI9341_WriteData>
		for (j = 0; j < Font24x36_array[(ch - 32)].image->width; j++) {
20000cb8:	8bbb      	ldrh	r3, [r7, #28]
20000cba:	3301      	adds	r3, #1
20000cbc:	83bb      	strh	r3, [r7, #28]
20000cbe:	78fb      	ldrb	r3, [r7, #3]
20000cc0:	3b20      	subs	r3, #32
20000cc2:	4a10      	ldr	r2, [pc, #64]	; (20000d04 <ILI9341_WriteMyChar+0x1e8>)
20000cc4:	00db      	lsls	r3, r3, #3
20000cc6:	4413      	add	r3, r2
20000cc8:	685b      	ldr	r3, [r3, #4]
20000cca:	889b      	ldrh	r3, [r3, #4]
20000ccc:	8bba      	ldrh	r2, [r7, #28]
20000cce:	429a      	cmp	r2, r3
20000cd0:	d3ce      	bcc.n	20000c70 <ILI9341_WriteMyChar+0x154>
	for (i = 0; i < (Font24x36_array[(ch - 32)].image->height) * value; i +=
20000cd2:	8bfa      	ldrh	r2, [r7, #30]
20000cd4:	8b7b      	ldrh	r3, [r7, #26]
20000cd6:	4413      	add	r3, r2
20000cd8:	83fb      	strh	r3, [r7, #30]
20000cda:	8bfa      	ldrh	r2, [r7, #30]
20000cdc:	78fb      	ldrb	r3, [r7, #3]
20000cde:	3b20      	subs	r3, #32
20000ce0:	4908      	ldr	r1, [pc, #32]	; (20000d04 <ILI9341_WriteMyChar+0x1e8>)
20000ce2:	00db      	lsls	r3, r3, #3
20000ce4:	440b      	add	r3, r1
20000ce6:	685b      	ldr	r3, [r3, #4]
20000ce8:	88db      	ldrh	r3, [r3, #6]
20000cea:	4619      	mov	r1, r3
20000cec:	8b7b      	ldrh	r3, [r7, #26]
20000cee:	fb01 f303 	mul.w	r3, r1, r3
20000cf2:	429a      	cmp	r2, r3
20000cf4:	f6ff af6f 	blt.w	20000bd6 <ILI9341_WriteMyChar+0xba>
			}
		}
	}
}
20000cf8:	bf00      	nop
20000cfa:	bf00      	nop
20000cfc:	3724      	adds	r7, #36	; 0x24
20000cfe:	46bd      	mov	sp, r7
20000d00:	bd90      	pop	{r4, r7, pc}
20000d02:	bf00      	nop
20000d04:	200106c8 	.word	0x200106c8

20000d08 <ILI9341_WriteMyString>:

void ILI9341_WriteMyString(uint16_t x, uint16_t y, const char *str,
		uint16_t color, uint16_t bgcolor) {
20000d08:	b590      	push	{r4, r7, lr}
20000d0a:	b087      	sub	sp, #28
20000d0c:	af02      	add	r7, sp, #8
20000d0e:	60ba      	str	r2, [r7, #8]
20000d10:	461a      	mov	r2, r3
20000d12:	4603      	mov	r3, r0
20000d14:	81fb      	strh	r3, [r7, #14]
20000d16:	460b      	mov	r3, r1
20000d18:	81bb      	strh	r3, [r7, #12]
20000d1a:	4613      	mov	r3, r2
20000d1c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Select();
20000d1e:	f7ff fc5d 	bl	200005dc <ILI9341_Select>
	while (*str) {
20000d22:	e045      	b.n	20000db0 <ILI9341_WriteMyString+0xa8>
		if (x + Font24x36_array[(*str - 32)].image->width >= ILI9341_WIDTH) {
20000d24:	89fa      	ldrh	r2, [r7, #14]
20000d26:	68bb      	ldr	r3, [r7, #8]
20000d28:	781b      	ldrb	r3, [r3, #0]
20000d2a:	3b20      	subs	r3, #32
20000d2c:	4926      	ldr	r1, [pc, #152]	; (20000dc8 <ILI9341_WriteMyString+0xc0>)
20000d2e:	00db      	lsls	r3, r3, #3
20000d30:	440b      	add	r3, r1
20000d32:	685b      	ldr	r3, [r3, #4]
20000d34:	889b      	ldrh	r3, [r3, #4]
20000d36:	4413      	add	r3, r2
20000d38:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20000d3c:	db20      	blt.n	20000d80 <ILI9341_WriteMyString+0x78>
			x = 0;
20000d3e:	2300      	movs	r3, #0
20000d40:	81fb      	strh	r3, [r7, #14]
			y += Font24x36_array[(*str - 32)].image->height;
20000d42:	68bb      	ldr	r3, [r7, #8]
20000d44:	781b      	ldrb	r3, [r3, #0]
20000d46:	3b20      	subs	r3, #32
20000d48:	4a1f      	ldr	r2, [pc, #124]	; (20000dc8 <ILI9341_WriteMyString+0xc0>)
20000d4a:	00db      	lsls	r3, r3, #3
20000d4c:	4413      	add	r3, r2
20000d4e:	685b      	ldr	r3, [r3, #4]
20000d50:	88da      	ldrh	r2, [r3, #6]
20000d52:	89bb      	ldrh	r3, [r7, #12]
20000d54:	4413      	add	r3, r2
20000d56:	81bb      	strh	r3, [r7, #12]
			if (y + Font24x36_array[(*str - 32)].image->height >= ILI9341_HEIGHT) {
20000d58:	89ba      	ldrh	r2, [r7, #12]
20000d5a:	68bb      	ldr	r3, [r7, #8]
20000d5c:	781b      	ldrb	r3, [r3, #0]
20000d5e:	3b20      	subs	r3, #32
20000d60:	4919      	ldr	r1, [pc, #100]	; (20000dc8 <ILI9341_WriteMyString+0xc0>)
20000d62:	00db      	lsls	r3, r3, #3
20000d64:	440b      	add	r3, r1
20000d66:	685b      	ldr	r3, [r3, #4]
20000d68:	88db      	ldrh	r3, [r3, #6]
20000d6a:	4413      	add	r3, r2
20000d6c:	2bef      	cmp	r3, #239	; 0xef
20000d6e:	dc24      	bgt.n	20000dba <ILI9341_WriteMyString+0xb2>
				break;
			}
			if (*str == ' ') {
20000d70:	68bb      	ldr	r3, [r7, #8]
20000d72:	781b      	ldrb	r3, [r3, #0]
20000d74:	2b20      	cmp	r3, #32
20000d76:	d103      	bne.n	20000d80 <ILI9341_WriteMyString+0x78>
				// skip spaces in the beginning of the new line
				str++;
20000d78:	68bb      	ldr	r3, [r7, #8]
20000d7a:	3301      	adds	r3, #1
20000d7c:	60bb      	str	r3, [r7, #8]
				continue;
20000d7e:	e017      	b.n	20000db0 <ILI9341_WriteMyString+0xa8>
			}
		}
		ILI9341_WriteMyChar(x, y, *str, color, bgcolor);
20000d80:	68bb      	ldr	r3, [r7, #8]
20000d82:	781a      	ldrb	r2, [r3, #0]
20000d84:	88fc      	ldrh	r4, [r7, #6]
20000d86:	89b9      	ldrh	r1, [r7, #12]
20000d88:	89f8      	ldrh	r0, [r7, #14]
20000d8a:	8c3b      	ldrh	r3, [r7, #32]
20000d8c:	9300      	str	r3, [sp, #0]
20000d8e:	4623      	mov	r3, r4
20000d90:	f7ff fec4 	bl	20000b1c <ILI9341_WriteMyChar>
		x += Font24x36_array[(*str - 32)].image->width;
20000d94:	68bb      	ldr	r3, [r7, #8]
20000d96:	781b      	ldrb	r3, [r3, #0]
20000d98:	3b20      	subs	r3, #32
20000d9a:	4a0b      	ldr	r2, [pc, #44]	; (20000dc8 <ILI9341_WriteMyString+0xc0>)
20000d9c:	00db      	lsls	r3, r3, #3
20000d9e:	4413      	add	r3, r2
20000da0:	685b      	ldr	r3, [r3, #4]
20000da2:	889a      	ldrh	r2, [r3, #4]
20000da4:	89fb      	ldrh	r3, [r7, #14]
20000da6:	4413      	add	r3, r2
20000da8:	81fb      	strh	r3, [r7, #14]
		str++;
20000daa:	68bb      	ldr	r3, [r7, #8]
20000dac:	3301      	adds	r3, #1
20000dae:	60bb      	str	r3, [r7, #8]
	while (*str) {
20000db0:	68bb      	ldr	r3, [r7, #8]
20000db2:	781b      	ldrb	r3, [r3, #0]
20000db4:	2b00      	cmp	r3, #0
20000db6:	d1b5      	bne.n	20000d24 <ILI9341_WriteMyString+0x1c>
20000db8:	e000      	b.n	20000dbc <ILI9341_WriteMyString+0xb4>
				break;
20000dba:	bf00      	nop
	}
	ILI9341_Unselect();
20000dbc:	f7ff fc1e 	bl	200005fc <ILI9341_Unselect>
}
20000dc0:	bf00      	nop
20000dc2:	3714      	adds	r7, #20
20000dc4:	46bd      	mov	sp, r7
20000dc6:	bd90      	pop	{r4, r7, pc}
20000dc8:	200106c8 	.word	0x200106c8

20000dcc <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font,
		uint16_t color, uint16_t bgcolor) {
20000dcc:	b082      	sub	sp, #8
20000dce:	b590      	push	{r4, r7, lr}
20000dd0:	b089      	sub	sp, #36	; 0x24
20000dd2:	af00      	add	r7, sp, #0
20000dd4:	637b      	str	r3, [r7, #52]	; 0x34
20000dd6:	4603      	mov	r3, r0
20000dd8:	80fb      	strh	r3, [r7, #6]
20000dda:	460b      	mov	r3, r1
20000ddc:	80bb      	strh	r3, [r7, #4]
20000dde:	4613      	mov	r3, r2
20000de0:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ILI9341_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
20000de2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
20000de6:	b29a      	uxth	r2, r3
20000de8:	88fb      	ldrh	r3, [r7, #6]
20000dea:	4413      	add	r3, r2
20000dec:	b29b      	uxth	r3, r3
20000dee:	3b01      	subs	r3, #1
20000df0:	b29c      	uxth	r4, r3
20000df2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
20000df6:	b29a      	uxth	r2, r3
20000df8:	88bb      	ldrh	r3, [r7, #4]
20000dfa:	4413      	add	r3, r2
20000dfc:	b29b      	uxth	r3, r3
20000dfe:	3b01      	subs	r3, #1
20000e00:	b29b      	uxth	r3, r3
20000e02:	88b9      	ldrh	r1, [r7, #4]
20000e04:	88f8      	ldrh	r0, [r7, #6]
20000e06:	4622      	mov	r2, r4
20000e08:	f7ff fc5c 	bl	200006c4 <ILI9341_SetAddressWindow>
	for (i = 0; i < font.height; i++) {
20000e0c:	2300      	movs	r3, #0
20000e0e:	61fb      	str	r3, [r7, #28]
20000e10:	e043      	b.n	20000e9a <ILI9341_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
20000e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
20000e14:	78fb      	ldrb	r3, [r7, #3]
20000e16:	3b20      	subs	r3, #32
20000e18:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
20000e1c:	fb01 f303 	mul.w	r3, r1, r3
20000e20:	4619      	mov	r1, r3
20000e22:	69fb      	ldr	r3, [r7, #28]
20000e24:	440b      	add	r3, r1
20000e26:	005b      	lsls	r3, r3, #1
20000e28:	4413      	add	r3, r2
20000e2a:	881b      	ldrh	r3, [r3, #0]
20000e2c:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
20000e2e:	2300      	movs	r3, #0
20000e30:	61bb      	str	r3, [r7, #24]
20000e32:	e029      	b.n	20000e88 <ILI9341_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
20000e34:	697a      	ldr	r2, [r7, #20]
20000e36:	69bb      	ldr	r3, [r7, #24]
20000e38:	fa02 f303 	lsl.w	r3, r2, r3
20000e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
20000e40:	2b00      	cmp	r3, #0
20000e42:	d00e      	beq.n	20000e62 <ILI9341_WriteChar+0x96>
				uint8_t data[] = { color >> 8, color & 0xFF };
20000e44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
20000e46:	0a1b      	lsrs	r3, r3, #8
20000e48:	b29b      	uxth	r3, r3
20000e4a:	b2db      	uxtb	r3, r3
20000e4c:	743b      	strb	r3, [r7, #16]
20000e4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
20000e50:	b2db      	uxtb	r3, r3
20000e52:	747b      	strb	r3, [r7, #17]
				ILI9341_WriteData(data, sizeof(data));
20000e54:	f107 0310 	add.w	r3, r7, #16
20000e58:	2102      	movs	r1, #2
20000e5a:	4618      	mov	r0, r3
20000e5c:	f7ff fc08 	bl	20000670 <ILI9341_WriteData>
20000e60:	e00f      	b.n	20000e82 <ILI9341_WriteChar+0xb6>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
20000e62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
20000e66:	0a1b      	lsrs	r3, r3, #8
20000e68:	b29b      	uxth	r3, r3
20000e6a:	b2db      	uxtb	r3, r3
20000e6c:	733b      	strb	r3, [r7, #12]
20000e6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
20000e72:	b2db      	uxtb	r3, r3
20000e74:	737b      	strb	r3, [r7, #13]
				ILI9341_WriteData(data, sizeof(data));
20000e76:	f107 030c 	add.w	r3, r7, #12
20000e7a:	2102      	movs	r1, #2
20000e7c:	4618      	mov	r0, r3
20000e7e:	f7ff fbf7 	bl	20000670 <ILI9341_WriteData>
		for (j = 0; j < font.width; j++) {
20000e82:	69bb      	ldr	r3, [r7, #24]
20000e84:	3301      	adds	r3, #1
20000e86:	61bb      	str	r3, [r7, #24]
20000e88:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
20000e8c:	461a      	mov	r2, r3
20000e8e:	69bb      	ldr	r3, [r7, #24]
20000e90:	4293      	cmp	r3, r2
20000e92:	d3cf      	bcc.n	20000e34 <ILI9341_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
20000e94:	69fb      	ldr	r3, [r7, #28]
20000e96:	3301      	adds	r3, #1
20000e98:	61fb      	str	r3, [r7, #28]
20000e9a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
20000e9e:	461a      	mov	r2, r3
20000ea0:	69fb      	ldr	r3, [r7, #28]
20000ea2:	4293      	cmp	r3, r2
20000ea4:	d3b5      	bcc.n	20000e12 <ILI9341_WriteChar+0x46>
			}
		}
	}
}
20000ea6:	bf00      	nop
20000ea8:	bf00      	nop
20000eaa:	3724      	adds	r7, #36	; 0x24
20000eac:	46bd      	mov	sp, r7
20000eae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
20000eb2:	b002      	add	sp, #8
20000eb4:	4770      	bx	lr

20000eb6 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font,
		uint16_t color, uint16_t bgcolor) {
20000eb6:	b082      	sub	sp, #8
20000eb8:	b580      	push	{r7, lr}
20000eba:	b086      	sub	sp, #24
20000ebc:	af04      	add	r7, sp, #16
20000ebe:	603a      	str	r2, [r7, #0]
20000ec0:	617b      	str	r3, [r7, #20]
20000ec2:	4603      	mov	r3, r0
20000ec4:	80fb      	strh	r3, [r7, #6]
20000ec6:	460b      	mov	r3, r1
20000ec8:	80bb      	strh	r3, [r7, #4]
	ILI9341_Select();
20000eca:	f7ff fb87 	bl	200005dc <ILI9341_Select>

	while (*str) {
20000ece:	e02e      	b.n	20000f2e <ILI9341_WriteString+0x78>
		if (x + font.width >= ILI9341_WIDTH) {
20000ed0:	88fb      	ldrh	r3, [r7, #6]
20000ed2:	7d3a      	ldrb	r2, [r7, #20]
20000ed4:	4413      	add	r3, r2
20000ed6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20000eda:	db13      	blt.n	20000f04 <ILI9341_WriteString+0x4e>
			x = 0;
20000edc:	2300      	movs	r3, #0
20000ede:	80fb      	strh	r3, [r7, #6]
			y += font.height;
20000ee0:	7d7b      	ldrb	r3, [r7, #21]
20000ee2:	b29a      	uxth	r2, r3
20000ee4:	88bb      	ldrh	r3, [r7, #4]
20000ee6:	4413      	add	r3, r2
20000ee8:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ILI9341_HEIGHT) {
20000eea:	88bb      	ldrh	r3, [r7, #4]
20000eec:	7d7a      	ldrb	r2, [r7, #21]
20000eee:	4413      	add	r3, r2
20000ef0:	2bef      	cmp	r3, #239	; 0xef
20000ef2:	dc21      	bgt.n	20000f38 <ILI9341_WriteString+0x82>
				break;
			}
			if (*str == ' ') {
20000ef4:	683b      	ldr	r3, [r7, #0]
20000ef6:	781b      	ldrb	r3, [r3, #0]
20000ef8:	2b20      	cmp	r3, #32
20000efa:	d103      	bne.n	20000f04 <ILI9341_WriteString+0x4e>
				// skip spaces in the beginning of the new line
				str++;
20000efc:	683b      	ldr	r3, [r7, #0]
20000efe:	3301      	adds	r3, #1
20000f00:	603b      	str	r3, [r7, #0]
				continue;
20000f02:	e014      	b.n	20000f2e <ILI9341_WriteString+0x78>
			}
		}
		ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
20000f04:	683b      	ldr	r3, [r7, #0]
20000f06:	781a      	ldrb	r2, [r3, #0]
20000f08:	88b9      	ldrh	r1, [r7, #4]
20000f0a:	88f8      	ldrh	r0, [r7, #6]
20000f0c:	8c3b      	ldrh	r3, [r7, #32]
20000f0e:	9302      	str	r3, [sp, #8]
20000f10:	8bbb      	ldrh	r3, [r7, #28]
20000f12:	9301      	str	r3, [sp, #4]
20000f14:	69bb      	ldr	r3, [r7, #24]
20000f16:	9300      	str	r3, [sp, #0]
20000f18:	697b      	ldr	r3, [r7, #20]
20000f1a:	f7ff ff57 	bl	20000dcc <ILI9341_WriteChar>
		x += font.width;
20000f1e:	7d3b      	ldrb	r3, [r7, #20]
20000f20:	b29a      	uxth	r2, r3
20000f22:	88fb      	ldrh	r3, [r7, #6]
20000f24:	4413      	add	r3, r2
20000f26:	80fb      	strh	r3, [r7, #6]
		str++;
20000f28:	683b      	ldr	r3, [r7, #0]
20000f2a:	3301      	adds	r3, #1
20000f2c:	603b      	str	r3, [r7, #0]
	while (*str) {
20000f2e:	683b      	ldr	r3, [r7, #0]
20000f30:	781b      	ldrb	r3, [r3, #0]
20000f32:	2b00      	cmp	r3, #0
20000f34:	d1cc      	bne.n	20000ed0 <ILI9341_WriteString+0x1a>
20000f36:	e000      	b.n	20000f3a <ILI9341_WriteString+0x84>
				break;
20000f38:	bf00      	nop
	}

	ILI9341_Unselect();
20000f3a:	f7ff fb5f 	bl	200005fc <ILI9341_Unselect>
}
20000f3e:	bf00      	nop
20000f40:	3708      	adds	r7, #8
20000f42:	46bd      	mov	sp, r7
20000f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
20000f48:	b002      	add	sp, #8
20000f4a:	4770      	bx	lr

20000f4c <ILI9341_DrawImage>:
void ILI9341_DeleteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor) {
	ILI9341_FillRectangle (x,y, strlen(str) * font.width, font.height, bgcolor);
}

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		const uint16_t *data) {
20000f4c:	b590      	push	{r4, r7, lr}
20000f4e:	b083      	sub	sp, #12
20000f50:	af00      	add	r7, sp, #0
20000f52:	4604      	mov	r4, r0
20000f54:	4608      	mov	r0, r1
20000f56:	4611      	mov	r1, r2
20000f58:	461a      	mov	r2, r3
20000f5a:	4623      	mov	r3, r4
20000f5c:	80fb      	strh	r3, [r7, #6]
20000f5e:	4603      	mov	r3, r0
20000f60:	80bb      	strh	r3, [r7, #4]
20000f62:	460b      	mov	r3, r1
20000f64:	807b      	strh	r3, [r7, #2]
20000f66:	4613      	mov	r3, r2
20000f68:	803b      	strh	r3, [r7, #0]
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
20000f6a:	88fb      	ldrh	r3, [r7, #6]
20000f6c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20000f70:	d22c      	bcs.n	20000fcc <ILI9341_DrawImage+0x80>
20000f72:	88bb      	ldrh	r3, [r7, #4]
20000f74:	2bef      	cmp	r3, #239	; 0xef
20000f76:	d829      	bhi.n	20000fcc <ILI9341_DrawImage+0x80>
		return;
	if ((x + w - 1) >= ILI9341_WIDTH)
20000f78:	88fa      	ldrh	r2, [r7, #6]
20000f7a:	887b      	ldrh	r3, [r7, #2]
20000f7c:	4413      	add	r3, r2
20000f7e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20000f82:	dc25      	bgt.n	20000fd0 <ILI9341_DrawImage+0x84>
		return;
	if ((y + h - 1) >= ILI9341_HEIGHT)
20000f84:	88ba      	ldrh	r2, [r7, #4]
20000f86:	883b      	ldrh	r3, [r7, #0]
20000f88:	4413      	add	r3, r2
20000f8a:	2bf0      	cmp	r3, #240	; 0xf0
20000f8c:	dc22      	bgt.n	20000fd4 <ILI9341_DrawImage+0x88>
		return;

	ILI9341_Select();
20000f8e:	f7ff fb25 	bl	200005dc <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + w - 1, y + h - 1);
20000f92:	88fa      	ldrh	r2, [r7, #6]
20000f94:	887b      	ldrh	r3, [r7, #2]
20000f96:	4413      	add	r3, r2
20000f98:	b29b      	uxth	r3, r3
20000f9a:	3b01      	subs	r3, #1
20000f9c:	b29c      	uxth	r4, r3
20000f9e:	88ba      	ldrh	r2, [r7, #4]
20000fa0:	883b      	ldrh	r3, [r7, #0]
20000fa2:	4413      	add	r3, r2
20000fa4:	b29b      	uxth	r3, r3
20000fa6:	3b01      	subs	r3, #1
20000fa8:	b29b      	uxth	r3, r3
20000faa:	88b9      	ldrh	r1, [r7, #4]
20000fac:	88f8      	ldrh	r0, [r7, #6]
20000fae:	4622      	mov	r2, r4
20000fb0:	f7ff fb88 	bl	200006c4 <ILI9341_SetAddressWindow>
	ILI9341_WriteData((uint8_t*) data, sizeof(uint16_t) * w * h);
20000fb4:	887b      	ldrh	r3, [r7, #2]
20000fb6:	883a      	ldrh	r2, [r7, #0]
20000fb8:	fb02 f303 	mul.w	r3, r2, r3
20000fbc:	005b      	lsls	r3, r3, #1
20000fbe:	4619      	mov	r1, r3
20000fc0:	69b8      	ldr	r0, [r7, #24]
20000fc2:	f7ff fb55 	bl	20000670 <ILI9341_WriteData>
	ILI9341_Unselect();
20000fc6:	f7ff fb19 	bl	200005fc <ILI9341_Unselect>
20000fca:	e004      	b.n	20000fd6 <ILI9341_DrawImage+0x8a>
		return;
20000fcc:	bf00      	nop
20000fce:	e002      	b.n	20000fd6 <ILI9341_DrawImage+0x8a>
		return;
20000fd0:	bf00      	nop
20000fd2:	e000      	b.n	20000fd6 <ILI9341_DrawImage+0x8a>
		return;
20000fd4:	bf00      	nop
}
20000fd6:	370c      	adds	r7, #12
20000fd8:	46bd      	mov	sp, r7
20000fda:	bd90      	pop	{r4, r7, pc}

20000fdc <ILI9341_DrawMonochromeImage>:

void ILI9341_DrawMonochromeImage(uint16_t x, uint16_t y, uint16_t color,
		uint16_t bgcolor, tImage image) {
20000fdc:	b590      	push	{r4, r7, lr}
20000fde:	b08b      	sub	sp, #44	; 0x2c
20000fe0:	af00      	add	r7, sp, #0
20000fe2:	4604      	mov	r4, r0
20000fe4:	4608      	mov	r0, r1
20000fe6:	4611      	mov	r1, r2
20000fe8:	461a      	mov	r2, r3
20000fea:	4623      	mov	r3, r4
20000fec:	80fb      	strh	r3, [r7, #6]
20000fee:	4603      	mov	r3, r0
20000ff0:	80bb      	strh	r3, [r7, #4]
20000ff2:	460b      	mov	r3, r1
20000ff4:	807b      	strh	r3, [r7, #2]
20000ff6:	4613      	mov	r3, r2
20000ff8:	803b      	strh	r3, [r7, #0]
	uint16_t b, devider, siz, count;
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
20000ffa:	88fb      	ldrh	r3, [r7, #6]
20000ffc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20001000:	d279      	bcs.n	200010f6 <ILI9341_DrawMonochromeImage+0x11a>
20001002:	88bb      	ldrh	r3, [r7, #4]
20001004:	2bef      	cmp	r3, #239	; 0xef
20001006:	d876      	bhi.n	200010f6 <ILI9341_DrawMonochromeImage+0x11a>
		return;
	devider = wholeDevider(image.height, 8);
20001008:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
2000100a:	b21b      	sxth	r3, r3
2000100c:	2108      	movs	r1, #8
2000100e:	4618      	mov	r0, r3
20001010:	f002 fab3 	bl	2000357a <wholeDevider>
20001014:	4603      	mov	r3, r0
20001016:	82fb      	strh	r3, [r7, #22]
	siz = devider * image.width;
20001018:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
2000101a:	8afa      	ldrh	r2, [r7, #22]
2000101c:	fb12 f303 	smulbb	r3, r2, r3
20001020:	82bb      	strh	r3, [r7, #20]
	ILI9341_Select();
20001022:	f7ff fadb 	bl	200005dc <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + image.width - 1, y + image.height - 1);
20001026:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
20001028:	88fb      	ldrh	r3, [r7, #6]
2000102a:	4413      	add	r3, r2
2000102c:	b29b      	uxth	r3, r3
2000102e:	3b01      	subs	r3, #1
20001030:	b29c      	uxth	r4, r3
20001032:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
20001034:	88bb      	ldrh	r3, [r7, #4]
20001036:	4413      	add	r3, r2
20001038:	b29b      	uxth	r3, r3
2000103a:	3b01      	subs	r3, #1
2000103c:	b29b      	uxth	r3, r3
2000103e:	88b9      	ldrh	r1, [r7, #4]
20001040:	88f8      	ldrh	r0, [r7, #6]
20001042:	4622      	mov	r2, r4
20001044:	f7ff fb3e 	bl	200006c4 <ILI9341_SetAddressWindow>

	for (int i = 0; i < siz; i += devider) {
20001048:	2300      	movs	r3, #0
2000104a:	623b      	str	r3, [r7, #32]
2000104c:	e04c      	b.n	200010e8 <ILI9341_DrawMonochromeImage+0x10c>
		count = image.width;
2000104e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
20001050:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (int u = 0; u < devider; u++) {
20001052:	2300      	movs	r3, #0
20001054:	61fb      	str	r3, [r7, #28]
20001056:	e03f      	b.n	200010d8 <ILI9341_DrawMonochromeImage+0xfc>
			b = image.data[i + u];
20001058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000105a:	6a39      	ldr	r1, [r7, #32]
2000105c:	69fa      	ldr	r2, [r7, #28]
2000105e:	440a      	add	r2, r1
20001060:	4413      	add	r3, r2
20001062:	781b      	ldrb	r3, [r3, #0]
20001064:	827b      	strh	r3, [r7, #18]
			for (int j = 0; j < 8; j++) {
20001066:	2300      	movs	r3, #0
20001068:	61bb      	str	r3, [r7, #24]
2000106a:	e02d      	b.n	200010c8 <ILI9341_DrawMonochromeImage+0xec>
				if (count == 0) break;
2000106c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
2000106e:	2b00      	cmp	r3, #0
20001070:	d02e      	beq.n	200010d0 <ILI9341_DrawMonochromeImage+0xf4>
				count --;
20001072:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
20001074:	3b01      	subs	r3, #1
20001076:	84fb      	strh	r3, [r7, #38]	; 0x26
				if ((b << j) & 0x80) {
20001078:	8a7a      	ldrh	r2, [r7, #18]
2000107a:	69bb      	ldr	r3, [r7, #24]
2000107c:	fa02 f303 	lsl.w	r3, r2, r3
20001080:	f003 0380 	and.w	r3, r3, #128	; 0x80
20001084:	2b00      	cmp	r3, #0
20001086:	d00e      	beq.n	200010a6 <ILI9341_DrawMonochromeImage+0xca>
					uint8_t data[] = { color >> 8, color & 0xFF };
20001088:	887b      	ldrh	r3, [r7, #2]
2000108a:	0a1b      	lsrs	r3, r3, #8
2000108c:	b29b      	uxth	r3, r3
2000108e:	b2db      	uxtb	r3, r3
20001090:	743b      	strb	r3, [r7, #16]
20001092:	887b      	ldrh	r3, [r7, #2]
20001094:	b2db      	uxtb	r3, r3
20001096:	747b      	strb	r3, [r7, #17]
					ILI9341_WriteData(data, sizeof(data));
20001098:	f107 0310 	add.w	r3, r7, #16
2000109c:	2102      	movs	r1, #2
2000109e:	4618      	mov	r0, r3
200010a0:	f7ff fae6 	bl	20000670 <ILI9341_WriteData>
200010a4:	e00d      	b.n	200010c2 <ILI9341_DrawMonochromeImage+0xe6>
				} else {
					uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
200010a6:	883b      	ldrh	r3, [r7, #0]
200010a8:	0a1b      	lsrs	r3, r3, #8
200010aa:	b29b      	uxth	r3, r3
200010ac:	b2db      	uxtb	r3, r3
200010ae:	733b      	strb	r3, [r7, #12]
200010b0:	883b      	ldrh	r3, [r7, #0]
200010b2:	b2db      	uxtb	r3, r3
200010b4:	737b      	strb	r3, [r7, #13]
					ILI9341_WriteData(data, sizeof(data));
200010b6:	f107 030c 	add.w	r3, r7, #12
200010ba:	2102      	movs	r1, #2
200010bc:	4618      	mov	r0, r3
200010be:	f7ff fad7 	bl	20000670 <ILI9341_WriteData>
			for (int j = 0; j < 8; j++) {
200010c2:	69bb      	ldr	r3, [r7, #24]
200010c4:	3301      	adds	r3, #1
200010c6:	61bb      	str	r3, [r7, #24]
200010c8:	69bb      	ldr	r3, [r7, #24]
200010ca:	2b07      	cmp	r3, #7
200010cc:	ddce      	ble.n	2000106c <ILI9341_DrawMonochromeImage+0x90>
200010ce:	e000      	b.n	200010d2 <ILI9341_DrawMonochromeImage+0xf6>
				if (count == 0) break;
200010d0:	bf00      	nop
		for (int u = 0; u < devider; u++) {
200010d2:	69fb      	ldr	r3, [r7, #28]
200010d4:	3301      	adds	r3, #1
200010d6:	61fb      	str	r3, [r7, #28]
200010d8:	8afb      	ldrh	r3, [r7, #22]
200010da:	69fa      	ldr	r2, [r7, #28]
200010dc:	429a      	cmp	r2, r3
200010de:	dbbb      	blt.n	20001058 <ILI9341_DrawMonochromeImage+0x7c>
	for (int i = 0; i < siz; i += devider) {
200010e0:	8afb      	ldrh	r3, [r7, #22]
200010e2:	6a3a      	ldr	r2, [r7, #32]
200010e4:	4413      	add	r3, r2
200010e6:	623b      	str	r3, [r7, #32]
200010e8:	8abb      	ldrh	r3, [r7, #20]
200010ea:	6a3a      	ldr	r2, [r7, #32]
200010ec:	429a      	cmp	r2, r3
200010ee:	dbae      	blt.n	2000104e <ILI9341_DrawMonochromeImage+0x72>
				}
			}
		}
	}
	ILI9341_Unselect();
200010f0:	f7ff fa84 	bl	200005fc <ILI9341_Unselect>
200010f4:	e000      	b.n	200010f8 <ILI9341_DrawMonochromeImage+0x11c>
		return;
200010f6:	bf00      	nop
}
200010f8:	372c      	adds	r7, #44	; 0x2c
200010fa:	46bd      	mov	sp, r7
200010fc:	bd90      	pop	{r4, r7, pc}

200010fe <writeFastVLine>:
 @param    x   Top-most x coordinate
 @param    y   Top-most y coordinate
 @param    h   Height in pixels
 @param    color 16-bit 5-6-5 Color to fill with
 **************************************************************************/
void writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
200010fe:	b590      	push	{r4, r7, lr}
20001100:	b085      	sub	sp, #20
20001102:	af02      	add	r7, sp, #8
20001104:	4604      	mov	r4, r0
20001106:	4608      	mov	r0, r1
20001108:	4611      	mov	r1, r2
2000110a:	461a      	mov	r2, r3
2000110c:	4623      	mov	r3, r4
2000110e:	80fb      	strh	r3, [r7, #6]
20001110:	4603      	mov	r3, r0
20001112:	80bb      	strh	r3, [r7, #4]
20001114:	460b      	mov	r3, r1
20001116:	807b      	strh	r3, [r7, #2]
20001118:	4613      	mov	r3, r2
2000111a:	803b      	strh	r3, [r7, #0]
	ILI9341_Select();
2000111c:	f7ff fa5e 	bl	200005dc <ILI9341_Select>
	ILI9341_FillRectangle(x, y, 1, h, color);
20001120:	88f8      	ldrh	r0, [r7, #6]
20001122:	88b9      	ldrh	r1, [r7, #4]
20001124:	887a      	ldrh	r2, [r7, #2]
20001126:	883b      	ldrh	r3, [r7, #0]
20001128:	9300      	str	r3, [sp, #0]
2000112a:	4613      	mov	r3, r2
2000112c:	2201      	movs	r2, #1
2000112e:	f7ff fc79 	bl	20000a24 <ILI9341_FillRectangle>
	//writeLine(x, y, x, y + h - 1, color);
	ILI9341_Unselect();
20001132:	f7ff fa63 	bl	200005fc <ILI9341_Unselect>
}
20001136:	bf00      	nop
20001138:	370c      	adds	r7, #12
2000113a:	46bd      	mov	sp, r7
2000113c:	bd90      	pop	{r4, r7, pc}

2000113e <writeFastHLine>:
 @param    x   Left-most x coordinate
 @param    y   Left-most y coordinate
 @param    w   Width in pixels
 @param    color 16-bit 5-6-5 Color to fill with
 **************************************************************************/
void writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
2000113e:	b590      	push	{r4, r7, lr}
20001140:	b085      	sub	sp, #20
20001142:	af02      	add	r7, sp, #8
20001144:	4604      	mov	r4, r0
20001146:	4608      	mov	r0, r1
20001148:	4611      	mov	r1, r2
2000114a:	461a      	mov	r2, r3
2000114c:	4623      	mov	r3, r4
2000114e:	80fb      	strh	r3, [r7, #6]
20001150:	4603      	mov	r3, r0
20001152:	80bb      	strh	r3, [r7, #4]
20001154:	460b      	mov	r3, r1
20001156:	807b      	strh	r3, [r7, #2]
20001158:	4613      	mov	r3, r2
2000115a:	803b      	strh	r3, [r7, #0]
	ILI9341_Select();
2000115c:	f7ff fa3e 	bl	200005dc <ILI9341_Select>
	ILI9341_FillRectangle(x, y, w, 1, color);
20001160:	88f8      	ldrh	r0, [r7, #6]
20001162:	88b9      	ldrh	r1, [r7, #4]
20001164:	887a      	ldrh	r2, [r7, #2]
20001166:	883b      	ldrh	r3, [r7, #0]
20001168:	9300      	str	r3, [sp, #0]
2000116a:	2301      	movs	r3, #1
2000116c:	f7ff fc5a 	bl	20000a24 <ILI9341_FillRectangle>
	//writeLine(x, y, x + w - 1, y, color);
	ILI9341_Unselect();
20001170:	f7ff fa44 	bl	200005fc <ILI9341_Unselect>
}
20001174:	bf00      	nop
20001176:	370c      	adds	r7, #12
20001178:	46bd      	mov	sp, r7
2000117a:	bd90      	pop	{r4, r7, pc}

2000117c <drawRect>:
 @param    y   Top left corner y coordinate
 @param    w   Width in pixels
 @param    h   Height in pixels
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
2000117c:	b590      	push	{r4, r7, lr}
2000117e:	b083      	sub	sp, #12
20001180:	af00      	add	r7, sp, #0
20001182:	4604      	mov	r4, r0
20001184:	4608      	mov	r0, r1
20001186:	4611      	mov	r1, r2
20001188:	461a      	mov	r2, r3
2000118a:	4623      	mov	r3, r4
2000118c:	80fb      	strh	r3, [r7, #6]
2000118e:	4603      	mov	r3, r0
20001190:	80bb      	strh	r3, [r7, #4]
20001192:	460b      	mov	r3, r1
20001194:	807b      	strh	r3, [r7, #2]
20001196:	4613      	mov	r3, r2
20001198:	803b      	strh	r3, [r7, #0]
	writeFastHLine(x, y, w, color);
2000119a:	8b3b      	ldrh	r3, [r7, #24]
2000119c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
200011a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
200011a4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
200011a8:	f7ff ffc9 	bl	2000113e <writeFastHLine>
	writeFastHLine(x, y + h - 1, w, color);
200011ac:	88ba      	ldrh	r2, [r7, #4]
200011ae:	883b      	ldrh	r3, [r7, #0]
200011b0:	4413      	add	r3, r2
200011b2:	b29b      	uxth	r3, r3
200011b4:	3b01      	subs	r3, #1
200011b6:	b29b      	uxth	r3, r3
200011b8:	b219      	sxth	r1, r3
200011ba:	8b3b      	ldrh	r3, [r7, #24]
200011bc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
200011c0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
200011c4:	f7ff ffbb 	bl	2000113e <writeFastHLine>
	writeFastVLine(x, y, h, color);
200011c8:	8b3b      	ldrh	r3, [r7, #24]
200011ca:	f9b7 2000 	ldrsh.w	r2, [r7]
200011ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
200011d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
200011d6:	f7ff ff92 	bl	200010fe <writeFastVLine>
	writeFastVLine(x + w - 1, y, h, color);
200011da:	88fa      	ldrh	r2, [r7, #6]
200011dc:	887b      	ldrh	r3, [r7, #2]
200011de:	4413      	add	r3, r2
200011e0:	b29b      	uxth	r3, r3
200011e2:	3b01      	subs	r3, #1
200011e4:	b29b      	uxth	r3, r3
200011e6:	b218      	sxth	r0, r3
200011e8:	8b3b      	ldrh	r3, [r7, #24]
200011ea:	f9b7 2000 	ldrsh.w	r2, [r7]
200011ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
200011f2:	f7ff ff84 	bl	200010fe <writeFastVLine>
}
200011f6:	bf00      	nop
200011f8:	370c      	adds	r7, #12
200011fa:	46bd      	mov	sp, r7
200011fc:	bd90      	pop	{r4, r7, pc}

200011fe <drawCircleHelper>:
 @param    r   Radius of circle
 @param    cornername  Mask bit #1 or bit #2 to indicate which quarters of the circle we're doing
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
200011fe:	b590      	push	{r4, r7, lr}
20001200:	b087      	sub	sp, #28
20001202:	af00      	add	r7, sp, #0
20001204:	4604      	mov	r4, r0
20001206:	4608      	mov	r0, r1
20001208:	4611      	mov	r1, r2
2000120a:	461a      	mov	r2, r3
2000120c:	4623      	mov	r3, r4
2000120e:	80fb      	strh	r3, [r7, #6]
20001210:	4603      	mov	r3, r0
20001212:	80bb      	strh	r3, [r7, #4]
20001214:	460b      	mov	r3, r1
20001216:	807b      	strh	r3, [r7, #2]
20001218:	4613      	mov	r3, r2
2000121a:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
2000121c:	887b      	ldrh	r3, [r7, #2]
2000121e:	f1c3 0301 	rsb	r3, r3, #1
20001222:	b29b      	uxth	r3, r3
20001224:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
20001226:	2301      	movs	r3, #1
20001228:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
2000122a:	887b      	ldrh	r3, [r7, #2]
2000122c:	461a      	mov	r2, r3
2000122e:	03d2      	lsls	r2, r2, #15
20001230:	1ad3      	subs	r3, r2, r3
20001232:	005b      	lsls	r3, r3, #1
20001234:	b29b      	uxth	r3, r3
20001236:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
20001238:	2300      	movs	r3, #0
2000123a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
2000123c:	887b      	ldrh	r3, [r7, #2]
2000123e:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
20001240:	e095      	b.n	2000136e <drawCircleHelper+0x170>
		if (f >= 0) {
20001242:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
20001246:	2b00      	cmp	r3, #0
20001248:	db0e      	blt.n	20001268 <drawCircleHelper+0x6a>
			y--;
2000124a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
2000124e:	b29b      	uxth	r3, r3
20001250:	3b01      	subs	r3, #1
20001252:	b29b      	uxth	r3, r3
20001254:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
20001256:	8a7b      	ldrh	r3, [r7, #18]
20001258:	3302      	adds	r3, #2
2000125a:	b29b      	uxth	r3, r3
2000125c:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
2000125e:	8afa      	ldrh	r2, [r7, #22]
20001260:	8a7b      	ldrh	r3, [r7, #18]
20001262:	4413      	add	r3, r2
20001264:	b29b      	uxth	r3, r3
20001266:	82fb      	strh	r3, [r7, #22]
		}
		x++;
20001268:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
2000126c:	b29b      	uxth	r3, r3
2000126e:	3301      	adds	r3, #1
20001270:	b29b      	uxth	r3, r3
20001272:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
20001274:	8abb      	ldrh	r3, [r7, #20]
20001276:	3302      	adds	r3, #2
20001278:	b29b      	uxth	r3, r3
2000127a:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
2000127c:	8afa      	ldrh	r2, [r7, #22]
2000127e:	8abb      	ldrh	r3, [r7, #20]
20001280:	4413      	add	r3, r2
20001282:	b29b      	uxth	r3, r3
20001284:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
20001286:	787b      	ldrb	r3, [r7, #1]
20001288:	f003 0304 	and.w	r3, r3, #4
2000128c:	2b00      	cmp	r3, #0
2000128e:	d017      	beq.n	200012c0 <drawCircleHelper+0xc2>
			ILI9341_DrawPixel(x0 + x, y0 + y, color);
20001290:	88fa      	ldrh	r2, [r7, #6]
20001292:	8a3b      	ldrh	r3, [r7, #16]
20001294:	4413      	add	r3, r2
20001296:	b298      	uxth	r0, r3
20001298:	88ba      	ldrh	r2, [r7, #4]
2000129a:	89fb      	ldrh	r3, [r7, #14]
2000129c:	4413      	add	r3, r2
2000129e:	b29b      	uxth	r3, r3
200012a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
200012a2:	4619      	mov	r1, r3
200012a4:	f7ff fb8c 	bl	200009c0 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 + y, y0 + x, color);
200012a8:	88fa      	ldrh	r2, [r7, #6]
200012aa:	89fb      	ldrh	r3, [r7, #14]
200012ac:	4413      	add	r3, r2
200012ae:	b298      	uxth	r0, r3
200012b0:	88ba      	ldrh	r2, [r7, #4]
200012b2:	8a3b      	ldrh	r3, [r7, #16]
200012b4:	4413      	add	r3, r2
200012b6:	b29b      	uxth	r3, r3
200012b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
200012ba:	4619      	mov	r1, r3
200012bc:	f7ff fb80 	bl	200009c0 <ILI9341_DrawPixel>
		}
		if (cornername & 0x2) {
200012c0:	787b      	ldrb	r3, [r7, #1]
200012c2:	f003 0302 	and.w	r3, r3, #2
200012c6:	2b00      	cmp	r3, #0
200012c8:	d017      	beq.n	200012fa <drawCircleHelper+0xfc>
			ILI9341_DrawPixel(x0 + x, y0 - y, color);
200012ca:	88fa      	ldrh	r2, [r7, #6]
200012cc:	8a3b      	ldrh	r3, [r7, #16]
200012ce:	4413      	add	r3, r2
200012d0:	b298      	uxth	r0, r3
200012d2:	88ba      	ldrh	r2, [r7, #4]
200012d4:	89fb      	ldrh	r3, [r7, #14]
200012d6:	1ad3      	subs	r3, r2, r3
200012d8:	b29b      	uxth	r3, r3
200012da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
200012dc:	4619      	mov	r1, r3
200012de:	f7ff fb6f 	bl	200009c0 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 + y, y0 - x, color);
200012e2:	88fa      	ldrh	r2, [r7, #6]
200012e4:	89fb      	ldrh	r3, [r7, #14]
200012e6:	4413      	add	r3, r2
200012e8:	b298      	uxth	r0, r3
200012ea:	88ba      	ldrh	r2, [r7, #4]
200012ec:	8a3b      	ldrh	r3, [r7, #16]
200012ee:	1ad3      	subs	r3, r2, r3
200012f0:	b29b      	uxth	r3, r3
200012f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
200012f4:	4619      	mov	r1, r3
200012f6:	f7ff fb63 	bl	200009c0 <ILI9341_DrawPixel>
		}
		if (cornername & 0x8) {
200012fa:	787b      	ldrb	r3, [r7, #1]
200012fc:	f003 0308 	and.w	r3, r3, #8
20001300:	2b00      	cmp	r3, #0
20001302:	d017      	beq.n	20001334 <drawCircleHelper+0x136>
			ILI9341_DrawPixel(x0 - y, y0 + x, color);
20001304:	88fa      	ldrh	r2, [r7, #6]
20001306:	89fb      	ldrh	r3, [r7, #14]
20001308:	1ad3      	subs	r3, r2, r3
2000130a:	b298      	uxth	r0, r3
2000130c:	88ba      	ldrh	r2, [r7, #4]
2000130e:	8a3b      	ldrh	r3, [r7, #16]
20001310:	4413      	add	r3, r2
20001312:	b29b      	uxth	r3, r3
20001314:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
20001316:	4619      	mov	r1, r3
20001318:	f7ff fb52 	bl	200009c0 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 - x, y0 + y, color);
2000131c:	88fa      	ldrh	r2, [r7, #6]
2000131e:	8a3b      	ldrh	r3, [r7, #16]
20001320:	1ad3      	subs	r3, r2, r3
20001322:	b298      	uxth	r0, r3
20001324:	88ba      	ldrh	r2, [r7, #4]
20001326:	89fb      	ldrh	r3, [r7, #14]
20001328:	4413      	add	r3, r2
2000132a:	b29b      	uxth	r3, r3
2000132c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
2000132e:	4619      	mov	r1, r3
20001330:	f7ff fb46 	bl	200009c0 <ILI9341_DrawPixel>
		}
		if (cornername & 0x1) {
20001334:	787b      	ldrb	r3, [r7, #1]
20001336:	f003 0301 	and.w	r3, r3, #1
2000133a:	2b00      	cmp	r3, #0
2000133c:	d017      	beq.n	2000136e <drawCircleHelper+0x170>
			ILI9341_DrawPixel(x0 - y, y0 - x, color);
2000133e:	88fa      	ldrh	r2, [r7, #6]
20001340:	89fb      	ldrh	r3, [r7, #14]
20001342:	1ad3      	subs	r3, r2, r3
20001344:	b298      	uxth	r0, r3
20001346:	88ba      	ldrh	r2, [r7, #4]
20001348:	8a3b      	ldrh	r3, [r7, #16]
2000134a:	1ad3      	subs	r3, r2, r3
2000134c:	b29b      	uxth	r3, r3
2000134e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
20001350:	4619      	mov	r1, r3
20001352:	f7ff fb35 	bl	200009c0 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 - x, y0 - y, color);
20001356:	88fa      	ldrh	r2, [r7, #6]
20001358:	8a3b      	ldrh	r3, [r7, #16]
2000135a:	1ad3      	subs	r3, r2, r3
2000135c:	b298      	uxth	r0, r3
2000135e:	88ba      	ldrh	r2, [r7, #4]
20001360:	89fb      	ldrh	r3, [r7, #14]
20001362:	1ad3      	subs	r3, r2, r3
20001364:	b29b      	uxth	r3, r3
20001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
20001368:	4619      	mov	r1, r3
2000136a:	f7ff fb29 	bl	200009c0 <ILI9341_DrawPixel>
	while (x < y) {
2000136e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
20001372:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001376:	429a      	cmp	r2, r3
20001378:	f6ff af63 	blt.w	20001242 <drawCircleHelper+0x44>
		}
	}
}
2000137c:	bf00      	nop
2000137e:	bf00      	nop
20001380:	371c      	adds	r7, #28
20001382:	46bd      	mov	sp, r7
20001384:	bd90      	pop	{r4, r7, pc}

20001386 <fillCircleHelper>:
 @param  corners  Mask bits indicating which quarters we're doing
 @param  delta    Offset from center-point, used for round-rects
 @param  color    16-bit 5-6-5 Color to fill with
 **************************************************************************/
void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners,
		int16_t delta, uint16_t color) {
20001386:	b590      	push	{r4, r7, lr}
20001388:	b087      	sub	sp, #28
2000138a:	af00      	add	r7, sp, #0
2000138c:	4604      	mov	r4, r0
2000138e:	4608      	mov	r0, r1
20001390:	4611      	mov	r1, r2
20001392:	461a      	mov	r2, r3
20001394:	4623      	mov	r3, r4
20001396:	80fb      	strh	r3, [r7, #6]
20001398:	4603      	mov	r3, r0
2000139a:	80bb      	strh	r3, [r7, #4]
2000139c:	460b      	mov	r3, r1
2000139e:	807b      	strh	r3, [r7, #2]
200013a0:	4613      	mov	r3, r2
200013a2:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
200013a4:	887b      	ldrh	r3, [r7, #2]
200013a6:	f1c3 0301 	rsb	r3, r3, #1
200013aa:	b29b      	uxth	r3, r3
200013ac:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
200013ae:	2301      	movs	r3, #1
200013b0:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
200013b2:	887b      	ldrh	r3, [r7, #2]
200013b4:	461a      	mov	r2, r3
200013b6:	03d2      	lsls	r2, r2, #15
200013b8:	1ad3      	subs	r3, r2, r3
200013ba:	005b      	lsls	r3, r3, #1
200013bc:	b29b      	uxth	r3, r3
200013be:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
200013c0:	2300      	movs	r3, #0
200013c2:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
200013c4:	887b      	ldrh	r3, [r7, #2]
200013c6:	81fb      	strh	r3, [r7, #14]
	int16_t px = x;
200013c8:	8a3b      	ldrh	r3, [r7, #16]
200013ca:	81bb      	strh	r3, [r7, #12]
	int16_t py = y;
200013cc:	89fb      	ldrh	r3, [r7, #14]
200013ce:	817b      	strh	r3, [r7, #10]

	delta++; // Avoid some +1's in the loop
200013d0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
200013d4:	b29b      	uxth	r3, r3
200013d6:	3301      	adds	r3, #1
200013d8:	b29b      	uxth	r3, r3
200013da:	853b      	strh	r3, [r7, #40]	; 0x28

	while (x < y) {
200013dc:	e095      	b.n	2000150a <fillCircleHelper+0x184>
		if (f >= 0) {
200013de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
200013e2:	2b00      	cmp	r3, #0
200013e4:	db0e      	blt.n	20001404 <fillCircleHelper+0x7e>
			y--;
200013e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
200013ea:	b29b      	uxth	r3, r3
200013ec:	3b01      	subs	r3, #1
200013ee:	b29b      	uxth	r3, r3
200013f0:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
200013f2:	8a7b      	ldrh	r3, [r7, #18]
200013f4:	3302      	adds	r3, #2
200013f6:	b29b      	uxth	r3, r3
200013f8:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
200013fa:	8afa      	ldrh	r2, [r7, #22]
200013fc:	8a7b      	ldrh	r3, [r7, #18]
200013fe:	4413      	add	r3, r2
20001400:	b29b      	uxth	r3, r3
20001402:	82fb      	strh	r3, [r7, #22]
		}
		x++;
20001404:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
20001408:	b29b      	uxth	r3, r3
2000140a:	3301      	adds	r3, #1
2000140c:	b29b      	uxth	r3, r3
2000140e:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
20001410:	8abb      	ldrh	r3, [r7, #20]
20001412:	3302      	adds	r3, #2
20001414:	b29b      	uxth	r3, r3
20001416:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
20001418:	8afa      	ldrh	r2, [r7, #22]
2000141a:	8abb      	ldrh	r3, [r7, #20]
2000141c:	4413      	add	r3, r2
2000141e:	b29b      	uxth	r3, r3
20001420:	82fb      	strh	r3, [r7, #22]
		// These checks avoid double-drawing certain lines, important
		// for the SSD1306 library which has an INVERT drawing mode.
		if (x < (y + 1)) {
20001422:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
20001426:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
2000142a:	429a      	cmp	r2, r3
2000142c:	db31      	blt.n	20001492 <fillCircleHelper+0x10c>
			if (corners & 1)
2000142e:	787b      	ldrb	r3, [r7, #1]
20001430:	f003 0301 	and.w	r3, r3, #1
20001434:	2b00      	cmp	r3, #0
20001436:	d013      	beq.n	20001460 <fillCircleHelper+0xda>
				writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
20001438:	88fa      	ldrh	r2, [r7, #6]
2000143a:	8a3b      	ldrh	r3, [r7, #16]
2000143c:	4413      	add	r3, r2
2000143e:	b29b      	uxth	r3, r3
20001440:	b218      	sxth	r0, r3
20001442:	88ba      	ldrh	r2, [r7, #4]
20001444:	89fb      	ldrh	r3, [r7, #14]
20001446:	1ad3      	subs	r3, r2, r3
20001448:	b29b      	uxth	r3, r3
2000144a:	b219      	sxth	r1, r3
2000144c:	89fb      	ldrh	r3, [r7, #14]
2000144e:	005b      	lsls	r3, r3, #1
20001450:	b29a      	uxth	r2, r3
20001452:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20001454:	4413      	add	r3, r2
20001456:	b29b      	uxth	r3, r3
20001458:	b21a      	sxth	r2, r3
2000145a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
2000145c:	f7ff fe4f 	bl	200010fe <writeFastVLine>
			if (corners & 2)
20001460:	787b      	ldrb	r3, [r7, #1]
20001462:	f003 0302 	and.w	r3, r3, #2
20001466:	2b00      	cmp	r3, #0
20001468:	d013      	beq.n	20001492 <fillCircleHelper+0x10c>
				writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
2000146a:	88fa      	ldrh	r2, [r7, #6]
2000146c:	8a3b      	ldrh	r3, [r7, #16]
2000146e:	1ad3      	subs	r3, r2, r3
20001470:	b29b      	uxth	r3, r3
20001472:	b218      	sxth	r0, r3
20001474:	88ba      	ldrh	r2, [r7, #4]
20001476:	89fb      	ldrh	r3, [r7, #14]
20001478:	1ad3      	subs	r3, r2, r3
2000147a:	b29b      	uxth	r3, r3
2000147c:	b219      	sxth	r1, r3
2000147e:	89fb      	ldrh	r3, [r7, #14]
20001480:	005b      	lsls	r3, r3, #1
20001482:	b29a      	uxth	r2, r3
20001484:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20001486:	4413      	add	r3, r2
20001488:	b29b      	uxth	r3, r3
2000148a:	b21a      	sxth	r2, r3
2000148c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
2000148e:	f7ff fe36 	bl	200010fe <writeFastVLine>
		}
		if (y != py) {
20001492:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
20001496:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
2000149a:	429a      	cmp	r2, r3
2000149c:	d033      	beq.n	20001506 <fillCircleHelper+0x180>
			if (corners & 1)
2000149e:	787b      	ldrb	r3, [r7, #1]
200014a0:	f003 0301 	and.w	r3, r3, #1
200014a4:	2b00      	cmp	r3, #0
200014a6:	d013      	beq.n	200014d0 <fillCircleHelper+0x14a>
				writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
200014a8:	88fa      	ldrh	r2, [r7, #6]
200014aa:	897b      	ldrh	r3, [r7, #10]
200014ac:	4413      	add	r3, r2
200014ae:	b29b      	uxth	r3, r3
200014b0:	b218      	sxth	r0, r3
200014b2:	88ba      	ldrh	r2, [r7, #4]
200014b4:	89bb      	ldrh	r3, [r7, #12]
200014b6:	1ad3      	subs	r3, r2, r3
200014b8:	b29b      	uxth	r3, r3
200014ba:	b219      	sxth	r1, r3
200014bc:	89bb      	ldrh	r3, [r7, #12]
200014be:	005b      	lsls	r3, r3, #1
200014c0:	b29a      	uxth	r2, r3
200014c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
200014c4:	4413      	add	r3, r2
200014c6:	b29b      	uxth	r3, r3
200014c8:	b21a      	sxth	r2, r3
200014ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
200014cc:	f7ff fe17 	bl	200010fe <writeFastVLine>
			if (corners & 2)
200014d0:	787b      	ldrb	r3, [r7, #1]
200014d2:	f003 0302 	and.w	r3, r3, #2
200014d6:	2b00      	cmp	r3, #0
200014d8:	d013      	beq.n	20001502 <fillCircleHelper+0x17c>
				writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
200014da:	88fa      	ldrh	r2, [r7, #6]
200014dc:	897b      	ldrh	r3, [r7, #10]
200014de:	1ad3      	subs	r3, r2, r3
200014e0:	b29b      	uxth	r3, r3
200014e2:	b218      	sxth	r0, r3
200014e4:	88ba      	ldrh	r2, [r7, #4]
200014e6:	89bb      	ldrh	r3, [r7, #12]
200014e8:	1ad3      	subs	r3, r2, r3
200014ea:	b29b      	uxth	r3, r3
200014ec:	b219      	sxth	r1, r3
200014ee:	89bb      	ldrh	r3, [r7, #12]
200014f0:	005b      	lsls	r3, r3, #1
200014f2:	b29a      	uxth	r2, r3
200014f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
200014f6:	4413      	add	r3, r2
200014f8:	b29b      	uxth	r3, r3
200014fa:	b21a      	sxth	r2, r3
200014fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
200014fe:	f7ff fdfe 	bl	200010fe <writeFastVLine>
			py = y;
20001502:	89fb      	ldrh	r3, [r7, #14]
20001504:	817b      	strh	r3, [r7, #10]
		}
		px = x;
20001506:	8a3b      	ldrh	r3, [r7, #16]
20001508:	81bb      	strh	r3, [r7, #12]
	while (x < y) {
2000150a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
2000150e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001512:	429a      	cmp	r2, r3
20001514:	f6ff af63 	blt.w	200013de <fillCircleHelper+0x58>
	}
}
20001518:	bf00      	nop
2000151a:	bf00      	nop
2000151c:	371c      	adds	r7, #28
2000151e:	46bd      	mov	sp, r7
20001520:	bd90      	pop	{r4, r7, pc}

20001522 <drawRoundRect>:
 @param    h   Height in pixels
 @param    r   Radius of corner rounding
 @param    color 16-bit 5-6-5 Color to draw/fill with
 **************************************************************************/
void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
20001522:	b590      	push	{r4, r7, lr}
20001524:	b087      	sub	sp, #28
20001526:	af02      	add	r7, sp, #8
20001528:	4604      	mov	r4, r0
2000152a:	4608      	mov	r0, r1
2000152c:	4611      	mov	r1, r2
2000152e:	461a      	mov	r2, r3
20001530:	4623      	mov	r3, r4
20001532:	80fb      	strh	r3, [r7, #6]
20001534:	4603      	mov	r3, r0
20001536:	80bb      	strh	r3, [r7, #4]
20001538:	460b      	mov	r3, r1
2000153a:	807b      	strh	r3, [r7, #2]
2000153c:	4613      	mov	r3, r2
2000153e:	803b      	strh	r3, [r7, #0]
	int16_t max_radius = 0;
20001540:	2300      	movs	r3, #0
20001542:	81fb      	strh	r3, [r7, #14]
	if (w < h)
20001544:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
20001548:	f9b7 3000 	ldrsh.w	r3, [r7]
2000154c:	429a      	cmp	r2, r3
2000154e:	da06      	bge.n	2000155e <drawRoundRect+0x3c>
		max_radius = w / 2;
20001550:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
20001554:	0fda      	lsrs	r2, r3, #31
20001556:	4413      	add	r3, r2
20001558:	105b      	asrs	r3, r3, #1
2000155a:	81fb      	strh	r3, [r7, #14]
2000155c:	e005      	b.n	2000156a <drawRoundRect+0x48>
	else
		max_radius = h / 2;              // 1/2 minor axis
2000155e:	f9b7 3000 	ldrsh.w	r3, [r7]
20001562:	0fda      	lsrs	r2, r3, #31
20001564:	4413      	add	r3, r2
20001566:	105b      	asrs	r3, r3, #1
20001568:	81fb      	strh	r3, [r7, #14]
	if (r > max_radius)
2000156a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
2000156e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001572:	429a      	cmp	r2, r3
20001574:	dd01      	ble.n	2000157a <drawRoundRect+0x58>
		r = max_radius;
20001576:	89fb      	ldrh	r3, [r7, #14]
20001578:	843b      	strh	r3, [r7, #32]
// smarter version
	ILI9341_Select();
2000157a:	f7ff f82f 	bl	200005dc <ILI9341_Select>
	writeFastHLine(x + r, y, w - 2 * r, color);         // Top
2000157e:	88fa      	ldrh	r2, [r7, #6]
20001580:	8c3b      	ldrh	r3, [r7, #32]
20001582:	4413      	add	r3, r2
20001584:	b29b      	uxth	r3, r3
20001586:	b218      	sxth	r0, r3
20001588:	887a      	ldrh	r2, [r7, #2]
2000158a:	8c3b      	ldrh	r3, [r7, #32]
2000158c:	005b      	lsls	r3, r3, #1
2000158e:	b29b      	uxth	r3, r3
20001590:	1ad3      	subs	r3, r2, r3
20001592:	b29b      	uxth	r3, r3
20001594:	b21a      	sxth	r2, r3
20001596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001598:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
2000159c:	f7ff fdcf 	bl	2000113e <writeFastHLine>
	writeFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
200015a0:	88fa      	ldrh	r2, [r7, #6]
200015a2:	8c3b      	ldrh	r3, [r7, #32]
200015a4:	4413      	add	r3, r2
200015a6:	b29b      	uxth	r3, r3
200015a8:	b218      	sxth	r0, r3
200015aa:	88ba      	ldrh	r2, [r7, #4]
200015ac:	883b      	ldrh	r3, [r7, #0]
200015ae:	4413      	add	r3, r2
200015b0:	b29b      	uxth	r3, r3
200015b2:	3b01      	subs	r3, #1
200015b4:	b29b      	uxth	r3, r3
200015b6:	b219      	sxth	r1, r3
200015b8:	887a      	ldrh	r2, [r7, #2]
200015ba:	8c3b      	ldrh	r3, [r7, #32]
200015bc:	005b      	lsls	r3, r3, #1
200015be:	b29b      	uxth	r3, r3
200015c0:	1ad3      	subs	r3, r2, r3
200015c2:	b29b      	uxth	r3, r3
200015c4:	b21a      	sxth	r2, r3
200015c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
200015c8:	f7ff fdb9 	bl	2000113e <writeFastHLine>
	writeFastVLine(x, y + r, h - 2 * r, color);         // Left
200015cc:	88ba      	ldrh	r2, [r7, #4]
200015ce:	8c3b      	ldrh	r3, [r7, #32]
200015d0:	4413      	add	r3, r2
200015d2:	b29b      	uxth	r3, r3
200015d4:	b219      	sxth	r1, r3
200015d6:	883a      	ldrh	r2, [r7, #0]
200015d8:	8c3b      	ldrh	r3, [r7, #32]
200015da:	005b      	lsls	r3, r3, #1
200015dc:	b29b      	uxth	r3, r3
200015de:	1ad3      	subs	r3, r2, r3
200015e0:	b29b      	uxth	r3, r3
200015e2:	b21a      	sxth	r2, r3
200015e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
200015e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
200015ea:	f7ff fd88 	bl	200010fe <writeFastVLine>
	writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
200015ee:	88fa      	ldrh	r2, [r7, #6]
200015f0:	887b      	ldrh	r3, [r7, #2]
200015f2:	4413      	add	r3, r2
200015f4:	b29b      	uxth	r3, r3
200015f6:	3b01      	subs	r3, #1
200015f8:	b29b      	uxth	r3, r3
200015fa:	b218      	sxth	r0, r3
200015fc:	88ba      	ldrh	r2, [r7, #4]
200015fe:	8c3b      	ldrh	r3, [r7, #32]
20001600:	4413      	add	r3, r2
20001602:	b29b      	uxth	r3, r3
20001604:	b219      	sxth	r1, r3
20001606:	883a      	ldrh	r2, [r7, #0]
20001608:	8c3b      	ldrh	r3, [r7, #32]
2000160a:	005b      	lsls	r3, r3, #1
2000160c:	b29b      	uxth	r3, r3
2000160e:	1ad3      	subs	r3, r2, r3
20001610:	b29b      	uxth	r3, r3
20001612:	b21a      	sxth	r2, r3
20001614:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001616:	f7ff fd72 	bl	200010fe <writeFastVLine>
// draw four corners
	drawCircleHelper(x + r, y + r, r, 1, color);
2000161a:	88fa      	ldrh	r2, [r7, #6]
2000161c:	8c3b      	ldrh	r3, [r7, #32]
2000161e:	4413      	add	r3, r2
20001620:	b29b      	uxth	r3, r3
20001622:	b218      	sxth	r0, r3
20001624:	88ba      	ldrh	r2, [r7, #4]
20001626:	8c3b      	ldrh	r3, [r7, #32]
20001628:	4413      	add	r3, r2
2000162a:	b29b      	uxth	r3, r3
2000162c:	b219      	sxth	r1, r3
2000162e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
20001632:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001634:	9300      	str	r3, [sp, #0]
20001636:	2301      	movs	r3, #1
20001638:	f7ff fde1 	bl	200011fe <drawCircleHelper>
	drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
2000163c:	88fa      	ldrh	r2, [r7, #6]
2000163e:	887b      	ldrh	r3, [r7, #2]
20001640:	4413      	add	r3, r2
20001642:	b29a      	uxth	r2, r3
20001644:	8c3b      	ldrh	r3, [r7, #32]
20001646:	1ad3      	subs	r3, r2, r3
20001648:	b29b      	uxth	r3, r3
2000164a:	3b01      	subs	r3, #1
2000164c:	b29b      	uxth	r3, r3
2000164e:	b218      	sxth	r0, r3
20001650:	88ba      	ldrh	r2, [r7, #4]
20001652:	8c3b      	ldrh	r3, [r7, #32]
20001654:	4413      	add	r3, r2
20001656:	b29b      	uxth	r3, r3
20001658:	b219      	sxth	r1, r3
2000165a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
2000165e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001660:	9300      	str	r3, [sp, #0]
20001662:	2302      	movs	r3, #2
20001664:	f7ff fdcb 	bl	200011fe <drawCircleHelper>
	drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
20001668:	88fa      	ldrh	r2, [r7, #6]
2000166a:	887b      	ldrh	r3, [r7, #2]
2000166c:	4413      	add	r3, r2
2000166e:	b29a      	uxth	r2, r3
20001670:	8c3b      	ldrh	r3, [r7, #32]
20001672:	1ad3      	subs	r3, r2, r3
20001674:	b29b      	uxth	r3, r3
20001676:	3b01      	subs	r3, #1
20001678:	b29b      	uxth	r3, r3
2000167a:	b218      	sxth	r0, r3
2000167c:	88ba      	ldrh	r2, [r7, #4]
2000167e:	883b      	ldrh	r3, [r7, #0]
20001680:	4413      	add	r3, r2
20001682:	b29a      	uxth	r2, r3
20001684:	8c3b      	ldrh	r3, [r7, #32]
20001686:	1ad3      	subs	r3, r2, r3
20001688:	b29b      	uxth	r3, r3
2000168a:	3b01      	subs	r3, #1
2000168c:	b29b      	uxth	r3, r3
2000168e:	b219      	sxth	r1, r3
20001690:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
20001694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001696:	9300      	str	r3, [sp, #0]
20001698:	2304      	movs	r3, #4
2000169a:	f7ff fdb0 	bl	200011fe <drawCircleHelper>
	drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
2000169e:	88fa      	ldrh	r2, [r7, #6]
200016a0:	8c3b      	ldrh	r3, [r7, #32]
200016a2:	4413      	add	r3, r2
200016a4:	b29b      	uxth	r3, r3
200016a6:	b218      	sxth	r0, r3
200016a8:	88ba      	ldrh	r2, [r7, #4]
200016aa:	883b      	ldrh	r3, [r7, #0]
200016ac:	4413      	add	r3, r2
200016ae:	b29a      	uxth	r2, r3
200016b0:	8c3b      	ldrh	r3, [r7, #32]
200016b2:	1ad3      	subs	r3, r2, r3
200016b4:	b29b      	uxth	r3, r3
200016b6:	3b01      	subs	r3, #1
200016b8:	b29b      	uxth	r3, r3
200016ba:	b219      	sxth	r1, r3
200016bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
200016c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
200016c2:	9300      	str	r3, [sp, #0]
200016c4:	2308      	movs	r3, #8
200016c6:	f7ff fd9a 	bl	200011fe <drawCircleHelper>
	ILI9341_Unselect();
200016ca:	f7fe ff97 	bl	200005fc <ILI9341_Unselect>
}
200016ce:	bf00      	nop
200016d0:	3714      	adds	r7, #20
200016d2:	46bd      	mov	sp, r7
200016d4:	bd90      	pop	{r4, r7, pc}

200016d6 <drawSomePixelRoundRect>:

void drawSomePixelRoundRect(int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, int16_t countPixel, uint16_t color) {
200016d6:	b590      	push	{r4, r7, lr}
200016d8:	b087      	sub	sp, #28
200016da:	af02      	add	r7, sp, #8
200016dc:	4604      	mov	r4, r0
200016de:	4608      	mov	r0, r1
200016e0:	4611      	mov	r1, r2
200016e2:	461a      	mov	r2, r3
200016e4:	4623      	mov	r3, r4
200016e6:	80fb      	strh	r3, [r7, #6]
200016e8:	4603      	mov	r3, r0
200016ea:	80bb      	strh	r3, [r7, #4]
200016ec:	460b      	mov	r3, r1
200016ee:	807b      	strh	r3, [r7, #2]
200016f0:	4613      	mov	r3, r2
200016f2:	803b      	strh	r3, [r7, #0]
	if (countPixel < 1)
200016f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
200016f8:	2b00      	cmp	r3, #0
200016fa:	dd44      	ble.n	20001786 <drawSomePixelRoundRect+0xb0>
		return;
	for (int i = 0; i < countPixel; i++) {
200016fc:	2300      	movs	r3, #0
200016fe:	60fb      	str	r3, [r7, #12]
20001700:	e03b      	b.n	2000177a <drawSomePixelRoundRect+0xa4>
		if (i == 0) {
20001702:	68fb      	ldr	r3, [r7, #12]
20001704:	2b00      	cmp	r3, #0
20001706:	d110      	bne.n	2000172a <drawSomePixelRoundRect+0x54>
			drawRoundRect(x, y, w, h, r, color);
20001708:	f9b7 4000 	ldrsh.w	r4, [r7]
2000170c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
20001710:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
20001714:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
20001718:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2000171a:	9301      	str	r3, [sp, #4]
2000171c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
20001720:	9300      	str	r3, [sp, #0]
20001722:	4623      	mov	r3, r4
20001724:	f7ff fefd 	bl	20001522 <drawRoundRect>
			continue;
20001728:	e024      	b.n	20001774 <drawSomePixelRoundRect+0x9e>
		}
		drawRoundRect(x + i, y + i, w - i * 2, h - i * 2, r, color);
2000172a:	68fb      	ldr	r3, [r7, #12]
2000172c:	b29a      	uxth	r2, r3
2000172e:	88fb      	ldrh	r3, [r7, #6]
20001730:	4413      	add	r3, r2
20001732:	b29b      	uxth	r3, r3
20001734:	b218      	sxth	r0, r3
20001736:	68fb      	ldr	r3, [r7, #12]
20001738:	b29a      	uxth	r2, r3
2000173a:	88bb      	ldrh	r3, [r7, #4]
2000173c:	4413      	add	r3, r2
2000173e:	b29b      	uxth	r3, r3
20001740:	b219      	sxth	r1, r3
20001742:	887a      	ldrh	r2, [r7, #2]
20001744:	68fb      	ldr	r3, [r7, #12]
20001746:	b29b      	uxth	r3, r3
20001748:	005b      	lsls	r3, r3, #1
2000174a:	b29b      	uxth	r3, r3
2000174c:	1ad3      	subs	r3, r2, r3
2000174e:	b29b      	uxth	r3, r3
20001750:	b21c      	sxth	r4, r3
20001752:	883a      	ldrh	r2, [r7, #0]
20001754:	68fb      	ldr	r3, [r7, #12]
20001756:	b29b      	uxth	r3, r3
20001758:	005b      	lsls	r3, r3, #1
2000175a:	b29b      	uxth	r3, r3
2000175c:	1ad3      	subs	r3, r2, r3
2000175e:	b29b      	uxth	r3, r3
20001760:	b21a      	sxth	r2, r3
20001762:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20001764:	9301      	str	r3, [sp, #4]
20001766:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
2000176a:	9300      	str	r3, [sp, #0]
2000176c:	4613      	mov	r3, r2
2000176e:	4622      	mov	r2, r4
20001770:	f7ff fed7 	bl	20001522 <drawRoundRect>
	for (int i = 0; i < countPixel; i++) {
20001774:	68fb      	ldr	r3, [r7, #12]
20001776:	3301      	adds	r3, #1
20001778:	60fb      	str	r3, [r7, #12]
2000177a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
2000177e:	68fa      	ldr	r2, [r7, #12]
20001780:	429a      	cmp	r2, r3
20001782:	dbbe      	blt.n	20001702 <drawSomePixelRoundRect+0x2c>
20001784:	e000      	b.n	20001788 <drawSomePixelRoundRect+0xb2>
		return;
20001786:	bf00      	nop
	}
}
20001788:	3714      	adds	r7, #20
2000178a:	46bd      	mov	sp, r7
2000178c:	bd90      	pop	{r4, r7, pc}

2000178e <fillRect>:
 @param    y   Top left corner y coordinate
 @param    w   Width in pixels
 @param    h   Height in pixels
 @param    color 16-bit 5-6-5 Color to fill with
 **************************************************************************/
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
2000178e:	b590      	push	{r4, r7, lr}
20001790:	b085      	sub	sp, #20
20001792:	af00      	add	r7, sp, #0
20001794:	4604      	mov	r4, r0
20001796:	4608      	mov	r0, r1
20001798:	4611      	mov	r1, r2
2000179a:	461a      	mov	r2, r3
2000179c:	4623      	mov	r3, r4
2000179e:	80fb      	strh	r3, [r7, #6]
200017a0:	4603      	mov	r3, r0
200017a2:	80bb      	strh	r3, [r7, #4]
200017a4:	460b      	mov	r3, r1
200017a6:	807b      	strh	r3, [r7, #2]
200017a8:	4613      	mov	r3, r2
200017aa:	803b      	strh	r3, [r7, #0]
	for (int16_t i = x; i < x + w; i++) {
200017ac:	88fb      	ldrh	r3, [r7, #6]
200017ae:	81fb      	strh	r3, [r7, #14]
200017b0:	e00e      	b.n	200017d0 <fillRect+0x42>
		writeFastVLine(i, y, h, color);
200017b2:	8c3b      	ldrh	r3, [r7, #32]
200017b4:	f9b7 2000 	ldrsh.w	r2, [r7]
200017b8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
200017bc:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
200017c0:	f7ff fc9d 	bl	200010fe <writeFastVLine>
	for (int16_t i = x; i < x + w; i++) {
200017c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
200017c8:	b29b      	uxth	r3, r3
200017ca:	3301      	adds	r3, #1
200017cc:	b29b      	uxth	r3, r3
200017ce:	81fb      	strh	r3, [r7, #14]
200017d0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
200017d4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
200017d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
200017dc:	440b      	add	r3, r1
200017de:	429a      	cmp	r2, r3
200017e0:	dbe7      	blt.n	200017b2 <fillRect+0x24>
	}
}
200017e2:	bf00      	nop
200017e4:	bf00      	nop
200017e6:	3714      	adds	r7, #20
200017e8:	46bd      	mov	sp, r7
200017ea:	bd90      	pop	{r4, r7, pc}

200017ec <fillRoundRect>:
 @param    h   Height in pixels
 @param    r   Radius of corner rounding
 @param    color 16-bit 5-6-5 Color to draw/fill with
 **************************************************************************/
void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
200017ec:	b590      	push	{r4, r7, lr}
200017ee:	b087      	sub	sp, #28
200017f0:	af02      	add	r7, sp, #8
200017f2:	4604      	mov	r4, r0
200017f4:	4608      	mov	r0, r1
200017f6:	4611      	mov	r1, r2
200017f8:	461a      	mov	r2, r3
200017fa:	4623      	mov	r3, r4
200017fc:	80fb      	strh	r3, [r7, #6]
200017fe:	4603      	mov	r3, r0
20001800:	80bb      	strh	r3, [r7, #4]
20001802:	460b      	mov	r3, r1
20001804:	807b      	strh	r3, [r7, #2]
20001806:	4613      	mov	r3, r2
20001808:	803b      	strh	r3, [r7, #0]
	int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
2000180a:	f9b7 2000 	ldrsh.w	r2, [r7]
2000180e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
20001812:	4293      	cmp	r3, r2
20001814:	bfa8      	it	ge
20001816:	4613      	movge	r3, r2
20001818:	b21b      	sxth	r3, r3
2000181a:	0fda      	lsrs	r2, r3, #31
2000181c:	4413      	add	r3, r2
2000181e:	105b      	asrs	r3, r3, #1
20001820:	81fb      	strh	r3, [r7, #14]
	if (r > max_radius)
20001822:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
20001826:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
2000182a:	429a      	cmp	r2, r3
2000182c:	dd01      	ble.n	20001832 <fillRoundRect+0x46>
		r = max_radius;
2000182e:	89fb      	ldrh	r3, [r7, #14]
20001830:	843b      	strh	r3, [r7, #32]
	ILI9341_Select();
20001832:	f7fe fed3 	bl	200005dc <ILI9341_Select>
// smarter version
	fillRect(x + r, y, w - 2 * r, h, color);
20001836:	88fa      	ldrh	r2, [r7, #6]
20001838:	8c3b      	ldrh	r3, [r7, #32]
2000183a:	4413      	add	r3, r2
2000183c:	b29b      	uxth	r3, r3
2000183e:	b218      	sxth	r0, r3
20001840:	887a      	ldrh	r2, [r7, #2]
20001842:	8c3b      	ldrh	r3, [r7, #32]
20001844:	005b      	lsls	r3, r3, #1
20001846:	b29b      	uxth	r3, r3
20001848:	1ad3      	subs	r3, r2, r3
2000184a:	b29b      	uxth	r3, r3
2000184c:	b21a      	sxth	r2, r3
2000184e:	f9b7 4000 	ldrsh.w	r4, [r7]
20001852:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
20001856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001858:	9300      	str	r3, [sp, #0]
2000185a:	4623      	mov	r3, r4
2000185c:	f7ff ff97 	bl	2000178e <fillRect>
// draw four corners
	fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
20001860:	88fa      	ldrh	r2, [r7, #6]
20001862:	887b      	ldrh	r3, [r7, #2]
20001864:	4413      	add	r3, r2
20001866:	b29a      	uxth	r2, r3
20001868:	8c3b      	ldrh	r3, [r7, #32]
2000186a:	1ad3      	subs	r3, r2, r3
2000186c:	b29b      	uxth	r3, r3
2000186e:	3b01      	subs	r3, #1
20001870:	b29b      	uxth	r3, r3
20001872:	b218      	sxth	r0, r3
20001874:	88ba      	ldrh	r2, [r7, #4]
20001876:	8c3b      	ldrh	r3, [r7, #32]
20001878:	4413      	add	r3, r2
2000187a:	b29b      	uxth	r3, r3
2000187c:	b219      	sxth	r1, r3
2000187e:	883a      	ldrh	r2, [r7, #0]
20001880:	8c3b      	ldrh	r3, [r7, #32]
20001882:	005b      	lsls	r3, r3, #1
20001884:	b29b      	uxth	r3, r3
20001886:	1ad3      	subs	r3, r2, r3
20001888:	b29b      	uxth	r3, r3
2000188a:	3b01      	subs	r3, #1
2000188c:	b29b      	uxth	r3, r3
2000188e:	b21b      	sxth	r3, r3
20001890:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
20001894:	8cba      	ldrh	r2, [r7, #36]	; 0x24
20001896:	9201      	str	r2, [sp, #4]
20001898:	9300      	str	r3, [sp, #0]
2000189a:	2301      	movs	r3, #1
2000189c:	4622      	mov	r2, r4
2000189e:	f7ff fd72 	bl	20001386 <fillCircleHelper>
	fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
200018a2:	88fa      	ldrh	r2, [r7, #6]
200018a4:	8c3b      	ldrh	r3, [r7, #32]
200018a6:	4413      	add	r3, r2
200018a8:	b29b      	uxth	r3, r3
200018aa:	b218      	sxth	r0, r3
200018ac:	88ba      	ldrh	r2, [r7, #4]
200018ae:	8c3b      	ldrh	r3, [r7, #32]
200018b0:	4413      	add	r3, r2
200018b2:	b29b      	uxth	r3, r3
200018b4:	b219      	sxth	r1, r3
200018b6:	883a      	ldrh	r2, [r7, #0]
200018b8:	8c3b      	ldrh	r3, [r7, #32]
200018ba:	005b      	lsls	r3, r3, #1
200018bc:	b29b      	uxth	r3, r3
200018be:	1ad3      	subs	r3, r2, r3
200018c0:	b29b      	uxth	r3, r3
200018c2:	3b01      	subs	r3, #1
200018c4:	b29b      	uxth	r3, r3
200018c6:	b21b      	sxth	r3, r3
200018c8:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
200018cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
200018ce:	9201      	str	r2, [sp, #4]
200018d0:	9300      	str	r3, [sp, #0]
200018d2:	2302      	movs	r3, #2
200018d4:	4622      	mov	r2, r4
200018d6:	f7ff fd56 	bl	20001386 <fillCircleHelper>
	ILI9341_Unselect();
200018da:	f7fe fe8f 	bl	200005fc <ILI9341_Unselect>
}
200018de:	bf00      	nop
200018e0:	3714      	adds	r7, #20
200018e2:	46bd      	mov	sp, r7
200018e4:	bd90      	pop	{r4, r7, pc}

200018e6 <drawCircle>:
 @param    x0   Center-point x coordinate
 @param    y0   Center-point y coordinate
 @param    r   Radius of circle
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
200018e6:	b590      	push	{r4, r7, lr}
200018e8:	b087      	sub	sp, #28
200018ea:	af00      	add	r7, sp, #0
200018ec:	4604      	mov	r4, r0
200018ee:	4608      	mov	r0, r1
200018f0:	4611      	mov	r1, r2
200018f2:	461a      	mov	r2, r3
200018f4:	4623      	mov	r3, r4
200018f6:	80fb      	strh	r3, [r7, #6]
200018f8:	4603      	mov	r3, r0
200018fa:	80bb      	strh	r3, [r7, #4]
200018fc:	460b      	mov	r3, r1
200018fe:	807b      	strh	r3, [r7, #2]
20001900:	4613      	mov	r3, r2
20001902:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
20001904:	887b      	ldrh	r3, [r7, #2]
20001906:	f1c3 0301 	rsb	r3, r3, #1
2000190a:	b29b      	uxth	r3, r3
2000190c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
2000190e:	2301      	movs	r3, #1
20001910:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
20001912:	887b      	ldrh	r3, [r7, #2]
20001914:	461a      	mov	r2, r3
20001916:	03d2      	lsls	r2, r2, #15
20001918:	1ad3      	subs	r3, r2, r3
2000191a:	005b      	lsls	r3, r3, #1
2000191c:	b29b      	uxth	r3, r3
2000191e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
20001920:	2300      	movs	r3, #0
20001922:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
20001924:	887b      	ldrh	r3, [r7, #2]
20001926:	81fb      	strh	r3, [r7, #14]

	ILI9341_Select();
20001928:	f7fe fe58 	bl	200005dc <ILI9341_Select>
	ILI9341_DrawPixel(x0, y0 + r, color);
2000192c:	88f8      	ldrh	r0, [r7, #6]
2000192e:	88ba      	ldrh	r2, [r7, #4]
20001930:	887b      	ldrh	r3, [r7, #2]
20001932:	4413      	add	r3, r2
20001934:	b29b      	uxth	r3, r3
20001936:	883a      	ldrh	r2, [r7, #0]
20001938:	4619      	mov	r1, r3
2000193a:	f7ff f841 	bl	200009c0 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0, y0 - r, color);
2000193e:	88f8      	ldrh	r0, [r7, #6]
20001940:	88ba      	ldrh	r2, [r7, #4]
20001942:	887b      	ldrh	r3, [r7, #2]
20001944:	1ad3      	subs	r3, r2, r3
20001946:	b29b      	uxth	r3, r3
20001948:	883a      	ldrh	r2, [r7, #0]
2000194a:	4619      	mov	r1, r3
2000194c:	f7ff f838 	bl	200009c0 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0 + r, y0, color);
20001950:	88fa      	ldrh	r2, [r7, #6]
20001952:	887b      	ldrh	r3, [r7, #2]
20001954:	4413      	add	r3, r2
20001956:	b29b      	uxth	r3, r3
20001958:	88b9      	ldrh	r1, [r7, #4]
2000195a:	883a      	ldrh	r2, [r7, #0]
2000195c:	4618      	mov	r0, r3
2000195e:	f7ff f82f 	bl	200009c0 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0 - r, y0, color);
20001962:	88fa      	ldrh	r2, [r7, #6]
20001964:	887b      	ldrh	r3, [r7, #2]
20001966:	1ad3      	subs	r3, r2, r3
20001968:	b29b      	uxth	r3, r3
2000196a:	88b9      	ldrh	r1, [r7, #4]
2000196c:	883a      	ldrh	r2, [r7, #0]
2000196e:	4618      	mov	r0, r3
20001970:	f7ff f826 	bl	200009c0 <ILI9341_DrawPixel>

	while (x < y) {
20001974:	e081      	b.n	20001a7a <drawCircle+0x194>
		if (f >= 0) {
20001976:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
2000197a:	2b00      	cmp	r3, #0
2000197c:	db0e      	blt.n	2000199c <drawCircle+0xb6>
			y--;
2000197e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001982:	b29b      	uxth	r3, r3
20001984:	3b01      	subs	r3, #1
20001986:	b29b      	uxth	r3, r3
20001988:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
2000198a:	8a7b      	ldrh	r3, [r7, #18]
2000198c:	3302      	adds	r3, #2
2000198e:	b29b      	uxth	r3, r3
20001990:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
20001992:	8afa      	ldrh	r2, [r7, #22]
20001994:	8a7b      	ldrh	r3, [r7, #18]
20001996:	4413      	add	r3, r2
20001998:	b29b      	uxth	r3, r3
2000199a:	82fb      	strh	r3, [r7, #22]
		}
		x++;
2000199c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
200019a0:	b29b      	uxth	r3, r3
200019a2:	3301      	adds	r3, #1
200019a4:	b29b      	uxth	r3, r3
200019a6:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
200019a8:	8abb      	ldrh	r3, [r7, #20]
200019aa:	3302      	adds	r3, #2
200019ac:	b29b      	uxth	r3, r3
200019ae:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
200019b0:	8afa      	ldrh	r2, [r7, #22]
200019b2:	8abb      	ldrh	r3, [r7, #20]
200019b4:	4413      	add	r3, r2
200019b6:	b29b      	uxth	r3, r3
200019b8:	82fb      	strh	r3, [r7, #22]

		ILI9341_DrawPixel(x0 + x, y0 + y, color);
200019ba:	88fa      	ldrh	r2, [r7, #6]
200019bc:	8a3b      	ldrh	r3, [r7, #16]
200019be:	4413      	add	r3, r2
200019c0:	b298      	uxth	r0, r3
200019c2:	88ba      	ldrh	r2, [r7, #4]
200019c4:	89fb      	ldrh	r3, [r7, #14]
200019c6:	4413      	add	r3, r2
200019c8:	b29b      	uxth	r3, r3
200019ca:	883a      	ldrh	r2, [r7, #0]
200019cc:	4619      	mov	r1, r3
200019ce:	f7fe fff7 	bl	200009c0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - x, y0 + y, color);
200019d2:	88fa      	ldrh	r2, [r7, #6]
200019d4:	8a3b      	ldrh	r3, [r7, #16]
200019d6:	1ad3      	subs	r3, r2, r3
200019d8:	b298      	uxth	r0, r3
200019da:	88ba      	ldrh	r2, [r7, #4]
200019dc:	89fb      	ldrh	r3, [r7, #14]
200019de:	4413      	add	r3, r2
200019e0:	b29b      	uxth	r3, r3
200019e2:	883a      	ldrh	r2, [r7, #0]
200019e4:	4619      	mov	r1, r3
200019e6:	f7fe ffeb 	bl	200009c0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + x, y0 - y, color);
200019ea:	88fa      	ldrh	r2, [r7, #6]
200019ec:	8a3b      	ldrh	r3, [r7, #16]
200019ee:	4413      	add	r3, r2
200019f0:	b298      	uxth	r0, r3
200019f2:	88ba      	ldrh	r2, [r7, #4]
200019f4:	89fb      	ldrh	r3, [r7, #14]
200019f6:	1ad3      	subs	r3, r2, r3
200019f8:	b29b      	uxth	r3, r3
200019fa:	883a      	ldrh	r2, [r7, #0]
200019fc:	4619      	mov	r1, r3
200019fe:	f7fe ffdf 	bl	200009c0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - x, y0 - y, color);
20001a02:	88fa      	ldrh	r2, [r7, #6]
20001a04:	8a3b      	ldrh	r3, [r7, #16]
20001a06:	1ad3      	subs	r3, r2, r3
20001a08:	b298      	uxth	r0, r3
20001a0a:	88ba      	ldrh	r2, [r7, #4]
20001a0c:	89fb      	ldrh	r3, [r7, #14]
20001a0e:	1ad3      	subs	r3, r2, r3
20001a10:	b29b      	uxth	r3, r3
20001a12:	883a      	ldrh	r2, [r7, #0]
20001a14:	4619      	mov	r1, r3
20001a16:	f7fe ffd3 	bl	200009c0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + y, y0 + x, color);
20001a1a:	88fa      	ldrh	r2, [r7, #6]
20001a1c:	89fb      	ldrh	r3, [r7, #14]
20001a1e:	4413      	add	r3, r2
20001a20:	b298      	uxth	r0, r3
20001a22:	88ba      	ldrh	r2, [r7, #4]
20001a24:	8a3b      	ldrh	r3, [r7, #16]
20001a26:	4413      	add	r3, r2
20001a28:	b29b      	uxth	r3, r3
20001a2a:	883a      	ldrh	r2, [r7, #0]
20001a2c:	4619      	mov	r1, r3
20001a2e:	f7fe ffc7 	bl	200009c0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - y, y0 + x, color);
20001a32:	88fa      	ldrh	r2, [r7, #6]
20001a34:	89fb      	ldrh	r3, [r7, #14]
20001a36:	1ad3      	subs	r3, r2, r3
20001a38:	b298      	uxth	r0, r3
20001a3a:	88ba      	ldrh	r2, [r7, #4]
20001a3c:	8a3b      	ldrh	r3, [r7, #16]
20001a3e:	4413      	add	r3, r2
20001a40:	b29b      	uxth	r3, r3
20001a42:	883a      	ldrh	r2, [r7, #0]
20001a44:	4619      	mov	r1, r3
20001a46:	f7fe ffbb 	bl	200009c0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + y, y0 - x, color);
20001a4a:	88fa      	ldrh	r2, [r7, #6]
20001a4c:	89fb      	ldrh	r3, [r7, #14]
20001a4e:	4413      	add	r3, r2
20001a50:	b298      	uxth	r0, r3
20001a52:	88ba      	ldrh	r2, [r7, #4]
20001a54:	8a3b      	ldrh	r3, [r7, #16]
20001a56:	1ad3      	subs	r3, r2, r3
20001a58:	b29b      	uxth	r3, r3
20001a5a:	883a      	ldrh	r2, [r7, #0]
20001a5c:	4619      	mov	r1, r3
20001a5e:	f7fe ffaf 	bl	200009c0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - y, y0 - x, color);
20001a62:	88fa      	ldrh	r2, [r7, #6]
20001a64:	89fb      	ldrh	r3, [r7, #14]
20001a66:	1ad3      	subs	r3, r2, r3
20001a68:	b298      	uxth	r0, r3
20001a6a:	88ba      	ldrh	r2, [r7, #4]
20001a6c:	8a3b      	ldrh	r3, [r7, #16]
20001a6e:	1ad3      	subs	r3, r2, r3
20001a70:	b29b      	uxth	r3, r3
20001a72:	883a      	ldrh	r2, [r7, #0]
20001a74:	4619      	mov	r1, r3
20001a76:	f7fe ffa3 	bl	200009c0 <ILI9341_DrawPixel>
	while (x < y) {
20001a7a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
20001a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001a82:	429a      	cmp	r2, r3
20001a84:	f6ff af77 	blt.w	20001976 <drawCircle+0x90>
	}
	ILI9341_Unselect();
20001a88:	f7fe fdb8 	bl	200005fc <ILI9341_Unselect>
}
20001a8c:	bf00      	nop
20001a8e:	371c      	adds	r7, #28
20001a90:	46bd      	mov	sp, r7
20001a92:	bd90      	pop	{r4, r7, pc}

20001a94 <ILI9341_ToucInit>:
uint32_t minRawY;
uint32_t maxRawY;
uint32_t minX, maxX, minY, maxY;
//------------------------------ функции ---------------------------------------------//

void ILI9341_ToucInit(void) {
20001a94:	b480      	push	{r7}
20001a96:	b083      	sub	sp, #12
20001a98:	af00      	add	r7, sp, #0
	uint32_t *tempAdr = (uint32_t*) ADR_DATA_MIN_X;
20001a9a:	4b0f      	ldr	r3, [pc, #60]	; (20001ad8 <ILI9341_ToucInit+0x44>)
20001a9c:	607b      	str	r3, [r7, #4]
	minRawX = *tempAdr;
20001a9e:	687b      	ldr	r3, [r7, #4]
20001aa0:	681b      	ldr	r3, [r3, #0]
20001aa2:	4a0e      	ldr	r2, [pc, #56]	; (20001adc <ILI9341_ToucInit+0x48>)
20001aa4:	6013      	str	r3, [r2, #0]
	tempAdr = (uint32_t*) ADR_DATA_MAX_X;
20001aa6:	4b0e      	ldr	r3, [pc, #56]	; (20001ae0 <ILI9341_ToucInit+0x4c>)
20001aa8:	607b      	str	r3, [r7, #4]
	maxRawX = *tempAdr;
20001aaa:	687b      	ldr	r3, [r7, #4]
20001aac:	681b      	ldr	r3, [r3, #0]
20001aae:	4a0d      	ldr	r2, [pc, #52]	; (20001ae4 <ILI9341_ToucInit+0x50>)
20001ab0:	6013      	str	r3, [r2, #0]
	tempAdr = (uint32_t*) ADR_DATA_MIN_Y;
20001ab2:	4b0d      	ldr	r3, [pc, #52]	; (20001ae8 <ILI9341_ToucInit+0x54>)
20001ab4:	607b      	str	r3, [r7, #4]
	minRawY = *tempAdr;
20001ab6:	687b      	ldr	r3, [r7, #4]
20001ab8:	681b      	ldr	r3, [r3, #0]
20001aba:	4a0c      	ldr	r2, [pc, #48]	; (20001aec <ILI9341_ToucInit+0x58>)
20001abc:	6013      	str	r3, [r2, #0]
	tempAdr = (uint32_t*) ADR_DATA_MAX_Y;
20001abe:	4b0c      	ldr	r3, [pc, #48]	; (20001af0 <ILI9341_ToucInit+0x5c>)
20001ac0:	607b      	str	r3, [r7, #4]
	maxRawY = *tempAdr;
20001ac2:	687b      	ldr	r3, [r7, #4]
20001ac4:	681b      	ldr	r3, [r3, #0]
20001ac6:	4a0b      	ldr	r2, [pc, #44]	; (20001af4 <ILI9341_ToucInit+0x60>)
20001ac8:	6013      	str	r3, [r2, #0]
}
20001aca:	bf00      	nop
20001acc:	370c      	adds	r7, #12
20001ace:	46bd      	mov	sp, r7
20001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ad4:	4770      	bx	lr
20001ad6:	bf00      	nop
20001ad8:	0807fff0 	.word	0x0807fff0
20001adc:	200119b8 	.word	0x200119b8
20001ae0:	0807fff4 	.word	0x0807fff4
20001ae4:	200119bc 	.word	0x200119bc
20001ae8:	0807fff8 	.word	0x0807fff8
20001aec:	200119c0 	.word	0x200119c0
20001af0:	0807fffc 	.word	0x0807fffc
20001af4:	200119c4 	.word	0x200119c4

20001af8 <ILI9341_TouchSelect>:
/**************************************************************************
 @brief     will return the modulus of the num like abs in C
 @param    num  incoming number
 **************************************************************************/
static void ILI9341_TouchSelect() {
20001af8:	b580      	push	{r7, lr}
20001afa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
20001afc:	2200      	movs	r2, #0
20001afe:	f44f 7180 	mov.w	r1, #256	; 0x100
20001b02:	4802      	ldr	r0, [pc, #8]	; (20001b0c <ILI9341_TouchSelect+0x14>)
20001b04:	f002 fd42 	bl	2000458c <HAL_GPIO_WritePin>
}
20001b08:	bf00      	nop
20001b0a:	bd80      	pop	{r7, pc}
20001b0c:	40020000 	.word	0x40020000

20001b10 <ILI9341_TouchUnselect>:
/**************************************************************************
 @brief     swaps values in variables
 @param    a  num first
 @param    a  num two
 **************************************************************************/
void ILI9341_TouchUnselect() {
20001b10:	b580      	push	{r7, lr}
20001b12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
20001b14:	2201      	movs	r2, #1
20001b16:	f44f 7180 	mov.w	r1, #256	; 0x100
20001b1a:	4802      	ldr	r0, [pc, #8]	; (20001b24 <ILI9341_TouchUnselect+0x14>)
20001b1c:	f002 fd36 	bl	2000458c <HAL_GPIO_WritePin>
}
20001b20:	bf00      	nop
20001b22:	bd80      	pop	{r7, pc}
20001b24:	40020000 	.word	0x40020000

20001b28 <ILI9341_TouchPressed>:

bool ILI9341_TouchPressed() {
20001b28:	b580      	push	{r7, lr}
20001b2a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(ILI9341_TOUCH_IRQ_GPIO_Port, ILI9341_TOUCH_IRQ_Pin) == GPIO_PIN_RESET;
20001b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
20001b30:	4805      	ldr	r0, [pc, #20]	; (20001b48 <ILI9341_TouchPressed+0x20>)
20001b32:	f002 fd13 	bl	2000455c <HAL_GPIO_ReadPin>
20001b36:	4603      	mov	r3, r0
20001b38:	2b00      	cmp	r3, #0
20001b3a:	bf0c      	ite	eq
20001b3c:	2301      	moveq	r3, #1
20001b3e:	2300      	movne	r3, #0
20001b40:	b2db      	uxtb	r3, r3
}
20001b42:	4618      	mov	r0, r3
20001b44:	bd80      	pop	{r7, pc}
20001b46:	bf00      	nop
20001b48:	40020400 	.word	0x40020400

20001b4c <ILI9341_TouchGetCoordinates>:

bool ILI9341_TouchGetCoordinates(uint16_t *x, uint16_t *y) {
20001b4c:	b580      	push	{r7, lr}
20001b4e:	b08e      	sub	sp, #56	; 0x38
20001b50:	af02      	add	r7, sp, #8
20001b52:	6078      	str	r0, [r7, #4]
20001b54:	6039      	str	r1, [r7, #0]
	static const uint8_t cmd_read_x[] = { READ_X };
	static const uint8_t cmd_read_y[] = { READ_Y };
	static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

	ILI9341_TouchSelect();
20001b56:	f7ff ffcf 	bl	20001af8 <ILI9341_TouchSelect>

	uint32_t avg_x = 0;
20001b5a:	2300      	movs	r3, #0
20001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t avg_y = 0;
20001b5e:	2300      	movs	r3, #0
20001b60:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t nsamples = 0;
20001b62:	2300      	movs	r3, #0
20001b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < 16; i++) {
20001b68:	2300      	movs	r3, #0
20001b6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
20001b6e:	e04b      	b.n	20001c08 <ILI9341_TouchGetCoordinates+0xbc>
		if (!ILI9341_TouchPressed())
20001b70:	f7ff ffda 	bl	20001b28 <ILI9341_TouchPressed>
20001b74:	4603      	mov	r3, r0
20001b76:	f083 0301 	eor.w	r3, r3, #1
20001b7a:	b2db      	uxtb	r3, r3
20001b7c:	2b00      	cmp	r3, #0
20001b7e:	d148      	bne.n	20001c12 <ILI9341_TouchGetCoordinates+0xc6>
			break;

		nsamples++;
20001b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001b84:	3301      	adds	r3, #1
20001b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
20001b8a:	f04f 33ff 	mov.w	r3, #4294967295
20001b8e:	2201      	movs	r2, #1
20001b90:	494d      	ldr	r1, [pc, #308]	; (20001cc8 <ILI9341_TouchGetCoordinates+0x17c>)
20001b92:	484e      	ldr	r0, [pc, #312]	; (20001ccc <ILI9341_TouchGetCoordinates+0x180>)
20001b94:	f003 f9c1 	bl	20004f1a <HAL_SPI_Transmit>
		uint8_t y_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
20001b98:	f107 0210 	add.w	r2, r7, #16
20001b9c:	f04f 33ff 	mov.w	r3, #4294967295
20001ba0:	9300      	str	r3, [sp, #0]
20001ba2:	2302      	movs	r3, #2
20001ba4:	494a      	ldr	r1, [pc, #296]	; (20001cd0 <ILI9341_TouchGetCoordinates+0x184>)
20001ba6:	4849      	ldr	r0, [pc, #292]	; (20001ccc <ILI9341_TouchGetCoordinates+0x180>)
20001ba8:	f003 faf3 	bl	20005192 <HAL_SPI_TransmitReceive>

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
20001bac:	f04f 33ff 	mov.w	r3, #4294967295
20001bb0:	2201      	movs	r2, #1
20001bb2:	4948      	ldr	r1, [pc, #288]	; (20001cd4 <ILI9341_TouchGetCoordinates+0x188>)
20001bb4:	4845      	ldr	r0, [pc, #276]	; (20001ccc <ILI9341_TouchGetCoordinates+0x180>)
20001bb6:	f003 f9b0 	bl	20004f1a <HAL_SPI_Transmit>
		uint8_t x_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
20001bba:	f107 020c 	add.w	r2, r7, #12
20001bbe:	f04f 33ff 	mov.w	r3, #4294967295
20001bc2:	9300      	str	r3, [sp, #0]
20001bc4:	2302      	movs	r3, #2
20001bc6:	4942      	ldr	r1, [pc, #264]	; (20001cd0 <ILI9341_TouchGetCoordinates+0x184>)
20001bc8:	4840      	ldr	r0, [pc, #256]	; (20001ccc <ILI9341_TouchGetCoordinates+0x180>)
20001bca:	f003 fae2 	bl	20005192 <HAL_SPI_TransmitReceive>

		uint32_t mirrorX = ((((uint16_t) x_raw[0]) << 8) | (uint16_t) x_raw[1]);
20001bce:	7b3b      	ldrb	r3, [r7, #12]
20001bd0:	021b      	lsls	r3, r3, #8
20001bd2:	7b7a      	ldrb	r2, [r7, #13]
20001bd4:	4313      	orrs	r3, r2
20001bd6:	61bb      	str	r3, [r7, #24]
		avg_x += (mirrorX >> 3) & 0xFFF;
20001bd8:	69bb      	ldr	r3, [r7, #24]
20001bda:	08db      	lsrs	r3, r3, #3
20001bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
20001be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001be2:	4413      	add	r3, r2
20001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t mirrorY = ((((uint16_t) y_raw[0]) << 8) | (uint16_t) y_raw[1]);
20001be6:	7c3b      	ldrb	r3, [r7, #16]
20001be8:	021b      	lsls	r3, r3, #8
20001bea:	7c7a      	ldrb	r2, [r7, #17]
20001bec:	4313      	orrs	r3, r2
20001bee:	617b      	str	r3, [r7, #20]
		avg_y += (mirrorY >> 3) & 0xFFF;
20001bf0:	697b      	ldr	r3, [r7, #20]
20001bf2:	08db      	lsrs	r3, r3, #3
20001bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
20001bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001bfa:	4413      	add	r3, r2
20001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < 16; i++) {
20001bfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
20001c02:	3301      	adds	r3, #1
20001c04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
20001c08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
20001c0c:	2b0f      	cmp	r3, #15
20001c0e:	d9af      	bls.n	20001b70 <ILI9341_TouchGetCoordinates+0x24>
20001c10:	e000      	b.n	20001c14 <ILI9341_TouchGetCoordinates+0xc8>
			break;
20001c12:	bf00      	nop
	}

	ILI9341_TouchUnselect();
20001c14:	f7ff ff7c 	bl	20001b10 <ILI9341_TouchUnselect>

	if (nsamples < 16)
20001c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001c1c:	2b0f      	cmp	r3, #15
20001c1e:	d801      	bhi.n	20001c24 <ILI9341_TouchGetCoordinates+0xd8>
		return false;
20001c20:	2300      	movs	r3, #0
20001c22:	e04c      	b.n	20001cbe <ILI9341_TouchGetCoordinates+0x172>

	uint32_t raw_x = (avg_x / 16);
20001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001c26:	091b      	lsrs	r3, r3, #4
20001c28:	623b      	str	r3, [r7, #32]
	if (raw_x < minRawX)
20001c2a:	4b2b      	ldr	r3, [pc, #172]	; (20001cd8 <ILI9341_TouchGetCoordinates+0x18c>)
20001c2c:	681b      	ldr	r3, [r3, #0]
20001c2e:	6a3a      	ldr	r2, [r7, #32]
20001c30:	429a      	cmp	r2, r3
20001c32:	d202      	bcs.n	20001c3a <ILI9341_TouchGetCoordinates+0xee>
		raw_x = minRawX;
20001c34:	4b28      	ldr	r3, [pc, #160]	; (20001cd8 <ILI9341_TouchGetCoordinates+0x18c>)
20001c36:	681b      	ldr	r3, [r3, #0]
20001c38:	623b      	str	r3, [r7, #32]
	if (raw_x > maxRawX)
20001c3a:	4b28      	ldr	r3, [pc, #160]	; (20001cdc <ILI9341_TouchGetCoordinates+0x190>)
20001c3c:	681b      	ldr	r3, [r3, #0]
20001c3e:	6a3a      	ldr	r2, [r7, #32]
20001c40:	429a      	cmp	r2, r3
20001c42:	d902      	bls.n	20001c4a <ILI9341_TouchGetCoordinates+0xfe>
		raw_x = maxRawX;
20001c44:	4b25      	ldr	r3, [pc, #148]	; (20001cdc <ILI9341_TouchGetCoordinates+0x190>)
20001c46:	681b      	ldr	r3, [r3, #0]
20001c48:	623b      	str	r3, [r7, #32]

	uint32_t raw_y = (avg_y / 16);
20001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001c4c:	091b      	lsrs	r3, r3, #4
20001c4e:	61fb      	str	r3, [r7, #28]
	if (raw_y < minRawY)
20001c50:	4b23      	ldr	r3, [pc, #140]	; (20001ce0 <ILI9341_TouchGetCoordinates+0x194>)
20001c52:	681b      	ldr	r3, [r3, #0]
20001c54:	69fa      	ldr	r2, [r7, #28]
20001c56:	429a      	cmp	r2, r3
20001c58:	d202      	bcs.n	20001c60 <ILI9341_TouchGetCoordinates+0x114>
		raw_y = minRawY;
20001c5a:	4b21      	ldr	r3, [pc, #132]	; (20001ce0 <ILI9341_TouchGetCoordinates+0x194>)
20001c5c:	681b      	ldr	r3, [r3, #0]
20001c5e:	61fb      	str	r3, [r7, #28]
	if (raw_y > maxRawY)
20001c60:	4b20      	ldr	r3, [pc, #128]	; (20001ce4 <ILI9341_TouchGetCoordinates+0x198>)
20001c62:	681b      	ldr	r3, [r3, #0]
20001c64:	69fa      	ldr	r2, [r7, #28]
20001c66:	429a      	cmp	r2, r3
20001c68:	d902      	bls.n	20001c70 <ILI9341_TouchGetCoordinates+0x124>
		raw_y = maxRawY;
20001c6a:	4b1e      	ldr	r3, [pc, #120]	; (20001ce4 <ILI9341_TouchGetCoordinates+0x198>)
20001c6c:	681b      	ldr	r3, [r3, #0]
20001c6e:	61fb      	str	r3, [r7, #28]

	// Uncomment this line to calibrate touchscreen:
	// UART_Printf("raw_x = %d, raw_y = %d\r\n", x, y);

	*x = (raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX);
20001c70:	4b19      	ldr	r3, [pc, #100]	; (20001cd8 <ILI9341_TouchGetCoordinates+0x18c>)
20001c72:	681b      	ldr	r3, [r3, #0]
20001c74:	6a3a      	ldr	r2, [r7, #32]
20001c76:	1ad2      	subs	r2, r2, r3
20001c78:	4613      	mov	r3, r2
20001c7a:	009b      	lsls	r3, r3, #2
20001c7c:	4413      	add	r3, r2
20001c7e:	019b      	lsls	r3, r3, #6
20001c80:	4619      	mov	r1, r3
20001c82:	4b16      	ldr	r3, [pc, #88]	; (20001cdc <ILI9341_TouchGetCoordinates+0x190>)
20001c84:	681a      	ldr	r2, [r3, #0]
20001c86:	4b14      	ldr	r3, [pc, #80]	; (20001cd8 <ILI9341_TouchGetCoordinates+0x18c>)
20001c88:	681b      	ldr	r3, [r3, #0]
20001c8a:	1ad3      	subs	r3, r2, r3
20001c8c:	fbb1 f3f3 	udiv	r3, r1, r3
20001c90:	b29a      	uxth	r2, r3
20001c92:	687b      	ldr	r3, [r7, #4]
20001c94:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY);
20001c96:	4b12      	ldr	r3, [pc, #72]	; (20001ce0 <ILI9341_TouchGetCoordinates+0x194>)
20001c98:	681b      	ldr	r3, [r3, #0]
20001c9a:	69fa      	ldr	r2, [r7, #28]
20001c9c:	1ad2      	subs	r2, r2, r3
20001c9e:	4613      	mov	r3, r2
20001ca0:	011b      	lsls	r3, r3, #4
20001ca2:	1a9b      	subs	r3, r3, r2
20001ca4:	011b      	lsls	r3, r3, #4
20001ca6:	4619      	mov	r1, r3
20001ca8:	4b0e      	ldr	r3, [pc, #56]	; (20001ce4 <ILI9341_TouchGetCoordinates+0x198>)
20001caa:	681a      	ldr	r2, [r3, #0]
20001cac:	4b0c      	ldr	r3, [pc, #48]	; (20001ce0 <ILI9341_TouchGetCoordinates+0x194>)
20001cae:	681b      	ldr	r3, [r3, #0]
20001cb0:	1ad3      	subs	r3, r2, r3
20001cb2:	fbb1 f3f3 	udiv	r3, r1, r3
20001cb6:	b29a      	uxth	r2, r3
20001cb8:	683b      	ldr	r3, [r7, #0]
20001cba:	801a      	strh	r2, [r3, #0]

	return true;
20001cbc:	2301      	movs	r3, #1
}
20001cbe:	4618      	mov	r0, r3
20001cc0:	3730      	adds	r7, #48	; 0x30
20001cc2:	46bd      	mov	sp, r7
20001cc4:	bd80      	pop	{r7, pc}
20001cc6:	bf00      	nop
20001cc8:	20011724 	.word	0x20011724
20001ccc:	20011a54 	.word	0x20011a54
20001cd0:	20011728 	.word	0x20011728
20001cd4:	2001172c 	.word	0x2001172c
20001cd8:	200119b8 	.word	0x200119b8
20001cdc:	200119bc 	.word	0x200119bc
20001ce0:	200119c0 	.word	0x200119c0
20001ce4:	200119c4 	.word	0x200119c4

20001ce8 <figuringData>:

void figuringData(void) {
20001ce8:	b480      	push	{r7}
20001cea:	b083      	sub	sp, #12
20001cec:	af00      	add	r7, sp, #0
	uint32_t multiplicationFactorX, multiplicationFactorY;
	minX = minX / 2;
20001cee:	4b29      	ldr	r3, [pc, #164]	; (20001d94 <figuringData+0xac>)
20001cf0:	681b      	ldr	r3, [r3, #0]
20001cf2:	085b      	lsrs	r3, r3, #1
20001cf4:	4a27      	ldr	r2, [pc, #156]	; (20001d94 <figuringData+0xac>)
20001cf6:	6013      	str	r3, [r2, #0]
	minY = minY / 2;
20001cf8:	4b27      	ldr	r3, [pc, #156]	; (20001d98 <figuringData+0xb0>)
20001cfa:	681b      	ldr	r3, [r3, #0]
20001cfc:	085b      	lsrs	r3, r3, #1
20001cfe:	4a26      	ldr	r2, [pc, #152]	; (20001d98 <figuringData+0xb0>)
20001d00:	6013      	str	r3, [r2, #0]
	maxX = maxX / 2;
20001d02:	4b26      	ldr	r3, [pc, #152]	; (20001d9c <figuringData+0xb4>)
20001d04:	681b      	ldr	r3, [r3, #0]
20001d06:	085b      	lsrs	r3, r3, #1
20001d08:	4a24      	ldr	r2, [pc, #144]	; (20001d9c <figuringData+0xb4>)
20001d0a:	6013      	str	r3, [r2, #0]
	maxY = maxY / 2;
20001d0c:	4b24      	ldr	r3, [pc, #144]	; (20001da0 <figuringData+0xb8>)
20001d0e:	681b      	ldr	r3, [r3, #0]
20001d10:	085b      	lsrs	r3, r3, #1
20001d12:	4a23      	ldr	r2, [pc, #140]	; (20001da0 <figuringData+0xb8>)
20001d14:	6013      	str	r3, [r2, #0]
	multiplicationFactorX = (maxX - minX) / 300;   // так как у нас отступ с обоих сторон 10 то рабочая область 300
20001d16:	4b21      	ldr	r3, [pc, #132]	; (20001d9c <figuringData+0xb4>)
20001d18:	681a      	ldr	r2, [r3, #0]
20001d1a:	4b1e      	ldr	r3, [pc, #120]	; (20001d94 <figuringData+0xac>)
20001d1c:	681b      	ldr	r3, [r3, #0]
20001d1e:	1ad3      	subs	r3, r2, r3
20001d20:	4a20      	ldr	r2, [pc, #128]	; (20001da4 <figuringData+0xbc>)
20001d22:	fba2 2303 	umull	r2, r3, r2, r3
20001d26:	095b      	lsrs	r3, r3, #5
20001d28:	607b      	str	r3, [r7, #4]
	multiplicationFactorY = (maxY - minY) / 220;   // узнаем сколько единиц тача на 1 пиксель
20001d2a:	4b1d      	ldr	r3, [pc, #116]	; (20001da0 <figuringData+0xb8>)
20001d2c:	681a      	ldr	r2, [r3, #0]
20001d2e:	4b1a      	ldr	r3, [pc, #104]	; (20001d98 <figuringData+0xb0>)
20001d30:	681b      	ldr	r3, [r3, #0]
20001d32:	1ad3      	subs	r3, r2, r3
20001d34:	089b      	lsrs	r3, r3, #2
20001d36:	4a1c      	ldr	r2, [pc, #112]	; (20001da8 <figuringData+0xc0>)
20001d38:	fba2 2303 	umull	r2, r3, r2, r3
20001d3c:	085b      	lsrs	r3, r3, #1
20001d3e:	603b      	str	r3, [r7, #0]
	multiplicationFactorX = multiplicationFactorX * 10;  // так как нужно узнать сколько на 10 пикселей примерно отсчетов тача
20001d40:	687a      	ldr	r2, [r7, #4]
20001d42:	4613      	mov	r3, r2
20001d44:	009b      	lsls	r3, r3, #2
20001d46:	4413      	add	r3, r2
20001d48:	005b      	lsls	r3, r3, #1
20001d4a:	607b      	str	r3, [r7, #4]
	multiplicationFactorY = multiplicationFactorY * 10;
20001d4c:	683a      	ldr	r2, [r7, #0]
20001d4e:	4613      	mov	r3, r2
20001d50:	009b      	lsls	r3, r3, #2
20001d52:	4413      	add	r3, r2
20001d54:	005b      	lsls	r3, r3, #1
20001d56:	603b      	str	r3, [r7, #0]
	minRawX = minX - multiplicationFactorX;
20001d58:	4b0e      	ldr	r3, [pc, #56]	; (20001d94 <figuringData+0xac>)
20001d5a:	681a      	ldr	r2, [r3, #0]
20001d5c:	687b      	ldr	r3, [r7, #4]
20001d5e:	1ad3      	subs	r3, r2, r3
20001d60:	4a12      	ldr	r2, [pc, #72]	; (20001dac <figuringData+0xc4>)
20001d62:	6013      	str	r3, [r2, #0]
	maxRawX = maxX + multiplicationFactorX;
20001d64:	4b0d      	ldr	r3, [pc, #52]	; (20001d9c <figuringData+0xb4>)
20001d66:	681a      	ldr	r2, [r3, #0]
20001d68:	687b      	ldr	r3, [r7, #4]
20001d6a:	4413      	add	r3, r2
20001d6c:	4a10      	ldr	r2, [pc, #64]	; (20001db0 <figuringData+0xc8>)
20001d6e:	6013      	str	r3, [r2, #0]
	minRawY = minY - multiplicationFactorY;
20001d70:	4b09      	ldr	r3, [pc, #36]	; (20001d98 <figuringData+0xb0>)
20001d72:	681a      	ldr	r2, [r3, #0]
20001d74:	683b      	ldr	r3, [r7, #0]
20001d76:	1ad3      	subs	r3, r2, r3
20001d78:	4a0e      	ldr	r2, [pc, #56]	; (20001db4 <figuringData+0xcc>)
20001d7a:	6013      	str	r3, [r2, #0]
	maxRawY = maxY + multiplicationFactorY;
20001d7c:	4b08      	ldr	r3, [pc, #32]	; (20001da0 <figuringData+0xb8>)
20001d7e:	681a      	ldr	r2, [r3, #0]
20001d80:	683b      	ldr	r3, [r7, #0]
20001d82:	4413      	add	r3, r2
20001d84:	4a0c      	ldr	r2, [pc, #48]	; (20001db8 <figuringData+0xd0>)
20001d86:	6013      	str	r3, [r2, #0]
}
20001d88:	bf00      	nop
20001d8a:	370c      	adds	r7, #12
20001d8c:	46bd      	mov	sp, r7
20001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d92:	4770      	bx	lr
20001d94:	200119c8 	.word	0x200119c8
20001d98:	200119d0 	.word	0x200119d0
20001d9c:	200119cc 	.word	0x200119cc
20001da0:	200119d4 	.word	0x200119d4
20001da4:	1b4e81b5 	.word	0x1b4e81b5
20001da8:	094f2095 	.word	0x094f2095
20001dac:	200119b8 	.word	0x200119b8
20001db0:	200119bc 	.word	0x200119bc
20001db4:	200119c0 	.word	0x200119c0
20001db8:	200119c4 	.word	0x200119c4

20001dbc <calibTouch>:

uint8_t calibTouch(uint8_t poz) {
20001dbc:	b580      	push	{r7, lr}
20001dbe:	b08e      	sub	sp, #56	; 0x38
20001dc0:	af02      	add	r7, sp, #8
20001dc2:	4603      	mov	r3, r0
20001dc4:	71fb      	strb	r3, [r7, #7]
	static const uint8_t cmd_read_x[] = { READ_X };
	static const uint8_t cmd_read_y[] = { READ_Y };
	static const uint8_t zeroes_tx[] = { 0x00, 0x00 };
	repit: while (!ILI9341_TouchPressed())
20001dc6:	e001      	b.n	20001dcc <calibTouch+0x10>
		ILI9341_TouchSelect();
20001dc8:	f7ff fe96 	bl	20001af8 <ILI9341_TouchSelect>
	repit: while (!ILI9341_TouchPressed())
20001dcc:	f7ff feac 	bl	20001b28 <ILI9341_TouchPressed>
20001dd0:	4603      	mov	r3, r0
20001dd2:	f083 0301 	eor.w	r3, r3, #1
20001dd6:	b2db      	uxtb	r3, r3
20001dd8:	2b00      	cmp	r3, #0
20001dda:	d1f5      	bne.n	20001dc8 <calibTouch+0xc>
	uint32_t avg_x = 0;
20001ddc:	2300      	movs	r3, #0
20001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t avg_y = 0;
20001de0:	2300      	movs	r3, #0
20001de2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t nsamples = 0;
20001de4:	2300      	movs	r3, #0
20001de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < 16; i++) {
20001dea:	2300      	movs	r3, #0
20001dec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
20001df0:	e04b      	b.n	20001e8a <calibTouch+0xce>
		if (!ILI9341_TouchPressed())
20001df2:	f7ff fe99 	bl	20001b28 <ILI9341_TouchPressed>
20001df6:	4603      	mov	r3, r0
20001df8:	f083 0301 	eor.w	r3, r3, #1
20001dfc:	b2db      	uxtb	r3, r3
20001dfe:	2b00      	cmp	r3, #0
20001e00:	d148      	bne.n	20001e94 <calibTouch+0xd8>
			break;
		nsamples++;
20001e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001e06:	3301      	adds	r3, #1
20001e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
20001e0c:	f04f 33ff 	mov.w	r3, #4294967295
20001e10:	2201      	movs	r2, #1
20001e12:	4981      	ldr	r1, [pc, #516]	; (20002018 <calibTouch+0x25c>)
20001e14:	4881      	ldr	r0, [pc, #516]	; (2000201c <calibTouch+0x260>)
20001e16:	f003 f880 	bl	20004f1a <HAL_SPI_Transmit>
		uint8_t y_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
20001e1a:	f107 0210 	add.w	r2, r7, #16
20001e1e:	f04f 33ff 	mov.w	r3, #4294967295
20001e22:	9300      	str	r3, [sp, #0]
20001e24:	2302      	movs	r3, #2
20001e26:	497e      	ldr	r1, [pc, #504]	; (20002020 <calibTouch+0x264>)
20001e28:	487c      	ldr	r0, [pc, #496]	; (2000201c <calibTouch+0x260>)
20001e2a:	f003 f9b2 	bl	20005192 <HAL_SPI_TransmitReceive>

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
20001e2e:	f04f 33ff 	mov.w	r3, #4294967295
20001e32:	2201      	movs	r2, #1
20001e34:	497b      	ldr	r1, [pc, #492]	; (20002024 <calibTouch+0x268>)
20001e36:	4879      	ldr	r0, [pc, #484]	; (2000201c <calibTouch+0x260>)
20001e38:	f003 f86f 	bl	20004f1a <HAL_SPI_Transmit>
		uint8_t x_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
20001e3c:	f107 020c 	add.w	r2, r7, #12
20001e40:	f04f 33ff 	mov.w	r3, #4294967295
20001e44:	9300      	str	r3, [sp, #0]
20001e46:	2302      	movs	r3, #2
20001e48:	4975      	ldr	r1, [pc, #468]	; (20002020 <calibTouch+0x264>)
20001e4a:	4874      	ldr	r0, [pc, #464]	; (2000201c <calibTouch+0x260>)
20001e4c:	f003 f9a1 	bl	20005192 <HAL_SPI_TransmitReceive>

		uint32_t mirrorX = ((((uint16_t) x_raw[0]) << 8) | (uint16_t) x_raw[1]);
20001e50:	7b3b      	ldrb	r3, [r7, #12]
20001e52:	021b      	lsls	r3, r3, #8
20001e54:	7b7a      	ldrb	r2, [r7, #13]
20001e56:	4313      	orrs	r3, r2
20001e58:	623b      	str	r3, [r7, #32]
		avg_x += (mirrorX >> 3) & 0xFFF;
20001e5a:	6a3b      	ldr	r3, [r7, #32]
20001e5c:	08db      	lsrs	r3, r3, #3
20001e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
20001e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001e64:	4413      	add	r3, r2
20001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t mirrorY = ((((uint16_t) y_raw[0]) << 8) | (uint16_t) y_raw[1]);
20001e68:	7c3b      	ldrb	r3, [r7, #16]
20001e6a:	021b      	lsls	r3, r3, #8
20001e6c:	7c7a      	ldrb	r2, [r7, #17]
20001e6e:	4313      	orrs	r3, r2
20001e70:	61fb      	str	r3, [r7, #28]
		avg_y += (mirrorY >> 3) & 0xFFF;
20001e72:	69fb      	ldr	r3, [r7, #28]
20001e74:	08db      	lsrs	r3, r3, #3
20001e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
20001e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001e7c:	4413      	add	r3, r2
20001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < 16; i++) {
20001e80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
20001e84:	3301      	adds	r3, #1
20001e86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
20001e8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
20001e8e:	2b0f      	cmp	r3, #15
20001e90:	d9af      	bls.n	20001df2 <calibTouch+0x36>
20001e92:	e000      	b.n	20001e96 <calibTouch+0xda>
			break;
20001e94:	bf00      	nop
	}
	ILI9341_TouchUnselect();
20001e96:	f7ff fe3b 	bl	20001b10 <ILI9341_TouchUnselect>
	if (nsamples < 16)
20001e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001e9e:	2b0f      	cmp	r3, #15
20001ea0:	d800      	bhi.n	20001ea4 <calibTouch+0xe8>
		goto repit;
20001ea2:	e790      	b.n	20001dc6 <calibTouch+0xa>
	uint32_t raw_x = (avg_x / 16);
20001ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001ea6:	091b      	lsrs	r3, r3, #4
20001ea8:	61bb      	str	r3, [r7, #24]
	uint32_t raw_y = (avg_y / 16);
20001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001eac:	091b      	lsrs	r3, r3, #4
20001eae:	617b      	str	r3, [r7, #20]
	switch (poz) {
20001eb0:	79fb      	ldrb	r3, [r7, #7]
20001eb2:	2b04      	cmp	r3, #4
20001eb4:	f200 80aa 	bhi.w	2000200c <calibTouch+0x250>
20001eb8:	a201      	add	r2, pc, #4	; (adr r2, 20001ec0 <calibTouch+0x104>)
20001eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001ebe:	bf00      	nop
20001ec0:	20001ed5 	.word	0x20001ed5
20001ec4:	20001ee9 	.word	0x20001ee9
20001ec8:	20001f03 	.word	0x20001f03
20001ecc:	20001f1d 	.word	0x20001f1d
20001ed0:	20001f41 	.word	0x20001f41
	case LEFTUP:
		minX = raw_x;
20001ed4:	4a54      	ldr	r2, [pc, #336]	; (20002028 <calibTouch+0x26c>)
20001ed6:	69bb      	ldr	r3, [r7, #24]
20001ed8:	6013      	str	r3, [r2, #0]
		minY = raw_y;
20001eda:	4a54      	ldr	r2, [pc, #336]	; (2000202c <calibTouch+0x270>)
20001edc:	697b      	ldr	r3, [r7, #20]
20001ede:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
20001ee0:	2064      	movs	r0, #100	; 0x64
20001ee2:	f001 fb8b 	bl	200035fc <buzzerSet>
		break;
20001ee6:	e091      	b.n	2000200c <calibTouch+0x250>
	case RIGHTUP:
		maxX = raw_x;
20001ee8:	4a51      	ldr	r2, [pc, #324]	; (20002030 <calibTouch+0x274>)
20001eea:	69bb      	ldr	r3, [r7, #24]
20001eec:	6013      	str	r3, [r2, #0]
		minY += raw_y;
20001eee:	4b4f      	ldr	r3, [pc, #316]	; (2000202c <calibTouch+0x270>)
20001ef0:	681a      	ldr	r2, [r3, #0]
20001ef2:	697b      	ldr	r3, [r7, #20]
20001ef4:	4413      	add	r3, r2
20001ef6:	4a4d      	ldr	r2, [pc, #308]	; (2000202c <calibTouch+0x270>)
20001ef8:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
20001efa:	2064      	movs	r0, #100	; 0x64
20001efc:	f001 fb7e 	bl	200035fc <buzzerSet>
		break;
20001f00:	e084      	b.n	2000200c <calibTouch+0x250>
	case LEFTDOWN:
		minX += raw_x;
20001f02:	4b49      	ldr	r3, [pc, #292]	; (20002028 <calibTouch+0x26c>)
20001f04:	681a      	ldr	r2, [r3, #0]
20001f06:	69bb      	ldr	r3, [r7, #24]
20001f08:	4413      	add	r3, r2
20001f0a:	4a47      	ldr	r2, [pc, #284]	; (20002028 <calibTouch+0x26c>)
20001f0c:	6013      	str	r3, [r2, #0]
		maxY = raw_y;
20001f0e:	4a49      	ldr	r2, [pc, #292]	; (20002034 <calibTouch+0x278>)
20001f10:	697b      	ldr	r3, [r7, #20]
20001f12:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
20001f14:	2064      	movs	r0, #100	; 0x64
20001f16:	f001 fb71 	bl	200035fc <buzzerSet>
		break;
20001f1a:	e077      	b.n	2000200c <calibTouch+0x250>
	case RIGHTDOWN:
		maxX += raw_x;
20001f1c:	4b44      	ldr	r3, [pc, #272]	; (20002030 <calibTouch+0x274>)
20001f1e:	681a      	ldr	r2, [r3, #0]
20001f20:	69bb      	ldr	r3, [r7, #24]
20001f22:	4413      	add	r3, r2
20001f24:	4a42      	ldr	r2, [pc, #264]	; (20002030 <calibTouch+0x274>)
20001f26:	6013      	str	r3, [r2, #0]
		maxY += raw_y;
20001f28:	4b42      	ldr	r3, [pc, #264]	; (20002034 <calibTouch+0x278>)
20001f2a:	681a      	ldr	r2, [r3, #0]
20001f2c:	697b      	ldr	r3, [r7, #20]
20001f2e:	4413      	add	r3, r2
20001f30:	4a40      	ldr	r2, [pc, #256]	; (20002034 <calibTouch+0x278>)
20001f32:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
20001f34:	2064      	movs	r0, #100	; 0x64
20001f36:	f001 fb61 	bl	200035fc <buzzerSet>
		figuringData();
20001f3a:	f7ff fed5 	bl	20001ce8 <figuringData>
		break;
20001f3e:	e065      	b.n	2000200c <calibTouch+0x250>
	case CHECKCALIB:
		buzzerSet(100);
20001f40:	2064      	movs	r0, #100	; 0x64
20001f42:	f001 fb5b 	bl	200035fc <buzzerSet>
		if ((((raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY)) < 125 && ((raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY)) > 115) \
20001f46:	4b3c      	ldr	r3, [pc, #240]	; (20002038 <calibTouch+0x27c>)
20001f48:	681b      	ldr	r3, [r3, #0]
20001f4a:	697a      	ldr	r2, [r7, #20]
20001f4c:	1ad2      	subs	r2, r2, r3
20001f4e:	4613      	mov	r3, r2
20001f50:	011b      	lsls	r3, r3, #4
20001f52:	1a9b      	subs	r3, r3, r2
20001f54:	011b      	lsls	r3, r3, #4
20001f56:	4619      	mov	r1, r3
20001f58:	4b38      	ldr	r3, [pc, #224]	; (2000203c <calibTouch+0x280>)
20001f5a:	681a      	ldr	r2, [r3, #0]
20001f5c:	4b36      	ldr	r3, [pc, #216]	; (20002038 <calibTouch+0x27c>)
20001f5e:	681b      	ldr	r3, [r3, #0]
20001f60:	1ad3      	subs	r3, r2, r3
20001f62:	fbb1 f3f3 	udiv	r3, r1, r3
20001f66:	2b7c      	cmp	r3, #124	; 0x7c
20001f68:	d84e      	bhi.n	20002008 <calibTouch+0x24c>
20001f6a:	4b33      	ldr	r3, [pc, #204]	; (20002038 <calibTouch+0x27c>)
20001f6c:	681b      	ldr	r3, [r3, #0]
20001f6e:	697a      	ldr	r2, [r7, #20]
20001f70:	1ad2      	subs	r2, r2, r3
20001f72:	4613      	mov	r3, r2
20001f74:	011b      	lsls	r3, r3, #4
20001f76:	1a9b      	subs	r3, r3, r2
20001f78:	011b      	lsls	r3, r3, #4
20001f7a:	4619      	mov	r1, r3
20001f7c:	4b2f      	ldr	r3, [pc, #188]	; (2000203c <calibTouch+0x280>)
20001f7e:	681a      	ldr	r2, [r3, #0]
20001f80:	4b2d      	ldr	r3, [pc, #180]	; (20002038 <calibTouch+0x27c>)
20001f82:	681b      	ldr	r3, [r3, #0]
20001f84:	1ad3      	subs	r3, r2, r3
20001f86:	fbb1 f3f3 	udiv	r3, r1, r3
20001f8a:	2b73      	cmp	r3, #115	; 0x73
20001f8c:	d93c      	bls.n	20002008 <calibTouch+0x24c>
		&& (((raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX)) < 165 && ((raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX)) > 155)){
20001f8e:	4b2c      	ldr	r3, [pc, #176]	; (20002040 <calibTouch+0x284>)
20001f90:	681b      	ldr	r3, [r3, #0]
20001f92:	69ba      	ldr	r2, [r7, #24]
20001f94:	1ad2      	subs	r2, r2, r3
20001f96:	4613      	mov	r3, r2
20001f98:	009b      	lsls	r3, r3, #2
20001f9a:	4413      	add	r3, r2
20001f9c:	019b      	lsls	r3, r3, #6
20001f9e:	4619      	mov	r1, r3
20001fa0:	4b28      	ldr	r3, [pc, #160]	; (20002044 <calibTouch+0x288>)
20001fa2:	681a      	ldr	r2, [r3, #0]
20001fa4:	4b26      	ldr	r3, [pc, #152]	; (20002040 <calibTouch+0x284>)
20001fa6:	681b      	ldr	r3, [r3, #0]
20001fa8:	1ad3      	subs	r3, r2, r3
20001faa:	fbb1 f3f3 	udiv	r3, r1, r3
20001fae:	2ba4      	cmp	r3, #164	; 0xa4
20001fb0:	d82a      	bhi.n	20002008 <calibTouch+0x24c>
20001fb2:	4b23      	ldr	r3, [pc, #140]	; (20002040 <calibTouch+0x284>)
20001fb4:	681b      	ldr	r3, [r3, #0]
20001fb6:	69ba      	ldr	r2, [r7, #24]
20001fb8:	1ad2      	subs	r2, r2, r3
20001fba:	4613      	mov	r3, r2
20001fbc:	009b      	lsls	r3, r3, #2
20001fbe:	4413      	add	r3, r2
20001fc0:	019b      	lsls	r3, r3, #6
20001fc2:	4619      	mov	r1, r3
20001fc4:	4b1f      	ldr	r3, [pc, #124]	; (20002044 <calibTouch+0x288>)
20001fc6:	681a      	ldr	r2, [r3, #0]
20001fc8:	4b1d      	ldr	r3, [pc, #116]	; (20002040 <calibTouch+0x284>)
20001fca:	681b      	ldr	r3, [r3, #0]
20001fcc:	1ad3      	subs	r3, r2, r3
20001fce:	fbb1 f3f3 	udiv	r3, r1, r3
20001fd2:	2b9b      	cmp	r3, #155	; 0x9b
20001fd4:	d918      	bls.n	20002008 <calibTouch+0x24c>
			writeDataToMemory (ADR_DATA_MIN_X, minRawX);
20001fd6:	4b1a      	ldr	r3, [pc, #104]	; (20002040 <calibTouch+0x284>)
20001fd8:	681b      	ldr	r3, [r3, #0]
20001fda:	4619      	mov	r1, r3
20001fdc:	481a      	ldr	r0, [pc, #104]	; (20002048 <calibTouch+0x28c>)
20001fde:	f001 fb2b 	bl	20003638 <writeDataToMemory>
			writeDataToMemory (ADR_DATA_MAX_X, maxRawX);
20001fe2:	4b18      	ldr	r3, [pc, #96]	; (20002044 <calibTouch+0x288>)
20001fe4:	681b      	ldr	r3, [r3, #0]
20001fe6:	4619      	mov	r1, r3
20001fe8:	4818      	ldr	r0, [pc, #96]	; (2000204c <calibTouch+0x290>)
20001fea:	f001 fb25 	bl	20003638 <writeDataToMemory>
			writeDataToMemory (ADR_DATA_MIN_Y, minRawY);
20001fee:	4b12      	ldr	r3, [pc, #72]	; (20002038 <calibTouch+0x27c>)
20001ff0:	681b      	ldr	r3, [r3, #0]
20001ff2:	4619      	mov	r1, r3
20001ff4:	4816      	ldr	r0, [pc, #88]	; (20002050 <calibTouch+0x294>)
20001ff6:	f001 fb1f 	bl	20003638 <writeDataToMemory>
			writeDataToMemory (ADR_DATA_MAX_Y, maxRawY);
20001ffa:	4b10      	ldr	r3, [pc, #64]	; (2000203c <calibTouch+0x280>)
20001ffc:	681b      	ldr	r3, [r3, #0]
20001ffe:	4619      	mov	r1, r3
20002000:	4814      	ldr	r0, [pc, #80]	; (20002054 <calibTouch+0x298>)
20002002:	f001 fb19 	bl	20003638 <writeDataToMemory>
		} else {
			return false;
		}
		break;
20002006:	e001      	b.n	2000200c <calibTouch+0x250>
			return false;
20002008:	2300      	movs	r3, #0
2000200a:	e000      	b.n	2000200e <calibTouch+0x252>
	}
	return true;
2000200c:	2301      	movs	r3, #1
}
2000200e:	4618      	mov	r0, r3
20002010:	3730      	adds	r7, #48	; 0x30
20002012:	46bd      	mov	sp, r7
20002014:	bd80      	pop	{r7, pc}
20002016:	bf00      	nop
20002018:	20011730 	.word	0x20011730
2000201c:	20011a54 	.word	0x20011a54
20002020:	20011734 	.word	0x20011734
20002024:	20011738 	.word	0x20011738
20002028:	200119c8 	.word	0x200119c8
2000202c:	200119d0 	.word	0x200119d0
20002030:	200119cc 	.word	0x200119cc
20002034:	200119d4 	.word	0x200119d4
20002038:	200119c0 	.word	0x200119c0
2000203c:	200119c4 	.word	0x200119c4
20002040:	200119b8 	.word	0x200119b8
20002044:	200119bc 	.word	0x200119bc
20002048:	0807fff0 	.word	0x0807fff0
2000204c:	0807fff4 	.word	0x0807fff4
20002050:	0807fff8 	.word	0x0807fff8
20002054:	0807fffc 	.word	0x0807fffc

20002058 <GUICalibration>:
char *unitTXT[3] = { "us", "ms", "s   ", };

uint16_t x, y, countSpeed = 1;
uint32_t timBigArea = 0, timButtonPress = 0, timHoldButtonPress = 0;
//------------------------------ функции ---------------------------------------------//
void GUICalibration(uint8_t pozition) {
20002058:	b580      	push	{r7, lr}
2000205a:	b086      	sub	sp, #24
2000205c:	af04      	add	r7, sp, #16
2000205e:	4603      	mov	r3, r0
20002060:	71fb      	strb	r3, [r7, #7]
	switch (pozition) {
20002062:	79fb      	ldrb	r3, [r7, #7]
20002064:	2b06      	cmp	r3, #6
20002066:	f200 8100 	bhi.w	2000226a <GUICalibration+0x212>
2000206a:	a201      	add	r2, pc, #4	; (adr r2, 20002070 <GUICalibration+0x18>)
2000206c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20002070:	2000208d 	.word	0x2000208d
20002074:	200020e9 	.word	0x200020e9
20002078:	2000211b 	.word	0x2000211b
2000207c:	2000214b 	.word	0x2000214b
20002080:	2000217d 	.word	0x2000217d
20002084:	200021eb 	.word	0x200021eb
20002088:	2000222b 	.word	0x2000222b
	case LEFTUP:
		ILI9341_FillScreen(ILI9341_BLACK);
2000208c:	2000      	movs	r0, #0
2000208e:	f7fe fd33 	bl	20000af8 <ILI9341_FillScreen>
		ILI9341_WriteString(15, 50, "Display calibration, click", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
20002092:	4b78      	ldr	r3, [pc, #480]	; (20002274 <GUICalibration+0x21c>)
20002094:	2200      	movs	r2, #0
20002096:	9202      	str	r2, [sp, #8]
20002098:	f64f 72e0 	movw	r2, #65504	; 0xffe0
2000209c:	9201      	str	r2, [sp, #4]
2000209e:	685a      	ldr	r2, [r3, #4]
200020a0:	9200      	str	r2, [sp, #0]
200020a2:	681b      	ldr	r3, [r3, #0]
200020a4:	4a74      	ldr	r2, [pc, #464]	; (20002278 <GUICalibration+0x220>)
200020a6:	2132      	movs	r1, #50	; 0x32
200020a8:	200f      	movs	r0, #15
200020aa:	f7fe ff04 	bl	20000eb6 <ILI9341_WriteString>
		ILI9341_WriteString(15, 70, "on all the circles in turn", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
200020ae:	4b71      	ldr	r3, [pc, #452]	; (20002274 <GUICalibration+0x21c>)
200020b0:	2200      	movs	r2, #0
200020b2:	9202      	str	r2, [sp, #8]
200020b4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
200020b8:	9201      	str	r2, [sp, #4]
200020ba:	685a      	ldr	r2, [r3, #4]
200020bc:	9200      	str	r2, [sp, #0]
200020be:	681b      	ldr	r3, [r3, #0]
200020c0:	4a6e      	ldr	r2, [pc, #440]	; (2000227c <GUICalibration+0x224>)
200020c2:	2146      	movs	r1, #70	; 0x46
200020c4:	200f      	movs	r0, #15
200020c6:	f7fe fef6 	bl	20000eb6 <ILI9341_WriteString>
		drawCircle(10, 10, 10, ILI9341_YELLOW);
200020ca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200020ce:	220a      	movs	r2, #10
200020d0:	210a      	movs	r1, #10
200020d2:	200a      	movs	r0, #10
200020d4:	f7ff fc07 	bl	200018e6 <drawCircle>
		drawCircle(10, 10, 9, ILI9341_YELLOW);
200020d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200020dc:	2209      	movs	r2, #9
200020de:	210a      	movs	r1, #10
200020e0:	200a      	movs	r0, #10
200020e2:	f7ff fc00 	bl	200018e6 <drawCircle>
		break;
200020e6:	e0c0      	b.n	2000226a <GUICalibration+0x212>
	case RIGHTUP:
		ILI9341_FillRectangle(0, 0, 25, 25, ILI9341_BLACK);
200020e8:	2300      	movs	r3, #0
200020ea:	9300      	str	r3, [sp, #0]
200020ec:	2319      	movs	r3, #25
200020ee:	2219      	movs	r2, #25
200020f0:	2100      	movs	r1, #0
200020f2:	2000      	movs	r0, #0
200020f4:	f7fe fc96 	bl	20000a24 <ILI9341_FillRectangle>
		drawCircle(309, 10, 10, ILI9341_YELLOW);
200020f8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200020fc:	220a      	movs	r2, #10
200020fe:	210a      	movs	r1, #10
20002100:	f240 1035 	movw	r0, #309	; 0x135
20002104:	f7ff fbef 	bl	200018e6 <drawCircle>
		drawCircle(309, 10, 9, ILI9341_YELLOW);
20002108:	f64f 73e0 	movw	r3, #65504	; 0xffe0
2000210c:	2209      	movs	r2, #9
2000210e:	210a      	movs	r1, #10
20002110:	f240 1035 	movw	r0, #309	; 0x135
20002114:	f7ff fbe7 	bl	200018e6 <drawCircle>
		break;
20002118:	e0a7      	b.n	2000226a <GUICalibration+0x212>
	case LEFTDOWN:
		ILI9341_FillRectangle(299, 0, 25, 25, ILI9341_BLACK);
2000211a:	2300      	movs	r3, #0
2000211c:	9300      	str	r3, [sp, #0]
2000211e:	2319      	movs	r3, #25
20002120:	2219      	movs	r2, #25
20002122:	2100      	movs	r1, #0
20002124:	f240 102b 	movw	r0, #299	; 0x12b
20002128:	f7fe fc7c 	bl	20000a24 <ILI9341_FillRectangle>
		drawCircle(10, 229, 10, ILI9341_YELLOW);
2000212c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002130:	220a      	movs	r2, #10
20002132:	21e5      	movs	r1, #229	; 0xe5
20002134:	200a      	movs	r0, #10
20002136:	f7ff fbd6 	bl	200018e6 <drawCircle>
		drawCircle(10, 229, 9, ILI9341_YELLOW);
2000213a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
2000213e:	2209      	movs	r2, #9
20002140:	21e5      	movs	r1, #229	; 0xe5
20002142:	200a      	movs	r0, #10
20002144:	f7ff fbcf 	bl	200018e6 <drawCircle>
		break;
20002148:	e08f      	b.n	2000226a <GUICalibration+0x212>
	case RIGHTDOWN:
		ILI9341_FillRectangle(0, 219, 25, 25, ILI9341_BLACK);
2000214a:	2300      	movs	r3, #0
2000214c:	9300      	str	r3, [sp, #0]
2000214e:	2319      	movs	r3, #25
20002150:	2219      	movs	r2, #25
20002152:	21db      	movs	r1, #219	; 0xdb
20002154:	2000      	movs	r0, #0
20002156:	f7fe fc65 	bl	20000a24 <ILI9341_FillRectangle>
		drawCircle(309, 229, 10, ILI9341_YELLOW);
2000215a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
2000215e:	220a      	movs	r2, #10
20002160:	21e5      	movs	r1, #229	; 0xe5
20002162:	f240 1035 	movw	r0, #309	; 0x135
20002166:	f7ff fbbe 	bl	200018e6 <drawCircle>
		drawCircle(309, 229, 9, ILI9341_YELLOW);
2000216a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
2000216e:	2209      	movs	r2, #9
20002170:	21e5      	movs	r1, #229	; 0xe5
20002172:	f240 1035 	movw	r0, #309	; 0x135
20002176:	f7ff fbb6 	bl	200018e6 <drawCircle>
		break;
2000217a:	e076      	b.n	2000226a <GUICalibration+0x212>
	case CHECKCALIB:
		ILI9341_FillRectangle(299, 219, 25, 25, ILI9341_BLACK);
2000217c:	2300      	movs	r3, #0
2000217e:	9300      	str	r3, [sp, #0]
20002180:	2319      	movs	r3, #25
20002182:	2219      	movs	r2, #25
20002184:	21db      	movs	r1, #219	; 0xdb
20002186:	f240 102b 	movw	r0, #299	; 0x12b
2000218a:	f7fe fc4b 	bl	20000a24 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(15, 50, 290, 40, ILI9341_BLACK);
2000218e:	2300      	movs	r3, #0
20002190:	9300      	str	r3, [sp, #0]
20002192:	2328      	movs	r3, #40	; 0x28
20002194:	f44f 7291 	mov.w	r2, #290	; 0x122
20002198:	2132      	movs	r1, #50	; 0x32
2000219a:	200f      	movs	r0, #15
2000219c:	f7fe fc42 	bl	20000a24 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(140, 100, 60, 20, ILI9341_BLACK);
200021a0:	2300      	movs	r3, #0
200021a2:	9300      	str	r3, [sp, #0]
200021a4:	2314      	movs	r3, #20
200021a6:	223c      	movs	r2, #60	; 0x3c
200021a8:	2164      	movs	r1, #100	; 0x64
200021aa:	208c      	movs	r0, #140	; 0x8c
200021ac:	f7fe fc3a 	bl	20000a24 <ILI9341_FillRectangle>
		ILI9341_WriteString(60, 20, "Calibration check", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
200021b0:	4b30      	ldr	r3, [pc, #192]	; (20002274 <GUICalibration+0x21c>)
200021b2:	2200      	movs	r2, #0
200021b4:	9202      	str	r2, [sp, #8]
200021b6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
200021ba:	9201      	str	r2, [sp, #4]
200021bc:	685a      	ldr	r2, [r3, #4]
200021be:	9200      	str	r2, [sp, #0]
200021c0:	681b      	ldr	r3, [r3, #0]
200021c2:	4a2f      	ldr	r2, [pc, #188]	; (20002280 <GUICalibration+0x228>)
200021c4:	2114      	movs	r1, #20
200021c6:	203c      	movs	r0, #60	; 0x3c
200021c8:	f7fe fe75 	bl	20000eb6 <ILI9341_WriteString>
		drawCircle(160, 120, 10, ILI9341_YELLOW);
200021cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200021d0:	220a      	movs	r2, #10
200021d2:	2178      	movs	r1, #120	; 0x78
200021d4:	20a0      	movs	r0, #160	; 0xa0
200021d6:	f7ff fb86 	bl	200018e6 <drawCircle>
		drawCircle(160, 120, 9, ILI9341_YELLOW);
200021da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200021de:	2209      	movs	r2, #9
200021e0:	2178      	movs	r1, #120	; 0x78
200021e2:	20a0      	movs	r0, #160	; 0xa0
200021e4:	f7ff fb7f 	bl	200018e6 <drawCircle>
		break;
200021e8:	e03f      	b.n	2000226a <GUICalibration+0x212>
	case CALIBOK:
		ILI9341_FillRectangle(60, 20, 260, 20, ILI9341_BLACK);
200021ea:	2300      	movs	r3, #0
200021ec:	9300      	str	r3, [sp, #0]
200021ee:	2314      	movs	r3, #20
200021f0:	f44f 7282 	mov.w	r2, #260	; 0x104
200021f4:	2114      	movs	r1, #20
200021f6:	203c      	movs	r0, #60	; 0x3c
200021f8:	f7fe fc14 	bl	20000a24 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(150, 110, 30, 30, ILI9341_BLACK);
200021fc:	2300      	movs	r3, #0
200021fe:	9300      	str	r3, [sp, #0]
20002200:	231e      	movs	r3, #30
20002202:	221e      	movs	r2, #30
20002204:	216e      	movs	r1, #110	; 0x6e
20002206:	2096      	movs	r0, #150	; 0x96
20002208:	f7fe fc0c 	bl	20000a24 <ILI9341_FillRectangle>
		ILI9341_WriteString(75, 20, "Calibration ok", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
2000220c:	4b19      	ldr	r3, [pc, #100]	; (20002274 <GUICalibration+0x21c>)
2000220e:	2200      	movs	r2, #0
20002210:	9202      	str	r2, [sp, #8]
20002212:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20002216:	9201      	str	r2, [sp, #4]
20002218:	685a      	ldr	r2, [r3, #4]
2000221a:	9200      	str	r2, [sp, #0]
2000221c:	681b      	ldr	r3, [r3, #0]
2000221e:	4a19      	ldr	r2, [pc, #100]	; (20002284 <GUICalibration+0x22c>)
20002220:	2114      	movs	r1, #20
20002222:	204b      	movs	r0, #75	; 0x4b
20002224:	f7fe fe47 	bl	20000eb6 <ILI9341_WriteString>
		break;
20002228:	e01f      	b.n	2000226a <GUICalibration+0x212>
	case ERRCALIB:
		ILI9341_FillRectangle(60, 50, 260, 20, ILI9341_BLACK);
2000222a:	2300      	movs	r3, #0
2000222c:	9300      	str	r3, [sp, #0]
2000222e:	2314      	movs	r3, #20
20002230:	f44f 7282 	mov.w	r2, #260	; 0x104
20002234:	2132      	movs	r1, #50	; 0x32
20002236:	203c      	movs	r0, #60	; 0x3c
20002238:	f7fe fbf4 	bl	20000a24 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(150, 110, 30, 30, ILI9341_BLACK);
2000223c:	2300      	movs	r3, #0
2000223e:	9300      	str	r3, [sp, #0]
20002240:	231e      	movs	r3, #30
20002242:	221e      	movs	r2, #30
20002244:	216e      	movs	r1, #110	; 0x6e
20002246:	2096      	movs	r0, #150	; 0x96
20002248:	f7fe fbec 	bl	20000a24 <ILI9341_FillRectangle>
		ILI9341_WriteString(60, 20, "Invalid calibration", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
2000224c:	4b09      	ldr	r3, [pc, #36]	; (20002274 <GUICalibration+0x21c>)
2000224e:	2200      	movs	r2, #0
20002250:	9202      	str	r2, [sp, #8]
20002252:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20002256:	9201      	str	r2, [sp, #4]
20002258:	685a      	ldr	r2, [r3, #4]
2000225a:	9200      	str	r2, [sp, #0]
2000225c:	681b      	ldr	r3, [r3, #0]
2000225e:	4a0a      	ldr	r2, [pc, #40]	; (20002288 <GUICalibration+0x230>)
20002260:	2114      	movs	r1, #20
20002262:	203c      	movs	r0, #60	; 0x3c
20002264:	f7fe fe27 	bl	20000eb6 <ILI9341_WriteString>
		break;
20002268:	bf00      	nop
	}
}
2000226a:	bf00      	nop
2000226c:	3708      	adds	r7, #8
2000226e:	46bd      	mov	sp, r7
20002270:	bd80      	pop	{r7, pc}
20002272:	bf00      	nop
20002274:	200118fc 	.word	0x200118fc
20002278:	20007090 	.word	0x20007090
2000227c:	200070ac 	.word	0x200070ac
20002280:	200070c8 	.word	0x200070c8
20002284:	200070dc 	.word	0x200070dc
20002288:	200070ec 	.word	0x200070ec

2000228c <setOK>:

void setOK(uint8_t flag) {
2000228c:	b580      	push	{r7, lr}
2000228e:	b086      	sub	sp, #24
20002290:	af04      	add	r7, sp, #16
20002292:	4603      	mov	r3, r0
20002294:	71fb      	strb	r3, [r7, #7]
	if (flag) {
20002296:	79fb      	ldrb	r3, [r7, #7]
20002298:	2b00      	cmp	r3, #0
2000229a:	d00e      	beq.n	200022ba <setOK+0x2e>
		ILI9341_WriteString(140, 100, " OK    ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
2000229c:	4b10      	ldr	r3, [pc, #64]	; (200022e0 <setOK+0x54>)
2000229e:	2200      	movs	r2, #0
200022a0:	9202      	str	r2, [sp, #8]
200022a2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
200022a6:	9201      	str	r2, [sp, #4]
200022a8:	685a      	ldr	r2, [r3, #4]
200022aa:	9200      	str	r2, [sp, #0]
200022ac:	681b      	ldr	r3, [r3, #0]
200022ae:	4a0d      	ldr	r2, [pc, #52]	; (200022e4 <setOK+0x58>)
200022b0:	2164      	movs	r1, #100	; 0x64
200022b2:	208c      	movs	r0, #140	; 0x8c
200022b4:	f7fe fdff 	bl	20000eb6 <ILI9341_WriteString>
	} else {
		ILI9341_WriteString(140, 100, "Wait", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
	}
}
200022b8:	e00d      	b.n	200022d6 <setOK+0x4a>
		ILI9341_WriteString(140, 100, "Wait", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
200022ba:	4b09      	ldr	r3, [pc, #36]	; (200022e0 <setOK+0x54>)
200022bc:	2200      	movs	r2, #0
200022be:	9202      	str	r2, [sp, #8]
200022c0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
200022c4:	9201      	str	r2, [sp, #4]
200022c6:	685a      	ldr	r2, [r3, #4]
200022c8:	9200      	str	r2, [sp, #0]
200022ca:	681b      	ldr	r3, [r3, #0]
200022cc:	4a06      	ldr	r2, [pc, #24]	; (200022e8 <setOK+0x5c>)
200022ce:	2164      	movs	r1, #100	; 0x64
200022d0:	208c      	movs	r0, #140	; 0x8c
200022d2:	f7fe fdf0 	bl	20000eb6 <ILI9341_WriteString>
}
200022d6:	bf00      	nop
200022d8:	3708      	adds	r7, #8
200022da:	46bd      	mov	sp, r7
200022dc:	bd80      	pop	{r7, pc}
200022de:	bf00      	nop
200022e0:	200118fc 	.word	0x200118fc
200022e4:	20007100 	.word	0x20007100
200022e8:	20007108 	.word	0x20007108

200022ec <startDisplay>:

void startDisplay(void) {
200022ec:	b580      	push	{r7, lr}
200022ee:	af00      	add	r7, sp, #0
	ILI9341_TouchUnselect();
200022f0:	f7ff fc0e 	bl	20001b10 <ILI9341_TouchUnselect>
	ILI9341_Unselect();
200022f4:	f7fe f982 	bl	200005fc <ILI9341_Unselect>
	HAL_Delay(10);
200022f8:	200a      	movs	r0, #10
200022fa:	f001 fcaf 	bl	20003c5c <HAL_Delay>
	SET_BIT(SPI1->CR1, SPI_CR1_SPE);
200022fe:	4b09      	ldr	r3, [pc, #36]	; (20002324 <startDisplay+0x38>)
20002300:	681b      	ldr	r3, [r3, #0]
20002302:	4a08      	ldr	r2, [pc, #32]	; (20002324 <startDisplay+0x38>)
20002304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20002308:	6013      	str	r3, [r2, #0]
	ILI9341_Init();
2000230a:	f7fe fa23 	bl	20000754 <ILI9341_Init>
	ILI9341_Select();
2000230e:	f7fe f965 	bl	200005dc <ILI9341_Select>
	ILI9341_FillScreen(ILI9341_BLACK);
20002312:	2000      	movs	r0, #0
20002314:	f7fe fbf0 	bl	20000af8 <ILI9341_FillScreen>
	HAL_Delay(100);
20002318:	2064      	movs	r0, #100	; 0x64
2000231a:	f001 fc9f 	bl	20003c5c <HAL_Delay>
}
2000231e:	bf00      	nop
20002320:	bd80      	pop	{r7, pc}
20002322:	bf00      	nop
20002324:	40013000 	.word	0x40013000

20002328 <printFreeq>:

void printFreeq(void) {
20002328:	b580      	push	{r7, lr}
2000232a:	b084      	sub	sp, #16
2000232c:	af04      	add	r7, sp, #16
	strcpy(bufSpi, "Freq = 25Mh");
2000232e:	4b0b      	ldr	r3, [pc, #44]	; (2000235c <printFreeq+0x34>)
20002330:	4a0b      	ldr	r2, [pc, #44]	; (20002360 <printFreeq+0x38>)
20002332:	ca07      	ldmia	r2, {r0, r1, r2}
20002334:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ILI9341_WriteString(10, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
20002338:	4b0a      	ldr	r3, [pc, #40]	; (20002364 <printFreeq+0x3c>)
2000233a:	221f      	movs	r2, #31
2000233c:	9202      	str	r2, [sp, #8]
2000233e:	f64f 72ff 	movw	r2, #65535	; 0xffff
20002342:	9201      	str	r2, [sp, #4]
20002344:	685a      	ldr	r2, [r3, #4]
20002346:	9200      	str	r2, [sp, #0]
20002348:	681b      	ldr	r3, [r3, #0]
2000234a:	4a04      	ldr	r2, [pc, #16]	; (2000235c <printFreeq+0x34>)
2000234c:	2102      	movs	r1, #2
2000234e:	200a      	movs	r0, #10
20002350:	f7fe fdb1 	bl	20000eb6 <ILI9341_WriteString>
}
20002354:	bf00      	nop
20002356:	46bd      	mov	sp, r7
20002358:	bd80      	pop	{r7, pc}
2000235a:	bf00      	nop
2000235c:	200119d8 	.word	0x200119d8
20002360:	20007110 	.word	0x20007110
20002364:	200118fc 	.word	0x200118fc

20002368 <printTypeOutput>:

void printTypeOutput (void) {
20002368:	b590      	push	{r4, r7, lr}
2000236a:	b085      	sub	sp, #20
2000236c:	af04      	add	r7, sp, #16
	ILI9341_FillRectangle(160, 0, 160, 22, ILI9341_BLUE);
2000236e:	231f      	movs	r3, #31
20002370:	9300      	str	r3, [sp, #0]
20002372:	2316      	movs	r3, #22
20002374:	22a0      	movs	r2, #160	; 0xa0
20002376:	2100      	movs	r1, #0
20002378:	20a0      	movs	r0, #160	; 0xa0
2000237a:	f7fe fb53 	bl	20000a24 <ILI9341_FillRectangle>
	if (ParamDevice.NPNTranzistor && !ParamDevice.PNPTranzistor) {
2000237e:	4b38      	ldr	r3, [pc, #224]	; (20002460 <printTypeOutput+0xf8>)
20002380:	7a9b      	ldrb	r3, [r3, #10]
20002382:	2b00      	cmp	r3, #0
20002384:	d016      	beq.n	200023b4 <printTypeOutput+0x4c>
20002386:	4b36      	ldr	r3, [pc, #216]	; (20002460 <printTypeOutput+0xf8>)
20002388:	7adb      	ldrb	r3, [r3, #11]
2000238a:	2b00      	cmp	r3, #0
2000238c:	d112      	bne.n	200023b4 <printTypeOutput+0x4c>
		strcpy(bufSpi, "Out: NPN");
2000238e:	4b35      	ldr	r3, [pc, #212]	; (20002464 <printTypeOutput+0xfc>)
20002390:	4a35      	ldr	r2, [pc, #212]	; (20002468 <printTypeOutput+0x100>)
20002392:	ca07      	ldmia	r2, {r0, r1, r2}
20002394:	c303      	stmia	r3!, {r0, r1}
20002396:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteString(170, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
20002398:	4b34      	ldr	r3, [pc, #208]	; (2000246c <printTypeOutput+0x104>)
2000239a:	221f      	movs	r2, #31
2000239c:	9202      	str	r2, [sp, #8]
2000239e:	f64f 72ff 	movw	r2, #65535	; 0xffff
200023a2:	9201      	str	r2, [sp, #4]
200023a4:	685a      	ldr	r2, [r3, #4]
200023a6:	9200      	str	r2, [sp, #0]
200023a8:	681b      	ldr	r3, [r3, #0]
200023aa:	4a2e      	ldr	r2, [pc, #184]	; (20002464 <printTypeOutput+0xfc>)
200023ac:	2102      	movs	r1, #2
200023ae:	20aa      	movs	r0, #170	; 0xaa
200023b0:	f7fe fd81 	bl	20000eb6 <ILI9341_WriteString>
	}
	if (ParamDevice.NPNTranzistor && ParamDevice.PNPTranzistor) {
200023b4:	4b2a      	ldr	r3, [pc, #168]	; (20002460 <printTypeOutput+0xf8>)
200023b6:	7a9b      	ldrb	r3, [r3, #10]
200023b8:	2b00      	cmp	r3, #0
200023ba:	d017      	beq.n	200023ec <printTypeOutput+0x84>
200023bc:	4b28      	ldr	r3, [pc, #160]	; (20002460 <printTypeOutput+0xf8>)
200023be:	7adb      	ldrb	r3, [r3, #11]
200023c0:	2b00      	cmp	r3, #0
200023c2:	d013      	beq.n	200023ec <printTypeOutput+0x84>
		strcpy(bufSpi, "Out: NPN+PNP");
200023c4:	4a27      	ldr	r2, [pc, #156]	; (20002464 <printTypeOutput+0xfc>)
200023c6:	4b2a      	ldr	r3, [pc, #168]	; (20002470 <printTypeOutput+0x108>)
200023c8:	4614      	mov	r4, r2
200023ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
200023cc:	c407      	stmia	r4!, {r0, r1, r2}
200023ce:	7023      	strb	r3, [r4, #0]
		ILI9341_WriteString(170, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
200023d0:	4b26      	ldr	r3, [pc, #152]	; (2000246c <printTypeOutput+0x104>)
200023d2:	221f      	movs	r2, #31
200023d4:	9202      	str	r2, [sp, #8]
200023d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
200023da:	9201      	str	r2, [sp, #4]
200023dc:	685a      	ldr	r2, [r3, #4]
200023de:	9200      	str	r2, [sp, #0]
200023e0:	681b      	ldr	r3, [r3, #0]
200023e2:	4a20      	ldr	r2, [pc, #128]	; (20002464 <printTypeOutput+0xfc>)
200023e4:	2102      	movs	r1, #2
200023e6:	20aa      	movs	r0, #170	; 0xaa
200023e8:	f7fe fd65 	bl	20000eb6 <ILI9341_WriteString>
	}
	if (!ParamDevice.NPNTranzistor && ParamDevice.PNPTranzistor) {
200023ec:	4b1c      	ldr	r3, [pc, #112]	; (20002460 <printTypeOutput+0xf8>)
200023ee:	7a9b      	ldrb	r3, [r3, #10]
200023f0:	2b00      	cmp	r3, #0
200023f2:	d116      	bne.n	20002422 <printTypeOutput+0xba>
200023f4:	4b1a      	ldr	r3, [pc, #104]	; (20002460 <printTypeOutput+0xf8>)
200023f6:	7adb      	ldrb	r3, [r3, #11]
200023f8:	2b00      	cmp	r3, #0
200023fa:	d012      	beq.n	20002422 <printTypeOutput+0xba>
		strcpy(bufSpi, "Out: PNP");
200023fc:	4b19      	ldr	r3, [pc, #100]	; (20002464 <printTypeOutput+0xfc>)
200023fe:	4a1d      	ldr	r2, [pc, #116]	; (20002474 <printTypeOutput+0x10c>)
20002400:	ca07      	ldmia	r2, {r0, r1, r2}
20002402:	c303      	stmia	r3!, {r0, r1}
20002404:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteString(170, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
20002406:	4b19      	ldr	r3, [pc, #100]	; (2000246c <printTypeOutput+0x104>)
20002408:	221f      	movs	r2, #31
2000240a:	9202      	str	r2, [sp, #8]
2000240c:	f64f 72ff 	movw	r2, #65535	; 0xffff
20002410:	9201      	str	r2, [sp, #4]
20002412:	685a      	ldr	r2, [r3, #4]
20002414:	9200      	str	r2, [sp, #0]
20002416:	681b      	ldr	r3, [r3, #0]
20002418:	4a12      	ldr	r2, [pc, #72]	; (20002464 <printTypeOutput+0xfc>)
2000241a:	2102      	movs	r1, #2
2000241c:	20aa      	movs	r0, #170	; 0xaa
2000241e:	f7fe fd4a 	bl	20000eb6 <ILI9341_WriteString>
	}
	if (!ParamDevice.NPNTranzistor && !ParamDevice.PNPTranzistor) {
20002422:	4b0f      	ldr	r3, [pc, #60]	; (20002460 <printTypeOutput+0xf8>)
20002424:	7a9b      	ldrb	r3, [r3, #10]
20002426:	2b00      	cmp	r3, #0
20002428:	d116      	bne.n	20002458 <printTypeOutput+0xf0>
2000242a:	4b0d      	ldr	r3, [pc, #52]	; (20002460 <printTypeOutput+0xf8>)
2000242c:	7adb      	ldrb	r3, [r3, #11]
2000242e:	2b00      	cmp	r3, #0
20002430:	d112      	bne.n	20002458 <printTypeOutput+0xf0>
		strcpy(bufSpi, "Out: No out");
20002432:	4b0c      	ldr	r3, [pc, #48]	; (20002464 <printTypeOutput+0xfc>)
20002434:	4a10      	ldr	r2, [pc, #64]	; (20002478 <printTypeOutput+0x110>)
20002436:	ca07      	ldmia	r2, {r0, r1, r2}
20002438:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ILI9341_WriteString(170, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
2000243c:	4b0b      	ldr	r3, [pc, #44]	; (2000246c <printTypeOutput+0x104>)
2000243e:	221f      	movs	r2, #31
20002440:	9202      	str	r2, [sp, #8]
20002442:	f64f 72ff 	movw	r2, #65535	; 0xffff
20002446:	9201      	str	r2, [sp, #4]
20002448:	685a      	ldr	r2, [r3, #4]
2000244a:	9200      	str	r2, [sp, #0]
2000244c:	681b      	ldr	r3, [r3, #0]
2000244e:	4a05      	ldr	r2, [pc, #20]	; (20002464 <printTypeOutput+0xfc>)
20002450:	2102      	movs	r1, #2
20002452:	20aa      	movs	r0, #170	; 0xaa
20002454:	f7fe fd2f 	bl	20000eb6 <ILI9341_WriteString>
	}
}
20002458:	bf00      	nop
2000245a:	3704      	adds	r7, #4
2000245c:	46bd      	mov	sp, r7
2000245e:	bd90      	pop	{r4, r7, pc}
20002460:	2001191c 	.word	0x2001191c
20002464:	200119d8 	.word	0x200119d8
20002468:	2000711c 	.word	0x2000711c
2000246c:	200118fc 	.word	0x200118fc
20002470:	20007128 	.word	0x20007128
20002474:	20007138 	.word	0x20007138
20002478:	20007144 	.word	0x20007144

2000247c <printTImpulse>:

void printTImpulse(void) {
2000247c:	b580      	push	{r7, lr}
2000247e:	b082      	sub	sp, #8
20002480:	af02      	add	r7, sp, #8
	strcpy(bufSpi, "T imp:");
20002482:	4b16      	ldr	r3, [pc, #88]	; (200024dc <printTImpulse+0x60>)
20002484:	4a16      	ldr	r2, [pc, #88]	; (200024e0 <printTImpulse+0x64>)
20002486:	e892 0003 	ldmia.w	r2, {r0, r1}
2000248a:	6018      	str	r0, [r3, #0]
2000248c:	3304      	adds	r3, #4
2000248e:	8019      	strh	r1, [r3, #0]
20002490:	3302      	adds	r3, #2
20002492:	0c0a      	lsrs	r2, r1, #16
20002494:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteMyString(12, 30, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
20002496:	2300      	movs	r3, #0
20002498:	9300      	str	r3, [sp, #0]
2000249a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
2000249e:	4a0f      	ldr	r2, [pc, #60]	; (200024dc <printTImpulse+0x60>)
200024a0:	211e      	movs	r1, #30
200024a2:	200c      	movs	r0, #12
200024a4:	f7fe fc30 	bl	20000d08 <ILI9341_WriteMyString>
	sprintf(bufSpi, "%-3d %s  ", ParamDevice.impuls, unitTXT[ParamDevice.unitImpuls]);
200024a8:	4b0e      	ldr	r3, [pc, #56]	; (200024e4 <printTImpulse+0x68>)
200024aa:	881b      	ldrh	r3, [r3, #0]
200024ac:	4619      	mov	r1, r3
200024ae:	4b0d      	ldr	r3, [pc, #52]	; (200024e4 <printTImpulse+0x68>)
200024b0:	7a1b      	ldrb	r3, [r3, #8]
200024b2:	461a      	mov	r2, r3
200024b4:	4b0c      	ldr	r3, [pc, #48]	; (200024e8 <printTImpulse+0x6c>)
200024b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200024ba:	460a      	mov	r2, r1
200024bc:	490b      	ldr	r1, [pc, #44]	; (200024ec <printTImpulse+0x70>)
200024be:	4807      	ldr	r0, [pc, #28]	; (200024dc <printTImpulse+0x60>)
200024c0:	f004 f94a 	bl	20006758 <siprintf>
	ILI9341_WriteMyString(125, 30, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
200024c4:	2300      	movs	r3, #0
200024c6:	9300      	str	r3, [sp, #0]
200024c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
200024cc:	4a03      	ldr	r2, [pc, #12]	; (200024dc <printTImpulse+0x60>)
200024ce:	211e      	movs	r1, #30
200024d0:	207d      	movs	r0, #125	; 0x7d
200024d2:	f7fe fc19 	bl	20000d08 <ILI9341_WriteMyString>
}
200024d6:	bf00      	nop
200024d8:	46bd      	mov	sp, r7
200024da:	bd80      	pop	{r7, pc}
200024dc:	200119d8 	.word	0x200119d8
200024e0:	20007150 	.word	0x20007150
200024e4:	2001191c 	.word	0x2001191c
200024e8:	20011904 	.word	0x20011904
200024ec:	20007158 	.word	0x20007158

200024f0 <printTPause>:

void printTPause(void) {
200024f0:	b580      	push	{r7, lr}
200024f2:	b082      	sub	sp, #8
200024f4:	af02      	add	r7, sp, #8
	strcpy(bufSpi, "T paus:");
200024f6:	4b14      	ldr	r3, [pc, #80]	; (20002548 <printTPause+0x58>)
200024f8:	4a14      	ldr	r2, [pc, #80]	; (2000254c <printTPause+0x5c>)
200024fa:	e892 0003 	ldmia.w	r2, {r0, r1}
200024fe:	e883 0003 	stmia.w	r3, {r0, r1}
	ILI9341_WriteMyString(12, 78, bufSpi, ILI9341_YELLOW, ILI9341_BLACK);
20002502:	2300      	movs	r3, #0
20002504:	9300      	str	r3, [sp, #0]
20002506:	f64f 73e0 	movw	r3, #65504	; 0xffe0
2000250a:	4a0f      	ldr	r2, [pc, #60]	; (20002548 <printTPause+0x58>)
2000250c:	214e      	movs	r1, #78	; 0x4e
2000250e:	200c      	movs	r0, #12
20002510:	f7fe fbfa 	bl	20000d08 <ILI9341_WriteMyString>
	sprintf(bufSpi, "%-3d %s  ", ParamDevice.pause, unitTXT[ParamDevice.unitPause]);
20002514:	4b0e      	ldr	r3, [pc, #56]	; (20002550 <printTPause+0x60>)
20002516:	885b      	ldrh	r3, [r3, #2]
20002518:	4619      	mov	r1, r3
2000251a:	4b0d      	ldr	r3, [pc, #52]	; (20002550 <printTPause+0x60>)
2000251c:	7a5b      	ldrb	r3, [r3, #9]
2000251e:	461a      	mov	r2, r3
20002520:	4b0c      	ldr	r3, [pc, #48]	; (20002554 <printTPause+0x64>)
20002522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002526:	460a      	mov	r2, r1
20002528:	490b      	ldr	r1, [pc, #44]	; (20002558 <printTPause+0x68>)
2000252a:	4807      	ldr	r0, [pc, #28]	; (20002548 <printTPause+0x58>)
2000252c:	f004 f914 	bl	20006758 <siprintf>
	ILI9341_WriteMyString(125, 78, bufSpi, ILI9341_YELLOW, ILI9341_BLACK);
20002530:	2300      	movs	r3, #0
20002532:	9300      	str	r3, [sp, #0]
20002534:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002538:	4a03      	ldr	r2, [pc, #12]	; (20002548 <printTPause+0x58>)
2000253a:	214e      	movs	r1, #78	; 0x4e
2000253c:	207d      	movs	r0, #125	; 0x7d
2000253e:	f7fe fbe3 	bl	20000d08 <ILI9341_WriteMyString>
}
20002542:	bf00      	nop
20002544:	46bd      	mov	sp, r7
20002546:	bd80      	pop	{r7, pc}
20002548:	200119d8 	.word	0x200119d8
2000254c:	20007164 	.word	0x20007164
20002550:	2001191c 	.word	0x2001191c
20002554:	20011904 	.word	0x20011904
20002558:	20007158 	.word	0x20007158

2000255c <printCount>:

void printCount(void) {
2000255c:	b580      	push	{r7, lr}
2000255e:	b082      	sub	sp, #8
20002560:	af02      	add	r7, sp, #8
	strcpy(bufSpi, "Count:");
20002562:	4b1d      	ldr	r3, [pc, #116]	; (200025d8 <printCount+0x7c>)
20002564:	4a1d      	ldr	r2, [pc, #116]	; (200025dc <printCount+0x80>)
20002566:	e892 0003 	ldmia.w	r2, {r0, r1}
2000256a:	6018      	str	r0, [r3, #0]
2000256c:	3304      	adds	r3, #4
2000256e:	8019      	strh	r1, [r3, #0]
20002570:	3302      	adds	r3, #2
20002572:	0c0a      	lsrs	r2, r1, #16
20002574:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteMyString(12, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
20002576:	2300      	movs	r3, #0
20002578:	9300      	str	r3, [sp, #0]
2000257a:	f64f 031f 	movw	r3, #63519	; 0xf81f
2000257e:	4a16      	ldr	r2, [pc, #88]	; (200025d8 <printCount+0x7c>)
20002580:	217e      	movs	r1, #126	; 0x7e
20002582:	200c      	movs	r0, #12
20002584:	f7fe fbc0 	bl	20000d08 <ILI9341_WriteMyString>
	if (ParamDevice.count) {
20002588:	4b15      	ldr	r3, [pc, #84]	; (200025e0 <printCount+0x84>)
2000258a:	889b      	ldrh	r3, [r3, #4]
2000258c:	2b00      	cmp	r3, #0
2000258e:	d011      	beq.n	200025b4 <printCount+0x58>
		sprintf(bufSpi, "%-3d %s  ", ParamDevice.count, "rp");
20002590:	4b13      	ldr	r3, [pc, #76]	; (200025e0 <printCount+0x84>)
20002592:	889b      	ldrh	r3, [r3, #4]
20002594:	461a      	mov	r2, r3
20002596:	4b13      	ldr	r3, [pc, #76]	; (200025e4 <printCount+0x88>)
20002598:	4913      	ldr	r1, [pc, #76]	; (200025e8 <printCount+0x8c>)
2000259a:	480f      	ldr	r0, [pc, #60]	; (200025d8 <printCount+0x7c>)
2000259c:	f004 f8dc 	bl	20006758 <siprintf>
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
200025a0:	2300      	movs	r3, #0
200025a2:	9300      	str	r3, [sp, #0]
200025a4:	f64f 031f 	movw	r3, #63519	; 0xf81f
200025a8:	4a0b      	ldr	r2, [pc, #44]	; (200025d8 <printCount+0x7c>)
200025aa:	217e      	movs	r1, #126	; 0x7e
200025ac:	207d      	movs	r0, #125	; 0x7d
200025ae:	f7fe fbab 	bl	20000d08 <ILI9341_WriteMyString>
	} else {
		sprintf(bufSpi, "~   %s  ", "rp");
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
	}
}
200025b2:	e00d      	b.n	200025d0 <printCount+0x74>
		sprintf(bufSpi, "~   %s  ", "rp");
200025b4:	4a0b      	ldr	r2, [pc, #44]	; (200025e4 <printCount+0x88>)
200025b6:	490d      	ldr	r1, [pc, #52]	; (200025ec <printCount+0x90>)
200025b8:	4807      	ldr	r0, [pc, #28]	; (200025d8 <printCount+0x7c>)
200025ba:	f004 f8cd 	bl	20006758 <siprintf>
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
200025be:	2300      	movs	r3, #0
200025c0:	9300      	str	r3, [sp, #0]
200025c2:	f64f 031f 	movw	r3, #63519	; 0xf81f
200025c6:	4a04      	ldr	r2, [pc, #16]	; (200025d8 <printCount+0x7c>)
200025c8:	217e      	movs	r1, #126	; 0x7e
200025ca:	207d      	movs	r0, #125	; 0x7d
200025cc:	f7fe fb9c 	bl	20000d08 <ILI9341_WriteMyString>
}
200025d0:	bf00      	nop
200025d2:	46bd      	mov	sp, r7
200025d4:	bd80      	pop	{r7, pc}
200025d6:	bf00      	nop
200025d8:	200119d8 	.word	0x200119d8
200025dc:	2000716c 	.word	0x2000716c
200025e0:	2001191c 	.word	0x2001191c
200025e4:	20007174 	.word	0x20007174
200025e8:	20007158 	.word	0x20007158
200025ec:	20007178 	.word	0x20007178

200025f0 <printColorImage>:

void printColorImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t status, const uint16_t *data) {
200025f0:	b590      	push	{r4, r7, lr}
200025f2:	b085      	sub	sp, #20
200025f4:	af02      	add	r7, sp, #8
200025f6:	4604      	mov	r4, r0
200025f8:	4608      	mov	r0, r1
200025fa:	4611      	mov	r1, r2
200025fc:	461a      	mov	r2, r3
200025fe:	4623      	mov	r3, r4
20002600:	80fb      	strh	r3, [r7, #6]
20002602:	4603      	mov	r3, r0
20002604:	80bb      	strh	r3, [r7, #4]
20002606:	460b      	mov	r3, r1
20002608:	807b      	strh	r3, [r7, #2]
2000260a:	4613      	mov	r3, r2
2000260c:	803b      	strh	r3, [r7, #0]
	if (status == NO_PRESSED) {
2000260e:	8b3b      	ldrh	r3, [r7, #24]
20002610:	2b00      	cmp	r3, #0
20002612:	d11c      	bne.n	2000264e <printColorImage+0x5e>
		drawRect(x - 1, y - 1, w + 2, h + 2, ILI9341_BLACK);
20002614:	88fb      	ldrh	r3, [r7, #6]
20002616:	3b01      	subs	r3, #1
20002618:	b29b      	uxth	r3, r3
2000261a:	b218      	sxth	r0, r3
2000261c:	88bb      	ldrh	r3, [r7, #4]
2000261e:	3b01      	subs	r3, #1
20002620:	b29b      	uxth	r3, r3
20002622:	b219      	sxth	r1, r3
20002624:	887b      	ldrh	r3, [r7, #2]
20002626:	3302      	adds	r3, #2
20002628:	b29b      	uxth	r3, r3
2000262a:	b21a      	sxth	r2, r3
2000262c:	883b      	ldrh	r3, [r7, #0]
2000262e:	3302      	adds	r3, #2
20002630:	b29b      	uxth	r3, r3
20002632:	b21b      	sxth	r3, r3
20002634:	2400      	movs	r4, #0
20002636:	9400      	str	r4, [sp, #0]
20002638:	f7fe fda0 	bl	2000117c <drawRect>
		ILI9341_DrawImage(x, y, w, h, data);
2000263c:	883c      	ldrh	r4, [r7, #0]
2000263e:	887a      	ldrh	r2, [r7, #2]
20002640:	88b9      	ldrh	r1, [r7, #4]
20002642:	88f8      	ldrh	r0, [r7, #6]
20002644:	69fb      	ldr	r3, [r7, #28]
20002646:	9300      	str	r3, [sp, #0]
20002648:	4623      	mov	r3, r4
2000264a:	f7fe fc7f 	bl	20000f4c <ILI9341_DrawImage>
	}
	if (status == PRESSED) {
2000264e:	8b3b      	ldrh	r3, [r7, #24]
20002650:	2b01      	cmp	r3, #1
20002652:	d11c      	bne.n	2000268e <printColorImage+0x9e>
		drawRect(x, y, w + 2, h + 2, ILI9341_BLACK);
20002654:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
20002658:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
2000265c:	887b      	ldrh	r3, [r7, #2]
2000265e:	3302      	adds	r3, #2
20002660:	b29b      	uxth	r3, r3
20002662:	b21a      	sxth	r2, r3
20002664:	883b      	ldrh	r3, [r7, #0]
20002666:	3302      	adds	r3, #2
20002668:	b29b      	uxth	r3, r3
2000266a:	b21b      	sxth	r3, r3
2000266c:	2400      	movs	r4, #0
2000266e:	9400      	str	r4, [sp, #0]
20002670:	f7fe fd84 	bl	2000117c <drawRect>
		ILI9341_DrawImage(x + 1, y + 1, w, h, data);
20002674:	88fb      	ldrh	r3, [r7, #6]
20002676:	3301      	adds	r3, #1
20002678:	b298      	uxth	r0, r3
2000267a:	88bb      	ldrh	r3, [r7, #4]
2000267c:	3301      	adds	r3, #1
2000267e:	b299      	uxth	r1, r3
20002680:	883c      	ldrh	r4, [r7, #0]
20002682:	887a      	ldrh	r2, [r7, #2]
20002684:	69fb      	ldr	r3, [r7, #28]
20002686:	9300      	str	r3, [sp, #0]
20002688:	4623      	mov	r3, r4
2000268a:	f7fe fc5f 	bl	20000f4c <ILI9341_DrawImage>
	}
}
2000268e:	bf00      	nop
20002690:	370c      	adds	r7, #12
20002692:	46bd      	mov	sp, r7
20002694:	bd90      	pop	{r4, r7, pc}
	...

20002698 <mainDisplayPrint>:

void mainDisplayPrint(void) {
20002698:	b580      	push	{r7, lr}
2000269a:	b084      	sub	sp, #16
2000269c:	af04      	add	r7, sp, #16
	ILI9341_FillRectangle(75, 20, 220, 20, ILI9341_BLACK);
2000269e:	2300      	movs	r3, #0
200026a0:	9300      	str	r3, [sp, #0]
200026a2:	2314      	movs	r3, #20
200026a4:	22dc      	movs	r2, #220	; 0xdc
200026a6:	2114      	movs	r1, #20
200026a8:	204b      	movs	r0, #75	; 0x4b
200026aa:	f7fe f9bb 	bl	20000a24 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(0, 0, 320, 22, ILI9341_BLUE);
200026ae:	231f      	movs	r3, #31
200026b0:	9300      	str	r3, [sp, #0]
200026b2:	2316      	movs	r3, #22
200026b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
200026b8:	2100      	movs	r1, #0
200026ba:	2000      	movs	r0, #0
200026bc:	f7fe f9b2 	bl	20000a24 <ILI9341_FillRectangle>
	printTypeOutput();
200026c0:	f7ff fe52 	bl	20002368 <printTypeOutput>
	printFreeq();
200026c4:	f7ff fe30 	bl	20002328 <printFreeq>
	printTImpulse();
200026c8:	f7ff fed8 	bl	2000247c <printTImpulse>
	printTPause();
200026cc:	f7ff ff10 	bl	200024f0 <printTPause>
	printCount();
200026d0:	f7ff ff44 	bl	2000255c <printCount>
	printColorImage(24, 182, 50, 50, NO_PRESSED, image_Plus);
200026d4:	4b1f      	ldr	r3, [pc, #124]	; (20002754 <mainDisplayPrint+0xbc>)
200026d6:	9301      	str	r3, [sp, #4]
200026d8:	2300      	movs	r3, #0
200026da:	9300      	str	r3, [sp, #0]
200026dc:	2332      	movs	r3, #50	; 0x32
200026de:	2232      	movs	r2, #50	; 0x32
200026e0:	21b6      	movs	r1, #182	; 0xb6
200026e2:	2018      	movs	r0, #24
200026e4:	f7ff ff84 	bl	200025f0 <printColorImage>
	printColorImage(98, 182, 50, 50, NO_PRESSED, image_Arrow);
200026e8:	4b1b      	ldr	r3, [pc, #108]	; (20002758 <mainDisplayPrint+0xc0>)
200026ea:	9301      	str	r3, [sp, #4]
200026ec:	2300      	movs	r3, #0
200026ee:	9300      	str	r3, [sp, #0]
200026f0:	2332      	movs	r3, #50	; 0x32
200026f2:	2232      	movs	r2, #50	; 0x32
200026f4:	21b6      	movs	r1, #182	; 0xb6
200026f6:	2062      	movs	r0, #98	; 0x62
200026f8:	f7ff ff7a 	bl	200025f0 <printColorImage>
	printColorImage(172, 182, 50, 50, NO_PRESSED, image_Minus);
200026fc:	4b17      	ldr	r3, [pc, #92]	; (2000275c <mainDisplayPrint+0xc4>)
200026fe:	9301      	str	r3, [sp, #4]
20002700:	2300      	movs	r3, #0
20002702:	9300      	str	r3, [sp, #0]
20002704:	2332      	movs	r3, #50	; 0x32
20002706:	2232      	movs	r2, #50	; 0x32
20002708:	21b6      	movs	r1, #182	; 0xb6
2000270a:	20ac      	movs	r0, #172	; 0xac
2000270c:	f7ff ff70 	bl	200025f0 <printColorImage>
	printColorImage(246, 182, 50, 50, NO_PRESSED, image_powerGreen);
20002710:	4b13      	ldr	r3, [pc, #76]	; (20002760 <mainDisplayPrint+0xc8>)
20002712:	9301      	str	r3, [sp, #4]
20002714:	2300      	movs	r3, #0
20002716:	9300      	str	r3, [sp, #0]
20002718:	2332      	movs	r3, #50	; 0x32
2000271a:	2232      	movs	r2, #50	; 0x32
2000271c:	21b6      	movs	r1, #182	; 0xb6
2000271e:	20f6      	movs	r0, #246	; 0xf6
20002720:	f7ff ff66 	bl	200025f0 <printColorImage>
	ILI9341_DrawMonochromeImage(260, 43, ILI9341_YELLOW, ILI9341_BLACK, tranzistor);
20002724:	4a0f      	ldr	r2, [pc, #60]	; (20002764 <mainDisplayPrint+0xcc>)
20002726:	466b      	mov	r3, sp
20002728:	ca07      	ldmia	r2, {r0, r1, r2}
2000272a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
2000272e:	2300      	movs	r3, #0
20002730:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20002734:	212b      	movs	r1, #43	; 0x2b
20002736:	f44f 7082 	mov.w	r0, #260	; 0x104
2000273a:	f7fe fc4f 	bl	20000fdc <ILI9341_DrawMonochromeImage>
	NPN_PNPButton(NPN, PRESSED);
2000273e:	2101      	movs	r1, #1
20002740:	2001      	movs	r0, #1
20002742:	f000 fac5 	bl	20002cd0 <NPN_PNPButton>
	NPN_PNPButton(PNP, NO_PRESSED);
20002746:	2100      	movs	r1, #0
20002748:	2000      	movs	r0, #0
2000274a:	f000 fac1 	bl	20002cd0 <NPN_PNPButton>
}
2000274e:	bf00      	nop
20002750:	46bd      	mov	sp, r7
20002752:	bd80      	pop	{r7, pc}
20002754:	200098a0 	.word	0x200098a0
20002758:	2000c0dc 	.word	0x2000c0dc
2000275c:	2000ac28 	.word	0x2000ac28
20002760:	20008518 	.word	0x20008518
20002764:	2001189c 	.word	0x2001189c

20002768 <workDisplay>:

void workDisplay(void) {
20002768:	b580      	push	{r7, lr}
2000276a:	af00      	add	r7, sp, #0
	mainDisplayPrint();
2000276c:	f7ff ff94 	bl	20002698 <mainDisplayPrint>
	/*if(ILI9341_TouchGetCoordinates(&x, &y)) {
	 ILI9341_DrawPixel(x, y, ILI9341_WHITE);
	 }*/
}
20002770:	bf00      	nop
20002772:	bd80      	pop	{r7, pc}

20002774 <checkAreaTouch>:

uint8_t checkAreaTouch(uint16_t xTouch, uint16_t yTouch, uint16_t xScan, uint16_t yScan, uint16_t weight, uint16_t height) {
20002774:	b490      	push	{r4, r7}
20002776:	b082      	sub	sp, #8
20002778:	af00      	add	r7, sp, #0
2000277a:	4604      	mov	r4, r0
2000277c:	4608      	mov	r0, r1
2000277e:	4611      	mov	r1, r2
20002780:	461a      	mov	r2, r3
20002782:	4623      	mov	r3, r4
20002784:	80fb      	strh	r3, [r7, #6]
20002786:	4603      	mov	r3, r0
20002788:	80bb      	strh	r3, [r7, #4]
2000278a:	460b      	mov	r3, r1
2000278c:	807b      	strh	r3, [r7, #2]
2000278e:	4613      	mov	r3, r2
20002790:	803b      	strh	r3, [r7, #0]
	if (xTouch >= xScan && xTouch <= xScan + weight && yTouch >= yScan && yTouch <= yScan + height)
20002792:	88fa      	ldrh	r2, [r7, #6]
20002794:	887b      	ldrh	r3, [r7, #2]
20002796:	429a      	cmp	r2, r3
20002798:	d311      	bcc.n	200027be <checkAreaTouch+0x4a>
2000279a:	88fa      	ldrh	r2, [r7, #6]
2000279c:	8879      	ldrh	r1, [r7, #2]
2000279e:	8a3b      	ldrh	r3, [r7, #16]
200027a0:	440b      	add	r3, r1
200027a2:	429a      	cmp	r2, r3
200027a4:	dc0b      	bgt.n	200027be <checkAreaTouch+0x4a>
200027a6:	88ba      	ldrh	r2, [r7, #4]
200027a8:	883b      	ldrh	r3, [r7, #0]
200027aa:	429a      	cmp	r2, r3
200027ac:	d307      	bcc.n	200027be <checkAreaTouch+0x4a>
200027ae:	88ba      	ldrh	r2, [r7, #4]
200027b0:	8839      	ldrh	r1, [r7, #0]
200027b2:	8abb      	ldrh	r3, [r7, #20]
200027b4:	440b      	add	r3, r1
200027b6:	429a      	cmp	r2, r3
200027b8:	dc01      	bgt.n	200027be <checkAreaTouch+0x4a>
		return true;
200027ba:	2301      	movs	r3, #1
200027bc:	e000      	b.n	200027c0 <checkAreaTouch+0x4c>
	return false;
200027be:	2300      	movs	r3, #0
}
200027c0:	4618      	mov	r0, r3
200027c2:	3708      	adds	r7, #8
200027c4:	46bd      	mov	sp, r7
200027c6:	bc90      	pop	{r4, r7}
200027c8:	4770      	bx	lr
	...

200027cc <checkstrokeArea>:

void checkstrokeArea(void) {
200027cc:	b580      	push	{r7, lr}
200027ce:	b084      	sub	sp, #16
200027d0:	af04      	add	r7, sp, #16
	if (!READ_FLAG(AREA1_PRESS, globalFlag)) {
200027d2:	4b31      	ldr	r3, [pc, #196]	; (20002898 <checkstrokeArea+0xcc>)
200027d4:	681b      	ldr	r3, [r3, #0]
200027d6:	f003 0308 	and.w	r3, r3, #8
200027da:	2b00      	cmp	r3, #0
200027dc:	d10c      	bne.n	200027f8 <checkstrokeArea+0x2c>
		drawSomePixelRoundRect(7, 28, 242, 48, 4, 2, ILI9341_BLACK);
200027de:	2300      	movs	r3, #0
200027e0:	9302      	str	r3, [sp, #8]
200027e2:	2302      	movs	r3, #2
200027e4:	9301      	str	r3, [sp, #4]
200027e6:	2304      	movs	r3, #4
200027e8:	9300      	str	r3, [sp, #0]
200027ea:	2330      	movs	r3, #48	; 0x30
200027ec:	22f2      	movs	r2, #242	; 0xf2
200027ee:	211c      	movs	r1, #28
200027f0:	2007      	movs	r0, #7
200027f2:	f7fe ff70 	bl	200016d6 <drawSomePixelRoundRect>
200027f6:	e00c      	b.n	20002812 <checkstrokeArea+0x46>
	} else {
		drawSomePixelRoundRect(7, 28, 242, 48, 4, 2, ILI9341_YELLOW);
200027f8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200027fc:	9302      	str	r3, [sp, #8]
200027fe:	2302      	movs	r3, #2
20002800:	9301      	str	r3, [sp, #4]
20002802:	2304      	movs	r3, #4
20002804:	9300      	str	r3, [sp, #0]
20002806:	2330      	movs	r3, #48	; 0x30
20002808:	22f2      	movs	r2, #242	; 0xf2
2000280a:	211c      	movs	r1, #28
2000280c:	2007      	movs	r0, #7
2000280e:	f7fe ff62 	bl	200016d6 <drawSomePixelRoundRect>
	}
	if (!READ_FLAG(AREA2_PRESS, globalFlag)) {
20002812:	4b21      	ldr	r3, [pc, #132]	; (20002898 <checkstrokeArea+0xcc>)
20002814:	681b      	ldr	r3, [r3, #0]
20002816:	f003 0310 	and.w	r3, r3, #16
2000281a:	2b00      	cmp	r3, #0
2000281c:	d10c      	bne.n	20002838 <checkstrokeArea+0x6c>
		drawSomePixelRoundRect(7, 76, 242, 48, 4, 2, ILI9341_BLACK);
2000281e:	2300      	movs	r3, #0
20002820:	9302      	str	r3, [sp, #8]
20002822:	2302      	movs	r3, #2
20002824:	9301      	str	r3, [sp, #4]
20002826:	2304      	movs	r3, #4
20002828:	9300      	str	r3, [sp, #0]
2000282a:	2330      	movs	r3, #48	; 0x30
2000282c:	22f2      	movs	r2, #242	; 0xf2
2000282e:	214c      	movs	r1, #76	; 0x4c
20002830:	2007      	movs	r0, #7
20002832:	f7fe ff50 	bl	200016d6 <drawSomePixelRoundRect>
20002836:	e00c      	b.n	20002852 <checkstrokeArea+0x86>
	} else {
		drawSomePixelRoundRect(7, 76, 242, 48, 4, 2, ILI9341_YELLOW);
20002838:	f64f 73e0 	movw	r3, #65504	; 0xffe0
2000283c:	9302      	str	r3, [sp, #8]
2000283e:	2302      	movs	r3, #2
20002840:	9301      	str	r3, [sp, #4]
20002842:	2304      	movs	r3, #4
20002844:	9300      	str	r3, [sp, #0]
20002846:	2330      	movs	r3, #48	; 0x30
20002848:	22f2      	movs	r2, #242	; 0xf2
2000284a:	214c      	movs	r1, #76	; 0x4c
2000284c:	2007      	movs	r0, #7
2000284e:	f7fe ff42 	bl	200016d6 <drawSomePixelRoundRect>
	}
	if (!READ_FLAG(AREA3_PRESS, globalFlag)) {
20002852:	4b11      	ldr	r3, [pc, #68]	; (20002898 <checkstrokeArea+0xcc>)
20002854:	681b      	ldr	r3, [r3, #0]
20002856:	f003 0320 	and.w	r3, r3, #32
2000285a:	2b00      	cmp	r3, #0
2000285c:	d10c      	bne.n	20002878 <checkstrokeArea+0xac>
		drawSomePixelRoundRect(7, 124, 242, 48, 4, 2, ILI9341_BLACK);
2000285e:	2300      	movs	r3, #0
20002860:	9302      	str	r3, [sp, #8]
20002862:	2302      	movs	r3, #2
20002864:	9301      	str	r3, [sp, #4]
20002866:	2304      	movs	r3, #4
20002868:	9300      	str	r3, [sp, #0]
2000286a:	2330      	movs	r3, #48	; 0x30
2000286c:	22f2      	movs	r2, #242	; 0xf2
2000286e:	217c      	movs	r1, #124	; 0x7c
20002870:	2007      	movs	r0, #7
20002872:	f7fe ff30 	bl	200016d6 <drawSomePixelRoundRect>
	} else {
		drawSomePixelRoundRect(7, 124, 242, 48, 4, 2, ILI9341_YELLOW);
	}
}
20002876:	e00c      	b.n	20002892 <checkstrokeArea+0xc6>
		drawSomePixelRoundRect(7, 124, 242, 48, 4, 2, ILI9341_YELLOW);
20002878:	f64f 73e0 	movw	r3, #65504	; 0xffe0
2000287c:	9302      	str	r3, [sp, #8]
2000287e:	2302      	movs	r3, #2
20002880:	9301      	str	r3, [sp, #4]
20002882:	2304      	movs	r3, #4
20002884:	9300      	str	r3, [sp, #0]
20002886:	2330      	movs	r3, #48	; 0x30
20002888:	22f2      	movs	r2, #242	; 0xf2
2000288a:	217c      	movs	r1, #124	; 0x7c
2000288c:	2007      	movs	r0, #7
2000288e:	f7fe ff22 	bl	200016d6 <drawSomePixelRoundRect>
}
20002892:	bf00      	nop
20002894:	46bd      	mov	sp, r7
20002896:	bd80      	pop	{r7, pc}
20002898:	20011af4 	.word	0x20011af4

2000289c <endOperationWindow>:

void endOperationWindow (uint8_t onOff) {
2000289c:	b580      	push	{r7, lr}
2000289e:	b086      	sub	sp, #24
200028a0:	af04      	add	r7, sp, #16
200028a2:	4603      	mov	r3, r0
200028a4:	71fb      	strb	r3, [r7, #7]
	if (onOff) {
200028a6:	79fb      	ldrb	r3, [r7, #7]
200028a8:	2b00      	cmp	r3, #0
200028aa:	d023      	beq.n	200028f4 <endOperationWindow+0x58>
		ILI9341_FillRectangle(40, 60, 180, 60, ILI9341_BLACK);
200028ac:	2300      	movs	r3, #0
200028ae:	9300      	str	r3, [sp, #0]
200028b0:	233c      	movs	r3, #60	; 0x3c
200028b2:	22b4      	movs	r2, #180	; 0xb4
200028b4:	213c      	movs	r1, #60	; 0x3c
200028b6:	2028      	movs	r0, #40	; 0x28
200028b8:	f7fe f8b4 	bl	20000a24 <ILI9341_FillRectangle>
		drawSomePixelRoundRect(38, 58, 182, 62, 3, 2, ILI9341_YELLOW);
200028bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200028c0:	9302      	str	r3, [sp, #8]
200028c2:	2302      	movs	r3, #2
200028c4:	9301      	str	r3, [sp, #4]
200028c6:	2303      	movs	r3, #3
200028c8:	9300      	str	r3, [sp, #0]
200028ca:	233e      	movs	r3, #62	; 0x3e
200028cc:	22b6      	movs	r2, #182	; 0xb6
200028ce:	213a      	movs	r1, #58	; 0x3a
200028d0:	2026      	movs	r0, #38	; 0x26
200028d2:	f7fe ff00 	bl	200016d6 <drawSomePixelRoundRect>
		strcpy(bufSpi, "COMPLETE");
200028d6:	4b10      	ldr	r3, [pc, #64]	; (20002918 <endOperationWindow+0x7c>)
200028d8:	4a10      	ldr	r2, [pc, #64]	; (2000291c <endOperationWindow+0x80>)
200028da:	ca07      	ldmia	r2, {r0, r1, r2}
200028dc:	c303      	stmia	r3!, {r0, r1}
200028de:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteMyString(48, 65, bufSpi, ILI9341_RED, ILI9341_BLACK);
200028e0:	2300      	movs	r3, #0
200028e2:	9300      	str	r3, [sp, #0]
200028e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
200028e8:	4a0b      	ldr	r2, [pc, #44]	; (20002918 <endOperationWindow+0x7c>)
200028ea:	2141      	movs	r1, #65	; 0x41
200028ec:	2030      	movs	r0, #48	; 0x30
200028ee:	f7fe fa0b 	bl	20000d08 <ILI9341_WriteMyString>
		ILI9341_FillRectangle(38, 58, 182, 62, ILI9341_BLACK);
		printTImpulse ();
		printTPause();
		checkstrokeArea();
	}
}
200028f2:	e00d      	b.n	20002910 <endOperationWindow+0x74>
		ILI9341_FillRectangle(38, 58, 182, 62, ILI9341_BLACK);
200028f4:	2300      	movs	r3, #0
200028f6:	9300      	str	r3, [sp, #0]
200028f8:	233e      	movs	r3, #62	; 0x3e
200028fa:	22b6      	movs	r2, #182	; 0xb6
200028fc:	213a      	movs	r1, #58	; 0x3a
200028fe:	2026      	movs	r0, #38	; 0x26
20002900:	f7fe f890 	bl	20000a24 <ILI9341_FillRectangle>
		printTImpulse ();
20002904:	f7ff fdba 	bl	2000247c <printTImpulse>
		printTPause();
20002908:	f7ff fdf2 	bl	200024f0 <printTPause>
		checkstrokeArea();
2000290c:	f7ff ff5e 	bl	200027cc <checkstrokeArea>
}
20002910:	bf00      	nop
20002912:	3708      	adds	r7, #8
20002914:	46bd      	mov	sp, r7
20002916:	bd80      	pop	{r7, pc}
20002918:	200119d8 	.word	0x200119d8
2000291c:	20007184 	.word	0x20007184

20002920 <powerButton>:

void powerButton(void) {
20002920:	b580      	push	{r7, lr}
20002922:	b082      	sub	sp, #8
20002924:	af02      	add	r7, sp, #8
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {
20002926:	4b1c      	ldr	r3, [pc, #112]	; (20002998 <powerButton+0x78>)
20002928:	681b      	ldr	r3, [r3, #0]
2000292a:	f003 0302 	and.w	r3, r3, #2
2000292e:	2b00      	cmp	r3, #0
20002930:	d12e      	bne.n	20002990 <powerButton+0x70>
		SET_FLAG(ONE_TOUCH, globalFlag);
20002932:	4b19      	ldr	r3, [pc, #100]	; (20002998 <powerButton+0x78>)
20002934:	681b      	ldr	r3, [r3, #0]
20002936:	f043 0302 	orr.w	r3, r3, #2
2000293a:	4a17      	ldr	r2, [pc, #92]	; (20002998 <powerButton+0x78>)
2000293c:	6013      	str	r3, [r2, #0]
		if (ParamDevice.power) {
2000293e:	4b17      	ldr	r3, [pc, #92]	; (2000299c <powerButton+0x7c>)
20002940:	7b1b      	ldrb	r3, [r3, #12]
20002942:	2b00      	cmp	r3, #0
20002944:	d010      	beq.n	20002968 <powerButton+0x48>
			ParamDevice.power = false;
20002946:	4b15      	ldr	r3, [pc, #84]	; (2000299c <powerButton+0x7c>)
20002948:	2200      	movs	r2, #0
2000294a:	731a      	strb	r2, [r3, #12]
			printColorImage(246, 182, 50, 50, PRESSED, image_powerGreen);
2000294c:	4b14      	ldr	r3, [pc, #80]	; (200029a0 <powerButton+0x80>)
2000294e:	9301      	str	r3, [sp, #4]
20002950:	2301      	movs	r3, #1
20002952:	9300      	str	r3, [sp, #0]
20002954:	2332      	movs	r3, #50	; 0x32
20002956:	2232      	movs	r2, #50	; 0x32
20002958:	21b6      	movs	r1, #182	; 0xb6
2000295a:	20f6      	movs	r0, #246	; 0xf6
2000295c:	f7ff fe48 	bl	200025f0 <printColorImage>
			endOperationWindow (0);
20002960:	2000      	movs	r0, #0
20002962:	f7ff ff9b 	bl	2000289c <endOperationWindow>
			ParamDevice.changeCount = ParamDevice.count;
			printColorImage(246, 182, 50, 50, NO_PRESSED, image_powerRed);
			endOperationWindow (1);
		}
	}
}
20002966:	e013      	b.n	20002990 <powerButton+0x70>
			ParamDevice.power = true;
20002968:	4b0c      	ldr	r3, [pc, #48]	; (2000299c <powerButton+0x7c>)
2000296a:	2201      	movs	r2, #1
2000296c:	731a      	strb	r2, [r3, #12]
			ParamDevice.changeCount = ParamDevice.count;
2000296e:	4b0b      	ldr	r3, [pc, #44]	; (2000299c <powerButton+0x7c>)
20002970:	889a      	ldrh	r2, [r3, #4]
20002972:	4b0a      	ldr	r3, [pc, #40]	; (2000299c <powerButton+0x7c>)
20002974:	80da      	strh	r2, [r3, #6]
			printColorImage(246, 182, 50, 50, NO_PRESSED, image_powerRed);
20002976:	4b0b      	ldr	r3, [pc, #44]	; (200029a4 <powerButton+0x84>)
20002978:	9301      	str	r3, [sp, #4]
2000297a:	2300      	movs	r3, #0
2000297c:	9300      	str	r3, [sp, #0]
2000297e:	2332      	movs	r3, #50	; 0x32
20002980:	2232      	movs	r2, #50	; 0x32
20002982:	21b6      	movs	r1, #182	; 0xb6
20002984:	20f6      	movs	r0, #246	; 0xf6
20002986:	f7ff fe33 	bl	200025f0 <printColorImage>
			endOperationWindow (1);
2000298a:	2001      	movs	r0, #1
2000298c:	f7ff ff86 	bl	2000289c <endOperationWindow>
}
20002990:	bf00      	nop
20002992:	46bd      	mov	sp, r7
20002994:	bd80      	pop	{r7, pc}
20002996:	bf00      	nop
20002998:	20011af4 	.word	0x20011af4
2000299c:	2001191c 	.word	0x2001191c
200029a0:	20008518 	.word	0x20008518
200029a4:	20007190 	.word	0x20007190

200029a8 <rangeMinMax>:

void rangeMinMax(uint16_t *data, uint16_t count, uint16_t plus_minus, uint16_t min, uint16_t max) {
200029a8:	b480      	push	{r7}
200029aa:	b085      	sub	sp, #20
200029ac:	af00      	add	r7, sp, #0
200029ae:	60f8      	str	r0, [r7, #12]
200029b0:	4608      	mov	r0, r1
200029b2:	4611      	mov	r1, r2
200029b4:	461a      	mov	r2, r3
200029b6:	4603      	mov	r3, r0
200029b8:	817b      	strh	r3, [r7, #10]
200029ba:	460b      	mov	r3, r1
200029bc:	813b      	strh	r3, [r7, #8]
200029be:	4613      	mov	r3, r2
200029c0:	80fb      	strh	r3, [r7, #6]
	if (plus_minus == PLUS) {
200029c2:	893b      	ldrh	r3, [r7, #8]
200029c4:	2b01      	cmp	r3, #1
200029c6:	d11b      	bne.n	20002a00 <rangeMinMax+0x58>
		if (*data + count < max) {
200029c8:	68fb      	ldr	r3, [r7, #12]
200029ca:	881b      	ldrh	r3, [r3, #0]
200029cc:	461a      	mov	r2, r3
200029ce:	897b      	ldrh	r3, [r7, #10]
200029d0:	441a      	add	r2, r3
200029d2:	8b3b      	ldrh	r3, [r7, #24]
200029d4:	429a      	cmp	r2, r3
200029d6:	da07      	bge.n	200029e8 <rangeMinMax+0x40>
			*data += count;
200029d8:	68fb      	ldr	r3, [r7, #12]
200029da:	881a      	ldrh	r2, [r3, #0]
200029dc:	897b      	ldrh	r3, [r7, #10]
200029de:	4413      	add	r3, r2
200029e0:	b29a      	uxth	r2, r3
200029e2:	68fb      	ldr	r3, [r7, #12]
200029e4:	801a      	strh	r2, [r3, #0]
		} else {
			if (*data > min)
				*data -= 1;
		}
	}
}
200029e6:	e026      	b.n	20002a36 <rangeMinMax+0x8e>
			if (*data < max)
200029e8:	68fb      	ldr	r3, [r7, #12]
200029ea:	881b      	ldrh	r3, [r3, #0]
200029ec:	8b3a      	ldrh	r2, [r7, #24]
200029ee:	429a      	cmp	r2, r3
200029f0:	d921      	bls.n	20002a36 <rangeMinMax+0x8e>
				*data += 1;
200029f2:	68fb      	ldr	r3, [r7, #12]
200029f4:	881b      	ldrh	r3, [r3, #0]
200029f6:	3301      	adds	r3, #1
200029f8:	b29a      	uxth	r2, r3
200029fa:	68fb      	ldr	r3, [r7, #12]
200029fc:	801a      	strh	r2, [r3, #0]
}
200029fe:	e01a      	b.n	20002a36 <rangeMinMax+0x8e>
		if (*data - count > min) {
20002a00:	68fb      	ldr	r3, [r7, #12]
20002a02:	881b      	ldrh	r3, [r3, #0]
20002a04:	461a      	mov	r2, r3
20002a06:	897b      	ldrh	r3, [r7, #10]
20002a08:	1ad2      	subs	r2, r2, r3
20002a0a:	88fb      	ldrh	r3, [r7, #6]
20002a0c:	429a      	cmp	r2, r3
20002a0e:	dd07      	ble.n	20002a20 <rangeMinMax+0x78>
			*data -= count;
20002a10:	68fb      	ldr	r3, [r7, #12]
20002a12:	881a      	ldrh	r2, [r3, #0]
20002a14:	897b      	ldrh	r3, [r7, #10]
20002a16:	1ad3      	subs	r3, r2, r3
20002a18:	b29a      	uxth	r2, r3
20002a1a:	68fb      	ldr	r3, [r7, #12]
20002a1c:	801a      	strh	r2, [r3, #0]
}
20002a1e:	e00a      	b.n	20002a36 <rangeMinMax+0x8e>
			if (*data > min)
20002a20:	68fb      	ldr	r3, [r7, #12]
20002a22:	881b      	ldrh	r3, [r3, #0]
20002a24:	88fa      	ldrh	r2, [r7, #6]
20002a26:	429a      	cmp	r2, r3
20002a28:	d205      	bcs.n	20002a36 <rangeMinMax+0x8e>
				*data -= 1;
20002a2a:	68fb      	ldr	r3, [r7, #12]
20002a2c:	881b      	ldrh	r3, [r3, #0]
20002a2e:	3b01      	subs	r3, #1
20002a30:	b29a      	uxth	r2, r3
20002a32:	68fb      	ldr	r3, [r7, #12]
20002a34:	801a      	strh	r2, [r3, #0]
}
20002a36:	bf00      	nop
20002a38:	3714      	adds	r7, #20
20002a3a:	46bd      	mov	sp, r7
20002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002a40:	4770      	bx	lr
	...

20002a44 <changeData>:

void changeData(uint16_t count, uint16_t plus_minus) {
20002a44:	b580      	push	{r7, lr}
20002a46:	b084      	sub	sp, #16
20002a48:	af02      	add	r7, sp, #8
20002a4a:	4603      	mov	r3, r0
20002a4c:	460a      	mov	r2, r1
20002a4e:	80fb      	strh	r3, [r7, #6]
20002a50:	4613      	mov	r3, r2
20002a52:	80bb      	strh	r3, [r7, #4]
	if (READ_FLAG(AREA1_PRESS, globalFlag)) {
20002a54:	4b27      	ldr	r3, [pc, #156]	; (20002af4 <changeData+0xb0>)
20002a56:	681b      	ldr	r3, [r3, #0]
20002a58:	f003 0308 	and.w	r3, r3, #8
20002a5c:	2b00      	cmp	r3, #0
20002a5e:	d017      	beq.n	20002a90 <changeData+0x4c>
		if (ParamDevice.unitImpuls != 2) {
20002a60:	4b25      	ldr	r3, [pc, #148]	; (20002af8 <changeData+0xb4>)
20002a62:	7a1b      	ldrb	r3, [r3, #8]
20002a64:	2b02      	cmp	r3, #2
20002a66:	d009      	beq.n	20002a7c <changeData+0x38>
			rangeMinMax(&ParamDevice.impuls, count, plus_minus, 1, 999);
20002a68:	88ba      	ldrh	r2, [r7, #4]
20002a6a:	88f9      	ldrh	r1, [r7, #6]
20002a6c:	f240 33e7 	movw	r3, #999	; 0x3e7
20002a70:	9300      	str	r3, [sp, #0]
20002a72:	2301      	movs	r3, #1
20002a74:	4820      	ldr	r0, [pc, #128]	; (20002af8 <changeData+0xb4>)
20002a76:	f7ff ff97 	bl	200029a8 <rangeMinMax>
20002a7a:	e007      	b.n	20002a8c <changeData+0x48>
		} else {
			rangeMinMax(&ParamDevice.impuls, count, plus_minus, 1, 20);
20002a7c:	88ba      	ldrh	r2, [r7, #4]
20002a7e:	88f9      	ldrh	r1, [r7, #6]
20002a80:	2314      	movs	r3, #20
20002a82:	9300      	str	r3, [sp, #0]
20002a84:	2301      	movs	r3, #1
20002a86:	481c      	ldr	r0, [pc, #112]	; (20002af8 <changeData+0xb4>)
20002a88:	f7ff ff8e 	bl	200029a8 <rangeMinMax>
		}
		printTImpulse();
20002a8c:	f7ff fcf6 	bl	2000247c <printTImpulse>
	}
	if (READ_FLAG(AREA2_PRESS, globalFlag)) {
20002a90:	4b18      	ldr	r3, [pc, #96]	; (20002af4 <changeData+0xb0>)
20002a92:	681b      	ldr	r3, [r3, #0]
20002a94:	f003 0310 	and.w	r3, r3, #16
20002a98:	2b00      	cmp	r3, #0
20002a9a:	d017      	beq.n	20002acc <changeData+0x88>
		if (ParamDevice.unitPause != 2){
20002a9c:	4b16      	ldr	r3, [pc, #88]	; (20002af8 <changeData+0xb4>)
20002a9e:	7a5b      	ldrb	r3, [r3, #9]
20002aa0:	2b02      	cmp	r3, #2
20002aa2:	d009      	beq.n	20002ab8 <changeData+0x74>
			rangeMinMax(&ParamDevice.pause, count, plus_minus, 1, 999);
20002aa4:	88ba      	ldrh	r2, [r7, #4]
20002aa6:	88f9      	ldrh	r1, [r7, #6]
20002aa8:	f240 33e7 	movw	r3, #999	; 0x3e7
20002aac:	9300      	str	r3, [sp, #0]
20002aae:	2301      	movs	r3, #1
20002ab0:	4812      	ldr	r0, [pc, #72]	; (20002afc <changeData+0xb8>)
20002ab2:	f7ff ff79 	bl	200029a8 <rangeMinMax>
20002ab6:	e007      	b.n	20002ac8 <changeData+0x84>
		} else {
			rangeMinMax(&ParamDevice.pause, count, plus_minus, 1, 20);
20002ab8:	88ba      	ldrh	r2, [r7, #4]
20002aba:	88f9      	ldrh	r1, [r7, #6]
20002abc:	2314      	movs	r3, #20
20002abe:	9300      	str	r3, [sp, #0]
20002ac0:	2301      	movs	r3, #1
20002ac2:	480e      	ldr	r0, [pc, #56]	; (20002afc <changeData+0xb8>)
20002ac4:	f7ff ff70 	bl	200029a8 <rangeMinMax>
		}
		printTPause();
20002ac8:	f7ff fd12 	bl	200024f0 <printTPause>
	}
	if (READ_FLAG(AREA3_PRESS, globalFlag)) {
20002acc:	4b09      	ldr	r3, [pc, #36]	; (20002af4 <changeData+0xb0>)
20002ace:	681b      	ldr	r3, [r3, #0]
20002ad0:	f003 0320 	and.w	r3, r3, #32
20002ad4:	2b00      	cmp	r3, #0
20002ad6:	d009      	beq.n	20002aec <changeData+0xa8>
		rangeMinMax(&ParamDevice.count, count, plus_minus, 0, 255);
20002ad8:	88ba      	ldrh	r2, [r7, #4]
20002ada:	88f9      	ldrh	r1, [r7, #6]
20002adc:	23ff      	movs	r3, #255	; 0xff
20002ade:	9300      	str	r3, [sp, #0]
20002ae0:	2300      	movs	r3, #0
20002ae2:	4807      	ldr	r0, [pc, #28]	; (20002b00 <changeData+0xbc>)
20002ae4:	f7ff ff60 	bl	200029a8 <rangeMinMax>
		printCount();
20002ae8:	f7ff fd38 	bl	2000255c <printCount>
	}
}
20002aec:	bf00      	nop
20002aee:	3708      	adds	r7, #8
20002af0:	46bd      	mov	sp, r7
20002af2:	bd80      	pop	{r7, pc}
20002af4:	20011af4 	.word	0x20011af4
20002af8:	2001191c 	.word	0x2001191c
20002afc:	2001191e 	.word	0x2001191e
20002b00:	20011920 	.word	0x20011920

20002b04 <speedControl>:

void speedControl(void) {
20002b04:	b480      	push	{r7}
20002b06:	af00      	add	r7, sp, #0
	if (timHoldButtonPress < SPPED4 && timHoldButtonPress > SPPED3) {
20002b08:	4b1b      	ldr	r3, [pc, #108]	; (20002b78 <speedControl+0x74>)
20002b0a:	681b      	ldr	r3, [r3, #0]
20002b0c:	f241 3287 	movw	r2, #4999	; 0x1387
20002b10:	4293      	cmp	r3, r2
20002b12:	d807      	bhi.n	20002b24 <speedControl+0x20>
20002b14:	4b18      	ldr	r3, [pc, #96]	; (20002b78 <speedControl+0x74>)
20002b16:	681b      	ldr	r3, [r3, #0]
20002b18:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
20002b1c:	d902      	bls.n	20002b24 <speedControl+0x20>
		countSpeed = 2;
20002b1e:	4b17      	ldr	r3, [pc, #92]	; (20002b7c <speedControl+0x78>)
20002b20:	2202      	movs	r2, #2
20002b22:	801a      	strh	r2, [r3, #0]
	}
	if (timHoldButtonPress < SPPED3 && timHoldButtonPress > SPPED2) {
20002b24:	4b14      	ldr	r3, [pc, #80]	; (20002b78 <speedControl+0x74>)
20002b26:	681b      	ldr	r3, [r3, #0]
20002b28:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
20002b2c:	d208      	bcs.n	20002b40 <speedControl+0x3c>
20002b2e:	4b12      	ldr	r3, [pc, #72]	; (20002b78 <speedControl+0x74>)
20002b30:	681b      	ldr	r3, [r3, #0]
20002b32:	f640 32b8 	movw	r2, #3000	; 0xbb8
20002b36:	4293      	cmp	r3, r2
20002b38:	d902      	bls.n	20002b40 <speedControl+0x3c>
		countSpeed = 5;
20002b3a:	4b10      	ldr	r3, [pc, #64]	; (20002b7c <speedControl+0x78>)
20002b3c:	2205      	movs	r2, #5
20002b3e:	801a      	strh	r2, [r3, #0]
	}
	if (timHoldButtonPress < SPPED2 && timHoldButtonPress > SPPED1) {
20002b40:	4b0d      	ldr	r3, [pc, #52]	; (20002b78 <speedControl+0x74>)
20002b42:	681b      	ldr	r3, [r3, #0]
20002b44:	f640 32b7 	movw	r2, #2999	; 0xbb7
20002b48:	4293      	cmp	r3, r2
20002b4a:	d807      	bhi.n	20002b5c <speedControl+0x58>
20002b4c:	4b0a      	ldr	r3, [pc, #40]	; (20002b78 <speedControl+0x74>)
20002b4e:	681b      	ldr	r3, [r3, #0]
20002b50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
20002b54:	d902      	bls.n	20002b5c <speedControl+0x58>
		countSpeed = 10;
20002b56:	4b09      	ldr	r3, [pc, #36]	; (20002b7c <speedControl+0x78>)
20002b58:	220a      	movs	r2, #10
20002b5a:	801a      	strh	r2, [r3, #0]
	}
	if (timHoldButtonPress < SPPED1) {
20002b5c:	4b06      	ldr	r3, [pc, #24]	; (20002b78 <speedControl+0x74>)
20002b5e:	681b      	ldr	r3, [r3, #0]
20002b60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
20002b64:	d202      	bcs.n	20002b6c <speedControl+0x68>
		countSpeed = 25;
20002b66:	4b05      	ldr	r3, [pc, #20]	; (20002b7c <speedControl+0x78>)
20002b68:	2219      	movs	r2, #25
20002b6a:	801a      	strh	r2, [r3, #0]
	}
}
20002b6c:	bf00      	nop
20002b6e:	46bd      	mov	sp, r7
20002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
20002b74:	4770      	bx	lr
20002b76:	bf00      	nop
20002b78:	200119f8 	.word	0x200119f8
20002b7c:	20011910 	.word	0x20011910

20002b80 <changeParamPlusMinus>:

void changeParamPlusMinus(uint16_t plus_minus) {
20002b80:	b580      	push	{r7, lr}
20002b82:	b082      	sub	sp, #8
20002b84:	af00      	add	r7, sp, #0
20002b86:	4603      	mov	r3, r0
20002b88:	80fb      	strh	r3, [r7, #6]
	if (!READ_FLAG(TOUCH_DISPLAY, globalFlag)) {
20002b8a:	4b21      	ldr	r3, [pc, #132]	; (20002c10 <changeParamPlusMinus+0x90>)
20002b8c:	681b      	ldr	r3, [r3, #0]
20002b8e:	f003 0301 	and.w	r3, r3, #1
20002b92:	2b00      	cmp	r3, #0
20002b94:	d109      	bne.n	20002baa <changeParamPlusMinus+0x2a>
		SET_FLAG(TOUCH_DISPLAY, globalFlag);
20002b96:	4b1e      	ldr	r3, [pc, #120]	; (20002c10 <changeParamPlusMinus+0x90>)
20002b98:	681b      	ldr	r3, [r3, #0]
20002b9a:	f043 0301 	orr.w	r3, r3, #1
20002b9e:	4a1c      	ldr	r2, [pc, #112]	; (20002c10 <changeParamPlusMinus+0x90>)
20002ba0:	6013      	str	r3, [r2, #0]
		timHoldButtonPress = SPPED5;
20002ba2:	4b1c      	ldr	r3, [pc, #112]	; (20002c14 <changeParamPlusMinus+0x94>)
20002ba4:	f241 527c 	movw	r2, #5500	; 0x157c
20002ba8:	601a      	str	r2, [r3, #0]
	}
	if (!READ_FLAG(ONE_TOUCH, globalFlag) ) {
20002baa:	4b19      	ldr	r3, [pc, #100]	; (20002c10 <changeParamPlusMinus+0x90>)
20002bac:	681b      	ldr	r3, [r3, #0]
20002bae:	f003 0302 	and.w	r3, r3, #2
20002bb2:	2b00      	cmp	r3, #0
20002bb4:	d105      	bne.n	20002bc2 <changeParamPlusMinus+0x42>
		changeData(1, plus_minus);
20002bb6:	88fb      	ldrh	r3, [r7, #6]
20002bb8:	4619      	mov	r1, r3
20002bba:	2001      	movs	r0, #1
20002bbc:	f7ff ff42 	bl	20002a44 <changeData>
20002bc0:	e013      	b.n	20002bea <changeParamPlusMinus+0x6a>
	} else {
		if (countSpeed >= 2) {
20002bc2:	4b15      	ldr	r3, [pc, #84]	; (20002c18 <changeParamPlusMinus+0x98>)
20002bc4:	881b      	ldrh	r3, [r3, #0]
20002bc6:	2b01      	cmp	r3, #1
20002bc8:	d90f      	bls.n	20002bea <changeParamPlusMinus+0x6a>
			changeData(countSpeed, plus_minus);
20002bca:	4b13      	ldr	r3, [pc, #76]	; (20002c18 <changeParamPlusMinus+0x98>)
20002bcc:	881b      	ldrh	r3, [r3, #0]
20002bce:	88fa      	ldrh	r2, [r7, #6]
20002bd0:	4611      	mov	r1, r2
20002bd2:	4618      	mov	r0, r3
20002bd4:	f7ff ff36 	bl	20002a44 <changeData>
			buzzerSet(100 - countSpeed);
20002bd8:	4b0f      	ldr	r3, [pc, #60]	; (20002c18 <changeParamPlusMinus+0x98>)
20002bda:	881b      	ldrh	r3, [r3, #0]
20002bdc:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
20002be0:	b29b      	uxth	r3, r3
20002be2:	b21b      	sxth	r3, r3
20002be4:	4618      	mov	r0, r3
20002be6:	f000 fd09 	bl	200035fc <buzzerSet>
		}
	}
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {
20002bea:	4b09      	ldr	r3, [pc, #36]	; (20002c10 <changeParamPlusMinus+0x90>)
20002bec:	681b      	ldr	r3, [r3, #0]
20002bee:	f003 0302 	and.w	r3, r3, #2
20002bf2:	2b00      	cmp	r3, #0
20002bf4:	d105      	bne.n	20002c02 <changeParamPlusMinus+0x82>
		SET_FLAG(ONE_TOUCH, globalFlag);
20002bf6:	4b06      	ldr	r3, [pc, #24]	; (20002c10 <changeParamPlusMinus+0x90>)
20002bf8:	681b      	ldr	r3, [r3, #0]
20002bfa:	f043 0302 	orr.w	r3, r3, #2
20002bfe:	4a04      	ldr	r2, [pc, #16]	; (20002c10 <changeParamPlusMinus+0x90>)
20002c00:	6013      	str	r3, [r2, #0]
	}
	speedControl();
20002c02:	f7ff ff7f 	bl	20002b04 <speedControl>
}
20002c06:	bf00      	nop
20002c08:	3708      	adds	r7, #8
20002c0a:	46bd      	mov	sp, r7
20002c0c:	bd80      	pop	{r7, pc}
20002c0e:	bf00      	nop
20002c10:	20011af4 	.word	0x20011af4
20002c14:	200119f8 	.word	0x200119f8
20002c18:	20011910 	.word	0x20011910

20002c1c <togleUnits>:

void togleUnits(void) {
20002c1c:	b580      	push	{r7, lr}
20002c1e:	af00      	add	r7, sp, #0
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {
20002c20:	4b29      	ldr	r3, [pc, #164]	; (20002cc8 <togleUnits+0xac>)
20002c22:	681b      	ldr	r3, [r3, #0]
20002c24:	f003 0302 	and.w	r3, r3, #2
20002c28:	2b00      	cmp	r3, #0
20002c2a:	d14b      	bne.n	20002cc4 <togleUnits+0xa8>
		SET_FLAG(ONE_TOUCH, globalFlag);
20002c2c:	4b26      	ldr	r3, [pc, #152]	; (20002cc8 <togleUnits+0xac>)
20002c2e:	681b      	ldr	r3, [r3, #0]
20002c30:	f043 0302 	orr.w	r3, r3, #2
20002c34:	4a24      	ldr	r2, [pc, #144]	; (20002cc8 <togleUnits+0xac>)
20002c36:	6013      	str	r3, [r2, #0]

		if (READ_FLAG(AREA1_PRESS, globalFlag)) {
20002c38:	4b23      	ldr	r3, [pc, #140]	; (20002cc8 <togleUnits+0xac>)
20002c3a:	681b      	ldr	r3, [r3, #0]
20002c3c:	f003 0308 	and.w	r3, r3, #8
20002c40:	2b00      	cmp	r3, #0
20002c42:	d01c      	beq.n	20002c7e <togleUnits+0x62>
			if (ParamDevice.unitImpuls < 2)ParamDevice.unitImpuls++;
20002c44:	4b21      	ldr	r3, [pc, #132]	; (20002ccc <togleUnits+0xb0>)
20002c46:	7a1b      	ldrb	r3, [r3, #8]
20002c48:	2b01      	cmp	r3, #1
20002c4a:	d806      	bhi.n	20002c5a <togleUnits+0x3e>
20002c4c:	4b1f      	ldr	r3, [pc, #124]	; (20002ccc <togleUnits+0xb0>)
20002c4e:	7a1b      	ldrb	r3, [r3, #8]
20002c50:	3301      	adds	r3, #1
20002c52:	b2da      	uxtb	r2, r3
20002c54:	4b1d      	ldr	r3, [pc, #116]	; (20002ccc <togleUnits+0xb0>)
20002c56:	721a      	strb	r2, [r3, #8]
20002c58:	e002      	b.n	20002c60 <togleUnits+0x44>
			else ParamDevice.unitImpuls = 0;
20002c5a:	4b1c      	ldr	r3, [pc, #112]	; (20002ccc <togleUnits+0xb0>)
20002c5c:	2200      	movs	r2, #0
20002c5e:	721a      	strb	r2, [r3, #8]
			printTImpulse();
20002c60:	f7ff fc0c 	bl	2000247c <printTImpulse>
			if (ParamDevice.unitImpuls == 2 && ParamDevice.impuls > 20) {
20002c64:	4b19      	ldr	r3, [pc, #100]	; (20002ccc <togleUnits+0xb0>)
20002c66:	7a1b      	ldrb	r3, [r3, #8]
20002c68:	2b02      	cmp	r3, #2
20002c6a:	d108      	bne.n	20002c7e <togleUnits+0x62>
20002c6c:	4b17      	ldr	r3, [pc, #92]	; (20002ccc <togleUnits+0xb0>)
20002c6e:	881b      	ldrh	r3, [r3, #0]
20002c70:	2b14      	cmp	r3, #20
20002c72:	d904      	bls.n	20002c7e <togleUnits+0x62>
				ParamDevice.impuls = 20;
20002c74:	4b15      	ldr	r3, [pc, #84]	; (20002ccc <togleUnits+0xb0>)
20002c76:	2214      	movs	r2, #20
20002c78:	801a      	strh	r2, [r3, #0]
				printTImpulse();
20002c7a:	f7ff fbff 	bl	2000247c <printTImpulse>
			}
		}
		if (READ_FLAG(AREA2_PRESS, globalFlag)) {
20002c7e:	4b12      	ldr	r3, [pc, #72]	; (20002cc8 <togleUnits+0xac>)
20002c80:	681b      	ldr	r3, [r3, #0]
20002c82:	f003 0310 	and.w	r3, r3, #16
20002c86:	2b00      	cmp	r3, #0
20002c88:	d01c      	beq.n	20002cc4 <togleUnits+0xa8>
			if (ParamDevice.unitPause < 2)ParamDevice.unitPause++;
20002c8a:	4b10      	ldr	r3, [pc, #64]	; (20002ccc <togleUnits+0xb0>)
20002c8c:	7a5b      	ldrb	r3, [r3, #9]
20002c8e:	2b01      	cmp	r3, #1
20002c90:	d806      	bhi.n	20002ca0 <togleUnits+0x84>
20002c92:	4b0e      	ldr	r3, [pc, #56]	; (20002ccc <togleUnits+0xb0>)
20002c94:	7a5b      	ldrb	r3, [r3, #9]
20002c96:	3301      	adds	r3, #1
20002c98:	b2da      	uxtb	r2, r3
20002c9a:	4b0c      	ldr	r3, [pc, #48]	; (20002ccc <togleUnits+0xb0>)
20002c9c:	725a      	strb	r2, [r3, #9]
20002c9e:	e002      	b.n	20002ca6 <togleUnits+0x8a>
			else ParamDevice.unitPause = 0;
20002ca0:	4b0a      	ldr	r3, [pc, #40]	; (20002ccc <togleUnits+0xb0>)
20002ca2:	2200      	movs	r2, #0
20002ca4:	725a      	strb	r2, [r3, #9]
			if (ParamDevice.unitPause == 2 && ParamDevice.pause > 20) {
20002ca6:	4b09      	ldr	r3, [pc, #36]	; (20002ccc <togleUnits+0xb0>)
20002ca8:	7a5b      	ldrb	r3, [r3, #9]
20002caa:	2b02      	cmp	r3, #2
20002cac:	d108      	bne.n	20002cc0 <togleUnits+0xa4>
20002cae:	4b07      	ldr	r3, [pc, #28]	; (20002ccc <togleUnits+0xb0>)
20002cb0:	885b      	ldrh	r3, [r3, #2]
20002cb2:	2b14      	cmp	r3, #20
20002cb4:	d904      	bls.n	20002cc0 <togleUnits+0xa4>
				ParamDevice.pause = 20;
20002cb6:	4b05      	ldr	r3, [pc, #20]	; (20002ccc <togleUnits+0xb0>)
20002cb8:	2214      	movs	r2, #20
20002cba:	805a      	strh	r2, [r3, #2]
				printTPause();
20002cbc:	f7ff fc18 	bl	200024f0 <printTPause>
			}
			printTPause();
20002cc0:	f7ff fc16 	bl	200024f0 <printTPause>
		}
	}
}
20002cc4:	bf00      	nop
20002cc6:	bd80      	pop	{r7, pc}
20002cc8:	20011af4 	.word	0x20011af4
20002ccc:	2001191c 	.word	0x2001191c

20002cd0 <NPN_PNPButton>:

void NPN_PNPButton(uint8_t type, uint8_t status) {
20002cd0:	b580      	push	{r7, lr}
20002cd2:	b086      	sub	sp, #24
20002cd4:	af04      	add	r7, sp, #16
20002cd6:	4603      	mov	r3, r0
20002cd8:	460a      	mov	r2, r1
20002cda:	71fb      	strb	r3, [r7, #7]
20002cdc:	4613      	mov	r3, r2
20002cde:	71bb      	strb	r3, [r7, #6]
	if (type) {
20002ce0:	79fb      	ldrb	r3, [r7, #7]
20002ce2:	2b00      	cmp	r3, #0
20002ce4:	d045      	beq.n	20002d72 <NPN_PNPButton+0xa2>
		if (status) {
20002ce6:	79bb      	ldrb	r3, [r7, #6]
20002ce8:	2b00      	cmp	r3, #0
20002cea:	d021      	beq.n	20002d30 <NPN_PNPButton+0x60>
			ParamDevice.NPNTranzistor = true;
20002cec:	4b46      	ldr	r3, [pc, #280]	; (20002e08 <NPN_PNPButton+0x138>)
20002cee:	2201      	movs	r2, #1
20002cf0:	729a      	strb	r2, [r3, #10]
			strcpy(bufSpi, "NPN");
20002cf2:	4b46      	ldr	r3, [pc, #280]	; (20002e0c <NPN_PNPButton+0x13c>)
20002cf4:	4a46      	ldr	r2, [pc, #280]	; (20002e10 <NPN_PNPButton+0x140>)
20002cf6:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 102, 50, 26, 3, ILI9341_YELLOW);
20002cf8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002cfc:	9301      	str	r3, [sp, #4]
20002cfe:	2303      	movs	r3, #3
20002d00:	9300      	str	r3, [sp, #0]
20002d02:	231a      	movs	r3, #26
20002d04:	2232      	movs	r2, #50	; 0x32
20002d06:	2166      	movs	r1, #102	; 0x66
20002d08:	f44f 7082 	mov.w	r0, #260	; 0x104
20002d0c:	f7fe fd6e 	bl	200017ec <fillRoundRect>
			ILI9341_WriteString(270, 106, bufSpi, Font_11x18, ILI9341_BLACK, ILI9341_YELLOW);
20002d10:	4b40      	ldr	r3, [pc, #256]	; (20002e14 <NPN_PNPButton+0x144>)
20002d12:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20002d16:	9202      	str	r2, [sp, #8]
20002d18:	2200      	movs	r2, #0
20002d1a:	9201      	str	r2, [sp, #4]
20002d1c:	685a      	ldr	r2, [r3, #4]
20002d1e:	9200      	str	r2, [sp, #0]
20002d20:	681b      	ldr	r3, [r3, #0]
20002d22:	4a3a      	ldr	r2, [pc, #232]	; (20002e0c <NPN_PNPButton+0x13c>)
20002d24:	216a      	movs	r1, #106	; 0x6a
20002d26:	f44f 7087 	mov.w	r0, #270	; 0x10e
20002d2a:	f7fe f8c4 	bl	20000eb6 <ILI9341_WriteString>
20002d2e:	e065      	b.n	20002dfc <NPN_PNPButton+0x12c>
		} else {
			ParamDevice.NPNTranzistor = false;
20002d30:	4b35      	ldr	r3, [pc, #212]	; (20002e08 <NPN_PNPButton+0x138>)
20002d32:	2200      	movs	r2, #0
20002d34:	729a      	strb	r2, [r3, #10]
			strcpy(bufSpi, "NPN");
20002d36:	4b35      	ldr	r3, [pc, #212]	; (20002e0c <NPN_PNPButton+0x13c>)
20002d38:	4a35      	ldr	r2, [pc, #212]	; (20002e10 <NPN_PNPButton+0x140>)
20002d3a:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 102, 50, 26, 3, ILI9341_BLUE);
20002d3c:	231f      	movs	r3, #31
20002d3e:	9301      	str	r3, [sp, #4]
20002d40:	2303      	movs	r3, #3
20002d42:	9300      	str	r3, [sp, #0]
20002d44:	231a      	movs	r3, #26
20002d46:	2232      	movs	r2, #50	; 0x32
20002d48:	2166      	movs	r1, #102	; 0x66
20002d4a:	f44f 7082 	mov.w	r0, #260	; 0x104
20002d4e:	f7fe fd4d 	bl	200017ec <fillRoundRect>
			ILI9341_WriteString(270, 106, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
20002d52:	4b30      	ldr	r3, [pc, #192]	; (20002e14 <NPN_PNPButton+0x144>)
20002d54:	221f      	movs	r2, #31
20002d56:	9202      	str	r2, [sp, #8]
20002d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
20002d5c:	9201      	str	r2, [sp, #4]
20002d5e:	685a      	ldr	r2, [r3, #4]
20002d60:	9200      	str	r2, [sp, #0]
20002d62:	681b      	ldr	r3, [r3, #0]
20002d64:	4a29      	ldr	r2, [pc, #164]	; (20002e0c <NPN_PNPButton+0x13c>)
20002d66:	216a      	movs	r1, #106	; 0x6a
20002d68:	f44f 7087 	mov.w	r0, #270	; 0x10e
20002d6c:	f7fe f8a3 	bl	20000eb6 <ILI9341_WriteString>
20002d70:	e044      	b.n	20002dfc <NPN_PNPButton+0x12c>
		}

	} else {
		if (status) {
20002d72:	79bb      	ldrb	r3, [r7, #6]
20002d74:	2b00      	cmp	r3, #0
20002d76:	d021      	beq.n	20002dbc <NPN_PNPButton+0xec>
			ParamDevice.PNPTranzistor = true;
20002d78:	4b23      	ldr	r3, [pc, #140]	; (20002e08 <NPN_PNPButton+0x138>)
20002d7a:	2201      	movs	r2, #1
20002d7c:	72da      	strb	r2, [r3, #11]
			strcpy(bufSpi, "PNP");
20002d7e:	4b23      	ldr	r3, [pc, #140]	; (20002e0c <NPN_PNPButton+0x13c>)
20002d80:	4a25      	ldr	r2, [pc, #148]	; (20002e18 <NPN_PNPButton+0x148>)
20002d82:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 140, 50, 26, 3, ILI9341_YELLOW);
20002d84:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20002d88:	9301      	str	r3, [sp, #4]
20002d8a:	2303      	movs	r3, #3
20002d8c:	9300      	str	r3, [sp, #0]
20002d8e:	231a      	movs	r3, #26
20002d90:	2232      	movs	r2, #50	; 0x32
20002d92:	218c      	movs	r1, #140	; 0x8c
20002d94:	f44f 7082 	mov.w	r0, #260	; 0x104
20002d98:	f7fe fd28 	bl	200017ec <fillRoundRect>
			ILI9341_WriteString(270, 144, bufSpi, Font_11x18, ILI9341_BLACK, ILI9341_YELLOW);
20002d9c:	4b1d      	ldr	r3, [pc, #116]	; (20002e14 <NPN_PNPButton+0x144>)
20002d9e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20002da2:	9202      	str	r2, [sp, #8]
20002da4:	2200      	movs	r2, #0
20002da6:	9201      	str	r2, [sp, #4]
20002da8:	685a      	ldr	r2, [r3, #4]
20002daa:	9200      	str	r2, [sp, #0]
20002dac:	681b      	ldr	r3, [r3, #0]
20002dae:	4a17      	ldr	r2, [pc, #92]	; (20002e0c <NPN_PNPButton+0x13c>)
20002db0:	2190      	movs	r1, #144	; 0x90
20002db2:	f44f 7087 	mov.w	r0, #270	; 0x10e
20002db6:	f7fe f87e 	bl	20000eb6 <ILI9341_WriteString>
20002dba:	e01f      	b.n	20002dfc <NPN_PNPButton+0x12c>
		} else {
			ParamDevice.PNPTranzistor = false;
20002dbc:	4b12      	ldr	r3, [pc, #72]	; (20002e08 <NPN_PNPButton+0x138>)
20002dbe:	2200      	movs	r2, #0
20002dc0:	72da      	strb	r2, [r3, #11]
			strcpy(bufSpi, "PNP");
20002dc2:	4b12      	ldr	r3, [pc, #72]	; (20002e0c <NPN_PNPButton+0x13c>)
20002dc4:	4a14      	ldr	r2, [pc, #80]	; (20002e18 <NPN_PNPButton+0x148>)
20002dc6:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 140, 50, 26, 3, ILI9341_BLUE);
20002dc8:	231f      	movs	r3, #31
20002dca:	9301      	str	r3, [sp, #4]
20002dcc:	2303      	movs	r3, #3
20002dce:	9300      	str	r3, [sp, #0]
20002dd0:	231a      	movs	r3, #26
20002dd2:	2232      	movs	r2, #50	; 0x32
20002dd4:	218c      	movs	r1, #140	; 0x8c
20002dd6:	f44f 7082 	mov.w	r0, #260	; 0x104
20002dda:	f7fe fd07 	bl	200017ec <fillRoundRect>
			ILI9341_WriteString(270, 144, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
20002dde:	4b0d      	ldr	r3, [pc, #52]	; (20002e14 <NPN_PNPButton+0x144>)
20002de0:	221f      	movs	r2, #31
20002de2:	9202      	str	r2, [sp, #8]
20002de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
20002de8:	9201      	str	r2, [sp, #4]
20002dea:	685a      	ldr	r2, [r3, #4]
20002dec:	9200      	str	r2, [sp, #0]
20002dee:	681b      	ldr	r3, [r3, #0]
20002df0:	4a06      	ldr	r2, [pc, #24]	; (20002e0c <NPN_PNPButton+0x13c>)
20002df2:	2190      	movs	r1, #144	; 0x90
20002df4:	f44f 7087 	mov.w	r0, #270	; 0x10e
20002df8:	f7fe f85d 	bl	20000eb6 <ILI9341_WriteString>
		}
	}
	printTypeOutput();
20002dfc:	f7ff fab4 	bl	20002368 <printTypeOutput>
}
20002e00:	bf00      	nop
20002e02:	3708      	adds	r7, #8
20002e04:	46bd      	mov	sp, r7
20002e06:	bd80      	pop	{r7, pc}
20002e08:	2001191c 	.word	0x2001191c
20002e0c:	200119d8 	.word	0x200119d8
20002e10:	004e504e 	.word	0x004e504e
20002e14:	200118fc 	.word	0x200118fc
20002e18:	00504e50 	.word	0x00504e50

20002e1c <setParamNPN_PNP>:

void setParamNPN_PNP (uint8_t type) {
20002e1c:	b580      	push	{r7, lr}
20002e1e:	b082      	sub	sp, #8
20002e20:	af00      	add	r7, sp, #0
20002e22:	4603      	mov	r3, r0
20002e24:	71fb      	strb	r3, [r7, #7]
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {
20002e26:	4b18      	ldr	r3, [pc, #96]	; (20002e88 <setParamNPN_PNP+0x6c>)
20002e28:	681b      	ldr	r3, [r3, #0]
20002e2a:	f003 0302 	and.w	r3, r3, #2
20002e2e:	2b00      	cmp	r3, #0
20002e30:	d125      	bne.n	20002e7e <setParamNPN_PNP+0x62>
		SET_FLAG(ONE_TOUCH, globalFlag);
20002e32:	4b15      	ldr	r3, [pc, #84]	; (20002e88 <setParamNPN_PNP+0x6c>)
20002e34:	681b      	ldr	r3, [r3, #0]
20002e36:	f043 0302 	orr.w	r3, r3, #2
20002e3a:	4a13      	ldr	r2, [pc, #76]	; (20002e88 <setParamNPN_PNP+0x6c>)
20002e3c:	6013      	str	r3, [r2, #0]
		if (type == NPN){
20002e3e:	79fb      	ldrb	r3, [r7, #7]
20002e40:	2b01      	cmp	r3, #1
20002e42:	d10c      	bne.n	20002e5e <setParamNPN_PNP+0x42>
			if (ParamDevice.NPNTranzistor) {
20002e44:	4b11      	ldr	r3, [pc, #68]	; (20002e8c <setParamNPN_PNP+0x70>)
20002e46:	7a9b      	ldrb	r3, [r3, #10]
20002e48:	2b00      	cmp	r3, #0
20002e4a:	d004      	beq.n	20002e56 <setParamNPN_PNP+0x3a>
				NPN_PNPButton(NPN, NO_PRESSED);
20002e4c:	2100      	movs	r1, #0
20002e4e:	2001      	movs	r0, #1
20002e50:	f7ff ff3e 	bl	20002cd0 <NPN_PNPButton>
20002e54:	e003      	b.n	20002e5e <setParamNPN_PNP+0x42>
			} else {
				NPN_PNPButton(NPN, PRESSED);
20002e56:	2101      	movs	r1, #1
20002e58:	2001      	movs	r0, #1
20002e5a:	f7ff ff39 	bl	20002cd0 <NPN_PNPButton>
			}
		}
		if (type == PNP) {
20002e5e:	79fb      	ldrb	r3, [r7, #7]
20002e60:	2b00      	cmp	r3, #0
20002e62:	d10c      	bne.n	20002e7e <setParamNPN_PNP+0x62>
			if (ParamDevice.PNPTranzistor) {
20002e64:	4b09      	ldr	r3, [pc, #36]	; (20002e8c <setParamNPN_PNP+0x70>)
20002e66:	7adb      	ldrb	r3, [r3, #11]
20002e68:	2b00      	cmp	r3, #0
20002e6a:	d004      	beq.n	20002e76 <setParamNPN_PNP+0x5a>
				NPN_PNPButton(PNP, NO_PRESSED);
20002e6c:	2100      	movs	r1, #0
20002e6e:	2000      	movs	r0, #0
20002e70:	f7ff ff2e 	bl	20002cd0 <NPN_PNPButton>
			} else {
				NPN_PNPButton(PNP, PRESSED);
			}
		}
	}
}
20002e74:	e003      	b.n	20002e7e <setParamNPN_PNP+0x62>
				NPN_PNPButton(PNP, PRESSED);
20002e76:	2101      	movs	r1, #1
20002e78:	2000      	movs	r0, #0
20002e7a:	f7ff ff29 	bl	20002cd0 <NPN_PNPButton>
}
20002e7e:	bf00      	nop
20002e80:	3708      	adds	r7, #8
20002e82:	46bd      	mov	sp, r7
20002e84:	bd80      	pop	{r7, pc}
20002e86:	bf00      	nop
20002e88:	20011af4 	.word	0x20011af4
20002e8c:	2001191c 	.word	0x2001191c

20002e90 <checkButtonPress>:

void checkButtonPress(void) {
20002e90:	b580      	push	{r7, lr}
20002e92:	b082      	sub	sp, #8
20002e94:	af02      	add	r7, sp, #8
	if (!READ_BIT(GPIOB->IDR, GPIO_IDR_ID12)) {
20002e96:	4b89      	ldr	r3, [pc, #548]	; (200030bc <checkButtonPress+0x22c>)
20002e98:	691b      	ldr	r3, [r3, #16]
20002e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
20002e9e:	2b00      	cmp	r3, #0
20002ea0:	f040 8100 	bne.w	200030a4 <checkButtonPress+0x214>
		if (ILI9341_TouchGetCoordinates(&x, &y)) {
20002ea4:	4986      	ldr	r1, [pc, #536]	; (200030c0 <checkButtonPress+0x230>)
20002ea6:	4887      	ldr	r0, [pc, #540]	; (200030c4 <checkButtonPress+0x234>)
20002ea8:	f7fe fe50 	bl	20001b4c <ILI9341_TouchGetCoordinates>
20002eac:	4603      	mov	r3, r0
20002eae:	2b00      	cmp	r3, #0
20002eb0:	f000 80f0 	beq.w	20003094 <checkButtonPress+0x204>

			if (!READ_FLAG(ONE_BUZZER, globalFlag)) {
20002eb4:	4b84      	ldr	r3, [pc, #528]	; (200030c8 <checkButtonPress+0x238>)
20002eb6:	681b      	ldr	r3, [r3, #0]
20002eb8:	f003 0304 	and.w	r3, r3, #4
20002ebc:	2b00      	cmp	r3, #0
20002ebe:	d108      	bne.n	20002ed2 <checkButtonPress+0x42>
				SET_FLAG(ONE_BUZZER, globalFlag);
20002ec0:	4b81      	ldr	r3, [pc, #516]	; (200030c8 <checkButtonPress+0x238>)
20002ec2:	681b      	ldr	r3, [r3, #0]
20002ec4:	f043 0304 	orr.w	r3, r3, #4
20002ec8:	4a7f      	ldr	r2, [pc, #508]	; (200030c8 <checkButtonPress+0x238>)
20002eca:	6013      	str	r3, [r2, #0]
				buzzerSet(100);
20002ecc:	2064      	movs	r0, #100	; 0x64
20002ece:	f000 fb95 	bl	200035fc <buzzerSet>
			}

			if (checkAreaTouch(x, y, 15, 30, 235, 35)) {
20002ed2:	4b7c      	ldr	r3, [pc, #496]	; (200030c4 <checkButtonPress+0x234>)
20002ed4:	8818      	ldrh	r0, [r3, #0]
20002ed6:	4b7a      	ldr	r3, [pc, #488]	; (200030c0 <checkButtonPress+0x230>)
20002ed8:	8819      	ldrh	r1, [r3, #0]
20002eda:	2323      	movs	r3, #35	; 0x23
20002edc:	9301      	str	r3, [sp, #4]
20002ede:	23eb      	movs	r3, #235	; 0xeb
20002ee0:	9300      	str	r3, [sp, #0]
20002ee2:	231e      	movs	r3, #30
20002ee4:	220f      	movs	r2, #15
20002ee6:	f7ff fc45 	bl	20002774 <checkAreaTouch>
20002eea:	4603      	mov	r3, r0
20002eec:	2b00      	cmp	r3, #0
20002eee:	d00d      	beq.n	20002f0c <checkButtonPress+0x7c>
				RESET_FLAG(AREA2_PRESS|AREA3_PRESS, globalFlag);
20002ef0:	4b75      	ldr	r3, [pc, #468]	; (200030c8 <checkButtonPress+0x238>)
20002ef2:	681b      	ldr	r3, [r3, #0]
20002ef4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
20002ef8:	4a73      	ldr	r2, [pc, #460]	; (200030c8 <checkButtonPress+0x238>)
20002efa:	6013      	str	r3, [r2, #0]
				SET_FLAG(AREA1_PRESS, globalFlag);
20002efc:	4b72      	ldr	r3, [pc, #456]	; (200030c8 <checkButtonPress+0x238>)
20002efe:	681b      	ldr	r3, [r3, #0]
20002f00:	f043 0308 	orr.w	r3, r3, #8
20002f04:	4a70      	ldr	r2, [pc, #448]	; (200030c8 <checkButtonPress+0x238>)
20002f06:	6013      	str	r3, [r2, #0]
				checkstrokeArea();
20002f08:	f7ff fc60 	bl	200027cc <checkstrokeArea>
			}

			if (checkAreaTouch(x, y, 15, 78, 235, 35)) {
20002f0c:	4b6d      	ldr	r3, [pc, #436]	; (200030c4 <checkButtonPress+0x234>)
20002f0e:	8818      	ldrh	r0, [r3, #0]
20002f10:	4b6b      	ldr	r3, [pc, #428]	; (200030c0 <checkButtonPress+0x230>)
20002f12:	8819      	ldrh	r1, [r3, #0]
20002f14:	2323      	movs	r3, #35	; 0x23
20002f16:	9301      	str	r3, [sp, #4]
20002f18:	23eb      	movs	r3, #235	; 0xeb
20002f1a:	9300      	str	r3, [sp, #0]
20002f1c:	234e      	movs	r3, #78	; 0x4e
20002f1e:	220f      	movs	r2, #15
20002f20:	f7ff fc28 	bl	20002774 <checkAreaTouch>
20002f24:	4603      	mov	r3, r0
20002f26:	2b00      	cmp	r3, #0
20002f28:	d00d      	beq.n	20002f46 <checkButtonPress+0xb6>
				RESET_FLAG(AREA1_PRESS|AREA3_PRESS, globalFlag);
20002f2a:	4b67      	ldr	r3, [pc, #412]	; (200030c8 <checkButtonPress+0x238>)
20002f2c:	681b      	ldr	r3, [r3, #0]
20002f2e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
20002f32:	4a65      	ldr	r2, [pc, #404]	; (200030c8 <checkButtonPress+0x238>)
20002f34:	6013      	str	r3, [r2, #0]
				SET_FLAG(AREA2_PRESS, globalFlag);
20002f36:	4b64      	ldr	r3, [pc, #400]	; (200030c8 <checkButtonPress+0x238>)
20002f38:	681b      	ldr	r3, [r3, #0]
20002f3a:	f043 0310 	orr.w	r3, r3, #16
20002f3e:	4a62      	ldr	r2, [pc, #392]	; (200030c8 <checkButtonPress+0x238>)
20002f40:	6013      	str	r3, [r2, #0]
				checkstrokeArea();
20002f42:	f7ff fc43 	bl	200027cc <checkstrokeArea>
			}

			if (checkAreaTouch(x, y, 15, 126, 235, 35)) {
20002f46:	4b5f      	ldr	r3, [pc, #380]	; (200030c4 <checkButtonPress+0x234>)
20002f48:	8818      	ldrh	r0, [r3, #0]
20002f4a:	4b5d      	ldr	r3, [pc, #372]	; (200030c0 <checkButtonPress+0x230>)
20002f4c:	8819      	ldrh	r1, [r3, #0]
20002f4e:	2323      	movs	r3, #35	; 0x23
20002f50:	9301      	str	r3, [sp, #4]
20002f52:	23eb      	movs	r3, #235	; 0xeb
20002f54:	9300      	str	r3, [sp, #0]
20002f56:	237e      	movs	r3, #126	; 0x7e
20002f58:	220f      	movs	r2, #15
20002f5a:	f7ff fc0b 	bl	20002774 <checkAreaTouch>
20002f5e:	4603      	mov	r3, r0
20002f60:	2b00      	cmp	r3, #0
20002f62:	d00d      	beq.n	20002f80 <checkButtonPress+0xf0>
				RESET_FLAG(AREA1_PRESS|AREA2_PRESS, globalFlag);
20002f64:	4b58      	ldr	r3, [pc, #352]	; (200030c8 <checkButtonPress+0x238>)
20002f66:	681b      	ldr	r3, [r3, #0]
20002f68:	f023 0318 	bic.w	r3, r3, #24
20002f6c:	4a56      	ldr	r2, [pc, #344]	; (200030c8 <checkButtonPress+0x238>)
20002f6e:	6013      	str	r3, [r2, #0]
				SET_FLAG(AREA3_PRESS, globalFlag);
20002f70:	4b55      	ldr	r3, [pc, #340]	; (200030c8 <checkButtonPress+0x238>)
20002f72:	681b      	ldr	r3, [r3, #0]
20002f74:	f043 0320 	orr.w	r3, r3, #32
20002f78:	4a53      	ldr	r2, [pc, #332]	; (200030c8 <checkButtonPress+0x238>)
20002f7a:	6013      	str	r3, [r2, #0]
				checkstrokeArea();
20002f7c:	f7ff fc26 	bl	200027cc <checkstrokeArea>
			}

			if (checkAreaTouch(x, y, 24, 182, 50, 50)) {
20002f80:	4b50      	ldr	r3, [pc, #320]	; (200030c4 <checkButtonPress+0x234>)
20002f82:	8818      	ldrh	r0, [r3, #0]
20002f84:	4b4e      	ldr	r3, [pc, #312]	; (200030c0 <checkButtonPress+0x230>)
20002f86:	8819      	ldrh	r1, [r3, #0]
20002f88:	2332      	movs	r3, #50	; 0x32
20002f8a:	9301      	str	r3, [sp, #4]
20002f8c:	2332      	movs	r3, #50	; 0x32
20002f8e:	9300      	str	r3, [sp, #0]
20002f90:	23b6      	movs	r3, #182	; 0xb6
20002f92:	2218      	movs	r2, #24
20002f94:	f7ff fbee 	bl	20002774 <checkAreaTouch>
20002f98:	4603      	mov	r3, r0
20002f9a:	2b00      	cmp	r3, #0
20002f9c:	d00c      	beq.n	20002fb8 <checkButtonPress+0x128>
				printColorImage(24, 182, 50, 50, PRESSED, image_Plus);
20002f9e:	4b4b      	ldr	r3, [pc, #300]	; (200030cc <checkButtonPress+0x23c>)
20002fa0:	9301      	str	r3, [sp, #4]
20002fa2:	2301      	movs	r3, #1
20002fa4:	9300      	str	r3, [sp, #0]
20002fa6:	2332      	movs	r3, #50	; 0x32
20002fa8:	2232      	movs	r2, #50	; 0x32
20002faa:	21b6      	movs	r1, #182	; 0xb6
20002fac:	2018      	movs	r0, #24
20002fae:	f7ff fb1f 	bl	200025f0 <printColorImage>
				changeParamPlusMinus(PLUS);
20002fb2:	2001      	movs	r0, #1
20002fb4:	f7ff fde4 	bl	20002b80 <changeParamPlusMinus>
			}

			if (checkAreaTouch(x, y, 172, 182, 50, 50)) {
20002fb8:	4b42      	ldr	r3, [pc, #264]	; (200030c4 <checkButtonPress+0x234>)
20002fba:	8818      	ldrh	r0, [r3, #0]
20002fbc:	4b40      	ldr	r3, [pc, #256]	; (200030c0 <checkButtonPress+0x230>)
20002fbe:	8819      	ldrh	r1, [r3, #0]
20002fc0:	2332      	movs	r3, #50	; 0x32
20002fc2:	9301      	str	r3, [sp, #4]
20002fc4:	2332      	movs	r3, #50	; 0x32
20002fc6:	9300      	str	r3, [sp, #0]
20002fc8:	23b6      	movs	r3, #182	; 0xb6
20002fca:	22ac      	movs	r2, #172	; 0xac
20002fcc:	f7ff fbd2 	bl	20002774 <checkAreaTouch>
20002fd0:	4603      	mov	r3, r0
20002fd2:	2b00      	cmp	r3, #0
20002fd4:	d00c      	beq.n	20002ff0 <checkButtonPress+0x160>
				printColorImage(172, 182, 50, 50, PRESSED, image_Minus);
20002fd6:	4b3e      	ldr	r3, [pc, #248]	; (200030d0 <checkButtonPress+0x240>)
20002fd8:	9301      	str	r3, [sp, #4]
20002fda:	2301      	movs	r3, #1
20002fdc:	9300      	str	r3, [sp, #0]
20002fde:	2332      	movs	r3, #50	; 0x32
20002fe0:	2232      	movs	r2, #50	; 0x32
20002fe2:	21b6      	movs	r1, #182	; 0xb6
20002fe4:	20ac      	movs	r0, #172	; 0xac
20002fe6:	f7ff fb03 	bl	200025f0 <printColorImage>
				changeParamPlusMinus(MINUS);
20002fea:	2000      	movs	r0, #0
20002fec:	f7ff fdc8 	bl	20002b80 <changeParamPlusMinus>
			}

			if (checkAreaTouch(x, y, 98, 182, 50, 50)) {
20002ff0:	4b34      	ldr	r3, [pc, #208]	; (200030c4 <checkButtonPress+0x234>)
20002ff2:	8818      	ldrh	r0, [r3, #0]
20002ff4:	4b32      	ldr	r3, [pc, #200]	; (200030c0 <checkButtonPress+0x230>)
20002ff6:	8819      	ldrh	r1, [r3, #0]
20002ff8:	2332      	movs	r3, #50	; 0x32
20002ffa:	9301      	str	r3, [sp, #4]
20002ffc:	2332      	movs	r3, #50	; 0x32
20002ffe:	9300      	str	r3, [sp, #0]
20003000:	23b6      	movs	r3, #182	; 0xb6
20003002:	2262      	movs	r2, #98	; 0x62
20003004:	f7ff fbb6 	bl	20002774 <checkAreaTouch>
20003008:	4603      	mov	r3, r0
2000300a:	2b00      	cmp	r3, #0
2000300c:	d00b      	beq.n	20003026 <checkButtonPress+0x196>
				printColorImage(98, 182, 50, 50, PRESSED, image_Arrow);
2000300e:	4b31      	ldr	r3, [pc, #196]	; (200030d4 <checkButtonPress+0x244>)
20003010:	9301      	str	r3, [sp, #4]
20003012:	2301      	movs	r3, #1
20003014:	9300      	str	r3, [sp, #0]
20003016:	2332      	movs	r3, #50	; 0x32
20003018:	2232      	movs	r2, #50	; 0x32
2000301a:	21b6      	movs	r1, #182	; 0xb6
2000301c:	2062      	movs	r0, #98	; 0x62
2000301e:	f7ff fae7 	bl	200025f0 <printColorImage>
				togleUnits();
20003022:	f7ff fdfb 	bl	20002c1c <togleUnits>
			}

			if (checkAreaTouch(x, y, 246, 182, 50, 50)) {
20003026:	4b27      	ldr	r3, [pc, #156]	; (200030c4 <checkButtonPress+0x234>)
20003028:	8818      	ldrh	r0, [r3, #0]
2000302a:	4b25      	ldr	r3, [pc, #148]	; (200030c0 <checkButtonPress+0x230>)
2000302c:	8819      	ldrh	r1, [r3, #0]
2000302e:	2332      	movs	r3, #50	; 0x32
20003030:	9301      	str	r3, [sp, #4]
20003032:	2332      	movs	r3, #50	; 0x32
20003034:	9300      	str	r3, [sp, #0]
20003036:	23b6      	movs	r3, #182	; 0xb6
20003038:	22f6      	movs	r2, #246	; 0xf6
2000303a:	f7ff fb9b 	bl	20002774 <checkAreaTouch>
2000303e:	4603      	mov	r3, r0
20003040:	2b00      	cmp	r3, #0
20003042:	d001      	beq.n	20003048 <checkButtonPress+0x1b8>
				powerButton();
20003044:	f7ff fc6c 	bl	20002920 <powerButton>
			}

			if (checkAreaTouch(x, y, 260, 102, 50, 26)) {
20003048:	4b1e      	ldr	r3, [pc, #120]	; (200030c4 <checkButtonPress+0x234>)
2000304a:	8818      	ldrh	r0, [r3, #0]
2000304c:	4b1c      	ldr	r3, [pc, #112]	; (200030c0 <checkButtonPress+0x230>)
2000304e:	8819      	ldrh	r1, [r3, #0]
20003050:	231a      	movs	r3, #26
20003052:	9301      	str	r3, [sp, #4]
20003054:	2332      	movs	r3, #50	; 0x32
20003056:	9300      	str	r3, [sp, #0]
20003058:	2366      	movs	r3, #102	; 0x66
2000305a:	f44f 7282 	mov.w	r2, #260	; 0x104
2000305e:	f7ff fb89 	bl	20002774 <checkAreaTouch>
20003062:	4603      	mov	r3, r0
20003064:	2b00      	cmp	r3, #0
20003066:	d002      	beq.n	2000306e <checkButtonPress+0x1de>
				setParamNPN_PNP (NPN);
20003068:	2001      	movs	r0, #1
2000306a:	f7ff fed7 	bl	20002e1c <setParamNPN_PNP>
			}

			if (checkAreaTouch(x, y, 260, 140, 50, 26)) {
2000306e:	4b15      	ldr	r3, [pc, #84]	; (200030c4 <checkButtonPress+0x234>)
20003070:	8818      	ldrh	r0, [r3, #0]
20003072:	4b13      	ldr	r3, [pc, #76]	; (200030c0 <checkButtonPress+0x230>)
20003074:	8819      	ldrh	r1, [r3, #0]
20003076:	231a      	movs	r3, #26
20003078:	9301      	str	r3, [sp, #4]
2000307a:	2332      	movs	r3, #50	; 0x32
2000307c:	9300      	str	r3, [sp, #0]
2000307e:	238c      	movs	r3, #140	; 0x8c
20003080:	f44f 7282 	mov.w	r2, #260	; 0x104
20003084:	f7ff fb76 	bl	20002774 <checkAreaTouch>
20003088:	4603      	mov	r3, r0
2000308a:	2b00      	cmp	r3, #0
2000308c:	d002      	beq.n	20003094 <checkButtonPress+0x204>
				setParamNPN_PNP (PNP);
2000308e:	2000      	movs	r0, #0
20003090:	f7ff fec4 	bl	20002e1c <setParamNPN_PNP>
			}
		}
		timBigArea = 5000;
20003094:	4b10      	ldr	r3, [pc, #64]	; (200030d8 <checkButtonPress+0x248>)
20003096:	f241 3288 	movw	r2, #5000	; 0x1388
2000309a:	601a      	str	r2, [r3, #0]
		timButtonPress = 50;
2000309c:	4b0f      	ldr	r3, [pc, #60]	; (200030dc <checkButtonPress+0x24c>)
2000309e:	2232      	movs	r2, #50	; 0x32
200030a0:	601a      	str	r2, [r3, #0]
200030a2:	e005      	b.n	200030b0 <checkButtonPress+0x220>
		//ParamDevice.changeParametrs = true;
	} else {
		RESET_FLAG(ONE_BUZZER, globalFlag);
200030a4:	4b08      	ldr	r3, [pc, #32]	; (200030c8 <checkButtonPress+0x238>)
200030a6:	681b      	ldr	r3, [r3, #0]
200030a8:	f023 0304 	bic.w	r3, r3, #4
200030ac:	4a06      	ldr	r2, [pc, #24]	; (200030c8 <checkButtonPress+0x238>)
200030ae:	6013      	str	r3, [r2, #0]
	}
	GUIPostHandler();
200030b0:	f000 f816 	bl	200030e0 <GUIPostHandler>
}
200030b4:	bf00      	nop
200030b6:	46bd      	mov	sp, r7
200030b8:	bd80      	pop	{r7, pc}
200030ba:	bf00      	nop
200030bc:	40020400 	.word	0x40020400
200030c0:	200119ee 	.word	0x200119ee
200030c4:	200119ec 	.word	0x200119ec
200030c8:	20011af4 	.word	0x20011af4
200030cc:	200098a0 	.word	0x200098a0
200030d0:	2000ac28 	.word	0x2000ac28
200030d4:	2000c0dc 	.word	0x2000c0dc
200030d8:	200119f0 	.word	0x200119f0
200030dc:	200119f4 	.word	0x200119f4

200030e0 <GUIPostHandler>:

void GUIPostHandler(void) {
200030e0:	b580      	push	{r7, lr}
200030e2:	b082      	sub	sp, #8
200030e4:	af02      	add	r7, sp, #8
	if (timBigArea == 0 && (globalFlag & 0x38)) {
200030e6:	4b26      	ldr	r3, [pc, #152]	; (20003180 <GUIPostHandler+0xa0>)
200030e8:	681b      	ldr	r3, [r3, #0]
200030ea:	2b00      	cmp	r3, #0
200030ec:	d10d      	bne.n	2000310a <GUIPostHandler+0x2a>
200030ee:	4b25      	ldr	r3, [pc, #148]	; (20003184 <GUIPostHandler+0xa4>)
200030f0:	681b      	ldr	r3, [r3, #0]
200030f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
200030f6:	2b00      	cmp	r3, #0
200030f8:	d007      	beq.n	2000310a <GUIPostHandler+0x2a>
		RESET_FLAG(AREA1_PRESS|AREA2_PRESS|AREA3_PRESS, globalFlag);
200030fa:	4b22      	ldr	r3, [pc, #136]	; (20003184 <GUIPostHandler+0xa4>)
200030fc:	681b      	ldr	r3, [r3, #0]
200030fe:	f023 0338 	bic.w	r3, r3, #56	; 0x38
20003102:	4a20      	ldr	r2, [pc, #128]	; (20003184 <GUIPostHandler+0xa4>)
20003104:	6013      	str	r3, [r2, #0]
		checkstrokeArea();
20003106:	f7ff fb61 	bl	200027cc <checkstrokeArea>
	}
	if (timButtonPress == 0 && READ_FLAG(ONE_TOUCH, globalFlag)) {
2000310a:	4b1f      	ldr	r3, [pc, #124]	; (20003188 <GUIPostHandler+0xa8>)
2000310c:	681b      	ldr	r3, [r3, #0]
2000310e:	2b00      	cmp	r3, #0
20003110:	d132      	bne.n	20003178 <GUIPostHandler+0x98>
20003112:	4b1c      	ldr	r3, [pc, #112]	; (20003184 <GUIPostHandler+0xa4>)
20003114:	681b      	ldr	r3, [r3, #0]
20003116:	f003 0302 	and.w	r3, r3, #2
2000311a:	2b00      	cmp	r3, #0
2000311c:	d02c      	beq.n	20003178 <GUIPostHandler+0x98>
		printColorImage(24, 182, 50, 50, NO_PRESSED, image_Plus);
2000311e:	4b1b      	ldr	r3, [pc, #108]	; (2000318c <GUIPostHandler+0xac>)
20003120:	9301      	str	r3, [sp, #4]
20003122:	2300      	movs	r3, #0
20003124:	9300      	str	r3, [sp, #0]
20003126:	2332      	movs	r3, #50	; 0x32
20003128:	2232      	movs	r2, #50	; 0x32
2000312a:	21b6      	movs	r1, #182	; 0xb6
2000312c:	2018      	movs	r0, #24
2000312e:	f7ff fa5f 	bl	200025f0 <printColorImage>
		printColorImage(172, 182, 50, 50, NO_PRESSED, image_Minus);
20003132:	4b17      	ldr	r3, [pc, #92]	; (20003190 <GUIPostHandler+0xb0>)
20003134:	9301      	str	r3, [sp, #4]
20003136:	2300      	movs	r3, #0
20003138:	9300      	str	r3, [sp, #0]
2000313a:	2332      	movs	r3, #50	; 0x32
2000313c:	2232      	movs	r2, #50	; 0x32
2000313e:	21b6      	movs	r1, #182	; 0xb6
20003140:	20ac      	movs	r0, #172	; 0xac
20003142:	f7ff fa55 	bl	200025f0 <printColorImage>
		printColorImage(98, 182, 50, 50, NO_PRESSED, image_Arrow);
20003146:	4b13      	ldr	r3, [pc, #76]	; (20003194 <GUIPostHandler+0xb4>)
20003148:	9301      	str	r3, [sp, #4]
2000314a:	2300      	movs	r3, #0
2000314c:	9300      	str	r3, [sp, #0]
2000314e:	2332      	movs	r3, #50	; 0x32
20003150:	2232      	movs	r2, #50	; 0x32
20003152:	21b6      	movs	r1, #182	; 0xb6
20003154:	2062      	movs	r0, #98	; 0x62
20003156:	f7ff fa4b 	bl	200025f0 <printColorImage>
		RESET_FLAG(TOUCH_DISPLAY, globalFlag);
2000315a:	4b0a      	ldr	r3, [pc, #40]	; (20003184 <GUIPostHandler+0xa4>)
2000315c:	681b      	ldr	r3, [r3, #0]
2000315e:	f023 0301 	bic.w	r3, r3, #1
20003162:	4a08      	ldr	r2, [pc, #32]	; (20003184 <GUIPostHandler+0xa4>)
20003164:	6013      	str	r3, [r2, #0]
		RESET_FLAG(ONE_TOUCH, globalFlag);
20003166:	4b07      	ldr	r3, [pc, #28]	; (20003184 <GUIPostHandler+0xa4>)
20003168:	681b      	ldr	r3, [r3, #0]
2000316a:	f023 0302 	bic.w	r3, r3, #2
2000316e:	4a05      	ldr	r2, [pc, #20]	; (20003184 <GUIPostHandler+0xa4>)
20003170:	6013      	str	r3, [r2, #0]
		countSpeed = 1;
20003172:	4b09      	ldr	r3, [pc, #36]	; (20003198 <GUIPostHandler+0xb8>)
20003174:	2201      	movs	r2, #1
20003176:	801a      	strh	r2, [r3, #0]
	}
}
20003178:	bf00      	nop
2000317a:	46bd      	mov	sp, r7
2000317c:	bd80      	pop	{r7, pc}
2000317e:	bf00      	nop
20003180:	200119f0 	.word	0x200119f0
20003184:	20011af4 	.word	0x20011af4
20003188:	200119f4 	.word	0x200119f4
2000318c:	200098a0 	.word	0x200098a0
20003190:	2000ac28 	.word	0x2000ac28
20003194:	2000c0dc 	.word	0x2000c0dc
20003198:	20011910 	.word	0x20011910

2000319c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
2000319c:	b580      	push	{r7, lr}
2000319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SYSCFG->MEMRMP = 0x3;    // для запуска из SRAM
200031a0:	4b11      	ldr	r3, [pc, #68]	; (200031e8 <main+0x4c>)
200031a2:	2203      	movs	r2, #3
200031a4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
200031a6:	f000 fce7 	bl	20003b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
200031aa:	f000 f821 	bl	200031f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
200031ae:	f000 f95d 	bl	2000346c <MX_GPIO_Init>
  MX_SPI1_Init();
200031b2:	f000 f885 	bl	200032c0 <MX_SPI1_Init>
  MX_SPI2_Init();
200031b6:	f000 f8b9 	bl	2000332c <MX_SPI2_Init>
  MX_TIM5_Init();
200031ba:	f000 f8ed 	bl	20003398 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_FLAG(&htim5, TIM_SR_UIF); // очищаем флаг
200031be:	4b0b      	ldr	r3, [pc, #44]	; (200031ec <main+0x50>)
200031c0:	681b      	ldr	r3, [r3, #0]
200031c2:	f06f 0201 	mvn.w	r2, #1
200031c6:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start(&htim5);
200031c8:	4808      	ldr	r0, [pc, #32]	; (200031ec <main+0x50>)
200031ca:	f002 fa4f 	bl	2000566c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_2);
200031ce:	2104      	movs	r1, #4
200031d0:	4806      	ldr	r0, [pc, #24]	; (200031ec <main+0x50>)
200031d2:	f002 fc2f 	bl	20005a34 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
200031d6:	2108      	movs	r1, #8
200031d8:	4804      	ldr	r0, [pc, #16]	; (200031ec <main+0x50>)
200031da:	f002 fb17 	bl	2000580c <HAL_TIM_PWM_Start>
  //TIM5->CCR2 = 10000;
  doWork ();
200031de:	f000 fc29 	bl	20003a34 <doWork>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Work ();
200031e2:	f000 fc33 	bl	20003a4c <Work>
200031e6:	e7fc      	b.n	200031e2 <main+0x46>
200031e8:	40013800 	.word	0x40013800
200031ec:	20011aac 	.word	0x20011aac

200031f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
200031f0:	b580      	push	{r7, lr}
200031f2:	b094      	sub	sp, #80	; 0x50
200031f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
200031f6:	f107 0320 	add.w	r3, r7, #32
200031fa:	2230      	movs	r2, #48	; 0x30
200031fc:	2100      	movs	r1, #0
200031fe:	4618      	mov	r0, r3
20003200:	f003 faa2 	bl	20006748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20003204:	f107 030c 	add.w	r3, r7, #12
20003208:	2200      	movs	r2, #0
2000320a:	601a      	str	r2, [r3, #0]
2000320c:	605a      	str	r2, [r3, #4]
2000320e:	609a      	str	r2, [r3, #8]
20003210:	60da      	str	r2, [r3, #12]
20003212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20003214:	2300      	movs	r3, #0
20003216:	60bb      	str	r3, [r7, #8]
20003218:	4b27      	ldr	r3, [pc, #156]	; (200032b8 <SystemClock_Config+0xc8>)
2000321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000321c:	4a26      	ldr	r2, [pc, #152]	; (200032b8 <SystemClock_Config+0xc8>)
2000321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20003222:	6413      	str	r3, [r2, #64]	; 0x40
20003224:	4b24      	ldr	r3, [pc, #144]	; (200032b8 <SystemClock_Config+0xc8>)
20003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000322c:	60bb      	str	r3, [r7, #8]
2000322e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20003230:	2300      	movs	r3, #0
20003232:	607b      	str	r3, [r7, #4]
20003234:	4b21      	ldr	r3, [pc, #132]	; (200032bc <SystemClock_Config+0xcc>)
20003236:	681b      	ldr	r3, [r3, #0]
20003238:	4a20      	ldr	r2, [pc, #128]	; (200032bc <SystemClock_Config+0xcc>)
2000323a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
2000323e:	6013      	str	r3, [r2, #0]
20003240:	4b1e      	ldr	r3, [pc, #120]	; (200032bc <SystemClock_Config+0xcc>)
20003242:	681b      	ldr	r3, [r3, #0]
20003244:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
20003248:	607b      	str	r3, [r7, #4]
2000324a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
2000324c:	2301      	movs	r3, #1
2000324e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
20003250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20003254:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20003256:	2302      	movs	r3, #2
20003258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2000325a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000325e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
20003260:	230c      	movs	r3, #12
20003262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
20003264:	2360      	movs	r3, #96	; 0x60
20003266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20003268:	2302      	movs	r3, #2
2000326a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
2000326c:	2304      	movs	r3, #4
2000326e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20003270:	f107 0320 	add.w	r3, r7, #32
20003274:	4618      	mov	r0, r3
20003276:	f001 f9a3 	bl	200045c0 <HAL_RCC_OscConfig>
2000327a:	4603      	mov	r3, r0
2000327c:	2b00      	cmp	r3, #0
2000327e:	d001      	beq.n	20003284 <SystemClock_Config+0x94>
  {
    Error_Handler();
20003280:	f000 f976 	bl	20003570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20003284:	230f      	movs	r3, #15
20003286:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20003288:	2302      	movs	r3, #2
2000328a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
2000328c:	2380      	movs	r3, #128	; 0x80
2000328e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
20003290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20003294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
20003296:	2300      	movs	r3, #0
20003298:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
2000329a:	f107 030c 	add.w	r3, r7, #12
2000329e:	2101      	movs	r1, #1
200032a0:	4618      	mov	r0, r3
200032a2:	f001 fc05 	bl	20004ab0 <HAL_RCC_ClockConfig>
200032a6:	4603      	mov	r3, r0
200032a8:	2b00      	cmp	r3, #0
200032aa:	d001      	beq.n	200032b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
200032ac:	f000 f960 	bl	20003570 <Error_Handler>
  }
}
200032b0:	bf00      	nop
200032b2:	3750      	adds	r7, #80	; 0x50
200032b4:	46bd      	mov	sp, r7
200032b6:	bd80      	pop	{r7, pc}
200032b8:	40023800 	.word	0x40023800
200032bc:	40007000 	.word	0x40007000

200032c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
200032c0:	b580      	push	{r7, lr}
200032c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
200032c4:	4b17      	ldr	r3, [pc, #92]	; (20003324 <MX_SPI1_Init+0x64>)
200032c6:	4a18      	ldr	r2, [pc, #96]	; (20003328 <MX_SPI1_Init+0x68>)
200032c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
200032ca:	4b16      	ldr	r3, [pc, #88]	; (20003324 <MX_SPI1_Init+0x64>)
200032cc:	f44f 7282 	mov.w	r2, #260	; 0x104
200032d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
200032d2:	4b14      	ldr	r3, [pc, #80]	; (20003324 <MX_SPI1_Init+0x64>)
200032d4:	2200      	movs	r2, #0
200032d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
200032d8:	4b12      	ldr	r3, [pc, #72]	; (20003324 <MX_SPI1_Init+0x64>)
200032da:	2200      	movs	r2, #0
200032dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
200032de:	4b11      	ldr	r3, [pc, #68]	; (20003324 <MX_SPI1_Init+0x64>)
200032e0:	2200      	movs	r2, #0
200032e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
200032e4:	4b0f      	ldr	r3, [pc, #60]	; (20003324 <MX_SPI1_Init+0x64>)
200032e6:	2200      	movs	r2, #0
200032e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
200032ea:	4b0e      	ldr	r3, [pc, #56]	; (20003324 <MX_SPI1_Init+0x64>)
200032ec:	f44f 7200 	mov.w	r2, #512	; 0x200
200032f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
200032f2:	4b0c      	ldr	r3, [pc, #48]	; (20003324 <MX_SPI1_Init+0x64>)
200032f4:	2200      	movs	r2, #0
200032f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
200032f8:	4b0a      	ldr	r3, [pc, #40]	; (20003324 <MX_SPI1_Init+0x64>)
200032fa:	2200      	movs	r2, #0
200032fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
200032fe:	4b09      	ldr	r3, [pc, #36]	; (20003324 <MX_SPI1_Init+0x64>)
20003300:	2200      	movs	r2, #0
20003302:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20003304:	4b07      	ldr	r3, [pc, #28]	; (20003324 <MX_SPI1_Init+0x64>)
20003306:	2200      	movs	r2, #0
20003308:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
2000330a:	4b06      	ldr	r3, [pc, #24]	; (20003324 <MX_SPI1_Init+0x64>)
2000330c:	220a      	movs	r2, #10
2000330e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
20003310:	4804      	ldr	r0, [pc, #16]	; (20003324 <MX_SPI1_Init+0x64>)
20003312:	f001 fd79 	bl	20004e08 <HAL_SPI_Init>
20003316:	4603      	mov	r3, r0
20003318:	2b00      	cmp	r3, #0
2000331a:	d001      	beq.n	20003320 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
2000331c:	f000 f928 	bl	20003570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
20003320:	bf00      	nop
20003322:	bd80      	pop	{r7, pc}
20003324:	200119fc 	.word	0x200119fc
20003328:	40013000 	.word	0x40013000

2000332c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
2000332c:	b580      	push	{r7, lr}
2000332e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
20003330:	4b17      	ldr	r3, [pc, #92]	; (20003390 <MX_SPI2_Init+0x64>)
20003332:	4a18      	ldr	r2, [pc, #96]	; (20003394 <MX_SPI2_Init+0x68>)
20003334:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
20003336:	4b16      	ldr	r3, [pc, #88]	; (20003390 <MX_SPI2_Init+0x64>)
20003338:	f44f 7282 	mov.w	r2, #260	; 0x104
2000333c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
2000333e:	4b14      	ldr	r3, [pc, #80]	; (20003390 <MX_SPI2_Init+0x64>)
20003340:	2200      	movs	r2, #0
20003342:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
20003344:	4b12      	ldr	r3, [pc, #72]	; (20003390 <MX_SPI2_Init+0x64>)
20003346:	2200      	movs	r2, #0
20003348:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
2000334a:	4b11      	ldr	r3, [pc, #68]	; (20003390 <MX_SPI2_Init+0x64>)
2000334c:	2200      	movs	r2, #0
2000334e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
20003350:	4b0f      	ldr	r3, [pc, #60]	; (20003390 <MX_SPI2_Init+0x64>)
20003352:	2200      	movs	r2, #0
20003354:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
20003356:	4b0e      	ldr	r3, [pc, #56]	; (20003390 <MX_SPI2_Init+0x64>)
20003358:	f44f 7200 	mov.w	r2, #512	; 0x200
2000335c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
2000335e:	4b0c      	ldr	r3, [pc, #48]	; (20003390 <MX_SPI2_Init+0x64>)
20003360:	2238      	movs	r2, #56	; 0x38
20003362:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
20003364:	4b0a      	ldr	r3, [pc, #40]	; (20003390 <MX_SPI2_Init+0x64>)
20003366:	2200      	movs	r2, #0
20003368:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
2000336a:	4b09      	ldr	r3, [pc, #36]	; (20003390 <MX_SPI2_Init+0x64>)
2000336c:	2200      	movs	r2, #0
2000336e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20003370:	4b07      	ldr	r3, [pc, #28]	; (20003390 <MX_SPI2_Init+0x64>)
20003372:	2200      	movs	r2, #0
20003374:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
20003376:	4b06      	ldr	r3, [pc, #24]	; (20003390 <MX_SPI2_Init+0x64>)
20003378:	220a      	movs	r2, #10
2000337a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
2000337c:	4804      	ldr	r0, [pc, #16]	; (20003390 <MX_SPI2_Init+0x64>)
2000337e:	f001 fd43 	bl	20004e08 <HAL_SPI_Init>
20003382:	4603      	mov	r3, r0
20003384:	2b00      	cmp	r3, #0
20003386:	d001      	beq.n	2000338c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
20003388:	f000 f8f2 	bl	20003570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
2000338c:	bf00      	nop
2000338e:	bd80      	pop	{r7, pc}
20003390:	20011a54 	.word	0x20011a54
20003394:	40003800 	.word	0x40003800

20003398 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
20003398:	b580      	push	{r7, lr}
2000339a:	b08a      	sub	sp, #40	; 0x28
2000339c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
2000339e:	f107 0320 	add.w	r3, r7, #32
200033a2:	2200      	movs	r2, #0
200033a4:	601a      	str	r2, [r3, #0]
200033a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
200033a8:	1d3b      	adds	r3, r7, #4
200033aa:	2200      	movs	r2, #0
200033ac:	601a      	str	r2, [r3, #0]
200033ae:	605a      	str	r2, [r3, #4]
200033b0:	609a      	str	r2, [r3, #8]
200033b2:	60da      	str	r2, [r3, #12]
200033b4:	611a      	str	r2, [r3, #16]
200033b6:	615a      	str	r2, [r3, #20]
200033b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
200033ba:	4b29      	ldr	r3, [pc, #164]	; (20003460 <MX_TIM5_Init+0xc8>)
200033bc:	4a29      	ldr	r2, [pc, #164]	; (20003464 <MX_TIM5_Init+0xcc>)
200033be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
200033c0:	4b27      	ldr	r3, [pc, #156]	; (20003460 <MX_TIM5_Init+0xc8>)
200033c2:	2200      	movs	r2, #0
200033c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
200033c6:	4b26      	ldr	r3, [pc, #152]	; (20003460 <MX_TIM5_Init+0xc8>)
200033c8:	2200      	movs	r2, #0
200033ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000;
200033cc:	4b24      	ldr	r3, [pc, #144]	; (20003460 <MX_TIM5_Init+0xc8>)
200033ce:	4a26      	ldr	r2, [pc, #152]	; (20003468 <MX_TIM5_Init+0xd0>)
200033d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
200033d2:	4b23      	ldr	r3, [pc, #140]	; (20003460 <MX_TIM5_Init+0xc8>)
200033d4:	2200      	movs	r2, #0
200033d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
200033d8:	4b21      	ldr	r3, [pc, #132]	; (20003460 <MX_TIM5_Init+0xc8>)
200033da:	2280      	movs	r2, #128	; 0x80
200033dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
200033de:	4820      	ldr	r0, [pc, #128]	; (20003460 <MX_TIM5_Init+0xc8>)
200033e0:	f002 f9c5 	bl	2000576e <HAL_TIM_PWM_Init>
200033e4:	4603      	mov	r3, r0
200033e6:	2b00      	cmp	r3, #0
200033e8:	d001      	beq.n	200033ee <MX_TIM5_Init+0x56>
  {
    Error_Handler();
200033ea:	f000 f8c1 	bl	20003570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
200033ee:	2300      	movs	r3, #0
200033f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
200033f2:	2300      	movs	r3, #0
200033f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
200033f6:	f107 0320 	add.w	r3, r7, #32
200033fa:	4619      	mov	r1, r3
200033fc:	4818      	ldr	r0, [pc, #96]	; (20003460 <MX_TIM5_Init+0xc8>)
200033fe:	f003 f8f7 	bl	200065f0 <HAL_TIMEx_MasterConfigSynchronization>
20003402:	4603      	mov	r3, r0
20003404:	2b00      	cmp	r3, #0
20003406:	d001      	beq.n	2000340c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
20003408:	f000 f8b2 	bl	20003570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
2000340c:	2360      	movs	r3, #96	; 0x60
2000340e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000;
20003410:	f246 13a8 	movw	r3, #25000	; 0x61a8
20003414:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
20003416:	2300      	movs	r3, #0
20003418:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
2000341a:	2300      	movs	r3, #0
2000341c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
2000341e:	1d3b      	adds	r3, r7, #4
20003420:	2204      	movs	r2, #4
20003422:	4619      	mov	r1, r3
20003424:	480e      	ldr	r0, [pc, #56]	; (20003460 <MX_TIM5_Init+0xc8>)
20003426:	f002 fdbd 	bl	20005fa4 <HAL_TIM_PWM_ConfigChannel>
2000342a:	4603      	mov	r3, r0
2000342c:	2b00      	cmp	r3, #0
2000342e:	d001      	beq.n	20003434 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
20003430:	f000 f89e 	bl	20003570 <Error_Handler>
  }
  sConfigOC.Pulse = 2100;
20003434:	f640 0334 	movw	r3, #2100	; 0x834
20003438:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
2000343a:	1d3b      	adds	r3, r7, #4
2000343c:	2208      	movs	r2, #8
2000343e:	4619      	mov	r1, r3
20003440:	4807      	ldr	r0, [pc, #28]	; (20003460 <MX_TIM5_Init+0xc8>)
20003442:	f002 fdaf 	bl	20005fa4 <HAL_TIM_PWM_ConfigChannel>
20003446:	4603      	mov	r3, r0
20003448:	2b00      	cmp	r3, #0
2000344a:	d001      	beq.n	20003450 <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
2000344c:	f000 f890 	bl	20003570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
20003450:	4803      	ldr	r0, [pc, #12]	; (20003460 <MX_TIM5_Init+0xc8>)
20003452:	f000 f9db 	bl	2000380c <HAL_TIM_MspPostInit>

}
20003456:	bf00      	nop
20003458:	3728      	adds	r7, #40	; 0x28
2000345a:	46bd      	mov	sp, r7
2000345c:	bd80      	pop	{r7, pc}
2000345e:	bf00      	nop
20003460:	20011aac 	.word	0x20011aac
20003464:	40000c00 	.word	0x40000c00
20003468:	000186a0 	.word	0x000186a0

2000346c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
2000346c:	b580      	push	{r7, lr}
2000346e:	b088      	sub	sp, #32
20003470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20003472:	f107 030c 	add.w	r3, r7, #12
20003476:	2200      	movs	r2, #0
20003478:	601a      	str	r2, [r3, #0]
2000347a:	605a      	str	r2, [r3, #4]
2000347c:	609a      	str	r2, [r3, #8]
2000347e:	60da      	str	r2, [r3, #12]
20003480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
20003482:	2300      	movs	r3, #0
20003484:	60bb      	str	r3, [r7, #8]
20003486:	4b37      	ldr	r3, [pc, #220]	; (20003564 <MX_GPIO_Init+0xf8>)
20003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000348a:	4a36      	ldr	r2, [pc, #216]	; (20003564 <MX_GPIO_Init+0xf8>)
2000348c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20003490:	6313      	str	r3, [r2, #48]	; 0x30
20003492:	4b34      	ldr	r3, [pc, #208]	; (20003564 <MX_GPIO_Init+0xf8>)
20003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000349a:	60bb      	str	r3, [r7, #8]
2000349c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
2000349e:	2300      	movs	r3, #0
200034a0:	607b      	str	r3, [r7, #4]
200034a2:	4b30      	ldr	r3, [pc, #192]	; (20003564 <MX_GPIO_Init+0xf8>)
200034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200034a6:	4a2f      	ldr	r2, [pc, #188]	; (20003564 <MX_GPIO_Init+0xf8>)
200034a8:	f043 0301 	orr.w	r3, r3, #1
200034ac:	6313      	str	r3, [r2, #48]	; 0x30
200034ae:	4b2d      	ldr	r3, [pc, #180]	; (20003564 <MX_GPIO_Init+0xf8>)
200034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200034b2:	f003 0301 	and.w	r3, r3, #1
200034b6:	607b      	str	r3, [r7, #4]
200034b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
200034ba:	2300      	movs	r3, #0
200034bc:	603b      	str	r3, [r7, #0]
200034be:	4b29      	ldr	r3, [pc, #164]	; (20003564 <MX_GPIO_Init+0xf8>)
200034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200034c2:	4a28      	ldr	r2, [pc, #160]	; (20003564 <MX_GPIO_Init+0xf8>)
200034c4:	f043 0302 	orr.w	r3, r3, #2
200034c8:	6313      	str	r3, [r2, #48]	; 0x30
200034ca:	4b26      	ldr	r3, [pc, #152]	; (20003564 <MX_GPIO_Init+0xf8>)
200034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200034ce:	f003 0302 	and.w	r3, r3, #2
200034d2:	603b      	str	r3, [r7, #0]
200034d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|Led_Display_Pin|CS_Touch_Pin, GPIO_PIN_RESET);
200034d6:	2200      	movs	r2, #0
200034d8:	f240 1111 	movw	r1, #273	; 0x111
200034dc:	4822      	ldr	r0, [pc, #136]	; (20003568 <MX_GPIO_Init+0xfc>)
200034de:	f001 f855 	bl	2000458c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Data_Comand_Pin|Reset_Display_Pin|CS_Display_Pin, GPIO_PIN_RESET);
200034e2:	2200      	movs	r2, #0
200034e4:	2107      	movs	r1, #7
200034e6:	4821      	ldr	r0, [pc, #132]	; (2000356c <MX_GPIO_Init+0x100>)
200034e8:	f001 f850 	bl	2000458c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
200034ec:	2301      	movs	r3, #1
200034ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
200034f0:	2301      	movs	r3, #1
200034f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
200034f4:	2300      	movs	r3, #0
200034f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200034f8:	2303      	movs	r3, #3
200034fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
200034fc:	f107 030c 	add.w	r3, r7, #12
20003500:	4619      	mov	r1, r3
20003502:	4819      	ldr	r0, [pc, #100]	; (20003568 <MX_GPIO_Init+0xfc>)
20003504:	f000 fea6 	bl	20004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_Display_Pin CS_Touch_Pin */
  GPIO_InitStruct.Pin = Led_Display_Pin|CS_Touch_Pin;
20003508:	f44f 7388 	mov.w	r3, #272	; 0x110
2000350c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000350e:	2301      	movs	r3, #1
20003510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20003512:	2300      	movs	r3, #0
20003514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20003516:	2300      	movs	r3, #0
20003518:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000351a:	f107 030c 	add.w	r3, r7, #12
2000351e:	4619      	mov	r1, r3
20003520:	4811      	ldr	r0, [pc, #68]	; (20003568 <MX_GPIO_Init+0xfc>)
20003522:	f000 fe97 	bl	20004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : Data_Comand_Pin Reset_Display_Pin CS_Display_Pin */
  GPIO_InitStruct.Pin = Data_Comand_Pin|Reset_Display_Pin|CS_Display_Pin;
20003526:	2307      	movs	r3, #7
20003528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000352a:	2301      	movs	r3, #1
2000352c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000352e:	2300      	movs	r3, #0
20003530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20003532:	2300      	movs	r3, #0
20003534:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20003536:	f107 030c 	add.w	r3, r7, #12
2000353a:	4619      	mov	r1, r3
2000353c:	480b      	ldr	r0, [pc, #44]	; (2000356c <MX_GPIO_Init+0x100>)
2000353e:	f000 fe89 	bl	20004254 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Touch_Pin */
  GPIO_InitStruct.Pin = IRQ_Touch_Pin;
20003542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20003546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20003548:	2300      	movs	r3, #0
2000354a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000354c:	2300      	movs	r3, #0
2000354e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_Touch_GPIO_Port, &GPIO_InitStruct);
20003550:	f107 030c 	add.w	r3, r7, #12
20003554:	4619      	mov	r1, r3
20003556:	4805      	ldr	r0, [pc, #20]	; (2000356c <MX_GPIO_Init+0x100>)
20003558:	f000 fe7c 	bl	20004254 <HAL_GPIO_Init>

}
2000355c:	bf00      	nop
2000355e:	3720      	adds	r7, #32
20003560:	46bd      	mov	sp, r7
20003562:	bd80      	pop	{r7, pc}
20003564:	40023800 	.word	0x40023800
20003568:	40020000 	.word	0x40020000
2000356c:	40020400 	.word	0x40020400

20003570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20003570:	b480      	push	{r7}
20003572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
20003574:	b672      	cpsid	i
}
20003576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20003578:	e7fe      	b.n	20003578 <Error_Handler+0x8>

2000357a <wholeDevider>:
/**************************************************************************
   @brief     swaps values in variables
    @param    a  num first
    @param    a  num two
**************************************************************************/
int16_t wholeDevider (int16_t data, int16_t devider) {
2000357a:	b480      	push	{r7}
2000357c:	b087      	sub	sp, #28
2000357e:	af00      	add	r7, sp, #0
20003580:	4603      	mov	r3, r0
20003582:	460a      	mov	r2, r1
20003584:	80fb      	strh	r3, [r7, #6]
20003586:	4613      	mov	r3, r2
20003588:	80bb      	strh	r3, [r7, #4]
	int16_t result = 0;
2000358a:	2300      	movs	r3, #0
2000358c:	82fb      	strh	r3, [r7, #22]
	int16_t max = (data / devider) + 1;
2000358e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20003592:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
20003596:	fb92 f3f3 	sdiv	r3, r2, r3
2000359a:	b29b      	uxth	r3, r3
2000359c:	3301      	adds	r3, #1
2000359e:	b29b      	uxth	r3, r3
200035a0:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < max; i ++) {
200035a2:	2300      	movs	r3, #0
200035a4:	613b      	str	r3, [r7, #16]
200035a6:	e013      	b.n	200035d0 <wholeDevider+0x56>
		if (data <= devider) break;
200035a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200035ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
200035b0:	429a      	cmp	r2, r3
200035b2:	dd13      	ble.n	200035dc <wholeDevider+0x62>
		data -= devider;
200035b4:	88fa      	ldrh	r2, [r7, #6]
200035b6:	88bb      	ldrh	r3, [r7, #4]
200035b8:	1ad3      	subs	r3, r2, r3
200035ba:	b29b      	uxth	r3, r3
200035bc:	80fb      	strh	r3, [r7, #6]
		result ++;
200035be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
200035c2:	b29b      	uxth	r3, r3
200035c4:	3301      	adds	r3, #1
200035c6:	b29b      	uxth	r3, r3
200035c8:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < max; i ++) {
200035ca:	693b      	ldr	r3, [r7, #16]
200035cc:	3301      	adds	r3, #1
200035ce:	613b      	str	r3, [r7, #16]
200035d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
200035d4:	693a      	ldr	r2, [r7, #16]
200035d6:	429a      	cmp	r2, r3
200035d8:	dbe6      	blt.n	200035a8 <wholeDevider+0x2e>
200035da:	e000      	b.n	200035de <wholeDevider+0x64>
		if (data <= devider) break;
200035dc:	bf00      	nop
	}
	result ++;
200035de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
200035e2:	b29b      	uxth	r3, r3
200035e4:	3301      	adds	r3, #1
200035e6:	b29b      	uxth	r3, r3
200035e8:	82fb      	strh	r3, [r7, #22]
	return result;
200035ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
200035ee:	4618      	mov	r0, r3
200035f0:	371c      	adds	r7, #28
200035f2:	46bd      	mov	sp, r7
200035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
200035f8:	4770      	bx	lr
	...

200035fc <buzzerSet>:

void buzzerSet (int16_t time) {
200035fc:	b480      	push	{r7}
200035fe:	b083      	sub	sp, #12
20003600:	af00      	add	r7, sp, #0
20003602:	4603      	mov	r3, r0
20003604:	80fb      	strh	r3, [r7, #6]
	if (!timBuzzer){
20003606:	4b0a      	ldr	r3, [pc, #40]	; (20003630 <buzzerSet+0x34>)
20003608:	681b      	ldr	r3, [r3, #0]
2000360a:	2b00      	cmp	r3, #0
2000360c:	d109      	bne.n	20003622 <buzzerSet+0x26>
		timBuzzer = time;
2000360e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20003612:	4a07      	ldr	r2, [pc, #28]	; (20003630 <buzzerSet+0x34>)
20003614:	6013      	str	r3, [r2, #0]
		BUZER_SET;
20003616:	4b07      	ldr	r3, [pc, #28]	; (20003634 <buzzerSet+0x38>)
20003618:	699b      	ldr	r3, [r3, #24]
2000361a:	4a06      	ldr	r2, [pc, #24]	; (20003634 <buzzerSet+0x38>)
2000361c:	f043 0301 	orr.w	r3, r3, #1
20003620:	6193      	str	r3, [r2, #24]
	}
}
20003622:	bf00      	nop
20003624:	370c      	adds	r7, #12
20003626:	46bd      	mov	sp, r7
20003628:	f85d 7b04 	ldr.w	r7, [sp], #4
2000362c:	4770      	bx	lr
2000362e:	bf00      	nop
20003630:	20011af8 	.word	0x20011af8
20003634:	40020000 	.word	0x40020000

20003638 <writeDataToMemory>:

void writeDataToMemory(uint32_t address, uint32_t data) {
20003638:	b5b0      	push	{r4, r5, r7, lr}
2000363a:	b082      	sub	sp, #8
2000363c:	af00      	add	r7, sp, #0
2000363e:	6078      	str	r0, [r7, #4]
20003640:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
20003642:	f000 fc95 	bl	20003f70 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
20003646:	4b09      	ldr	r3, [pc, #36]	; (2000366c <writeDataToMemory+0x34>)
20003648:	22f3      	movs	r2, #243	; 0xf3
2000364a:	60da      	str	r2, [r3, #12]
	  //FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
2000364c:	683b      	ldr	r3, [r7, #0]
2000364e:	2200      	movs	r2, #0
20003650:	461c      	mov	r4, r3
20003652:	4615      	mov	r5, r2
20003654:	4622      	mov	r2, r4
20003656:	462b      	mov	r3, r5
20003658:	6879      	ldr	r1, [r7, #4]
2000365a:	2002      	movs	r0, #2
2000365c:	f000 fc34 	bl	20003ec8 <HAL_FLASH_Program>
	  HAL_FLASH_Lock();
20003660:	f000 fca8 	bl	20003fb4 <HAL_FLASH_Lock>
}
20003664:	bf00      	nop
20003666:	3708      	adds	r7, #8
20003668:	46bd      	mov	sp, r7
2000366a:	bdb0      	pop	{r4, r5, r7, pc}
2000366c:	40023c00 	.word	0x40023c00

20003670 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
20003670:	b480      	push	{r7}
20003672:	b083      	sub	sp, #12
20003674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
20003676:	2300      	movs	r3, #0
20003678:	607b      	str	r3, [r7, #4]
2000367a:	4b10      	ldr	r3, [pc, #64]	; (200036bc <HAL_MspInit+0x4c>)
2000367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000367e:	4a0f      	ldr	r2, [pc, #60]	; (200036bc <HAL_MspInit+0x4c>)
20003680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20003684:	6453      	str	r3, [r2, #68]	; 0x44
20003686:	4b0d      	ldr	r3, [pc, #52]	; (200036bc <HAL_MspInit+0x4c>)
20003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000368a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000368e:	607b      	str	r3, [r7, #4]
20003690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
20003692:	2300      	movs	r3, #0
20003694:	603b      	str	r3, [r7, #0]
20003696:	4b09      	ldr	r3, [pc, #36]	; (200036bc <HAL_MspInit+0x4c>)
20003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000369a:	4a08      	ldr	r2, [pc, #32]	; (200036bc <HAL_MspInit+0x4c>)
2000369c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200036a0:	6413      	str	r3, [r2, #64]	; 0x40
200036a2:	4b06      	ldr	r3, [pc, #24]	; (200036bc <HAL_MspInit+0x4c>)
200036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200036aa:	603b      	str	r3, [r7, #0]
200036ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
200036ae:	bf00      	nop
200036b0:	370c      	adds	r7, #12
200036b2:	46bd      	mov	sp, r7
200036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200036b8:	4770      	bx	lr
200036ba:	bf00      	nop
200036bc:	40023800 	.word	0x40023800

200036c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
200036c0:	b580      	push	{r7, lr}
200036c2:	b08c      	sub	sp, #48	; 0x30
200036c4:	af00      	add	r7, sp, #0
200036c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
200036c8:	f107 031c 	add.w	r3, r7, #28
200036cc:	2200      	movs	r2, #0
200036ce:	601a      	str	r2, [r3, #0]
200036d0:	605a      	str	r2, [r3, #4]
200036d2:	609a      	str	r2, [r3, #8]
200036d4:	60da      	str	r2, [r3, #12]
200036d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
200036d8:	687b      	ldr	r3, [r7, #4]
200036da:	681b      	ldr	r3, [r3, #0]
200036dc:	4a32      	ldr	r2, [pc, #200]	; (200037a8 <HAL_SPI_MspInit+0xe8>)
200036de:	4293      	cmp	r3, r2
200036e0:	d12c      	bne.n	2000373c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
200036e2:	2300      	movs	r3, #0
200036e4:	61bb      	str	r3, [r7, #24]
200036e6:	4b31      	ldr	r3, [pc, #196]	; (200037ac <HAL_SPI_MspInit+0xec>)
200036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200036ea:	4a30      	ldr	r2, [pc, #192]	; (200037ac <HAL_SPI_MspInit+0xec>)
200036ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
200036f0:	6453      	str	r3, [r2, #68]	; 0x44
200036f2:	4b2e      	ldr	r3, [pc, #184]	; (200037ac <HAL_SPI_MspInit+0xec>)
200036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200036f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
200036fa:	61bb      	str	r3, [r7, #24]
200036fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
200036fe:	2300      	movs	r3, #0
20003700:	617b      	str	r3, [r7, #20]
20003702:	4b2a      	ldr	r3, [pc, #168]	; (200037ac <HAL_SPI_MspInit+0xec>)
20003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003706:	4a29      	ldr	r2, [pc, #164]	; (200037ac <HAL_SPI_MspInit+0xec>)
20003708:	f043 0301 	orr.w	r3, r3, #1
2000370c:	6313      	str	r3, [r2, #48]	; 0x30
2000370e:	4b27      	ldr	r3, [pc, #156]	; (200037ac <HAL_SPI_MspInit+0xec>)
20003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003712:	f003 0301 	and.w	r3, r3, #1
20003716:	617b      	str	r3, [r7, #20]
20003718:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
2000371a:	23e0      	movs	r3, #224	; 0xe0
2000371c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000371e:	2302      	movs	r3, #2
20003720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003722:	2300      	movs	r3, #0
20003724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20003726:	2303      	movs	r3, #3
20003728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
2000372a:	2305      	movs	r3, #5
2000372c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000372e:	f107 031c 	add.w	r3, r7, #28
20003732:	4619      	mov	r1, r3
20003734:	481e      	ldr	r0, [pc, #120]	; (200037b0 <HAL_SPI_MspInit+0xf0>)
20003736:	f000 fd8d 	bl	20004254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
2000373a:	e031      	b.n	200037a0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
2000373c:	687b      	ldr	r3, [r7, #4]
2000373e:	681b      	ldr	r3, [r3, #0]
20003740:	4a1c      	ldr	r2, [pc, #112]	; (200037b4 <HAL_SPI_MspInit+0xf4>)
20003742:	4293      	cmp	r3, r2
20003744:	d12c      	bne.n	200037a0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
20003746:	2300      	movs	r3, #0
20003748:	613b      	str	r3, [r7, #16]
2000374a:	4b18      	ldr	r3, [pc, #96]	; (200037ac <HAL_SPI_MspInit+0xec>)
2000374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000374e:	4a17      	ldr	r2, [pc, #92]	; (200037ac <HAL_SPI_MspInit+0xec>)
20003750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20003754:	6413      	str	r3, [r2, #64]	; 0x40
20003756:	4b15      	ldr	r3, [pc, #84]	; (200037ac <HAL_SPI_MspInit+0xec>)
20003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000375a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000375e:	613b      	str	r3, [r7, #16]
20003760:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20003762:	2300      	movs	r3, #0
20003764:	60fb      	str	r3, [r7, #12]
20003766:	4b11      	ldr	r3, [pc, #68]	; (200037ac <HAL_SPI_MspInit+0xec>)
20003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000376a:	4a10      	ldr	r2, [pc, #64]	; (200037ac <HAL_SPI_MspInit+0xec>)
2000376c:	f043 0302 	orr.w	r3, r3, #2
20003770:	6313      	str	r3, [r2, #48]	; 0x30
20003772:	4b0e      	ldr	r3, [pc, #56]	; (200037ac <HAL_SPI_MspInit+0xec>)
20003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003776:	f003 0302 	and.w	r3, r3, #2
2000377a:	60fb      	str	r3, [r7, #12]
2000377c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
2000377e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
20003782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20003784:	2302      	movs	r3, #2
20003786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003788:	2300      	movs	r3, #0
2000378a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000378c:	2303      	movs	r3, #3
2000378e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
20003790:	2305      	movs	r3, #5
20003792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20003794:	f107 031c 	add.w	r3, r7, #28
20003798:	4619      	mov	r1, r3
2000379a:	4807      	ldr	r0, [pc, #28]	; (200037b8 <HAL_SPI_MspInit+0xf8>)
2000379c:	f000 fd5a 	bl	20004254 <HAL_GPIO_Init>
}
200037a0:	bf00      	nop
200037a2:	3730      	adds	r7, #48	; 0x30
200037a4:	46bd      	mov	sp, r7
200037a6:	bd80      	pop	{r7, pc}
200037a8:	40013000 	.word	0x40013000
200037ac:	40023800 	.word	0x40023800
200037b0:	40020000 	.word	0x40020000
200037b4:	40003800 	.word	0x40003800
200037b8:	40020400 	.word	0x40020400

200037bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
200037bc:	b580      	push	{r7, lr}
200037be:	b084      	sub	sp, #16
200037c0:	af00      	add	r7, sp, #0
200037c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
200037c4:	687b      	ldr	r3, [r7, #4]
200037c6:	681b      	ldr	r3, [r3, #0]
200037c8:	4a0e      	ldr	r2, [pc, #56]	; (20003804 <HAL_TIM_PWM_MspInit+0x48>)
200037ca:	4293      	cmp	r3, r2
200037cc:	d115      	bne.n	200037fa <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
200037ce:	2300      	movs	r3, #0
200037d0:	60fb      	str	r3, [r7, #12]
200037d2:	4b0d      	ldr	r3, [pc, #52]	; (20003808 <HAL_TIM_PWM_MspInit+0x4c>)
200037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200037d6:	4a0c      	ldr	r2, [pc, #48]	; (20003808 <HAL_TIM_PWM_MspInit+0x4c>)
200037d8:	f043 0308 	orr.w	r3, r3, #8
200037dc:	6413      	str	r3, [r2, #64]	; 0x40
200037de:	4b0a      	ldr	r3, [pc, #40]	; (20003808 <HAL_TIM_PWM_MspInit+0x4c>)
200037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200037e2:	f003 0308 	and.w	r3, r3, #8
200037e6:	60fb      	str	r3, [r7, #12]
200037e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
200037ea:	2200      	movs	r2, #0
200037ec:	2100      	movs	r1, #0
200037ee:	2032      	movs	r0, #50	; 0x32
200037f0:	f000 fb33 	bl	20003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
200037f4:	2032      	movs	r0, #50	; 0x32
200037f6:	f000 fb4c 	bl	20003e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
200037fa:	bf00      	nop
200037fc:	3710      	adds	r7, #16
200037fe:	46bd      	mov	sp, r7
20003800:	bd80      	pop	{r7, pc}
20003802:	bf00      	nop
20003804:	40000c00 	.word	0x40000c00
20003808:	40023800 	.word	0x40023800

2000380c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
2000380c:	b580      	push	{r7, lr}
2000380e:	b088      	sub	sp, #32
20003810:	af00      	add	r7, sp, #0
20003812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20003814:	f107 030c 	add.w	r3, r7, #12
20003818:	2200      	movs	r2, #0
2000381a:	601a      	str	r2, [r3, #0]
2000381c:	605a      	str	r2, [r3, #4]
2000381e:	609a      	str	r2, [r3, #8]
20003820:	60da      	str	r2, [r3, #12]
20003822:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
20003824:	687b      	ldr	r3, [r7, #4]
20003826:	681b      	ldr	r3, [r3, #0]
20003828:	4a12      	ldr	r2, [pc, #72]	; (20003874 <HAL_TIM_MspPostInit+0x68>)
2000382a:	4293      	cmp	r3, r2
2000382c:	d11d      	bne.n	2000386a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
2000382e:	2300      	movs	r3, #0
20003830:	60bb      	str	r3, [r7, #8]
20003832:	4b11      	ldr	r3, [pc, #68]	; (20003878 <HAL_TIM_MspPostInit+0x6c>)
20003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003836:	4a10      	ldr	r2, [pc, #64]	; (20003878 <HAL_TIM_MspPostInit+0x6c>)
20003838:	f043 0301 	orr.w	r3, r3, #1
2000383c:	6313      	str	r3, [r2, #48]	; 0x30
2000383e:	4b0e      	ldr	r3, [pc, #56]	; (20003878 <HAL_TIM_MspPostInit+0x6c>)
20003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003842:	f003 0301 	and.w	r3, r3, #1
20003846:	60bb      	str	r3, [r7, #8]
20003848:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
2000384a:	2306      	movs	r3, #6
2000384c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000384e:	2302      	movs	r3, #2
20003850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20003852:	2300      	movs	r3, #0
20003854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20003856:	2300      	movs	r3, #0
20003858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
2000385a:	2302      	movs	r3, #2
2000385c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000385e:	f107 030c 	add.w	r3, r7, #12
20003862:	4619      	mov	r1, r3
20003864:	4805      	ldr	r0, [pc, #20]	; (2000387c <HAL_TIM_MspPostInit+0x70>)
20003866:	f000 fcf5 	bl	20004254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
2000386a:	bf00      	nop
2000386c:	3720      	adds	r7, #32
2000386e:	46bd      	mov	sp, r7
20003870:	bd80      	pop	{r7, pc}
20003872:	bf00      	nop
20003874:	40000c00 	.word	0x40000c00
20003878:	40023800 	.word	0x40023800
2000387c:	40020000 	.word	0x40020000

20003880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20003880:	b480      	push	{r7}
20003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
20003884:	e7fe      	b.n	20003884 <NMI_Handler+0x4>

20003886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20003886:	b480      	push	{r7}
20003888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2000388a:	e7fe      	b.n	2000388a <HardFault_Handler+0x4>

2000388c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2000388c:	b480      	push	{r7}
2000388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
20003890:	e7fe      	b.n	20003890 <MemManage_Handler+0x4>

20003892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
20003892:	b480      	push	{r7}
20003894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20003896:	e7fe      	b.n	20003896 <BusFault_Handler+0x4>

20003898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20003898:	b480      	push	{r7}
2000389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2000389c:	e7fe      	b.n	2000389c <UsageFault_Handler+0x4>

2000389e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2000389e:	b480      	push	{r7}
200038a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
200038a2:	bf00      	nop
200038a4:	46bd      	mov	sp, r7
200038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
200038aa:	4770      	bx	lr

200038ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
200038ac:	b480      	push	{r7}
200038ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
200038b0:	bf00      	nop
200038b2:	46bd      	mov	sp, r7
200038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200038b8:	4770      	bx	lr

200038ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
200038ba:	b480      	push	{r7}
200038bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
200038be:	bf00      	nop
200038c0:	46bd      	mov	sp, r7
200038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
200038c6:	4770      	bx	lr

200038c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
200038c8:	b580      	push	{r7, lr}
200038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (timBigArea) timBigArea --;
200038cc:	4b1d      	ldr	r3, [pc, #116]	; (20003944 <SysTick_Handler+0x7c>)
200038ce:	681b      	ldr	r3, [r3, #0]
200038d0:	2b00      	cmp	r3, #0
200038d2:	d004      	beq.n	200038de <SysTick_Handler+0x16>
200038d4:	4b1b      	ldr	r3, [pc, #108]	; (20003944 <SysTick_Handler+0x7c>)
200038d6:	681b      	ldr	r3, [r3, #0]
200038d8:	3b01      	subs	r3, #1
200038da:	4a1a      	ldr	r2, [pc, #104]	; (20003944 <SysTick_Handler+0x7c>)
200038dc:	6013      	str	r3, [r2, #0]
	if (timButtonPress) timButtonPress --;
200038de:	4b1a      	ldr	r3, [pc, #104]	; (20003948 <SysTick_Handler+0x80>)
200038e0:	681b      	ldr	r3, [r3, #0]
200038e2:	2b00      	cmp	r3, #0
200038e4:	d004      	beq.n	200038f0 <SysTick_Handler+0x28>
200038e6:	4b18      	ldr	r3, [pc, #96]	; (20003948 <SysTick_Handler+0x80>)
200038e8:	681b      	ldr	r3, [r3, #0]
200038ea:	3b01      	subs	r3, #1
200038ec:	4a16      	ldr	r2, [pc, #88]	; (20003948 <SysTick_Handler+0x80>)
200038ee:	6013      	str	r3, [r2, #0]
	if (timHoldButtonPress) timHoldButtonPress --;
200038f0:	4b16      	ldr	r3, [pc, #88]	; (2000394c <SysTick_Handler+0x84>)
200038f2:	681b      	ldr	r3, [r3, #0]
200038f4:	2b00      	cmp	r3, #0
200038f6:	d004      	beq.n	20003902 <SysTick_Handler+0x3a>
200038f8:	4b14      	ldr	r3, [pc, #80]	; (2000394c <SysTick_Handler+0x84>)
200038fa:	681b      	ldr	r3, [r3, #0]
200038fc:	3b01      	subs	r3, #1
200038fe:	4a13      	ldr	r2, [pc, #76]	; (2000394c <SysTick_Handler+0x84>)
20003900:	6013      	str	r3, [r2, #0]
	if (timToDisplay) timToDisplay --;
20003902:	4b13      	ldr	r3, [pc, #76]	; (20003950 <SysTick_Handler+0x88>)
20003904:	681b      	ldr	r3, [r3, #0]
20003906:	2b00      	cmp	r3, #0
20003908:	d004      	beq.n	20003914 <SysTick_Handler+0x4c>
2000390a:	4b11      	ldr	r3, [pc, #68]	; (20003950 <SysTick_Handler+0x88>)
2000390c:	681b      	ldr	r3, [r3, #0]
2000390e:	3b01      	subs	r3, #1
20003910:	4a0f      	ldr	r2, [pc, #60]	; (20003950 <SysTick_Handler+0x88>)
20003912:	6013      	str	r3, [r2, #0]
	if (timBuzzer) timBuzzer --;
20003914:	4b0f      	ldr	r3, [pc, #60]	; (20003954 <SysTick_Handler+0x8c>)
20003916:	681b      	ldr	r3, [r3, #0]
20003918:	2b00      	cmp	r3, #0
2000391a:	d004      	beq.n	20003926 <SysTick_Handler+0x5e>
2000391c:	4b0d      	ldr	r3, [pc, #52]	; (20003954 <SysTick_Handler+0x8c>)
2000391e:	681b      	ldr	r3, [r3, #0]
20003920:	3b01      	subs	r3, #1
20003922:	4a0c      	ldr	r2, [pc, #48]	; (20003954 <SysTick_Handler+0x8c>)
20003924:	6013      	str	r3, [r2, #0]
	if (timBuzzer == 10) SET_BIT(GPIOA->BSRR, GPIO_BSRR_BR_0);
20003926:	4b0b      	ldr	r3, [pc, #44]	; (20003954 <SysTick_Handler+0x8c>)
20003928:	681b      	ldr	r3, [r3, #0]
2000392a:	2b0a      	cmp	r3, #10
2000392c:	d105      	bne.n	2000393a <SysTick_Handler+0x72>
2000392e:	4b0a      	ldr	r3, [pc, #40]	; (20003958 <SysTick_Handler+0x90>)
20003930:	699b      	ldr	r3, [r3, #24]
20003932:	4a09      	ldr	r2, [pc, #36]	; (20003958 <SysTick_Handler+0x90>)
20003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20003938:	6193      	str	r3, [r2, #24]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2000393a:	f000 f96f 	bl	20003c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2000393e:	bf00      	nop
20003940:	bd80      	pop	{r7, pc}
20003942:	bf00      	nop
20003944:	200119f0 	.word	0x200119f0
20003948:	200119f4 	.word	0x200119f4
2000394c:	200119f8 	.word	0x200119f8
20003950:	20011b00 	.word	0x20011b00
20003954:	20011af8 	.word	0x20011af8
20003958:	40020000 	.word	0x40020000

2000395c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
2000395c:	b580      	push	{r7, lr}
2000395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
20003960:	480e      	ldr	r0, [pc, #56]	; (2000399c <TIM5_IRQHandler+0x40>)
20003962:	f002 fa17 	bl	20005d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  if (countPWM) countPWM --;
20003966:	4b0e      	ldr	r3, [pc, #56]	; (200039a0 <TIM5_IRQHandler+0x44>)
20003968:	681b      	ldr	r3, [r3, #0]
2000396a:	2b00      	cmp	r3, #0
2000396c:	d004      	beq.n	20003978 <TIM5_IRQHandler+0x1c>
2000396e:	4b0c      	ldr	r3, [pc, #48]	; (200039a0 <TIM5_IRQHandler+0x44>)
20003970:	681b      	ldr	r3, [r3, #0]
20003972:	3b01      	subs	r3, #1
20003974:	4a0a      	ldr	r2, [pc, #40]	; (200039a0 <TIM5_IRQHandler+0x44>)
20003976:	6013      	str	r3, [r2, #0]
  if(!countPWM){
20003978:	4b09      	ldr	r3, [pc, #36]	; (200039a0 <TIM5_IRQHandler+0x44>)
2000397a:	681b      	ldr	r3, [r3, #0]
2000397c:	2b00      	cmp	r3, #0
2000397e:	d10a      	bne.n	20003996 <TIM5_IRQHandler+0x3a>
	  HAL_TIM_PWM_Stop_IT(&htim5, TIM_CHANNEL_2);
20003980:	2104      	movs	r1, #4
20003982:	4806      	ldr	r0, [pc, #24]	; (2000399c <TIM5_IRQHandler+0x40>)
20003984:	f002 f954 	bl	20005c30 <HAL_TIM_PWM_Stop_IT>
	  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
20003988:	2108      	movs	r1, #8
2000398a:	4804      	ldr	r0, [pc, #16]	; (2000399c <TIM5_IRQHandler+0x40>)
2000398c:	f001 ffee 	bl	2000596c <HAL_TIM_PWM_Stop>
	  HAL_TIM_Base_Stop(&htim5);
20003990:	4802      	ldr	r0, [pc, #8]	; (2000399c <TIM5_IRQHandler+0x40>)
20003992:	f001 fec5 	bl	20005720 <HAL_TIM_Base_Stop>
  }
  /* USER CODE END TIM5_IRQn 1 */
}
20003996:	bf00      	nop
20003998:	bd80      	pop	{r7, pc}
2000399a:	bf00      	nop
2000399c:	20011aac 	.word	0x20011aac
200039a0:	20011914 	.word	0x20011914

200039a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
200039a4:	b580      	push	{r7, lr}
200039a6:	b086      	sub	sp, #24
200039a8:	af00      	add	r7, sp, #0
200039aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
200039ac:	4a14      	ldr	r2, [pc, #80]	; (20003a00 <_sbrk+0x5c>)
200039ae:	4b15      	ldr	r3, [pc, #84]	; (20003a04 <_sbrk+0x60>)
200039b0:	1ad3      	subs	r3, r2, r3
200039b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
200039b4:	697b      	ldr	r3, [r7, #20]
200039b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
200039b8:	4b13      	ldr	r3, [pc, #76]	; (20003a08 <_sbrk+0x64>)
200039ba:	681b      	ldr	r3, [r3, #0]
200039bc:	2b00      	cmp	r3, #0
200039be:	d102      	bne.n	200039c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
200039c0:	4b11      	ldr	r3, [pc, #68]	; (20003a08 <_sbrk+0x64>)
200039c2:	4a12      	ldr	r2, [pc, #72]	; (20003a0c <_sbrk+0x68>)
200039c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
200039c6:	4b10      	ldr	r3, [pc, #64]	; (20003a08 <_sbrk+0x64>)
200039c8:	681a      	ldr	r2, [r3, #0]
200039ca:	687b      	ldr	r3, [r7, #4]
200039cc:	4413      	add	r3, r2
200039ce:	693a      	ldr	r2, [r7, #16]
200039d0:	429a      	cmp	r2, r3
200039d2:	d207      	bcs.n	200039e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
200039d4:	f002 fe8e 	bl	200066f4 <__errno>
200039d8:	4603      	mov	r3, r0
200039da:	220c      	movs	r2, #12
200039dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
200039de:	f04f 33ff 	mov.w	r3, #4294967295
200039e2:	e009      	b.n	200039f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
200039e4:	4b08      	ldr	r3, [pc, #32]	; (20003a08 <_sbrk+0x64>)
200039e6:	681b      	ldr	r3, [r3, #0]
200039e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
200039ea:	4b07      	ldr	r3, [pc, #28]	; (20003a08 <_sbrk+0x64>)
200039ec:	681a      	ldr	r2, [r3, #0]
200039ee:	687b      	ldr	r3, [r7, #4]
200039f0:	4413      	add	r3, r2
200039f2:	4a05      	ldr	r2, [pc, #20]	; (20003a08 <_sbrk+0x64>)
200039f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
200039f6:	68fb      	ldr	r3, [r7, #12]
}
200039f8:	4618      	mov	r0, r3
200039fa:	3718      	adds	r7, #24
200039fc:	46bd      	mov	sp, r7
200039fe:	bd80      	pop	{r7, pc}
20003a00:	20020000 	.word	0x20020000
20003a04:	00000400 	.word	0x00000400
20003a08:	20011afc 	.word	0x20011afc
20003a0c:	20011b38 	.word	0x20011b38

20003a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20003a10:	b480      	push	{r7}
20003a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20003a14:	4b06      	ldr	r3, [pc, #24]	; (20003a30 <SystemInit+0x20>)
20003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20003a1a:	4a05      	ldr	r2, [pc, #20]	; (20003a30 <SystemInit+0x20>)
20003a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20003a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
20003a24:	bf00      	nop
20003a26:	46bd      	mov	sp, r7
20003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
20003a2c:	4770      	bx	lr
20003a2e:	bf00      	nop
20003a30:	e000ed00 	.word	0xe000ed00

20003a34 <doWork>:
};
uint32_t timToDisplay = 0;
uint32_t* memADR = (uint32_t*)ADR_DATA_MIN_X;
//------------------------------ функции ---------------------------------------------//

void doWork (void){
20003a34:	b580      	push	{r7, lr}
20003a36:	af00      	add	r7, sp, #0
	startDisplay ();
20003a38:	f7fe fc58 	bl	200022ec <startDisplay>
	calibration();
20003a3c:	f000 f80c 	bl	20003a58 <calibration>
	ILI9341_ToucInit();
20003a40:	f7fe f828 	bl	20001a94 <ILI9341_ToucInit>
	workDisplay();
20003a44:	f7fe fe90 	bl	20002768 <workDisplay>
}
20003a48:	bf00      	nop
20003a4a:	bd80      	pop	{r7, pc}

20003a4c <Work>:

void Work (void){
20003a4c:	b580      	push	{r7, lr}
20003a4e:	af00      	add	r7, sp, #0
	checkButtonPress();
20003a50:	f7ff fa1e 	bl	20002e90 <checkButtonPress>
}
20003a54:	bf00      	nop
20003a56:	bd80      	pop	{r7, pc}

20003a58 <calibration>:
void setPowerOffButton (void) {

}


void calibration (void){
20003a58:	b580      	push	{r7, lr}
20003a5a:	af00      	add	r7, sp, #0
	if (*memADR == 0xFFFFFFFF) {
20003a5c:	4b30      	ldr	r3, [pc, #192]	; (20003b20 <calibration+0xc8>)
20003a5e:	681b      	ldr	r3, [r3, #0]
20003a60:	681b      	ldr	r3, [r3, #0]
20003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
20003a66:	d159      	bne.n	20003b1c <calibration+0xc4>
		reset:
20003a68:	bf00      	nop
		GUICalibration (LEFTUP);
20003a6a:	2000      	movs	r0, #0
20003a6c:	f7fe faf4 	bl	20002058 <GUICalibration>
		setOK (false);
20003a70:	2000      	movs	r0, #0
20003a72:	f7fe fc0b 	bl	2000228c <setOK>
		calibTouch(LEFTUP);
20003a76:	2000      	movs	r0, #0
20003a78:	f7fe f9a0 	bl	20001dbc <calibTouch>
		setOK (true);
20003a7c:	2001      	movs	r0, #1
20003a7e:	f7fe fc05 	bl	2000228c <setOK>
		HAL_Delay(1000);
20003a82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20003a86:	f000 f8e9 	bl	20003c5c <HAL_Delay>

		GUICalibration (RIGHTUP);
20003a8a:	2001      	movs	r0, #1
20003a8c:	f7fe fae4 	bl	20002058 <GUICalibration>
		setOK (false);
20003a90:	2000      	movs	r0, #0
20003a92:	f7fe fbfb 	bl	2000228c <setOK>
		calibTouch(RIGHTUP);
20003a96:	2001      	movs	r0, #1
20003a98:	f7fe f990 	bl	20001dbc <calibTouch>
		setOK (true);
20003a9c:	2001      	movs	r0, #1
20003a9e:	f7fe fbf5 	bl	2000228c <setOK>
		HAL_Delay(1000);
20003aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20003aa6:	f000 f8d9 	bl	20003c5c <HAL_Delay>

		GUICalibration (LEFTDOWN);
20003aaa:	2002      	movs	r0, #2
20003aac:	f7fe fad4 	bl	20002058 <GUICalibration>
		setOK (false);
20003ab0:	2000      	movs	r0, #0
20003ab2:	f7fe fbeb 	bl	2000228c <setOK>
		calibTouch(LEFTDOWN);
20003ab6:	2002      	movs	r0, #2
20003ab8:	f7fe f980 	bl	20001dbc <calibTouch>
		setOK (true);
20003abc:	2001      	movs	r0, #1
20003abe:	f7fe fbe5 	bl	2000228c <setOK>
		HAL_Delay(1000);
20003ac2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20003ac6:	f000 f8c9 	bl	20003c5c <HAL_Delay>

		GUICalibration (RIGHTDOWN);
20003aca:	2003      	movs	r0, #3
20003acc:	f7fe fac4 	bl	20002058 <GUICalibration>
		setOK (false);
20003ad0:	2000      	movs	r0, #0
20003ad2:	f7fe fbdb 	bl	2000228c <setOK>
		calibTouch(RIGHTDOWN);
20003ad6:	2003      	movs	r0, #3
20003ad8:	f7fe f970 	bl	20001dbc <calibTouch>
		setOK (true);
20003adc:	2001      	movs	r0, #1
20003ade:	f7fe fbd5 	bl	2000228c <setOK>
		HAL_Delay(1000);
20003ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20003ae6:	f000 f8b9 	bl	20003c5c <HAL_Delay>

		GUICalibration (CHECKCALIB);
20003aea:	2004      	movs	r0, #4
20003aec:	f7fe fab4 	bl	20002058 <GUICalibration>
		if (calibTouch(CHECKCALIB)) {
20003af0:	2004      	movs	r0, #4
20003af2:	f7fe f963 	bl	20001dbc <calibTouch>
20003af6:	4603      	mov	r3, r0
20003af8:	2b00      	cmp	r3, #0
20003afa:	d007      	beq.n	20003b0c <calibration+0xb4>
			GUICalibration(CALIBOK);
20003afc:	2005      	movs	r0, #5
20003afe:	f7fe faab 	bl	20002058 <GUICalibration>
			HAL_Delay(1000);
20003b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20003b06:	f000 f8a9 	bl	20003c5c <HAL_Delay>
			GUICalibration(ERRCALIB);
			HAL_Delay(1000);
			goto reset;
		}
	}
}
20003b0a:	e007      	b.n	20003b1c <calibration+0xc4>
			GUICalibration(ERRCALIB);
20003b0c:	2006      	movs	r0, #6
20003b0e:	f7fe faa3 	bl	20002058 <GUICalibration>
			HAL_Delay(1000);
20003b12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20003b16:	f000 f8a1 	bl	20003c5c <HAL_Delay>
			goto reset;
20003b1a:	e7a6      	b.n	20003a6a <calibration+0x12>
}
20003b1c:	bf00      	nop
20003b1e:	bd80      	pop	{r7, pc}
20003b20:	2001192c 	.word	0x2001192c

20003b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
20003b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 20003b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20003b28:	480d      	ldr	r0, [pc, #52]	; (20003b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
20003b2a:	490e      	ldr	r1, [pc, #56]	; (20003b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
20003b2c:	4a0e      	ldr	r2, [pc, #56]	; (20003b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
20003b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
20003b30:	e002      	b.n	20003b38 <LoopCopyDataInit>

20003b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20003b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20003b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20003b36:	3304      	adds	r3, #4

20003b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20003b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20003b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
20003b3c:	d3f9      	bcc.n	20003b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20003b3e:	4a0b      	ldr	r2, [pc, #44]	; (20003b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
20003b40:	4c0b      	ldr	r4, [pc, #44]	; (20003b70 <LoopFillZerobss+0x26>)
  movs r3, #0
20003b42:	2300      	movs	r3, #0
  b LoopFillZerobss
20003b44:	e001      	b.n	20003b4a <LoopFillZerobss>

20003b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20003b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20003b48:	3204      	adds	r2, #4

20003b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20003b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
20003b4c:	d3fb      	bcc.n	20003b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
20003b4e:	f7ff ff5f 	bl	20003a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20003b52:	f002 fdd5 	bl	20006700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20003b56:	f7ff fb21 	bl	2000319c <main>
  bx  lr    
20003b5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
20003b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
20003b60:	200118fc 	.word	0x200118fc
  ldr r1, =_edata
20003b64:	2001199c 	.word	0x2001199c
  ldr r2, =_sidata
20003b68:	200118fc 	.word	0x200118fc
  ldr r2, =_sbss
20003b6c:	2001199c 	.word	0x2001199c
  ldr r4, =_ebss
20003b70:	20011b38 	.word	0x20011b38

20003b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20003b74:	e7fe      	b.n	20003b74 <ADC_IRQHandler>
	...

20003b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20003b78:	b580      	push	{r7, lr}
20003b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20003b7c:	4b0e      	ldr	r3, [pc, #56]	; (20003bb8 <HAL_Init+0x40>)
20003b7e:	681b      	ldr	r3, [r3, #0]
20003b80:	4a0d      	ldr	r2, [pc, #52]	; (20003bb8 <HAL_Init+0x40>)
20003b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20003b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
20003b88:	4b0b      	ldr	r3, [pc, #44]	; (20003bb8 <HAL_Init+0x40>)
20003b8a:	681b      	ldr	r3, [r3, #0]
20003b8c:	4a0a      	ldr	r2, [pc, #40]	; (20003bb8 <HAL_Init+0x40>)
20003b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20003b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20003b94:	4b08      	ldr	r3, [pc, #32]	; (20003bb8 <HAL_Init+0x40>)
20003b96:	681b      	ldr	r3, [r3, #0]
20003b98:	4a07      	ldr	r2, [pc, #28]	; (20003bb8 <HAL_Init+0x40>)
20003b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20003b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20003ba0:	2003      	movs	r0, #3
20003ba2:	f000 f94f 	bl	20003e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20003ba6:	200f      	movs	r0, #15
20003ba8:	f000 f808 	bl	20003bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20003bac:	f7ff fd60 	bl	20003670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20003bb0:	2300      	movs	r3, #0
}
20003bb2:	4618      	mov	r0, r3
20003bb4:	bd80      	pop	{r7, pc}
20003bb6:	bf00      	nop
20003bb8:	40023c00 	.word	0x40023c00

20003bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20003bbc:	b580      	push	{r7, lr}
20003bbe:	b082      	sub	sp, #8
20003bc0:	af00      	add	r7, sp, #0
20003bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20003bc4:	4b12      	ldr	r3, [pc, #72]	; (20003c10 <HAL_InitTick+0x54>)
20003bc6:	681a      	ldr	r2, [r3, #0]
20003bc8:	4b12      	ldr	r3, [pc, #72]	; (20003c14 <HAL_InitTick+0x58>)
20003bca:	781b      	ldrb	r3, [r3, #0]
20003bcc:	4619      	mov	r1, r3
20003bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
20003bd2:	fbb3 f3f1 	udiv	r3, r3, r1
20003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
20003bda:	4618      	mov	r0, r3
20003bdc:	f000 f967 	bl	20003eae <HAL_SYSTICK_Config>
20003be0:	4603      	mov	r3, r0
20003be2:	2b00      	cmp	r3, #0
20003be4:	d001      	beq.n	20003bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
20003be6:	2301      	movs	r3, #1
20003be8:	e00e      	b.n	20003c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20003bea:	687b      	ldr	r3, [r7, #4]
20003bec:	2b0f      	cmp	r3, #15
20003bee:	d80a      	bhi.n	20003c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20003bf0:	2200      	movs	r2, #0
20003bf2:	6879      	ldr	r1, [r7, #4]
20003bf4:	f04f 30ff 	mov.w	r0, #4294967295
20003bf8:	f000 f92f 	bl	20003e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20003bfc:	4a06      	ldr	r2, [pc, #24]	; (20003c18 <HAL_InitTick+0x5c>)
20003bfe:	687b      	ldr	r3, [r7, #4]
20003c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20003c02:	2300      	movs	r3, #0
20003c04:	e000      	b.n	20003c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
20003c06:	2301      	movs	r3, #1
}
20003c08:	4618      	mov	r0, r3
20003c0a:	3708      	adds	r7, #8
20003c0c:	46bd      	mov	sp, r7
20003c0e:	bd80      	pop	{r7, pc}
20003c10:	20011918 	.word	0x20011918
20003c14:	20011934 	.word	0x20011934
20003c18:	20011930 	.word	0x20011930

20003c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20003c1c:	b480      	push	{r7}
20003c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20003c20:	4b06      	ldr	r3, [pc, #24]	; (20003c3c <HAL_IncTick+0x20>)
20003c22:	781b      	ldrb	r3, [r3, #0]
20003c24:	461a      	mov	r2, r3
20003c26:	4b06      	ldr	r3, [pc, #24]	; (20003c40 <HAL_IncTick+0x24>)
20003c28:	681b      	ldr	r3, [r3, #0]
20003c2a:	4413      	add	r3, r2
20003c2c:	4a04      	ldr	r2, [pc, #16]	; (20003c40 <HAL_IncTick+0x24>)
20003c2e:	6013      	str	r3, [r2, #0]
}
20003c30:	bf00      	nop
20003c32:	46bd      	mov	sp, r7
20003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
20003c38:	4770      	bx	lr
20003c3a:	bf00      	nop
20003c3c:	20011934 	.word	0x20011934
20003c40:	20011b04 	.word	0x20011b04

20003c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20003c44:	b480      	push	{r7}
20003c46:	af00      	add	r7, sp, #0
  return uwTick;
20003c48:	4b03      	ldr	r3, [pc, #12]	; (20003c58 <HAL_GetTick+0x14>)
20003c4a:	681b      	ldr	r3, [r3, #0]
}
20003c4c:	4618      	mov	r0, r3
20003c4e:	46bd      	mov	sp, r7
20003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
20003c54:	4770      	bx	lr
20003c56:	bf00      	nop
20003c58:	20011b04 	.word	0x20011b04

20003c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20003c5c:	b580      	push	{r7, lr}
20003c5e:	b084      	sub	sp, #16
20003c60:	af00      	add	r7, sp, #0
20003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20003c64:	f7ff ffee 	bl	20003c44 <HAL_GetTick>
20003c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20003c6a:	687b      	ldr	r3, [r7, #4]
20003c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
20003c6e:	68fb      	ldr	r3, [r7, #12]
20003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
20003c74:	d005      	beq.n	20003c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
20003c76:	4b0a      	ldr	r3, [pc, #40]	; (20003ca0 <HAL_Delay+0x44>)
20003c78:	781b      	ldrb	r3, [r3, #0]
20003c7a:	461a      	mov	r2, r3
20003c7c:	68fb      	ldr	r3, [r7, #12]
20003c7e:	4413      	add	r3, r2
20003c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
20003c82:	bf00      	nop
20003c84:	f7ff ffde 	bl	20003c44 <HAL_GetTick>
20003c88:	4602      	mov	r2, r0
20003c8a:	68bb      	ldr	r3, [r7, #8]
20003c8c:	1ad3      	subs	r3, r2, r3
20003c8e:	68fa      	ldr	r2, [r7, #12]
20003c90:	429a      	cmp	r2, r3
20003c92:	d8f7      	bhi.n	20003c84 <HAL_Delay+0x28>
  {
  }
}
20003c94:	bf00      	nop
20003c96:	bf00      	nop
20003c98:	3710      	adds	r7, #16
20003c9a:	46bd      	mov	sp, r7
20003c9c:	bd80      	pop	{r7, pc}
20003c9e:	bf00      	nop
20003ca0:	20011934 	.word	0x20011934

20003ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20003ca4:	b480      	push	{r7}
20003ca6:	b085      	sub	sp, #20
20003ca8:	af00      	add	r7, sp, #0
20003caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20003cac:	687b      	ldr	r3, [r7, #4]
20003cae:	f003 0307 	and.w	r3, r3, #7
20003cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20003cb4:	4b0c      	ldr	r3, [pc, #48]	; (20003ce8 <__NVIC_SetPriorityGrouping+0x44>)
20003cb6:	68db      	ldr	r3, [r3, #12]
20003cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20003cba:	68ba      	ldr	r2, [r7, #8]
20003cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
20003cc0:	4013      	ands	r3, r2
20003cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20003cc4:	68fb      	ldr	r3, [r7, #12]
20003cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20003cc8:	68bb      	ldr	r3, [r7, #8]
20003cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20003ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
20003cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20003cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20003cd6:	4a04      	ldr	r2, [pc, #16]	; (20003ce8 <__NVIC_SetPriorityGrouping+0x44>)
20003cd8:	68bb      	ldr	r3, [r7, #8]
20003cda:	60d3      	str	r3, [r2, #12]
}
20003cdc:	bf00      	nop
20003cde:	3714      	adds	r7, #20
20003ce0:	46bd      	mov	sp, r7
20003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
20003ce6:	4770      	bx	lr
20003ce8:	e000ed00 	.word	0xe000ed00

20003cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20003cec:	b480      	push	{r7}
20003cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20003cf0:	4b04      	ldr	r3, [pc, #16]	; (20003d04 <__NVIC_GetPriorityGrouping+0x18>)
20003cf2:	68db      	ldr	r3, [r3, #12]
20003cf4:	0a1b      	lsrs	r3, r3, #8
20003cf6:	f003 0307 	and.w	r3, r3, #7
}
20003cfa:	4618      	mov	r0, r3
20003cfc:	46bd      	mov	sp, r7
20003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
20003d02:	4770      	bx	lr
20003d04:	e000ed00 	.word	0xe000ed00

20003d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
20003d08:	b480      	push	{r7}
20003d0a:	b083      	sub	sp, #12
20003d0c:	af00      	add	r7, sp, #0
20003d0e:	4603      	mov	r3, r0
20003d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
20003d16:	2b00      	cmp	r3, #0
20003d18:	db0b      	blt.n	20003d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20003d1a:	79fb      	ldrb	r3, [r7, #7]
20003d1c:	f003 021f 	and.w	r2, r3, #31
20003d20:	4907      	ldr	r1, [pc, #28]	; (20003d40 <__NVIC_EnableIRQ+0x38>)
20003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
20003d26:	095b      	lsrs	r3, r3, #5
20003d28:	2001      	movs	r0, #1
20003d2a:	fa00 f202 	lsl.w	r2, r0, r2
20003d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20003d32:	bf00      	nop
20003d34:	370c      	adds	r7, #12
20003d36:	46bd      	mov	sp, r7
20003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
20003d3c:	4770      	bx	lr
20003d3e:	bf00      	nop
20003d40:	e000e100 	.word	0xe000e100

20003d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20003d44:	b480      	push	{r7}
20003d46:	b083      	sub	sp, #12
20003d48:	af00      	add	r7, sp, #0
20003d4a:	4603      	mov	r3, r0
20003d4c:	6039      	str	r1, [r7, #0]
20003d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
20003d54:	2b00      	cmp	r3, #0
20003d56:	db0a      	blt.n	20003d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20003d58:	683b      	ldr	r3, [r7, #0]
20003d5a:	b2da      	uxtb	r2, r3
20003d5c:	490c      	ldr	r1, [pc, #48]	; (20003d90 <__NVIC_SetPriority+0x4c>)
20003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20003d62:	0112      	lsls	r2, r2, #4
20003d64:	b2d2      	uxtb	r2, r2
20003d66:	440b      	add	r3, r1
20003d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20003d6c:	e00a      	b.n	20003d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20003d6e:	683b      	ldr	r3, [r7, #0]
20003d70:	b2da      	uxtb	r2, r3
20003d72:	4908      	ldr	r1, [pc, #32]	; (20003d94 <__NVIC_SetPriority+0x50>)
20003d74:	79fb      	ldrb	r3, [r7, #7]
20003d76:	f003 030f 	and.w	r3, r3, #15
20003d7a:	3b04      	subs	r3, #4
20003d7c:	0112      	lsls	r2, r2, #4
20003d7e:	b2d2      	uxtb	r2, r2
20003d80:	440b      	add	r3, r1
20003d82:	761a      	strb	r2, [r3, #24]
}
20003d84:	bf00      	nop
20003d86:	370c      	adds	r7, #12
20003d88:	46bd      	mov	sp, r7
20003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
20003d8e:	4770      	bx	lr
20003d90:	e000e100 	.word	0xe000e100
20003d94:	e000ed00 	.word	0xe000ed00

20003d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20003d98:	b480      	push	{r7}
20003d9a:	b089      	sub	sp, #36	; 0x24
20003d9c:	af00      	add	r7, sp, #0
20003d9e:	60f8      	str	r0, [r7, #12]
20003da0:	60b9      	str	r1, [r7, #8]
20003da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20003da4:	68fb      	ldr	r3, [r7, #12]
20003da6:	f003 0307 	and.w	r3, r3, #7
20003daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20003dac:	69fb      	ldr	r3, [r7, #28]
20003dae:	f1c3 0307 	rsb	r3, r3, #7
20003db2:	2b04      	cmp	r3, #4
20003db4:	bf28      	it	cs
20003db6:	2304      	movcs	r3, #4
20003db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20003dba:	69fb      	ldr	r3, [r7, #28]
20003dbc:	3304      	adds	r3, #4
20003dbe:	2b06      	cmp	r3, #6
20003dc0:	d902      	bls.n	20003dc8 <NVIC_EncodePriority+0x30>
20003dc2:	69fb      	ldr	r3, [r7, #28]
20003dc4:	3b03      	subs	r3, #3
20003dc6:	e000      	b.n	20003dca <NVIC_EncodePriority+0x32>
20003dc8:	2300      	movs	r3, #0
20003dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20003dcc:	f04f 32ff 	mov.w	r2, #4294967295
20003dd0:	69bb      	ldr	r3, [r7, #24]
20003dd2:	fa02 f303 	lsl.w	r3, r2, r3
20003dd6:	43da      	mvns	r2, r3
20003dd8:	68bb      	ldr	r3, [r7, #8]
20003dda:	401a      	ands	r2, r3
20003ddc:	697b      	ldr	r3, [r7, #20]
20003dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20003de0:	f04f 31ff 	mov.w	r1, #4294967295
20003de4:	697b      	ldr	r3, [r7, #20]
20003de6:	fa01 f303 	lsl.w	r3, r1, r3
20003dea:	43d9      	mvns	r1, r3
20003dec:	687b      	ldr	r3, [r7, #4]
20003dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20003df0:	4313      	orrs	r3, r2
         );
}
20003df2:	4618      	mov	r0, r3
20003df4:	3724      	adds	r7, #36	; 0x24
20003df6:	46bd      	mov	sp, r7
20003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
20003dfc:	4770      	bx	lr
	...

20003e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20003e00:	b580      	push	{r7, lr}
20003e02:	b082      	sub	sp, #8
20003e04:	af00      	add	r7, sp, #0
20003e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20003e08:	687b      	ldr	r3, [r7, #4]
20003e0a:	3b01      	subs	r3, #1
20003e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20003e10:	d301      	bcc.n	20003e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
20003e12:	2301      	movs	r3, #1
20003e14:	e00f      	b.n	20003e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20003e16:	4a0a      	ldr	r2, [pc, #40]	; (20003e40 <SysTick_Config+0x40>)
20003e18:	687b      	ldr	r3, [r7, #4]
20003e1a:	3b01      	subs	r3, #1
20003e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20003e1e:	210f      	movs	r1, #15
20003e20:	f04f 30ff 	mov.w	r0, #4294967295
20003e24:	f7ff ff8e 	bl	20003d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20003e28:	4b05      	ldr	r3, [pc, #20]	; (20003e40 <SysTick_Config+0x40>)
20003e2a:	2200      	movs	r2, #0
20003e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20003e2e:	4b04      	ldr	r3, [pc, #16]	; (20003e40 <SysTick_Config+0x40>)
20003e30:	2207      	movs	r2, #7
20003e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20003e34:	2300      	movs	r3, #0
}
20003e36:	4618      	mov	r0, r3
20003e38:	3708      	adds	r7, #8
20003e3a:	46bd      	mov	sp, r7
20003e3c:	bd80      	pop	{r7, pc}
20003e3e:	bf00      	nop
20003e40:	e000e010 	.word	0xe000e010

20003e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20003e44:	b580      	push	{r7, lr}
20003e46:	b082      	sub	sp, #8
20003e48:	af00      	add	r7, sp, #0
20003e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20003e4c:	6878      	ldr	r0, [r7, #4]
20003e4e:	f7ff ff29 	bl	20003ca4 <__NVIC_SetPriorityGrouping>
}
20003e52:	bf00      	nop
20003e54:	3708      	adds	r7, #8
20003e56:	46bd      	mov	sp, r7
20003e58:	bd80      	pop	{r7, pc}

20003e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
20003e5a:	b580      	push	{r7, lr}
20003e5c:	b086      	sub	sp, #24
20003e5e:	af00      	add	r7, sp, #0
20003e60:	4603      	mov	r3, r0
20003e62:	60b9      	str	r1, [r7, #8]
20003e64:	607a      	str	r2, [r7, #4]
20003e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
20003e68:	2300      	movs	r3, #0
20003e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20003e6c:	f7ff ff3e 	bl	20003cec <__NVIC_GetPriorityGrouping>
20003e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
20003e72:	687a      	ldr	r2, [r7, #4]
20003e74:	68b9      	ldr	r1, [r7, #8]
20003e76:	6978      	ldr	r0, [r7, #20]
20003e78:	f7ff ff8e 	bl	20003d98 <NVIC_EncodePriority>
20003e7c:	4602      	mov	r2, r0
20003e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
20003e82:	4611      	mov	r1, r2
20003e84:	4618      	mov	r0, r3
20003e86:	f7ff ff5d 	bl	20003d44 <__NVIC_SetPriority>
}
20003e8a:	bf00      	nop
20003e8c:	3718      	adds	r7, #24
20003e8e:	46bd      	mov	sp, r7
20003e90:	bd80      	pop	{r7, pc}

20003e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
20003e92:	b580      	push	{r7, lr}
20003e94:	b082      	sub	sp, #8
20003e96:	af00      	add	r7, sp, #0
20003e98:	4603      	mov	r3, r0
20003e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
20003e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20003ea0:	4618      	mov	r0, r3
20003ea2:	f7ff ff31 	bl	20003d08 <__NVIC_EnableIRQ>
}
20003ea6:	bf00      	nop
20003ea8:	3708      	adds	r7, #8
20003eaa:	46bd      	mov	sp, r7
20003eac:	bd80      	pop	{r7, pc}

20003eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
20003eae:	b580      	push	{r7, lr}
20003eb0:	b082      	sub	sp, #8
20003eb2:	af00      	add	r7, sp, #0
20003eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20003eb6:	6878      	ldr	r0, [r7, #4]
20003eb8:	f7ff ffa2 	bl	20003e00 <SysTick_Config>
20003ebc:	4603      	mov	r3, r0
}
20003ebe:	4618      	mov	r0, r3
20003ec0:	3708      	adds	r7, #8
20003ec2:	46bd      	mov	sp, r7
20003ec4:	bd80      	pop	{r7, pc}
	...

20003ec8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20003ec8:	b580      	push	{r7, lr}
20003eca:	b086      	sub	sp, #24
20003ecc:	af00      	add	r7, sp, #0
20003ece:	60f8      	str	r0, [r7, #12]
20003ed0:	60b9      	str	r1, [r7, #8]
20003ed2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
20003ed6:	2301      	movs	r3, #1
20003ed8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20003eda:	4b23      	ldr	r3, [pc, #140]	; (20003f68 <HAL_FLASH_Program+0xa0>)
20003edc:	7e1b      	ldrb	r3, [r3, #24]
20003ede:	2b01      	cmp	r3, #1
20003ee0:	d101      	bne.n	20003ee6 <HAL_FLASH_Program+0x1e>
20003ee2:	2302      	movs	r3, #2
20003ee4:	e03b      	b.n	20003f5e <HAL_FLASH_Program+0x96>
20003ee6:	4b20      	ldr	r3, [pc, #128]	; (20003f68 <HAL_FLASH_Program+0xa0>)
20003ee8:	2201      	movs	r2, #1
20003eea:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20003eec:	f24c 3050 	movw	r0, #50000	; 0xc350
20003ef0:	f000 f870 	bl	20003fd4 <FLASH_WaitForLastOperation>
20003ef4:	4603      	mov	r3, r0
20003ef6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
20003ef8:	7dfb      	ldrb	r3, [r7, #23]
20003efa:	2b00      	cmp	r3, #0
20003efc:	d12b      	bne.n	20003f56 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
20003efe:	68fb      	ldr	r3, [r7, #12]
20003f00:	2b00      	cmp	r3, #0
20003f02:	d105      	bne.n	20003f10 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
20003f04:	783b      	ldrb	r3, [r7, #0]
20003f06:	4619      	mov	r1, r3
20003f08:	68b8      	ldr	r0, [r7, #8]
20003f0a:	f000 f91b 	bl	20004144 <FLASH_Program_Byte>
20003f0e:	e016      	b.n	20003f3e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
20003f10:	68fb      	ldr	r3, [r7, #12]
20003f12:	2b01      	cmp	r3, #1
20003f14:	d105      	bne.n	20003f22 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
20003f16:	883b      	ldrh	r3, [r7, #0]
20003f18:	4619      	mov	r1, r3
20003f1a:	68b8      	ldr	r0, [r7, #8]
20003f1c:	f000 f8ee 	bl	200040fc <FLASH_Program_HalfWord>
20003f20:	e00d      	b.n	20003f3e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
20003f22:	68fb      	ldr	r3, [r7, #12]
20003f24:	2b02      	cmp	r3, #2
20003f26:	d105      	bne.n	20003f34 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
20003f28:	683b      	ldr	r3, [r7, #0]
20003f2a:	4619      	mov	r1, r3
20003f2c:	68b8      	ldr	r0, [r7, #8]
20003f2e:	f000 f8c3 	bl	200040b8 <FLASH_Program_Word>
20003f32:	e004      	b.n	20003f3e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
20003f34:	e9d7 2300 	ldrd	r2, r3, [r7]
20003f38:	68b8      	ldr	r0, [r7, #8]
20003f3a:	f000 f88b 	bl	20004054 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20003f3e:	f24c 3050 	movw	r0, #50000	; 0xc350
20003f42:	f000 f847 	bl	20003fd4 <FLASH_WaitForLastOperation>
20003f46:	4603      	mov	r3, r0
20003f48:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
20003f4a:	4b08      	ldr	r3, [pc, #32]	; (20003f6c <HAL_FLASH_Program+0xa4>)
20003f4c:	691b      	ldr	r3, [r3, #16]
20003f4e:	4a07      	ldr	r2, [pc, #28]	; (20003f6c <HAL_FLASH_Program+0xa4>)
20003f50:	f023 0301 	bic.w	r3, r3, #1
20003f54:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20003f56:	4b04      	ldr	r3, [pc, #16]	; (20003f68 <HAL_FLASH_Program+0xa0>)
20003f58:	2200      	movs	r2, #0
20003f5a:	761a      	strb	r2, [r3, #24]
  
  return status;
20003f5c:	7dfb      	ldrb	r3, [r7, #23]
}
20003f5e:	4618      	mov	r0, r3
20003f60:	3718      	adds	r7, #24
20003f62:	46bd      	mov	sp, r7
20003f64:	bd80      	pop	{r7, pc}
20003f66:	bf00      	nop
20003f68:	20011b08 	.word	0x20011b08
20003f6c:	40023c00 	.word	0x40023c00

20003f70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
20003f70:	b480      	push	{r7}
20003f72:	b083      	sub	sp, #12
20003f74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
20003f76:	2300      	movs	r3, #0
20003f78:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20003f7a:	4b0b      	ldr	r3, [pc, #44]	; (20003fa8 <HAL_FLASH_Unlock+0x38>)
20003f7c:	691b      	ldr	r3, [r3, #16]
20003f7e:	2b00      	cmp	r3, #0
20003f80:	da0b      	bge.n	20003f9a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
20003f82:	4b09      	ldr	r3, [pc, #36]	; (20003fa8 <HAL_FLASH_Unlock+0x38>)
20003f84:	4a09      	ldr	r2, [pc, #36]	; (20003fac <HAL_FLASH_Unlock+0x3c>)
20003f86:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
20003f88:	4b07      	ldr	r3, [pc, #28]	; (20003fa8 <HAL_FLASH_Unlock+0x38>)
20003f8a:	4a09      	ldr	r2, [pc, #36]	; (20003fb0 <HAL_FLASH_Unlock+0x40>)
20003f8c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20003f8e:	4b06      	ldr	r3, [pc, #24]	; (20003fa8 <HAL_FLASH_Unlock+0x38>)
20003f90:	691b      	ldr	r3, [r3, #16]
20003f92:	2b00      	cmp	r3, #0
20003f94:	da01      	bge.n	20003f9a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
20003f96:	2301      	movs	r3, #1
20003f98:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
20003f9a:	79fb      	ldrb	r3, [r7, #7]
}
20003f9c:	4618      	mov	r0, r3
20003f9e:	370c      	adds	r7, #12
20003fa0:	46bd      	mov	sp, r7
20003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
20003fa6:	4770      	bx	lr
20003fa8:	40023c00 	.word	0x40023c00
20003fac:	45670123 	.word	0x45670123
20003fb0:	cdef89ab 	.word	0xcdef89ab

20003fb4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
20003fb4:	b480      	push	{r7}
20003fb6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
20003fb8:	4b05      	ldr	r3, [pc, #20]	; (20003fd0 <HAL_FLASH_Lock+0x1c>)
20003fba:	691b      	ldr	r3, [r3, #16]
20003fbc:	4a04      	ldr	r2, [pc, #16]	; (20003fd0 <HAL_FLASH_Lock+0x1c>)
20003fbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20003fc2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
20003fc4:	2300      	movs	r3, #0
}
20003fc6:	4618      	mov	r0, r3
20003fc8:	46bd      	mov	sp, r7
20003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
20003fce:	4770      	bx	lr
20003fd0:	40023c00 	.word	0x40023c00

20003fd4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
20003fd4:	b580      	push	{r7, lr}
20003fd6:	b084      	sub	sp, #16
20003fd8:	af00      	add	r7, sp, #0
20003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20003fdc:	2300      	movs	r3, #0
20003fde:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20003fe0:	4b1a      	ldr	r3, [pc, #104]	; (2000404c <FLASH_WaitForLastOperation+0x78>)
20003fe2:	2200      	movs	r2, #0
20003fe4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
20003fe6:	f7ff fe2d 	bl	20003c44 <HAL_GetTick>
20003fea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20003fec:	e010      	b.n	20004010 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
20003fee:	687b      	ldr	r3, [r7, #4]
20003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
20003ff4:	d00c      	beq.n	20004010 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
20003ff6:	687b      	ldr	r3, [r7, #4]
20003ff8:	2b00      	cmp	r3, #0
20003ffa:	d007      	beq.n	2000400c <FLASH_WaitForLastOperation+0x38>
20003ffc:	f7ff fe22 	bl	20003c44 <HAL_GetTick>
20004000:	4602      	mov	r2, r0
20004002:	68fb      	ldr	r3, [r7, #12]
20004004:	1ad3      	subs	r3, r2, r3
20004006:	687a      	ldr	r2, [r7, #4]
20004008:	429a      	cmp	r2, r3
2000400a:	d201      	bcs.n	20004010 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
2000400c:	2303      	movs	r3, #3
2000400e:	e019      	b.n	20004044 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20004010:	4b0f      	ldr	r3, [pc, #60]	; (20004050 <FLASH_WaitForLastOperation+0x7c>)
20004012:	68db      	ldr	r3, [r3, #12]
20004014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20004018:	2b00      	cmp	r3, #0
2000401a:	d1e8      	bne.n	20003fee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
2000401c:	4b0c      	ldr	r3, [pc, #48]	; (20004050 <FLASH_WaitForLastOperation+0x7c>)
2000401e:	68db      	ldr	r3, [r3, #12]
20004020:	f003 0301 	and.w	r3, r3, #1
20004024:	2b00      	cmp	r3, #0
20004026:	d002      	beq.n	2000402e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20004028:	4b09      	ldr	r3, [pc, #36]	; (20004050 <FLASH_WaitForLastOperation+0x7c>)
2000402a:	2201      	movs	r2, #1
2000402c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
2000402e:	4b08      	ldr	r3, [pc, #32]	; (20004050 <FLASH_WaitForLastOperation+0x7c>)
20004030:	68db      	ldr	r3, [r3, #12]
20004032:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
20004036:	2b00      	cmp	r3, #0
20004038:	d003      	beq.n	20004042 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
2000403a:	f000 f8a5 	bl	20004188 <FLASH_SetErrorCode>
    return HAL_ERROR;
2000403e:	2301      	movs	r3, #1
20004040:	e000      	b.n	20004044 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
20004042:	2300      	movs	r3, #0
  
}  
20004044:	4618      	mov	r0, r3
20004046:	3710      	adds	r7, #16
20004048:	46bd      	mov	sp, r7
2000404a:	bd80      	pop	{r7, pc}
2000404c:	20011b08 	.word	0x20011b08
20004050:	40023c00 	.word	0x40023c00

20004054 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
20004054:	b480      	push	{r7}
20004056:	b085      	sub	sp, #20
20004058:	af00      	add	r7, sp, #0
2000405a:	60f8      	str	r0, [r7, #12]
2000405c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004060:	4b14      	ldr	r3, [pc, #80]	; (200040b4 <FLASH_Program_DoubleWord+0x60>)
20004062:	691b      	ldr	r3, [r3, #16]
20004064:	4a13      	ldr	r2, [pc, #76]	; (200040b4 <FLASH_Program_DoubleWord+0x60>)
20004066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000406a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
2000406c:	4b11      	ldr	r3, [pc, #68]	; (200040b4 <FLASH_Program_DoubleWord+0x60>)
2000406e:	691b      	ldr	r3, [r3, #16]
20004070:	4a10      	ldr	r2, [pc, #64]	; (200040b4 <FLASH_Program_DoubleWord+0x60>)
20004072:	f443 7340 	orr.w	r3, r3, #768	; 0x300
20004076:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004078:	4b0e      	ldr	r3, [pc, #56]	; (200040b4 <FLASH_Program_DoubleWord+0x60>)
2000407a:	691b      	ldr	r3, [r3, #16]
2000407c:	4a0d      	ldr	r2, [pc, #52]	; (200040b4 <FLASH_Program_DoubleWord+0x60>)
2000407e:	f043 0301 	orr.w	r3, r3, #1
20004082:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
20004084:	68fb      	ldr	r3, [r7, #12]
20004086:	683a      	ldr	r2, [r7, #0]
20004088:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
2000408a:	f3bf 8f6f 	isb	sy
}
2000408e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
20004090:	e9d7 0100 	ldrd	r0, r1, [r7]
20004094:	f04f 0200 	mov.w	r2, #0
20004098:	f04f 0300 	mov.w	r3, #0
2000409c:	000a      	movs	r2, r1
2000409e:	2300      	movs	r3, #0
200040a0:	68f9      	ldr	r1, [r7, #12]
200040a2:	3104      	adds	r1, #4
200040a4:	4613      	mov	r3, r2
200040a6:	600b      	str	r3, [r1, #0]
}
200040a8:	bf00      	nop
200040aa:	3714      	adds	r7, #20
200040ac:	46bd      	mov	sp, r7
200040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
200040b2:	4770      	bx	lr
200040b4:	40023c00 	.word	0x40023c00

200040b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
200040b8:	b480      	push	{r7}
200040ba:	b083      	sub	sp, #12
200040bc:	af00      	add	r7, sp, #0
200040be:	6078      	str	r0, [r7, #4]
200040c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
200040c2:	4b0d      	ldr	r3, [pc, #52]	; (200040f8 <FLASH_Program_Word+0x40>)
200040c4:	691b      	ldr	r3, [r3, #16]
200040c6:	4a0c      	ldr	r2, [pc, #48]	; (200040f8 <FLASH_Program_Word+0x40>)
200040c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
200040cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
200040ce:	4b0a      	ldr	r3, [pc, #40]	; (200040f8 <FLASH_Program_Word+0x40>)
200040d0:	691b      	ldr	r3, [r3, #16]
200040d2:	4a09      	ldr	r2, [pc, #36]	; (200040f8 <FLASH_Program_Word+0x40>)
200040d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
200040d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
200040da:	4b07      	ldr	r3, [pc, #28]	; (200040f8 <FLASH_Program_Word+0x40>)
200040dc:	691b      	ldr	r3, [r3, #16]
200040de:	4a06      	ldr	r2, [pc, #24]	; (200040f8 <FLASH_Program_Word+0x40>)
200040e0:	f043 0301 	orr.w	r3, r3, #1
200040e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
200040e6:	687b      	ldr	r3, [r7, #4]
200040e8:	683a      	ldr	r2, [r7, #0]
200040ea:	601a      	str	r2, [r3, #0]
}
200040ec:	bf00      	nop
200040ee:	370c      	adds	r7, #12
200040f0:	46bd      	mov	sp, r7
200040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
200040f6:	4770      	bx	lr
200040f8:	40023c00 	.word	0x40023c00

200040fc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
200040fc:	b480      	push	{r7}
200040fe:	b083      	sub	sp, #12
20004100:	af00      	add	r7, sp, #0
20004102:	6078      	str	r0, [r7, #4]
20004104:	460b      	mov	r3, r1
20004106:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004108:	4b0d      	ldr	r3, [pc, #52]	; (20004140 <FLASH_Program_HalfWord+0x44>)
2000410a:	691b      	ldr	r3, [r3, #16]
2000410c:	4a0c      	ldr	r2, [pc, #48]	; (20004140 <FLASH_Program_HalfWord+0x44>)
2000410e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004112:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
20004114:	4b0a      	ldr	r3, [pc, #40]	; (20004140 <FLASH_Program_HalfWord+0x44>)
20004116:	691b      	ldr	r3, [r3, #16]
20004118:	4a09      	ldr	r2, [pc, #36]	; (20004140 <FLASH_Program_HalfWord+0x44>)
2000411a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000411e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004120:	4b07      	ldr	r3, [pc, #28]	; (20004140 <FLASH_Program_HalfWord+0x44>)
20004122:	691b      	ldr	r3, [r3, #16]
20004124:	4a06      	ldr	r2, [pc, #24]	; (20004140 <FLASH_Program_HalfWord+0x44>)
20004126:	f043 0301 	orr.w	r3, r3, #1
2000412a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
2000412c:	687b      	ldr	r3, [r7, #4]
2000412e:	887a      	ldrh	r2, [r7, #2]
20004130:	801a      	strh	r2, [r3, #0]
}
20004132:	bf00      	nop
20004134:	370c      	adds	r7, #12
20004136:	46bd      	mov	sp, r7
20004138:	f85d 7b04 	ldr.w	r7, [sp], #4
2000413c:	4770      	bx	lr
2000413e:	bf00      	nop
20004140:	40023c00 	.word	0x40023c00

20004144 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
20004144:	b480      	push	{r7}
20004146:	b083      	sub	sp, #12
20004148:	af00      	add	r7, sp, #0
2000414a:	6078      	str	r0, [r7, #4]
2000414c:	460b      	mov	r3, r1
2000414e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004150:	4b0c      	ldr	r3, [pc, #48]	; (20004184 <FLASH_Program_Byte+0x40>)
20004152:	691b      	ldr	r3, [r3, #16]
20004154:	4a0b      	ldr	r2, [pc, #44]	; (20004184 <FLASH_Program_Byte+0x40>)
20004156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000415a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
2000415c:	4b09      	ldr	r3, [pc, #36]	; (20004184 <FLASH_Program_Byte+0x40>)
2000415e:	4a09      	ldr	r2, [pc, #36]	; (20004184 <FLASH_Program_Byte+0x40>)
20004160:	691b      	ldr	r3, [r3, #16]
20004162:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004164:	4b07      	ldr	r3, [pc, #28]	; (20004184 <FLASH_Program_Byte+0x40>)
20004166:	691b      	ldr	r3, [r3, #16]
20004168:	4a06      	ldr	r2, [pc, #24]	; (20004184 <FLASH_Program_Byte+0x40>)
2000416a:	f043 0301 	orr.w	r3, r3, #1
2000416e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
20004170:	687b      	ldr	r3, [r7, #4]
20004172:	78fa      	ldrb	r2, [r7, #3]
20004174:	701a      	strb	r2, [r3, #0]
}
20004176:	bf00      	nop
20004178:	370c      	adds	r7, #12
2000417a:	46bd      	mov	sp, r7
2000417c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004180:	4770      	bx	lr
20004182:	bf00      	nop
20004184:	40023c00 	.word	0x40023c00

20004188 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
20004188:	b480      	push	{r7}
2000418a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
2000418c:	4b2f      	ldr	r3, [pc, #188]	; (2000424c <FLASH_SetErrorCode+0xc4>)
2000418e:	68db      	ldr	r3, [r3, #12]
20004190:	f003 0310 	and.w	r3, r3, #16
20004194:	2b00      	cmp	r3, #0
20004196:	d008      	beq.n	200041aa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
20004198:	4b2d      	ldr	r3, [pc, #180]	; (20004250 <FLASH_SetErrorCode+0xc8>)
2000419a:	69db      	ldr	r3, [r3, #28]
2000419c:	f043 0310 	orr.w	r3, r3, #16
200041a0:	4a2b      	ldr	r2, [pc, #172]	; (20004250 <FLASH_SetErrorCode+0xc8>)
200041a2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
200041a4:	4b29      	ldr	r3, [pc, #164]	; (2000424c <FLASH_SetErrorCode+0xc4>)
200041a6:	2210      	movs	r2, #16
200041a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
200041aa:	4b28      	ldr	r3, [pc, #160]	; (2000424c <FLASH_SetErrorCode+0xc4>)
200041ac:	68db      	ldr	r3, [r3, #12]
200041ae:	f003 0320 	and.w	r3, r3, #32
200041b2:	2b00      	cmp	r3, #0
200041b4:	d008      	beq.n	200041c8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
200041b6:	4b26      	ldr	r3, [pc, #152]	; (20004250 <FLASH_SetErrorCode+0xc8>)
200041b8:	69db      	ldr	r3, [r3, #28]
200041ba:	f043 0308 	orr.w	r3, r3, #8
200041be:	4a24      	ldr	r2, [pc, #144]	; (20004250 <FLASH_SetErrorCode+0xc8>)
200041c0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
200041c2:	4b22      	ldr	r3, [pc, #136]	; (2000424c <FLASH_SetErrorCode+0xc4>)
200041c4:	2220      	movs	r2, #32
200041c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
200041c8:	4b20      	ldr	r3, [pc, #128]	; (2000424c <FLASH_SetErrorCode+0xc4>)
200041ca:	68db      	ldr	r3, [r3, #12]
200041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
200041d0:	2b00      	cmp	r3, #0
200041d2:	d008      	beq.n	200041e6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
200041d4:	4b1e      	ldr	r3, [pc, #120]	; (20004250 <FLASH_SetErrorCode+0xc8>)
200041d6:	69db      	ldr	r3, [r3, #28]
200041d8:	f043 0304 	orr.w	r3, r3, #4
200041dc:	4a1c      	ldr	r2, [pc, #112]	; (20004250 <FLASH_SetErrorCode+0xc8>)
200041de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
200041e0:	4b1a      	ldr	r3, [pc, #104]	; (2000424c <FLASH_SetErrorCode+0xc4>)
200041e2:	2240      	movs	r2, #64	; 0x40
200041e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
200041e6:	4b19      	ldr	r3, [pc, #100]	; (2000424c <FLASH_SetErrorCode+0xc4>)
200041e8:	68db      	ldr	r3, [r3, #12]
200041ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
200041ee:	2b00      	cmp	r3, #0
200041f0:	d008      	beq.n	20004204 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
200041f2:	4b17      	ldr	r3, [pc, #92]	; (20004250 <FLASH_SetErrorCode+0xc8>)
200041f4:	69db      	ldr	r3, [r3, #28]
200041f6:	f043 0302 	orr.w	r3, r3, #2
200041fa:	4a15      	ldr	r2, [pc, #84]	; (20004250 <FLASH_SetErrorCode+0xc8>)
200041fc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
200041fe:	4b13      	ldr	r3, [pc, #76]	; (2000424c <FLASH_SetErrorCode+0xc4>)
20004200:	2280      	movs	r2, #128	; 0x80
20004202:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
20004204:	4b11      	ldr	r3, [pc, #68]	; (2000424c <FLASH_SetErrorCode+0xc4>)
20004206:	68db      	ldr	r3, [r3, #12]
20004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000420c:	2b00      	cmp	r3, #0
2000420e:	d009      	beq.n	20004224 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
20004210:	4b0f      	ldr	r3, [pc, #60]	; (20004250 <FLASH_SetErrorCode+0xc8>)
20004212:	69db      	ldr	r3, [r3, #28]
20004214:	f043 0301 	orr.w	r3, r3, #1
20004218:	4a0d      	ldr	r2, [pc, #52]	; (20004250 <FLASH_SetErrorCode+0xc8>)
2000421a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
2000421c:	4b0b      	ldr	r3, [pc, #44]	; (2000424c <FLASH_SetErrorCode+0xc4>)
2000421e:	f44f 7280 	mov.w	r2, #256	; 0x100
20004222:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
20004224:	4b09      	ldr	r3, [pc, #36]	; (2000424c <FLASH_SetErrorCode+0xc4>)
20004226:	68db      	ldr	r3, [r3, #12]
20004228:	f003 0302 	and.w	r3, r3, #2
2000422c:	2b00      	cmp	r3, #0
2000422e:	d008      	beq.n	20004242 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
20004230:	4b07      	ldr	r3, [pc, #28]	; (20004250 <FLASH_SetErrorCode+0xc8>)
20004232:	69db      	ldr	r3, [r3, #28]
20004234:	f043 0320 	orr.w	r3, r3, #32
20004238:	4a05      	ldr	r2, [pc, #20]	; (20004250 <FLASH_SetErrorCode+0xc8>)
2000423a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
2000423c:	4b03      	ldr	r3, [pc, #12]	; (2000424c <FLASH_SetErrorCode+0xc4>)
2000423e:	2202      	movs	r2, #2
20004240:	60da      	str	r2, [r3, #12]
  }
}
20004242:	bf00      	nop
20004244:	46bd      	mov	sp, r7
20004246:	f85d 7b04 	ldr.w	r7, [sp], #4
2000424a:	4770      	bx	lr
2000424c:	40023c00 	.word	0x40023c00
20004250:	20011b08 	.word	0x20011b08

20004254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20004254:	b480      	push	{r7}
20004256:	b089      	sub	sp, #36	; 0x24
20004258:	af00      	add	r7, sp, #0
2000425a:	6078      	str	r0, [r7, #4]
2000425c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
2000425e:	2300      	movs	r3, #0
20004260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
20004262:	2300      	movs	r3, #0
20004264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
20004266:	2300      	movs	r3, #0
20004268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
2000426a:	2300      	movs	r3, #0
2000426c:	61fb      	str	r3, [r7, #28]
2000426e:	e159      	b.n	20004524 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
20004270:	2201      	movs	r2, #1
20004272:	69fb      	ldr	r3, [r7, #28]
20004274:	fa02 f303 	lsl.w	r3, r2, r3
20004278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
2000427a:	683b      	ldr	r3, [r7, #0]
2000427c:	681b      	ldr	r3, [r3, #0]
2000427e:	697a      	ldr	r2, [r7, #20]
20004280:	4013      	ands	r3, r2
20004282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
20004284:	693a      	ldr	r2, [r7, #16]
20004286:	697b      	ldr	r3, [r7, #20]
20004288:	429a      	cmp	r2, r3
2000428a:	f040 8148 	bne.w	2000451e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
2000428e:	683b      	ldr	r3, [r7, #0]
20004290:	685b      	ldr	r3, [r3, #4]
20004292:	f003 0303 	and.w	r3, r3, #3
20004296:	2b01      	cmp	r3, #1
20004298:	d005      	beq.n	200042a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
2000429a:	683b      	ldr	r3, [r7, #0]
2000429c:	685b      	ldr	r3, [r3, #4]
2000429e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
200042a2:	2b02      	cmp	r3, #2
200042a4:	d130      	bne.n	20004308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
200042a6:	687b      	ldr	r3, [r7, #4]
200042a8:	689b      	ldr	r3, [r3, #8]
200042aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
200042ac:	69fb      	ldr	r3, [r7, #28]
200042ae:	005b      	lsls	r3, r3, #1
200042b0:	2203      	movs	r2, #3
200042b2:	fa02 f303 	lsl.w	r3, r2, r3
200042b6:	43db      	mvns	r3, r3
200042b8:	69ba      	ldr	r2, [r7, #24]
200042ba:	4013      	ands	r3, r2
200042bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
200042be:	683b      	ldr	r3, [r7, #0]
200042c0:	68da      	ldr	r2, [r3, #12]
200042c2:	69fb      	ldr	r3, [r7, #28]
200042c4:	005b      	lsls	r3, r3, #1
200042c6:	fa02 f303 	lsl.w	r3, r2, r3
200042ca:	69ba      	ldr	r2, [r7, #24]
200042cc:	4313      	orrs	r3, r2
200042ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
200042d0:	687b      	ldr	r3, [r7, #4]
200042d2:	69ba      	ldr	r2, [r7, #24]
200042d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
200042d6:	687b      	ldr	r3, [r7, #4]
200042d8:	685b      	ldr	r3, [r3, #4]
200042da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
200042dc:	2201      	movs	r2, #1
200042de:	69fb      	ldr	r3, [r7, #28]
200042e0:	fa02 f303 	lsl.w	r3, r2, r3
200042e4:	43db      	mvns	r3, r3
200042e6:	69ba      	ldr	r2, [r7, #24]
200042e8:	4013      	ands	r3, r2
200042ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
200042ec:	683b      	ldr	r3, [r7, #0]
200042ee:	685b      	ldr	r3, [r3, #4]
200042f0:	091b      	lsrs	r3, r3, #4
200042f2:	f003 0201 	and.w	r2, r3, #1
200042f6:	69fb      	ldr	r3, [r7, #28]
200042f8:	fa02 f303 	lsl.w	r3, r2, r3
200042fc:	69ba      	ldr	r2, [r7, #24]
200042fe:	4313      	orrs	r3, r2
20004300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
20004302:	687b      	ldr	r3, [r7, #4]
20004304:	69ba      	ldr	r2, [r7, #24]
20004306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20004308:	683b      	ldr	r3, [r7, #0]
2000430a:	685b      	ldr	r3, [r3, #4]
2000430c:	f003 0303 	and.w	r3, r3, #3
20004310:	2b03      	cmp	r3, #3
20004312:	d017      	beq.n	20004344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
20004314:	687b      	ldr	r3, [r7, #4]
20004316:	68db      	ldr	r3, [r3, #12]
20004318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000431a:	69fb      	ldr	r3, [r7, #28]
2000431c:	005b      	lsls	r3, r3, #1
2000431e:	2203      	movs	r2, #3
20004320:	fa02 f303 	lsl.w	r3, r2, r3
20004324:	43db      	mvns	r3, r3
20004326:	69ba      	ldr	r2, [r7, #24]
20004328:	4013      	ands	r3, r2
2000432a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
2000432c:	683b      	ldr	r3, [r7, #0]
2000432e:	689a      	ldr	r2, [r3, #8]
20004330:	69fb      	ldr	r3, [r7, #28]
20004332:	005b      	lsls	r3, r3, #1
20004334:	fa02 f303 	lsl.w	r3, r2, r3
20004338:	69ba      	ldr	r2, [r7, #24]
2000433a:	4313      	orrs	r3, r2
2000433c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
2000433e:	687b      	ldr	r3, [r7, #4]
20004340:	69ba      	ldr	r2, [r7, #24]
20004342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20004344:	683b      	ldr	r3, [r7, #0]
20004346:	685b      	ldr	r3, [r3, #4]
20004348:	f003 0303 	and.w	r3, r3, #3
2000434c:	2b02      	cmp	r3, #2
2000434e:	d123      	bne.n	20004398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
20004350:	69fb      	ldr	r3, [r7, #28]
20004352:	08da      	lsrs	r2, r3, #3
20004354:	687b      	ldr	r3, [r7, #4]
20004356:	3208      	adds	r2, #8
20004358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000435c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
2000435e:	69fb      	ldr	r3, [r7, #28]
20004360:	f003 0307 	and.w	r3, r3, #7
20004364:	009b      	lsls	r3, r3, #2
20004366:	220f      	movs	r2, #15
20004368:	fa02 f303 	lsl.w	r3, r2, r3
2000436c:	43db      	mvns	r3, r3
2000436e:	69ba      	ldr	r2, [r7, #24]
20004370:	4013      	ands	r3, r2
20004372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
20004374:	683b      	ldr	r3, [r7, #0]
20004376:	691a      	ldr	r2, [r3, #16]
20004378:	69fb      	ldr	r3, [r7, #28]
2000437a:	f003 0307 	and.w	r3, r3, #7
2000437e:	009b      	lsls	r3, r3, #2
20004380:	fa02 f303 	lsl.w	r3, r2, r3
20004384:	69ba      	ldr	r2, [r7, #24]
20004386:	4313      	orrs	r3, r2
20004388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
2000438a:	69fb      	ldr	r3, [r7, #28]
2000438c:	08da      	lsrs	r2, r3, #3
2000438e:	687b      	ldr	r3, [r7, #4]
20004390:	3208      	adds	r2, #8
20004392:	69b9      	ldr	r1, [r7, #24]
20004394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20004398:	687b      	ldr	r3, [r7, #4]
2000439a:	681b      	ldr	r3, [r3, #0]
2000439c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
2000439e:	69fb      	ldr	r3, [r7, #28]
200043a0:	005b      	lsls	r3, r3, #1
200043a2:	2203      	movs	r2, #3
200043a4:	fa02 f303 	lsl.w	r3, r2, r3
200043a8:	43db      	mvns	r3, r3
200043aa:	69ba      	ldr	r2, [r7, #24]
200043ac:	4013      	ands	r3, r2
200043ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
200043b0:	683b      	ldr	r3, [r7, #0]
200043b2:	685b      	ldr	r3, [r3, #4]
200043b4:	f003 0203 	and.w	r2, r3, #3
200043b8:	69fb      	ldr	r3, [r7, #28]
200043ba:	005b      	lsls	r3, r3, #1
200043bc:	fa02 f303 	lsl.w	r3, r2, r3
200043c0:	69ba      	ldr	r2, [r7, #24]
200043c2:	4313      	orrs	r3, r2
200043c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
200043c6:	687b      	ldr	r3, [r7, #4]
200043c8:	69ba      	ldr	r2, [r7, #24]
200043ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
200043cc:	683b      	ldr	r3, [r7, #0]
200043ce:	685b      	ldr	r3, [r3, #4]
200043d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
200043d4:	2b00      	cmp	r3, #0
200043d6:	f000 80a2 	beq.w	2000451e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
200043da:	2300      	movs	r3, #0
200043dc:	60fb      	str	r3, [r7, #12]
200043de:	4b57      	ldr	r3, [pc, #348]	; (2000453c <HAL_GPIO_Init+0x2e8>)
200043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200043e2:	4a56      	ldr	r2, [pc, #344]	; (2000453c <HAL_GPIO_Init+0x2e8>)
200043e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
200043e8:	6453      	str	r3, [r2, #68]	; 0x44
200043ea:	4b54      	ldr	r3, [pc, #336]	; (2000453c <HAL_GPIO_Init+0x2e8>)
200043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200043ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
200043f2:	60fb      	str	r3, [r7, #12]
200043f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
200043f6:	4a52      	ldr	r2, [pc, #328]	; (20004540 <HAL_GPIO_Init+0x2ec>)
200043f8:	69fb      	ldr	r3, [r7, #28]
200043fa:	089b      	lsrs	r3, r3, #2
200043fc:	3302      	adds	r3, #2
200043fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20004402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20004404:	69fb      	ldr	r3, [r7, #28]
20004406:	f003 0303 	and.w	r3, r3, #3
2000440a:	009b      	lsls	r3, r3, #2
2000440c:	220f      	movs	r2, #15
2000440e:	fa02 f303 	lsl.w	r3, r2, r3
20004412:	43db      	mvns	r3, r3
20004414:	69ba      	ldr	r2, [r7, #24]
20004416:	4013      	ands	r3, r2
20004418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
2000441a:	687b      	ldr	r3, [r7, #4]
2000441c:	4a49      	ldr	r2, [pc, #292]	; (20004544 <HAL_GPIO_Init+0x2f0>)
2000441e:	4293      	cmp	r3, r2
20004420:	d019      	beq.n	20004456 <HAL_GPIO_Init+0x202>
20004422:	687b      	ldr	r3, [r7, #4]
20004424:	4a48      	ldr	r2, [pc, #288]	; (20004548 <HAL_GPIO_Init+0x2f4>)
20004426:	4293      	cmp	r3, r2
20004428:	d013      	beq.n	20004452 <HAL_GPIO_Init+0x1fe>
2000442a:	687b      	ldr	r3, [r7, #4]
2000442c:	4a47      	ldr	r2, [pc, #284]	; (2000454c <HAL_GPIO_Init+0x2f8>)
2000442e:	4293      	cmp	r3, r2
20004430:	d00d      	beq.n	2000444e <HAL_GPIO_Init+0x1fa>
20004432:	687b      	ldr	r3, [r7, #4]
20004434:	4a46      	ldr	r2, [pc, #280]	; (20004550 <HAL_GPIO_Init+0x2fc>)
20004436:	4293      	cmp	r3, r2
20004438:	d007      	beq.n	2000444a <HAL_GPIO_Init+0x1f6>
2000443a:	687b      	ldr	r3, [r7, #4]
2000443c:	4a45      	ldr	r2, [pc, #276]	; (20004554 <HAL_GPIO_Init+0x300>)
2000443e:	4293      	cmp	r3, r2
20004440:	d101      	bne.n	20004446 <HAL_GPIO_Init+0x1f2>
20004442:	2304      	movs	r3, #4
20004444:	e008      	b.n	20004458 <HAL_GPIO_Init+0x204>
20004446:	2307      	movs	r3, #7
20004448:	e006      	b.n	20004458 <HAL_GPIO_Init+0x204>
2000444a:	2303      	movs	r3, #3
2000444c:	e004      	b.n	20004458 <HAL_GPIO_Init+0x204>
2000444e:	2302      	movs	r3, #2
20004450:	e002      	b.n	20004458 <HAL_GPIO_Init+0x204>
20004452:	2301      	movs	r3, #1
20004454:	e000      	b.n	20004458 <HAL_GPIO_Init+0x204>
20004456:	2300      	movs	r3, #0
20004458:	69fa      	ldr	r2, [r7, #28]
2000445a:	f002 0203 	and.w	r2, r2, #3
2000445e:	0092      	lsls	r2, r2, #2
20004460:	4093      	lsls	r3, r2
20004462:	69ba      	ldr	r2, [r7, #24]
20004464:	4313      	orrs	r3, r2
20004466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
20004468:	4935      	ldr	r1, [pc, #212]	; (20004540 <HAL_GPIO_Init+0x2ec>)
2000446a:	69fb      	ldr	r3, [r7, #28]
2000446c:	089b      	lsrs	r3, r3, #2
2000446e:	3302      	adds	r3, #2
20004470:	69ba      	ldr	r2, [r7, #24]
20004472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20004476:	4b38      	ldr	r3, [pc, #224]	; (20004558 <HAL_GPIO_Init+0x304>)
20004478:	689b      	ldr	r3, [r3, #8]
2000447a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000447c:	693b      	ldr	r3, [r7, #16]
2000447e:	43db      	mvns	r3, r3
20004480:	69ba      	ldr	r2, [r7, #24]
20004482:	4013      	ands	r3, r2
20004484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
20004486:	683b      	ldr	r3, [r7, #0]
20004488:	685b      	ldr	r3, [r3, #4]
2000448a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2000448e:	2b00      	cmp	r3, #0
20004490:	d003      	beq.n	2000449a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
20004492:	69ba      	ldr	r2, [r7, #24]
20004494:	693b      	ldr	r3, [r7, #16]
20004496:	4313      	orrs	r3, r2
20004498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
2000449a:	4a2f      	ldr	r2, [pc, #188]	; (20004558 <HAL_GPIO_Init+0x304>)
2000449c:	69bb      	ldr	r3, [r7, #24]
2000449e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
200044a0:	4b2d      	ldr	r3, [pc, #180]	; (20004558 <HAL_GPIO_Init+0x304>)
200044a2:	68db      	ldr	r3, [r3, #12]
200044a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200044a6:	693b      	ldr	r3, [r7, #16]
200044a8:	43db      	mvns	r3, r3
200044aa:	69ba      	ldr	r2, [r7, #24]
200044ac:	4013      	ands	r3, r2
200044ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
200044b0:	683b      	ldr	r3, [r7, #0]
200044b2:	685b      	ldr	r3, [r3, #4]
200044b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
200044b8:	2b00      	cmp	r3, #0
200044ba:	d003      	beq.n	200044c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
200044bc:	69ba      	ldr	r2, [r7, #24]
200044be:	693b      	ldr	r3, [r7, #16]
200044c0:	4313      	orrs	r3, r2
200044c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
200044c4:	4a24      	ldr	r2, [pc, #144]	; (20004558 <HAL_GPIO_Init+0x304>)
200044c6:	69bb      	ldr	r3, [r7, #24]
200044c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
200044ca:	4b23      	ldr	r3, [pc, #140]	; (20004558 <HAL_GPIO_Init+0x304>)
200044cc:	685b      	ldr	r3, [r3, #4]
200044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200044d0:	693b      	ldr	r3, [r7, #16]
200044d2:	43db      	mvns	r3, r3
200044d4:	69ba      	ldr	r2, [r7, #24]
200044d6:	4013      	ands	r3, r2
200044d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
200044da:	683b      	ldr	r3, [r7, #0]
200044dc:	685b      	ldr	r3, [r3, #4]
200044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200044e2:	2b00      	cmp	r3, #0
200044e4:	d003      	beq.n	200044ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
200044e6:	69ba      	ldr	r2, [r7, #24]
200044e8:	693b      	ldr	r3, [r7, #16]
200044ea:	4313      	orrs	r3, r2
200044ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
200044ee:	4a1a      	ldr	r2, [pc, #104]	; (20004558 <HAL_GPIO_Init+0x304>)
200044f0:	69bb      	ldr	r3, [r7, #24]
200044f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
200044f4:	4b18      	ldr	r3, [pc, #96]	; (20004558 <HAL_GPIO_Init+0x304>)
200044f6:	681b      	ldr	r3, [r3, #0]
200044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200044fa:	693b      	ldr	r3, [r7, #16]
200044fc:	43db      	mvns	r3, r3
200044fe:	69ba      	ldr	r2, [r7, #24]
20004500:	4013      	ands	r3, r2
20004502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20004504:	683b      	ldr	r3, [r7, #0]
20004506:	685b      	ldr	r3, [r3, #4]
20004508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000450c:	2b00      	cmp	r3, #0
2000450e:	d003      	beq.n	20004518 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
20004510:	69ba      	ldr	r2, [r7, #24]
20004512:	693b      	ldr	r3, [r7, #16]
20004514:	4313      	orrs	r3, r2
20004516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20004518:	4a0f      	ldr	r2, [pc, #60]	; (20004558 <HAL_GPIO_Init+0x304>)
2000451a:	69bb      	ldr	r3, [r7, #24]
2000451c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
2000451e:	69fb      	ldr	r3, [r7, #28]
20004520:	3301      	adds	r3, #1
20004522:	61fb      	str	r3, [r7, #28]
20004524:	69fb      	ldr	r3, [r7, #28]
20004526:	2b0f      	cmp	r3, #15
20004528:	f67f aea2 	bls.w	20004270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
2000452c:	bf00      	nop
2000452e:	bf00      	nop
20004530:	3724      	adds	r7, #36	; 0x24
20004532:	46bd      	mov	sp, r7
20004534:	f85d 7b04 	ldr.w	r7, [sp], #4
20004538:	4770      	bx	lr
2000453a:	bf00      	nop
2000453c:	40023800 	.word	0x40023800
20004540:	40013800 	.word	0x40013800
20004544:	40020000 	.word	0x40020000
20004548:	40020400 	.word	0x40020400
2000454c:	40020800 	.word	0x40020800
20004550:	40020c00 	.word	0x40020c00
20004554:	40021000 	.word	0x40021000
20004558:	40013c00 	.word	0x40013c00

2000455c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000455c:	b480      	push	{r7}
2000455e:	b085      	sub	sp, #20
20004560:	af00      	add	r7, sp, #0
20004562:	6078      	str	r0, [r7, #4]
20004564:	460b      	mov	r3, r1
20004566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
20004568:	687b      	ldr	r3, [r7, #4]
2000456a:	691a      	ldr	r2, [r3, #16]
2000456c:	887b      	ldrh	r3, [r7, #2]
2000456e:	4013      	ands	r3, r2
20004570:	2b00      	cmp	r3, #0
20004572:	d002      	beq.n	2000457a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
20004574:	2301      	movs	r3, #1
20004576:	73fb      	strb	r3, [r7, #15]
20004578:	e001      	b.n	2000457e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
2000457a:	2300      	movs	r3, #0
2000457c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2000457e:	7bfb      	ldrb	r3, [r7, #15]
}
20004580:	4618      	mov	r0, r3
20004582:	3714      	adds	r7, #20
20004584:	46bd      	mov	sp, r7
20004586:	f85d 7b04 	ldr.w	r7, [sp], #4
2000458a:	4770      	bx	lr

2000458c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2000458c:	b480      	push	{r7}
2000458e:	b083      	sub	sp, #12
20004590:	af00      	add	r7, sp, #0
20004592:	6078      	str	r0, [r7, #4]
20004594:	460b      	mov	r3, r1
20004596:	807b      	strh	r3, [r7, #2]
20004598:	4613      	mov	r3, r2
2000459a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
2000459c:	787b      	ldrb	r3, [r7, #1]
2000459e:	2b00      	cmp	r3, #0
200045a0:	d003      	beq.n	200045aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
200045a2:	887a      	ldrh	r2, [r7, #2]
200045a4:	687b      	ldr	r3, [r7, #4]
200045a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
200045a8:	e003      	b.n	200045b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
200045aa:	887b      	ldrh	r3, [r7, #2]
200045ac:	041a      	lsls	r2, r3, #16
200045ae:	687b      	ldr	r3, [r7, #4]
200045b0:	619a      	str	r2, [r3, #24]
}
200045b2:	bf00      	nop
200045b4:	370c      	adds	r7, #12
200045b6:	46bd      	mov	sp, r7
200045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200045bc:	4770      	bx	lr
	...

200045c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
200045c0:	b580      	push	{r7, lr}
200045c2:	b086      	sub	sp, #24
200045c4:	af00      	add	r7, sp, #0
200045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
200045c8:	687b      	ldr	r3, [r7, #4]
200045ca:	2b00      	cmp	r3, #0
200045cc:	d101      	bne.n	200045d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
200045ce:	2301      	movs	r3, #1
200045d0:	e267      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
200045d2:	687b      	ldr	r3, [r7, #4]
200045d4:	681b      	ldr	r3, [r3, #0]
200045d6:	f003 0301 	and.w	r3, r3, #1
200045da:	2b00      	cmp	r3, #0
200045dc:	d075      	beq.n	200046ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
200045de:	4b88      	ldr	r3, [pc, #544]	; (20004800 <HAL_RCC_OscConfig+0x240>)
200045e0:	689b      	ldr	r3, [r3, #8]
200045e2:	f003 030c 	and.w	r3, r3, #12
200045e6:	2b04      	cmp	r3, #4
200045e8:	d00c      	beq.n	20004604 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200045ea:	4b85      	ldr	r3, [pc, #532]	; (20004800 <HAL_RCC_OscConfig+0x240>)
200045ec:	689b      	ldr	r3, [r3, #8]
200045ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
200045f2:	2b08      	cmp	r3, #8
200045f4:	d112      	bne.n	2000461c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200045f6:	4b82      	ldr	r3, [pc, #520]	; (20004800 <HAL_RCC_OscConfig+0x240>)
200045f8:	685b      	ldr	r3, [r3, #4]
200045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200045fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20004602:	d10b      	bne.n	2000461c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20004604:	4b7e      	ldr	r3, [pc, #504]	; (20004800 <HAL_RCC_OscConfig+0x240>)
20004606:	681b      	ldr	r3, [r3, #0]
20004608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000460c:	2b00      	cmp	r3, #0
2000460e:	d05b      	beq.n	200046c8 <HAL_RCC_OscConfig+0x108>
20004610:	687b      	ldr	r3, [r7, #4]
20004612:	685b      	ldr	r3, [r3, #4]
20004614:	2b00      	cmp	r3, #0
20004616:	d157      	bne.n	200046c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
20004618:	2301      	movs	r3, #1
2000461a:	e242      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2000461c:	687b      	ldr	r3, [r7, #4]
2000461e:	685b      	ldr	r3, [r3, #4]
20004620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20004624:	d106      	bne.n	20004634 <HAL_RCC_OscConfig+0x74>
20004626:	4b76      	ldr	r3, [pc, #472]	; (20004800 <HAL_RCC_OscConfig+0x240>)
20004628:	681b      	ldr	r3, [r3, #0]
2000462a:	4a75      	ldr	r2, [pc, #468]	; (20004800 <HAL_RCC_OscConfig+0x240>)
2000462c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20004630:	6013      	str	r3, [r2, #0]
20004632:	e01d      	b.n	20004670 <HAL_RCC_OscConfig+0xb0>
20004634:	687b      	ldr	r3, [r7, #4]
20004636:	685b      	ldr	r3, [r3, #4]
20004638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2000463c:	d10c      	bne.n	20004658 <HAL_RCC_OscConfig+0x98>
2000463e:	4b70      	ldr	r3, [pc, #448]	; (20004800 <HAL_RCC_OscConfig+0x240>)
20004640:	681b      	ldr	r3, [r3, #0]
20004642:	4a6f      	ldr	r2, [pc, #444]	; (20004800 <HAL_RCC_OscConfig+0x240>)
20004644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20004648:	6013      	str	r3, [r2, #0]
2000464a:	4b6d      	ldr	r3, [pc, #436]	; (20004800 <HAL_RCC_OscConfig+0x240>)
2000464c:	681b      	ldr	r3, [r3, #0]
2000464e:	4a6c      	ldr	r2, [pc, #432]	; (20004800 <HAL_RCC_OscConfig+0x240>)
20004650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20004654:	6013      	str	r3, [r2, #0]
20004656:	e00b      	b.n	20004670 <HAL_RCC_OscConfig+0xb0>
20004658:	4b69      	ldr	r3, [pc, #420]	; (20004800 <HAL_RCC_OscConfig+0x240>)
2000465a:	681b      	ldr	r3, [r3, #0]
2000465c:	4a68      	ldr	r2, [pc, #416]	; (20004800 <HAL_RCC_OscConfig+0x240>)
2000465e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20004662:	6013      	str	r3, [r2, #0]
20004664:	4b66      	ldr	r3, [pc, #408]	; (20004800 <HAL_RCC_OscConfig+0x240>)
20004666:	681b      	ldr	r3, [r3, #0]
20004668:	4a65      	ldr	r2, [pc, #404]	; (20004800 <HAL_RCC_OscConfig+0x240>)
2000466a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000466e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
20004670:	687b      	ldr	r3, [r7, #4]
20004672:	685b      	ldr	r3, [r3, #4]
20004674:	2b00      	cmp	r3, #0
20004676:	d013      	beq.n	200046a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20004678:	f7ff fae4 	bl	20003c44 <HAL_GetTick>
2000467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000467e:	e008      	b.n	20004692 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20004680:	f7ff fae0 	bl	20003c44 <HAL_GetTick>
20004684:	4602      	mov	r2, r0
20004686:	693b      	ldr	r3, [r7, #16]
20004688:	1ad3      	subs	r3, r2, r3
2000468a:	2b64      	cmp	r3, #100	; 0x64
2000468c:	d901      	bls.n	20004692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
2000468e:	2303      	movs	r3, #3
20004690:	e207      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20004692:	4b5b      	ldr	r3, [pc, #364]	; (20004800 <HAL_RCC_OscConfig+0x240>)
20004694:	681b      	ldr	r3, [r3, #0]
20004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000469a:	2b00      	cmp	r3, #0
2000469c:	d0f0      	beq.n	20004680 <HAL_RCC_OscConfig+0xc0>
2000469e:	e014      	b.n	200046ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
200046a0:	f7ff fad0 	bl	20003c44 <HAL_GetTick>
200046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200046a6:	e008      	b.n	200046ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
200046a8:	f7ff facc 	bl	20003c44 <HAL_GetTick>
200046ac:	4602      	mov	r2, r0
200046ae:	693b      	ldr	r3, [r7, #16]
200046b0:	1ad3      	subs	r3, r2, r3
200046b2:	2b64      	cmp	r3, #100	; 0x64
200046b4:	d901      	bls.n	200046ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
200046b6:	2303      	movs	r3, #3
200046b8:	e1f3      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200046ba:	4b51      	ldr	r3, [pc, #324]	; (20004800 <HAL_RCC_OscConfig+0x240>)
200046bc:	681b      	ldr	r3, [r3, #0]
200046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200046c2:	2b00      	cmp	r3, #0
200046c4:	d1f0      	bne.n	200046a8 <HAL_RCC_OscConfig+0xe8>
200046c6:	e000      	b.n	200046ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200046c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
200046ca:	687b      	ldr	r3, [r7, #4]
200046cc:	681b      	ldr	r3, [r3, #0]
200046ce:	f003 0302 	and.w	r3, r3, #2
200046d2:	2b00      	cmp	r3, #0
200046d4:	d063      	beq.n	2000479e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
200046d6:	4b4a      	ldr	r3, [pc, #296]	; (20004800 <HAL_RCC_OscConfig+0x240>)
200046d8:	689b      	ldr	r3, [r3, #8]
200046da:	f003 030c 	and.w	r3, r3, #12
200046de:	2b00      	cmp	r3, #0
200046e0:	d00b      	beq.n	200046fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200046e2:	4b47      	ldr	r3, [pc, #284]	; (20004800 <HAL_RCC_OscConfig+0x240>)
200046e4:	689b      	ldr	r3, [r3, #8]
200046e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
200046ea:	2b08      	cmp	r3, #8
200046ec:	d11c      	bne.n	20004728 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200046ee:	4b44      	ldr	r3, [pc, #272]	; (20004800 <HAL_RCC_OscConfig+0x240>)
200046f0:	685b      	ldr	r3, [r3, #4]
200046f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200046f6:	2b00      	cmp	r3, #0
200046f8:	d116      	bne.n	20004728 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
200046fa:	4b41      	ldr	r3, [pc, #260]	; (20004800 <HAL_RCC_OscConfig+0x240>)
200046fc:	681b      	ldr	r3, [r3, #0]
200046fe:	f003 0302 	and.w	r3, r3, #2
20004702:	2b00      	cmp	r3, #0
20004704:	d005      	beq.n	20004712 <HAL_RCC_OscConfig+0x152>
20004706:	687b      	ldr	r3, [r7, #4]
20004708:	68db      	ldr	r3, [r3, #12]
2000470a:	2b01      	cmp	r3, #1
2000470c:	d001      	beq.n	20004712 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
2000470e:	2301      	movs	r3, #1
20004710:	e1c7      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20004712:	4b3b      	ldr	r3, [pc, #236]	; (20004800 <HAL_RCC_OscConfig+0x240>)
20004714:	681b      	ldr	r3, [r3, #0]
20004716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000471a:	687b      	ldr	r3, [r7, #4]
2000471c:	691b      	ldr	r3, [r3, #16]
2000471e:	00db      	lsls	r3, r3, #3
20004720:	4937      	ldr	r1, [pc, #220]	; (20004800 <HAL_RCC_OscConfig+0x240>)
20004722:	4313      	orrs	r3, r2
20004724:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20004726:	e03a      	b.n	2000479e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
20004728:	687b      	ldr	r3, [r7, #4]
2000472a:	68db      	ldr	r3, [r3, #12]
2000472c:	2b00      	cmp	r3, #0
2000472e:	d020      	beq.n	20004772 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20004730:	4b34      	ldr	r3, [pc, #208]	; (20004804 <HAL_RCC_OscConfig+0x244>)
20004732:	2201      	movs	r2, #1
20004734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20004736:	f7ff fa85 	bl	20003c44 <HAL_GetTick>
2000473a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000473c:	e008      	b.n	20004750 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000473e:	f7ff fa81 	bl	20003c44 <HAL_GetTick>
20004742:	4602      	mov	r2, r0
20004744:	693b      	ldr	r3, [r7, #16]
20004746:	1ad3      	subs	r3, r2, r3
20004748:	2b02      	cmp	r3, #2
2000474a:	d901      	bls.n	20004750 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
2000474c:	2303      	movs	r3, #3
2000474e:	e1a8      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20004750:	4b2b      	ldr	r3, [pc, #172]	; (20004800 <HAL_RCC_OscConfig+0x240>)
20004752:	681b      	ldr	r3, [r3, #0]
20004754:	f003 0302 	and.w	r3, r3, #2
20004758:	2b00      	cmp	r3, #0
2000475a:	d0f0      	beq.n	2000473e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000475c:	4b28      	ldr	r3, [pc, #160]	; (20004800 <HAL_RCC_OscConfig+0x240>)
2000475e:	681b      	ldr	r3, [r3, #0]
20004760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20004764:	687b      	ldr	r3, [r7, #4]
20004766:	691b      	ldr	r3, [r3, #16]
20004768:	00db      	lsls	r3, r3, #3
2000476a:	4925      	ldr	r1, [pc, #148]	; (20004800 <HAL_RCC_OscConfig+0x240>)
2000476c:	4313      	orrs	r3, r2
2000476e:	600b      	str	r3, [r1, #0]
20004770:	e015      	b.n	2000479e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20004772:	4b24      	ldr	r3, [pc, #144]	; (20004804 <HAL_RCC_OscConfig+0x244>)
20004774:	2200      	movs	r2, #0
20004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20004778:	f7ff fa64 	bl	20003c44 <HAL_GetTick>
2000477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000477e:	e008      	b.n	20004792 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20004780:	f7ff fa60 	bl	20003c44 <HAL_GetTick>
20004784:	4602      	mov	r2, r0
20004786:	693b      	ldr	r3, [r7, #16]
20004788:	1ad3      	subs	r3, r2, r3
2000478a:	2b02      	cmp	r3, #2
2000478c:	d901      	bls.n	20004792 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
2000478e:	2303      	movs	r3, #3
20004790:	e187      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20004792:	4b1b      	ldr	r3, [pc, #108]	; (20004800 <HAL_RCC_OscConfig+0x240>)
20004794:	681b      	ldr	r3, [r3, #0]
20004796:	f003 0302 	and.w	r3, r3, #2
2000479a:	2b00      	cmp	r3, #0
2000479c:	d1f0      	bne.n	20004780 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000479e:	687b      	ldr	r3, [r7, #4]
200047a0:	681b      	ldr	r3, [r3, #0]
200047a2:	f003 0308 	and.w	r3, r3, #8
200047a6:	2b00      	cmp	r3, #0
200047a8:	d036      	beq.n	20004818 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
200047aa:	687b      	ldr	r3, [r7, #4]
200047ac:	695b      	ldr	r3, [r3, #20]
200047ae:	2b00      	cmp	r3, #0
200047b0:	d016      	beq.n	200047e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
200047b2:	4b15      	ldr	r3, [pc, #84]	; (20004808 <HAL_RCC_OscConfig+0x248>)
200047b4:	2201      	movs	r2, #1
200047b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200047b8:	f7ff fa44 	bl	20003c44 <HAL_GetTick>
200047bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200047be:	e008      	b.n	200047d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
200047c0:	f7ff fa40 	bl	20003c44 <HAL_GetTick>
200047c4:	4602      	mov	r2, r0
200047c6:	693b      	ldr	r3, [r7, #16]
200047c8:	1ad3      	subs	r3, r2, r3
200047ca:	2b02      	cmp	r3, #2
200047cc:	d901      	bls.n	200047d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
200047ce:	2303      	movs	r3, #3
200047d0:	e167      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200047d2:	4b0b      	ldr	r3, [pc, #44]	; (20004800 <HAL_RCC_OscConfig+0x240>)
200047d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200047d6:	f003 0302 	and.w	r3, r3, #2
200047da:	2b00      	cmp	r3, #0
200047dc:	d0f0      	beq.n	200047c0 <HAL_RCC_OscConfig+0x200>
200047de:	e01b      	b.n	20004818 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
200047e0:	4b09      	ldr	r3, [pc, #36]	; (20004808 <HAL_RCC_OscConfig+0x248>)
200047e2:	2200      	movs	r2, #0
200047e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
200047e6:	f7ff fa2d 	bl	20003c44 <HAL_GetTick>
200047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200047ec:	e00e      	b.n	2000480c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
200047ee:	f7ff fa29 	bl	20003c44 <HAL_GetTick>
200047f2:	4602      	mov	r2, r0
200047f4:	693b      	ldr	r3, [r7, #16]
200047f6:	1ad3      	subs	r3, r2, r3
200047f8:	2b02      	cmp	r3, #2
200047fa:	d907      	bls.n	2000480c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
200047fc:	2303      	movs	r3, #3
200047fe:	e150      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
20004800:	40023800 	.word	0x40023800
20004804:	42470000 	.word	0x42470000
20004808:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000480c:	4b88      	ldr	r3, [pc, #544]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
2000480e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20004810:	f003 0302 	and.w	r3, r3, #2
20004814:	2b00      	cmp	r3, #0
20004816:	d1ea      	bne.n	200047ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20004818:	687b      	ldr	r3, [r7, #4]
2000481a:	681b      	ldr	r3, [r3, #0]
2000481c:	f003 0304 	and.w	r3, r3, #4
20004820:	2b00      	cmp	r3, #0
20004822:	f000 8097 	beq.w	20004954 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
20004826:	2300      	movs	r3, #0
20004828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
2000482a:	4b81      	ldr	r3, [pc, #516]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
2000482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20004832:	2b00      	cmp	r3, #0
20004834:	d10f      	bne.n	20004856 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
20004836:	2300      	movs	r3, #0
20004838:	60bb      	str	r3, [r7, #8]
2000483a:	4b7d      	ldr	r3, [pc, #500]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
2000483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000483e:	4a7c      	ldr	r2, [pc, #496]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
20004840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20004844:	6413      	str	r3, [r2, #64]	; 0x40
20004846:	4b7a      	ldr	r3, [pc, #488]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
20004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000484a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000484e:	60bb      	str	r3, [r7, #8]
20004850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
20004852:	2301      	movs	r3, #1
20004854:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20004856:	4b77      	ldr	r3, [pc, #476]	; (20004a34 <HAL_RCC_OscConfig+0x474>)
20004858:	681b      	ldr	r3, [r3, #0]
2000485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000485e:	2b00      	cmp	r3, #0
20004860:	d118      	bne.n	20004894 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
20004862:	4b74      	ldr	r3, [pc, #464]	; (20004a34 <HAL_RCC_OscConfig+0x474>)
20004864:	681b      	ldr	r3, [r3, #0]
20004866:	4a73      	ldr	r2, [pc, #460]	; (20004a34 <HAL_RCC_OscConfig+0x474>)
20004868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000486c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000486e:	f7ff f9e9 	bl	20003c44 <HAL_GetTick>
20004872:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20004874:	e008      	b.n	20004888 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20004876:	f7ff f9e5 	bl	20003c44 <HAL_GetTick>
2000487a:	4602      	mov	r2, r0
2000487c:	693b      	ldr	r3, [r7, #16]
2000487e:	1ad3      	subs	r3, r2, r3
20004880:	2b02      	cmp	r3, #2
20004882:	d901      	bls.n	20004888 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
20004884:	2303      	movs	r3, #3
20004886:	e10c      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20004888:	4b6a      	ldr	r3, [pc, #424]	; (20004a34 <HAL_RCC_OscConfig+0x474>)
2000488a:	681b      	ldr	r3, [r3, #0]
2000488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20004890:	2b00      	cmp	r3, #0
20004892:	d0f0      	beq.n	20004876 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20004894:	687b      	ldr	r3, [r7, #4]
20004896:	689b      	ldr	r3, [r3, #8]
20004898:	2b01      	cmp	r3, #1
2000489a:	d106      	bne.n	200048aa <HAL_RCC_OscConfig+0x2ea>
2000489c:	4b64      	ldr	r3, [pc, #400]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
2000489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200048a0:	4a63      	ldr	r2, [pc, #396]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
200048a2:	f043 0301 	orr.w	r3, r3, #1
200048a6:	6713      	str	r3, [r2, #112]	; 0x70
200048a8:	e01c      	b.n	200048e4 <HAL_RCC_OscConfig+0x324>
200048aa:	687b      	ldr	r3, [r7, #4]
200048ac:	689b      	ldr	r3, [r3, #8]
200048ae:	2b05      	cmp	r3, #5
200048b0:	d10c      	bne.n	200048cc <HAL_RCC_OscConfig+0x30c>
200048b2:	4b5f      	ldr	r3, [pc, #380]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
200048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200048b6:	4a5e      	ldr	r2, [pc, #376]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
200048b8:	f043 0304 	orr.w	r3, r3, #4
200048bc:	6713      	str	r3, [r2, #112]	; 0x70
200048be:	4b5c      	ldr	r3, [pc, #368]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
200048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200048c2:	4a5b      	ldr	r2, [pc, #364]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
200048c4:	f043 0301 	orr.w	r3, r3, #1
200048c8:	6713      	str	r3, [r2, #112]	; 0x70
200048ca:	e00b      	b.n	200048e4 <HAL_RCC_OscConfig+0x324>
200048cc:	4b58      	ldr	r3, [pc, #352]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
200048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200048d0:	4a57      	ldr	r2, [pc, #348]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
200048d2:	f023 0301 	bic.w	r3, r3, #1
200048d6:	6713      	str	r3, [r2, #112]	; 0x70
200048d8:	4b55      	ldr	r3, [pc, #340]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
200048da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200048dc:	4a54      	ldr	r2, [pc, #336]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
200048de:	f023 0304 	bic.w	r3, r3, #4
200048e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
200048e4:	687b      	ldr	r3, [r7, #4]
200048e6:	689b      	ldr	r3, [r3, #8]
200048e8:	2b00      	cmp	r3, #0
200048ea:	d015      	beq.n	20004918 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200048ec:	f7ff f9aa 	bl	20003c44 <HAL_GetTick>
200048f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200048f2:	e00a      	b.n	2000490a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
200048f4:	f7ff f9a6 	bl	20003c44 <HAL_GetTick>
200048f8:	4602      	mov	r2, r0
200048fa:	693b      	ldr	r3, [r7, #16]
200048fc:	1ad3      	subs	r3, r2, r3
200048fe:	f241 3288 	movw	r2, #5000	; 0x1388
20004902:	4293      	cmp	r3, r2
20004904:	d901      	bls.n	2000490a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
20004906:	2303      	movs	r3, #3
20004908:	e0cb      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000490a:	4b49      	ldr	r3, [pc, #292]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
2000490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000490e:	f003 0302 	and.w	r3, r3, #2
20004912:	2b00      	cmp	r3, #0
20004914:	d0ee      	beq.n	200048f4 <HAL_RCC_OscConfig+0x334>
20004916:	e014      	b.n	20004942 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
20004918:	f7ff f994 	bl	20003c44 <HAL_GetTick>
2000491c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000491e:	e00a      	b.n	20004936 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20004920:	f7ff f990 	bl	20003c44 <HAL_GetTick>
20004924:	4602      	mov	r2, r0
20004926:	693b      	ldr	r3, [r7, #16]
20004928:	1ad3      	subs	r3, r2, r3
2000492a:	f241 3288 	movw	r2, #5000	; 0x1388
2000492e:	4293      	cmp	r3, r2
20004930:	d901      	bls.n	20004936 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
20004932:	2303      	movs	r3, #3
20004934:	e0b5      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20004936:	4b3e      	ldr	r3, [pc, #248]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
20004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000493a:	f003 0302 	and.w	r3, r3, #2
2000493e:	2b00      	cmp	r3, #0
20004940:	d1ee      	bne.n	20004920 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
20004942:	7dfb      	ldrb	r3, [r7, #23]
20004944:	2b01      	cmp	r3, #1
20004946:	d105      	bne.n	20004954 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
20004948:	4b39      	ldr	r3, [pc, #228]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
2000494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000494c:	4a38      	ldr	r2, [pc, #224]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
2000494e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20004952:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20004954:	687b      	ldr	r3, [r7, #4]
20004956:	699b      	ldr	r3, [r3, #24]
20004958:	2b00      	cmp	r3, #0
2000495a:	f000 80a1 	beq.w	20004aa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000495e:	4b34      	ldr	r3, [pc, #208]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
20004960:	689b      	ldr	r3, [r3, #8]
20004962:	f003 030c 	and.w	r3, r3, #12
20004966:	2b08      	cmp	r3, #8
20004968:	d05c      	beq.n	20004a24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000496a:	687b      	ldr	r3, [r7, #4]
2000496c:	699b      	ldr	r3, [r3, #24]
2000496e:	2b02      	cmp	r3, #2
20004970:	d141      	bne.n	200049f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20004972:	4b31      	ldr	r3, [pc, #196]	; (20004a38 <HAL_RCC_OscConfig+0x478>)
20004974:	2200      	movs	r2, #0
20004976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20004978:	f7ff f964 	bl	20003c44 <HAL_GetTick>
2000497c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000497e:	e008      	b.n	20004992 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20004980:	f7ff f960 	bl	20003c44 <HAL_GetTick>
20004984:	4602      	mov	r2, r0
20004986:	693b      	ldr	r3, [r7, #16]
20004988:	1ad3      	subs	r3, r2, r3
2000498a:	2b02      	cmp	r3, #2
2000498c:	d901      	bls.n	20004992 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
2000498e:	2303      	movs	r3, #3
20004990:	e087      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20004992:	4b27      	ldr	r3, [pc, #156]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
20004994:	681b      	ldr	r3, [r3, #0]
20004996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000499a:	2b00      	cmp	r3, #0
2000499c:	d1f0      	bne.n	20004980 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000499e:	687b      	ldr	r3, [r7, #4]
200049a0:	69da      	ldr	r2, [r3, #28]
200049a2:	687b      	ldr	r3, [r7, #4]
200049a4:	6a1b      	ldr	r3, [r3, #32]
200049a6:	431a      	orrs	r2, r3
200049a8:	687b      	ldr	r3, [r7, #4]
200049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200049ac:	019b      	lsls	r3, r3, #6
200049ae:	431a      	orrs	r2, r3
200049b0:	687b      	ldr	r3, [r7, #4]
200049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200049b4:	085b      	lsrs	r3, r3, #1
200049b6:	3b01      	subs	r3, #1
200049b8:	041b      	lsls	r3, r3, #16
200049ba:	431a      	orrs	r2, r3
200049bc:	687b      	ldr	r3, [r7, #4]
200049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200049c0:	061b      	lsls	r3, r3, #24
200049c2:	491b      	ldr	r1, [pc, #108]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
200049c4:	4313      	orrs	r3, r2
200049c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
200049c8:	4b1b      	ldr	r3, [pc, #108]	; (20004a38 <HAL_RCC_OscConfig+0x478>)
200049ca:	2201      	movs	r2, #1
200049cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200049ce:	f7ff f939 	bl	20003c44 <HAL_GetTick>
200049d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200049d4:	e008      	b.n	200049e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200049d6:	f7ff f935 	bl	20003c44 <HAL_GetTick>
200049da:	4602      	mov	r2, r0
200049dc:	693b      	ldr	r3, [r7, #16]
200049de:	1ad3      	subs	r3, r2, r3
200049e0:	2b02      	cmp	r3, #2
200049e2:	d901      	bls.n	200049e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
200049e4:	2303      	movs	r3, #3
200049e6:	e05c      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200049e8:	4b11      	ldr	r3, [pc, #68]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
200049ea:	681b      	ldr	r3, [r3, #0]
200049ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200049f0:	2b00      	cmp	r3, #0
200049f2:	d0f0      	beq.n	200049d6 <HAL_RCC_OscConfig+0x416>
200049f4:	e054      	b.n	20004aa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
200049f6:	4b10      	ldr	r3, [pc, #64]	; (20004a38 <HAL_RCC_OscConfig+0x478>)
200049f8:	2200      	movs	r2, #0
200049fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200049fc:	f7ff f922 	bl	20003c44 <HAL_GetTick>
20004a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20004a02:	e008      	b.n	20004a16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20004a04:	f7ff f91e 	bl	20003c44 <HAL_GetTick>
20004a08:	4602      	mov	r2, r0
20004a0a:	693b      	ldr	r3, [r7, #16]
20004a0c:	1ad3      	subs	r3, r2, r3
20004a0e:	2b02      	cmp	r3, #2
20004a10:	d901      	bls.n	20004a16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
20004a12:	2303      	movs	r3, #3
20004a14:	e045      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20004a16:	4b06      	ldr	r3, [pc, #24]	; (20004a30 <HAL_RCC_OscConfig+0x470>)
20004a18:	681b      	ldr	r3, [r3, #0]
20004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20004a1e:	2b00      	cmp	r3, #0
20004a20:	d1f0      	bne.n	20004a04 <HAL_RCC_OscConfig+0x444>
20004a22:	e03d      	b.n	20004aa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
20004a24:	687b      	ldr	r3, [r7, #4]
20004a26:	699b      	ldr	r3, [r3, #24]
20004a28:	2b01      	cmp	r3, #1
20004a2a:	d107      	bne.n	20004a3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
20004a2c:	2301      	movs	r3, #1
20004a2e:	e038      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
20004a30:	40023800 	.word	0x40023800
20004a34:	40007000 	.word	0x40007000
20004a38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
20004a3c:	4b1b      	ldr	r3, [pc, #108]	; (20004aac <HAL_RCC_OscConfig+0x4ec>)
20004a3e:	685b      	ldr	r3, [r3, #4]
20004a40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20004a42:	687b      	ldr	r3, [r7, #4]
20004a44:	699b      	ldr	r3, [r3, #24]
20004a46:	2b01      	cmp	r3, #1
20004a48:	d028      	beq.n	20004a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20004a4a:	68fb      	ldr	r3, [r7, #12]
20004a4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
20004a50:	687b      	ldr	r3, [r7, #4]
20004a52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20004a54:	429a      	cmp	r2, r3
20004a56:	d121      	bne.n	20004a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20004a58:	68fb      	ldr	r3, [r7, #12]
20004a5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
20004a5e:	687b      	ldr	r3, [r7, #4]
20004a60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20004a62:	429a      	cmp	r2, r3
20004a64:	d11a      	bne.n	20004a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20004a66:	68fa      	ldr	r2, [r7, #12]
20004a68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
20004a6c:	4013      	ands	r3, r2
20004a6e:	687a      	ldr	r2, [r7, #4]
20004a70:	6a52      	ldr	r2, [r2, #36]	; 0x24
20004a72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20004a74:	4293      	cmp	r3, r2
20004a76:	d111      	bne.n	20004a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20004a78:	68fb      	ldr	r3, [r7, #12]
20004a7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
20004a7e:	687b      	ldr	r3, [r7, #4]
20004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20004a82:	085b      	lsrs	r3, r3, #1
20004a84:	3b01      	subs	r3, #1
20004a86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20004a88:	429a      	cmp	r2, r3
20004a8a:	d107      	bne.n	20004a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
20004a8c:	68fb      	ldr	r3, [r7, #12]
20004a8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
20004a92:	687b      	ldr	r3, [r7, #4]
20004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20004a96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20004a98:	429a      	cmp	r2, r3
20004a9a:	d001      	beq.n	20004aa0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
20004a9c:	2301      	movs	r3, #1
20004a9e:	e000      	b.n	20004aa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
20004aa0:	2300      	movs	r3, #0
}
20004aa2:	4618      	mov	r0, r3
20004aa4:	3718      	adds	r7, #24
20004aa6:	46bd      	mov	sp, r7
20004aa8:	bd80      	pop	{r7, pc}
20004aaa:	bf00      	nop
20004aac:	40023800 	.word	0x40023800

20004ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20004ab0:	b580      	push	{r7, lr}
20004ab2:	b084      	sub	sp, #16
20004ab4:	af00      	add	r7, sp, #0
20004ab6:	6078      	str	r0, [r7, #4]
20004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
20004aba:	687b      	ldr	r3, [r7, #4]
20004abc:	2b00      	cmp	r3, #0
20004abe:	d101      	bne.n	20004ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
20004ac0:	2301      	movs	r3, #1
20004ac2:	e0cc      	b.n	20004c5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
20004ac4:	4b68      	ldr	r3, [pc, #416]	; (20004c68 <HAL_RCC_ClockConfig+0x1b8>)
20004ac6:	681b      	ldr	r3, [r3, #0]
20004ac8:	f003 0307 	and.w	r3, r3, #7
20004acc:	683a      	ldr	r2, [r7, #0]
20004ace:	429a      	cmp	r2, r3
20004ad0:	d90c      	bls.n	20004aec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20004ad2:	4b65      	ldr	r3, [pc, #404]	; (20004c68 <HAL_RCC_ClockConfig+0x1b8>)
20004ad4:	683a      	ldr	r2, [r7, #0]
20004ad6:	b2d2      	uxtb	r2, r2
20004ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20004ada:	4b63      	ldr	r3, [pc, #396]	; (20004c68 <HAL_RCC_ClockConfig+0x1b8>)
20004adc:	681b      	ldr	r3, [r3, #0]
20004ade:	f003 0307 	and.w	r3, r3, #7
20004ae2:	683a      	ldr	r2, [r7, #0]
20004ae4:	429a      	cmp	r2, r3
20004ae6:	d001      	beq.n	20004aec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
20004ae8:	2301      	movs	r3, #1
20004aea:	e0b8      	b.n	20004c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20004aec:	687b      	ldr	r3, [r7, #4]
20004aee:	681b      	ldr	r3, [r3, #0]
20004af0:	f003 0302 	and.w	r3, r3, #2
20004af4:	2b00      	cmp	r3, #0
20004af6:	d020      	beq.n	20004b3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20004af8:	687b      	ldr	r3, [r7, #4]
20004afa:	681b      	ldr	r3, [r3, #0]
20004afc:	f003 0304 	and.w	r3, r3, #4
20004b00:	2b00      	cmp	r3, #0
20004b02:	d005      	beq.n	20004b10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20004b04:	4b59      	ldr	r3, [pc, #356]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004b06:	689b      	ldr	r3, [r3, #8]
20004b08:	4a58      	ldr	r2, [pc, #352]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
20004b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20004b10:	687b      	ldr	r3, [r7, #4]
20004b12:	681b      	ldr	r3, [r3, #0]
20004b14:	f003 0308 	and.w	r3, r3, #8
20004b18:	2b00      	cmp	r3, #0
20004b1a:	d005      	beq.n	20004b28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20004b1c:	4b53      	ldr	r3, [pc, #332]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004b1e:	689b      	ldr	r3, [r3, #8]
20004b20:	4a52      	ldr	r2, [pc, #328]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
20004b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20004b28:	4b50      	ldr	r3, [pc, #320]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004b2a:	689b      	ldr	r3, [r3, #8]
20004b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
20004b30:	687b      	ldr	r3, [r7, #4]
20004b32:	689b      	ldr	r3, [r3, #8]
20004b34:	494d      	ldr	r1, [pc, #308]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004b36:	4313      	orrs	r3, r2
20004b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20004b3a:	687b      	ldr	r3, [r7, #4]
20004b3c:	681b      	ldr	r3, [r3, #0]
20004b3e:	f003 0301 	and.w	r3, r3, #1
20004b42:	2b00      	cmp	r3, #0
20004b44:	d044      	beq.n	20004bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20004b46:	687b      	ldr	r3, [r7, #4]
20004b48:	685b      	ldr	r3, [r3, #4]
20004b4a:	2b01      	cmp	r3, #1
20004b4c:	d107      	bne.n	20004b5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20004b4e:	4b47      	ldr	r3, [pc, #284]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004b50:	681b      	ldr	r3, [r3, #0]
20004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20004b56:	2b00      	cmp	r3, #0
20004b58:	d119      	bne.n	20004b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20004b5a:	2301      	movs	r3, #1
20004b5c:	e07f      	b.n	20004c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20004b5e:	687b      	ldr	r3, [r7, #4]
20004b60:	685b      	ldr	r3, [r3, #4]
20004b62:	2b02      	cmp	r3, #2
20004b64:	d003      	beq.n	20004b6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
20004b66:	687b      	ldr	r3, [r7, #4]
20004b68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20004b6a:	2b03      	cmp	r3, #3
20004b6c:	d107      	bne.n	20004b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20004b6e:	4b3f      	ldr	r3, [pc, #252]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004b70:	681b      	ldr	r3, [r3, #0]
20004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20004b76:	2b00      	cmp	r3, #0
20004b78:	d109      	bne.n	20004b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20004b7a:	2301      	movs	r3, #1
20004b7c:	e06f      	b.n	20004c5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20004b7e:	4b3b      	ldr	r3, [pc, #236]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004b80:	681b      	ldr	r3, [r3, #0]
20004b82:	f003 0302 	and.w	r3, r3, #2
20004b86:	2b00      	cmp	r3, #0
20004b88:	d101      	bne.n	20004b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20004b8a:	2301      	movs	r3, #1
20004b8c:	e067      	b.n	20004c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20004b8e:	4b37      	ldr	r3, [pc, #220]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004b90:	689b      	ldr	r3, [r3, #8]
20004b92:	f023 0203 	bic.w	r2, r3, #3
20004b96:	687b      	ldr	r3, [r7, #4]
20004b98:	685b      	ldr	r3, [r3, #4]
20004b9a:	4934      	ldr	r1, [pc, #208]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004b9c:	4313      	orrs	r3, r2
20004b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
20004ba0:	f7ff f850 	bl	20003c44 <HAL_GetTick>
20004ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20004ba6:	e00a      	b.n	20004bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20004ba8:	f7ff f84c 	bl	20003c44 <HAL_GetTick>
20004bac:	4602      	mov	r2, r0
20004bae:	68fb      	ldr	r3, [r7, #12]
20004bb0:	1ad3      	subs	r3, r2, r3
20004bb2:	f241 3288 	movw	r2, #5000	; 0x1388
20004bb6:	4293      	cmp	r3, r2
20004bb8:	d901      	bls.n	20004bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
20004bba:	2303      	movs	r3, #3
20004bbc:	e04f      	b.n	20004c5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20004bbe:	4b2b      	ldr	r3, [pc, #172]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004bc0:	689b      	ldr	r3, [r3, #8]
20004bc2:	f003 020c 	and.w	r2, r3, #12
20004bc6:	687b      	ldr	r3, [r7, #4]
20004bc8:	685b      	ldr	r3, [r3, #4]
20004bca:	009b      	lsls	r3, r3, #2
20004bcc:	429a      	cmp	r2, r3
20004bce:	d1eb      	bne.n	20004ba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
20004bd0:	4b25      	ldr	r3, [pc, #148]	; (20004c68 <HAL_RCC_ClockConfig+0x1b8>)
20004bd2:	681b      	ldr	r3, [r3, #0]
20004bd4:	f003 0307 	and.w	r3, r3, #7
20004bd8:	683a      	ldr	r2, [r7, #0]
20004bda:	429a      	cmp	r2, r3
20004bdc:	d20c      	bcs.n	20004bf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20004bde:	4b22      	ldr	r3, [pc, #136]	; (20004c68 <HAL_RCC_ClockConfig+0x1b8>)
20004be0:	683a      	ldr	r2, [r7, #0]
20004be2:	b2d2      	uxtb	r2, r2
20004be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20004be6:	4b20      	ldr	r3, [pc, #128]	; (20004c68 <HAL_RCC_ClockConfig+0x1b8>)
20004be8:	681b      	ldr	r3, [r3, #0]
20004bea:	f003 0307 	and.w	r3, r3, #7
20004bee:	683a      	ldr	r2, [r7, #0]
20004bf0:	429a      	cmp	r2, r3
20004bf2:	d001      	beq.n	20004bf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
20004bf4:	2301      	movs	r3, #1
20004bf6:	e032      	b.n	20004c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20004bf8:	687b      	ldr	r3, [r7, #4]
20004bfa:	681b      	ldr	r3, [r3, #0]
20004bfc:	f003 0304 	and.w	r3, r3, #4
20004c00:	2b00      	cmp	r3, #0
20004c02:	d008      	beq.n	20004c16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20004c04:	4b19      	ldr	r3, [pc, #100]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004c06:	689b      	ldr	r3, [r3, #8]
20004c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
20004c0c:	687b      	ldr	r3, [r7, #4]
20004c0e:	68db      	ldr	r3, [r3, #12]
20004c10:	4916      	ldr	r1, [pc, #88]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004c12:	4313      	orrs	r3, r2
20004c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20004c16:	687b      	ldr	r3, [r7, #4]
20004c18:	681b      	ldr	r3, [r3, #0]
20004c1a:	f003 0308 	and.w	r3, r3, #8
20004c1e:	2b00      	cmp	r3, #0
20004c20:	d009      	beq.n	20004c36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20004c22:	4b12      	ldr	r3, [pc, #72]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004c24:	689b      	ldr	r3, [r3, #8]
20004c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20004c2a:	687b      	ldr	r3, [r7, #4]
20004c2c:	691b      	ldr	r3, [r3, #16]
20004c2e:	00db      	lsls	r3, r3, #3
20004c30:	490e      	ldr	r1, [pc, #56]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004c32:	4313      	orrs	r3, r2
20004c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
20004c36:	f000 f821 	bl	20004c7c <HAL_RCC_GetSysClockFreq>
20004c3a:	4602      	mov	r2, r0
20004c3c:	4b0b      	ldr	r3, [pc, #44]	; (20004c6c <HAL_RCC_ClockConfig+0x1bc>)
20004c3e:	689b      	ldr	r3, [r3, #8]
20004c40:	091b      	lsrs	r3, r3, #4
20004c42:	f003 030f 	and.w	r3, r3, #15
20004c46:	490a      	ldr	r1, [pc, #40]	; (20004c70 <HAL_RCC_ClockConfig+0x1c0>)
20004c48:	5ccb      	ldrb	r3, [r1, r3]
20004c4a:	fa22 f303 	lsr.w	r3, r2, r3
20004c4e:	4a09      	ldr	r2, [pc, #36]	; (20004c74 <HAL_RCC_ClockConfig+0x1c4>)
20004c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
20004c52:	4b09      	ldr	r3, [pc, #36]	; (20004c78 <HAL_RCC_ClockConfig+0x1c8>)
20004c54:	681b      	ldr	r3, [r3, #0]
20004c56:	4618      	mov	r0, r3
20004c58:	f7fe ffb0 	bl	20003bbc <HAL_InitTick>

  return HAL_OK;
20004c5c:	2300      	movs	r3, #0
}
20004c5e:	4618      	mov	r0, r3
20004c60:	3710      	adds	r7, #16
20004c62:	46bd      	mov	sp, r7
20004c64:	bd80      	pop	{r7, pc}
20004c66:	bf00      	nop
20004c68:	40023c00 	.word	0x40023c00
20004c6c:	40023800 	.word	0x40023800
20004c70:	200118a8 	.word	0x200118a8
20004c74:	20011918 	.word	0x20011918
20004c78:	20011930 	.word	0x20011930

20004c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
20004c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20004c80:	b090      	sub	sp, #64	; 0x40
20004c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
20004c84:	2300      	movs	r3, #0
20004c86:	637b      	str	r3, [r7, #52]	; 0x34
20004c88:	2300      	movs	r3, #0
20004c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
20004c8c:	2300      	movs	r3, #0
20004c8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
20004c90:	2300      	movs	r3, #0
20004c92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20004c94:	4b59      	ldr	r3, [pc, #356]	; (20004dfc <HAL_RCC_GetSysClockFreq+0x180>)
20004c96:	689b      	ldr	r3, [r3, #8]
20004c98:	f003 030c 	and.w	r3, r3, #12
20004c9c:	2b08      	cmp	r3, #8
20004c9e:	d00d      	beq.n	20004cbc <HAL_RCC_GetSysClockFreq+0x40>
20004ca0:	2b08      	cmp	r3, #8
20004ca2:	f200 80a1 	bhi.w	20004de8 <HAL_RCC_GetSysClockFreq+0x16c>
20004ca6:	2b00      	cmp	r3, #0
20004ca8:	d002      	beq.n	20004cb0 <HAL_RCC_GetSysClockFreq+0x34>
20004caa:	2b04      	cmp	r3, #4
20004cac:	d003      	beq.n	20004cb6 <HAL_RCC_GetSysClockFreq+0x3a>
20004cae:	e09b      	b.n	20004de8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20004cb0:	4b53      	ldr	r3, [pc, #332]	; (20004e00 <HAL_RCC_GetSysClockFreq+0x184>)
20004cb2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
20004cb4:	e09b      	b.n	20004dee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20004cb6:	4b53      	ldr	r3, [pc, #332]	; (20004e04 <HAL_RCC_GetSysClockFreq+0x188>)
20004cb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
20004cba:	e098      	b.n	20004dee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20004cbc:	4b4f      	ldr	r3, [pc, #316]	; (20004dfc <HAL_RCC_GetSysClockFreq+0x180>)
20004cbe:	685b      	ldr	r3, [r3, #4]
20004cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20004cc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20004cc6:	4b4d      	ldr	r3, [pc, #308]	; (20004dfc <HAL_RCC_GetSysClockFreq+0x180>)
20004cc8:	685b      	ldr	r3, [r3, #4]
20004cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20004cce:	2b00      	cmp	r3, #0
20004cd0:	d028      	beq.n	20004d24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20004cd2:	4b4a      	ldr	r3, [pc, #296]	; (20004dfc <HAL_RCC_GetSysClockFreq+0x180>)
20004cd4:	685b      	ldr	r3, [r3, #4]
20004cd6:	099b      	lsrs	r3, r3, #6
20004cd8:	2200      	movs	r2, #0
20004cda:	623b      	str	r3, [r7, #32]
20004cdc:	627a      	str	r2, [r7, #36]	; 0x24
20004cde:	6a3b      	ldr	r3, [r7, #32]
20004ce0:	f3c3 0008 	ubfx	r0, r3, #0, #9
20004ce4:	2100      	movs	r1, #0
20004ce6:	4b47      	ldr	r3, [pc, #284]	; (20004e04 <HAL_RCC_GetSysClockFreq+0x188>)
20004ce8:	fb03 f201 	mul.w	r2, r3, r1
20004cec:	2300      	movs	r3, #0
20004cee:	fb00 f303 	mul.w	r3, r0, r3
20004cf2:	4413      	add	r3, r2
20004cf4:	4a43      	ldr	r2, [pc, #268]	; (20004e04 <HAL_RCC_GetSysClockFreq+0x188>)
20004cf6:	fba0 1202 	umull	r1, r2, r0, r2
20004cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
20004cfc:	460a      	mov	r2, r1
20004cfe:	62ba      	str	r2, [r7, #40]	; 0x28
20004d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20004d02:	4413      	add	r3, r2
20004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
20004d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20004d08:	2200      	movs	r2, #0
20004d0a:	61bb      	str	r3, [r7, #24]
20004d0c:	61fa      	str	r2, [r7, #28]
20004d0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20004d12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
20004d16:	f7fb fab3 	bl	20000280 <__aeabi_uldivmod>
20004d1a:	4602      	mov	r2, r0
20004d1c:	460b      	mov	r3, r1
20004d1e:	4613      	mov	r3, r2
20004d20:	63fb      	str	r3, [r7, #60]	; 0x3c
20004d22:	e053      	b.n	20004dcc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20004d24:	4b35      	ldr	r3, [pc, #212]	; (20004dfc <HAL_RCC_GetSysClockFreq+0x180>)
20004d26:	685b      	ldr	r3, [r3, #4]
20004d28:	099b      	lsrs	r3, r3, #6
20004d2a:	2200      	movs	r2, #0
20004d2c:	613b      	str	r3, [r7, #16]
20004d2e:	617a      	str	r2, [r7, #20]
20004d30:	693b      	ldr	r3, [r7, #16]
20004d32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
20004d36:	f04f 0b00 	mov.w	fp, #0
20004d3a:	4652      	mov	r2, sl
20004d3c:	465b      	mov	r3, fp
20004d3e:	f04f 0000 	mov.w	r0, #0
20004d42:	f04f 0100 	mov.w	r1, #0
20004d46:	0159      	lsls	r1, r3, #5
20004d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20004d4c:	0150      	lsls	r0, r2, #5
20004d4e:	4602      	mov	r2, r0
20004d50:	460b      	mov	r3, r1
20004d52:	ebb2 080a 	subs.w	r8, r2, sl
20004d56:	eb63 090b 	sbc.w	r9, r3, fp
20004d5a:	f04f 0200 	mov.w	r2, #0
20004d5e:	f04f 0300 	mov.w	r3, #0
20004d62:	ea4f 1389 	mov.w	r3, r9, lsl #6
20004d66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
20004d6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
20004d6e:	ebb2 0408 	subs.w	r4, r2, r8
20004d72:	eb63 0509 	sbc.w	r5, r3, r9
20004d76:	f04f 0200 	mov.w	r2, #0
20004d7a:	f04f 0300 	mov.w	r3, #0
20004d7e:	00eb      	lsls	r3, r5, #3
20004d80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20004d84:	00e2      	lsls	r2, r4, #3
20004d86:	4614      	mov	r4, r2
20004d88:	461d      	mov	r5, r3
20004d8a:	eb14 030a 	adds.w	r3, r4, sl
20004d8e:	603b      	str	r3, [r7, #0]
20004d90:	eb45 030b 	adc.w	r3, r5, fp
20004d94:	607b      	str	r3, [r7, #4]
20004d96:	f04f 0200 	mov.w	r2, #0
20004d9a:	f04f 0300 	mov.w	r3, #0
20004d9e:	e9d7 4500 	ldrd	r4, r5, [r7]
20004da2:	4629      	mov	r1, r5
20004da4:	028b      	lsls	r3, r1, #10
20004da6:	4621      	mov	r1, r4
20004da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20004dac:	4621      	mov	r1, r4
20004dae:	028a      	lsls	r2, r1, #10
20004db0:	4610      	mov	r0, r2
20004db2:	4619      	mov	r1, r3
20004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20004db6:	2200      	movs	r2, #0
20004db8:	60bb      	str	r3, [r7, #8]
20004dba:	60fa      	str	r2, [r7, #12]
20004dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
20004dc0:	f7fb fa5e 	bl	20000280 <__aeabi_uldivmod>
20004dc4:	4602      	mov	r2, r0
20004dc6:	460b      	mov	r3, r1
20004dc8:	4613      	mov	r3, r2
20004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
20004dcc:	4b0b      	ldr	r3, [pc, #44]	; (20004dfc <HAL_RCC_GetSysClockFreq+0x180>)
20004dce:	685b      	ldr	r3, [r3, #4]
20004dd0:	0c1b      	lsrs	r3, r3, #16
20004dd2:	f003 0303 	and.w	r3, r3, #3
20004dd6:	3301      	adds	r3, #1
20004dd8:	005b      	lsls	r3, r3, #1
20004dda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
20004ddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20004de0:	fbb2 f3f3 	udiv	r3, r2, r3
20004de4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
20004de6:	e002      	b.n	20004dee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20004de8:	4b05      	ldr	r3, [pc, #20]	; (20004e00 <HAL_RCC_GetSysClockFreq+0x184>)
20004dea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
20004dec:	bf00      	nop
    }
  }
  return sysclockfreq;
20004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
20004df0:	4618      	mov	r0, r3
20004df2:	3740      	adds	r7, #64	; 0x40
20004df4:	46bd      	mov	sp, r7
20004df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20004dfa:	bf00      	nop
20004dfc:	40023800 	.word	0x40023800
20004e00:	00f42400 	.word	0x00f42400
20004e04:	017d7840 	.word	0x017d7840

20004e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
20004e08:	b580      	push	{r7, lr}
20004e0a:	b082      	sub	sp, #8
20004e0c:	af00      	add	r7, sp, #0
20004e0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
20004e10:	687b      	ldr	r3, [r7, #4]
20004e12:	2b00      	cmp	r3, #0
20004e14:	d101      	bne.n	20004e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
20004e16:	2301      	movs	r3, #1
20004e18:	e07b      	b.n	20004f12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
20004e1a:	687b      	ldr	r3, [r7, #4]
20004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20004e1e:	2b00      	cmp	r3, #0
20004e20:	d108      	bne.n	20004e34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
20004e22:	687b      	ldr	r3, [r7, #4]
20004e24:	685b      	ldr	r3, [r3, #4]
20004e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20004e2a:	d009      	beq.n	20004e40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20004e2c:	687b      	ldr	r3, [r7, #4]
20004e2e:	2200      	movs	r2, #0
20004e30:	61da      	str	r2, [r3, #28]
20004e32:	e005      	b.n	20004e40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
20004e34:	687b      	ldr	r3, [r7, #4]
20004e36:	2200      	movs	r2, #0
20004e38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
20004e3a:	687b      	ldr	r3, [r7, #4]
20004e3c:	2200      	movs	r2, #0
20004e3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20004e40:	687b      	ldr	r3, [r7, #4]
20004e42:	2200      	movs	r2, #0
20004e44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
20004e46:	687b      	ldr	r3, [r7, #4]
20004e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20004e4c:	b2db      	uxtb	r3, r3
20004e4e:	2b00      	cmp	r3, #0
20004e50:	d106      	bne.n	20004e60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
20004e52:	687b      	ldr	r3, [r7, #4]
20004e54:	2200      	movs	r2, #0
20004e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
20004e5a:	6878      	ldr	r0, [r7, #4]
20004e5c:	f7fe fc30 	bl	200036c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
20004e60:	687b      	ldr	r3, [r7, #4]
20004e62:	2202      	movs	r2, #2
20004e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
20004e68:	687b      	ldr	r3, [r7, #4]
20004e6a:	681b      	ldr	r3, [r3, #0]
20004e6c:	681a      	ldr	r2, [r3, #0]
20004e6e:	687b      	ldr	r3, [r7, #4]
20004e70:	681b      	ldr	r3, [r3, #0]
20004e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20004e76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
20004e78:	687b      	ldr	r3, [r7, #4]
20004e7a:	685b      	ldr	r3, [r3, #4]
20004e7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
20004e80:	687b      	ldr	r3, [r7, #4]
20004e82:	689b      	ldr	r3, [r3, #8]
20004e84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
20004e88:	431a      	orrs	r2, r3
20004e8a:	687b      	ldr	r3, [r7, #4]
20004e8c:	68db      	ldr	r3, [r3, #12]
20004e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
20004e92:	431a      	orrs	r2, r3
20004e94:	687b      	ldr	r3, [r7, #4]
20004e96:	691b      	ldr	r3, [r3, #16]
20004e98:	f003 0302 	and.w	r3, r3, #2
20004e9c:	431a      	orrs	r2, r3
20004e9e:	687b      	ldr	r3, [r7, #4]
20004ea0:	695b      	ldr	r3, [r3, #20]
20004ea2:	f003 0301 	and.w	r3, r3, #1
20004ea6:	431a      	orrs	r2, r3
20004ea8:	687b      	ldr	r3, [r7, #4]
20004eaa:	699b      	ldr	r3, [r3, #24]
20004eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
20004eb0:	431a      	orrs	r2, r3
20004eb2:	687b      	ldr	r3, [r7, #4]
20004eb4:	69db      	ldr	r3, [r3, #28]
20004eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
20004eba:	431a      	orrs	r2, r3
20004ebc:	687b      	ldr	r3, [r7, #4]
20004ebe:	6a1b      	ldr	r3, [r3, #32]
20004ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
20004ec4:	ea42 0103 	orr.w	r1, r2, r3
20004ec8:	687b      	ldr	r3, [r7, #4]
20004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20004ecc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
20004ed0:	687b      	ldr	r3, [r7, #4]
20004ed2:	681b      	ldr	r3, [r3, #0]
20004ed4:	430a      	orrs	r2, r1
20004ed6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
20004ed8:	687b      	ldr	r3, [r7, #4]
20004eda:	699b      	ldr	r3, [r3, #24]
20004edc:	0c1b      	lsrs	r3, r3, #16
20004ede:	f003 0104 	and.w	r1, r3, #4
20004ee2:	687b      	ldr	r3, [r7, #4]
20004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20004ee6:	f003 0210 	and.w	r2, r3, #16
20004eea:	687b      	ldr	r3, [r7, #4]
20004eec:	681b      	ldr	r3, [r3, #0]
20004eee:	430a      	orrs	r2, r1
20004ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
20004ef2:	687b      	ldr	r3, [r7, #4]
20004ef4:	681b      	ldr	r3, [r3, #0]
20004ef6:	69da      	ldr	r2, [r3, #28]
20004ef8:	687b      	ldr	r3, [r7, #4]
20004efa:	681b      	ldr	r3, [r3, #0]
20004efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20004f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20004f02:	687b      	ldr	r3, [r7, #4]
20004f04:	2200      	movs	r2, #0
20004f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
20004f08:	687b      	ldr	r3, [r7, #4]
20004f0a:	2201      	movs	r2, #1
20004f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
20004f10:	2300      	movs	r3, #0
}
20004f12:	4618      	mov	r0, r3
20004f14:	3708      	adds	r7, #8
20004f16:	46bd      	mov	sp, r7
20004f18:	bd80      	pop	{r7, pc}

20004f1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
20004f1a:	b580      	push	{r7, lr}
20004f1c:	b088      	sub	sp, #32
20004f1e:	af00      	add	r7, sp, #0
20004f20:	60f8      	str	r0, [r7, #12]
20004f22:	60b9      	str	r1, [r7, #8]
20004f24:	603b      	str	r3, [r7, #0]
20004f26:	4613      	mov	r3, r2
20004f28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
20004f2a:	2300      	movs	r3, #0
20004f2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
20004f2e:	68fb      	ldr	r3, [r7, #12]
20004f30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20004f34:	2b01      	cmp	r3, #1
20004f36:	d101      	bne.n	20004f3c <HAL_SPI_Transmit+0x22>
20004f38:	2302      	movs	r3, #2
20004f3a:	e126      	b.n	2000518a <HAL_SPI_Transmit+0x270>
20004f3c:	68fb      	ldr	r3, [r7, #12]
20004f3e:	2201      	movs	r2, #1
20004f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20004f44:	f7fe fe7e 	bl	20003c44 <HAL_GetTick>
20004f48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
20004f4a:	88fb      	ldrh	r3, [r7, #6]
20004f4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
20004f4e:	68fb      	ldr	r3, [r7, #12]
20004f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20004f54:	b2db      	uxtb	r3, r3
20004f56:	2b01      	cmp	r3, #1
20004f58:	d002      	beq.n	20004f60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
20004f5a:	2302      	movs	r3, #2
20004f5c:	77fb      	strb	r3, [r7, #31]
    goto error;
20004f5e:	e10b      	b.n	20005178 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
20004f60:	68bb      	ldr	r3, [r7, #8]
20004f62:	2b00      	cmp	r3, #0
20004f64:	d002      	beq.n	20004f6c <HAL_SPI_Transmit+0x52>
20004f66:	88fb      	ldrh	r3, [r7, #6]
20004f68:	2b00      	cmp	r3, #0
20004f6a:	d102      	bne.n	20004f72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
20004f6c:	2301      	movs	r3, #1
20004f6e:	77fb      	strb	r3, [r7, #31]
    goto error;
20004f70:	e102      	b.n	20005178 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
20004f72:	68fb      	ldr	r3, [r7, #12]
20004f74:	2203      	movs	r2, #3
20004f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20004f7a:	68fb      	ldr	r3, [r7, #12]
20004f7c:	2200      	movs	r2, #0
20004f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
20004f80:	68fb      	ldr	r3, [r7, #12]
20004f82:	68ba      	ldr	r2, [r7, #8]
20004f84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20004f86:	68fb      	ldr	r3, [r7, #12]
20004f88:	88fa      	ldrh	r2, [r7, #6]
20004f8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20004f8c:	68fb      	ldr	r3, [r7, #12]
20004f8e:	88fa      	ldrh	r2, [r7, #6]
20004f90:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
20004f92:	68fb      	ldr	r3, [r7, #12]
20004f94:	2200      	movs	r2, #0
20004f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
20004f98:	68fb      	ldr	r3, [r7, #12]
20004f9a:	2200      	movs	r2, #0
20004f9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
20004f9e:	68fb      	ldr	r3, [r7, #12]
20004fa0:	2200      	movs	r2, #0
20004fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
20004fa4:	68fb      	ldr	r3, [r7, #12]
20004fa6:	2200      	movs	r2, #0
20004fa8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
20004faa:	68fb      	ldr	r3, [r7, #12]
20004fac:	2200      	movs	r2, #0
20004fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20004fb0:	68fb      	ldr	r3, [r7, #12]
20004fb2:	689b      	ldr	r3, [r3, #8]
20004fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20004fb8:	d10f      	bne.n	20004fda <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20004fba:	68fb      	ldr	r3, [r7, #12]
20004fbc:	681b      	ldr	r3, [r3, #0]
20004fbe:	681a      	ldr	r2, [r3, #0]
20004fc0:	68fb      	ldr	r3, [r7, #12]
20004fc2:	681b      	ldr	r3, [r3, #0]
20004fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20004fc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
20004fca:	68fb      	ldr	r3, [r7, #12]
20004fcc:	681b      	ldr	r3, [r3, #0]
20004fce:	681a      	ldr	r2, [r3, #0]
20004fd0:	68fb      	ldr	r3, [r7, #12]
20004fd2:	681b      	ldr	r3, [r3, #0]
20004fd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20004fd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20004fda:	68fb      	ldr	r3, [r7, #12]
20004fdc:	681b      	ldr	r3, [r3, #0]
20004fde:	681b      	ldr	r3, [r3, #0]
20004fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
20004fe4:	2b40      	cmp	r3, #64	; 0x40
20004fe6:	d007      	beq.n	20004ff8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20004fe8:	68fb      	ldr	r3, [r7, #12]
20004fea:	681b      	ldr	r3, [r3, #0]
20004fec:	681a      	ldr	r2, [r3, #0]
20004fee:	68fb      	ldr	r3, [r7, #12]
20004ff0:	681b      	ldr	r3, [r3, #0]
20004ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20004ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
20004ff8:	68fb      	ldr	r3, [r7, #12]
20004ffa:	68db      	ldr	r3, [r3, #12]
20004ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20005000:	d14b      	bne.n	2000509a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20005002:	68fb      	ldr	r3, [r7, #12]
20005004:	685b      	ldr	r3, [r3, #4]
20005006:	2b00      	cmp	r3, #0
20005008:	d002      	beq.n	20005010 <HAL_SPI_Transmit+0xf6>
2000500a:	8afb      	ldrh	r3, [r7, #22]
2000500c:	2b01      	cmp	r3, #1
2000500e:	d13e      	bne.n	2000508e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20005010:	68fb      	ldr	r3, [r7, #12]
20005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005014:	881a      	ldrh	r2, [r3, #0]
20005016:	68fb      	ldr	r3, [r7, #12]
20005018:	681b      	ldr	r3, [r3, #0]
2000501a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
2000501c:	68fb      	ldr	r3, [r7, #12]
2000501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005020:	1c9a      	adds	r2, r3, #2
20005022:	68fb      	ldr	r3, [r7, #12]
20005024:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
20005026:	68fb      	ldr	r3, [r7, #12]
20005028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000502a:	b29b      	uxth	r3, r3
2000502c:	3b01      	subs	r3, #1
2000502e:	b29a      	uxth	r2, r3
20005030:	68fb      	ldr	r3, [r7, #12]
20005032:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
20005034:	e02b      	b.n	2000508e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
20005036:	68fb      	ldr	r3, [r7, #12]
20005038:	681b      	ldr	r3, [r3, #0]
2000503a:	689b      	ldr	r3, [r3, #8]
2000503c:	f003 0302 	and.w	r3, r3, #2
20005040:	2b02      	cmp	r3, #2
20005042:	d112      	bne.n	2000506a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20005044:	68fb      	ldr	r3, [r7, #12]
20005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005048:	881a      	ldrh	r2, [r3, #0]
2000504a:	68fb      	ldr	r3, [r7, #12]
2000504c:	681b      	ldr	r3, [r3, #0]
2000504e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20005050:	68fb      	ldr	r3, [r7, #12]
20005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005054:	1c9a      	adds	r2, r3, #2
20005056:	68fb      	ldr	r3, [r7, #12]
20005058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
2000505a:	68fb      	ldr	r3, [r7, #12]
2000505c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000505e:	b29b      	uxth	r3, r3
20005060:	3b01      	subs	r3, #1
20005062:	b29a      	uxth	r2, r3
20005064:	68fb      	ldr	r3, [r7, #12]
20005066:	86da      	strh	r2, [r3, #54]	; 0x36
20005068:	e011      	b.n	2000508e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2000506a:	f7fe fdeb 	bl	20003c44 <HAL_GetTick>
2000506e:	4602      	mov	r2, r0
20005070:	69bb      	ldr	r3, [r7, #24]
20005072:	1ad3      	subs	r3, r2, r3
20005074:	683a      	ldr	r2, [r7, #0]
20005076:	429a      	cmp	r2, r3
20005078:	d803      	bhi.n	20005082 <HAL_SPI_Transmit+0x168>
2000507a:	683b      	ldr	r3, [r7, #0]
2000507c:	f1b3 3fff 	cmp.w	r3, #4294967295
20005080:	d102      	bne.n	20005088 <HAL_SPI_Transmit+0x16e>
20005082:	683b      	ldr	r3, [r7, #0]
20005084:	2b00      	cmp	r3, #0
20005086:	d102      	bne.n	2000508e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
20005088:	2303      	movs	r3, #3
2000508a:	77fb      	strb	r3, [r7, #31]
          goto error;
2000508c:	e074      	b.n	20005178 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
2000508e:	68fb      	ldr	r3, [r7, #12]
20005090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20005092:	b29b      	uxth	r3, r3
20005094:	2b00      	cmp	r3, #0
20005096:	d1ce      	bne.n	20005036 <HAL_SPI_Transmit+0x11c>
20005098:	e04c      	b.n	20005134 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
2000509a:	68fb      	ldr	r3, [r7, #12]
2000509c:	685b      	ldr	r3, [r3, #4]
2000509e:	2b00      	cmp	r3, #0
200050a0:	d002      	beq.n	200050a8 <HAL_SPI_Transmit+0x18e>
200050a2:	8afb      	ldrh	r3, [r7, #22]
200050a4:	2b01      	cmp	r3, #1
200050a6:	d140      	bne.n	2000512a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
200050a8:	68fb      	ldr	r3, [r7, #12]
200050aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200050ac:	68fb      	ldr	r3, [r7, #12]
200050ae:	681b      	ldr	r3, [r3, #0]
200050b0:	330c      	adds	r3, #12
200050b2:	7812      	ldrb	r2, [r2, #0]
200050b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
200050b6:	68fb      	ldr	r3, [r7, #12]
200050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200050ba:	1c5a      	adds	r2, r3, #1
200050bc:	68fb      	ldr	r3, [r7, #12]
200050be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
200050c0:	68fb      	ldr	r3, [r7, #12]
200050c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200050c4:	b29b      	uxth	r3, r3
200050c6:	3b01      	subs	r3, #1
200050c8:	b29a      	uxth	r2, r3
200050ca:	68fb      	ldr	r3, [r7, #12]
200050cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
200050ce:	e02c      	b.n	2000512a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
200050d0:	68fb      	ldr	r3, [r7, #12]
200050d2:	681b      	ldr	r3, [r3, #0]
200050d4:	689b      	ldr	r3, [r3, #8]
200050d6:	f003 0302 	and.w	r3, r3, #2
200050da:	2b02      	cmp	r3, #2
200050dc:	d113      	bne.n	20005106 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
200050de:	68fb      	ldr	r3, [r7, #12]
200050e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200050e2:	68fb      	ldr	r3, [r7, #12]
200050e4:	681b      	ldr	r3, [r3, #0]
200050e6:	330c      	adds	r3, #12
200050e8:	7812      	ldrb	r2, [r2, #0]
200050ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
200050ec:	68fb      	ldr	r3, [r7, #12]
200050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200050f0:	1c5a      	adds	r2, r3, #1
200050f2:	68fb      	ldr	r3, [r7, #12]
200050f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
200050f6:	68fb      	ldr	r3, [r7, #12]
200050f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200050fa:	b29b      	uxth	r3, r3
200050fc:	3b01      	subs	r3, #1
200050fe:	b29a      	uxth	r2, r3
20005100:	68fb      	ldr	r3, [r7, #12]
20005102:	86da      	strh	r2, [r3, #54]	; 0x36
20005104:	e011      	b.n	2000512a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20005106:	f7fe fd9d 	bl	20003c44 <HAL_GetTick>
2000510a:	4602      	mov	r2, r0
2000510c:	69bb      	ldr	r3, [r7, #24]
2000510e:	1ad3      	subs	r3, r2, r3
20005110:	683a      	ldr	r2, [r7, #0]
20005112:	429a      	cmp	r2, r3
20005114:	d803      	bhi.n	2000511e <HAL_SPI_Transmit+0x204>
20005116:	683b      	ldr	r3, [r7, #0]
20005118:	f1b3 3fff 	cmp.w	r3, #4294967295
2000511c:	d102      	bne.n	20005124 <HAL_SPI_Transmit+0x20a>
2000511e:	683b      	ldr	r3, [r7, #0]
20005120:	2b00      	cmp	r3, #0
20005122:	d102      	bne.n	2000512a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
20005124:	2303      	movs	r3, #3
20005126:	77fb      	strb	r3, [r7, #31]
          goto error;
20005128:	e026      	b.n	20005178 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
2000512a:	68fb      	ldr	r3, [r7, #12]
2000512c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000512e:	b29b      	uxth	r3, r3
20005130:	2b00      	cmp	r3, #0
20005132:	d1cd      	bne.n	200050d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20005134:	69ba      	ldr	r2, [r7, #24]
20005136:	6839      	ldr	r1, [r7, #0]
20005138:	68f8      	ldr	r0, [r7, #12]
2000513a:	f000 fa55 	bl	200055e8 <SPI_EndRxTxTransaction>
2000513e:	4603      	mov	r3, r0
20005140:	2b00      	cmp	r3, #0
20005142:	d002      	beq.n	2000514a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20005144:	68fb      	ldr	r3, [r7, #12]
20005146:	2220      	movs	r2, #32
20005148:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
2000514a:	68fb      	ldr	r3, [r7, #12]
2000514c:	689b      	ldr	r3, [r3, #8]
2000514e:	2b00      	cmp	r3, #0
20005150:	d10a      	bne.n	20005168 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20005152:	2300      	movs	r3, #0
20005154:	613b      	str	r3, [r7, #16]
20005156:	68fb      	ldr	r3, [r7, #12]
20005158:	681b      	ldr	r3, [r3, #0]
2000515a:	68db      	ldr	r3, [r3, #12]
2000515c:	613b      	str	r3, [r7, #16]
2000515e:	68fb      	ldr	r3, [r7, #12]
20005160:	681b      	ldr	r3, [r3, #0]
20005162:	689b      	ldr	r3, [r3, #8]
20005164:	613b      	str	r3, [r7, #16]
20005166:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20005168:	68fb      	ldr	r3, [r7, #12]
2000516a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000516c:	2b00      	cmp	r3, #0
2000516e:	d002      	beq.n	20005176 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
20005170:	2301      	movs	r3, #1
20005172:	77fb      	strb	r3, [r7, #31]
20005174:	e000      	b.n	20005178 <HAL_SPI_Transmit+0x25e>
  }

error:
20005176:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
20005178:	68fb      	ldr	r3, [r7, #12]
2000517a:	2201      	movs	r2, #1
2000517c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20005180:	68fb      	ldr	r3, [r7, #12]
20005182:	2200      	movs	r2, #0
20005184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20005188:	7ffb      	ldrb	r3, [r7, #31]
}
2000518a:	4618      	mov	r0, r3
2000518c:	3720      	adds	r7, #32
2000518e:	46bd      	mov	sp, r7
20005190:	bd80      	pop	{r7, pc}

20005192 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
20005192:	b580      	push	{r7, lr}
20005194:	b08c      	sub	sp, #48	; 0x30
20005196:	af00      	add	r7, sp, #0
20005198:	60f8      	str	r0, [r7, #12]
2000519a:	60b9      	str	r1, [r7, #8]
2000519c:	607a      	str	r2, [r7, #4]
2000519e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
200051a0:	2301      	movs	r3, #1
200051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
200051a4:	2300      	movs	r3, #0
200051a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
200051aa:	68fb      	ldr	r3, [r7, #12]
200051ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200051b0:	2b01      	cmp	r3, #1
200051b2:	d101      	bne.n	200051b8 <HAL_SPI_TransmitReceive+0x26>
200051b4:	2302      	movs	r3, #2
200051b6:	e18a      	b.n	200054ce <HAL_SPI_TransmitReceive+0x33c>
200051b8:	68fb      	ldr	r3, [r7, #12]
200051ba:	2201      	movs	r2, #1
200051bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
200051c0:	f7fe fd40 	bl	20003c44 <HAL_GetTick>
200051c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
200051c6:	68fb      	ldr	r3, [r7, #12]
200051c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200051cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
200051d0:	68fb      	ldr	r3, [r7, #12]
200051d2:	685b      	ldr	r3, [r3, #4]
200051d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
200051d6:	887b      	ldrh	r3, [r7, #2]
200051d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
200051da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
200051de:	2b01      	cmp	r3, #1
200051e0:	d00f      	beq.n	20005202 <HAL_SPI_TransmitReceive+0x70>
200051e2:	69fb      	ldr	r3, [r7, #28]
200051e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
200051e8:	d107      	bne.n	200051fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
200051ea:	68fb      	ldr	r3, [r7, #12]
200051ec:	689b      	ldr	r3, [r3, #8]
200051ee:	2b00      	cmp	r3, #0
200051f0:	d103      	bne.n	200051fa <HAL_SPI_TransmitReceive+0x68>
200051f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
200051f6:	2b04      	cmp	r3, #4
200051f8:	d003      	beq.n	20005202 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
200051fa:	2302      	movs	r3, #2
200051fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
20005200:	e15b      	b.n	200054ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
20005202:	68bb      	ldr	r3, [r7, #8]
20005204:	2b00      	cmp	r3, #0
20005206:	d005      	beq.n	20005214 <HAL_SPI_TransmitReceive+0x82>
20005208:	687b      	ldr	r3, [r7, #4]
2000520a:	2b00      	cmp	r3, #0
2000520c:	d002      	beq.n	20005214 <HAL_SPI_TransmitReceive+0x82>
2000520e:	887b      	ldrh	r3, [r7, #2]
20005210:	2b00      	cmp	r3, #0
20005212:	d103      	bne.n	2000521c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
20005214:	2301      	movs	r3, #1
20005216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
2000521a:	e14e      	b.n	200054ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2000521c:	68fb      	ldr	r3, [r7, #12]
2000521e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20005222:	b2db      	uxtb	r3, r3
20005224:	2b04      	cmp	r3, #4
20005226:	d003      	beq.n	20005230 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20005228:	68fb      	ldr	r3, [r7, #12]
2000522a:	2205      	movs	r2, #5
2000522c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20005230:	68fb      	ldr	r3, [r7, #12]
20005232:	2200      	movs	r2, #0
20005234:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20005236:	68fb      	ldr	r3, [r7, #12]
20005238:	687a      	ldr	r2, [r7, #4]
2000523a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
2000523c:	68fb      	ldr	r3, [r7, #12]
2000523e:	887a      	ldrh	r2, [r7, #2]
20005240:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
20005242:	68fb      	ldr	r3, [r7, #12]
20005244:	887a      	ldrh	r2, [r7, #2]
20005246:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
20005248:	68fb      	ldr	r3, [r7, #12]
2000524a:	68ba      	ldr	r2, [r7, #8]
2000524c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
2000524e:	68fb      	ldr	r3, [r7, #12]
20005250:	887a      	ldrh	r2, [r7, #2]
20005252:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
20005254:	68fb      	ldr	r3, [r7, #12]
20005256:	887a      	ldrh	r2, [r7, #2]
20005258:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
2000525a:	68fb      	ldr	r3, [r7, #12]
2000525c:	2200      	movs	r2, #0
2000525e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20005260:	68fb      	ldr	r3, [r7, #12]
20005262:	2200      	movs	r2, #0
20005264:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20005266:	68fb      	ldr	r3, [r7, #12]
20005268:	681b      	ldr	r3, [r3, #0]
2000526a:	681b      	ldr	r3, [r3, #0]
2000526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
20005270:	2b40      	cmp	r3, #64	; 0x40
20005272:	d007      	beq.n	20005284 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20005274:	68fb      	ldr	r3, [r7, #12]
20005276:	681b      	ldr	r3, [r3, #0]
20005278:	681a      	ldr	r2, [r3, #0]
2000527a:	68fb      	ldr	r3, [r7, #12]
2000527c:	681b      	ldr	r3, [r3, #0]
2000527e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20005282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
20005284:	68fb      	ldr	r3, [r7, #12]
20005286:	68db      	ldr	r3, [r3, #12]
20005288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2000528c:	d178      	bne.n	20005380 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
2000528e:	68fb      	ldr	r3, [r7, #12]
20005290:	685b      	ldr	r3, [r3, #4]
20005292:	2b00      	cmp	r3, #0
20005294:	d002      	beq.n	2000529c <HAL_SPI_TransmitReceive+0x10a>
20005296:	8b7b      	ldrh	r3, [r7, #26]
20005298:	2b01      	cmp	r3, #1
2000529a:	d166      	bne.n	2000536a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
2000529c:	68fb      	ldr	r3, [r7, #12]
2000529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200052a0:	881a      	ldrh	r2, [r3, #0]
200052a2:	68fb      	ldr	r3, [r7, #12]
200052a4:	681b      	ldr	r3, [r3, #0]
200052a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
200052a8:	68fb      	ldr	r3, [r7, #12]
200052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200052ac:	1c9a      	adds	r2, r3, #2
200052ae:	68fb      	ldr	r3, [r7, #12]
200052b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
200052b2:	68fb      	ldr	r3, [r7, #12]
200052b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200052b6:	b29b      	uxth	r3, r3
200052b8:	3b01      	subs	r3, #1
200052ba:	b29a      	uxth	r2, r3
200052bc:	68fb      	ldr	r3, [r7, #12]
200052be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
200052c0:	e053      	b.n	2000536a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
200052c2:	68fb      	ldr	r3, [r7, #12]
200052c4:	681b      	ldr	r3, [r3, #0]
200052c6:	689b      	ldr	r3, [r3, #8]
200052c8:	f003 0302 	and.w	r3, r3, #2
200052cc:	2b02      	cmp	r3, #2
200052ce:	d11b      	bne.n	20005308 <HAL_SPI_TransmitReceive+0x176>
200052d0:	68fb      	ldr	r3, [r7, #12]
200052d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200052d4:	b29b      	uxth	r3, r3
200052d6:	2b00      	cmp	r3, #0
200052d8:	d016      	beq.n	20005308 <HAL_SPI_TransmitReceive+0x176>
200052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200052dc:	2b01      	cmp	r3, #1
200052de:	d113      	bne.n	20005308 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
200052e0:	68fb      	ldr	r3, [r7, #12]
200052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200052e4:	881a      	ldrh	r2, [r3, #0]
200052e6:	68fb      	ldr	r3, [r7, #12]
200052e8:	681b      	ldr	r3, [r3, #0]
200052ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
200052ec:	68fb      	ldr	r3, [r7, #12]
200052ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200052f0:	1c9a      	adds	r2, r3, #2
200052f2:	68fb      	ldr	r3, [r7, #12]
200052f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
200052f6:	68fb      	ldr	r3, [r7, #12]
200052f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200052fa:	b29b      	uxth	r3, r3
200052fc:	3b01      	subs	r3, #1
200052fe:	b29a      	uxth	r2, r3
20005300:	68fb      	ldr	r3, [r7, #12]
20005302:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
20005304:	2300      	movs	r3, #0
20005306:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
20005308:	68fb      	ldr	r3, [r7, #12]
2000530a:	681b      	ldr	r3, [r3, #0]
2000530c:	689b      	ldr	r3, [r3, #8]
2000530e:	f003 0301 	and.w	r3, r3, #1
20005312:	2b01      	cmp	r3, #1
20005314:	d119      	bne.n	2000534a <HAL_SPI_TransmitReceive+0x1b8>
20005316:	68fb      	ldr	r3, [r7, #12]
20005318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000531a:	b29b      	uxth	r3, r3
2000531c:	2b00      	cmp	r3, #0
2000531e:	d014      	beq.n	2000534a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20005320:	68fb      	ldr	r3, [r7, #12]
20005322:	681b      	ldr	r3, [r3, #0]
20005324:	68da      	ldr	r2, [r3, #12]
20005326:	68fb      	ldr	r3, [r7, #12]
20005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000532a:	b292      	uxth	r2, r2
2000532c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
2000532e:	68fb      	ldr	r3, [r7, #12]
20005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005332:	1c9a      	adds	r2, r3, #2
20005334:	68fb      	ldr	r3, [r7, #12]
20005336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20005338:	68fb      	ldr	r3, [r7, #12]
2000533a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000533c:	b29b      	uxth	r3, r3
2000533e:	3b01      	subs	r3, #1
20005340:	b29a      	uxth	r2, r3
20005342:	68fb      	ldr	r3, [r7, #12]
20005344:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20005346:	2301      	movs	r3, #1
20005348:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
2000534a:	f7fe fc7b 	bl	20003c44 <HAL_GetTick>
2000534e:	4602      	mov	r2, r0
20005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20005352:	1ad3      	subs	r3, r2, r3
20005354:	6bba      	ldr	r2, [r7, #56]	; 0x38
20005356:	429a      	cmp	r2, r3
20005358:	d807      	bhi.n	2000536a <HAL_SPI_TransmitReceive+0x1d8>
2000535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000535c:	f1b3 3fff 	cmp.w	r3, #4294967295
20005360:	d003      	beq.n	2000536a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
20005362:	2303      	movs	r3, #3
20005364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
20005368:	e0a7      	b.n	200054ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
2000536a:	68fb      	ldr	r3, [r7, #12]
2000536c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000536e:	b29b      	uxth	r3, r3
20005370:	2b00      	cmp	r3, #0
20005372:	d1a6      	bne.n	200052c2 <HAL_SPI_TransmitReceive+0x130>
20005374:	68fb      	ldr	r3, [r7, #12]
20005376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20005378:	b29b      	uxth	r3, r3
2000537a:	2b00      	cmp	r3, #0
2000537c:	d1a1      	bne.n	200052c2 <HAL_SPI_TransmitReceive+0x130>
2000537e:	e07c      	b.n	2000547a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20005380:	68fb      	ldr	r3, [r7, #12]
20005382:	685b      	ldr	r3, [r3, #4]
20005384:	2b00      	cmp	r3, #0
20005386:	d002      	beq.n	2000538e <HAL_SPI_TransmitReceive+0x1fc>
20005388:	8b7b      	ldrh	r3, [r7, #26]
2000538a:	2b01      	cmp	r3, #1
2000538c:	d16b      	bne.n	20005466 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
2000538e:	68fb      	ldr	r3, [r7, #12]
20005390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20005392:	68fb      	ldr	r3, [r7, #12]
20005394:	681b      	ldr	r3, [r3, #0]
20005396:	330c      	adds	r3, #12
20005398:	7812      	ldrb	r2, [r2, #0]
2000539a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
2000539c:	68fb      	ldr	r3, [r7, #12]
2000539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200053a0:	1c5a      	adds	r2, r3, #1
200053a2:	68fb      	ldr	r3, [r7, #12]
200053a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
200053a6:	68fb      	ldr	r3, [r7, #12]
200053a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200053aa:	b29b      	uxth	r3, r3
200053ac:	3b01      	subs	r3, #1
200053ae:	b29a      	uxth	r2, r3
200053b0:	68fb      	ldr	r3, [r7, #12]
200053b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
200053b4:	e057      	b.n	20005466 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
200053b6:	68fb      	ldr	r3, [r7, #12]
200053b8:	681b      	ldr	r3, [r3, #0]
200053ba:	689b      	ldr	r3, [r3, #8]
200053bc:	f003 0302 	and.w	r3, r3, #2
200053c0:	2b02      	cmp	r3, #2
200053c2:	d11c      	bne.n	200053fe <HAL_SPI_TransmitReceive+0x26c>
200053c4:	68fb      	ldr	r3, [r7, #12]
200053c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200053c8:	b29b      	uxth	r3, r3
200053ca:	2b00      	cmp	r3, #0
200053cc:	d017      	beq.n	200053fe <HAL_SPI_TransmitReceive+0x26c>
200053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200053d0:	2b01      	cmp	r3, #1
200053d2:	d114      	bne.n	200053fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
200053d4:	68fb      	ldr	r3, [r7, #12]
200053d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200053d8:	68fb      	ldr	r3, [r7, #12]
200053da:	681b      	ldr	r3, [r3, #0]
200053dc:	330c      	adds	r3, #12
200053de:	7812      	ldrb	r2, [r2, #0]
200053e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
200053e2:	68fb      	ldr	r3, [r7, #12]
200053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200053e6:	1c5a      	adds	r2, r3, #1
200053e8:	68fb      	ldr	r3, [r7, #12]
200053ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
200053ec:	68fb      	ldr	r3, [r7, #12]
200053ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200053f0:	b29b      	uxth	r3, r3
200053f2:	3b01      	subs	r3, #1
200053f4:	b29a      	uxth	r2, r3
200053f6:	68fb      	ldr	r3, [r7, #12]
200053f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
200053fa:	2300      	movs	r3, #0
200053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
200053fe:	68fb      	ldr	r3, [r7, #12]
20005400:	681b      	ldr	r3, [r3, #0]
20005402:	689b      	ldr	r3, [r3, #8]
20005404:	f003 0301 	and.w	r3, r3, #1
20005408:	2b01      	cmp	r3, #1
2000540a:	d119      	bne.n	20005440 <HAL_SPI_TransmitReceive+0x2ae>
2000540c:	68fb      	ldr	r3, [r7, #12]
2000540e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20005410:	b29b      	uxth	r3, r3
20005412:	2b00      	cmp	r3, #0
20005414:	d014      	beq.n	20005440 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
20005416:	68fb      	ldr	r3, [r7, #12]
20005418:	681b      	ldr	r3, [r3, #0]
2000541a:	68da      	ldr	r2, [r3, #12]
2000541c:	68fb      	ldr	r3, [r7, #12]
2000541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005420:	b2d2      	uxtb	r2, r2
20005422:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
20005424:	68fb      	ldr	r3, [r7, #12]
20005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005428:	1c5a      	adds	r2, r3, #1
2000542a:	68fb      	ldr	r3, [r7, #12]
2000542c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
2000542e:	68fb      	ldr	r3, [r7, #12]
20005430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20005432:	b29b      	uxth	r3, r3
20005434:	3b01      	subs	r3, #1
20005436:	b29a      	uxth	r2, r3
20005438:	68fb      	ldr	r3, [r7, #12]
2000543a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
2000543c:	2301      	movs	r3, #1
2000543e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
20005440:	f7fe fc00 	bl	20003c44 <HAL_GetTick>
20005444:	4602      	mov	r2, r0
20005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20005448:	1ad3      	subs	r3, r2, r3
2000544a:	6bba      	ldr	r2, [r7, #56]	; 0x38
2000544c:	429a      	cmp	r2, r3
2000544e:	d803      	bhi.n	20005458 <HAL_SPI_TransmitReceive+0x2c6>
20005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20005452:	f1b3 3fff 	cmp.w	r3, #4294967295
20005456:	d102      	bne.n	2000545e <HAL_SPI_TransmitReceive+0x2cc>
20005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000545a:	2b00      	cmp	r3, #0
2000545c:	d103      	bne.n	20005466 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
2000545e:	2303      	movs	r3, #3
20005460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
20005464:	e029      	b.n	200054ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20005466:	68fb      	ldr	r3, [r7, #12]
20005468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000546a:	b29b      	uxth	r3, r3
2000546c:	2b00      	cmp	r3, #0
2000546e:	d1a2      	bne.n	200053b6 <HAL_SPI_TransmitReceive+0x224>
20005470:	68fb      	ldr	r3, [r7, #12]
20005472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20005474:	b29b      	uxth	r3, r3
20005476:	2b00      	cmp	r3, #0
20005478:	d19d      	bne.n	200053b6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
2000547a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000547c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
2000547e:	68f8      	ldr	r0, [r7, #12]
20005480:	f000 f8b2 	bl	200055e8 <SPI_EndRxTxTransaction>
20005484:	4603      	mov	r3, r0
20005486:	2b00      	cmp	r3, #0
20005488:	d006      	beq.n	20005498 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
2000548a:	2301      	movs	r3, #1
2000548c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20005490:	68fb      	ldr	r3, [r7, #12]
20005492:	2220      	movs	r2, #32
20005494:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
20005496:	e010      	b.n	200054ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20005498:	68fb      	ldr	r3, [r7, #12]
2000549a:	689b      	ldr	r3, [r3, #8]
2000549c:	2b00      	cmp	r3, #0
2000549e:	d10b      	bne.n	200054b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
200054a0:	2300      	movs	r3, #0
200054a2:	617b      	str	r3, [r7, #20]
200054a4:	68fb      	ldr	r3, [r7, #12]
200054a6:	681b      	ldr	r3, [r3, #0]
200054a8:	68db      	ldr	r3, [r3, #12]
200054aa:	617b      	str	r3, [r7, #20]
200054ac:	68fb      	ldr	r3, [r7, #12]
200054ae:	681b      	ldr	r3, [r3, #0]
200054b0:	689b      	ldr	r3, [r3, #8]
200054b2:	617b      	str	r3, [r7, #20]
200054b4:	697b      	ldr	r3, [r7, #20]
200054b6:	e000      	b.n	200054ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
200054b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
200054ba:	68fb      	ldr	r3, [r7, #12]
200054bc:	2201      	movs	r2, #1
200054be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
200054c2:	68fb      	ldr	r3, [r7, #12]
200054c4:	2200      	movs	r2, #0
200054c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
200054ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
200054ce:	4618      	mov	r0, r3
200054d0:	3730      	adds	r7, #48	; 0x30
200054d2:	46bd      	mov	sp, r7
200054d4:	bd80      	pop	{r7, pc}
	...

200054d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
200054d8:	b580      	push	{r7, lr}
200054da:	b088      	sub	sp, #32
200054dc:	af00      	add	r7, sp, #0
200054de:	60f8      	str	r0, [r7, #12]
200054e0:	60b9      	str	r1, [r7, #8]
200054e2:	603b      	str	r3, [r7, #0]
200054e4:	4613      	mov	r3, r2
200054e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
200054e8:	f7fe fbac 	bl	20003c44 <HAL_GetTick>
200054ec:	4602      	mov	r2, r0
200054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
200054f0:	1a9b      	subs	r3, r3, r2
200054f2:	683a      	ldr	r2, [r7, #0]
200054f4:	4413      	add	r3, r2
200054f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
200054f8:	f7fe fba4 	bl	20003c44 <HAL_GetTick>
200054fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
200054fe:	4b39      	ldr	r3, [pc, #228]	; (200055e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
20005500:	681b      	ldr	r3, [r3, #0]
20005502:	015b      	lsls	r3, r3, #5
20005504:	0d1b      	lsrs	r3, r3, #20
20005506:	69fa      	ldr	r2, [r7, #28]
20005508:	fb02 f303 	mul.w	r3, r2, r3
2000550c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
2000550e:	e054      	b.n	200055ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
20005510:	683b      	ldr	r3, [r7, #0]
20005512:	f1b3 3fff 	cmp.w	r3, #4294967295
20005516:	d050      	beq.n	200055ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
20005518:	f7fe fb94 	bl	20003c44 <HAL_GetTick>
2000551c:	4602      	mov	r2, r0
2000551e:	69bb      	ldr	r3, [r7, #24]
20005520:	1ad3      	subs	r3, r2, r3
20005522:	69fa      	ldr	r2, [r7, #28]
20005524:	429a      	cmp	r2, r3
20005526:	d902      	bls.n	2000552e <SPI_WaitFlagStateUntilTimeout+0x56>
20005528:	69fb      	ldr	r3, [r7, #28]
2000552a:	2b00      	cmp	r3, #0
2000552c:	d13d      	bne.n	200055aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
2000552e:	68fb      	ldr	r3, [r7, #12]
20005530:	681b      	ldr	r3, [r3, #0]
20005532:	685a      	ldr	r2, [r3, #4]
20005534:	68fb      	ldr	r3, [r7, #12]
20005536:	681b      	ldr	r3, [r3, #0]
20005538:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
2000553c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
2000553e:	68fb      	ldr	r3, [r7, #12]
20005540:	685b      	ldr	r3, [r3, #4]
20005542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20005546:	d111      	bne.n	2000556c <SPI_WaitFlagStateUntilTimeout+0x94>
20005548:	68fb      	ldr	r3, [r7, #12]
2000554a:	689b      	ldr	r3, [r3, #8]
2000554c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20005550:	d004      	beq.n	2000555c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
20005552:	68fb      	ldr	r3, [r7, #12]
20005554:	689b      	ldr	r3, [r3, #8]
20005556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2000555a:	d107      	bne.n	2000556c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
2000555c:	68fb      	ldr	r3, [r7, #12]
2000555e:	681b      	ldr	r3, [r3, #0]
20005560:	681a      	ldr	r2, [r3, #0]
20005562:	68fb      	ldr	r3, [r7, #12]
20005564:	681b      	ldr	r3, [r3, #0]
20005566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000556a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
2000556c:	68fb      	ldr	r3, [r7, #12]
2000556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
20005574:	d10f      	bne.n	20005596 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
20005576:	68fb      	ldr	r3, [r7, #12]
20005578:	681b      	ldr	r3, [r3, #0]
2000557a:	681a      	ldr	r2, [r3, #0]
2000557c:	68fb      	ldr	r3, [r7, #12]
2000557e:	681b      	ldr	r3, [r3, #0]
20005580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
20005584:	601a      	str	r2, [r3, #0]
20005586:	68fb      	ldr	r3, [r7, #12]
20005588:	681b      	ldr	r3, [r3, #0]
2000558a:	681a      	ldr	r2, [r3, #0]
2000558c:	68fb      	ldr	r3, [r7, #12]
2000558e:	681b      	ldr	r3, [r3, #0]
20005590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
20005594:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
20005596:	68fb      	ldr	r3, [r7, #12]
20005598:	2201      	movs	r2, #1
2000559a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
2000559e:	68fb      	ldr	r3, [r7, #12]
200055a0:	2200      	movs	r2, #0
200055a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
200055a6:	2303      	movs	r3, #3
200055a8:	e017      	b.n	200055da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
200055aa:	697b      	ldr	r3, [r7, #20]
200055ac:	2b00      	cmp	r3, #0
200055ae:	d101      	bne.n	200055b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
200055b0:	2300      	movs	r3, #0
200055b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
200055b4:	697b      	ldr	r3, [r7, #20]
200055b6:	3b01      	subs	r3, #1
200055b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
200055ba:	68fb      	ldr	r3, [r7, #12]
200055bc:	681b      	ldr	r3, [r3, #0]
200055be:	689a      	ldr	r2, [r3, #8]
200055c0:	68bb      	ldr	r3, [r7, #8]
200055c2:	4013      	ands	r3, r2
200055c4:	68ba      	ldr	r2, [r7, #8]
200055c6:	429a      	cmp	r2, r3
200055c8:	bf0c      	ite	eq
200055ca:	2301      	moveq	r3, #1
200055cc:	2300      	movne	r3, #0
200055ce:	b2db      	uxtb	r3, r3
200055d0:	461a      	mov	r2, r3
200055d2:	79fb      	ldrb	r3, [r7, #7]
200055d4:	429a      	cmp	r2, r3
200055d6:	d19b      	bne.n	20005510 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
200055d8:	2300      	movs	r3, #0
}
200055da:	4618      	mov	r0, r3
200055dc:	3720      	adds	r7, #32
200055de:	46bd      	mov	sp, r7
200055e0:	bd80      	pop	{r7, pc}
200055e2:	bf00      	nop
200055e4:	20011918 	.word	0x20011918

200055e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
200055e8:	b580      	push	{r7, lr}
200055ea:	b088      	sub	sp, #32
200055ec:	af02      	add	r7, sp, #8
200055ee:	60f8      	str	r0, [r7, #12]
200055f0:	60b9      	str	r1, [r7, #8]
200055f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
200055f4:	4b1b      	ldr	r3, [pc, #108]	; (20005664 <SPI_EndRxTxTransaction+0x7c>)
200055f6:	681b      	ldr	r3, [r3, #0]
200055f8:	4a1b      	ldr	r2, [pc, #108]	; (20005668 <SPI_EndRxTxTransaction+0x80>)
200055fa:	fba2 2303 	umull	r2, r3, r2, r3
200055fe:	0d5b      	lsrs	r3, r3, #21
20005600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
20005604:	fb02 f303 	mul.w	r3, r2, r3
20005608:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2000560a:	68fb      	ldr	r3, [r7, #12]
2000560c:	685b      	ldr	r3, [r3, #4]
2000560e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20005612:	d112      	bne.n	2000563a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
20005614:	687b      	ldr	r3, [r7, #4]
20005616:	9300      	str	r3, [sp, #0]
20005618:	68bb      	ldr	r3, [r7, #8]
2000561a:	2200      	movs	r2, #0
2000561c:	2180      	movs	r1, #128	; 0x80
2000561e:	68f8      	ldr	r0, [r7, #12]
20005620:	f7ff ff5a 	bl	200054d8 <SPI_WaitFlagStateUntilTimeout>
20005624:	4603      	mov	r3, r0
20005626:	2b00      	cmp	r3, #0
20005628:	d016      	beq.n	20005658 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000562a:	68fb      	ldr	r3, [r7, #12]
2000562c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000562e:	f043 0220 	orr.w	r2, r3, #32
20005632:	68fb      	ldr	r3, [r7, #12]
20005634:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
20005636:	2303      	movs	r3, #3
20005638:	e00f      	b.n	2000565a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
2000563a:	697b      	ldr	r3, [r7, #20]
2000563c:	2b00      	cmp	r3, #0
2000563e:	d00a      	beq.n	20005656 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
20005640:	697b      	ldr	r3, [r7, #20]
20005642:	3b01      	subs	r3, #1
20005644:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
20005646:	68fb      	ldr	r3, [r7, #12]
20005648:	681b      	ldr	r3, [r3, #0]
2000564a:	689b      	ldr	r3, [r3, #8]
2000564c:	f003 0380 	and.w	r3, r3, #128	; 0x80
20005650:	2b80      	cmp	r3, #128	; 0x80
20005652:	d0f2      	beq.n	2000563a <SPI_EndRxTxTransaction+0x52>
20005654:	e000      	b.n	20005658 <SPI_EndRxTxTransaction+0x70>
        break;
20005656:	bf00      	nop
  }

  return HAL_OK;
20005658:	2300      	movs	r3, #0
}
2000565a:	4618      	mov	r0, r3
2000565c:	3718      	adds	r7, #24
2000565e:	46bd      	mov	sp, r7
20005660:	bd80      	pop	{r7, pc}
20005662:	bf00      	nop
20005664:	20011918 	.word	0x20011918
20005668:	165e9f81 	.word	0x165e9f81

2000566c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
2000566c:	b480      	push	{r7}
2000566e:	b085      	sub	sp, #20
20005670:	af00      	add	r7, sp, #0
20005672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
20005674:	687b      	ldr	r3, [r7, #4]
20005676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2000567a:	b2db      	uxtb	r3, r3
2000567c:	2b01      	cmp	r3, #1
2000567e:	d001      	beq.n	20005684 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
20005680:	2301      	movs	r3, #1
20005682:	e03c      	b.n	200056fe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
20005684:	687b      	ldr	r3, [r7, #4]
20005686:	2202      	movs	r2, #2
20005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
2000568c:	687b      	ldr	r3, [r7, #4]
2000568e:	681b      	ldr	r3, [r3, #0]
20005690:	4a1e      	ldr	r2, [pc, #120]	; (2000570c <HAL_TIM_Base_Start+0xa0>)
20005692:	4293      	cmp	r3, r2
20005694:	d018      	beq.n	200056c8 <HAL_TIM_Base_Start+0x5c>
20005696:	687b      	ldr	r3, [r7, #4]
20005698:	681b      	ldr	r3, [r3, #0]
2000569a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2000569e:	d013      	beq.n	200056c8 <HAL_TIM_Base_Start+0x5c>
200056a0:	687b      	ldr	r3, [r7, #4]
200056a2:	681b      	ldr	r3, [r3, #0]
200056a4:	4a1a      	ldr	r2, [pc, #104]	; (20005710 <HAL_TIM_Base_Start+0xa4>)
200056a6:	4293      	cmp	r3, r2
200056a8:	d00e      	beq.n	200056c8 <HAL_TIM_Base_Start+0x5c>
200056aa:	687b      	ldr	r3, [r7, #4]
200056ac:	681b      	ldr	r3, [r3, #0]
200056ae:	4a19      	ldr	r2, [pc, #100]	; (20005714 <HAL_TIM_Base_Start+0xa8>)
200056b0:	4293      	cmp	r3, r2
200056b2:	d009      	beq.n	200056c8 <HAL_TIM_Base_Start+0x5c>
200056b4:	687b      	ldr	r3, [r7, #4]
200056b6:	681b      	ldr	r3, [r3, #0]
200056b8:	4a17      	ldr	r2, [pc, #92]	; (20005718 <HAL_TIM_Base_Start+0xac>)
200056ba:	4293      	cmp	r3, r2
200056bc:	d004      	beq.n	200056c8 <HAL_TIM_Base_Start+0x5c>
200056be:	687b      	ldr	r3, [r7, #4]
200056c0:	681b      	ldr	r3, [r3, #0]
200056c2:	4a16      	ldr	r2, [pc, #88]	; (2000571c <HAL_TIM_Base_Start+0xb0>)
200056c4:	4293      	cmp	r3, r2
200056c6:	d111      	bne.n	200056ec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
200056c8:	687b      	ldr	r3, [r7, #4]
200056ca:	681b      	ldr	r3, [r3, #0]
200056cc:	689b      	ldr	r3, [r3, #8]
200056ce:	f003 0307 	and.w	r3, r3, #7
200056d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
200056d4:	68fb      	ldr	r3, [r7, #12]
200056d6:	2b06      	cmp	r3, #6
200056d8:	d010      	beq.n	200056fc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
200056da:	687b      	ldr	r3, [r7, #4]
200056dc:	681b      	ldr	r3, [r3, #0]
200056de:	681a      	ldr	r2, [r3, #0]
200056e0:	687b      	ldr	r3, [r7, #4]
200056e2:	681b      	ldr	r3, [r3, #0]
200056e4:	f042 0201 	orr.w	r2, r2, #1
200056e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
200056ea:	e007      	b.n	200056fc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
200056ec:	687b      	ldr	r3, [r7, #4]
200056ee:	681b      	ldr	r3, [r3, #0]
200056f0:	681a      	ldr	r2, [r3, #0]
200056f2:	687b      	ldr	r3, [r7, #4]
200056f4:	681b      	ldr	r3, [r3, #0]
200056f6:	f042 0201 	orr.w	r2, r2, #1
200056fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
200056fc:	2300      	movs	r3, #0
}
200056fe:	4618      	mov	r0, r3
20005700:	3714      	adds	r7, #20
20005702:	46bd      	mov	sp, r7
20005704:	f85d 7b04 	ldr.w	r7, [sp], #4
20005708:	4770      	bx	lr
2000570a:	bf00      	nop
2000570c:	40010000 	.word	0x40010000
20005710:	40000400 	.word	0x40000400
20005714:	40000800 	.word	0x40000800
20005718:	40000c00 	.word	0x40000c00
2000571c:	40014000 	.word	0x40014000

20005720 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
20005720:	b480      	push	{r7}
20005722:	b083      	sub	sp, #12
20005724:	af00      	add	r7, sp, #0
20005726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
20005728:	687b      	ldr	r3, [r7, #4]
2000572a:	681b      	ldr	r3, [r3, #0]
2000572c:	6a1a      	ldr	r2, [r3, #32]
2000572e:	f241 1311 	movw	r3, #4369	; 0x1111
20005732:	4013      	ands	r3, r2
20005734:	2b00      	cmp	r3, #0
20005736:	d10f      	bne.n	20005758 <HAL_TIM_Base_Stop+0x38>
20005738:	687b      	ldr	r3, [r7, #4]
2000573a:	681b      	ldr	r3, [r3, #0]
2000573c:	6a1a      	ldr	r2, [r3, #32]
2000573e:	f240 4344 	movw	r3, #1092	; 0x444
20005742:	4013      	ands	r3, r2
20005744:	2b00      	cmp	r3, #0
20005746:	d107      	bne.n	20005758 <HAL_TIM_Base_Stop+0x38>
20005748:	687b      	ldr	r3, [r7, #4]
2000574a:	681b      	ldr	r3, [r3, #0]
2000574c:	681a      	ldr	r2, [r3, #0]
2000574e:	687b      	ldr	r3, [r7, #4]
20005750:	681b      	ldr	r3, [r3, #0]
20005752:	f022 0201 	bic.w	r2, r2, #1
20005756:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
20005758:	687b      	ldr	r3, [r7, #4]
2000575a:	2201      	movs	r2, #1
2000575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
20005760:	2300      	movs	r3, #0
}
20005762:	4618      	mov	r0, r3
20005764:	370c      	adds	r7, #12
20005766:	46bd      	mov	sp, r7
20005768:	f85d 7b04 	ldr.w	r7, [sp], #4
2000576c:	4770      	bx	lr

2000576e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
2000576e:	b580      	push	{r7, lr}
20005770:	b082      	sub	sp, #8
20005772:	af00      	add	r7, sp, #0
20005774:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
20005776:	687b      	ldr	r3, [r7, #4]
20005778:	2b00      	cmp	r3, #0
2000577a:	d101      	bne.n	20005780 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
2000577c:	2301      	movs	r3, #1
2000577e:	e041      	b.n	20005804 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
20005780:	687b      	ldr	r3, [r7, #4]
20005782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
20005786:	b2db      	uxtb	r3, r3
20005788:	2b00      	cmp	r3, #0
2000578a:	d106      	bne.n	2000579a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
2000578c:	687b      	ldr	r3, [r7, #4]
2000578e:	2200      	movs	r2, #0
20005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
20005794:	6878      	ldr	r0, [r7, #4]
20005796:	f7fe f811 	bl	200037bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
2000579a:	687b      	ldr	r3, [r7, #4]
2000579c:	2202      	movs	r2, #2
2000579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
200057a2:	687b      	ldr	r3, [r7, #4]
200057a4:	681a      	ldr	r2, [r3, #0]
200057a6:	687b      	ldr	r3, [r7, #4]
200057a8:	3304      	adds	r3, #4
200057aa:	4619      	mov	r1, r3
200057ac:	4610      	mov	r0, r2
200057ae:	f000 fced 	bl	2000618c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
200057b2:	687b      	ldr	r3, [r7, #4]
200057b4:	2201      	movs	r2, #1
200057b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
200057ba:	687b      	ldr	r3, [r7, #4]
200057bc:	2201      	movs	r2, #1
200057be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
200057c2:	687b      	ldr	r3, [r7, #4]
200057c4:	2201      	movs	r2, #1
200057c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
200057ca:	687b      	ldr	r3, [r7, #4]
200057cc:	2201      	movs	r2, #1
200057ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
200057d2:	687b      	ldr	r3, [r7, #4]
200057d4:	2201      	movs	r2, #1
200057d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
200057da:	687b      	ldr	r3, [r7, #4]
200057dc:	2201      	movs	r2, #1
200057de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
200057e2:	687b      	ldr	r3, [r7, #4]
200057e4:	2201      	movs	r2, #1
200057e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
200057ea:	687b      	ldr	r3, [r7, #4]
200057ec:	2201      	movs	r2, #1
200057ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200057f2:	687b      	ldr	r3, [r7, #4]
200057f4:	2201      	movs	r2, #1
200057f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
200057fa:	687b      	ldr	r3, [r7, #4]
200057fc:	2201      	movs	r2, #1
200057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
20005802:	2300      	movs	r3, #0
}
20005804:	4618      	mov	r0, r3
20005806:	3708      	adds	r7, #8
20005808:	46bd      	mov	sp, r7
2000580a:	bd80      	pop	{r7, pc}

2000580c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
2000580c:	b580      	push	{r7, lr}
2000580e:	b084      	sub	sp, #16
20005810:	af00      	add	r7, sp, #0
20005812:	6078      	str	r0, [r7, #4]
20005814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
20005816:	683b      	ldr	r3, [r7, #0]
20005818:	2b00      	cmp	r3, #0
2000581a:	d109      	bne.n	20005830 <HAL_TIM_PWM_Start+0x24>
2000581c:	687b      	ldr	r3, [r7, #4]
2000581e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
20005822:	b2db      	uxtb	r3, r3
20005824:	2b01      	cmp	r3, #1
20005826:	bf14      	ite	ne
20005828:	2301      	movne	r3, #1
2000582a:	2300      	moveq	r3, #0
2000582c:	b2db      	uxtb	r3, r3
2000582e:	e022      	b.n	20005876 <HAL_TIM_PWM_Start+0x6a>
20005830:	683b      	ldr	r3, [r7, #0]
20005832:	2b04      	cmp	r3, #4
20005834:	d109      	bne.n	2000584a <HAL_TIM_PWM_Start+0x3e>
20005836:	687b      	ldr	r3, [r7, #4]
20005838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
2000583c:	b2db      	uxtb	r3, r3
2000583e:	2b01      	cmp	r3, #1
20005840:	bf14      	ite	ne
20005842:	2301      	movne	r3, #1
20005844:	2300      	moveq	r3, #0
20005846:	b2db      	uxtb	r3, r3
20005848:	e015      	b.n	20005876 <HAL_TIM_PWM_Start+0x6a>
2000584a:	683b      	ldr	r3, [r7, #0]
2000584c:	2b08      	cmp	r3, #8
2000584e:	d109      	bne.n	20005864 <HAL_TIM_PWM_Start+0x58>
20005850:	687b      	ldr	r3, [r7, #4]
20005852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20005856:	b2db      	uxtb	r3, r3
20005858:	2b01      	cmp	r3, #1
2000585a:	bf14      	ite	ne
2000585c:	2301      	movne	r3, #1
2000585e:	2300      	moveq	r3, #0
20005860:	b2db      	uxtb	r3, r3
20005862:	e008      	b.n	20005876 <HAL_TIM_PWM_Start+0x6a>
20005864:	687b      	ldr	r3, [r7, #4]
20005866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000586a:	b2db      	uxtb	r3, r3
2000586c:	2b01      	cmp	r3, #1
2000586e:	bf14      	ite	ne
20005870:	2301      	movne	r3, #1
20005872:	2300      	moveq	r3, #0
20005874:	b2db      	uxtb	r3, r3
20005876:	2b00      	cmp	r3, #0
20005878:	d001      	beq.n	2000587e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
2000587a:	2301      	movs	r3, #1
2000587c:	e068      	b.n	20005950 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
2000587e:	683b      	ldr	r3, [r7, #0]
20005880:	2b00      	cmp	r3, #0
20005882:	d104      	bne.n	2000588e <HAL_TIM_PWM_Start+0x82>
20005884:	687b      	ldr	r3, [r7, #4]
20005886:	2202      	movs	r2, #2
20005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
2000588c:	e013      	b.n	200058b6 <HAL_TIM_PWM_Start+0xaa>
2000588e:	683b      	ldr	r3, [r7, #0]
20005890:	2b04      	cmp	r3, #4
20005892:	d104      	bne.n	2000589e <HAL_TIM_PWM_Start+0x92>
20005894:	687b      	ldr	r3, [r7, #4]
20005896:	2202      	movs	r2, #2
20005898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
2000589c:	e00b      	b.n	200058b6 <HAL_TIM_PWM_Start+0xaa>
2000589e:	683b      	ldr	r3, [r7, #0]
200058a0:	2b08      	cmp	r3, #8
200058a2:	d104      	bne.n	200058ae <HAL_TIM_PWM_Start+0xa2>
200058a4:	687b      	ldr	r3, [r7, #4]
200058a6:	2202      	movs	r2, #2
200058a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
200058ac:	e003      	b.n	200058b6 <HAL_TIM_PWM_Start+0xaa>
200058ae:	687b      	ldr	r3, [r7, #4]
200058b0:	2202      	movs	r2, #2
200058b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
200058b6:	687b      	ldr	r3, [r7, #4]
200058b8:	681b      	ldr	r3, [r3, #0]
200058ba:	2201      	movs	r2, #1
200058bc:	6839      	ldr	r1, [r7, #0]
200058be:	4618      	mov	r0, r3
200058c0:	f000 fe70 	bl	200065a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
200058c4:	687b      	ldr	r3, [r7, #4]
200058c6:	681b      	ldr	r3, [r3, #0]
200058c8:	4a23      	ldr	r2, [pc, #140]	; (20005958 <HAL_TIM_PWM_Start+0x14c>)
200058ca:	4293      	cmp	r3, r2
200058cc:	d107      	bne.n	200058de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
200058ce:	687b      	ldr	r3, [r7, #4]
200058d0:	681b      	ldr	r3, [r3, #0]
200058d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200058d4:	687b      	ldr	r3, [r7, #4]
200058d6:	681b      	ldr	r3, [r3, #0]
200058d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
200058dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
200058de:	687b      	ldr	r3, [r7, #4]
200058e0:	681b      	ldr	r3, [r3, #0]
200058e2:	4a1d      	ldr	r2, [pc, #116]	; (20005958 <HAL_TIM_PWM_Start+0x14c>)
200058e4:	4293      	cmp	r3, r2
200058e6:	d018      	beq.n	2000591a <HAL_TIM_PWM_Start+0x10e>
200058e8:	687b      	ldr	r3, [r7, #4]
200058ea:	681b      	ldr	r3, [r3, #0]
200058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
200058f0:	d013      	beq.n	2000591a <HAL_TIM_PWM_Start+0x10e>
200058f2:	687b      	ldr	r3, [r7, #4]
200058f4:	681b      	ldr	r3, [r3, #0]
200058f6:	4a19      	ldr	r2, [pc, #100]	; (2000595c <HAL_TIM_PWM_Start+0x150>)
200058f8:	4293      	cmp	r3, r2
200058fa:	d00e      	beq.n	2000591a <HAL_TIM_PWM_Start+0x10e>
200058fc:	687b      	ldr	r3, [r7, #4]
200058fe:	681b      	ldr	r3, [r3, #0]
20005900:	4a17      	ldr	r2, [pc, #92]	; (20005960 <HAL_TIM_PWM_Start+0x154>)
20005902:	4293      	cmp	r3, r2
20005904:	d009      	beq.n	2000591a <HAL_TIM_PWM_Start+0x10e>
20005906:	687b      	ldr	r3, [r7, #4]
20005908:	681b      	ldr	r3, [r3, #0]
2000590a:	4a16      	ldr	r2, [pc, #88]	; (20005964 <HAL_TIM_PWM_Start+0x158>)
2000590c:	4293      	cmp	r3, r2
2000590e:	d004      	beq.n	2000591a <HAL_TIM_PWM_Start+0x10e>
20005910:	687b      	ldr	r3, [r7, #4]
20005912:	681b      	ldr	r3, [r3, #0]
20005914:	4a14      	ldr	r2, [pc, #80]	; (20005968 <HAL_TIM_PWM_Start+0x15c>)
20005916:	4293      	cmp	r3, r2
20005918:	d111      	bne.n	2000593e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
2000591a:	687b      	ldr	r3, [r7, #4]
2000591c:	681b      	ldr	r3, [r3, #0]
2000591e:	689b      	ldr	r3, [r3, #8]
20005920:	f003 0307 	and.w	r3, r3, #7
20005924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
20005926:	68fb      	ldr	r3, [r7, #12]
20005928:	2b06      	cmp	r3, #6
2000592a:	d010      	beq.n	2000594e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
2000592c:	687b      	ldr	r3, [r7, #4]
2000592e:	681b      	ldr	r3, [r3, #0]
20005930:	681a      	ldr	r2, [r3, #0]
20005932:	687b      	ldr	r3, [r7, #4]
20005934:	681b      	ldr	r3, [r3, #0]
20005936:	f042 0201 	orr.w	r2, r2, #1
2000593a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
2000593c:	e007      	b.n	2000594e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
2000593e:	687b      	ldr	r3, [r7, #4]
20005940:	681b      	ldr	r3, [r3, #0]
20005942:	681a      	ldr	r2, [r3, #0]
20005944:	687b      	ldr	r3, [r7, #4]
20005946:	681b      	ldr	r3, [r3, #0]
20005948:	f042 0201 	orr.w	r2, r2, #1
2000594c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
2000594e:	2300      	movs	r3, #0
}
20005950:	4618      	mov	r0, r3
20005952:	3710      	adds	r7, #16
20005954:	46bd      	mov	sp, r7
20005956:	bd80      	pop	{r7, pc}
20005958:	40010000 	.word	0x40010000
2000595c:	40000400 	.word	0x40000400
20005960:	40000800 	.word	0x40000800
20005964:	40000c00 	.word	0x40000c00
20005968:	40014000 	.word	0x40014000

2000596c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
2000596c:	b580      	push	{r7, lr}
2000596e:	b082      	sub	sp, #8
20005970:	af00      	add	r7, sp, #0
20005972:	6078      	str	r0, [r7, #4]
20005974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
20005976:	687b      	ldr	r3, [r7, #4]
20005978:	681b      	ldr	r3, [r3, #0]
2000597a:	2200      	movs	r2, #0
2000597c:	6839      	ldr	r1, [r7, #0]
2000597e:	4618      	mov	r0, r3
20005980:	f000 fe10 	bl	200065a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
20005984:	687b      	ldr	r3, [r7, #4]
20005986:	681b      	ldr	r3, [r3, #0]
20005988:	4a29      	ldr	r2, [pc, #164]	; (20005a30 <HAL_TIM_PWM_Stop+0xc4>)
2000598a:	4293      	cmp	r3, r2
2000598c:	d117      	bne.n	200059be <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
2000598e:	687b      	ldr	r3, [r7, #4]
20005990:	681b      	ldr	r3, [r3, #0]
20005992:	6a1a      	ldr	r2, [r3, #32]
20005994:	f241 1311 	movw	r3, #4369	; 0x1111
20005998:	4013      	ands	r3, r2
2000599a:	2b00      	cmp	r3, #0
2000599c:	d10f      	bne.n	200059be <HAL_TIM_PWM_Stop+0x52>
2000599e:	687b      	ldr	r3, [r7, #4]
200059a0:	681b      	ldr	r3, [r3, #0]
200059a2:	6a1a      	ldr	r2, [r3, #32]
200059a4:	f240 4344 	movw	r3, #1092	; 0x444
200059a8:	4013      	ands	r3, r2
200059aa:	2b00      	cmp	r3, #0
200059ac:	d107      	bne.n	200059be <HAL_TIM_PWM_Stop+0x52>
200059ae:	687b      	ldr	r3, [r7, #4]
200059b0:	681b      	ldr	r3, [r3, #0]
200059b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200059b4:	687b      	ldr	r3, [r7, #4]
200059b6:	681b      	ldr	r3, [r3, #0]
200059b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
200059bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
200059be:	687b      	ldr	r3, [r7, #4]
200059c0:	681b      	ldr	r3, [r3, #0]
200059c2:	6a1a      	ldr	r2, [r3, #32]
200059c4:	f241 1311 	movw	r3, #4369	; 0x1111
200059c8:	4013      	ands	r3, r2
200059ca:	2b00      	cmp	r3, #0
200059cc:	d10f      	bne.n	200059ee <HAL_TIM_PWM_Stop+0x82>
200059ce:	687b      	ldr	r3, [r7, #4]
200059d0:	681b      	ldr	r3, [r3, #0]
200059d2:	6a1a      	ldr	r2, [r3, #32]
200059d4:	f240 4344 	movw	r3, #1092	; 0x444
200059d8:	4013      	ands	r3, r2
200059da:	2b00      	cmp	r3, #0
200059dc:	d107      	bne.n	200059ee <HAL_TIM_PWM_Stop+0x82>
200059de:	687b      	ldr	r3, [r7, #4]
200059e0:	681b      	ldr	r3, [r3, #0]
200059e2:	681a      	ldr	r2, [r3, #0]
200059e4:	687b      	ldr	r3, [r7, #4]
200059e6:	681b      	ldr	r3, [r3, #0]
200059e8:	f022 0201 	bic.w	r2, r2, #1
200059ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
200059ee:	683b      	ldr	r3, [r7, #0]
200059f0:	2b00      	cmp	r3, #0
200059f2:	d104      	bne.n	200059fe <HAL_TIM_PWM_Stop+0x92>
200059f4:	687b      	ldr	r3, [r7, #4]
200059f6:	2201      	movs	r2, #1
200059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
200059fc:	e013      	b.n	20005a26 <HAL_TIM_PWM_Stop+0xba>
200059fe:	683b      	ldr	r3, [r7, #0]
20005a00:	2b04      	cmp	r3, #4
20005a02:	d104      	bne.n	20005a0e <HAL_TIM_PWM_Stop+0xa2>
20005a04:	687b      	ldr	r3, [r7, #4]
20005a06:	2201      	movs	r2, #1
20005a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
20005a0c:	e00b      	b.n	20005a26 <HAL_TIM_PWM_Stop+0xba>
20005a0e:	683b      	ldr	r3, [r7, #0]
20005a10:	2b08      	cmp	r3, #8
20005a12:	d104      	bne.n	20005a1e <HAL_TIM_PWM_Stop+0xb2>
20005a14:	687b      	ldr	r3, [r7, #4]
20005a16:	2201      	movs	r2, #1
20005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
20005a1c:	e003      	b.n	20005a26 <HAL_TIM_PWM_Stop+0xba>
20005a1e:	687b      	ldr	r3, [r7, #4]
20005a20:	2201      	movs	r2, #1
20005a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
20005a26:	2300      	movs	r3, #0
}
20005a28:	4618      	mov	r0, r3
20005a2a:	3708      	adds	r7, #8
20005a2c:	46bd      	mov	sp, r7
20005a2e:	bd80      	pop	{r7, pc}
20005a30:	40010000 	.word	0x40010000

20005a34 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
20005a34:	b580      	push	{r7, lr}
20005a36:	b084      	sub	sp, #16
20005a38:	af00      	add	r7, sp, #0
20005a3a:	6078      	str	r0, [r7, #4]
20005a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20005a3e:	2300      	movs	r3, #0
20005a40:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
20005a42:	683b      	ldr	r3, [r7, #0]
20005a44:	2b00      	cmp	r3, #0
20005a46:	d109      	bne.n	20005a5c <HAL_TIM_PWM_Start_IT+0x28>
20005a48:	687b      	ldr	r3, [r7, #4]
20005a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
20005a4e:	b2db      	uxtb	r3, r3
20005a50:	2b01      	cmp	r3, #1
20005a52:	bf14      	ite	ne
20005a54:	2301      	movne	r3, #1
20005a56:	2300      	moveq	r3, #0
20005a58:	b2db      	uxtb	r3, r3
20005a5a:	e022      	b.n	20005aa2 <HAL_TIM_PWM_Start_IT+0x6e>
20005a5c:	683b      	ldr	r3, [r7, #0]
20005a5e:	2b04      	cmp	r3, #4
20005a60:	d109      	bne.n	20005a76 <HAL_TIM_PWM_Start_IT+0x42>
20005a62:	687b      	ldr	r3, [r7, #4]
20005a64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
20005a68:	b2db      	uxtb	r3, r3
20005a6a:	2b01      	cmp	r3, #1
20005a6c:	bf14      	ite	ne
20005a6e:	2301      	movne	r3, #1
20005a70:	2300      	moveq	r3, #0
20005a72:	b2db      	uxtb	r3, r3
20005a74:	e015      	b.n	20005aa2 <HAL_TIM_PWM_Start_IT+0x6e>
20005a76:	683b      	ldr	r3, [r7, #0]
20005a78:	2b08      	cmp	r3, #8
20005a7a:	d109      	bne.n	20005a90 <HAL_TIM_PWM_Start_IT+0x5c>
20005a7c:	687b      	ldr	r3, [r7, #4]
20005a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20005a82:	b2db      	uxtb	r3, r3
20005a84:	2b01      	cmp	r3, #1
20005a86:	bf14      	ite	ne
20005a88:	2301      	movne	r3, #1
20005a8a:	2300      	moveq	r3, #0
20005a8c:	b2db      	uxtb	r3, r3
20005a8e:	e008      	b.n	20005aa2 <HAL_TIM_PWM_Start_IT+0x6e>
20005a90:	687b      	ldr	r3, [r7, #4]
20005a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20005a96:	b2db      	uxtb	r3, r3
20005a98:	2b01      	cmp	r3, #1
20005a9a:	bf14      	ite	ne
20005a9c:	2301      	movne	r3, #1
20005a9e:	2300      	moveq	r3, #0
20005aa0:	b2db      	uxtb	r3, r3
20005aa2:	2b00      	cmp	r3, #0
20005aa4:	d001      	beq.n	20005aaa <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
20005aa6:	2301      	movs	r3, #1
20005aa8:	e0b3      	b.n	20005c12 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
20005aaa:	683b      	ldr	r3, [r7, #0]
20005aac:	2b00      	cmp	r3, #0
20005aae:	d104      	bne.n	20005aba <HAL_TIM_PWM_Start_IT+0x86>
20005ab0:	687b      	ldr	r3, [r7, #4]
20005ab2:	2202      	movs	r2, #2
20005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
20005ab8:	e013      	b.n	20005ae2 <HAL_TIM_PWM_Start_IT+0xae>
20005aba:	683b      	ldr	r3, [r7, #0]
20005abc:	2b04      	cmp	r3, #4
20005abe:	d104      	bne.n	20005aca <HAL_TIM_PWM_Start_IT+0x96>
20005ac0:	687b      	ldr	r3, [r7, #4]
20005ac2:	2202      	movs	r2, #2
20005ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
20005ac8:	e00b      	b.n	20005ae2 <HAL_TIM_PWM_Start_IT+0xae>
20005aca:	683b      	ldr	r3, [r7, #0]
20005acc:	2b08      	cmp	r3, #8
20005ace:	d104      	bne.n	20005ada <HAL_TIM_PWM_Start_IT+0xa6>
20005ad0:	687b      	ldr	r3, [r7, #4]
20005ad2:	2202      	movs	r2, #2
20005ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
20005ad8:	e003      	b.n	20005ae2 <HAL_TIM_PWM_Start_IT+0xae>
20005ada:	687b      	ldr	r3, [r7, #4]
20005adc:	2202      	movs	r2, #2
20005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
20005ae2:	683b      	ldr	r3, [r7, #0]
20005ae4:	2b0c      	cmp	r3, #12
20005ae6:	d841      	bhi.n	20005b6c <HAL_TIM_PWM_Start_IT+0x138>
20005ae8:	a201      	add	r2, pc, #4	; (adr r2, 20005af0 <HAL_TIM_PWM_Start_IT+0xbc>)
20005aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005aee:	bf00      	nop
20005af0:	20005b25 	.word	0x20005b25
20005af4:	20005b6d 	.word	0x20005b6d
20005af8:	20005b6d 	.word	0x20005b6d
20005afc:	20005b6d 	.word	0x20005b6d
20005b00:	20005b37 	.word	0x20005b37
20005b04:	20005b6d 	.word	0x20005b6d
20005b08:	20005b6d 	.word	0x20005b6d
20005b0c:	20005b6d 	.word	0x20005b6d
20005b10:	20005b49 	.word	0x20005b49
20005b14:	20005b6d 	.word	0x20005b6d
20005b18:	20005b6d 	.word	0x20005b6d
20005b1c:	20005b6d 	.word	0x20005b6d
20005b20:	20005b5b 	.word	0x20005b5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
20005b24:	687b      	ldr	r3, [r7, #4]
20005b26:	681b      	ldr	r3, [r3, #0]
20005b28:	68da      	ldr	r2, [r3, #12]
20005b2a:	687b      	ldr	r3, [r7, #4]
20005b2c:	681b      	ldr	r3, [r3, #0]
20005b2e:	f042 0202 	orr.w	r2, r2, #2
20005b32:	60da      	str	r2, [r3, #12]
      break;
20005b34:	e01d      	b.n	20005b72 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
20005b36:	687b      	ldr	r3, [r7, #4]
20005b38:	681b      	ldr	r3, [r3, #0]
20005b3a:	68da      	ldr	r2, [r3, #12]
20005b3c:	687b      	ldr	r3, [r7, #4]
20005b3e:	681b      	ldr	r3, [r3, #0]
20005b40:	f042 0204 	orr.w	r2, r2, #4
20005b44:	60da      	str	r2, [r3, #12]
      break;
20005b46:	e014      	b.n	20005b72 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
20005b48:	687b      	ldr	r3, [r7, #4]
20005b4a:	681b      	ldr	r3, [r3, #0]
20005b4c:	68da      	ldr	r2, [r3, #12]
20005b4e:	687b      	ldr	r3, [r7, #4]
20005b50:	681b      	ldr	r3, [r3, #0]
20005b52:	f042 0208 	orr.w	r2, r2, #8
20005b56:	60da      	str	r2, [r3, #12]
      break;
20005b58:	e00b      	b.n	20005b72 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
20005b5a:	687b      	ldr	r3, [r7, #4]
20005b5c:	681b      	ldr	r3, [r3, #0]
20005b5e:	68da      	ldr	r2, [r3, #12]
20005b60:	687b      	ldr	r3, [r7, #4]
20005b62:	681b      	ldr	r3, [r3, #0]
20005b64:	f042 0210 	orr.w	r2, r2, #16
20005b68:	60da      	str	r2, [r3, #12]
      break;
20005b6a:	e002      	b.n	20005b72 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
20005b6c:	2301      	movs	r3, #1
20005b6e:	73fb      	strb	r3, [r7, #15]
      break;
20005b70:	bf00      	nop
  }

  if (status == HAL_OK)
20005b72:	7bfb      	ldrb	r3, [r7, #15]
20005b74:	2b00      	cmp	r3, #0
20005b76:	d14b      	bne.n	20005c10 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
20005b78:	687b      	ldr	r3, [r7, #4]
20005b7a:	681b      	ldr	r3, [r3, #0]
20005b7c:	2201      	movs	r2, #1
20005b7e:	6839      	ldr	r1, [r7, #0]
20005b80:	4618      	mov	r0, r3
20005b82:	f000 fd0f 	bl	200065a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
20005b86:	687b      	ldr	r3, [r7, #4]
20005b88:	681b      	ldr	r3, [r3, #0]
20005b8a:	4a24      	ldr	r2, [pc, #144]	; (20005c1c <HAL_TIM_PWM_Start_IT+0x1e8>)
20005b8c:	4293      	cmp	r3, r2
20005b8e:	d107      	bne.n	20005ba0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
20005b90:	687b      	ldr	r3, [r7, #4]
20005b92:	681b      	ldr	r3, [r3, #0]
20005b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20005b96:	687b      	ldr	r3, [r7, #4]
20005b98:	681b      	ldr	r3, [r3, #0]
20005b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20005b9e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
20005ba0:	687b      	ldr	r3, [r7, #4]
20005ba2:	681b      	ldr	r3, [r3, #0]
20005ba4:	4a1d      	ldr	r2, [pc, #116]	; (20005c1c <HAL_TIM_PWM_Start_IT+0x1e8>)
20005ba6:	4293      	cmp	r3, r2
20005ba8:	d018      	beq.n	20005bdc <HAL_TIM_PWM_Start_IT+0x1a8>
20005baa:	687b      	ldr	r3, [r7, #4]
20005bac:	681b      	ldr	r3, [r3, #0]
20005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20005bb2:	d013      	beq.n	20005bdc <HAL_TIM_PWM_Start_IT+0x1a8>
20005bb4:	687b      	ldr	r3, [r7, #4]
20005bb6:	681b      	ldr	r3, [r3, #0]
20005bb8:	4a19      	ldr	r2, [pc, #100]	; (20005c20 <HAL_TIM_PWM_Start_IT+0x1ec>)
20005bba:	4293      	cmp	r3, r2
20005bbc:	d00e      	beq.n	20005bdc <HAL_TIM_PWM_Start_IT+0x1a8>
20005bbe:	687b      	ldr	r3, [r7, #4]
20005bc0:	681b      	ldr	r3, [r3, #0]
20005bc2:	4a18      	ldr	r2, [pc, #96]	; (20005c24 <HAL_TIM_PWM_Start_IT+0x1f0>)
20005bc4:	4293      	cmp	r3, r2
20005bc6:	d009      	beq.n	20005bdc <HAL_TIM_PWM_Start_IT+0x1a8>
20005bc8:	687b      	ldr	r3, [r7, #4]
20005bca:	681b      	ldr	r3, [r3, #0]
20005bcc:	4a16      	ldr	r2, [pc, #88]	; (20005c28 <HAL_TIM_PWM_Start_IT+0x1f4>)
20005bce:	4293      	cmp	r3, r2
20005bd0:	d004      	beq.n	20005bdc <HAL_TIM_PWM_Start_IT+0x1a8>
20005bd2:	687b      	ldr	r3, [r7, #4]
20005bd4:	681b      	ldr	r3, [r3, #0]
20005bd6:	4a15      	ldr	r2, [pc, #84]	; (20005c2c <HAL_TIM_PWM_Start_IT+0x1f8>)
20005bd8:	4293      	cmp	r3, r2
20005bda:	d111      	bne.n	20005c00 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
20005bdc:	687b      	ldr	r3, [r7, #4]
20005bde:	681b      	ldr	r3, [r3, #0]
20005be0:	689b      	ldr	r3, [r3, #8]
20005be2:	f003 0307 	and.w	r3, r3, #7
20005be6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
20005be8:	68bb      	ldr	r3, [r7, #8]
20005bea:	2b06      	cmp	r3, #6
20005bec:	d010      	beq.n	20005c10 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
20005bee:	687b      	ldr	r3, [r7, #4]
20005bf0:	681b      	ldr	r3, [r3, #0]
20005bf2:	681a      	ldr	r2, [r3, #0]
20005bf4:	687b      	ldr	r3, [r7, #4]
20005bf6:	681b      	ldr	r3, [r3, #0]
20005bf8:	f042 0201 	orr.w	r2, r2, #1
20005bfc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
20005bfe:	e007      	b.n	20005c10 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
20005c00:	687b      	ldr	r3, [r7, #4]
20005c02:	681b      	ldr	r3, [r3, #0]
20005c04:	681a      	ldr	r2, [r3, #0]
20005c06:	687b      	ldr	r3, [r7, #4]
20005c08:	681b      	ldr	r3, [r3, #0]
20005c0a:	f042 0201 	orr.w	r2, r2, #1
20005c0e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
20005c10:	7bfb      	ldrb	r3, [r7, #15]
}
20005c12:	4618      	mov	r0, r3
20005c14:	3710      	adds	r7, #16
20005c16:	46bd      	mov	sp, r7
20005c18:	bd80      	pop	{r7, pc}
20005c1a:	bf00      	nop
20005c1c:	40010000 	.word	0x40010000
20005c20:	40000400 	.word	0x40000400
20005c24:	40000800 	.word	0x40000800
20005c28:	40000c00 	.word	0x40000c00
20005c2c:	40014000 	.word	0x40014000

20005c30 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
20005c30:	b580      	push	{r7, lr}
20005c32:	b084      	sub	sp, #16
20005c34:	af00      	add	r7, sp, #0
20005c36:	6078      	str	r0, [r7, #4]
20005c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20005c3a:	2300      	movs	r3, #0
20005c3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
20005c3e:	683b      	ldr	r3, [r7, #0]
20005c40:	2b0c      	cmp	r3, #12
20005c42:	d841      	bhi.n	20005cc8 <HAL_TIM_PWM_Stop_IT+0x98>
20005c44:	a201      	add	r2, pc, #4	; (adr r2, 20005c4c <HAL_TIM_PWM_Stop_IT+0x1c>)
20005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005c4a:	bf00      	nop
20005c4c:	20005c81 	.word	0x20005c81
20005c50:	20005cc9 	.word	0x20005cc9
20005c54:	20005cc9 	.word	0x20005cc9
20005c58:	20005cc9 	.word	0x20005cc9
20005c5c:	20005c93 	.word	0x20005c93
20005c60:	20005cc9 	.word	0x20005cc9
20005c64:	20005cc9 	.word	0x20005cc9
20005c68:	20005cc9 	.word	0x20005cc9
20005c6c:	20005ca5 	.word	0x20005ca5
20005c70:	20005cc9 	.word	0x20005cc9
20005c74:	20005cc9 	.word	0x20005cc9
20005c78:	20005cc9 	.word	0x20005cc9
20005c7c:	20005cb7 	.word	0x20005cb7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
20005c80:	687b      	ldr	r3, [r7, #4]
20005c82:	681b      	ldr	r3, [r3, #0]
20005c84:	68da      	ldr	r2, [r3, #12]
20005c86:	687b      	ldr	r3, [r7, #4]
20005c88:	681b      	ldr	r3, [r3, #0]
20005c8a:	f022 0202 	bic.w	r2, r2, #2
20005c8e:	60da      	str	r2, [r3, #12]
      break;
20005c90:	e01d      	b.n	20005cce <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
20005c92:	687b      	ldr	r3, [r7, #4]
20005c94:	681b      	ldr	r3, [r3, #0]
20005c96:	68da      	ldr	r2, [r3, #12]
20005c98:	687b      	ldr	r3, [r7, #4]
20005c9a:	681b      	ldr	r3, [r3, #0]
20005c9c:	f022 0204 	bic.w	r2, r2, #4
20005ca0:	60da      	str	r2, [r3, #12]
      break;
20005ca2:	e014      	b.n	20005cce <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
20005ca4:	687b      	ldr	r3, [r7, #4]
20005ca6:	681b      	ldr	r3, [r3, #0]
20005ca8:	68da      	ldr	r2, [r3, #12]
20005caa:	687b      	ldr	r3, [r7, #4]
20005cac:	681b      	ldr	r3, [r3, #0]
20005cae:	f022 0208 	bic.w	r2, r2, #8
20005cb2:	60da      	str	r2, [r3, #12]
      break;
20005cb4:	e00b      	b.n	20005cce <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
20005cb6:	687b      	ldr	r3, [r7, #4]
20005cb8:	681b      	ldr	r3, [r3, #0]
20005cba:	68da      	ldr	r2, [r3, #12]
20005cbc:	687b      	ldr	r3, [r7, #4]
20005cbe:	681b      	ldr	r3, [r3, #0]
20005cc0:	f022 0210 	bic.w	r2, r2, #16
20005cc4:	60da      	str	r2, [r3, #12]
      break;
20005cc6:	e002      	b.n	20005cce <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
20005cc8:	2301      	movs	r3, #1
20005cca:	73fb      	strb	r3, [r7, #15]
      break;
20005ccc:	bf00      	nop
  }

  if (status == HAL_OK)
20005cce:	7bfb      	ldrb	r3, [r7, #15]
20005cd0:	2b00      	cmp	r3, #0
20005cd2:	d157      	bne.n	20005d84 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
20005cd4:	687b      	ldr	r3, [r7, #4]
20005cd6:	681b      	ldr	r3, [r3, #0]
20005cd8:	2200      	movs	r2, #0
20005cda:	6839      	ldr	r1, [r7, #0]
20005cdc:	4618      	mov	r0, r3
20005cde:	f000 fc61 	bl	200065a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
20005ce2:	687b      	ldr	r3, [r7, #4]
20005ce4:	681b      	ldr	r3, [r3, #0]
20005ce6:	4a2a      	ldr	r2, [pc, #168]	; (20005d90 <HAL_TIM_PWM_Stop_IT+0x160>)
20005ce8:	4293      	cmp	r3, r2
20005cea:	d117      	bne.n	20005d1c <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
20005cec:	687b      	ldr	r3, [r7, #4]
20005cee:	681b      	ldr	r3, [r3, #0]
20005cf0:	6a1a      	ldr	r2, [r3, #32]
20005cf2:	f241 1311 	movw	r3, #4369	; 0x1111
20005cf6:	4013      	ands	r3, r2
20005cf8:	2b00      	cmp	r3, #0
20005cfa:	d10f      	bne.n	20005d1c <HAL_TIM_PWM_Stop_IT+0xec>
20005cfc:	687b      	ldr	r3, [r7, #4]
20005cfe:	681b      	ldr	r3, [r3, #0]
20005d00:	6a1a      	ldr	r2, [r3, #32]
20005d02:	f240 4344 	movw	r3, #1092	; 0x444
20005d06:	4013      	ands	r3, r2
20005d08:	2b00      	cmp	r3, #0
20005d0a:	d107      	bne.n	20005d1c <HAL_TIM_PWM_Stop_IT+0xec>
20005d0c:	687b      	ldr	r3, [r7, #4]
20005d0e:	681b      	ldr	r3, [r3, #0]
20005d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20005d12:	687b      	ldr	r3, [r7, #4]
20005d14:	681b      	ldr	r3, [r3, #0]
20005d16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20005d1a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
20005d1c:	687b      	ldr	r3, [r7, #4]
20005d1e:	681b      	ldr	r3, [r3, #0]
20005d20:	6a1a      	ldr	r2, [r3, #32]
20005d22:	f241 1311 	movw	r3, #4369	; 0x1111
20005d26:	4013      	ands	r3, r2
20005d28:	2b00      	cmp	r3, #0
20005d2a:	d10f      	bne.n	20005d4c <HAL_TIM_PWM_Stop_IT+0x11c>
20005d2c:	687b      	ldr	r3, [r7, #4]
20005d2e:	681b      	ldr	r3, [r3, #0]
20005d30:	6a1a      	ldr	r2, [r3, #32]
20005d32:	f240 4344 	movw	r3, #1092	; 0x444
20005d36:	4013      	ands	r3, r2
20005d38:	2b00      	cmp	r3, #0
20005d3a:	d107      	bne.n	20005d4c <HAL_TIM_PWM_Stop_IT+0x11c>
20005d3c:	687b      	ldr	r3, [r7, #4]
20005d3e:	681b      	ldr	r3, [r3, #0]
20005d40:	681a      	ldr	r2, [r3, #0]
20005d42:	687b      	ldr	r3, [r7, #4]
20005d44:	681b      	ldr	r3, [r3, #0]
20005d46:	f022 0201 	bic.w	r2, r2, #1
20005d4a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
20005d4c:	683b      	ldr	r3, [r7, #0]
20005d4e:	2b00      	cmp	r3, #0
20005d50:	d104      	bne.n	20005d5c <HAL_TIM_PWM_Stop_IT+0x12c>
20005d52:	687b      	ldr	r3, [r7, #4]
20005d54:	2201      	movs	r2, #1
20005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
20005d5a:	e013      	b.n	20005d84 <HAL_TIM_PWM_Stop_IT+0x154>
20005d5c:	683b      	ldr	r3, [r7, #0]
20005d5e:	2b04      	cmp	r3, #4
20005d60:	d104      	bne.n	20005d6c <HAL_TIM_PWM_Stop_IT+0x13c>
20005d62:	687b      	ldr	r3, [r7, #4]
20005d64:	2201      	movs	r2, #1
20005d66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
20005d6a:	e00b      	b.n	20005d84 <HAL_TIM_PWM_Stop_IT+0x154>
20005d6c:	683b      	ldr	r3, [r7, #0]
20005d6e:	2b08      	cmp	r3, #8
20005d70:	d104      	bne.n	20005d7c <HAL_TIM_PWM_Stop_IT+0x14c>
20005d72:	687b      	ldr	r3, [r7, #4]
20005d74:	2201      	movs	r2, #1
20005d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
20005d7a:	e003      	b.n	20005d84 <HAL_TIM_PWM_Stop_IT+0x154>
20005d7c:	687b      	ldr	r3, [r7, #4]
20005d7e:	2201      	movs	r2, #1
20005d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
20005d84:	7bfb      	ldrb	r3, [r7, #15]
}
20005d86:	4618      	mov	r0, r3
20005d88:	3710      	adds	r7, #16
20005d8a:	46bd      	mov	sp, r7
20005d8c:	bd80      	pop	{r7, pc}
20005d8e:	bf00      	nop
20005d90:	40010000 	.word	0x40010000

20005d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
20005d94:	b580      	push	{r7, lr}
20005d96:	b082      	sub	sp, #8
20005d98:	af00      	add	r7, sp, #0
20005d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
20005d9c:	687b      	ldr	r3, [r7, #4]
20005d9e:	681b      	ldr	r3, [r3, #0]
20005da0:	691b      	ldr	r3, [r3, #16]
20005da2:	f003 0302 	and.w	r3, r3, #2
20005da6:	2b02      	cmp	r3, #2
20005da8:	d122      	bne.n	20005df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
20005daa:	687b      	ldr	r3, [r7, #4]
20005dac:	681b      	ldr	r3, [r3, #0]
20005dae:	68db      	ldr	r3, [r3, #12]
20005db0:	f003 0302 	and.w	r3, r3, #2
20005db4:	2b02      	cmp	r3, #2
20005db6:	d11b      	bne.n	20005df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
20005db8:	687b      	ldr	r3, [r7, #4]
20005dba:	681b      	ldr	r3, [r3, #0]
20005dbc:	f06f 0202 	mvn.w	r2, #2
20005dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
20005dc2:	687b      	ldr	r3, [r7, #4]
20005dc4:	2201      	movs	r2, #1
20005dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
20005dc8:	687b      	ldr	r3, [r7, #4]
20005dca:	681b      	ldr	r3, [r3, #0]
20005dcc:	699b      	ldr	r3, [r3, #24]
20005dce:	f003 0303 	and.w	r3, r3, #3
20005dd2:	2b00      	cmp	r3, #0
20005dd4:	d003      	beq.n	20005dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
20005dd6:	6878      	ldr	r0, [r7, #4]
20005dd8:	f000 f9ba 	bl	20006150 <HAL_TIM_IC_CaptureCallback>
20005ddc:	e005      	b.n	20005dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
20005dde:	6878      	ldr	r0, [r7, #4]
20005de0:	f000 f9ac 	bl	2000613c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
20005de4:	6878      	ldr	r0, [r7, #4]
20005de6:	f000 f9bd 	bl	20006164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20005dea:	687b      	ldr	r3, [r7, #4]
20005dec:	2200      	movs	r2, #0
20005dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
20005df0:	687b      	ldr	r3, [r7, #4]
20005df2:	681b      	ldr	r3, [r3, #0]
20005df4:	691b      	ldr	r3, [r3, #16]
20005df6:	f003 0304 	and.w	r3, r3, #4
20005dfa:	2b04      	cmp	r3, #4
20005dfc:	d122      	bne.n	20005e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
20005dfe:	687b      	ldr	r3, [r7, #4]
20005e00:	681b      	ldr	r3, [r3, #0]
20005e02:	68db      	ldr	r3, [r3, #12]
20005e04:	f003 0304 	and.w	r3, r3, #4
20005e08:	2b04      	cmp	r3, #4
20005e0a:	d11b      	bne.n	20005e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
20005e0c:	687b      	ldr	r3, [r7, #4]
20005e0e:	681b      	ldr	r3, [r3, #0]
20005e10:	f06f 0204 	mvn.w	r2, #4
20005e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
20005e16:	687b      	ldr	r3, [r7, #4]
20005e18:	2202      	movs	r2, #2
20005e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
20005e1c:	687b      	ldr	r3, [r7, #4]
20005e1e:	681b      	ldr	r3, [r3, #0]
20005e20:	699b      	ldr	r3, [r3, #24]
20005e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
20005e26:	2b00      	cmp	r3, #0
20005e28:	d003      	beq.n	20005e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
20005e2a:	6878      	ldr	r0, [r7, #4]
20005e2c:	f000 f990 	bl	20006150 <HAL_TIM_IC_CaptureCallback>
20005e30:	e005      	b.n	20005e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
20005e32:	6878      	ldr	r0, [r7, #4]
20005e34:	f000 f982 	bl	2000613c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
20005e38:	6878      	ldr	r0, [r7, #4]
20005e3a:	f000 f993 	bl	20006164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20005e3e:	687b      	ldr	r3, [r7, #4]
20005e40:	2200      	movs	r2, #0
20005e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
20005e44:	687b      	ldr	r3, [r7, #4]
20005e46:	681b      	ldr	r3, [r3, #0]
20005e48:	691b      	ldr	r3, [r3, #16]
20005e4a:	f003 0308 	and.w	r3, r3, #8
20005e4e:	2b08      	cmp	r3, #8
20005e50:	d122      	bne.n	20005e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
20005e52:	687b      	ldr	r3, [r7, #4]
20005e54:	681b      	ldr	r3, [r3, #0]
20005e56:	68db      	ldr	r3, [r3, #12]
20005e58:	f003 0308 	and.w	r3, r3, #8
20005e5c:	2b08      	cmp	r3, #8
20005e5e:	d11b      	bne.n	20005e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
20005e60:	687b      	ldr	r3, [r7, #4]
20005e62:	681b      	ldr	r3, [r3, #0]
20005e64:	f06f 0208 	mvn.w	r2, #8
20005e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
20005e6a:	687b      	ldr	r3, [r7, #4]
20005e6c:	2204      	movs	r2, #4
20005e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
20005e70:	687b      	ldr	r3, [r7, #4]
20005e72:	681b      	ldr	r3, [r3, #0]
20005e74:	69db      	ldr	r3, [r3, #28]
20005e76:	f003 0303 	and.w	r3, r3, #3
20005e7a:	2b00      	cmp	r3, #0
20005e7c:	d003      	beq.n	20005e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
20005e7e:	6878      	ldr	r0, [r7, #4]
20005e80:	f000 f966 	bl	20006150 <HAL_TIM_IC_CaptureCallback>
20005e84:	e005      	b.n	20005e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
20005e86:	6878      	ldr	r0, [r7, #4]
20005e88:	f000 f958 	bl	2000613c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
20005e8c:	6878      	ldr	r0, [r7, #4]
20005e8e:	f000 f969 	bl	20006164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20005e92:	687b      	ldr	r3, [r7, #4]
20005e94:	2200      	movs	r2, #0
20005e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
20005e98:	687b      	ldr	r3, [r7, #4]
20005e9a:	681b      	ldr	r3, [r3, #0]
20005e9c:	691b      	ldr	r3, [r3, #16]
20005e9e:	f003 0310 	and.w	r3, r3, #16
20005ea2:	2b10      	cmp	r3, #16
20005ea4:	d122      	bne.n	20005eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
20005ea6:	687b      	ldr	r3, [r7, #4]
20005ea8:	681b      	ldr	r3, [r3, #0]
20005eaa:	68db      	ldr	r3, [r3, #12]
20005eac:	f003 0310 	and.w	r3, r3, #16
20005eb0:	2b10      	cmp	r3, #16
20005eb2:	d11b      	bne.n	20005eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
20005eb4:	687b      	ldr	r3, [r7, #4]
20005eb6:	681b      	ldr	r3, [r3, #0]
20005eb8:	f06f 0210 	mvn.w	r2, #16
20005ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
20005ebe:	687b      	ldr	r3, [r7, #4]
20005ec0:	2208      	movs	r2, #8
20005ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
20005ec4:	687b      	ldr	r3, [r7, #4]
20005ec6:	681b      	ldr	r3, [r3, #0]
20005ec8:	69db      	ldr	r3, [r3, #28]
20005eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
20005ece:	2b00      	cmp	r3, #0
20005ed0:	d003      	beq.n	20005eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
20005ed2:	6878      	ldr	r0, [r7, #4]
20005ed4:	f000 f93c 	bl	20006150 <HAL_TIM_IC_CaptureCallback>
20005ed8:	e005      	b.n	20005ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
20005eda:	6878      	ldr	r0, [r7, #4]
20005edc:	f000 f92e 	bl	2000613c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
20005ee0:	6878      	ldr	r0, [r7, #4]
20005ee2:	f000 f93f 	bl	20006164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20005ee6:	687b      	ldr	r3, [r7, #4]
20005ee8:	2200      	movs	r2, #0
20005eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
20005eec:	687b      	ldr	r3, [r7, #4]
20005eee:	681b      	ldr	r3, [r3, #0]
20005ef0:	691b      	ldr	r3, [r3, #16]
20005ef2:	f003 0301 	and.w	r3, r3, #1
20005ef6:	2b01      	cmp	r3, #1
20005ef8:	d10e      	bne.n	20005f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
20005efa:	687b      	ldr	r3, [r7, #4]
20005efc:	681b      	ldr	r3, [r3, #0]
20005efe:	68db      	ldr	r3, [r3, #12]
20005f00:	f003 0301 	and.w	r3, r3, #1
20005f04:	2b01      	cmp	r3, #1
20005f06:	d107      	bne.n	20005f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
20005f08:	687b      	ldr	r3, [r7, #4]
20005f0a:	681b      	ldr	r3, [r3, #0]
20005f0c:	f06f 0201 	mvn.w	r2, #1
20005f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
20005f12:	6878      	ldr	r0, [r7, #4]
20005f14:	f000 f908 	bl	20006128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
20005f18:	687b      	ldr	r3, [r7, #4]
20005f1a:	681b      	ldr	r3, [r3, #0]
20005f1c:	691b      	ldr	r3, [r3, #16]
20005f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
20005f22:	2b80      	cmp	r3, #128	; 0x80
20005f24:	d10e      	bne.n	20005f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
20005f26:	687b      	ldr	r3, [r7, #4]
20005f28:	681b      	ldr	r3, [r3, #0]
20005f2a:	68db      	ldr	r3, [r3, #12]
20005f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
20005f30:	2b80      	cmp	r3, #128	; 0x80
20005f32:	d107      	bne.n	20005f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
20005f34:	687b      	ldr	r3, [r7, #4]
20005f36:	681b      	ldr	r3, [r3, #0]
20005f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
20005f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
20005f3e:	6878      	ldr	r0, [r7, #4]
20005f40:	f000 fbce 	bl	200066e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
20005f44:	687b      	ldr	r3, [r7, #4]
20005f46:	681b      	ldr	r3, [r3, #0]
20005f48:	691b      	ldr	r3, [r3, #16]
20005f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
20005f4e:	2b40      	cmp	r3, #64	; 0x40
20005f50:	d10e      	bne.n	20005f70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
20005f52:	687b      	ldr	r3, [r7, #4]
20005f54:	681b      	ldr	r3, [r3, #0]
20005f56:	68db      	ldr	r3, [r3, #12]
20005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
20005f5c:	2b40      	cmp	r3, #64	; 0x40
20005f5e:	d107      	bne.n	20005f70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
20005f60:	687b      	ldr	r3, [r7, #4]
20005f62:	681b      	ldr	r3, [r3, #0]
20005f64:	f06f 0240 	mvn.w	r2, #64	; 0x40
20005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
20005f6a:	6878      	ldr	r0, [r7, #4]
20005f6c:	f000 f904 	bl	20006178 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
20005f70:	687b      	ldr	r3, [r7, #4]
20005f72:	681b      	ldr	r3, [r3, #0]
20005f74:	691b      	ldr	r3, [r3, #16]
20005f76:	f003 0320 	and.w	r3, r3, #32
20005f7a:	2b20      	cmp	r3, #32
20005f7c:	d10e      	bne.n	20005f9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
20005f7e:	687b      	ldr	r3, [r7, #4]
20005f80:	681b      	ldr	r3, [r3, #0]
20005f82:	68db      	ldr	r3, [r3, #12]
20005f84:	f003 0320 	and.w	r3, r3, #32
20005f88:	2b20      	cmp	r3, #32
20005f8a:	d107      	bne.n	20005f9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
20005f8c:	687b      	ldr	r3, [r7, #4]
20005f8e:	681b      	ldr	r3, [r3, #0]
20005f90:	f06f 0220 	mvn.w	r2, #32
20005f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
20005f96:	6878      	ldr	r0, [r7, #4]
20005f98:	f000 fb98 	bl	200066cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
20005f9c:	bf00      	nop
20005f9e:	3708      	adds	r7, #8
20005fa0:	46bd      	mov	sp, r7
20005fa2:	bd80      	pop	{r7, pc}

20005fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
20005fa4:	b580      	push	{r7, lr}
20005fa6:	b086      	sub	sp, #24
20005fa8:	af00      	add	r7, sp, #0
20005faa:	60f8      	str	r0, [r7, #12]
20005fac:	60b9      	str	r1, [r7, #8]
20005fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20005fb0:	2300      	movs	r3, #0
20005fb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
20005fb4:	68fb      	ldr	r3, [r7, #12]
20005fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20005fba:	2b01      	cmp	r3, #1
20005fbc:	d101      	bne.n	20005fc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
20005fbe:	2302      	movs	r3, #2
20005fc0:	e0ae      	b.n	20006120 <HAL_TIM_PWM_ConfigChannel+0x17c>
20005fc2:	68fb      	ldr	r3, [r7, #12]
20005fc4:	2201      	movs	r2, #1
20005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
20005fca:	687b      	ldr	r3, [r7, #4]
20005fcc:	2b0c      	cmp	r3, #12
20005fce:	f200 809f 	bhi.w	20006110 <HAL_TIM_PWM_ConfigChannel+0x16c>
20005fd2:	a201      	add	r2, pc, #4	; (adr r2, 20005fd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
20005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005fd8:	2000600d 	.word	0x2000600d
20005fdc:	20006111 	.word	0x20006111
20005fe0:	20006111 	.word	0x20006111
20005fe4:	20006111 	.word	0x20006111
20005fe8:	2000604d 	.word	0x2000604d
20005fec:	20006111 	.word	0x20006111
20005ff0:	20006111 	.word	0x20006111
20005ff4:	20006111 	.word	0x20006111
20005ff8:	2000608f 	.word	0x2000608f
20005ffc:	20006111 	.word	0x20006111
20006000:	20006111 	.word	0x20006111
20006004:	20006111 	.word	0x20006111
20006008:	200060cf 	.word	0x200060cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
2000600c:	68fb      	ldr	r3, [r7, #12]
2000600e:	681b      	ldr	r3, [r3, #0]
20006010:	68b9      	ldr	r1, [r7, #8]
20006012:	4618      	mov	r0, r3
20006014:	f000 f93a 	bl	2000628c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
20006018:	68fb      	ldr	r3, [r7, #12]
2000601a:	681b      	ldr	r3, [r3, #0]
2000601c:	699a      	ldr	r2, [r3, #24]
2000601e:	68fb      	ldr	r3, [r7, #12]
20006020:	681b      	ldr	r3, [r3, #0]
20006022:	f042 0208 	orr.w	r2, r2, #8
20006026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
20006028:	68fb      	ldr	r3, [r7, #12]
2000602a:	681b      	ldr	r3, [r3, #0]
2000602c:	699a      	ldr	r2, [r3, #24]
2000602e:	68fb      	ldr	r3, [r7, #12]
20006030:	681b      	ldr	r3, [r3, #0]
20006032:	f022 0204 	bic.w	r2, r2, #4
20006036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
20006038:	68fb      	ldr	r3, [r7, #12]
2000603a:	681b      	ldr	r3, [r3, #0]
2000603c:	6999      	ldr	r1, [r3, #24]
2000603e:	68bb      	ldr	r3, [r7, #8]
20006040:	691a      	ldr	r2, [r3, #16]
20006042:	68fb      	ldr	r3, [r7, #12]
20006044:	681b      	ldr	r3, [r3, #0]
20006046:	430a      	orrs	r2, r1
20006048:	619a      	str	r2, [r3, #24]
      break;
2000604a:	e064      	b.n	20006116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
2000604c:	68fb      	ldr	r3, [r7, #12]
2000604e:	681b      	ldr	r3, [r3, #0]
20006050:	68b9      	ldr	r1, [r7, #8]
20006052:	4618      	mov	r0, r3
20006054:	f000 f980 	bl	20006358 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
20006058:	68fb      	ldr	r3, [r7, #12]
2000605a:	681b      	ldr	r3, [r3, #0]
2000605c:	699a      	ldr	r2, [r3, #24]
2000605e:	68fb      	ldr	r3, [r7, #12]
20006060:	681b      	ldr	r3, [r3, #0]
20006062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
20006066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
20006068:	68fb      	ldr	r3, [r7, #12]
2000606a:	681b      	ldr	r3, [r3, #0]
2000606c:	699a      	ldr	r2, [r3, #24]
2000606e:	68fb      	ldr	r3, [r7, #12]
20006070:	681b      	ldr	r3, [r3, #0]
20006072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20006076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
20006078:	68fb      	ldr	r3, [r7, #12]
2000607a:	681b      	ldr	r3, [r3, #0]
2000607c:	6999      	ldr	r1, [r3, #24]
2000607e:	68bb      	ldr	r3, [r7, #8]
20006080:	691b      	ldr	r3, [r3, #16]
20006082:	021a      	lsls	r2, r3, #8
20006084:	68fb      	ldr	r3, [r7, #12]
20006086:	681b      	ldr	r3, [r3, #0]
20006088:	430a      	orrs	r2, r1
2000608a:	619a      	str	r2, [r3, #24]
      break;
2000608c:	e043      	b.n	20006116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
2000608e:	68fb      	ldr	r3, [r7, #12]
20006090:	681b      	ldr	r3, [r3, #0]
20006092:	68b9      	ldr	r1, [r7, #8]
20006094:	4618      	mov	r0, r3
20006096:	f000 f9cb 	bl	20006430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
2000609a:	68fb      	ldr	r3, [r7, #12]
2000609c:	681b      	ldr	r3, [r3, #0]
2000609e:	69da      	ldr	r2, [r3, #28]
200060a0:	68fb      	ldr	r3, [r7, #12]
200060a2:	681b      	ldr	r3, [r3, #0]
200060a4:	f042 0208 	orr.w	r2, r2, #8
200060a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
200060aa:	68fb      	ldr	r3, [r7, #12]
200060ac:	681b      	ldr	r3, [r3, #0]
200060ae:	69da      	ldr	r2, [r3, #28]
200060b0:	68fb      	ldr	r3, [r7, #12]
200060b2:	681b      	ldr	r3, [r3, #0]
200060b4:	f022 0204 	bic.w	r2, r2, #4
200060b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
200060ba:	68fb      	ldr	r3, [r7, #12]
200060bc:	681b      	ldr	r3, [r3, #0]
200060be:	69d9      	ldr	r1, [r3, #28]
200060c0:	68bb      	ldr	r3, [r7, #8]
200060c2:	691a      	ldr	r2, [r3, #16]
200060c4:	68fb      	ldr	r3, [r7, #12]
200060c6:	681b      	ldr	r3, [r3, #0]
200060c8:	430a      	orrs	r2, r1
200060ca:	61da      	str	r2, [r3, #28]
      break;
200060cc:	e023      	b.n	20006116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
200060ce:	68fb      	ldr	r3, [r7, #12]
200060d0:	681b      	ldr	r3, [r3, #0]
200060d2:	68b9      	ldr	r1, [r7, #8]
200060d4:	4618      	mov	r0, r3
200060d6:	f000 fa15 	bl	20006504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
200060da:	68fb      	ldr	r3, [r7, #12]
200060dc:	681b      	ldr	r3, [r3, #0]
200060de:	69da      	ldr	r2, [r3, #28]
200060e0:	68fb      	ldr	r3, [r7, #12]
200060e2:	681b      	ldr	r3, [r3, #0]
200060e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
200060e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
200060ea:	68fb      	ldr	r3, [r7, #12]
200060ec:	681b      	ldr	r3, [r3, #0]
200060ee:	69da      	ldr	r2, [r3, #28]
200060f0:	68fb      	ldr	r3, [r7, #12]
200060f2:	681b      	ldr	r3, [r3, #0]
200060f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
200060f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
200060fa:	68fb      	ldr	r3, [r7, #12]
200060fc:	681b      	ldr	r3, [r3, #0]
200060fe:	69d9      	ldr	r1, [r3, #28]
20006100:	68bb      	ldr	r3, [r7, #8]
20006102:	691b      	ldr	r3, [r3, #16]
20006104:	021a      	lsls	r2, r3, #8
20006106:	68fb      	ldr	r3, [r7, #12]
20006108:	681b      	ldr	r3, [r3, #0]
2000610a:	430a      	orrs	r2, r1
2000610c:	61da      	str	r2, [r3, #28]
      break;
2000610e:	e002      	b.n	20006116 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
20006110:	2301      	movs	r3, #1
20006112:	75fb      	strb	r3, [r7, #23]
      break;
20006114:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
20006116:	68fb      	ldr	r3, [r7, #12]
20006118:	2200      	movs	r2, #0
2000611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2000611e:	7dfb      	ldrb	r3, [r7, #23]
}
20006120:	4618      	mov	r0, r3
20006122:	3718      	adds	r7, #24
20006124:	46bd      	mov	sp, r7
20006126:	bd80      	pop	{r7, pc}

20006128 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
20006128:	b480      	push	{r7}
2000612a:	b083      	sub	sp, #12
2000612c:	af00      	add	r7, sp, #0
2000612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
20006130:	bf00      	nop
20006132:	370c      	adds	r7, #12
20006134:	46bd      	mov	sp, r7
20006136:	f85d 7b04 	ldr.w	r7, [sp], #4
2000613a:	4770      	bx	lr

2000613c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
2000613c:	b480      	push	{r7}
2000613e:	b083      	sub	sp, #12
20006140:	af00      	add	r7, sp, #0
20006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
20006144:	bf00      	nop
20006146:	370c      	adds	r7, #12
20006148:	46bd      	mov	sp, r7
2000614a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000614e:	4770      	bx	lr

20006150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
20006150:	b480      	push	{r7}
20006152:	b083      	sub	sp, #12
20006154:	af00      	add	r7, sp, #0
20006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
20006158:	bf00      	nop
2000615a:	370c      	adds	r7, #12
2000615c:	46bd      	mov	sp, r7
2000615e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006162:	4770      	bx	lr

20006164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
20006164:	b480      	push	{r7}
20006166:	b083      	sub	sp, #12
20006168:	af00      	add	r7, sp, #0
2000616a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
2000616c:	bf00      	nop
2000616e:	370c      	adds	r7, #12
20006170:	46bd      	mov	sp, r7
20006172:	f85d 7b04 	ldr.w	r7, [sp], #4
20006176:	4770      	bx	lr

20006178 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
20006178:	b480      	push	{r7}
2000617a:	b083      	sub	sp, #12
2000617c:	af00      	add	r7, sp, #0
2000617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
20006180:	bf00      	nop
20006182:	370c      	adds	r7, #12
20006184:	46bd      	mov	sp, r7
20006186:	f85d 7b04 	ldr.w	r7, [sp], #4
2000618a:	4770      	bx	lr

2000618c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
2000618c:	b480      	push	{r7}
2000618e:	b085      	sub	sp, #20
20006190:	af00      	add	r7, sp, #0
20006192:	6078      	str	r0, [r7, #4]
20006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
20006196:	687b      	ldr	r3, [r7, #4]
20006198:	681b      	ldr	r3, [r3, #0]
2000619a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
2000619c:	687b      	ldr	r3, [r7, #4]
2000619e:	4a34      	ldr	r2, [pc, #208]	; (20006270 <TIM_Base_SetConfig+0xe4>)
200061a0:	4293      	cmp	r3, r2
200061a2:	d00f      	beq.n	200061c4 <TIM_Base_SetConfig+0x38>
200061a4:	687b      	ldr	r3, [r7, #4]
200061a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
200061aa:	d00b      	beq.n	200061c4 <TIM_Base_SetConfig+0x38>
200061ac:	687b      	ldr	r3, [r7, #4]
200061ae:	4a31      	ldr	r2, [pc, #196]	; (20006274 <TIM_Base_SetConfig+0xe8>)
200061b0:	4293      	cmp	r3, r2
200061b2:	d007      	beq.n	200061c4 <TIM_Base_SetConfig+0x38>
200061b4:	687b      	ldr	r3, [r7, #4]
200061b6:	4a30      	ldr	r2, [pc, #192]	; (20006278 <TIM_Base_SetConfig+0xec>)
200061b8:	4293      	cmp	r3, r2
200061ba:	d003      	beq.n	200061c4 <TIM_Base_SetConfig+0x38>
200061bc:	687b      	ldr	r3, [r7, #4]
200061be:	4a2f      	ldr	r2, [pc, #188]	; (2000627c <TIM_Base_SetConfig+0xf0>)
200061c0:	4293      	cmp	r3, r2
200061c2:	d108      	bne.n	200061d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
200061c4:	68fb      	ldr	r3, [r7, #12]
200061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
200061ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
200061cc:	683b      	ldr	r3, [r7, #0]
200061ce:	685b      	ldr	r3, [r3, #4]
200061d0:	68fa      	ldr	r2, [r7, #12]
200061d2:	4313      	orrs	r3, r2
200061d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
200061d6:	687b      	ldr	r3, [r7, #4]
200061d8:	4a25      	ldr	r2, [pc, #148]	; (20006270 <TIM_Base_SetConfig+0xe4>)
200061da:	4293      	cmp	r3, r2
200061dc:	d01b      	beq.n	20006216 <TIM_Base_SetConfig+0x8a>
200061de:	687b      	ldr	r3, [r7, #4]
200061e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
200061e4:	d017      	beq.n	20006216 <TIM_Base_SetConfig+0x8a>
200061e6:	687b      	ldr	r3, [r7, #4]
200061e8:	4a22      	ldr	r2, [pc, #136]	; (20006274 <TIM_Base_SetConfig+0xe8>)
200061ea:	4293      	cmp	r3, r2
200061ec:	d013      	beq.n	20006216 <TIM_Base_SetConfig+0x8a>
200061ee:	687b      	ldr	r3, [r7, #4]
200061f0:	4a21      	ldr	r2, [pc, #132]	; (20006278 <TIM_Base_SetConfig+0xec>)
200061f2:	4293      	cmp	r3, r2
200061f4:	d00f      	beq.n	20006216 <TIM_Base_SetConfig+0x8a>
200061f6:	687b      	ldr	r3, [r7, #4]
200061f8:	4a20      	ldr	r2, [pc, #128]	; (2000627c <TIM_Base_SetConfig+0xf0>)
200061fa:	4293      	cmp	r3, r2
200061fc:	d00b      	beq.n	20006216 <TIM_Base_SetConfig+0x8a>
200061fe:	687b      	ldr	r3, [r7, #4]
20006200:	4a1f      	ldr	r2, [pc, #124]	; (20006280 <TIM_Base_SetConfig+0xf4>)
20006202:	4293      	cmp	r3, r2
20006204:	d007      	beq.n	20006216 <TIM_Base_SetConfig+0x8a>
20006206:	687b      	ldr	r3, [r7, #4]
20006208:	4a1e      	ldr	r2, [pc, #120]	; (20006284 <TIM_Base_SetConfig+0xf8>)
2000620a:	4293      	cmp	r3, r2
2000620c:	d003      	beq.n	20006216 <TIM_Base_SetConfig+0x8a>
2000620e:	687b      	ldr	r3, [r7, #4]
20006210:	4a1d      	ldr	r2, [pc, #116]	; (20006288 <TIM_Base_SetConfig+0xfc>)
20006212:	4293      	cmp	r3, r2
20006214:	d108      	bne.n	20006228 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
20006216:	68fb      	ldr	r3, [r7, #12]
20006218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000621c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
2000621e:	683b      	ldr	r3, [r7, #0]
20006220:	68db      	ldr	r3, [r3, #12]
20006222:	68fa      	ldr	r2, [r7, #12]
20006224:	4313      	orrs	r3, r2
20006226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
20006228:	68fb      	ldr	r3, [r7, #12]
2000622a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
2000622e:	683b      	ldr	r3, [r7, #0]
20006230:	695b      	ldr	r3, [r3, #20]
20006232:	4313      	orrs	r3, r2
20006234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
20006236:	687b      	ldr	r3, [r7, #4]
20006238:	68fa      	ldr	r2, [r7, #12]
2000623a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
2000623c:	683b      	ldr	r3, [r7, #0]
2000623e:	689a      	ldr	r2, [r3, #8]
20006240:	687b      	ldr	r3, [r7, #4]
20006242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
20006244:	683b      	ldr	r3, [r7, #0]
20006246:	681a      	ldr	r2, [r3, #0]
20006248:	687b      	ldr	r3, [r7, #4]
2000624a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
2000624c:	687b      	ldr	r3, [r7, #4]
2000624e:	4a08      	ldr	r2, [pc, #32]	; (20006270 <TIM_Base_SetConfig+0xe4>)
20006250:	4293      	cmp	r3, r2
20006252:	d103      	bne.n	2000625c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
20006254:	683b      	ldr	r3, [r7, #0]
20006256:	691a      	ldr	r2, [r3, #16]
20006258:	687b      	ldr	r3, [r7, #4]
2000625a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
2000625c:	687b      	ldr	r3, [r7, #4]
2000625e:	2201      	movs	r2, #1
20006260:	615a      	str	r2, [r3, #20]
}
20006262:	bf00      	nop
20006264:	3714      	adds	r7, #20
20006266:	46bd      	mov	sp, r7
20006268:	f85d 7b04 	ldr.w	r7, [sp], #4
2000626c:	4770      	bx	lr
2000626e:	bf00      	nop
20006270:	40010000 	.word	0x40010000
20006274:	40000400 	.word	0x40000400
20006278:	40000800 	.word	0x40000800
2000627c:	40000c00 	.word	0x40000c00
20006280:	40014000 	.word	0x40014000
20006284:	40014400 	.word	0x40014400
20006288:	40014800 	.word	0x40014800

2000628c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
2000628c:	b480      	push	{r7}
2000628e:	b087      	sub	sp, #28
20006290:	af00      	add	r7, sp, #0
20006292:	6078      	str	r0, [r7, #4]
20006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
20006296:	687b      	ldr	r3, [r7, #4]
20006298:	6a1b      	ldr	r3, [r3, #32]
2000629a:	f023 0201 	bic.w	r2, r3, #1
2000629e:	687b      	ldr	r3, [r7, #4]
200062a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
200062a2:	687b      	ldr	r3, [r7, #4]
200062a4:	6a1b      	ldr	r3, [r3, #32]
200062a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
200062a8:	687b      	ldr	r3, [r7, #4]
200062aa:	685b      	ldr	r3, [r3, #4]
200062ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
200062ae:	687b      	ldr	r3, [r7, #4]
200062b0:	699b      	ldr	r3, [r3, #24]
200062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
200062b4:	68fb      	ldr	r3, [r7, #12]
200062b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
200062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
200062bc:	68fb      	ldr	r3, [r7, #12]
200062be:	f023 0303 	bic.w	r3, r3, #3
200062c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
200062c4:	683b      	ldr	r3, [r7, #0]
200062c6:	681b      	ldr	r3, [r3, #0]
200062c8:	68fa      	ldr	r2, [r7, #12]
200062ca:	4313      	orrs	r3, r2
200062cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
200062ce:	697b      	ldr	r3, [r7, #20]
200062d0:	f023 0302 	bic.w	r3, r3, #2
200062d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
200062d6:	683b      	ldr	r3, [r7, #0]
200062d8:	689b      	ldr	r3, [r3, #8]
200062da:	697a      	ldr	r2, [r7, #20]
200062dc:	4313      	orrs	r3, r2
200062de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
200062e0:	687b      	ldr	r3, [r7, #4]
200062e2:	4a1c      	ldr	r2, [pc, #112]	; (20006354 <TIM_OC1_SetConfig+0xc8>)
200062e4:	4293      	cmp	r3, r2
200062e6:	d10c      	bne.n	20006302 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
200062e8:	697b      	ldr	r3, [r7, #20]
200062ea:	f023 0308 	bic.w	r3, r3, #8
200062ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
200062f0:	683b      	ldr	r3, [r7, #0]
200062f2:	68db      	ldr	r3, [r3, #12]
200062f4:	697a      	ldr	r2, [r7, #20]
200062f6:	4313      	orrs	r3, r2
200062f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
200062fa:	697b      	ldr	r3, [r7, #20]
200062fc:	f023 0304 	bic.w	r3, r3, #4
20006300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
20006302:	687b      	ldr	r3, [r7, #4]
20006304:	4a13      	ldr	r2, [pc, #76]	; (20006354 <TIM_OC1_SetConfig+0xc8>)
20006306:	4293      	cmp	r3, r2
20006308:	d111      	bne.n	2000632e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
2000630a:	693b      	ldr	r3, [r7, #16]
2000630c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
20006310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
20006312:	693b      	ldr	r3, [r7, #16]
20006314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
20006318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
2000631a:	683b      	ldr	r3, [r7, #0]
2000631c:	695b      	ldr	r3, [r3, #20]
2000631e:	693a      	ldr	r2, [r7, #16]
20006320:	4313      	orrs	r3, r2
20006322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
20006324:	683b      	ldr	r3, [r7, #0]
20006326:	699b      	ldr	r3, [r3, #24]
20006328:	693a      	ldr	r2, [r7, #16]
2000632a:	4313      	orrs	r3, r2
2000632c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
2000632e:	687b      	ldr	r3, [r7, #4]
20006330:	693a      	ldr	r2, [r7, #16]
20006332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
20006334:	687b      	ldr	r3, [r7, #4]
20006336:	68fa      	ldr	r2, [r7, #12]
20006338:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
2000633a:	683b      	ldr	r3, [r7, #0]
2000633c:	685a      	ldr	r2, [r3, #4]
2000633e:	687b      	ldr	r3, [r7, #4]
20006340:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20006342:	687b      	ldr	r3, [r7, #4]
20006344:	697a      	ldr	r2, [r7, #20]
20006346:	621a      	str	r2, [r3, #32]
}
20006348:	bf00      	nop
2000634a:	371c      	adds	r7, #28
2000634c:	46bd      	mov	sp, r7
2000634e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006352:	4770      	bx	lr
20006354:	40010000 	.word	0x40010000

20006358 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
20006358:	b480      	push	{r7}
2000635a:	b087      	sub	sp, #28
2000635c:	af00      	add	r7, sp, #0
2000635e:	6078      	str	r0, [r7, #4]
20006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
20006362:	687b      	ldr	r3, [r7, #4]
20006364:	6a1b      	ldr	r3, [r3, #32]
20006366:	f023 0210 	bic.w	r2, r3, #16
2000636a:	687b      	ldr	r3, [r7, #4]
2000636c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
2000636e:	687b      	ldr	r3, [r7, #4]
20006370:	6a1b      	ldr	r3, [r3, #32]
20006372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20006374:	687b      	ldr	r3, [r7, #4]
20006376:	685b      	ldr	r3, [r3, #4]
20006378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
2000637a:	687b      	ldr	r3, [r7, #4]
2000637c:	699b      	ldr	r3, [r3, #24]
2000637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
20006380:	68fb      	ldr	r3, [r7, #12]
20006382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
20006386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
20006388:	68fb      	ldr	r3, [r7, #12]
2000638a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000638e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
20006390:	683b      	ldr	r3, [r7, #0]
20006392:	681b      	ldr	r3, [r3, #0]
20006394:	021b      	lsls	r3, r3, #8
20006396:	68fa      	ldr	r2, [r7, #12]
20006398:	4313      	orrs	r3, r2
2000639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
2000639c:	697b      	ldr	r3, [r7, #20]
2000639e:	f023 0320 	bic.w	r3, r3, #32
200063a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
200063a4:	683b      	ldr	r3, [r7, #0]
200063a6:	689b      	ldr	r3, [r3, #8]
200063a8:	011b      	lsls	r3, r3, #4
200063aa:	697a      	ldr	r2, [r7, #20]
200063ac:	4313      	orrs	r3, r2
200063ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
200063b0:	687b      	ldr	r3, [r7, #4]
200063b2:	4a1e      	ldr	r2, [pc, #120]	; (2000642c <TIM_OC2_SetConfig+0xd4>)
200063b4:	4293      	cmp	r3, r2
200063b6:	d10d      	bne.n	200063d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
200063b8:	697b      	ldr	r3, [r7, #20]
200063ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
200063be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
200063c0:	683b      	ldr	r3, [r7, #0]
200063c2:	68db      	ldr	r3, [r3, #12]
200063c4:	011b      	lsls	r3, r3, #4
200063c6:	697a      	ldr	r2, [r7, #20]
200063c8:	4313      	orrs	r3, r2
200063ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
200063cc:	697b      	ldr	r3, [r7, #20]
200063ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
200063d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
200063d4:	687b      	ldr	r3, [r7, #4]
200063d6:	4a15      	ldr	r2, [pc, #84]	; (2000642c <TIM_OC2_SetConfig+0xd4>)
200063d8:	4293      	cmp	r3, r2
200063da:	d113      	bne.n	20006404 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
200063dc:	693b      	ldr	r3, [r7, #16]
200063de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
200063e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
200063e4:	693b      	ldr	r3, [r7, #16]
200063e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
200063ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
200063ec:	683b      	ldr	r3, [r7, #0]
200063ee:	695b      	ldr	r3, [r3, #20]
200063f0:	009b      	lsls	r3, r3, #2
200063f2:	693a      	ldr	r2, [r7, #16]
200063f4:	4313      	orrs	r3, r2
200063f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
200063f8:	683b      	ldr	r3, [r7, #0]
200063fa:	699b      	ldr	r3, [r3, #24]
200063fc:	009b      	lsls	r3, r3, #2
200063fe:	693a      	ldr	r2, [r7, #16]
20006400:	4313      	orrs	r3, r2
20006402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20006404:	687b      	ldr	r3, [r7, #4]
20006406:	693a      	ldr	r2, [r7, #16]
20006408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
2000640a:	687b      	ldr	r3, [r7, #4]
2000640c:	68fa      	ldr	r2, [r7, #12]
2000640e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
20006410:	683b      	ldr	r3, [r7, #0]
20006412:	685a      	ldr	r2, [r3, #4]
20006414:	687b      	ldr	r3, [r7, #4]
20006416:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20006418:	687b      	ldr	r3, [r7, #4]
2000641a:	697a      	ldr	r2, [r7, #20]
2000641c:	621a      	str	r2, [r3, #32]
}
2000641e:	bf00      	nop
20006420:	371c      	adds	r7, #28
20006422:	46bd      	mov	sp, r7
20006424:	f85d 7b04 	ldr.w	r7, [sp], #4
20006428:	4770      	bx	lr
2000642a:	bf00      	nop
2000642c:	40010000 	.word	0x40010000

20006430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
20006430:	b480      	push	{r7}
20006432:	b087      	sub	sp, #28
20006434:	af00      	add	r7, sp, #0
20006436:	6078      	str	r0, [r7, #4]
20006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
2000643a:	687b      	ldr	r3, [r7, #4]
2000643c:	6a1b      	ldr	r3, [r3, #32]
2000643e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
20006442:	687b      	ldr	r3, [r7, #4]
20006444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20006446:	687b      	ldr	r3, [r7, #4]
20006448:	6a1b      	ldr	r3, [r3, #32]
2000644a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
2000644c:	687b      	ldr	r3, [r7, #4]
2000644e:	685b      	ldr	r3, [r3, #4]
20006450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
20006452:	687b      	ldr	r3, [r7, #4]
20006454:	69db      	ldr	r3, [r3, #28]
20006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
20006458:	68fb      	ldr	r3, [r7, #12]
2000645a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2000645e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
20006460:	68fb      	ldr	r3, [r7, #12]
20006462:	f023 0303 	bic.w	r3, r3, #3
20006466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
20006468:	683b      	ldr	r3, [r7, #0]
2000646a:	681b      	ldr	r3, [r3, #0]
2000646c:	68fa      	ldr	r2, [r7, #12]
2000646e:	4313      	orrs	r3, r2
20006470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
20006472:	697b      	ldr	r3, [r7, #20]
20006474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
20006478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
2000647a:	683b      	ldr	r3, [r7, #0]
2000647c:	689b      	ldr	r3, [r3, #8]
2000647e:	021b      	lsls	r3, r3, #8
20006480:	697a      	ldr	r2, [r7, #20]
20006482:	4313      	orrs	r3, r2
20006484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
20006486:	687b      	ldr	r3, [r7, #4]
20006488:	4a1d      	ldr	r2, [pc, #116]	; (20006500 <TIM_OC3_SetConfig+0xd0>)
2000648a:	4293      	cmp	r3, r2
2000648c:	d10d      	bne.n	200064aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
2000648e:	697b      	ldr	r3, [r7, #20]
20006490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
20006494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
20006496:	683b      	ldr	r3, [r7, #0]
20006498:	68db      	ldr	r3, [r3, #12]
2000649a:	021b      	lsls	r3, r3, #8
2000649c:	697a      	ldr	r2, [r7, #20]
2000649e:	4313      	orrs	r3, r2
200064a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
200064a2:	697b      	ldr	r3, [r7, #20]
200064a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
200064a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
200064aa:	687b      	ldr	r3, [r7, #4]
200064ac:	4a14      	ldr	r2, [pc, #80]	; (20006500 <TIM_OC3_SetConfig+0xd0>)
200064ae:	4293      	cmp	r3, r2
200064b0:	d113      	bne.n	200064da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
200064b2:	693b      	ldr	r3, [r7, #16]
200064b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
200064b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
200064ba:	693b      	ldr	r3, [r7, #16]
200064bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
200064c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
200064c2:	683b      	ldr	r3, [r7, #0]
200064c4:	695b      	ldr	r3, [r3, #20]
200064c6:	011b      	lsls	r3, r3, #4
200064c8:	693a      	ldr	r2, [r7, #16]
200064ca:	4313      	orrs	r3, r2
200064cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
200064ce:	683b      	ldr	r3, [r7, #0]
200064d0:	699b      	ldr	r3, [r3, #24]
200064d2:	011b      	lsls	r3, r3, #4
200064d4:	693a      	ldr	r2, [r7, #16]
200064d6:	4313      	orrs	r3, r2
200064d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
200064da:	687b      	ldr	r3, [r7, #4]
200064dc:	693a      	ldr	r2, [r7, #16]
200064de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
200064e0:	687b      	ldr	r3, [r7, #4]
200064e2:	68fa      	ldr	r2, [r7, #12]
200064e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
200064e6:	683b      	ldr	r3, [r7, #0]
200064e8:	685a      	ldr	r2, [r3, #4]
200064ea:	687b      	ldr	r3, [r7, #4]
200064ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
200064ee:	687b      	ldr	r3, [r7, #4]
200064f0:	697a      	ldr	r2, [r7, #20]
200064f2:	621a      	str	r2, [r3, #32]
}
200064f4:	bf00      	nop
200064f6:	371c      	adds	r7, #28
200064f8:	46bd      	mov	sp, r7
200064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
200064fe:	4770      	bx	lr
20006500:	40010000 	.word	0x40010000

20006504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
20006504:	b480      	push	{r7}
20006506:	b087      	sub	sp, #28
20006508:	af00      	add	r7, sp, #0
2000650a:	6078      	str	r0, [r7, #4]
2000650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
2000650e:	687b      	ldr	r3, [r7, #4]
20006510:	6a1b      	ldr	r3, [r3, #32]
20006512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
20006516:	687b      	ldr	r3, [r7, #4]
20006518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
2000651a:	687b      	ldr	r3, [r7, #4]
2000651c:	6a1b      	ldr	r3, [r3, #32]
2000651e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20006520:	687b      	ldr	r3, [r7, #4]
20006522:	685b      	ldr	r3, [r3, #4]
20006524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
20006526:	687b      	ldr	r3, [r7, #4]
20006528:	69db      	ldr	r3, [r3, #28]
2000652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
2000652c:	68fb      	ldr	r3, [r7, #12]
2000652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
20006532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
20006534:	68fb      	ldr	r3, [r7, #12]
20006536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000653a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
2000653c:	683b      	ldr	r3, [r7, #0]
2000653e:	681b      	ldr	r3, [r3, #0]
20006540:	021b      	lsls	r3, r3, #8
20006542:	68fa      	ldr	r2, [r7, #12]
20006544:	4313      	orrs	r3, r2
20006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
20006548:	693b      	ldr	r3, [r7, #16]
2000654a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
2000654e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
20006550:	683b      	ldr	r3, [r7, #0]
20006552:	689b      	ldr	r3, [r3, #8]
20006554:	031b      	lsls	r3, r3, #12
20006556:	693a      	ldr	r2, [r7, #16]
20006558:	4313      	orrs	r3, r2
2000655a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
2000655c:	687b      	ldr	r3, [r7, #4]
2000655e:	4a10      	ldr	r2, [pc, #64]	; (200065a0 <TIM_OC4_SetConfig+0x9c>)
20006560:	4293      	cmp	r3, r2
20006562:	d109      	bne.n	20006578 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
20006564:	697b      	ldr	r3, [r7, #20]
20006566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
2000656a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
2000656c:	683b      	ldr	r3, [r7, #0]
2000656e:	695b      	ldr	r3, [r3, #20]
20006570:	019b      	lsls	r3, r3, #6
20006572:	697a      	ldr	r2, [r7, #20]
20006574:	4313      	orrs	r3, r2
20006576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20006578:	687b      	ldr	r3, [r7, #4]
2000657a:	697a      	ldr	r2, [r7, #20]
2000657c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
2000657e:	687b      	ldr	r3, [r7, #4]
20006580:	68fa      	ldr	r2, [r7, #12]
20006582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
20006584:	683b      	ldr	r3, [r7, #0]
20006586:	685a      	ldr	r2, [r3, #4]
20006588:	687b      	ldr	r3, [r7, #4]
2000658a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
2000658c:	687b      	ldr	r3, [r7, #4]
2000658e:	693a      	ldr	r2, [r7, #16]
20006590:	621a      	str	r2, [r3, #32]
}
20006592:	bf00      	nop
20006594:	371c      	adds	r7, #28
20006596:	46bd      	mov	sp, r7
20006598:	f85d 7b04 	ldr.w	r7, [sp], #4
2000659c:	4770      	bx	lr
2000659e:	bf00      	nop
200065a0:	40010000 	.word	0x40010000

200065a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
200065a4:	b480      	push	{r7}
200065a6:	b087      	sub	sp, #28
200065a8:	af00      	add	r7, sp, #0
200065aa:	60f8      	str	r0, [r7, #12]
200065ac:	60b9      	str	r1, [r7, #8]
200065ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
200065b0:	68bb      	ldr	r3, [r7, #8]
200065b2:	f003 031f 	and.w	r3, r3, #31
200065b6:	2201      	movs	r2, #1
200065b8:	fa02 f303 	lsl.w	r3, r2, r3
200065bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
200065be:	68fb      	ldr	r3, [r7, #12]
200065c0:	6a1a      	ldr	r2, [r3, #32]
200065c2:	697b      	ldr	r3, [r7, #20]
200065c4:	43db      	mvns	r3, r3
200065c6:	401a      	ands	r2, r3
200065c8:	68fb      	ldr	r3, [r7, #12]
200065ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
200065cc:	68fb      	ldr	r3, [r7, #12]
200065ce:	6a1a      	ldr	r2, [r3, #32]
200065d0:	68bb      	ldr	r3, [r7, #8]
200065d2:	f003 031f 	and.w	r3, r3, #31
200065d6:	6879      	ldr	r1, [r7, #4]
200065d8:	fa01 f303 	lsl.w	r3, r1, r3
200065dc:	431a      	orrs	r2, r3
200065de:	68fb      	ldr	r3, [r7, #12]
200065e0:	621a      	str	r2, [r3, #32]
}
200065e2:	bf00      	nop
200065e4:	371c      	adds	r7, #28
200065e6:	46bd      	mov	sp, r7
200065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
200065ec:	4770      	bx	lr
	...

200065f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
200065f0:	b480      	push	{r7}
200065f2:	b085      	sub	sp, #20
200065f4:	af00      	add	r7, sp, #0
200065f6:	6078      	str	r0, [r7, #4]
200065f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
200065fa:	687b      	ldr	r3, [r7, #4]
200065fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20006600:	2b01      	cmp	r3, #1
20006602:	d101      	bne.n	20006608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
20006604:	2302      	movs	r3, #2
20006606:	e050      	b.n	200066aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
20006608:	687b      	ldr	r3, [r7, #4]
2000660a:	2201      	movs	r2, #1
2000660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
20006610:	687b      	ldr	r3, [r7, #4]
20006612:	2202      	movs	r2, #2
20006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
20006618:	687b      	ldr	r3, [r7, #4]
2000661a:	681b      	ldr	r3, [r3, #0]
2000661c:	685b      	ldr	r3, [r3, #4]
2000661e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
20006620:	687b      	ldr	r3, [r7, #4]
20006622:	681b      	ldr	r3, [r3, #0]
20006624:	689b      	ldr	r3, [r3, #8]
20006626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
20006628:	68fb      	ldr	r3, [r7, #12]
2000662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2000662e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
20006630:	683b      	ldr	r3, [r7, #0]
20006632:	681b      	ldr	r3, [r3, #0]
20006634:	68fa      	ldr	r2, [r7, #12]
20006636:	4313      	orrs	r3, r2
20006638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
2000663a:	687b      	ldr	r3, [r7, #4]
2000663c:	681b      	ldr	r3, [r3, #0]
2000663e:	68fa      	ldr	r2, [r7, #12]
20006640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
20006642:	687b      	ldr	r3, [r7, #4]
20006644:	681b      	ldr	r3, [r3, #0]
20006646:	4a1c      	ldr	r2, [pc, #112]	; (200066b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
20006648:	4293      	cmp	r3, r2
2000664a:	d018      	beq.n	2000667e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
2000664c:	687b      	ldr	r3, [r7, #4]
2000664e:	681b      	ldr	r3, [r3, #0]
20006650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20006654:	d013      	beq.n	2000667e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20006656:	687b      	ldr	r3, [r7, #4]
20006658:	681b      	ldr	r3, [r3, #0]
2000665a:	4a18      	ldr	r2, [pc, #96]	; (200066bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
2000665c:	4293      	cmp	r3, r2
2000665e:	d00e      	beq.n	2000667e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20006660:	687b      	ldr	r3, [r7, #4]
20006662:	681b      	ldr	r3, [r3, #0]
20006664:	4a16      	ldr	r2, [pc, #88]	; (200066c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
20006666:	4293      	cmp	r3, r2
20006668:	d009      	beq.n	2000667e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
2000666a:	687b      	ldr	r3, [r7, #4]
2000666c:	681b      	ldr	r3, [r3, #0]
2000666e:	4a15      	ldr	r2, [pc, #84]	; (200066c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
20006670:	4293      	cmp	r3, r2
20006672:	d004      	beq.n	2000667e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20006674:	687b      	ldr	r3, [r7, #4]
20006676:	681b      	ldr	r3, [r3, #0]
20006678:	4a13      	ldr	r2, [pc, #76]	; (200066c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
2000667a:	4293      	cmp	r3, r2
2000667c:	d10c      	bne.n	20006698 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
2000667e:	68bb      	ldr	r3, [r7, #8]
20006680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
20006684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
20006686:	683b      	ldr	r3, [r7, #0]
20006688:	685b      	ldr	r3, [r3, #4]
2000668a:	68ba      	ldr	r2, [r7, #8]
2000668c:	4313      	orrs	r3, r2
2000668e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
20006690:	687b      	ldr	r3, [r7, #4]
20006692:	681b      	ldr	r3, [r3, #0]
20006694:	68ba      	ldr	r2, [r7, #8]
20006696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
20006698:	687b      	ldr	r3, [r7, #4]
2000669a:	2201      	movs	r2, #1
2000669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
200066a0:	687b      	ldr	r3, [r7, #4]
200066a2:	2200      	movs	r2, #0
200066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
200066a8:	2300      	movs	r3, #0
}
200066aa:	4618      	mov	r0, r3
200066ac:	3714      	adds	r7, #20
200066ae:	46bd      	mov	sp, r7
200066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200066b4:	4770      	bx	lr
200066b6:	bf00      	nop
200066b8:	40010000 	.word	0x40010000
200066bc:	40000400 	.word	0x40000400
200066c0:	40000800 	.word	0x40000800
200066c4:	40000c00 	.word	0x40000c00
200066c8:	40014000 	.word	0x40014000

200066cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
200066cc:	b480      	push	{r7}
200066ce:	b083      	sub	sp, #12
200066d0:	af00      	add	r7, sp, #0
200066d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
200066d4:	bf00      	nop
200066d6:	370c      	adds	r7, #12
200066d8:	46bd      	mov	sp, r7
200066da:	f85d 7b04 	ldr.w	r7, [sp], #4
200066de:	4770      	bx	lr

200066e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
200066e0:	b480      	push	{r7}
200066e2:	b083      	sub	sp, #12
200066e4:	af00      	add	r7, sp, #0
200066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
200066e8:	bf00      	nop
200066ea:	370c      	adds	r7, #12
200066ec:	46bd      	mov	sp, r7
200066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200066f2:	4770      	bx	lr

200066f4 <__errno>:
200066f4:	4b01      	ldr	r3, [pc, #4]	; (200066fc <__errno+0x8>)
200066f6:	6818      	ldr	r0, [r3, #0]
200066f8:	4770      	bx	lr
200066fa:	bf00      	nop
200066fc:	20011938 	.word	0x20011938

20006700 <__libc_init_array>:
20006700:	b570      	push	{r4, r5, r6, lr}
20006702:	4d0d      	ldr	r5, [pc, #52]	; (20006738 <__libc_init_array+0x38>)
20006704:	4c0d      	ldr	r4, [pc, #52]	; (2000673c <__libc_init_array+0x3c>)
20006706:	1b64      	subs	r4, r4, r5
20006708:	10a4      	asrs	r4, r4, #2
2000670a:	2600      	movs	r6, #0
2000670c:	42a6      	cmp	r6, r4
2000670e:	d109      	bne.n	20006724 <__libc_init_array+0x24>
20006710:	4d0b      	ldr	r5, [pc, #44]	; (20006740 <__libc_init_array+0x40>)
20006712:	4c0c      	ldr	r4, [pc, #48]	; (20006744 <__libc_init_array+0x44>)
20006714:	f000 fc8e 	bl	20007034 <_init>
20006718:	1b64      	subs	r4, r4, r5
2000671a:	10a4      	asrs	r4, r4, #2
2000671c:	2600      	movs	r6, #0
2000671e:	42a6      	cmp	r6, r4
20006720:	d105      	bne.n	2000672e <__libc_init_array+0x2e>
20006722:	bd70      	pop	{r4, r5, r6, pc}
20006724:	f855 3b04 	ldr.w	r3, [r5], #4
20006728:	4798      	blx	r3
2000672a:	3601      	adds	r6, #1
2000672c:	e7ee      	b.n	2000670c <__libc_init_array+0xc>
2000672e:	f855 3b04 	ldr.w	r3, [r5], #4
20006732:	4798      	blx	r3
20006734:	3601      	adds	r6, #1
20006736:	e7f2      	b.n	2000671e <__libc_init_array+0x1e>
20006738:	200118f4 	.word	0x200118f4
2000673c:	200118f4 	.word	0x200118f4
20006740:	200118f4 	.word	0x200118f4
20006744:	200118f8 	.word	0x200118f8

20006748 <memset>:
20006748:	4402      	add	r2, r0
2000674a:	4603      	mov	r3, r0
2000674c:	4293      	cmp	r3, r2
2000674e:	d100      	bne.n	20006752 <memset+0xa>
20006750:	4770      	bx	lr
20006752:	f803 1b01 	strb.w	r1, [r3], #1
20006756:	e7f9      	b.n	2000674c <memset+0x4>

20006758 <siprintf>:
20006758:	b40e      	push	{r1, r2, r3}
2000675a:	b500      	push	{lr}
2000675c:	b09c      	sub	sp, #112	; 0x70
2000675e:	ab1d      	add	r3, sp, #116	; 0x74
20006760:	9002      	str	r0, [sp, #8]
20006762:	9006      	str	r0, [sp, #24]
20006764:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
20006768:	4809      	ldr	r0, [pc, #36]	; (20006790 <siprintf+0x38>)
2000676a:	9107      	str	r1, [sp, #28]
2000676c:	9104      	str	r1, [sp, #16]
2000676e:	4909      	ldr	r1, [pc, #36]	; (20006794 <siprintf+0x3c>)
20006770:	f853 2b04 	ldr.w	r2, [r3], #4
20006774:	9105      	str	r1, [sp, #20]
20006776:	6800      	ldr	r0, [r0, #0]
20006778:	9301      	str	r3, [sp, #4]
2000677a:	a902      	add	r1, sp, #8
2000677c:	f000 f868 	bl	20006850 <_svfiprintf_r>
20006780:	9b02      	ldr	r3, [sp, #8]
20006782:	2200      	movs	r2, #0
20006784:	701a      	strb	r2, [r3, #0]
20006786:	b01c      	add	sp, #112	; 0x70
20006788:	f85d eb04 	ldr.w	lr, [sp], #4
2000678c:	b003      	add	sp, #12
2000678e:	4770      	bx	lr
20006790:	20011938 	.word	0x20011938
20006794:	ffff0208 	.word	0xffff0208

20006798 <__ssputs_r>:
20006798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000679c:	688e      	ldr	r6, [r1, #8]
2000679e:	429e      	cmp	r6, r3
200067a0:	4682      	mov	sl, r0
200067a2:	460c      	mov	r4, r1
200067a4:	4690      	mov	r8, r2
200067a6:	461f      	mov	r7, r3
200067a8:	d838      	bhi.n	2000681c <__ssputs_r+0x84>
200067aa:	898a      	ldrh	r2, [r1, #12]
200067ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
200067b0:	d032      	beq.n	20006818 <__ssputs_r+0x80>
200067b2:	6825      	ldr	r5, [r4, #0]
200067b4:	6909      	ldr	r1, [r1, #16]
200067b6:	eba5 0901 	sub.w	r9, r5, r1
200067ba:	6965      	ldr	r5, [r4, #20]
200067bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
200067c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
200067c4:	3301      	adds	r3, #1
200067c6:	444b      	add	r3, r9
200067c8:	106d      	asrs	r5, r5, #1
200067ca:	429d      	cmp	r5, r3
200067cc:	bf38      	it	cc
200067ce:	461d      	movcc	r5, r3
200067d0:	0553      	lsls	r3, r2, #21
200067d2:	d531      	bpl.n	20006838 <__ssputs_r+0xa0>
200067d4:	4629      	mov	r1, r5
200067d6:	f000 fb63 	bl	20006ea0 <_malloc_r>
200067da:	4606      	mov	r6, r0
200067dc:	b950      	cbnz	r0, 200067f4 <__ssputs_r+0x5c>
200067de:	230c      	movs	r3, #12
200067e0:	f8ca 3000 	str.w	r3, [sl]
200067e4:	89a3      	ldrh	r3, [r4, #12]
200067e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
200067ea:	81a3      	strh	r3, [r4, #12]
200067ec:	f04f 30ff 	mov.w	r0, #4294967295
200067f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200067f4:	6921      	ldr	r1, [r4, #16]
200067f6:	464a      	mov	r2, r9
200067f8:	f000 fabe 	bl	20006d78 <memcpy>
200067fc:	89a3      	ldrh	r3, [r4, #12]
200067fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
20006802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20006806:	81a3      	strh	r3, [r4, #12]
20006808:	6126      	str	r6, [r4, #16]
2000680a:	6165      	str	r5, [r4, #20]
2000680c:	444e      	add	r6, r9
2000680e:	eba5 0509 	sub.w	r5, r5, r9
20006812:	6026      	str	r6, [r4, #0]
20006814:	60a5      	str	r5, [r4, #8]
20006816:	463e      	mov	r6, r7
20006818:	42be      	cmp	r6, r7
2000681a:	d900      	bls.n	2000681e <__ssputs_r+0x86>
2000681c:	463e      	mov	r6, r7
2000681e:	6820      	ldr	r0, [r4, #0]
20006820:	4632      	mov	r2, r6
20006822:	4641      	mov	r1, r8
20006824:	f000 fab6 	bl	20006d94 <memmove>
20006828:	68a3      	ldr	r3, [r4, #8]
2000682a:	1b9b      	subs	r3, r3, r6
2000682c:	60a3      	str	r3, [r4, #8]
2000682e:	6823      	ldr	r3, [r4, #0]
20006830:	4433      	add	r3, r6
20006832:	6023      	str	r3, [r4, #0]
20006834:	2000      	movs	r0, #0
20006836:	e7db      	b.n	200067f0 <__ssputs_r+0x58>
20006838:	462a      	mov	r2, r5
2000683a:	f000 fba5 	bl	20006f88 <_realloc_r>
2000683e:	4606      	mov	r6, r0
20006840:	2800      	cmp	r0, #0
20006842:	d1e1      	bne.n	20006808 <__ssputs_r+0x70>
20006844:	6921      	ldr	r1, [r4, #16]
20006846:	4650      	mov	r0, sl
20006848:	f000 fabe 	bl	20006dc8 <_free_r>
2000684c:	e7c7      	b.n	200067de <__ssputs_r+0x46>
	...

20006850 <_svfiprintf_r>:
20006850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20006854:	4698      	mov	r8, r3
20006856:	898b      	ldrh	r3, [r1, #12]
20006858:	061b      	lsls	r3, r3, #24
2000685a:	b09d      	sub	sp, #116	; 0x74
2000685c:	4607      	mov	r7, r0
2000685e:	460d      	mov	r5, r1
20006860:	4614      	mov	r4, r2
20006862:	d50e      	bpl.n	20006882 <_svfiprintf_r+0x32>
20006864:	690b      	ldr	r3, [r1, #16]
20006866:	b963      	cbnz	r3, 20006882 <_svfiprintf_r+0x32>
20006868:	2140      	movs	r1, #64	; 0x40
2000686a:	f000 fb19 	bl	20006ea0 <_malloc_r>
2000686e:	6028      	str	r0, [r5, #0]
20006870:	6128      	str	r0, [r5, #16]
20006872:	b920      	cbnz	r0, 2000687e <_svfiprintf_r+0x2e>
20006874:	230c      	movs	r3, #12
20006876:	603b      	str	r3, [r7, #0]
20006878:	f04f 30ff 	mov.w	r0, #4294967295
2000687c:	e0d1      	b.n	20006a22 <_svfiprintf_r+0x1d2>
2000687e:	2340      	movs	r3, #64	; 0x40
20006880:	616b      	str	r3, [r5, #20]
20006882:	2300      	movs	r3, #0
20006884:	9309      	str	r3, [sp, #36]	; 0x24
20006886:	2320      	movs	r3, #32
20006888:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
2000688c:	f8cd 800c 	str.w	r8, [sp, #12]
20006890:	2330      	movs	r3, #48	; 0x30
20006892:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 20006a3c <_svfiprintf_r+0x1ec>
20006896:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
2000689a:	f04f 0901 	mov.w	r9, #1
2000689e:	4623      	mov	r3, r4
200068a0:	469a      	mov	sl, r3
200068a2:	f813 2b01 	ldrb.w	r2, [r3], #1
200068a6:	b10a      	cbz	r2, 200068ac <_svfiprintf_r+0x5c>
200068a8:	2a25      	cmp	r2, #37	; 0x25
200068aa:	d1f9      	bne.n	200068a0 <_svfiprintf_r+0x50>
200068ac:	ebba 0b04 	subs.w	fp, sl, r4
200068b0:	d00b      	beq.n	200068ca <_svfiprintf_r+0x7a>
200068b2:	465b      	mov	r3, fp
200068b4:	4622      	mov	r2, r4
200068b6:	4629      	mov	r1, r5
200068b8:	4638      	mov	r0, r7
200068ba:	f7ff ff6d 	bl	20006798 <__ssputs_r>
200068be:	3001      	adds	r0, #1
200068c0:	f000 80aa 	beq.w	20006a18 <_svfiprintf_r+0x1c8>
200068c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
200068c6:	445a      	add	r2, fp
200068c8:	9209      	str	r2, [sp, #36]	; 0x24
200068ca:	f89a 3000 	ldrb.w	r3, [sl]
200068ce:	2b00      	cmp	r3, #0
200068d0:	f000 80a2 	beq.w	20006a18 <_svfiprintf_r+0x1c8>
200068d4:	2300      	movs	r3, #0
200068d6:	f04f 32ff 	mov.w	r2, #4294967295
200068da:	e9cd 2305 	strd	r2, r3, [sp, #20]
200068de:	f10a 0a01 	add.w	sl, sl, #1
200068e2:	9304      	str	r3, [sp, #16]
200068e4:	9307      	str	r3, [sp, #28]
200068e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
200068ea:	931a      	str	r3, [sp, #104]	; 0x68
200068ec:	4654      	mov	r4, sl
200068ee:	2205      	movs	r2, #5
200068f0:	f814 1b01 	ldrb.w	r1, [r4], #1
200068f4:	4851      	ldr	r0, [pc, #324]	; (20006a3c <_svfiprintf_r+0x1ec>)
200068f6:	f7f9 fc73 	bl	200001e0 <memchr>
200068fa:	9a04      	ldr	r2, [sp, #16]
200068fc:	b9d8      	cbnz	r0, 20006936 <_svfiprintf_r+0xe6>
200068fe:	06d0      	lsls	r0, r2, #27
20006900:	bf44      	itt	mi
20006902:	2320      	movmi	r3, #32
20006904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
20006908:	0711      	lsls	r1, r2, #28
2000690a:	bf44      	itt	mi
2000690c:	232b      	movmi	r3, #43	; 0x2b
2000690e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
20006912:	f89a 3000 	ldrb.w	r3, [sl]
20006916:	2b2a      	cmp	r3, #42	; 0x2a
20006918:	d015      	beq.n	20006946 <_svfiprintf_r+0xf6>
2000691a:	9a07      	ldr	r2, [sp, #28]
2000691c:	4654      	mov	r4, sl
2000691e:	2000      	movs	r0, #0
20006920:	f04f 0c0a 	mov.w	ip, #10
20006924:	4621      	mov	r1, r4
20006926:	f811 3b01 	ldrb.w	r3, [r1], #1
2000692a:	3b30      	subs	r3, #48	; 0x30
2000692c:	2b09      	cmp	r3, #9
2000692e:	d94e      	bls.n	200069ce <_svfiprintf_r+0x17e>
20006930:	b1b0      	cbz	r0, 20006960 <_svfiprintf_r+0x110>
20006932:	9207      	str	r2, [sp, #28]
20006934:	e014      	b.n	20006960 <_svfiprintf_r+0x110>
20006936:	eba0 0308 	sub.w	r3, r0, r8
2000693a:	fa09 f303 	lsl.w	r3, r9, r3
2000693e:	4313      	orrs	r3, r2
20006940:	9304      	str	r3, [sp, #16]
20006942:	46a2      	mov	sl, r4
20006944:	e7d2      	b.n	200068ec <_svfiprintf_r+0x9c>
20006946:	9b03      	ldr	r3, [sp, #12]
20006948:	1d19      	adds	r1, r3, #4
2000694a:	681b      	ldr	r3, [r3, #0]
2000694c:	9103      	str	r1, [sp, #12]
2000694e:	2b00      	cmp	r3, #0
20006950:	bfbb      	ittet	lt
20006952:	425b      	neglt	r3, r3
20006954:	f042 0202 	orrlt.w	r2, r2, #2
20006958:	9307      	strge	r3, [sp, #28]
2000695a:	9307      	strlt	r3, [sp, #28]
2000695c:	bfb8      	it	lt
2000695e:	9204      	strlt	r2, [sp, #16]
20006960:	7823      	ldrb	r3, [r4, #0]
20006962:	2b2e      	cmp	r3, #46	; 0x2e
20006964:	d10c      	bne.n	20006980 <_svfiprintf_r+0x130>
20006966:	7863      	ldrb	r3, [r4, #1]
20006968:	2b2a      	cmp	r3, #42	; 0x2a
2000696a:	d135      	bne.n	200069d8 <_svfiprintf_r+0x188>
2000696c:	9b03      	ldr	r3, [sp, #12]
2000696e:	1d1a      	adds	r2, r3, #4
20006970:	681b      	ldr	r3, [r3, #0]
20006972:	9203      	str	r2, [sp, #12]
20006974:	2b00      	cmp	r3, #0
20006976:	bfb8      	it	lt
20006978:	f04f 33ff 	movlt.w	r3, #4294967295
2000697c:	3402      	adds	r4, #2
2000697e:	9305      	str	r3, [sp, #20]
20006980:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 20006a4c <_svfiprintf_r+0x1fc>
20006984:	7821      	ldrb	r1, [r4, #0]
20006986:	2203      	movs	r2, #3
20006988:	4650      	mov	r0, sl
2000698a:	f7f9 fc29 	bl	200001e0 <memchr>
2000698e:	b140      	cbz	r0, 200069a2 <_svfiprintf_r+0x152>
20006990:	2340      	movs	r3, #64	; 0x40
20006992:	eba0 000a 	sub.w	r0, r0, sl
20006996:	fa03 f000 	lsl.w	r0, r3, r0
2000699a:	9b04      	ldr	r3, [sp, #16]
2000699c:	4303      	orrs	r3, r0
2000699e:	3401      	adds	r4, #1
200069a0:	9304      	str	r3, [sp, #16]
200069a2:	f814 1b01 	ldrb.w	r1, [r4], #1
200069a6:	4826      	ldr	r0, [pc, #152]	; (20006a40 <_svfiprintf_r+0x1f0>)
200069a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
200069ac:	2206      	movs	r2, #6
200069ae:	f7f9 fc17 	bl	200001e0 <memchr>
200069b2:	2800      	cmp	r0, #0
200069b4:	d038      	beq.n	20006a28 <_svfiprintf_r+0x1d8>
200069b6:	4b23      	ldr	r3, [pc, #140]	; (20006a44 <_svfiprintf_r+0x1f4>)
200069b8:	bb1b      	cbnz	r3, 20006a02 <_svfiprintf_r+0x1b2>
200069ba:	9b03      	ldr	r3, [sp, #12]
200069bc:	3307      	adds	r3, #7
200069be:	f023 0307 	bic.w	r3, r3, #7
200069c2:	3308      	adds	r3, #8
200069c4:	9303      	str	r3, [sp, #12]
200069c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
200069c8:	4433      	add	r3, r6
200069ca:	9309      	str	r3, [sp, #36]	; 0x24
200069cc:	e767      	b.n	2000689e <_svfiprintf_r+0x4e>
200069ce:	fb0c 3202 	mla	r2, ip, r2, r3
200069d2:	460c      	mov	r4, r1
200069d4:	2001      	movs	r0, #1
200069d6:	e7a5      	b.n	20006924 <_svfiprintf_r+0xd4>
200069d8:	2300      	movs	r3, #0
200069da:	3401      	adds	r4, #1
200069dc:	9305      	str	r3, [sp, #20]
200069de:	4619      	mov	r1, r3
200069e0:	f04f 0c0a 	mov.w	ip, #10
200069e4:	4620      	mov	r0, r4
200069e6:	f810 2b01 	ldrb.w	r2, [r0], #1
200069ea:	3a30      	subs	r2, #48	; 0x30
200069ec:	2a09      	cmp	r2, #9
200069ee:	d903      	bls.n	200069f8 <_svfiprintf_r+0x1a8>
200069f0:	2b00      	cmp	r3, #0
200069f2:	d0c5      	beq.n	20006980 <_svfiprintf_r+0x130>
200069f4:	9105      	str	r1, [sp, #20]
200069f6:	e7c3      	b.n	20006980 <_svfiprintf_r+0x130>
200069f8:	fb0c 2101 	mla	r1, ip, r1, r2
200069fc:	4604      	mov	r4, r0
200069fe:	2301      	movs	r3, #1
20006a00:	e7f0      	b.n	200069e4 <_svfiprintf_r+0x194>
20006a02:	ab03      	add	r3, sp, #12
20006a04:	9300      	str	r3, [sp, #0]
20006a06:	462a      	mov	r2, r5
20006a08:	4b0f      	ldr	r3, [pc, #60]	; (20006a48 <_svfiprintf_r+0x1f8>)
20006a0a:	a904      	add	r1, sp, #16
20006a0c:	4638      	mov	r0, r7
20006a0e:	f3af 8000 	nop.w
20006a12:	1c42      	adds	r2, r0, #1
20006a14:	4606      	mov	r6, r0
20006a16:	d1d6      	bne.n	200069c6 <_svfiprintf_r+0x176>
20006a18:	89ab      	ldrh	r3, [r5, #12]
20006a1a:	065b      	lsls	r3, r3, #25
20006a1c:	f53f af2c 	bmi.w	20006878 <_svfiprintf_r+0x28>
20006a20:	9809      	ldr	r0, [sp, #36]	; 0x24
20006a22:	b01d      	add	sp, #116	; 0x74
20006a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20006a28:	ab03      	add	r3, sp, #12
20006a2a:	9300      	str	r3, [sp, #0]
20006a2c:	462a      	mov	r2, r5
20006a2e:	4b06      	ldr	r3, [pc, #24]	; (20006a48 <_svfiprintf_r+0x1f8>)
20006a30:	a904      	add	r1, sp, #16
20006a32:	4638      	mov	r0, r7
20006a34:	f000 f87a 	bl	20006b2c <_printf_i>
20006a38:	e7eb      	b.n	20006a12 <_svfiprintf_r+0x1c2>
20006a3a:	bf00      	nop
20006a3c:	200118b8 	.word	0x200118b8
20006a40:	200118c2 	.word	0x200118c2
20006a44:	00000000 	.word	0x00000000
20006a48:	20006799 	.word	0x20006799
20006a4c:	200118be 	.word	0x200118be

20006a50 <_printf_common>:
20006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20006a54:	4616      	mov	r6, r2
20006a56:	4699      	mov	r9, r3
20006a58:	688a      	ldr	r2, [r1, #8]
20006a5a:	690b      	ldr	r3, [r1, #16]
20006a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
20006a60:	4293      	cmp	r3, r2
20006a62:	bfb8      	it	lt
20006a64:	4613      	movlt	r3, r2
20006a66:	6033      	str	r3, [r6, #0]
20006a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
20006a6c:	4607      	mov	r7, r0
20006a6e:	460c      	mov	r4, r1
20006a70:	b10a      	cbz	r2, 20006a76 <_printf_common+0x26>
20006a72:	3301      	adds	r3, #1
20006a74:	6033      	str	r3, [r6, #0]
20006a76:	6823      	ldr	r3, [r4, #0]
20006a78:	0699      	lsls	r1, r3, #26
20006a7a:	bf42      	ittt	mi
20006a7c:	6833      	ldrmi	r3, [r6, #0]
20006a7e:	3302      	addmi	r3, #2
20006a80:	6033      	strmi	r3, [r6, #0]
20006a82:	6825      	ldr	r5, [r4, #0]
20006a84:	f015 0506 	ands.w	r5, r5, #6
20006a88:	d106      	bne.n	20006a98 <_printf_common+0x48>
20006a8a:	f104 0a19 	add.w	sl, r4, #25
20006a8e:	68e3      	ldr	r3, [r4, #12]
20006a90:	6832      	ldr	r2, [r6, #0]
20006a92:	1a9b      	subs	r3, r3, r2
20006a94:	42ab      	cmp	r3, r5
20006a96:	dc26      	bgt.n	20006ae6 <_printf_common+0x96>
20006a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
20006a9c:	1e13      	subs	r3, r2, #0
20006a9e:	6822      	ldr	r2, [r4, #0]
20006aa0:	bf18      	it	ne
20006aa2:	2301      	movne	r3, #1
20006aa4:	0692      	lsls	r2, r2, #26
20006aa6:	d42b      	bmi.n	20006b00 <_printf_common+0xb0>
20006aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
20006aac:	4649      	mov	r1, r9
20006aae:	4638      	mov	r0, r7
20006ab0:	47c0      	blx	r8
20006ab2:	3001      	adds	r0, #1
20006ab4:	d01e      	beq.n	20006af4 <_printf_common+0xa4>
20006ab6:	6823      	ldr	r3, [r4, #0]
20006ab8:	68e5      	ldr	r5, [r4, #12]
20006aba:	6832      	ldr	r2, [r6, #0]
20006abc:	f003 0306 	and.w	r3, r3, #6
20006ac0:	2b04      	cmp	r3, #4
20006ac2:	bf08      	it	eq
20006ac4:	1aad      	subeq	r5, r5, r2
20006ac6:	68a3      	ldr	r3, [r4, #8]
20006ac8:	6922      	ldr	r2, [r4, #16]
20006aca:	bf0c      	ite	eq
20006acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
20006ad0:	2500      	movne	r5, #0
20006ad2:	4293      	cmp	r3, r2
20006ad4:	bfc4      	itt	gt
20006ad6:	1a9b      	subgt	r3, r3, r2
20006ad8:	18ed      	addgt	r5, r5, r3
20006ada:	2600      	movs	r6, #0
20006adc:	341a      	adds	r4, #26
20006ade:	42b5      	cmp	r5, r6
20006ae0:	d11a      	bne.n	20006b18 <_printf_common+0xc8>
20006ae2:	2000      	movs	r0, #0
20006ae4:	e008      	b.n	20006af8 <_printf_common+0xa8>
20006ae6:	2301      	movs	r3, #1
20006ae8:	4652      	mov	r2, sl
20006aea:	4649      	mov	r1, r9
20006aec:	4638      	mov	r0, r7
20006aee:	47c0      	blx	r8
20006af0:	3001      	adds	r0, #1
20006af2:	d103      	bne.n	20006afc <_printf_common+0xac>
20006af4:	f04f 30ff 	mov.w	r0, #4294967295
20006af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20006afc:	3501      	adds	r5, #1
20006afe:	e7c6      	b.n	20006a8e <_printf_common+0x3e>
20006b00:	18e1      	adds	r1, r4, r3
20006b02:	1c5a      	adds	r2, r3, #1
20006b04:	2030      	movs	r0, #48	; 0x30
20006b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
20006b0a:	4422      	add	r2, r4
20006b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
20006b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
20006b14:	3302      	adds	r3, #2
20006b16:	e7c7      	b.n	20006aa8 <_printf_common+0x58>
20006b18:	2301      	movs	r3, #1
20006b1a:	4622      	mov	r2, r4
20006b1c:	4649      	mov	r1, r9
20006b1e:	4638      	mov	r0, r7
20006b20:	47c0      	blx	r8
20006b22:	3001      	adds	r0, #1
20006b24:	d0e6      	beq.n	20006af4 <_printf_common+0xa4>
20006b26:	3601      	adds	r6, #1
20006b28:	e7d9      	b.n	20006ade <_printf_common+0x8e>
	...

20006b2c <_printf_i>:
20006b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
20006b30:	7e0f      	ldrb	r7, [r1, #24]
20006b32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
20006b34:	2f78      	cmp	r7, #120	; 0x78
20006b36:	4691      	mov	r9, r2
20006b38:	4680      	mov	r8, r0
20006b3a:	460c      	mov	r4, r1
20006b3c:	469a      	mov	sl, r3
20006b3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
20006b42:	d807      	bhi.n	20006b54 <_printf_i+0x28>
20006b44:	2f62      	cmp	r7, #98	; 0x62
20006b46:	d80a      	bhi.n	20006b5e <_printf_i+0x32>
20006b48:	2f00      	cmp	r7, #0
20006b4a:	f000 80d8 	beq.w	20006cfe <_printf_i+0x1d2>
20006b4e:	2f58      	cmp	r7, #88	; 0x58
20006b50:	f000 80a3 	beq.w	20006c9a <_printf_i+0x16e>
20006b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
20006b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
20006b5c:	e03a      	b.n	20006bd4 <_printf_i+0xa8>
20006b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
20006b62:	2b15      	cmp	r3, #21
20006b64:	d8f6      	bhi.n	20006b54 <_printf_i+0x28>
20006b66:	a101      	add	r1, pc, #4	; (adr r1, 20006b6c <_printf_i+0x40>)
20006b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
20006b6c:	20006bc5 	.word	0x20006bc5
20006b70:	20006bd9 	.word	0x20006bd9
20006b74:	20006b55 	.word	0x20006b55
20006b78:	20006b55 	.word	0x20006b55
20006b7c:	20006b55 	.word	0x20006b55
20006b80:	20006b55 	.word	0x20006b55
20006b84:	20006bd9 	.word	0x20006bd9
20006b88:	20006b55 	.word	0x20006b55
20006b8c:	20006b55 	.word	0x20006b55
20006b90:	20006b55 	.word	0x20006b55
20006b94:	20006b55 	.word	0x20006b55
20006b98:	20006ce5 	.word	0x20006ce5
20006b9c:	20006c09 	.word	0x20006c09
20006ba0:	20006cc7 	.word	0x20006cc7
20006ba4:	20006b55 	.word	0x20006b55
20006ba8:	20006b55 	.word	0x20006b55
20006bac:	20006d07 	.word	0x20006d07
20006bb0:	20006b55 	.word	0x20006b55
20006bb4:	20006c09 	.word	0x20006c09
20006bb8:	20006b55 	.word	0x20006b55
20006bbc:	20006b55 	.word	0x20006b55
20006bc0:	20006ccf 	.word	0x20006ccf
20006bc4:	682b      	ldr	r3, [r5, #0]
20006bc6:	1d1a      	adds	r2, r3, #4
20006bc8:	681b      	ldr	r3, [r3, #0]
20006bca:	602a      	str	r2, [r5, #0]
20006bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
20006bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
20006bd4:	2301      	movs	r3, #1
20006bd6:	e0a3      	b.n	20006d20 <_printf_i+0x1f4>
20006bd8:	6820      	ldr	r0, [r4, #0]
20006bda:	6829      	ldr	r1, [r5, #0]
20006bdc:	0606      	lsls	r6, r0, #24
20006bde:	f101 0304 	add.w	r3, r1, #4
20006be2:	d50a      	bpl.n	20006bfa <_printf_i+0xce>
20006be4:	680e      	ldr	r6, [r1, #0]
20006be6:	602b      	str	r3, [r5, #0]
20006be8:	2e00      	cmp	r6, #0
20006bea:	da03      	bge.n	20006bf4 <_printf_i+0xc8>
20006bec:	232d      	movs	r3, #45	; 0x2d
20006bee:	4276      	negs	r6, r6
20006bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
20006bf4:	485e      	ldr	r0, [pc, #376]	; (20006d70 <_printf_i+0x244>)
20006bf6:	230a      	movs	r3, #10
20006bf8:	e019      	b.n	20006c2e <_printf_i+0x102>
20006bfa:	680e      	ldr	r6, [r1, #0]
20006bfc:	602b      	str	r3, [r5, #0]
20006bfe:	f010 0f40 	tst.w	r0, #64	; 0x40
20006c02:	bf18      	it	ne
20006c04:	b236      	sxthne	r6, r6
20006c06:	e7ef      	b.n	20006be8 <_printf_i+0xbc>
20006c08:	682b      	ldr	r3, [r5, #0]
20006c0a:	6820      	ldr	r0, [r4, #0]
20006c0c:	1d19      	adds	r1, r3, #4
20006c0e:	6029      	str	r1, [r5, #0]
20006c10:	0601      	lsls	r1, r0, #24
20006c12:	d501      	bpl.n	20006c18 <_printf_i+0xec>
20006c14:	681e      	ldr	r6, [r3, #0]
20006c16:	e002      	b.n	20006c1e <_printf_i+0xf2>
20006c18:	0646      	lsls	r6, r0, #25
20006c1a:	d5fb      	bpl.n	20006c14 <_printf_i+0xe8>
20006c1c:	881e      	ldrh	r6, [r3, #0]
20006c1e:	4854      	ldr	r0, [pc, #336]	; (20006d70 <_printf_i+0x244>)
20006c20:	2f6f      	cmp	r7, #111	; 0x6f
20006c22:	bf0c      	ite	eq
20006c24:	2308      	moveq	r3, #8
20006c26:	230a      	movne	r3, #10
20006c28:	2100      	movs	r1, #0
20006c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
20006c2e:	6865      	ldr	r5, [r4, #4]
20006c30:	60a5      	str	r5, [r4, #8]
20006c32:	2d00      	cmp	r5, #0
20006c34:	bfa2      	ittt	ge
20006c36:	6821      	ldrge	r1, [r4, #0]
20006c38:	f021 0104 	bicge.w	r1, r1, #4
20006c3c:	6021      	strge	r1, [r4, #0]
20006c3e:	b90e      	cbnz	r6, 20006c44 <_printf_i+0x118>
20006c40:	2d00      	cmp	r5, #0
20006c42:	d04d      	beq.n	20006ce0 <_printf_i+0x1b4>
20006c44:	4615      	mov	r5, r2
20006c46:	fbb6 f1f3 	udiv	r1, r6, r3
20006c4a:	fb03 6711 	mls	r7, r3, r1, r6
20006c4e:	5dc7      	ldrb	r7, [r0, r7]
20006c50:	f805 7d01 	strb.w	r7, [r5, #-1]!
20006c54:	4637      	mov	r7, r6
20006c56:	42bb      	cmp	r3, r7
20006c58:	460e      	mov	r6, r1
20006c5a:	d9f4      	bls.n	20006c46 <_printf_i+0x11a>
20006c5c:	2b08      	cmp	r3, #8
20006c5e:	d10b      	bne.n	20006c78 <_printf_i+0x14c>
20006c60:	6823      	ldr	r3, [r4, #0]
20006c62:	07de      	lsls	r6, r3, #31
20006c64:	d508      	bpl.n	20006c78 <_printf_i+0x14c>
20006c66:	6923      	ldr	r3, [r4, #16]
20006c68:	6861      	ldr	r1, [r4, #4]
20006c6a:	4299      	cmp	r1, r3
20006c6c:	bfde      	ittt	le
20006c6e:	2330      	movle	r3, #48	; 0x30
20006c70:	f805 3c01 	strble.w	r3, [r5, #-1]
20006c74:	f105 35ff 	addle.w	r5, r5, #4294967295
20006c78:	1b52      	subs	r2, r2, r5
20006c7a:	6122      	str	r2, [r4, #16]
20006c7c:	f8cd a000 	str.w	sl, [sp]
20006c80:	464b      	mov	r3, r9
20006c82:	aa03      	add	r2, sp, #12
20006c84:	4621      	mov	r1, r4
20006c86:	4640      	mov	r0, r8
20006c88:	f7ff fee2 	bl	20006a50 <_printf_common>
20006c8c:	3001      	adds	r0, #1
20006c8e:	d14c      	bne.n	20006d2a <_printf_i+0x1fe>
20006c90:	f04f 30ff 	mov.w	r0, #4294967295
20006c94:	b004      	add	sp, #16
20006c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20006c9a:	4835      	ldr	r0, [pc, #212]	; (20006d70 <_printf_i+0x244>)
20006c9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
20006ca0:	6829      	ldr	r1, [r5, #0]
20006ca2:	6823      	ldr	r3, [r4, #0]
20006ca4:	f851 6b04 	ldr.w	r6, [r1], #4
20006ca8:	6029      	str	r1, [r5, #0]
20006caa:	061d      	lsls	r5, r3, #24
20006cac:	d514      	bpl.n	20006cd8 <_printf_i+0x1ac>
20006cae:	07df      	lsls	r7, r3, #31
20006cb0:	bf44      	itt	mi
20006cb2:	f043 0320 	orrmi.w	r3, r3, #32
20006cb6:	6023      	strmi	r3, [r4, #0]
20006cb8:	b91e      	cbnz	r6, 20006cc2 <_printf_i+0x196>
20006cba:	6823      	ldr	r3, [r4, #0]
20006cbc:	f023 0320 	bic.w	r3, r3, #32
20006cc0:	6023      	str	r3, [r4, #0]
20006cc2:	2310      	movs	r3, #16
20006cc4:	e7b0      	b.n	20006c28 <_printf_i+0xfc>
20006cc6:	6823      	ldr	r3, [r4, #0]
20006cc8:	f043 0320 	orr.w	r3, r3, #32
20006ccc:	6023      	str	r3, [r4, #0]
20006cce:	2378      	movs	r3, #120	; 0x78
20006cd0:	4828      	ldr	r0, [pc, #160]	; (20006d74 <_printf_i+0x248>)
20006cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
20006cd6:	e7e3      	b.n	20006ca0 <_printf_i+0x174>
20006cd8:	0659      	lsls	r1, r3, #25
20006cda:	bf48      	it	mi
20006cdc:	b2b6      	uxthmi	r6, r6
20006cde:	e7e6      	b.n	20006cae <_printf_i+0x182>
20006ce0:	4615      	mov	r5, r2
20006ce2:	e7bb      	b.n	20006c5c <_printf_i+0x130>
20006ce4:	682b      	ldr	r3, [r5, #0]
20006ce6:	6826      	ldr	r6, [r4, #0]
20006ce8:	6961      	ldr	r1, [r4, #20]
20006cea:	1d18      	adds	r0, r3, #4
20006cec:	6028      	str	r0, [r5, #0]
20006cee:	0635      	lsls	r5, r6, #24
20006cf0:	681b      	ldr	r3, [r3, #0]
20006cf2:	d501      	bpl.n	20006cf8 <_printf_i+0x1cc>
20006cf4:	6019      	str	r1, [r3, #0]
20006cf6:	e002      	b.n	20006cfe <_printf_i+0x1d2>
20006cf8:	0670      	lsls	r0, r6, #25
20006cfa:	d5fb      	bpl.n	20006cf4 <_printf_i+0x1c8>
20006cfc:	8019      	strh	r1, [r3, #0]
20006cfe:	2300      	movs	r3, #0
20006d00:	6123      	str	r3, [r4, #16]
20006d02:	4615      	mov	r5, r2
20006d04:	e7ba      	b.n	20006c7c <_printf_i+0x150>
20006d06:	682b      	ldr	r3, [r5, #0]
20006d08:	1d1a      	adds	r2, r3, #4
20006d0a:	602a      	str	r2, [r5, #0]
20006d0c:	681d      	ldr	r5, [r3, #0]
20006d0e:	6862      	ldr	r2, [r4, #4]
20006d10:	2100      	movs	r1, #0
20006d12:	4628      	mov	r0, r5
20006d14:	f7f9 fa64 	bl	200001e0 <memchr>
20006d18:	b108      	cbz	r0, 20006d1e <_printf_i+0x1f2>
20006d1a:	1b40      	subs	r0, r0, r5
20006d1c:	6060      	str	r0, [r4, #4]
20006d1e:	6863      	ldr	r3, [r4, #4]
20006d20:	6123      	str	r3, [r4, #16]
20006d22:	2300      	movs	r3, #0
20006d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
20006d28:	e7a8      	b.n	20006c7c <_printf_i+0x150>
20006d2a:	6923      	ldr	r3, [r4, #16]
20006d2c:	462a      	mov	r2, r5
20006d2e:	4649      	mov	r1, r9
20006d30:	4640      	mov	r0, r8
20006d32:	47d0      	blx	sl
20006d34:	3001      	adds	r0, #1
20006d36:	d0ab      	beq.n	20006c90 <_printf_i+0x164>
20006d38:	6823      	ldr	r3, [r4, #0]
20006d3a:	079b      	lsls	r3, r3, #30
20006d3c:	d413      	bmi.n	20006d66 <_printf_i+0x23a>
20006d3e:	68e0      	ldr	r0, [r4, #12]
20006d40:	9b03      	ldr	r3, [sp, #12]
20006d42:	4298      	cmp	r0, r3
20006d44:	bfb8      	it	lt
20006d46:	4618      	movlt	r0, r3
20006d48:	e7a4      	b.n	20006c94 <_printf_i+0x168>
20006d4a:	2301      	movs	r3, #1
20006d4c:	4632      	mov	r2, r6
20006d4e:	4649      	mov	r1, r9
20006d50:	4640      	mov	r0, r8
20006d52:	47d0      	blx	sl
20006d54:	3001      	adds	r0, #1
20006d56:	d09b      	beq.n	20006c90 <_printf_i+0x164>
20006d58:	3501      	adds	r5, #1
20006d5a:	68e3      	ldr	r3, [r4, #12]
20006d5c:	9903      	ldr	r1, [sp, #12]
20006d5e:	1a5b      	subs	r3, r3, r1
20006d60:	42ab      	cmp	r3, r5
20006d62:	dcf2      	bgt.n	20006d4a <_printf_i+0x21e>
20006d64:	e7eb      	b.n	20006d3e <_printf_i+0x212>
20006d66:	2500      	movs	r5, #0
20006d68:	f104 0619 	add.w	r6, r4, #25
20006d6c:	e7f5      	b.n	20006d5a <_printf_i+0x22e>
20006d6e:	bf00      	nop
20006d70:	200118c9 	.word	0x200118c9
20006d74:	200118da 	.word	0x200118da

20006d78 <memcpy>:
20006d78:	440a      	add	r2, r1
20006d7a:	4291      	cmp	r1, r2
20006d7c:	f100 33ff 	add.w	r3, r0, #4294967295
20006d80:	d100      	bne.n	20006d84 <memcpy+0xc>
20006d82:	4770      	bx	lr
20006d84:	b510      	push	{r4, lr}
20006d86:	f811 4b01 	ldrb.w	r4, [r1], #1
20006d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
20006d8e:	4291      	cmp	r1, r2
20006d90:	d1f9      	bne.n	20006d86 <memcpy+0xe>
20006d92:	bd10      	pop	{r4, pc}

20006d94 <memmove>:
20006d94:	4288      	cmp	r0, r1
20006d96:	b510      	push	{r4, lr}
20006d98:	eb01 0402 	add.w	r4, r1, r2
20006d9c:	d902      	bls.n	20006da4 <memmove+0x10>
20006d9e:	4284      	cmp	r4, r0
20006da0:	4623      	mov	r3, r4
20006da2:	d807      	bhi.n	20006db4 <memmove+0x20>
20006da4:	1e43      	subs	r3, r0, #1
20006da6:	42a1      	cmp	r1, r4
20006da8:	d008      	beq.n	20006dbc <memmove+0x28>
20006daa:	f811 2b01 	ldrb.w	r2, [r1], #1
20006dae:	f803 2f01 	strb.w	r2, [r3, #1]!
20006db2:	e7f8      	b.n	20006da6 <memmove+0x12>
20006db4:	4402      	add	r2, r0
20006db6:	4601      	mov	r1, r0
20006db8:	428a      	cmp	r2, r1
20006dba:	d100      	bne.n	20006dbe <memmove+0x2a>
20006dbc:	bd10      	pop	{r4, pc}
20006dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
20006dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
20006dc6:	e7f7      	b.n	20006db8 <memmove+0x24>

20006dc8 <_free_r>:
20006dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
20006dca:	2900      	cmp	r1, #0
20006dcc:	d044      	beq.n	20006e58 <_free_r+0x90>
20006dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
20006dd2:	9001      	str	r0, [sp, #4]
20006dd4:	2b00      	cmp	r3, #0
20006dd6:	f1a1 0404 	sub.w	r4, r1, #4
20006dda:	bfb8      	it	lt
20006ddc:	18e4      	addlt	r4, r4, r3
20006dde:	f000 f913 	bl	20007008 <__malloc_lock>
20006de2:	4a1e      	ldr	r2, [pc, #120]	; (20006e5c <_free_r+0x94>)
20006de4:	9801      	ldr	r0, [sp, #4]
20006de6:	6813      	ldr	r3, [r2, #0]
20006de8:	b933      	cbnz	r3, 20006df8 <_free_r+0x30>
20006dea:	6063      	str	r3, [r4, #4]
20006dec:	6014      	str	r4, [r2, #0]
20006dee:	b003      	add	sp, #12
20006df0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
20006df4:	f000 b90e 	b.w	20007014 <__malloc_unlock>
20006df8:	42a3      	cmp	r3, r4
20006dfa:	d908      	bls.n	20006e0e <_free_r+0x46>
20006dfc:	6825      	ldr	r5, [r4, #0]
20006dfe:	1961      	adds	r1, r4, r5
20006e00:	428b      	cmp	r3, r1
20006e02:	bf01      	itttt	eq
20006e04:	6819      	ldreq	r1, [r3, #0]
20006e06:	685b      	ldreq	r3, [r3, #4]
20006e08:	1949      	addeq	r1, r1, r5
20006e0a:	6021      	streq	r1, [r4, #0]
20006e0c:	e7ed      	b.n	20006dea <_free_r+0x22>
20006e0e:	461a      	mov	r2, r3
20006e10:	685b      	ldr	r3, [r3, #4]
20006e12:	b10b      	cbz	r3, 20006e18 <_free_r+0x50>
20006e14:	42a3      	cmp	r3, r4
20006e16:	d9fa      	bls.n	20006e0e <_free_r+0x46>
20006e18:	6811      	ldr	r1, [r2, #0]
20006e1a:	1855      	adds	r5, r2, r1
20006e1c:	42a5      	cmp	r5, r4
20006e1e:	d10b      	bne.n	20006e38 <_free_r+0x70>
20006e20:	6824      	ldr	r4, [r4, #0]
20006e22:	4421      	add	r1, r4
20006e24:	1854      	adds	r4, r2, r1
20006e26:	42a3      	cmp	r3, r4
20006e28:	6011      	str	r1, [r2, #0]
20006e2a:	d1e0      	bne.n	20006dee <_free_r+0x26>
20006e2c:	681c      	ldr	r4, [r3, #0]
20006e2e:	685b      	ldr	r3, [r3, #4]
20006e30:	6053      	str	r3, [r2, #4]
20006e32:	4421      	add	r1, r4
20006e34:	6011      	str	r1, [r2, #0]
20006e36:	e7da      	b.n	20006dee <_free_r+0x26>
20006e38:	d902      	bls.n	20006e40 <_free_r+0x78>
20006e3a:	230c      	movs	r3, #12
20006e3c:	6003      	str	r3, [r0, #0]
20006e3e:	e7d6      	b.n	20006dee <_free_r+0x26>
20006e40:	6825      	ldr	r5, [r4, #0]
20006e42:	1961      	adds	r1, r4, r5
20006e44:	428b      	cmp	r3, r1
20006e46:	bf04      	itt	eq
20006e48:	6819      	ldreq	r1, [r3, #0]
20006e4a:	685b      	ldreq	r3, [r3, #4]
20006e4c:	6063      	str	r3, [r4, #4]
20006e4e:	bf04      	itt	eq
20006e50:	1949      	addeq	r1, r1, r5
20006e52:	6021      	streq	r1, [r4, #0]
20006e54:	6054      	str	r4, [r2, #4]
20006e56:	e7ca      	b.n	20006dee <_free_r+0x26>
20006e58:	b003      	add	sp, #12
20006e5a:	bd30      	pop	{r4, r5, pc}
20006e5c:	20011b28 	.word	0x20011b28

20006e60 <sbrk_aligned>:
20006e60:	b570      	push	{r4, r5, r6, lr}
20006e62:	4e0e      	ldr	r6, [pc, #56]	; (20006e9c <sbrk_aligned+0x3c>)
20006e64:	460c      	mov	r4, r1
20006e66:	6831      	ldr	r1, [r6, #0]
20006e68:	4605      	mov	r5, r0
20006e6a:	b911      	cbnz	r1, 20006e72 <sbrk_aligned+0x12>
20006e6c:	f000 f8bc 	bl	20006fe8 <_sbrk_r>
20006e70:	6030      	str	r0, [r6, #0]
20006e72:	4621      	mov	r1, r4
20006e74:	4628      	mov	r0, r5
20006e76:	f000 f8b7 	bl	20006fe8 <_sbrk_r>
20006e7a:	1c43      	adds	r3, r0, #1
20006e7c:	d00a      	beq.n	20006e94 <sbrk_aligned+0x34>
20006e7e:	1cc4      	adds	r4, r0, #3
20006e80:	f024 0403 	bic.w	r4, r4, #3
20006e84:	42a0      	cmp	r0, r4
20006e86:	d007      	beq.n	20006e98 <sbrk_aligned+0x38>
20006e88:	1a21      	subs	r1, r4, r0
20006e8a:	4628      	mov	r0, r5
20006e8c:	f000 f8ac 	bl	20006fe8 <_sbrk_r>
20006e90:	3001      	adds	r0, #1
20006e92:	d101      	bne.n	20006e98 <sbrk_aligned+0x38>
20006e94:	f04f 34ff 	mov.w	r4, #4294967295
20006e98:	4620      	mov	r0, r4
20006e9a:	bd70      	pop	{r4, r5, r6, pc}
20006e9c:	20011b2c 	.word	0x20011b2c

20006ea0 <_malloc_r>:
20006ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20006ea4:	1ccd      	adds	r5, r1, #3
20006ea6:	f025 0503 	bic.w	r5, r5, #3
20006eaa:	3508      	adds	r5, #8
20006eac:	2d0c      	cmp	r5, #12
20006eae:	bf38      	it	cc
20006eb0:	250c      	movcc	r5, #12
20006eb2:	2d00      	cmp	r5, #0
20006eb4:	4607      	mov	r7, r0
20006eb6:	db01      	blt.n	20006ebc <_malloc_r+0x1c>
20006eb8:	42a9      	cmp	r1, r5
20006eba:	d905      	bls.n	20006ec8 <_malloc_r+0x28>
20006ebc:	230c      	movs	r3, #12
20006ebe:	603b      	str	r3, [r7, #0]
20006ec0:	2600      	movs	r6, #0
20006ec2:	4630      	mov	r0, r6
20006ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20006ec8:	4e2e      	ldr	r6, [pc, #184]	; (20006f84 <_malloc_r+0xe4>)
20006eca:	f000 f89d 	bl	20007008 <__malloc_lock>
20006ece:	6833      	ldr	r3, [r6, #0]
20006ed0:	461c      	mov	r4, r3
20006ed2:	bb34      	cbnz	r4, 20006f22 <_malloc_r+0x82>
20006ed4:	4629      	mov	r1, r5
20006ed6:	4638      	mov	r0, r7
20006ed8:	f7ff ffc2 	bl	20006e60 <sbrk_aligned>
20006edc:	1c43      	adds	r3, r0, #1
20006ede:	4604      	mov	r4, r0
20006ee0:	d14d      	bne.n	20006f7e <_malloc_r+0xde>
20006ee2:	6834      	ldr	r4, [r6, #0]
20006ee4:	4626      	mov	r6, r4
20006ee6:	2e00      	cmp	r6, #0
20006ee8:	d140      	bne.n	20006f6c <_malloc_r+0xcc>
20006eea:	6823      	ldr	r3, [r4, #0]
20006eec:	4631      	mov	r1, r6
20006eee:	4638      	mov	r0, r7
20006ef0:	eb04 0803 	add.w	r8, r4, r3
20006ef4:	f000 f878 	bl	20006fe8 <_sbrk_r>
20006ef8:	4580      	cmp	r8, r0
20006efa:	d13a      	bne.n	20006f72 <_malloc_r+0xd2>
20006efc:	6821      	ldr	r1, [r4, #0]
20006efe:	3503      	adds	r5, #3
20006f00:	1a6d      	subs	r5, r5, r1
20006f02:	f025 0503 	bic.w	r5, r5, #3
20006f06:	3508      	adds	r5, #8
20006f08:	2d0c      	cmp	r5, #12
20006f0a:	bf38      	it	cc
20006f0c:	250c      	movcc	r5, #12
20006f0e:	4629      	mov	r1, r5
20006f10:	4638      	mov	r0, r7
20006f12:	f7ff ffa5 	bl	20006e60 <sbrk_aligned>
20006f16:	3001      	adds	r0, #1
20006f18:	d02b      	beq.n	20006f72 <_malloc_r+0xd2>
20006f1a:	6823      	ldr	r3, [r4, #0]
20006f1c:	442b      	add	r3, r5
20006f1e:	6023      	str	r3, [r4, #0]
20006f20:	e00e      	b.n	20006f40 <_malloc_r+0xa0>
20006f22:	6822      	ldr	r2, [r4, #0]
20006f24:	1b52      	subs	r2, r2, r5
20006f26:	d41e      	bmi.n	20006f66 <_malloc_r+0xc6>
20006f28:	2a0b      	cmp	r2, #11
20006f2a:	d916      	bls.n	20006f5a <_malloc_r+0xba>
20006f2c:	1961      	adds	r1, r4, r5
20006f2e:	42a3      	cmp	r3, r4
20006f30:	6025      	str	r5, [r4, #0]
20006f32:	bf18      	it	ne
20006f34:	6059      	strne	r1, [r3, #4]
20006f36:	6863      	ldr	r3, [r4, #4]
20006f38:	bf08      	it	eq
20006f3a:	6031      	streq	r1, [r6, #0]
20006f3c:	5162      	str	r2, [r4, r5]
20006f3e:	604b      	str	r3, [r1, #4]
20006f40:	4638      	mov	r0, r7
20006f42:	f104 060b 	add.w	r6, r4, #11
20006f46:	f000 f865 	bl	20007014 <__malloc_unlock>
20006f4a:	f026 0607 	bic.w	r6, r6, #7
20006f4e:	1d23      	adds	r3, r4, #4
20006f50:	1af2      	subs	r2, r6, r3
20006f52:	d0b6      	beq.n	20006ec2 <_malloc_r+0x22>
20006f54:	1b9b      	subs	r3, r3, r6
20006f56:	50a3      	str	r3, [r4, r2]
20006f58:	e7b3      	b.n	20006ec2 <_malloc_r+0x22>
20006f5a:	6862      	ldr	r2, [r4, #4]
20006f5c:	42a3      	cmp	r3, r4
20006f5e:	bf0c      	ite	eq
20006f60:	6032      	streq	r2, [r6, #0]
20006f62:	605a      	strne	r2, [r3, #4]
20006f64:	e7ec      	b.n	20006f40 <_malloc_r+0xa0>
20006f66:	4623      	mov	r3, r4
20006f68:	6864      	ldr	r4, [r4, #4]
20006f6a:	e7b2      	b.n	20006ed2 <_malloc_r+0x32>
20006f6c:	4634      	mov	r4, r6
20006f6e:	6876      	ldr	r6, [r6, #4]
20006f70:	e7b9      	b.n	20006ee6 <_malloc_r+0x46>
20006f72:	230c      	movs	r3, #12
20006f74:	603b      	str	r3, [r7, #0]
20006f76:	4638      	mov	r0, r7
20006f78:	f000 f84c 	bl	20007014 <__malloc_unlock>
20006f7c:	e7a1      	b.n	20006ec2 <_malloc_r+0x22>
20006f7e:	6025      	str	r5, [r4, #0]
20006f80:	e7de      	b.n	20006f40 <_malloc_r+0xa0>
20006f82:	bf00      	nop
20006f84:	20011b28 	.word	0x20011b28

20006f88 <_realloc_r>:
20006f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20006f8c:	4680      	mov	r8, r0
20006f8e:	4614      	mov	r4, r2
20006f90:	460e      	mov	r6, r1
20006f92:	b921      	cbnz	r1, 20006f9e <_realloc_r+0x16>
20006f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
20006f98:	4611      	mov	r1, r2
20006f9a:	f7ff bf81 	b.w	20006ea0 <_malloc_r>
20006f9e:	b92a      	cbnz	r2, 20006fac <_realloc_r+0x24>
20006fa0:	f7ff ff12 	bl	20006dc8 <_free_r>
20006fa4:	4625      	mov	r5, r4
20006fa6:	4628      	mov	r0, r5
20006fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20006fac:	f000 f838 	bl	20007020 <_malloc_usable_size_r>
20006fb0:	4284      	cmp	r4, r0
20006fb2:	4607      	mov	r7, r0
20006fb4:	d802      	bhi.n	20006fbc <_realloc_r+0x34>
20006fb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
20006fba:	d812      	bhi.n	20006fe2 <_realloc_r+0x5a>
20006fbc:	4621      	mov	r1, r4
20006fbe:	4640      	mov	r0, r8
20006fc0:	f7ff ff6e 	bl	20006ea0 <_malloc_r>
20006fc4:	4605      	mov	r5, r0
20006fc6:	2800      	cmp	r0, #0
20006fc8:	d0ed      	beq.n	20006fa6 <_realloc_r+0x1e>
20006fca:	42bc      	cmp	r4, r7
20006fcc:	4622      	mov	r2, r4
20006fce:	4631      	mov	r1, r6
20006fd0:	bf28      	it	cs
20006fd2:	463a      	movcs	r2, r7
20006fd4:	f7ff fed0 	bl	20006d78 <memcpy>
20006fd8:	4631      	mov	r1, r6
20006fda:	4640      	mov	r0, r8
20006fdc:	f7ff fef4 	bl	20006dc8 <_free_r>
20006fe0:	e7e1      	b.n	20006fa6 <_realloc_r+0x1e>
20006fe2:	4635      	mov	r5, r6
20006fe4:	e7df      	b.n	20006fa6 <_realloc_r+0x1e>
	...

20006fe8 <_sbrk_r>:
20006fe8:	b538      	push	{r3, r4, r5, lr}
20006fea:	4d06      	ldr	r5, [pc, #24]	; (20007004 <_sbrk_r+0x1c>)
20006fec:	2300      	movs	r3, #0
20006fee:	4604      	mov	r4, r0
20006ff0:	4608      	mov	r0, r1
20006ff2:	602b      	str	r3, [r5, #0]
20006ff4:	f7fc fcd6 	bl	200039a4 <_sbrk>
20006ff8:	1c43      	adds	r3, r0, #1
20006ffa:	d102      	bne.n	20007002 <_sbrk_r+0x1a>
20006ffc:	682b      	ldr	r3, [r5, #0]
20006ffe:	b103      	cbz	r3, 20007002 <_sbrk_r+0x1a>
20007000:	6023      	str	r3, [r4, #0]
20007002:	bd38      	pop	{r3, r4, r5, pc}
20007004:	20011b30 	.word	0x20011b30

20007008 <__malloc_lock>:
20007008:	4801      	ldr	r0, [pc, #4]	; (20007010 <__malloc_lock+0x8>)
2000700a:	f000 b811 	b.w	20007030 <__retarget_lock_acquire_recursive>
2000700e:	bf00      	nop
20007010:	20011b34 	.word	0x20011b34

20007014 <__malloc_unlock>:
20007014:	4801      	ldr	r0, [pc, #4]	; (2000701c <__malloc_unlock+0x8>)
20007016:	f000 b80c 	b.w	20007032 <__retarget_lock_release_recursive>
2000701a:	bf00      	nop
2000701c:	20011b34 	.word	0x20011b34

20007020 <_malloc_usable_size_r>:
20007020:	f851 3c04 	ldr.w	r3, [r1, #-4]
20007024:	1f18      	subs	r0, r3, #4
20007026:	2b00      	cmp	r3, #0
20007028:	bfbc      	itt	lt
2000702a:	580b      	ldrlt	r3, [r1, r0]
2000702c:	18c0      	addlt	r0, r0, r3
2000702e:	4770      	bx	lr

20007030 <__retarget_lock_acquire_recursive>:
20007030:	4770      	bx	lr

20007032 <__retarget_lock_release_recursive>:
20007032:	4770      	bx	lr

20007034 <_init>:
20007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20007036:	bf00      	nop
20007038:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000703a:	bc08      	pop	{r3}
2000703c:	469e      	mov	lr, r3
2000703e:	4770      	bx	lr

20007040 <_fini>:
20007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20007042:	bf00      	nop
20007044:	bcf8      	pop	{r3, r4, r5, r6, r7}
20007046:	bc08      	pop	{r3}
20007048:	469e      	mov	lr, r3
2000704a:	4770      	bx	lr
