
PulseGeneratorILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ac6c  0800adf8  0800adf8  0001adf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a64  08015a64  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  08015a64  08015a64  00025a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015a6c  08015a6c  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a6c  08015a6c  00025a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a70  08015a70  00025a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08015a74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000022c  08015ca0  0003022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08015ca0  00030510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012683  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003082  00000000  00000000  000428df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00045968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e6be  00000000  00000000  00046af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00005683  00000000  00000000  000551b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0005a839  2**0
                  CONTENTS, READONLY
 18 .debug_ranges 00000ff8  00000000  00000000  0005a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00005900  00000000  00000000  0005b888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000022c 	.word	0x2000022c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ade0 	.word	0x0800ade0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000230 	.word	0x20000230
 80001dc:	0800ade0 	.word	0x0800ade0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <mySPISend>:
/**************************************************************************
 @brief     функция для отправки в SPI. + ожидание окончания передачи.
 @param    buff указатель на буфер отправки
 @param    buff_size размер буфера
 **************************************************************************/
void mySPISend(uint8_t *buff, uint16_t buff_size) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
	while (buff_size > 0) {
 8000f68:	e010      	b.n	8000f8c <mySPISend+0x30>
		SPI1->DR = *buff;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <mySPISend+0x54>)
 8000f70:	60da      	str	r2, [r3, #12]
		while (!READ_BIT(SPI1->SR, SPI_SR_TXE))
 8000f72:	bf00      	nop
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <mySPISend+0x54>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f9      	beq.n	8000f74 <mySPISend+0x18>
			;
		buff++;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3301      	adds	r3, #1
 8000f84:	607b      	str	r3, [r7, #4]
		buff_size--;
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	807b      	strh	r3, [r7, #2]
	while (buff_size > 0) {
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1eb      	bne.n	8000f6a <mySPISend+0xe>
	}
	while (READ_BIT(SPI1->SR, SPI_SR_BSY))
 8000f92:	bf00      	nop
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <mySPISend+0x54>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f9      	bne.n	8000f94 <mySPISend+0x38>
		;
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40013000 	.word	0x40013000

08000fb4 <ILI9341_Select>:

/**************************************************************************
 @brief     drive pin CS to GND
 **************************************************************************/
void ILI9341_Select() {
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
	CS_RESET;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <ILI9341_Select+0x1c>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <ILI9341_Select+0x1c>)
 8000fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc2:	6193      	str	r3, [r2, #24]
	//HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40020400 	.word	0x40020400

08000fd4 <ILI9341_Unselect>:

/**************************************************************************
 @brief     drive pin CS to UP
 **************************************************************************/
void ILI9341_Unselect() {
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	CS_SET;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <ILI9341_Unselect+0x1c>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <ILI9341_Unselect+0x1c>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6193      	str	r3, [r2, #24]
	//HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40020400 	.word	0x40020400

08000ff4 <ILI9341_Reset>:

/**************************************************************************
 @brief     drive pin Reset
 **************************************************************************/
static void ILI9341_Reset() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4806      	ldr	r0, [pc, #24]	; (8001018 <ILI9341_Reset+0x24>)
 8000ffe:	f005 fa4f 	bl	80064a0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001002:	2005      	movs	r0, #5
 8001004:	f003 ffcc 	bl	8004fa0 <HAL_Delay>
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	2102      	movs	r1, #2
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <ILI9341_Reset+0x24>)
 800100e:	f005 fa47 	bl	80064a0 <HAL_GPIO_WritePin>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40020400 	.word	0x40020400

0800101c <ILI9341_WriteCommand>:

/**************************************************************************
 @brief     write comand to display
 @param    cmd number comand
 **************************************************************************/
static void ILI9341_WriteCommand(uint8_t cmd) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	DC_RESET;                      // данные или команда
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <ILI9341_WriteCommand+0x28>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	4a06      	ldr	r2, [pc, #24]	; (8001044 <ILI9341_WriteCommand+0x28>)
 800102c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001030:	6193      	str	r3, [r2, #24]
	mySPISend(&cmd, 1);
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	2101      	movs	r1, #1
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff90 	bl	8000f5c <mySPISend>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020400 	.word	0x40020400

08001048 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t *buff, size_t buff_size) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	DC_SET;                        // данные или команда
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <ILI9341_WriteData+0x50>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a10      	ldr	r2, [pc, #64]	; (8001098 <ILI9341_WriteData+0x50>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6193      	str	r3, [r2, #24]
	// split data in small chunks because HAL can't send more then 64K at once
	while (buff_size > 0) {
 800105e:	e013      	b.n	8001088 <ILI9341_WriteData+0x40>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001066:	bf28      	it	cs
 8001068:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800106c:	81fb      	strh	r3, [r7, #14]
		mySPISend(buff, chunk_size);
 800106e:	89fb      	ldrh	r3, [r7, #14]
 8001070:	4619      	mov	r1, r3
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff72 	bl	8000f5c <mySPISend>
		buff += chunk_size;
 8001078:	89fb      	ldrh	r3, [r7, #14]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001080:	89fb      	ldrh	r3, [r7, #14]
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1e8      	bne.n	8001060 <ILI9341_WriteData+0x18>
	}
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40020400 	.word	0x40020400

0800109c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1,
		uint16_t y1) {
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4604      	mov	r4, r0
 80010a4:	4608      	mov	r0, r1
 80010a6:	4611      	mov	r1, r2
 80010a8:	461a      	mov	r2, r3
 80010aa:	4623      	mov	r3, r4
 80010ac:	80fb      	strh	r3, [r7, #6]
 80010ae:	4603      	mov	r3, r0
 80010b0:	80bb      	strh	r3, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	807b      	strh	r3, [r7, #2]
 80010b6:	4613      	mov	r3, r2
 80010b8:	803b      	strh	r3, [r7, #0]
	// column address set
	ILI9341_WriteCommand(0x2A); // CASET
 80010ba:	202a      	movs	r0, #42	; 0x2a
 80010bc:	f7ff ffae 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	0a1b      	lsrs	r3, r3, #8
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	733b      	strb	r3, [r7, #12]
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	737b      	strb	r3, [r7, #13]
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	0a1b      	lsrs	r3, r3, #8
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	73bb      	strb	r3, [r7, #14]
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	73fb      	strb	r3, [r7, #15]
				& 0xFF };
		ILI9341_WriteData(data, sizeof(data));
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2104      	movs	r1, #4
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffae 	bl	8001048 <ILI9341_WriteData>
	}
	// row address set
	ILI9341_WriteCommand(0x2B); // RASET
 80010ec:	202b      	movs	r0, #43	; 0x2b
 80010ee:	f7ff ff95 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	723b      	strb	r3, [r7, #8]
 80010fc:	88bb      	ldrh	r3, [r7, #4]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	727b      	strb	r3, [r7, #9]
 8001102:	883b      	ldrh	r3, [r7, #0]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	b29b      	uxth	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	72bb      	strb	r3, [r7, #10]
 800110c:	883b      	ldrh	r3, [r7, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	72fb      	strb	r3, [r7, #11]
				& 0xFF };
		ILI9341_WriteData(data, sizeof(data));
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	2104      	movs	r1, #4
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff95 	bl	8001048 <ILI9341_WriteData>
	}
	// write to RAM
	ILI9341_WriteCommand(0x2C); // RAMWR
 800111e:	202c      	movs	r0, #44	; 0x2c
 8001120:	f7ff ff7c 	bl	800101c <ILI9341_WriteCommand>
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}

0800112c <ILI9341_Init>:

void ILI9341_Init() {
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b09b      	sub	sp, #108	; 0x6c
 8001130:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Led_Display_GPIO_Port, Led_Display_Pin, GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001138:	488f      	ldr	r0, [pc, #572]	; (8001378 <ILI9341_Init+0x24c>)
 800113a:	f005 f9b1 	bl	80064a0 <HAL_GPIO_WritePin>
	ILI9341_Select();
 800113e:	f7ff ff39 	bl	8000fb4 <ILI9341_Select>
	ILI9341_Reset();
 8001142:	f7ff ff57 	bl	8000ff4 <ILI9341_Reset>
	// command list is based on https://github.com/martnak/STM32-ILI9341
	ILI9341_WriteCommand(0x01); // SOFTWARE RESET
 8001146:	2001      	movs	r0, #1
 8001148:	f7ff ff68 	bl	800101c <ILI9341_WriteCommand>
	HAL_Delay(1000);
 800114c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001150:	f003 ff26 	bl	8004fa0 <HAL_Delay>
	ILI9341_WriteCommand(0xCB); // POWER CONTROL A
 8001154:	20cb      	movs	r0, #203	; 0xcb
 8001156:	f7ff ff61 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800115a:	4a88      	ldr	r2, [pc, #544]	; (800137c <ILI9341_Init+0x250>)
 800115c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001160:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001164:	6018      	str	r0, [r3, #0]
 8001166:	3304      	adds	r3, #4
 8001168:	7019      	strb	r1, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 800116a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800116e:	2105      	movs	r1, #5
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff69 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xCF); // POWER CONTROL B
 8001176:	20cf      	movs	r0, #207	; 0xcf
 8001178:	f7ff ff50 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0xC1, 0x30 };
 800117c:	4a80      	ldr	r2, [pc, #512]	; (8001380 <ILI9341_Init+0x254>)
 800117e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	4611      	mov	r1, r2
 8001186:	8019      	strh	r1, [r3, #0]
 8001188:	3302      	adds	r3, #2
 800118a:	0c12      	lsrs	r2, r2, #16
 800118c:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 800118e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001192:	2103      	movs	r1, #3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff57 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE8); // DRIVER TIMING CONTROL A
 800119a:	20e8      	movs	r0, #232	; 0xe8
 800119c:	f7ff ff3e 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x85, 0x00, 0x78 };
 80011a0:	4a78      	ldr	r2, [pc, #480]	; (8001384 <ILI9341_Init+0x258>)
 80011a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	4611      	mov	r1, r2
 80011aa:	8019      	strh	r1, [r3, #0]
 80011ac:	3302      	adds	r3, #2
 80011ae:	0c12      	lsrs	r2, r2, #16
 80011b0:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 80011b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011b6:	2103      	movs	r1, #3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff45 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xEA); // DRIVER TIMING CONTROL B
 80011be:	20ea      	movs	r0, #234	; 0xea
 80011c0:	f7ff ff2c 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x00 };
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		ILI9341_WriteData(data, sizeof(data));
 80011ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ce:	2102      	movs	r1, #2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff39 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xED);  // POWER ON SEQUENCE CONTROL
 80011d6:	20ed      	movs	r0, #237	; 0xed
 80011d8:	f7ff ff20 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80011dc:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <ILI9341_Init+0x25c>)
 80011de:	653b      	str	r3, [r7, #80]	; 0x50
		ILI9341_WriteData(data, sizeof(data));
 80011e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011e4:	2104      	movs	r1, #4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff2e 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xF7);  // PUMP RATIO CONTROL
 80011ec:	20f7      	movs	r0, #247	; 0xf7
 80011ee:	f7ff ff15 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x20 };
 80011f2:	2320      	movs	r3, #32
 80011f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		ILI9341_WriteData(data, sizeof(data));
 80011f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011fc:	2101      	movs	r1, #1
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff22 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC0); // POWER CONTROL,VRH[5:0]
 8001204:	20c0      	movs	r0, #192	; 0xc0
 8001206:	f7ff ff09 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x23 };
 800120a:	2323      	movs	r3, #35	; 0x23
 800120c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		ILI9341_WriteData(data, sizeof(data));
 8001210:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001214:	2101      	movs	r1, #1
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff16 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC1); // POWER CONTROL,SAP[2:0];BT[3:0]
 800121c:	20c1      	movs	r0, #193	; 0xc1
 800121e:	f7ff fefd 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x10 };
 8001222:	2310      	movs	r3, #16
 8001224:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		ILI9341_WriteData(data, sizeof(data));
 8001228:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff0a 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC5); // VCM CONTROL
 8001234:	20c5      	movs	r0, #197	; 0xc5
 8001236:	f7ff fef1 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x3E, 0x28 };
 800123a:	f642 033e 	movw	r3, #10302	; 0x283e
 800123e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		ILI9341_WriteData(data, sizeof(data));
 8001242:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001246:	2102      	movs	r1, #2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fefd 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC7);  // VCM CONTROL 2
 800124e:	20c7      	movs	r0, #199	; 0xc7
 8001250:	f7ff fee4 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x86 };
 8001254:	2386      	movs	r3, #134	; 0x86
 8001256:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		ILI9341_WriteData(data, sizeof(data));
 800125a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800125e:	2101      	movs	r1, #1
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fef1 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x36); // MEMORY ACCESS CONTROL
 8001266:	2036      	movs	r0, #54	; 0x36
 8001268:	f7ff fed8 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x48 };
 800126c:	2348      	movs	r3, #72	; 0x48
 800126e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		ILI9341_WriteData(data, sizeof(data));
 8001272:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001276:	2101      	movs	r1, #1
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fee5 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x3A); // PIXEL FORMAT
 800127e:	203a      	movs	r0, #58	; 0x3a
 8001280:	f7ff fecc 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x55 };
 8001284:	2355      	movs	r3, #85	; 0x55
 8001286:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		ILI9341_WriteData(data, sizeof(data));
 800128a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800128e:	2101      	movs	r1, #1
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fed9 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xB1); // FRAME RATIO CONTROL, STANDARD RGB COLOR
 8001296:	20b1      	movs	r0, #177	; 0xb1
 8001298:	f7ff fec0 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x18 };
 800129c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012a0:	863b      	strh	r3, [r7, #48]	; 0x30
		ILI9341_WriteData(data, sizeof(data));
 80012a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a6:	2102      	movs	r1, #2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fecd 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xB6); // DISPLAY FUNCTION CONTROL
 80012ae:	20b6      	movs	r0, #182	; 0xb6
 80012b0:	f7ff feb4 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x08, 0x82, 0x27 };
 80012b4:	4a35      	ldr	r2, [pc, #212]	; (800138c <ILI9341_Init+0x260>)
 80012b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	4611      	mov	r1, r2
 80012be:	8019      	strh	r1, [r3, #0]
 80012c0:	3302      	adds	r3, #2
 80012c2:	0c12      	lsrs	r2, r2, #16
 80012c4:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 80012c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ca:	2103      	movs	r1, #3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff febb 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xF2); // 3GAMMA FUNCTION DISABLE
 80012d2:	20f2      	movs	r0, #242	; 0xf2
 80012d4:	f7ff fea2 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00 };
 80012d8:	2300      	movs	r3, #0
 80012da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		ILI9341_WriteData(data, sizeof(data));
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	2101      	movs	r1, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff feaf 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x26); // GAMMA CURVE SELECTED
 80012ea:	2026      	movs	r0, #38	; 0x26
 80012ec:	f7ff fe96 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x01 };
 80012f0:	2301      	movs	r3, #1
 80012f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		ILI9341_WriteData(data, sizeof(data));
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fea3 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE0); // POSITIVE GAMMA CORRECTION
 8001302:	20e0      	movs	r0, #224	; 0xe0
 8001304:	f7ff fe8a 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1, 0x37,
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <ILI9341_Init+0x264>)
 800130a:	f107 0414 	add.w	r4, r7, #20
 800130e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001310:	c407      	stmia	r4!, {r0, r1, r2}
 8001312:	8023      	strh	r3, [r4, #0]
 8001314:	3402      	adds	r4, #2
 8001316:	0c1b      	lsrs	r3, r3, #16
 8001318:	7023      	strb	r3, [r4, #0]
				0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
		ILI9341_WriteData(data, sizeof(data));
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	210f      	movs	r1, #15
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe91 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE1); // NEGATIVE GAMMA CORRECTION
 8001326:	20e1      	movs	r0, #225	; 0xe1
 8001328:	f7ff fe78 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48,
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <ILI9341_Init+0x268>)
 800132e:	1d3c      	adds	r4, r7, #4
 8001330:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001332:	c407      	stmia	r4!, {r0, r1, r2}
 8001334:	8023      	strh	r3, [r4, #0]
 8001336:	3402      	adds	r4, #2
 8001338:	0c1b      	lsrs	r3, r3, #16
 800133a:	7023      	strb	r3, [r4, #0]
				0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
		ILI9341_WriteData(data, sizeof(data));
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	210f      	movs	r1, #15
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fe81 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x11); // EXIT SLEEP
 8001346:	2011      	movs	r0, #17
 8001348:	f7ff fe68 	bl	800101c <ILI9341_WriteCommand>
	HAL_Delay(120);
 800134c:	2078      	movs	r0, #120	; 0x78
 800134e:	f003 fe27 	bl	8004fa0 <HAL_Delay>
	ILI9341_WriteCommand(0x29); // TURN ON DISPLAY
 8001352:	2029      	movs	r0, #41	; 0x29
 8001354:	f7ff fe62 	bl	800101c <ILI9341_WriteCommand>
	ILI9341_WriteCommand(0x36); // MADCTL
 8001358:	2036      	movs	r0, #54	; 0x36
 800135a:	f7ff fe5f 	bl	800101c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { ILI9341_ROTATION };
 800135e:	23e8      	movs	r3, #232	; 0xe8
 8001360:	703b      	strb	r3, [r7, #0]
		ILI9341_WriteData(data, sizeof(data));
 8001362:	463b      	mov	r3, r7
 8001364:	2101      	movs	r1, #1
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fe6e 	bl	8001048 <ILI9341_WriteData>
	}
	ILI9341_Unselect();
 800136c:	f7ff fe32 	bl	8000fd4 <ILI9341_Unselect>
}
 8001370:	bf00      	nop
 8001372:	376c      	adds	r7, #108	; 0x6c
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	40020400 	.word	0x40020400
 800137c:	0800adf8 	.word	0x0800adf8
 8001380:	0800ae00 	.word	0x0800ae00
 8001384:	0800ae04 	.word	0x0800ae04
 8001388:	81120364 	.word	0x81120364
 800138c:	0800ae08 	.word	0x0800ae08
 8001390:	0800ae0c 	.word	0x0800ae0c
 8001394:	0800ae1c 	.word	0x0800ae1c

08001398 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
 80013a2:	460b      	mov	r3, r1
 80013a4:	80bb      	strh	r3, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	807b      	strh	r3, [r7, #2]
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013b0:	d21f      	bcs.n	80013f2 <ILI9341_DrawPixel+0x5a>
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	2bef      	cmp	r3, #239	; 0xef
 80013b6:	d81c      	bhi.n	80013f2 <ILI9341_DrawPixel+0x5a>
		return;
	ILI9341_Select();
 80013b8:	f7ff fdfc 	bl	8000fb4 <ILI9341_Select>

	ILI9341_SetAddressWindow(x, y, x + 1, y + 1);
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	3301      	adds	r3, #1
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	88bb      	ldrh	r3, [r7, #4]
 80013c4:	3301      	adds	r3, #1
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	88b9      	ldrh	r1, [r7, #4]
 80013ca:	88f8      	ldrh	r0, [r7, #6]
 80013cc:	f7ff fe66 	bl	800109c <ILI9341_SetAddressWindow>
	uint8_t data[] = { color >> 8, color & 0xFF };
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	733b      	strb	r3, [r7, #12]
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	737b      	strb	r3, [r7, #13]
	ILI9341_WriteData(data, sizeof(data));
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2102      	movs	r1, #2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fe2e 	bl	8001048 <ILI9341_WriteData>

	ILI9341_Unselect();
 80013ec:	f7ff fdf2 	bl	8000fd4 <ILI9341_Unselect>
 80013f0:	e000      	b.n	80013f4 <ILI9341_DrawPixel+0x5c>
		return;
 80013f2:	bf00      	nop
}
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t color) {
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	4604      	mov	r4, r0
 8001404:	4608      	mov	r0, r1
 8001406:	4611      	mov	r1, r2
 8001408:	461a      	mov	r2, r3
 800140a:	4623      	mov	r3, r4
 800140c:	80fb      	strh	r3, [r7, #6]
 800140e:	4603      	mov	r3, r0
 8001410:	80bb      	strh	r3, [r7, #4]
 8001412:	460b      	mov	r3, r1
 8001414:	807b      	strh	r3, [r7, #2]
 8001416:	4613      	mov	r3, r2
 8001418:	803b      	strh	r3, [r7, #0]
	// clipping
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001420:	d250      	bcs.n	80014c4 <ILI9341_FillRectangle+0xc8>
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	2bef      	cmp	r3, #239	; 0xef
 8001426:	d84d      	bhi.n	80014c4 <ILI9341_FillRectangle+0xc8>
		return;
	if ((x + w - 1) >= ILI9341_WIDTH)
 8001428:	88fa      	ldrh	r2, [r7, #6]
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	4413      	add	r3, r2
 800142e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001432:	dd03      	ble.n	800143c <ILI9341_FillRectangle+0x40>
		w = ILI9341_WIDTH - x;
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800143a:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= ILI9341_HEIGHT)
 800143c:	88ba      	ldrh	r2, [r7, #4]
 800143e:	883b      	ldrh	r3, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	2bf0      	cmp	r3, #240	; 0xf0
 8001444:	dd03      	ble.n	800144e <ILI9341_FillRectangle+0x52>
		h = ILI9341_HEIGHT - y;
 8001446:	88bb      	ldrh	r3, [r7, #4]
 8001448:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800144c:	803b      	strh	r3, [r7, #0]

	ILI9341_Select();
 800144e:	f7ff fdb1 	bl	8000fb4 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001452:	88fa      	ldrh	r2, [r7, #6]
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	4413      	add	r3, r2
 8001458:	b29b      	uxth	r3, r3
 800145a:	3b01      	subs	r3, #1
 800145c:	b29c      	uxth	r4, r3
 800145e:	88ba      	ldrh	r2, [r7, #4]
 8001460:	883b      	ldrh	r3, [r7, #0]
 8001462:	4413      	add	r3, r2
 8001464:	b29b      	uxth	r3, r3
 8001466:	3b01      	subs	r3, #1
 8001468:	b29b      	uxth	r3, r3
 800146a:	88b9      	ldrh	r1, [r7, #4]
 800146c:	88f8      	ldrh	r0, [r7, #6]
 800146e:	4622      	mov	r2, r4
 8001470:	f7ff fe14 	bl	800109c <ILI9341_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8001474:	8c3b      	ldrh	r3, [r7, #32]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	b29b      	uxth	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	733b      	strb	r3, [r7, #12]
 800147e:	8c3b      	ldrh	r3, [r7, #32]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	2101      	movs	r1, #1
 8001488:	4810      	ldr	r0, [pc, #64]	; (80014cc <ILI9341_FillRectangle+0xd0>)
 800148a:	f005 f809 	bl	80064a0 <HAL_GPIO_WritePin>
	for (y = h; y > 0; y--) {
 800148e:	883b      	ldrh	r3, [r7, #0]
 8001490:	80bb      	strh	r3, [r7, #4]
 8001492:	e011      	b.n	80014b8 <ILI9341_FillRectangle+0xbc>
		for (x = w; x > 0; x--) {
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	e008      	b.n	80014ac <ILI9341_FillRectangle+0xb0>
			mySPISend(data, sizeof(data));
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	2102      	movs	r1, #2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fd5b 	bl	8000f5c <mySPISend>
		for (x = w; x > 0; x--) {
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	80fb      	strh	r3, [r7, #6]
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f3      	bne.n	800149a <ILI9341_FillRectangle+0x9e>
	for (y = h; y > 0; y--) {
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	80bb      	strh	r3, [r7, #4]
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1ea      	bne.n	8001494 <ILI9341_FillRectangle+0x98>
		}
	}

	ILI9341_Unselect();
 80014be:	f7ff fd89 	bl	8000fd4 <ILI9341_Unselect>
 80014c2:	e000      	b.n	80014c6 <ILI9341_FillRectangle+0xca>
		return;
 80014c4:	bf00      	nop
}
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	40020400 	.word	0x40020400

080014d0 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	23f0      	movs	r3, #240	; 0xf0
 80014e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014e4:	2100      	movs	r1, #0
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff ff88 	bl	80013fc <ILI9341_FillRectangle>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <ILI9341_WriteMyChar>:

static void ILI9341_WriteMyChar(uint16_t x, uint16_t y, char ch, uint16_t color,
		uint16_t bgcolor) {
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4604      	mov	r4, r0
 80014fc:	4608      	mov	r0, r1
 80014fe:	4611      	mov	r1, r2
 8001500:	461a      	mov	r2, r3
 8001502:	4623      	mov	r3, r4
 8001504:	80fb      	strh	r3, [r7, #6]
 8001506:	4603      	mov	r3, r0
 8001508:	80bb      	strh	r3, [r7, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	70fb      	strb	r3, [r7, #3]
 800150e:	4613      	mov	r3, r2
 8001510:	803b      	strh	r3, [r7, #0]
	uint16_t i, j, value;
	uint32_t devider, b;

	ILI9341_SetAddressWindow(x, y,
			x + Font24x36_array[(ch - 32)].image->width - 1,
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	3b20      	subs	r3, #32
 8001516:	4a71      	ldr	r2, [pc, #452]	; (80016dc <ILI9341_WriteMyChar+0x1e8>)
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4413      	add	r3, r2
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	889a      	ldrh	r2, [r3, #4]
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	4413      	add	r3, r2
 8001524:	b29b      	uxth	r3, r3
	ILI9341_SetAddressWindow(x, y,
 8001526:	3b01      	subs	r3, #1
 8001528:	b29c      	uxth	r4, r3
			y + Font24x36_array[(ch - 32)].image->height - 1);
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	3b20      	subs	r3, #32
 800152e:	4a6b      	ldr	r2, [pc, #428]	; (80016dc <ILI9341_WriteMyChar+0x1e8>)
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4413      	add	r3, r2
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	88da      	ldrh	r2, [r3, #6]
 8001538:	88bb      	ldrh	r3, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	b29b      	uxth	r3, r3
	ILI9341_SetAddressWindow(x, y,
 800153e:	3b01      	subs	r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	88b9      	ldrh	r1, [r7, #4]
 8001544:	88f8      	ldrh	r0, [r7, #6]
 8001546:	4622      	mov	r2, r4
 8001548:	f7ff fda8 	bl	800109c <ILI9341_SetAddressWindow>
	value = 1;
 800154c:	2301      	movs	r3, #1
 800154e:	837b      	strh	r3, [r7, #26]
	devider = 0x80;
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	617b      	str	r3, [r7, #20]
	if ((Font24x36_array[(ch - 32)].image->width) > 8) {
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	3b20      	subs	r3, #32
 8001558:	4a60      	ldr	r2, [pc, #384]	; (80016dc <ILI9341_WriteMyChar+0x1e8>)
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	889b      	ldrh	r3, [r3, #4]
 8001562:	2b08      	cmp	r3, #8
 8001564:	d904      	bls.n	8001570 <ILI9341_WriteMyChar+0x7c>
		value = 2;
 8001566:	2302      	movs	r3, #2
 8001568:	837b      	strh	r3, [r7, #26]
		devider = 0x8000;
 800156a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800156e:	617b      	str	r3, [r7, #20]
	}
	if ((Font24x36_array[(ch - 32)].image->width) > 16) {
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	3b20      	subs	r3, #32
 8001574:	4a59      	ldr	r2, [pc, #356]	; (80016dc <ILI9341_WriteMyChar+0x1e8>)
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4413      	add	r3, r2
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	889b      	ldrh	r3, [r3, #4]
 800157e:	2b10      	cmp	r3, #16
 8001580:	d904      	bls.n	800158c <ILI9341_WriteMyChar+0x98>
		value = 3;
 8001582:	2303      	movs	r3, #3
 8001584:	837b      	strh	r3, [r7, #26]
		devider = 0x800000;
 8001586:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800158a:	617b      	str	r3, [r7, #20]
	}
	if ((Font24x36_array[(ch - 32)].image->width) > 24) {
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	3b20      	subs	r3, #32
 8001590:	4a52      	ldr	r2, [pc, #328]	; (80016dc <ILI9341_WriteMyChar+0x1e8>)
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	889b      	ldrh	r3, [r3, #4]
 800159a:	2b18      	cmp	r3, #24
 800159c:	d904      	bls.n	80015a8 <ILI9341_WriteMyChar+0xb4>
		value = 4;
 800159e:	2304      	movs	r3, #4
 80015a0:	837b      	strh	r3, [r7, #26]
		devider = 0x80000000;
 80015a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015a6:	617b      	str	r3, [r7, #20]
	}
	for (i = 0; i < (Font24x36_array[(ch - 32)].image->height) * value; i +=
 80015a8:	2300      	movs	r3, #0
 80015aa:	83fb      	strh	r3, [r7, #30]
 80015ac:	e081      	b.n	80016b2 <ILI9341_WriteMyChar+0x1be>
			value) {
		b = Font24x36_array[(ch - 32)].image->data[i];
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	3b20      	subs	r3, #32
 80015b2:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <ILI9341_WriteMyChar+0x1e8>)
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	8bfb      	ldrh	r3, [r7, #30]
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	613b      	str	r3, [r7, #16]
		if (value >= 2) {
 80015c4:	8b7b      	ldrh	r3, [r7, #26]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d911      	bls.n	80015ee <ILI9341_WriteMyChar+0xfa>
			b = b << 8;
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 1];
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	3b20      	subs	r3, #32
 80015d4:	4a41      	ldr	r2, [pc, #260]	; (80016dc <ILI9341_WriteMyChar+0x1e8>)
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	8bfb      	ldrh	r3, [r7, #30]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
		}
		if (value >= 3) {
 80015ee:	8b7b      	ldrh	r3, [r7, #26]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d911      	bls.n	8001618 <ILI9341_WriteMyChar+0x124>
			b = b << 8;
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 2];
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	3b20      	subs	r3, #32
 80015fe:	4a37      	ldr	r2, [pc, #220]	; (80016dc <ILI9341_WriteMyChar+0x1e8>)
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	8bfb      	ldrh	r3, [r7, #30]
 800160a:	3302      	adds	r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
		}
		if (value >= 4) {
 8001618:	8b7b      	ldrh	r3, [r7, #26]
 800161a:	2b03      	cmp	r3, #3
 800161c:	d911      	bls.n	8001642 <ILI9341_WriteMyChar+0x14e>
			b = b << 8;
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 3];
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	3b20      	subs	r3, #32
 8001628:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <ILI9341_WriteMyChar+0x1e8>)
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	8bfb      	ldrh	r3, [r7, #30]
 8001634:	3303      	adds	r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
		}
		for (j = 0; j < Font24x36_array[(ch - 32)].image->width; j++) {
 8001642:	2300      	movs	r3, #0
 8001644:	83bb      	strh	r3, [r7, #28]
 8001646:	e026      	b.n	8001696 <ILI9341_WriteMyChar+0x1a2>
			if ((b << j) & devider) {
 8001648:	8bbb      	ldrh	r3, [r7, #28]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	409a      	lsls	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00e      	beq.n	8001674 <ILI9341_WriteMyChar+0x180>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8001656:	883b      	ldrh	r3, [r7, #0]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	b29b      	uxth	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	733b      	strb	r3, [r7, #12]
 8001660:	883b      	ldrh	r3, [r7, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	737b      	strb	r3, [r7, #13]
				ILI9341_WriteData(data, sizeof(data));
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2102      	movs	r1, #2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fceb 	bl	8001048 <ILI9341_WriteData>
 8001672:	e00d      	b.n	8001690 <ILI9341_WriteMyChar+0x19c>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001674:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	b29b      	uxth	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	723b      	strb	r3, [r7, #8]
 800167e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001680:	b2db      	uxtb	r3, r3
 8001682:	727b      	strb	r3, [r7, #9]
				ILI9341_WriteData(data, sizeof(data));
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	2102      	movs	r1, #2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fcdc 	bl	8001048 <ILI9341_WriteData>
		for (j = 0; j < Font24x36_array[(ch - 32)].image->width; j++) {
 8001690:	8bbb      	ldrh	r3, [r7, #28]
 8001692:	3301      	adds	r3, #1
 8001694:	83bb      	strh	r3, [r7, #28]
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	3b20      	subs	r3, #32
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <ILI9341_WriteMyChar+0x1e8>)
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	889b      	ldrh	r3, [r3, #4]
 80016a4:	8bba      	ldrh	r2, [r7, #28]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d3ce      	bcc.n	8001648 <ILI9341_WriteMyChar+0x154>
	for (i = 0; i < (Font24x36_array[(ch - 32)].image->height) * value; i +=
 80016aa:	8bfa      	ldrh	r2, [r7, #30]
 80016ac:	8b7b      	ldrh	r3, [r7, #26]
 80016ae:	4413      	add	r3, r2
 80016b0:	83fb      	strh	r3, [r7, #30]
 80016b2:	8bfa      	ldrh	r2, [r7, #30]
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	3b20      	subs	r3, #32
 80016b8:	4908      	ldr	r1, [pc, #32]	; (80016dc <ILI9341_WriteMyChar+0x1e8>)
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	88db      	ldrh	r3, [r3, #6]
 80016c2:	4619      	mov	r1, r3
 80016c4:	8b7b      	ldrh	r3, [r7, #26]
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	429a      	cmp	r2, r3
 80016cc:	f6ff af6f 	blt.w	80015ae <ILI9341_WriteMyChar+0xba>
			}
		}
	}
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	bf00      	nop
 80016dc:	08014494 	.word	0x08014494

080016e0 <ILI9341_WriteMyString>:

void ILI9341_WriteMyString(uint16_t x, uint16_t y, const char *str,
		uint16_t color, uint16_t bgcolor) {
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	60ba      	str	r2, [r7, #8]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	81fb      	strh	r3, [r7, #14]
 80016ee:	460b      	mov	r3, r1
 80016f0:	81bb      	strh	r3, [r7, #12]
 80016f2:	4613      	mov	r3, r2
 80016f4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Select();
 80016f6:	f7ff fc5d 	bl	8000fb4 <ILI9341_Select>
	while (*str) {
 80016fa:	e045      	b.n	8001788 <ILI9341_WriteMyString+0xa8>
		if (x + Font24x36_array[(*str - 32)].image->width >= ILI9341_WIDTH) {
 80016fc:	89fa      	ldrh	r2, [r7, #14]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	3b20      	subs	r3, #32
 8001704:	4926      	ldr	r1, [pc, #152]	; (80017a0 <ILI9341_WriteMyString+0xc0>)
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	440b      	add	r3, r1
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	889b      	ldrh	r3, [r3, #4]
 800170e:	4413      	add	r3, r2
 8001710:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001714:	db20      	blt.n	8001758 <ILI9341_WriteMyString+0x78>
			x = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	81fb      	strh	r3, [r7, #14]
			y += Font24x36_array[(*str - 32)].image->height;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3b20      	subs	r3, #32
 8001720:	4a1f      	ldr	r2, [pc, #124]	; (80017a0 <ILI9341_WriteMyString+0xc0>)
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4413      	add	r3, r2
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	88da      	ldrh	r2, [r3, #6]
 800172a:	89bb      	ldrh	r3, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	81bb      	strh	r3, [r7, #12]
			if (y + Font24x36_array[(*str - 32)].image->height >= ILI9341_HEIGHT) {
 8001730:	89ba      	ldrh	r2, [r7, #12]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	3b20      	subs	r3, #32
 8001738:	4919      	ldr	r1, [pc, #100]	; (80017a0 <ILI9341_WriteMyString+0xc0>)
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	440b      	add	r3, r1
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	88db      	ldrh	r3, [r3, #6]
 8001742:	4413      	add	r3, r2
 8001744:	2bef      	cmp	r3, #239	; 0xef
 8001746:	dc24      	bgt.n	8001792 <ILI9341_WriteMyString+0xb2>
				break;
			}
			if (*str == ' ') {
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b20      	cmp	r3, #32
 800174e:	d103      	bne.n	8001758 <ILI9341_WriteMyString+0x78>
				// skip spaces in the beginning of the new line
				str++;
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	3301      	adds	r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
				continue;
 8001756:	e017      	b.n	8001788 <ILI9341_WriteMyString+0xa8>
			}
		}
		ILI9341_WriteMyChar(x, y, *str, color, bgcolor);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	88fc      	ldrh	r4, [r7, #6]
 800175e:	89b9      	ldrh	r1, [r7, #12]
 8001760:	89f8      	ldrh	r0, [r7, #14]
 8001762:	8c3b      	ldrh	r3, [r7, #32]
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	4623      	mov	r3, r4
 8001768:	f7ff fec4 	bl	80014f4 <ILI9341_WriteMyChar>
		x += Font24x36_array[(*str - 32)].image->width;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	3b20      	subs	r3, #32
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <ILI9341_WriteMyString+0xc0>)
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4413      	add	r3, r2
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	889a      	ldrh	r2, [r3, #4]
 800177c:	89fb      	ldrh	r3, [r7, #14]
 800177e:	4413      	add	r3, r2
 8001780:	81fb      	strh	r3, [r7, #14]
		str++;
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3301      	adds	r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1b5      	bne.n	80016fc <ILI9341_WriteMyString+0x1c>
 8001790:	e000      	b.n	8001794 <ILI9341_WriteMyString+0xb4>
				break;
 8001792:	bf00      	nop
	}
	ILI9341_Unselect();
 8001794:	f7ff fc1e 	bl	8000fd4 <ILI9341_Unselect>
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	08014494 	.word	0x08014494

080017a4 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font,
		uint16_t color, uint16_t bgcolor) {
 80017a4:	b082      	sub	sp, #8
 80017a6:	b590      	push	{r4, r7, lr}
 80017a8:	b089      	sub	sp, #36	; 0x24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
 80017b2:	460b      	mov	r3, r1
 80017b4:	80bb      	strh	r3, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ILI9341_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80017ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80017be:	b29a      	uxth	r2, r3
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	4413      	add	r3, r2
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29c      	uxth	r4, r3
 80017ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	88bb      	ldrh	r3, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29b      	uxth	r3, r3
 80017da:	88b9      	ldrh	r1, [r7, #4]
 80017dc:	88f8      	ldrh	r0, [r7, #6]
 80017de:	4622      	mov	r2, r4
 80017e0:	f7ff fc5c 	bl	800109c <ILI9341_SetAddressWindow>
	for (i = 0; i < font.height; i++) {
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	e043      	b.n	8001872 <ILI9341_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 80017ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	3b20      	subs	r3, #32
 80017f0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4619      	mov	r1, r3
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	440b      	add	r3, r1
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	e029      	b.n	8001860 <ILI9341_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00e      	beq.n	800183a <ILI9341_WriteChar+0x96>
				uint8_t data[] = { color >> 8, color & 0xFF };
 800181c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	b29b      	uxth	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	743b      	strb	r3, [r7, #16]
 8001826:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001828:	b2db      	uxtb	r3, r3
 800182a:	747b      	strb	r3, [r7, #17]
				ILI9341_WriteData(data, sizeof(data));
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	2102      	movs	r1, #2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fc08 	bl	8001048 <ILI9341_WriteData>
 8001838:	e00f      	b.n	800185a <ILI9341_WriteChar+0xb6>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800183a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	b29b      	uxth	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	733b      	strb	r3, [r7, #12]
 8001846:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800184a:	b2db      	uxtb	r3, r3
 800184c:	737b      	strb	r3, [r7, #13]
				ILI9341_WriteData(data, sizeof(data));
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	2102      	movs	r1, #2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fbf7 	bl	8001048 <ILI9341_WriteData>
		for (j = 0; j < font.width; j++) {
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	3301      	adds	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001864:	461a      	mov	r2, r3
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4293      	cmp	r3, r2
 800186a:	d3cf      	bcc.n	800180c <ILI9341_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	3301      	adds	r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001876:	461a      	mov	r2, r3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4293      	cmp	r3, r2
 800187c:	d3b5      	bcc.n	80017ea <ILI9341_WriteChar+0x46>
			}
		}
	}
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	3724      	adds	r7, #36	; 0x24
 8001884:	46bd      	mov	sp, r7
 8001886:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800188a:	b002      	add	sp, #8
 800188c:	4770      	bx	lr

0800188e <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font,
		uint16_t color, uint16_t bgcolor) {
 800188e:	b082      	sub	sp, #8
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af04      	add	r7, sp, #16
 8001896:	603a      	str	r2, [r7, #0]
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
 800189e:	460b      	mov	r3, r1
 80018a0:	80bb      	strh	r3, [r7, #4]
	ILI9341_Select();
 80018a2:	f7ff fb87 	bl	8000fb4 <ILI9341_Select>

	while (*str) {
 80018a6:	e02e      	b.n	8001906 <ILI9341_WriteString+0x78>
		if (x + font.width >= ILI9341_WIDTH) {
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	7d3a      	ldrb	r2, [r7, #20]
 80018ac:	4413      	add	r3, r2
 80018ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80018b2:	db13      	blt.n	80018dc <ILI9341_WriteString+0x4e>
			x = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80018b8:	7d7b      	ldrb	r3, [r7, #21]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	88bb      	ldrh	r3, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ILI9341_HEIGHT) {
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	7d7a      	ldrb	r2, [r7, #21]
 80018c6:	4413      	add	r3, r2
 80018c8:	2bef      	cmp	r3, #239	; 0xef
 80018ca:	dc21      	bgt.n	8001910 <ILI9341_WriteString+0x82>
				break;
			}
			if (*str == ' ') {
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d103      	bne.n	80018dc <ILI9341_WriteString+0x4e>
				// skip spaces in the beginning of the new line
				str++;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	603b      	str	r3, [r7, #0]
				continue;
 80018da:	e014      	b.n	8001906 <ILI9341_WriteString+0x78>
			}
		}
		ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	781a      	ldrb	r2, [r3, #0]
 80018e0:	88b9      	ldrh	r1, [r7, #4]
 80018e2:	88f8      	ldrh	r0, [r7, #6]
 80018e4:	8c3b      	ldrh	r3, [r7, #32]
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	8bbb      	ldrh	r3, [r7, #28]
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f7ff ff57 	bl	80017a4 <ILI9341_WriteChar>
		x += font.width;
 80018f6:	7d3b      	ldrb	r3, [r7, #20]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	4413      	add	r3, r2
 80018fe:	80fb      	strh	r3, [r7, #6]
		str++;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1cc      	bne.n	80018a8 <ILI9341_WriteString+0x1a>
 800190e:	e000      	b.n	8001912 <ILI9341_WriteString+0x84>
				break;
 8001910:	bf00      	nop
	}

	ILI9341_Unselect();
 8001912:	f7ff fb5f 	bl	8000fd4 <ILI9341_Unselect>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001920:	b002      	add	sp, #8
 8001922:	4770      	bx	lr

08001924 <ILI9341_DrawImage>:
void ILI9341_DeleteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor) {
	ILI9341_FillRectangle (x,y, strlen(str) * font.width, font.height, bgcolor);
}

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		const uint16_t *data) {
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4604      	mov	r4, r0
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4623      	mov	r3, r4
 8001934:	80fb      	strh	r3, [r7, #6]
 8001936:	4603      	mov	r3, r0
 8001938:	80bb      	strh	r3, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	807b      	strh	r3, [r7, #2]
 800193e:	4613      	mov	r3, r2
 8001940:	803b      	strh	r3, [r7, #0]
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001948:	d22c      	bcs.n	80019a4 <ILI9341_DrawImage+0x80>
 800194a:	88bb      	ldrh	r3, [r7, #4]
 800194c:	2bef      	cmp	r3, #239	; 0xef
 800194e:	d829      	bhi.n	80019a4 <ILI9341_DrawImage+0x80>
		return;
	if ((x + w - 1) >= ILI9341_WIDTH)
 8001950:	88fa      	ldrh	r2, [r7, #6]
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	4413      	add	r3, r2
 8001956:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800195a:	dc25      	bgt.n	80019a8 <ILI9341_DrawImage+0x84>
		return;
	if ((y + h - 1) >= ILI9341_HEIGHT)
 800195c:	88ba      	ldrh	r2, [r7, #4]
 800195e:	883b      	ldrh	r3, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	2bf0      	cmp	r3, #240	; 0xf0
 8001964:	dc22      	bgt.n	80019ac <ILI9341_DrawImage+0x88>
		return;

	ILI9341_Select();
 8001966:	f7ff fb25 	bl	8000fb4 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	4413      	add	r3, r2
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29c      	uxth	r4, r3
 8001976:	88ba      	ldrh	r2, [r7, #4]
 8001978:	883b      	ldrh	r3, [r7, #0]
 800197a:	4413      	add	r3, r2
 800197c:	b29b      	uxth	r3, r3
 800197e:	3b01      	subs	r3, #1
 8001980:	b29b      	uxth	r3, r3
 8001982:	88b9      	ldrh	r1, [r7, #4]
 8001984:	88f8      	ldrh	r0, [r7, #6]
 8001986:	4622      	mov	r2, r4
 8001988:	f7ff fb88 	bl	800109c <ILI9341_SetAddressWindow>
	ILI9341_WriteData((uint8_t*) data, sizeof(uint16_t) * w * h);
 800198c:	887b      	ldrh	r3, [r7, #2]
 800198e:	883a      	ldrh	r2, [r7, #0]
 8001990:	fb02 f303 	mul.w	r3, r2, r3
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4619      	mov	r1, r3
 8001998:	69b8      	ldr	r0, [r7, #24]
 800199a:	f7ff fb55 	bl	8001048 <ILI9341_WriteData>
	ILI9341_Unselect();
 800199e:	f7ff fb19 	bl	8000fd4 <ILI9341_Unselect>
 80019a2:	e004      	b.n	80019ae <ILI9341_DrawImage+0x8a>
		return;
 80019a4:	bf00      	nop
 80019a6:	e002      	b.n	80019ae <ILI9341_DrawImage+0x8a>
		return;
 80019a8:	bf00      	nop
 80019aa:	e000      	b.n	80019ae <ILI9341_DrawImage+0x8a>
		return;
 80019ac:	bf00      	nop
}
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}

080019b4 <ILI9341_DrawMonochromeImage>:

void ILI9341_DrawMonochromeImage(uint16_t x, uint16_t y, uint16_t color,
		uint16_t bgcolor, tImage image) {
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b08b      	sub	sp, #44	; 0x2c
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4604      	mov	r4, r0
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	80fb      	strh	r3, [r7, #6]
 80019c6:	4603      	mov	r3, r0
 80019c8:	80bb      	strh	r3, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	807b      	strh	r3, [r7, #2]
 80019ce:	4613      	mov	r3, r2
 80019d0:	803b      	strh	r3, [r7, #0]
	uint16_t b, devider, siz, count;
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80019d8:	d279      	bcs.n	8001ace <ILI9341_DrawMonochromeImage+0x11a>
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	2bef      	cmp	r3, #239	; 0xef
 80019de:	d876      	bhi.n	8001ace <ILI9341_DrawMonochromeImage+0x11a>
		return;
	devider = wholeDevider(image.height, 8);
 80019e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	2108      	movs	r1, #8
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 fc21 	bl	800422e <wholeDevider>
 80019ec:	4603      	mov	r3, r0
 80019ee:	82fb      	strh	r3, [r7, #22]
	siz = devider * image.width;
 80019f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019f2:	8afa      	ldrh	r2, [r7, #22]
 80019f4:	fb12 f303 	smulbb	r3, r2, r3
 80019f8:	82bb      	strh	r3, [r7, #20]
	ILI9341_Select();
 80019fa:	f7ff fadb 	bl	8000fb4 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + image.width - 1, y + image.height - 1);
 80019fe:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	4413      	add	r3, r2
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29c      	uxth	r4, r3
 8001a0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001a0c:	88bb      	ldrh	r3, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	88b9      	ldrh	r1, [r7, #4]
 8001a18:	88f8      	ldrh	r0, [r7, #6]
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	f7ff fb3e 	bl	800109c <ILI9341_SetAddressWindow>

	for (int i = 0; i < siz; i += devider) {
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	e04c      	b.n	8001ac0 <ILI9341_DrawMonochromeImage+0x10c>
		count = image.width;
 8001a26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001a28:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (int u = 0; u < devider; u++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e03f      	b.n	8001ab0 <ILI9341_DrawMonochromeImage+0xfc>
			b = image.data[i + u];
 8001a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a32:	6a39      	ldr	r1, [r7, #32]
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	440a      	add	r2, r1
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	827b      	strh	r3, [r7, #18]
			for (int j = 0; j < 8; j++) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	e02d      	b.n	8001aa0 <ILI9341_DrawMonochromeImage+0xec>
				if (count == 0) break;
 8001a44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d02e      	beq.n	8001aa8 <ILI9341_DrawMonochromeImage+0xf4>
				count --;
 8001a4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	84fb      	strh	r3, [r7, #38]	; 0x26
				if ((b << j) & 0x80) {
 8001a50:	8a7a      	ldrh	r2, [r7, #18]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00e      	beq.n	8001a7e <ILI9341_DrawMonochromeImage+0xca>
					uint8_t data[] = { color >> 8, color & 0xFF };
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	743b      	strb	r3, [r7, #16]
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	747b      	strb	r3, [r7, #17]
					ILI9341_WriteData(data, sizeof(data));
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	2102      	movs	r1, #2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fae6 	bl	8001048 <ILI9341_WriteData>
 8001a7c:	e00d      	b.n	8001a9a <ILI9341_DrawMonochromeImage+0xe6>
				} else {
					uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001a7e:	883b      	ldrh	r3, [r7, #0]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	733b      	strb	r3, [r7, #12]
 8001a88:	883b      	ldrh	r3, [r7, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	737b      	strb	r3, [r7, #13]
					ILI9341_WriteData(data, sizeof(data));
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2102      	movs	r1, #2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fad7 	bl	8001048 <ILI9341_WriteData>
			for (int j = 0; j < 8; j++) {
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b07      	cmp	r3, #7
 8001aa4:	ddce      	ble.n	8001a44 <ILI9341_DrawMonochromeImage+0x90>
 8001aa6:	e000      	b.n	8001aaa <ILI9341_DrawMonochromeImage+0xf6>
				if (count == 0) break;
 8001aa8:	bf00      	nop
		for (int u = 0; u < devider; u++) {
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3301      	adds	r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	8afb      	ldrh	r3, [r7, #22]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbbb      	blt.n	8001a30 <ILI9341_DrawMonochromeImage+0x7c>
	for (int i = 0; i < siz; i += devider) {
 8001ab8:	8afb      	ldrh	r3, [r7, #22]
 8001aba:	6a3a      	ldr	r2, [r7, #32]
 8001abc:	4413      	add	r3, r2
 8001abe:	623b      	str	r3, [r7, #32]
 8001ac0:	8abb      	ldrh	r3, [r7, #20]
 8001ac2:	6a3a      	ldr	r2, [r7, #32]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbae      	blt.n	8001a26 <ILI9341_DrawMonochromeImage+0x72>
				}
			}
		}
	}
	ILI9341_Unselect();
 8001ac8:	f7ff fa84 	bl	8000fd4 <ILI9341_Unselect>
 8001acc:	e000      	b.n	8001ad0 <ILI9341_DrawMonochromeImage+0x11c>
		return;
 8001ace:	bf00      	nop
}
 8001ad0:	372c      	adds	r7, #44	; 0x2c
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd90      	pop	{r4, r7, pc}

08001ad6 <writeFastVLine>:
 @param    x   Top-most x coordinate
 @param    y   Top-most y coordinate
 @param    h   Height in pixels
 @param    color 16-bit 5-6-5 Color to fill with
 **************************************************************************/
void writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001ad6:	b590      	push	{r4, r7, lr}
 8001ad8:	b085      	sub	sp, #20
 8001ada:	af02      	add	r7, sp, #8
 8001adc:	4604      	mov	r4, r0
 8001ade:	4608      	mov	r0, r1
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4623      	mov	r3, r4
 8001ae6:	80fb      	strh	r3, [r7, #6]
 8001ae8:	4603      	mov	r3, r0
 8001aea:	80bb      	strh	r3, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	803b      	strh	r3, [r7, #0]
	ILI9341_Select();
 8001af4:	f7ff fa5e 	bl	8000fb4 <ILI9341_Select>
	ILI9341_FillRectangle(x, y, 1, h, color);
 8001af8:	88f8      	ldrh	r0, [r7, #6]
 8001afa:	88b9      	ldrh	r1, [r7, #4]
 8001afc:	887a      	ldrh	r2, [r7, #2]
 8001afe:	883b      	ldrh	r3, [r7, #0]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	4613      	mov	r3, r2
 8001b04:	2201      	movs	r2, #1
 8001b06:	f7ff fc79 	bl	80013fc <ILI9341_FillRectangle>
	//writeLine(x, y, x, y + h - 1, color);
	ILI9341_Unselect();
 8001b0a:	f7ff fa63 	bl	8000fd4 <ILI9341_Unselect>
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd90      	pop	{r4, r7, pc}

08001b16 <writeFastHLine>:
 @param    x   Left-most x coordinate
 @param    y   Left-most y coordinate
 @param    w   Width in pixels
 @param    color 16-bit 5-6-5 Color to fill with
 **************************************************************************/
void writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8001b16:	b590      	push	{r4, r7, lr}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af02      	add	r7, sp, #8
 8001b1c:	4604      	mov	r4, r0
 8001b1e:	4608      	mov	r0, r1
 8001b20:	4611      	mov	r1, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	4623      	mov	r3, r4
 8001b26:	80fb      	strh	r3, [r7, #6]
 8001b28:	4603      	mov	r3, r0
 8001b2a:	80bb      	strh	r3, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	803b      	strh	r3, [r7, #0]
	ILI9341_Select();
 8001b34:	f7ff fa3e 	bl	8000fb4 <ILI9341_Select>
	ILI9341_FillRectangle(x, y, w, 1, color);
 8001b38:	88f8      	ldrh	r0, [r7, #6]
 8001b3a:	88b9      	ldrh	r1, [r7, #4]
 8001b3c:	887a      	ldrh	r2, [r7, #2]
 8001b3e:	883b      	ldrh	r3, [r7, #0]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	f7ff fc5a 	bl	80013fc <ILI9341_FillRectangle>
	//writeLine(x, y, x + w - 1, y, color);
	ILI9341_Unselect();
 8001b48:	f7ff fa44 	bl	8000fd4 <ILI9341_Unselect>
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd90      	pop	{r4, r7, pc}

08001b54 <drawRect>:
 @param    y   Top left corner y coordinate
 @param    w   Width in pixels
 @param    h   Height in pixels
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	4608      	mov	r0, r1
 8001b5e:	4611      	mov	r1, r2
 8001b60:	461a      	mov	r2, r3
 8001b62:	4623      	mov	r3, r4
 8001b64:	80fb      	strh	r3, [r7, #6]
 8001b66:	4603      	mov	r3, r0
 8001b68:	80bb      	strh	r3, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	807b      	strh	r3, [r7, #2]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	803b      	strh	r3, [r7, #0]
	writeFastHLine(x, y, w, color);
 8001b72:	8b3b      	ldrh	r3, [r7, #24]
 8001b74:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001b78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b7c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b80:	f7ff ffc9 	bl	8001b16 <writeFastHLine>
	writeFastHLine(x, y + h - 1, w, color);
 8001b84:	88ba      	ldrh	r2, [r7, #4]
 8001b86:	883b      	ldrh	r3, [r7, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	b219      	sxth	r1, r3
 8001b92:	8b3b      	ldrh	r3, [r7, #24]
 8001b94:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001b98:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b9c:	f7ff ffbb 	bl	8001b16 <writeFastHLine>
	writeFastVLine(x, y, h, color);
 8001ba0:	8b3b      	ldrh	r3, [r7, #24]
 8001ba2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001ba6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001baa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bae:	f7ff ff92 	bl	8001ad6 <writeFastVLine>
	writeFastVLine(x + w - 1, y, h, color);
 8001bb2:	88fa      	ldrh	r2, [r7, #6]
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b218      	sxth	r0, r3
 8001bc0:	8b3b      	ldrh	r3, [r7, #24]
 8001bc2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001bc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001bca:	f7ff ff84 	bl	8001ad6 <writeFastVLine>
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}

08001bd6 <drawCircleHelper>:
 @param    r   Radius of circle
 @param    cornername  Mask bit #1 or bit #2 to indicate which quarters of the circle we're doing
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
 8001bd6:	b590      	push	{r4, r7, lr}
 8001bd8:	b087      	sub	sp, #28
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4604      	mov	r4, r0
 8001bde:	4608      	mov	r0, r1
 8001be0:	4611      	mov	r1, r2
 8001be2:	461a      	mov	r2, r3
 8001be4:	4623      	mov	r3, r4
 8001be6:	80fb      	strh	r3, [r7, #6]
 8001be8:	4603      	mov	r3, r0
 8001bea:	80bb      	strh	r3, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001bf4:	887b      	ldrh	r3, [r7, #2]
 8001bf6:	f1c3 0301 	rsb	r3, r3, #1
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	461a      	mov	r2, r3
 8001c06:	03d2      	lsls	r2, r2, #15
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8001c18:	e095      	b.n	8001d46 <drawCircleHelper+0x170>
		if (f >= 0) {
 8001c1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0e      	blt.n	8001c40 <drawCircleHelper+0x6a>
			y--;
 8001c22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001c2e:	8a7b      	ldrh	r3, [r7, #18]
 8001c30:	3302      	adds	r3, #2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001c36:	8afa      	ldrh	r2, [r7, #22]
 8001c38:	8a7b      	ldrh	r3, [r7, #18]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8001c40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8001c4c:	8abb      	ldrh	r3, [r7, #20]
 8001c4e:	3302      	adds	r3, #2
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001c54:	8afa      	ldrh	r2, [r7, #22]
 8001c56:	8abb      	ldrh	r3, [r7, #20]
 8001c58:	4413      	add	r3, r2
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8001c5e:	787b      	ldrb	r3, [r7, #1]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d017      	beq.n	8001c98 <drawCircleHelper+0xc2>
			ILI9341_DrawPixel(x0 + x, y0 + y, color);
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	8a3b      	ldrh	r3, [r7, #16]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b298      	uxth	r0, r3
 8001c70:	88ba      	ldrh	r2, [r7, #4]
 8001c72:	89fb      	ldrh	r3, [r7, #14]
 8001c74:	4413      	add	r3, r2
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7ff fb8c 	bl	8001398 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 + y, y0 + x, color);
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	4413      	add	r3, r2
 8001c86:	b298      	uxth	r0, r3
 8001c88:	88ba      	ldrh	r2, [r7, #4]
 8001c8a:	8a3b      	ldrh	r3, [r7, #16]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7ff fb80 	bl	8001398 <ILI9341_DrawPixel>
		}
		if (cornername & 0x2) {
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d017      	beq.n	8001cd2 <drawCircleHelper+0xfc>
			ILI9341_DrawPixel(x0 + x, y0 - y, color);
 8001ca2:	88fa      	ldrh	r2, [r7, #6]
 8001ca4:	8a3b      	ldrh	r3, [r7, #16]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b298      	uxth	r0, r3
 8001caa:	88ba      	ldrh	r2, [r7, #4]
 8001cac:	89fb      	ldrh	r3, [r7, #14]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7ff fb6f 	bl	8001398 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 + y, y0 - x, color);
 8001cba:	88fa      	ldrh	r2, [r7, #6]
 8001cbc:	89fb      	ldrh	r3, [r7, #14]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	b298      	uxth	r0, r3
 8001cc2:	88ba      	ldrh	r2, [r7, #4]
 8001cc4:	8a3b      	ldrh	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7ff fb63 	bl	8001398 <ILI9341_DrawPixel>
		}
		if (cornername & 0x8) {
 8001cd2:	787b      	ldrb	r3, [r7, #1]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d017      	beq.n	8001d0c <drawCircleHelper+0x136>
			ILI9341_DrawPixel(x0 - y, y0 + x, color);
 8001cdc:	88fa      	ldrh	r2, [r7, #6]
 8001cde:	89fb      	ldrh	r3, [r7, #14]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b298      	uxth	r0, r3
 8001ce4:	88ba      	ldrh	r2, [r7, #4]
 8001ce6:	8a3b      	ldrh	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f7ff fb52 	bl	8001398 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 - x, y0 + y, color);
 8001cf4:	88fa      	ldrh	r2, [r7, #6]
 8001cf6:	8a3b      	ldrh	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	b298      	uxth	r0, r3
 8001cfc:	88ba      	ldrh	r2, [r7, #4]
 8001cfe:	89fb      	ldrh	r3, [r7, #14]
 8001d00:	4413      	add	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7ff fb46 	bl	8001398 <ILI9341_DrawPixel>
		}
		if (cornername & 0x1) {
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d017      	beq.n	8001d46 <drawCircleHelper+0x170>
			ILI9341_DrawPixel(x0 - y, y0 - x, color);
 8001d16:	88fa      	ldrh	r2, [r7, #6]
 8001d18:	89fb      	ldrh	r3, [r7, #14]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	b298      	uxth	r0, r3
 8001d1e:	88ba      	ldrh	r2, [r7, #4]
 8001d20:	8a3b      	ldrh	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7ff fb35 	bl	8001398 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 - x, y0 - y, color);
 8001d2e:	88fa      	ldrh	r2, [r7, #6]
 8001d30:	8a3b      	ldrh	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	b298      	uxth	r0, r3
 8001d36:	88ba      	ldrh	r2, [r7, #4]
 8001d38:	89fb      	ldrh	r3, [r7, #14]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7ff fb29 	bl	8001398 <ILI9341_DrawPixel>
	while (x < y) {
 8001d46:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001d4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	f6ff af63 	blt.w	8001c1a <drawCircleHelper+0x44>
		}
	}
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd90      	pop	{r4, r7, pc}

08001d5e <fillCircleHelper>:
 @param  corners  Mask bits indicating which quarters we're doing
 @param  delta    Offset from center-point, used for round-rects
 @param  color    16-bit 5-6-5 Color to fill with
 **************************************************************************/
void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners,
		int16_t delta, uint16_t color) {
 8001d5e:	b590      	push	{r4, r7, lr}
 8001d60:	b087      	sub	sp, #28
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4604      	mov	r4, r0
 8001d66:	4608      	mov	r0, r1
 8001d68:	4611      	mov	r1, r2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4623      	mov	r3, r4
 8001d6e:	80fb      	strh	r3, [r7, #6]
 8001d70:	4603      	mov	r3, r0
 8001d72:	80bb      	strh	r3, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001d7c:	887b      	ldrh	r3, [r7, #2]
 8001d7e:	f1c3 0301 	rsb	r3, r3, #1
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	03d2      	lsls	r2, r2, #15
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	81fb      	strh	r3, [r7, #14]
	int16_t px = x;
 8001da0:	8a3b      	ldrh	r3, [r7, #16]
 8001da2:	81bb      	strh	r3, [r7, #12]
	int16_t py = y;
 8001da4:	89fb      	ldrh	r3, [r7, #14]
 8001da6:	817b      	strh	r3, [r7, #10]

	delta++; // Avoid some +1's in the loop
 8001da8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3301      	adds	r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	853b      	strh	r3, [r7, #40]	; 0x28

	while (x < y) {
 8001db4:	e095      	b.n	8001ee2 <fillCircleHelper+0x184>
		if (f >= 0) {
 8001db6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0e      	blt.n	8001ddc <fillCircleHelper+0x7e>
			y--;
 8001dbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001dca:	8a7b      	ldrh	r3, [r7, #18]
 8001dcc:	3302      	adds	r3, #2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001dd2:	8afa      	ldrh	r2, [r7, #22]
 8001dd4:	8a7b      	ldrh	r3, [r7, #18]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8001ddc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8001de8:	8abb      	ldrh	r3, [r7, #20]
 8001dea:	3302      	adds	r3, #2
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001df0:	8afa      	ldrh	r2, [r7, #22]
 8001df2:	8abb      	ldrh	r3, [r7, #20]
 8001df4:	4413      	add	r3, r2
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	82fb      	strh	r3, [r7, #22]
		// These checks avoid double-drawing certain lines, important
		// for the SSD1306 library which has an INVERT drawing mode.
		if (x < (y + 1)) {
 8001dfa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001dfe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	db31      	blt.n	8001e6a <fillCircleHelper+0x10c>
			if (corners & 1)
 8001e06:	787b      	ldrb	r3, [r7, #1]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <fillCircleHelper+0xda>
				writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 8001e10:	88fa      	ldrh	r2, [r7, #6]
 8001e12:	8a3b      	ldrh	r3, [r7, #16]
 8001e14:	4413      	add	r3, r2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	b218      	sxth	r0, r3
 8001e1a:	88ba      	ldrh	r2, [r7, #4]
 8001e1c:	89fb      	ldrh	r3, [r7, #14]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	b219      	sxth	r1, r3
 8001e24:	89fb      	ldrh	r3, [r7, #14]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e2c:	4413      	add	r3, r2
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	b21a      	sxth	r2, r3
 8001e32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e34:	f7ff fe4f 	bl	8001ad6 <writeFastVLine>
			if (corners & 2)
 8001e38:	787b      	ldrb	r3, [r7, #1]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d013      	beq.n	8001e6a <fillCircleHelper+0x10c>
				writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 8001e42:	88fa      	ldrh	r2, [r7, #6]
 8001e44:	8a3b      	ldrh	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b218      	sxth	r0, r3
 8001e4c:	88ba      	ldrh	r2, [r7, #4]
 8001e4e:	89fb      	ldrh	r3, [r7, #14]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	b219      	sxth	r1, r3
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e5e:	4413      	add	r3, r2
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	b21a      	sxth	r2, r3
 8001e64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e66:	f7ff fe36 	bl	8001ad6 <writeFastVLine>
		}
		if (y != py) {
 8001e6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d033      	beq.n	8001ede <fillCircleHelper+0x180>
			if (corners & 1)
 8001e76:	787b      	ldrb	r3, [r7, #1]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <fillCircleHelper+0x14a>
				writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 8001e80:	88fa      	ldrh	r2, [r7, #6]
 8001e82:	897b      	ldrh	r3, [r7, #10]
 8001e84:	4413      	add	r3, r2
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	b218      	sxth	r0, r3
 8001e8a:	88ba      	ldrh	r2, [r7, #4]
 8001e8c:	89bb      	ldrh	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	b219      	sxth	r1, r3
 8001e94:	89bb      	ldrh	r3, [r7, #12]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b21a      	sxth	r2, r3
 8001ea2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ea4:	f7ff fe17 	bl	8001ad6 <writeFastVLine>
			if (corners & 2)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d013      	beq.n	8001eda <fillCircleHelper+0x17c>
				writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 8001eb2:	88fa      	ldrh	r2, [r7, #6]
 8001eb4:	897b      	ldrh	r3, [r7, #10]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b218      	sxth	r0, r3
 8001ebc:	88ba      	ldrh	r2, [r7, #4]
 8001ebe:	89bb      	ldrh	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b219      	sxth	r1, r3
 8001ec6:	89bb      	ldrh	r3, [r7, #12]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ece:	4413      	add	r3, r2
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	b21a      	sxth	r2, r3
 8001ed4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ed6:	f7ff fdfe 	bl	8001ad6 <writeFastVLine>
			py = y;
 8001eda:	89fb      	ldrh	r3, [r7, #14]
 8001edc:	817b      	strh	r3, [r7, #10]
		}
		px = x;
 8001ede:	8a3b      	ldrh	r3, [r7, #16]
 8001ee0:	81bb      	strh	r3, [r7, #12]
	while (x < y) {
 8001ee2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001ee6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	f6ff af63 	blt.w	8001db6 <fillCircleHelper+0x58>
	}
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}

08001efa <drawRoundRect>:
 @param    h   Height in pixels
 @param    r   Radius of corner rounding
 @param    color 16-bit 5-6-5 Color to draw/fill with
 **************************************************************************/
void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8001efa:	b590      	push	{r4, r7, lr}
 8001efc:	b087      	sub	sp, #28
 8001efe:	af02      	add	r7, sp, #8
 8001f00:	4604      	mov	r4, r0
 8001f02:	4608      	mov	r0, r1
 8001f04:	4611      	mov	r1, r2
 8001f06:	461a      	mov	r2, r3
 8001f08:	4623      	mov	r3, r4
 8001f0a:	80fb      	strh	r3, [r7, #6]
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	80bb      	strh	r3, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
 8001f14:	4613      	mov	r3, r2
 8001f16:	803b      	strh	r3, [r7, #0]
	int16_t max_radius = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	81fb      	strh	r3, [r7, #14]
	if (w < h)
 8001f1c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f20:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	da06      	bge.n	8001f36 <drawRoundRect+0x3c>
		max_radius = w / 2;
 8001f28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f2c:	0fda      	lsrs	r2, r3, #31
 8001f2e:	4413      	add	r3, r2
 8001f30:	105b      	asrs	r3, r3, #1
 8001f32:	81fb      	strh	r3, [r7, #14]
 8001f34:	e005      	b.n	8001f42 <drawRoundRect+0x48>
	else
		max_radius = h / 2;              // 1/2 minor axis
 8001f36:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f3a:	0fda      	lsrs	r2, r3, #31
 8001f3c:	4413      	add	r3, r2
 8001f3e:	105b      	asrs	r3, r3, #1
 8001f40:	81fb      	strh	r3, [r7, #14]
	if (r > max_radius)
 8001f42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001f46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	dd01      	ble.n	8001f52 <drawRoundRect+0x58>
		r = max_radius;
 8001f4e:	89fb      	ldrh	r3, [r7, #14]
 8001f50:	843b      	strh	r3, [r7, #32]
// smarter version
	ILI9341_Select();
 8001f52:	f7ff f82f 	bl	8000fb4 <ILI9341_Select>
	writeFastHLine(x + r, y, w - 2 * r, color);         // Top
 8001f56:	88fa      	ldrh	r2, [r7, #6]
 8001f58:	8c3b      	ldrh	r3, [r7, #32]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	b218      	sxth	r0, r3
 8001f60:	887a      	ldrh	r2, [r7, #2]
 8001f62:	8c3b      	ldrh	r3, [r7, #32]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f70:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001f74:	f7ff fdcf 	bl	8001b16 <writeFastHLine>
	writeFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 8001f78:	88fa      	ldrh	r2, [r7, #6]
 8001f7a:	8c3b      	ldrh	r3, [r7, #32]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	b218      	sxth	r0, r3
 8001f82:	88ba      	ldrh	r2, [r7, #4]
 8001f84:	883b      	ldrh	r3, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	b219      	sxth	r1, r3
 8001f90:	887a      	ldrh	r2, [r7, #2]
 8001f92:	8c3b      	ldrh	r3, [r7, #32]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	b21a      	sxth	r2, r3
 8001f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fa0:	f7ff fdb9 	bl	8001b16 <writeFastHLine>
	writeFastVLine(x, y + r, h - 2 * r, color);         // Left
 8001fa4:	88ba      	ldrh	r2, [r7, #4]
 8001fa6:	8c3b      	ldrh	r3, [r7, #32]
 8001fa8:	4413      	add	r3, r2
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	b219      	sxth	r1, r3
 8001fae:	883a      	ldrh	r2, [r7, #0]
 8001fb0:	8c3b      	ldrh	r3, [r7, #32]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fbe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001fc2:	f7ff fd88 	bl	8001ad6 <writeFastVLine>
	writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b218      	sxth	r0, r3
 8001fd4:	88ba      	ldrh	r2, [r7, #4]
 8001fd6:	8c3b      	ldrh	r3, [r7, #32]
 8001fd8:	4413      	add	r3, r2
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	b219      	sxth	r1, r3
 8001fde:	883a      	ldrh	r2, [r7, #0]
 8001fe0:	8c3b      	ldrh	r3, [r7, #32]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fee:	f7ff fd72 	bl	8001ad6 <writeFastVLine>
// draw four corners
	drawCircleHelper(x + r, y + r, r, 1, color);
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	8c3b      	ldrh	r3, [r7, #32]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b218      	sxth	r0, r3
 8001ffc:	88ba      	ldrh	r2, [r7, #4]
 8001ffe:	8c3b      	ldrh	r3, [r7, #32]
 8002000:	4413      	add	r3, r2
 8002002:	b29b      	uxth	r3, r3
 8002004:	b219      	sxth	r1, r3
 8002006:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800200a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2301      	movs	r3, #1
 8002010:	f7ff fde1 	bl	8001bd6 <drawCircleHelper>
	drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8002014:	88fa      	ldrh	r2, [r7, #6]
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	4413      	add	r3, r2
 800201a:	b29a      	uxth	r2, r3
 800201c:	8c3b      	ldrh	r3, [r7, #32]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b29b      	uxth	r3, r3
 8002026:	b218      	sxth	r0, r3
 8002028:	88ba      	ldrh	r2, [r7, #4]
 800202a:	8c3b      	ldrh	r3, [r7, #32]
 800202c:	4413      	add	r3, r2
 800202e:	b29b      	uxth	r3, r3
 8002030:	b219      	sxth	r1, r3
 8002032:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2302      	movs	r3, #2
 800203c:	f7ff fdcb 	bl	8001bd6 <drawCircleHelper>
	drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8002040:	88fa      	ldrh	r2, [r7, #6]
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	4413      	add	r3, r2
 8002046:	b29a      	uxth	r2, r3
 8002048:	8c3b      	ldrh	r3, [r7, #32]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29b      	uxth	r3, r3
 8002052:	b218      	sxth	r0, r3
 8002054:	88ba      	ldrh	r2, [r7, #4]
 8002056:	883b      	ldrh	r3, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	b29a      	uxth	r2, r3
 800205c:	8c3b      	ldrh	r3, [r7, #32]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	b29b      	uxth	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	b29b      	uxth	r3, r3
 8002066:	b219      	sxth	r1, r3
 8002068:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800206c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2304      	movs	r3, #4
 8002072:	f7ff fdb0 	bl	8001bd6 <drawCircleHelper>
	drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	8c3b      	ldrh	r3, [r7, #32]
 800207a:	4413      	add	r3, r2
 800207c:	b29b      	uxth	r3, r3
 800207e:	b218      	sxth	r0, r3
 8002080:	88ba      	ldrh	r2, [r7, #4]
 8002082:	883b      	ldrh	r3, [r7, #0]
 8002084:	4413      	add	r3, r2
 8002086:	b29a      	uxth	r2, r3
 8002088:	8c3b      	ldrh	r3, [r7, #32]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29b      	uxth	r3, r3
 8002092:	b219      	sxth	r1, r3
 8002094:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2308      	movs	r3, #8
 800209e:	f7ff fd9a 	bl	8001bd6 <drawCircleHelper>
	ILI9341_Unselect();
 80020a2:	f7fe ff97 	bl	8000fd4 <ILI9341_Unselect>
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}

080020ae <drawSomePixelRoundRect>:

void drawSomePixelRoundRect(int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, int16_t countPixel, uint16_t color) {
 80020ae:	b590      	push	{r4, r7, lr}
 80020b0:	b087      	sub	sp, #28
 80020b2:	af02      	add	r7, sp, #8
 80020b4:	4604      	mov	r4, r0
 80020b6:	4608      	mov	r0, r1
 80020b8:	4611      	mov	r1, r2
 80020ba:	461a      	mov	r2, r3
 80020bc:	4623      	mov	r3, r4
 80020be:	80fb      	strh	r3, [r7, #6]
 80020c0:	4603      	mov	r3, r0
 80020c2:	80bb      	strh	r3, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	803b      	strh	r3, [r7, #0]
	if (countPixel < 1)
 80020cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	dd44      	ble.n	800215e <drawSomePixelRoundRect+0xb0>
		return;
	for (int i = 0; i < countPixel; i++) {
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e03b      	b.n	8002152 <drawSomePixelRoundRect+0xa4>
		if (i == 0) {
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d110      	bne.n	8002102 <drawSomePixelRoundRect+0x54>
			drawRoundRect(x, y, w, h, r, color);
 80020e0:	f9b7 4000 	ldrsh.w	r4, [r7]
 80020e4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80020e8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80020ec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80020f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	4623      	mov	r3, r4
 80020fc:	f7ff fefd 	bl	8001efa <drawRoundRect>
			continue;
 8002100:	e024      	b.n	800214c <drawSomePixelRoundRect+0x9e>
		}
		drawRoundRect(x + i, y + i, w - i * 2, h - i * 2, r, color);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	b29a      	uxth	r2, r3
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	4413      	add	r3, r2
 800210a:	b29b      	uxth	r3, r3
 800210c:	b218      	sxth	r0, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	b29a      	uxth	r2, r3
 8002112:	88bb      	ldrh	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	b219      	sxth	r1, r3
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	b29b      	uxth	r3, r3
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	b29b      	uxth	r3, r3
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	b29b      	uxth	r3, r3
 8002128:	b21c      	sxth	r4, r3
 800212a:	883a      	ldrh	r2, [r7, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	b29b      	uxth	r3, r3
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	b29b      	uxth	r3, r3
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	b29b      	uxth	r3, r3
 8002138:	b21a      	sxth	r2, r3
 800213a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	4613      	mov	r3, r2
 8002146:	4622      	mov	r2, r4
 8002148:	f7ff fed7 	bl	8001efa <drawRoundRect>
	for (int i = 0; i < countPixel; i++) {
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3301      	adds	r3, #1
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbbe      	blt.n	80020da <drawSomePixelRoundRect+0x2c>
 800215c:	e000      	b.n	8002160 <drawSomePixelRoundRect+0xb2>
		return;
 800215e:	bf00      	nop
	}
}
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}

08002166 <fillRect>:
 @param    y   Top left corner y coordinate
 @param    w   Width in pixels
 @param    h   Height in pixels
 @param    color 16-bit 5-6-5 Color to fill with
 **************************************************************************/
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8002166:	b590      	push	{r4, r7, lr}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	4604      	mov	r4, r0
 800216e:	4608      	mov	r0, r1
 8002170:	4611      	mov	r1, r2
 8002172:	461a      	mov	r2, r3
 8002174:	4623      	mov	r3, r4
 8002176:	80fb      	strh	r3, [r7, #6]
 8002178:	4603      	mov	r3, r0
 800217a:	80bb      	strh	r3, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	803b      	strh	r3, [r7, #0]
	for (int16_t i = x; i < x + w; i++) {
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	81fb      	strh	r3, [r7, #14]
 8002188:	e00e      	b.n	80021a8 <fillRect+0x42>
		writeFastVLine(i, y, h, color);
 800218a:	8c3b      	ldrh	r3, [r7, #32]
 800218c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002190:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002194:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002198:	f7ff fc9d 	bl	8001ad6 <writeFastVLine>
	for (int16_t i = x; i < x + w; i++) {
 800219c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	81fb      	strh	r3, [r7, #14]
 80021a8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021ac:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80021b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021b4:	440b      	add	r3, r1
 80021b6:	429a      	cmp	r2, r3
 80021b8:	dbe7      	blt.n	800218a <fillRect+0x24>
	}
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd90      	pop	{r4, r7, pc}

080021c4 <fillRoundRect>:
 @param    h   Height in pixels
 @param    r   Radius of corner rounding
 @param    color 16-bit 5-6-5 Color to draw/fill with
 **************************************************************************/
void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	4604      	mov	r4, r0
 80021cc:	4608      	mov	r0, r1
 80021ce:	4611      	mov	r1, r2
 80021d0:	461a      	mov	r2, r3
 80021d2:	4623      	mov	r3, r4
 80021d4:	80fb      	strh	r3, [r7, #6]
 80021d6:	4603      	mov	r3, r0
 80021d8:	80bb      	strh	r3, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	807b      	strh	r3, [r7, #2]
 80021de:	4613      	mov	r3, r2
 80021e0:	803b      	strh	r3, [r7, #0]
	int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80021e2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80021e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021ea:	4293      	cmp	r3, r2
 80021ec:	bfa8      	it	ge
 80021ee:	4613      	movge	r3, r2
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	0fda      	lsrs	r2, r3, #31
 80021f4:	4413      	add	r3, r2
 80021f6:	105b      	asrs	r3, r3, #1
 80021f8:	81fb      	strh	r3, [r7, #14]
	if (r > max_radius)
 80021fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80021fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002202:	429a      	cmp	r2, r3
 8002204:	dd01      	ble.n	800220a <fillRoundRect+0x46>
		r = max_radius;
 8002206:	89fb      	ldrh	r3, [r7, #14]
 8002208:	843b      	strh	r3, [r7, #32]
	ILI9341_Select();
 800220a:	f7fe fed3 	bl	8000fb4 <ILI9341_Select>
// smarter version
	fillRect(x + r, y, w - 2 * r, h, color);
 800220e:	88fa      	ldrh	r2, [r7, #6]
 8002210:	8c3b      	ldrh	r3, [r7, #32]
 8002212:	4413      	add	r3, r2
 8002214:	b29b      	uxth	r3, r3
 8002216:	b218      	sxth	r0, r3
 8002218:	887a      	ldrh	r2, [r7, #2]
 800221a:	8c3b      	ldrh	r3, [r7, #32]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	b29b      	uxth	r3, r3
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	b29b      	uxth	r3, r3
 8002224:	b21a      	sxth	r2, r3
 8002226:	f9b7 4000 	ldrsh.w	r4, [r7]
 800222a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800222e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	4623      	mov	r3, r4
 8002234:	f7ff ff97 	bl	8002166 <fillRect>
// draw four corners
	fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8002238:	88fa      	ldrh	r2, [r7, #6]
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	4413      	add	r3, r2
 800223e:	b29a      	uxth	r2, r3
 8002240:	8c3b      	ldrh	r3, [r7, #32]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	b29b      	uxth	r3, r3
 8002246:	3b01      	subs	r3, #1
 8002248:	b29b      	uxth	r3, r3
 800224a:	b218      	sxth	r0, r3
 800224c:	88ba      	ldrh	r2, [r7, #4]
 800224e:	8c3b      	ldrh	r3, [r7, #32]
 8002250:	4413      	add	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	b219      	sxth	r1, r3
 8002256:	883a      	ldrh	r2, [r7, #0]
 8002258:	8c3b      	ldrh	r3, [r7, #32]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	b29b      	uxth	r3, r3
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29b      	uxth	r3, r3
 8002266:	b21b      	sxth	r3, r3
 8002268:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800226c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800226e:	9201      	str	r2, [sp, #4]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2301      	movs	r3, #1
 8002274:	4622      	mov	r2, r4
 8002276:	f7ff fd72 	bl	8001d5e <fillCircleHelper>
	fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	8c3b      	ldrh	r3, [r7, #32]
 800227e:	4413      	add	r3, r2
 8002280:	b29b      	uxth	r3, r3
 8002282:	b218      	sxth	r0, r3
 8002284:	88ba      	ldrh	r2, [r7, #4]
 8002286:	8c3b      	ldrh	r3, [r7, #32]
 8002288:	4413      	add	r3, r2
 800228a:	b29b      	uxth	r3, r3
 800228c:	b219      	sxth	r1, r3
 800228e:	883a      	ldrh	r2, [r7, #0]
 8002290:	8c3b      	ldrh	r3, [r7, #32]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	b29b      	uxth	r3, r3
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29b      	uxth	r3, r3
 800229e:	b21b      	sxth	r3, r3
 80022a0:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80022a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022a6:	9201      	str	r2, [sp, #4]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2302      	movs	r3, #2
 80022ac:	4622      	mov	r2, r4
 80022ae:	f7ff fd56 	bl	8001d5e <fillCircleHelper>
	ILI9341_Unselect();
 80022b2:	f7fe fe8f 	bl	8000fd4 <ILI9341_Unselect>
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd90      	pop	{r4, r7, pc}

080022be <drawCircle>:
 @param    x0   Center-point x coordinate
 @param    y0   Center-point y coordinate
 @param    r   Radius of circle
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 80022be:	b590      	push	{r4, r7, lr}
 80022c0:	b087      	sub	sp, #28
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4604      	mov	r4, r0
 80022c6:	4608      	mov	r0, r1
 80022c8:	4611      	mov	r1, r2
 80022ca:	461a      	mov	r2, r3
 80022cc:	4623      	mov	r3, r4
 80022ce:	80fb      	strh	r3, [r7, #6]
 80022d0:	4603      	mov	r3, r0
 80022d2:	80bb      	strh	r3, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
 80022d8:	4613      	mov	r3, r2
 80022da:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	f1c3 0301 	rsb	r3, r3, #1
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80022e6:	2301      	movs	r3, #1
 80022e8:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	461a      	mov	r2, r3
 80022ee:	03d2      	lsls	r2, r2, #15
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	81fb      	strh	r3, [r7, #14]

	ILI9341_Select();
 8002300:	f7fe fe58 	bl	8000fb4 <ILI9341_Select>
	ILI9341_DrawPixel(x0, y0 + r, color);
 8002304:	88f8      	ldrh	r0, [r7, #6]
 8002306:	88ba      	ldrh	r2, [r7, #4]
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	4413      	add	r3, r2
 800230c:	b29b      	uxth	r3, r3
 800230e:	883a      	ldrh	r2, [r7, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	f7ff f841 	bl	8001398 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0, y0 - r, color);
 8002316:	88f8      	ldrh	r0, [r7, #6]
 8002318:	88ba      	ldrh	r2, [r7, #4]
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	b29b      	uxth	r3, r3
 8002320:	883a      	ldrh	r2, [r7, #0]
 8002322:	4619      	mov	r1, r3
 8002324:	f7ff f838 	bl	8001398 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0 + r, y0, color);
 8002328:	88fa      	ldrh	r2, [r7, #6]
 800232a:	887b      	ldrh	r3, [r7, #2]
 800232c:	4413      	add	r3, r2
 800232e:	b29b      	uxth	r3, r3
 8002330:	88b9      	ldrh	r1, [r7, #4]
 8002332:	883a      	ldrh	r2, [r7, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff f82f 	bl	8001398 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0 - r, y0, color);
 800233a:	88fa      	ldrh	r2, [r7, #6]
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	b29b      	uxth	r3, r3
 8002342:	88b9      	ldrh	r1, [r7, #4]
 8002344:	883a      	ldrh	r2, [r7, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f826 	bl	8001398 <ILI9341_DrawPixel>

	while (x < y) {
 800234c:	e081      	b.n	8002452 <drawCircle+0x194>
		if (f >= 0) {
 800234e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002352:	2b00      	cmp	r3, #0
 8002354:	db0e      	blt.n	8002374 <drawCircle+0xb6>
			y--;
 8002356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29b      	uxth	r3, r3
 8002360:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8002362:	8a7b      	ldrh	r3, [r7, #18]
 8002364:	3302      	adds	r3, #2
 8002366:	b29b      	uxth	r3, r3
 8002368:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800236a:	8afa      	ldrh	r2, [r7, #22]
 800236c:	8a7b      	ldrh	r3, [r7, #18]
 800236e:	4413      	add	r3, r2
 8002370:	b29b      	uxth	r3, r3
 8002372:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8002374:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002378:	b29b      	uxth	r3, r3
 800237a:	3301      	adds	r3, #1
 800237c:	b29b      	uxth	r3, r3
 800237e:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8002380:	8abb      	ldrh	r3, [r7, #20]
 8002382:	3302      	adds	r3, #2
 8002384:	b29b      	uxth	r3, r3
 8002386:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8002388:	8afa      	ldrh	r2, [r7, #22]
 800238a:	8abb      	ldrh	r3, [r7, #20]
 800238c:	4413      	add	r3, r2
 800238e:	b29b      	uxth	r3, r3
 8002390:	82fb      	strh	r3, [r7, #22]

		ILI9341_DrawPixel(x0 + x, y0 + y, color);
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	8a3b      	ldrh	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	b298      	uxth	r0, r3
 800239a:	88ba      	ldrh	r2, [r7, #4]
 800239c:	89fb      	ldrh	r3, [r7, #14]
 800239e:	4413      	add	r3, r2
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	883a      	ldrh	r2, [r7, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fff7 	bl	8001398 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - x, y0 + y, color);
 80023aa:	88fa      	ldrh	r2, [r7, #6]
 80023ac:	8a3b      	ldrh	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	b298      	uxth	r0, r3
 80023b2:	88ba      	ldrh	r2, [r7, #4]
 80023b4:	89fb      	ldrh	r3, [r7, #14]
 80023b6:	4413      	add	r3, r2
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	883a      	ldrh	r2, [r7, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	f7fe ffeb 	bl	8001398 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + x, y0 - y, color);
 80023c2:	88fa      	ldrh	r2, [r7, #6]
 80023c4:	8a3b      	ldrh	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	b298      	uxth	r0, r3
 80023ca:	88ba      	ldrh	r2, [r7, #4]
 80023cc:	89fb      	ldrh	r3, [r7, #14]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	883a      	ldrh	r2, [r7, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe ffdf 	bl	8001398 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - x, y0 - y, color);
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	8a3b      	ldrh	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	b298      	uxth	r0, r3
 80023e2:	88ba      	ldrh	r2, [r7, #4]
 80023e4:	89fb      	ldrh	r3, [r7, #14]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	883a      	ldrh	r2, [r7, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe ffd3 	bl	8001398 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + y, y0 + x, color);
 80023f2:	88fa      	ldrh	r2, [r7, #6]
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	4413      	add	r3, r2
 80023f8:	b298      	uxth	r0, r3
 80023fa:	88ba      	ldrh	r2, [r7, #4]
 80023fc:	8a3b      	ldrh	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	b29b      	uxth	r3, r3
 8002402:	883a      	ldrh	r2, [r7, #0]
 8002404:	4619      	mov	r1, r3
 8002406:	f7fe ffc7 	bl	8001398 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - y, y0 + x, color);
 800240a:	88fa      	ldrh	r2, [r7, #6]
 800240c:	89fb      	ldrh	r3, [r7, #14]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b298      	uxth	r0, r3
 8002412:	88ba      	ldrh	r2, [r7, #4]
 8002414:	8a3b      	ldrh	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	b29b      	uxth	r3, r3
 800241a:	883a      	ldrh	r2, [r7, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	f7fe ffbb 	bl	8001398 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + y, y0 - x, color);
 8002422:	88fa      	ldrh	r2, [r7, #6]
 8002424:	89fb      	ldrh	r3, [r7, #14]
 8002426:	4413      	add	r3, r2
 8002428:	b298      	uxth	r0, r3
 800242a:	88ba      	ldrh	r2, [r7, #4]
 800242c:	8a3b      	ldrh	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	883a      	ldrh	r2, [r7, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe ffaf 	bl	8001398 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - y, y0 - x, color);
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	89fb      	ldrh	r3, [r7, #14]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	b298      	uxth	r0, r3
 8002442:	88ba      	ldrh	r2, [r7, #4]
 8002444:	8a3b      	ldrh	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	b29b      	uxth	r3, r3
 800244a:	883a      	ldrh	r2, [r7, #0]
 800244c:	4619      	mov	r1, r3
 800244e:	f7fe ffa3 	bl	8001398 <ILI9341_DrawPixel>
	while (x < y) {
 8002452:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800245a:	429a      	cmp	r2, r3
 800245c:	f6ff af77 	blt.w	800234e <drawCircle+0x90>
	}
	ILI9341_Unselect();
 8002460:	f7fe fdb8 	bl	8000fd4 <ILI9341_Unselect>
}
 8002464:	bf00      	nop
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd90      	pop	{r4, r7, pc}

0800246c <ILI9341_ToucInit>:
uint32_t minRawY;
uint32_t maxRawY;
uint32_t minX, maxX, minY, maxY;
//------------------------------ функции ---------------------------------------------//

void ILI9341_ToucInit(void) {
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
	uint32_t *tempAdr = (uint32_t*) ADR_DATA_MIN_X;
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <ILI9341_ToucInit+0x44>)
 8002474:	607b      	str	r3, [r7, #4]
	minRawX = *tempAdr;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <ILI9341_ToucInit+0x48>)
 800247c:	6013      	str	r3, [r2, #0]
	tempAdr = (uint32_t*) ADR_DATA_MAX_X;
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <ILI9341_ToucInit+0x4c>)
 8002480:	607b      	str	r3, [r7, #4]
	maxRawX = *tempAdr;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a0d      	ldr	r2, [pc, #52]	; (80024bc <ILI9341_ToucInit+0x50>)
 8002488:	6013      	str	r3, [r2, #0]
	tempAdr = (uint32_t*) ADR_DATA_MIN_Y;
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <ILI9341_ToucInit+0x54>)
 800248c:	607b      	str	r3, [r7, #4]
	minRawY = *tempAdr;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <ILI9341_ToucInit+0x58>)
 8002494:	6013      	str	r3, [r2, #0]
	tempAdr = (uint32_t*) ADR_DATA_MAX_Y;
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <ILI9341_ToucInit+0x5c>)
 8002498:	607b      	str	r3, [r7, #4]
	maxRawY = *tempAdr;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <ILI9341_ToucInit+0x60>)
 80024a0:	6013      	str	r3, [r2, #0]
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	0807fff0 	.word	0x0807fff0
 80024b4:	20000248 	.word	0x20000248
 80024b8:	0807fff4 	.word	0x0807fff4
 80024bc:	2000024c 	.word	0x2000024c
 80024c0:	0807fff8 	.word	0x0807fff8
 80024c4:	20000250 	.word	0x20000250
 80024c8:	0807fffc 	.word	0x0807fffc
 80024cc:	20000254 	.word	0x20000254

080024d0 <ILI9341_TouchSelect>:
/**************************************************************************
 @brief     will return the modulus of the num like abs in C
 @param    num  incoming number
 **************************************************************************/
static void ILI9341_TouchSelect() {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024da:	4802      	ldr	r0, [pc, #8]	; (80024e4 <ILI9341_TouchSelect+0x14>)
 80024dc:	f003 ffe0 	bl	80064a0 <HAL_GPIO_WritePin>
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40020000 	.word	0x40020000

080024e8 <ILI9341_TouchUnselect>:
/**************************************************************************
 @brief     swaps values in variables
 @param    a  num first
 @param    a  num two
 **************************************************************************/
void ILI9341_TouchUnselect() {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 80024ec:	2201      	movs	r2, #1
 80024ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024f2:	4802      	ldr	r0, [pc, #8]	; (80024fc <ILI9341_TouchUnselect+0x14>)
 80024f4:	f003 ffd4 	bl	80064a0 <HAL_GPIO_WritePin>
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40020000 	.word	0x40020000

08002500 <ILI9341_TouchPressed>:

bool ILI9341_TouchPressed() {
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(ILI9341_TOUCH_IRQ_GPIO_Port, ILI9341_TOUCH_IRQ_Pin) == GPIO_PIN_RESET;
 8002504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <ILI9341_TouchPressed+0x20>)
 800250a:	f003 ffb1 	bl	8006470 <HAL_GPIO_ReadPin>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
}
 800251a:	4618      	mov	r0, r3
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40020000 	.word	0x40020000

08002524 <ILI9341_TouchGetCoordinates>:

bool ILI9341_TouchGetCoordinates(uint16_t *x, uint16_t *y) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b08e      	sub	sp, #56	; 0x38
 8002528:	af02      	add	r7, sp, #8
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
	static const uint8_t cmd_read_x[] = { READ_X };
	static const uint8_t cmd_read_y[] = { READ_Y };
	static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

	ILI9341_TouchSelect();
 800252e:	f7ff ffcf 	bl	80024d0 <ILI9341_TouchSelect>

	uint32_t avg_x = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t avg_y = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t nsamples = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < 16; i++) {
 8002540:	2300      	movs	r3, #0
 8002542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002546:	e04b      	b.n	80025e0 <ILI9341_TouchGetCoordinates+0xbc>
		if (!ILI9341_TouchPressed())
 8002548:	f7ff ffda 	bl	8002500 <ILI9341_TouchPressed>
 800254c:	4603      	mov	r3, r0
 800254e:	f083 0301 	eor.w	r3, r3, #1
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d148      	bne.n	80025ea <ILI9341_TouchGetCoordinates+0xc6>
			break;

		nsamples++;
 8002558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800255c:	3301      	adds	r3, #1
 800255e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8002562:	f04f 33ff 	mov.w	r3, #4294967295
 8002566:	2201      	movs	r2, #1
 8002568:	494d      	ldr	r1, [pc, #308]	; (80026a0 <ILI9341_TouchGetCoordinates+0x17c>)
 800256a:	484e      	ldr	r0, [pc, #312]	; (80026a4 <ILI9341_TouchGetCoordinates+0x180>)
 800256c:	f004 fc9f 	bl	8006eae <HAL_SPI_Transmit>
		uint8_t y_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8002570:	f107 0210 	add.w	r2, r7, #16
 8002574:	f04f 33ff 	mov.w	r3, #4294967295
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2302      	movs	r3, #2
 800257c:	494a      	ldr	r1, [pc, #296]	; (80026a8 <ILI9341_TouchGetCoordinates+0x184>)
 800257e:	4849      	ldr	r0, [pc, #292]	; (80026a4 <ILI9341_TouchGetCoordinates+0x180>)
 8002580:	f004 fdd1 	bl	8007126 <HAL_SPI_TransmitReceive>

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8002584:	f04f 33ff 	mov.w	r3, #4294967295
 8002588:	2201      	movs	r2, #1
 800258a:	4948      	ldr	r1, [pc, #288]	; (80026ac <ILI9341_TouchGetCoordinates+0x188>)
 800258c:	4845      	ldr	r0, [pc, #276]	; (80026a4 <ILI9341_TouchGetCoordinates+0x180>)
 800258e:	f004 fc8e 	bl	8006eae <HAL_SPI_Transmit>
		uint8_t x_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8002592:	f107 020c 	add.w	r2, r7, #12
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2302      	movs	r3, #2
 800259e:	4942      	ldr	r1, [pc, #264]	; (80026a8 <ILI9341_TouchGetCoordinates+0x184>)
 80025a0:	4840      	ldr	r0, [pc, #256]	; (80026a4 <ILI9341_TouchGetCoordinates+0x180>)
 80025a2:	f004 fdc0 	bl	8007126 <HAL_SPI_TransmitReceive>

		uint32_t mirrorX = ((((uint16_t) x_raw[0]) << 8) | (uint16_t) x_raw[1]);
 80025a6:	7b3b      	ldrb	r3, [r7, #12]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	7b7a      	ldrb	r2, [r7, #13]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
		avg_x += (mirrorX >> 3) & 0xFFF;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	08db      	lsrs	r3, r3, #3
 80025b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ba:	4413      	add	r3, r2
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t mirrorY = ((((uint16_t) y_raw[0]) << 8) | (uint16_t) y_raw[1]);
 80025be:	7c3b      	ldrb	r3, [r7, #16]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	7c7a      	ldrb	r2, [r7, #17]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
		avg_y += (mirrorY >> 3) & 0xFFF;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	08db      	lsrs	r3, r3, #3
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025d2:	4413      	add	r3, r2
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < 16; i++) {
 80025d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025da:	3301      	adds	r3, #1
 80025dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80025e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025e4:	2b0f      	cmp	r3, #15
 80025e6:	d9af      	bls.n	8002548 <ILI9341_TouchGetCoordinates+0x24>
 80025e8:	e000      	b.n	80025ec <ILI9341_TouchGetCoordinates+0xc8>
			break;
 80025ea:	bf00      	nop
	}

	ILI9341_TouchUnselect();
 80025ec:	f7ff ff7c 	bl	80024e8 <ILI9341_TouchUnselect>

	if (nsamples < 16)
 80025f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f4:	2b0f      	cmp	r3, #15
 80025f6:	d801      	bhi.n	80025fc <ILI9341_TouchGetCoordinates+0xd8>
		return false;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e04c      	b.n	8002696 <ILI9341_TouchGetCoordinates+0x172>

	uint32_t raw_x = (avg_x / 16);
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	623b      	str	r3, [r7, #32]
	if (raw_x < minRawX)
 8002602:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <ILI9341_TouchGetCoordinates+0x18c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a3a      	ldr	r2, [r7, #32]
 8002608:	429a      	cmp	r2, r3
 800260a:	d202      	bcs.n	8002612 <ILI9341_TouchGetCoordinates+0xee>
		raw_x = minRawX;
 800260c:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <ILI9341_TouchGetCoordinates+0x18c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	623b      	str	r3, [r7, #32]
	if (raw_x > maxRawX)
 8002612:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <ILI9341_TouchGetCoordinates+0x190>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a3a      	ldr	r2, [r7, #32]
 8002618:	429a      	cmp	r2, r3
 800261a:	d902      	bls.n	8002622 <ILI9341_TouchGetCoordinates+0xfe>
		raw_x = maxRawX;
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <ILI9341_TouchGetCoordinates+0x190>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	623b      	str	r3, [r7, #32]

	uint32_t raw_y = (avg_y / 16);
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	61fb      	str	r3, [r7, #28]
	if (raw_y < minRawY)
 8002628:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <ILI9341_TouchGetCoordinates+0x194>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	429a      	cmp	r2, r3
 8002630:	d202      	bcs.n	8002638 <ILI9341_TouchGetCoordinates+0x114>
		raw_y = minRawY;
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <ILI9341_TouchGetCoordinates+0x194>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	61fb      	str	r3, [r7, #28]
	if (raw_y > maxRawY)
 8002638:	4b20      	ldr	r3, [pc, #128]	; (80026bc <ILI9341_TouchGetCoordinates+0x198>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	429a      	cmp	r2, r3
 8002640:	d902      	bls.n	8002648 <ILI9341_TouchGetCoordinates+0x124>
		raw_y = maxRawY;
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <ILI9341_TouchGetCoordinates+0x198>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	61fb      	str	r3, [r7, #28]

	// Uncomment this line to calibrate touchscreen:
	// UART_Printf("raw_x = %d, raw_y = %d\r\n", x, y);

	*x = (raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX);
 8002648:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <ILI9341_TouchGetCoordinates+0x18c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	1ad2      	subs	r2, r2, r3
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	019b      	lsls	r3, r3, #6
 8002658:	4619      	mov	r1, r3
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <ILI9341_TouchGetCoordinates+0x190>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <ILI9341_TouchGetCoordinates+0x18c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	fbb1 f3f3 	udiv	r3, r1, r3
 8002668:	b29a      	uxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY);
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <ILI9341_TouchGetCoordinates+0x194>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	1ad2      	subs	r2, r2, r3
 8002676:	4613      	mov	r3, r2
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	4619      	mov	r1, r3
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <ILI9341_TouchGetCoordinates+0x198>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <ILI9341_TouchGetCoordinates+0x194>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	fbb1 f3f3 	udiv	r3, r1, r3
 800268e:	b29a      	uxth	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	801a      	strh	r2, [r3, #0]

	return true;
 8002694:	2301      	movs	r3, #1
}
 8002696:	4618      	mov	r0, r3
 8002698:	3730      	adds	r7, #48	; 0x30
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	080154f0 	.word	0x080154f0
 80026a4:	200003a0 	.word	0x200003a0
 80026a8:	080154f4 	.word	0x080154f4
 80026ac:	080154f8 	.word	0x080154f8
 80026b0:	20000248 	.word	0x20000248
 80026b4:	2000024c 	.word	0x2000024c
 80026b8:	20000250 	.word	0x20000250
 80026bc:	20000254 	.word	0x20000254

080026c0 <figuringData>:

void figuringData(void) {
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
	uint32_t multiplicationFactorX, multiplicationFactorY;
	minX = minX / 2;
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <figuringData+0xac>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	4a27      	ldr	r2, [pc, #156]	; (800276c <figuringData+0xac>)
 80026ce:	6013      	str	r3, [r2, #0]
	minY = minY / 2;
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <figuringData+0xb0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	4a26      	ldr	r2, [pc, #152]	; (8002770 <figuringData+0xb0>)
 80026d8:	6013      	str	r3, [r2, #0]
	maxX = maxX / 2;
 80026da:	4b26      	ldr	r3, [pc, #152]	; (8002774 <figuringData+0xb4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	4a24      	ldr	r2, [pc, #144]	; (8002774 <figuringData+0xb4>)
 80026e2:	6013      	str	r3, [r2, #0]
	maxY = maxY / 2;
 80026e4:	4b24      	ldr	r3, [pc, #144]	; (8002778 <figuringData+0xb8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <figuringData+0xb8>)
 80026ec:	6013      	str	r3, [r2, #0]
	multiplicationFactorX = (maxX - minX) / 300;   // так как у нас отступ с обоих сторон 10 то рабочая область 300
 80026ee:	4b21      	ldr	r3, [pc, #132]	; (8002774 <figuringData+0xb4>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <figuringData+0xac>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	4a20      	ldr	r2, [pc, #128]	; (800277c <figuringData+0xbc>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	607b      	str	r3, [r7, #4]
	multiplicationFactorY = (maxY - minY) / 220;   // узнаем сколько единиц тача на 1 пиксель
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <figuringData+0xb8>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <figuringData+0xb0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <figuringData+0xc0>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	603b      	str	r3, [r7, #0]
	multiplicationFactorX = multiplicationFactorX * 10;  // так как нужно узнать сколько на 10 пикселей примерно отсчетов тача
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	607b      	str	r3, [r7, #4]
	multiplicationFactorY = multiplicationFactorY * 10;
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	603b      	str	r3, [r7, #0]
	minRawX = minX - multiplicationFactorX;
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <figuringData+0xac>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	4a12      	ldr	r2, [pc, #72]	; (8002784 <figuringData+0xc4>)
 800273a:	6013      	str	r3, [r2, #0]
	maxRawX = maxX + multiplicationFactorX;
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <figuringData+0xb4>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	4a10      	ldr	r2, [pc, #64]	; (8002788 <figuringData+0xc8>)
 8002746:	6013      	str	r3, [r2, #0]
	minRawY = minY - multiplicationFactorY;
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <figuringData+0xb0>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	4a0e      	ldr	r2, [pc, #56]	; (800278c <figuringData+0xcc>)
 8002752:	6013      	str	r3, [r2, #0]
	maxRawY = maxY + multiplicationFactorY;
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <figuringData+0xb8>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4413      	add	r3, r2
 800275c:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <figuringData+0xd0>)
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	20000258 	.word	0x20000258
 8002770:	20000260 	.word	0x20000260
 8002774:	2000025c 	.word	0x2000025c
 8002778:	20000264 	.word	0x20000264
 800277c:	1b4e81b5 	.word	0x1b4e81b5
 8002780:	094f2095 	.word	0x094f2095
 8002784:	20000248 	.word	0x20000248
 8002788:	2000024c 	.word	0x2000024c
 800278c:	20000250 	.word	0x20000250
 8002790:	20000254 	.word	0x20000254

08002794 <calibTouch>:

uint8_t calibTouch(uint8_t poz) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b08e      	sub	sp, #56	; 0x38
 8002798:	af02      	add	r7, sp, #8
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
	static const uint8_t cmd_read_x[] = { READ_X };
	static const uint8_t cmd_read_y[] = { READ_Y };
	static const uint8_t zeroes_tx[] = { 0x00, 0x00 };
	repit: while (!ILI9341_TouchPressed())
 800279e:	e001      	b.n	80027a4 <calibTouch+0x10>
		ILI9341_TouchSelect();
 80027a0:	f7ff fe96 	bl	80024d0 <ILI9341_TouchSelect>
	repit: while (!ILI9341_TouchPressed())
 80027a4:	f7ff feac 	bl	8002500 <ILI9341_TouchPressed>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f083 0301 	eor.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f5      	bne.n	80027a0 <calibTouch+0xc>
	uint32_t avg_x = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t avg_y = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t nsamples = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < 16; i++) {
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80027c8:	e04b      	b.n	8002862 <calibTouch+0xce>
		if (!ILI9341_TouchPressed())
 80027ca:	f7ff fe99 	bl	8002500 <ILI9341_TouchPressed>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d148      	bne.n	800286c <calibTouch+0xd8>
			break;
		nsamples++;
 80027da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027de:	3301      	adds	r3, #1
 80027e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	2201      	movs	r2, #1
 80027ea:	4981      	ldr	r1, [pc, #516]	; (80029f0 <calibTouch+0x25c>)
 80027ec:	4881      	ldr	r0, [pc, #516]	; (80029f4 <calibTouch+0x260>)
 80027ee:	f004 fb5e 	bl	8006eae <HAL_SPI_Transmit>
		uint8_t y_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 80027f2:	f107 0210 	add.w	r2, r7, #16
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2302      	movs	r3, #2
 80027fe:	497e      	ldr	r1, [pc, #504]	; (80029f8 <calibTouch+0x264>)
 8002800:	487c      	ldr	r0, [pc, #496]	; (80029f4 <calibTouch+0x260>)
 8002802:	f004 fc90 	bl	8007126 <HAL_SPI_TransmitReceive>

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	2201      	movs	r2, #1
 800280c:	497b      	ldr	r1, [pc, #492]	; (80029fc <calibTouch+0x268>)
 800280e:	4879      	ldr	r0, [pc, #484]	; (80029f4 <calibTouch+0x260>)
 8002810:	f004 fb4d 	bl	8006eae <HAL_SPI_Transmit>
		uint8_t x_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8002814:	f107 020c 	add.w	r2, r7, #12
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2302      	movs	r3, #2
 8002820:	4975      	ldr	r1, [pc, #468]	; (80029f8 <calibTouch+0x264>)
 8002822:	4874      	ldr	r0, [pc, #464]	; (80029f4 <calibTouch+0x260>)
 8002824:	f004 fc7f 	bl	8007126 <HAL_SPI_TransmitReceive>

		uint32_t mirrorX = ((((uint16_t) x_raw[0]) << 8) | (uint16_t) x_raw[1]);
 8002828:	7b3b      	ldrb	r3, [r7, #12]
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	7b7a      	ldrb	r2, [r7, #13]
 800282e:	4313      	orrs	r3, r2
 8002830:	623b      	str	r3, [r7, #32]
		avg_x += (mirrorX >> 3) & 0xFFF;
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	08db      	lsrs	r3, r3, #3
 8002836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283c:	4413      	add	r3, r2
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t mirrorY = ((((uint16_t) y_raw[0]) << 8) | (uint16_t) y_raw[1]);
 8002840:	7c3b      	ldrb	r3, [r7, #16]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	7c7a      	ldrb	r2, [r7, #17]
 8002846:	4313      	orrs	r3, r2
 8002848:	61fb      	str	r3, [r7, #28]
		avg_y += (mirrorY >> 3) & 0xFFF;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	08db      	lsrs	r3, r3, #3
 800284e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002854:	4413      	add	r3, r2
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < 16; i++) {
 8002858:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800285c:	3301      	adds	r3, #1
 800285e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002862:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002866:	2b0f      	cmp	r3, #15
 8002868:	d9af      	bls.n	80027ca <calibTouch+0x36>
 800286a:	e000      	b.n	800286e <calibTouch+0xda>
			break;
 800286c:	bf00      	nop
	}
	ILI9341_TouchUnselect();
 800286e:	f7ff fe3b 	bl	80024e8 <ILI9341_TouchUnselect>
	if (nsamples < 16)
 8002872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002876:	2b0f      	cmp	r3, #15
 8002878:	d800      	bhi.n	800287c <calibTouch+0xe8>
		goto repit;
 800287a:	e790      	b.n	800279e <calibTouch+0xa>
	uint32_t raw_x = (avg_x / 16);
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	61bb      	str	r3, [r7, #24]
	uint32_t raw_y = (avg_y / 16);
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	617b      	str	r3, [r7, #20]
	switch (poz) {
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	2b04      	cmp	r3, #4
 800288c:	f200 80aa 	bhi.w	80029e4 <calibTouch+0x250>
 8002890:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <calibTouch+0x104>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028ad 	.word	0x080028ad
 800289c:	080028c1 	.word	0x080028c1
 80028a0:	080028db 	.word	0x080028db
 80028a4:	080028f5 	.word	0x080028f5
 80028a8:	08002919 	.word	0x08002919
	case LEFTUP:
		minX = raw_x;
 80028ac:	4a54      	ldr	r2, [pc, #336]	; (8002a00 <calibTouch+0x26c>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	6013      	str	r3, [r2, #0]
		minY = raw_y;
 80028b2:	4a54      	ldr	r2, [pc, #336]	; (8002a04 <calibTouch+0x270>)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
 80028b8:	2064      	movs	r0, #100	; 0x64
 80028ba:	f001 fcf9 	bl	80042b0 <buzzerSet>
		break;
 80028be:	e091      	b.n	80029e4 <calibTouch+0x250>
	case RIGHTUP:
		maxX = raw_x;
 80028c0:	4a51      	ldr	r2, [pc, #324]	; (8002a08 <calibTouch+0x274>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	6013      	str	r3, [r2, #0]
		minY += raw_y;
 80028c6:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <calibTouch+0x270>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	4413      	add	r3, r2
 80028ce:	4a4d      	ldr	r2, [pc, #308]	; (8002a04 <calibTouch+0x270>)
 80028d0:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
 80028d2:	2064      	movs	r0, #100	; 0x64
 80028d4:	f001 fcec 	bl	80042b0 <buzzerSet>
		break;
 80028d8:	e084      	b.n	80029e4 <calibTouch+0x250>
	case LEFTDOWN:
		minX += raw_x;
 80028da:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <calibTouch+0x26c>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a47      	ldr	r2, [pc, #284]	; (8002a00 <calibTouch+0x26c>)
 80028e4:	6013      	str	r3, [r2, #0]
		maxY = raw_y;
 80028e6:	4a49      	ldr	r2, [pc, #292]	; (8002a0c <calibTouch+0x278>)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
 80028ec:	2064      	movs	r0, #100	; 0x64
 80028ee:	f001 fcdf 	bl	80042b0 <buzzerSet>
		break;
 80028f2:	e077      	b.n	80029e4 <calibTouch+0x250>
	case RIGHTDOWN:
		maxX += raw_x;
 80028f4:	4b44      	ldr	r3, [pc, #272]	; (8002a08 <calibTouch+0x274>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	4a42      	ldr	r2, [pc, #264]	; (8002a08 <calibTouch+0x274>)
 80028fe:	6013      	str	r3, [r2, #0]
		maxY += raw_y;
 8002900:	4b42      	ldr	r3, [pc, #264]	; (8002a0c <calibTouch+0x278>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	4413      	add	r3, r2
 8002908:	4a40      	ldr	r2, [pc, #256]	; (8002a0c <calibTouch+0x278>)
 800290a:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
 800290c:	2064      	movs	r0, #100	; 0x64
 800290e:	f001 fccf 	bl	80042b0 <buzzerSet>
		figuringData();
 8002912:	f7ff fed5 	bl	80026c0 <figuringData>
		break;
 8002916:	e065      	b.n	80029e4 <calibTouch+0x250>
	case CHECKCALIB:
		buzzerSet(100);
 8002918:	2064      	movs	r0, #100	; 0x64
 800291a:	f001 fcc9 	bl	80042b0 <buzzerSet>
		if ((((raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY)) < 125 && ((raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY)) > 115) \
 800291e:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <calibTouch+0x27c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	1ad2      	subs	r2, r2, r3
 8002926:	4613      	mov	r3, r2
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	4619      	mov	r1, r3
 8002930:	4b38      	ldr	r3, [pc, #224]	; (8002a14 <calibTouch+0x280>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <calibTouch+0x27c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	fbb1 f3f3 	udiv	r3, r1, r3
 800293e:	2b7c      	cmp	r3, #124	; 0x7c
 8002940:	d84e      	bhi.n	80029e0 <calibTouch+0x24c>
 8002942:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <calibTouch+0x27c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	1ad2      	subs	r2, r2, r3
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	4619      	mov	r1, r3
 8002954:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <calibTouch+0x280>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <calibTouch+0x27c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002962:	2b73      	cmp	r3, #115	; 0x73
 8002964:	d93c      	bls.n	80029e0 <calibTouch+0x24c>
		&& (((raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX)) < 165 && ((raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX)) > 155)){
 8002966:	4b2c      	ldr	r3, [pc, #176]	; (8002a18 <calibTouch+0x284>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	1ad2      	subs	r2, r2, r3
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	019b      	lsls	r3, r3, #6
 8002976:	4619      	mov	r1, r3
 8002978:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <calibTouch+0x288>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <calibTouch+0x284>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	fbb1 f3f3 	udiv	r3, r1, r3
 8002986:	2ba4      	cmp	r3, #164	; 0xa4
 8002988:	d82a      	bhi.n	80029e0 <calibTouch+0x24c>
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <calibTouch+0x284>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	1ad2      	subs	r2, r2, r3
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	019b      	lsls	r3, r3, #6
 800299a:	4619      	mov	r1, r3
 800299c:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <calibTouch+0x288>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <calibTouch+0x284>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029aa:	2b9b      	cmp	r3, #155	; 0x9b
 80029ac:	d918      	bls.n	80029e0 <calibTouch+0x24c>
			writeDataToMemory (ADR_DATA_MIN_X, minRawX);
 80029ae:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <calibTouch+0x284>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4619      	mov	r1, r3
 80029b4:	481a      	ldr	r0, [pc, #104]	; (8002a20 <calibTouch+0x28c>)
 80029b6:	f001 fc99 	bl	80042ec <writeDataToMemory>
			writeDataToMemory (ADR_DATA_MAX_X, maxRawX);
 80029ba:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <calibTouch+0x288>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	4818      	ldr	r0, [pc, #96]	; (8002a24 <calibTouch+0x290>)
 80029c2:	f001 fc93 	bl	80042ec <writeDataToMemory>
			writeDataToMemory (ADR_DATA_MIN_Y, minRawY);
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <calibTouch+0x27c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4619      	mov	r1, r3
 80029cc:	4816      	ldr	r0, [pc, #88]	; (8002a28 <calibTouch+0x294>)
 80029ce:	f001 fc8d 	bl	80042ec <writeDataToMemory>
			writeDataToMemory (ADR_DATA_MAX_Y, maxRawY);
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <calibTouch+0x280>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4619      	mov	r1, r3
 80029d8:	4814      	ldr	r0, [pc, #80]	; (8002a2c <calibTouch+0x298>)
 80029da:	f001 fc87 	bl	80042ec <writeDataToMemory>
		} else {
			return false;
		}
		break;
 80029de:	e001      	b.n	80029e4 <calibTouch+0x250>
			return false;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e000      	b.n	80029e6 <calibTouch+0x252>
	}
	return true;
 80029e4:	2301      	movs	r3, #1
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3730      	adds	r7, #48	; 0x30
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	080154fc 	.word	0x080154fc
 80029f4:	200003a0 	.word	0x200003a0
 80029f8:	08015500 	.word	0x08015500
 80029fc:	08015504 	.word	0x08015504
 8002a00:	20000258 	.word	0x20000258
 8002a04:	20000260 	.word	0x20000260
 8002a08:	2000025c 	.word	0x2000025c
 8002a0c:	20000264 	.word	0x20000264
 8002a10:	20000250 	.word	0x20000250
 8002a14:	20000254 	.word	0x20000254
 8002a18:	20000248 	.word	0x20000248
 8002a1c:	2000024c 	.word	0x2000024c
 8002a20:	0807fff0 	.word	0x0807fff0
 8002a24:	0807fff4 	.word	0x0807fff4
 8002a28:	0807fff8 	.word	0x0807fff8
 8002a2c:	0807fffc 	.word	0x0807fffc

08002a30 <screenSaver>:
char *unitFreq[3] = { "Hz ", "kHz", "MHz", };
uint32_t multiplicationFreq[3] = { 1000000, 1000, 1 };
uint16_t x, y, countSpeed = 1;
uint32_t timBigArea = 0, timButtonPress = 0, timHoldButtonPress = 0;
//------------------------------ функции ---------------------------------------------//
void screenSaver (void) {                                                                      // заставка
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af04      	add	r7, sp, #16
	ILI9341_FillScreen(ILI9341_BLACK);                                                         // очистить экран
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7fe fd4a 	bl	80014d0 <ILI9341_FillScreen>
	strcpy(bufSpi, "PULSE");                                                                   // написать название
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <screenSaver+0x94>)
 8002a3e:	4a22      	ldr	r2, [pc, #136]	; (8002ac8 <screenSaver+0x98>)
 8002a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a44:	6018      	str	r0, [r3, #0]
 8002a46:	3304      	adds	r3, #4
 8002a48:	8019      	strh	r1, [r3, #0]
	ILI9341_WriteMyString(105, 76, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <screenSaver+0x94>)
 8002a54:	214c      	movs	r1, #76	; 0x4c
 8002a56:	2069      	movs	r0, #105	; 0x69
 8002a58:	f7fe fe42 	bl	80016e0 <ILI9341_WriteMyString>
	strcpy(bufSpi, "GENERATOR");
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <screenSaver+0x94>)
 8002a5e:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <screenSaver+0x9c>)
 8002a60:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a62:	c303      	stmia	r3!, {r0, r1}
 8002a64:	801a      	strh	r2, [r3, #0]
	ILI9341_WriteMyString(65, 120, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
 8002a66:	2300      	movs	r3, #0
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a6e:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <screenSaver+0x94>)
 8002a70:	2178      	movs	r1, #120	; 0x78
 8002a72:	2041      	movs	r0, #65	; 0x41
 8002a74:	f7fe fe34 	bl	80016e0 <ILI9341_WriteMyString>
	ILI9341_WriteString(250, 220, "Ver1.1", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <screenSaver+0xa0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	9202      	str	r2, [sp, #8]
 8002a7e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002a82:	9201      	str	r2, [sp, #4]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	9200      	str	r2, [sp, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <screenSaver+0xa4>)
 8002a8c:	21dc      	movs	r1, #220	; 0xdc
 8002a8e:	20fa      	movs	r0, #250	; 0xfa
 8002a90:	f7fe fefd 	bl	800188e <ILI9341_WriteString>
	drawSomePixelRoundRect(40, 66, 240, 108, 4, 2, ILI9341_YELLOW);
 8002a94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a98:	9302      	str	r3, [sp, #8]
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	236c      	movs	r3, #108	; 0x6c
 8002aa4:	22f0      	movs	r2, #240	; 0xf0
 8002aa6:	2142      	movs	r1, #66	; 0x42
 8002aa8:	2028      	movs	r0, #40	; 0x28
 8002aaa:	f7ff fb00 	bl	80020ae <drawSomePixelRoundRect>
	HAL_Delay(2000);
 8002aae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ab2:	f002 fa75 	bl	8004fa0 <HAL_Delay>
	buzzerSet(100);                                                                            // пикнуть
 8002ab6:	2064      	movs	r0, #100	; 0x64
 8002ab8:	f001 fbfa 	bl	80042b0 <buzzerSet>
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000268 	.word	0x20000268
 8002ac8:	0800ae48 	.word	0x0800ae48
 8002acc:	0800ae50 	.word	0x0800ae50
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	0800ae5c 	.word	0x0800ae5c

08002ad8 <GUICalibration>:

void GUICalibration(uint8_t pozition) {                                                        // калибровка графическое отображение
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af04      	add	r7, sp, #16
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
	switch (pozition) {
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	2b06      	cmp	r3, #6
 8002ae6:	f200 8100 	bhi.w	8002cea <GUICalibration+0x212>
 8002aea:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <GUICalibration+0x18>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b0d 	.word	0x08002b0d
 8002af4:	08002b69 	.word	0x08002b69
 8002af8:	08002b9b 	.word	0x08002b9b
 8002afc:	08002bcb 	.word	0x08002bcb
 8002b00:	08002bfd 	.word	0x08002bfd
 8002b04:	08002c6b 	.word	0x08002c6b
 8002b08:	08002cab 	.word	0x08002cab
	case LEFTUP:                                                                               // левая точка
		ILI9341_FillScreen(ILI9341_BLACK);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7fe fcdf 	bl	80014d0 <ILI9341_FillScreen>
		ILI9341_WriteString(15, 50, "Display calibration, click", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);      // а так же пишем что калибруемся
 8002b12:	4b78      	ldr	r3, [pc, #480]	; (8002cf4 <GUICalibration+0x21c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	9202      	str	r2, [sp, #8]
 8002b18:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002b1c:	9201      	str	r2, [sp, #4]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	9200      	str	r2, [sp, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a74      	ldr	r2, [pc, #464]	; (8002cf8 <GUICalibration+0x220>)
 8002b26:	2132      	movs	r1, #50	; 0x32
 8002b28:	200f      	movs	r0, #15
 8002b2a:	f7fe feb0 	bl	800188e <ILI9341_WriteString>
		ILI9341_WriteString(15, 70, "on all the circles in turn", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8002b2e:	4b71      	ldr	r3, [pc, #452]	; (8002cf4 <GUICalibration+0x21c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	9202      	str	r2, [sp, #8]
 8002b34:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002b38:	9201      	str	r2, [sp, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	9200      	str	r2, [sp, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a6e      	ldr	r2, [pc, #440]	; (8002cfc <GUICalibration+0x224>)
 8002b42:	2146      	movs	r1, #70	; 0x46
 8002b44:	200f      	movs	r0, #15
 8002b46:	f7fe fea2 	bl	800188e <ILI9341_WriteString>
		drawCircle(10, 10, 10, ILI9341_YELLOW);
 8002b4a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b4e:	220a      	movs	r2, #10
 8002b50:	210a      	movs	r1, #10
 8002b52:	200a      	movs	r0, #10
 8002b54:	f7ff fbb3 	bl	80022be <drawCircle>
		drawCircle(10, 10, 9, ILI9341_YELLOW);                                                  // точка в которую нажать
 8002b58:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b5c:	2209      	movs	r2, #9
 8002b5e:	210a      	movs	r1, #10
 8002b60:	200a      	movs	r0, #10
 8002b62:	f7ff fbac 	bl	80022be <drawCircle>
		break;
 8002b66:	e0c0      	b.n	8002cea <GUICalibration+0x212>
	case RIGHTUP:
		ILI9341_FillRectangle(0, 0, 25, 25, ILI9341_BLACK);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2319      	movs	r3, #25
 8002b6e:	2219      	movs	r2, #25
 8002b70:	2100      	movs	r1, #0
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fe fc42 	bl	80013fc <ILI9341_FillRectangle>
		drawCircle(309, 10, 10, ILI9341_YELLOW);
 8002b78:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b7c:	220a      	movs	r2, #10
 8002b7e:	210a      	movs	r1, #10
 8002b80:	f240 1035 	movw	r0, #309	; 0x135
 8002b84:	f7ff fb9b 	bl	80022be <drawCircle>
		drawCircle(309, 10, 9, ILI9341_YELLOW);
 8002b88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b8c:	2209      	movs	r2, #9
 8002b8e:	210a      	movs	r1, #10
 8002b90:	f240 1035 	movw	r0, #309	; 0x135
 8002b94:	f7ff fb93 	bl	80022be <drawCircle>
		break;
 8002b98:	e0a7      	b.n	8002cea <GUICalibration+0x212>
	case LEFTDOWN:
		ILI9341_FillRectangle(299, 0, 25, 25, ILI9341_BLACK);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	2319      	movs	r3, #25
 8002ba0:	2219      	movs	r2, #25
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f240 102b 	movw	r0, #299	; 0x12b
 8002ba8:	f7fe fc28 	bl	80013fc <ILI9341_FillRectangle>
		drawCircle(10, 229, 10, ILI9341_YELLOW);
 8002bac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bb0:	220a      	movs	r2, #10
 8002bb2:	21e5      	movs	r1, #229	; 0xe5
 8002bb4:	200a      	movs	r0, #10
 8002bb6:	f7ff fb82 	bl	80022be <drawCircle>
		drawCircle(10, 229, 9, ILI9341_YELLOW);
 8002bba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bbe:	2209      	movs	r2, #9
 8002bc0:	21e5      	movs	r1, #229	; 0xe5
 8002bc2:	200a      	movs	r0, #10
 8002bc4:	f7ff fb7b 	bl	80022be <drawCircle>
		break;
 8002bc8:	e08f      	b.n	8002cea <GUICalibration+0x212>
	case RIGHTDOWN:
		ILI9341_FillRectangle(0, 219, 25, 25, ILI9341_BLACK);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2319      	movs	r3, #25
 8002bd0:	2219      	movs	r2, #25
 8002bd2:	21db      	movs	r1, #219	; 0xdb
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7fe fc11 	bl	80013fc <ILI9341_FillRectangle>
		drawCircle(309, 229, 10, ILI9341_YELLOW);
 8002bda:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bde:	220a      	movs	r2, #10
 8002be0:	21e5      	movs	r1, #229	; 0xe5
 8002be2:	f240 1035 	movw	r0, #309	; 0x135
 8002be6:	f7ff fb6a 	bl	80022be <drawCircle>
		drawCircle(309, 229, 9, ILI9341_YELLOW);
 8002bea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bee:	2209      	movs	r2, #9
 8002bf0:	21e5      	movs	r1, #229	; 0xe5
 8002bf2:	f240 1035 	movw	r0, #309	; 0x135
 8002bf6:	f7ff fb62 	bl	80022be <drawCircle>
		break;
 8002bfa:	e076      	b.n	8002cea <GUICalibration+0x212>
	case CHECKCALIB:
		ILI9341_FillRectangle(299, 219, 25, 25, ILI9341_BLACK);                                  // проверка калибровки
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2319      	movs	r3, #25
 8002c02:	2219      	movs	r2, #25
 8002c04:	21db      	movs	r1, #219	; 0xdb
 8002c06:	f240 102b 	movw	r0, #299	; 0x12b
 8002c0a:	f7fe fbf7 	bl	80013fc <ILI9341_FillRectangle>
		ILI9341_FillRectangle(15, 50, 290, 40, ILI9341_BLACK);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2328      	movs	r3, #40	; 0x28
 8002c14:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002c18:	2132      	movs	r1, #50	; 0x32
 8002c1a:	200f      	movs	r0, #15
 8002c1c:	f7fe fbee 	bl	80013fc <ILI9341_FillRectangle>
		ILI9341_FillRectangle(140, 100, 60, 20, ILI9341_BLACK);
 8002c20:	2300      	movs	r3, #0
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	2314      	movs	r3, #20
 8002c26:	223c      	movs	r2, #60	; 0x3c
 8002c28:	2164      	movs	r1, #100	; 0x64
 8002c2a:	208c      	movs	r0, #140	; 0x8c
 8002c2c:	f7fe fbe6 	bl	80013fc <ILI9341_FillRectangle>
		ILI9341_WriteString(60, 20, "Calibration check", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8002c30:	4b30      	ldr	r3, [pc, #192]	; (8002cf4 <GUICalibration+0x21c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	9202      	str	r2, [sp, #8]
 8002c36:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002c3a:	9201      	str	r2, [sp, #4]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	9200      	str	r2, [sp, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2f      	ldr	r2, [pc, #188]	; (8002d00 <GUICalibration+0x228>)
 8002c44:	2114      	movs	r1, #20
 8002c46:	203c      	movs	r0, #60	; 0x3c
 8002c48:	f7fe fe21 	bl	800188e <ILI9341_WriteString>
		drawCircle(160, 120, 10, ILI9341_YELLOW);
 8002c4c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002c50:	220a      	movs	r2, #10
 8002c52:	2178      	movs	r1, #120	; 0x78
 8002c54:	20a0      	movs	r0, #160	; 0xa0
 8002c56:	f7ff fb32 	bl	80022be <drawCircle>
		drawCircle(160, 120, 9, ILI9341_YELLOW);
 8002c5a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002c5e:	2209      	movs	r2, #9
 8002c60:	2178      	movs	r1, #120	; 0x78
 8002c62:	20a0      	movs	r0, #160	; 0xa0
 8002c64:	f7ff fb2b 	bl	80022be <drawCircle>
		break;
 8002c68:	e03f      	b.n	8002cea <GUICalibration+0x212>
	case CALIBOK:
		ILI9341_FillRectangle(60, 20, 260, 20, ILI9341_BLACK);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2314      	movs	r3, #20
 8002c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c74:	2114      	movs	r1, #20
 8002c76:	203c      	movs	r0, #60	; 0x3c
 8002c78:	f7fe fbc0 	bl	80013fc <ILI9341_FillRectangle>
		ILI9341_FillRectangle(150, 110, 30, 30, ILI9341_BLACK);
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	231e      	movs	r3, #30
 8002c82:	221e      	movs	r2, #30
 8002c84:	216e      	movs	r1, #110	; 0x6e
 8002c86:	2096      	movs	r0, #150	; 0x96
 8002c88:	f7fe fbb8 	bl	80013fc <ILI9341_FillRectangle>
		ILI9341_WriteString(75, 20, "Calibration ok", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <GUICalibration+0x21c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	9202      	str	r2, [sp, #8]
 8002c92:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002c96:	9201      	str	r2, [sp, #4]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	9200      	str	r2, [sp, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <GUICalibration+0x22c>)
 8002ca0:	2114      	movs	r1, #20
 8002ca2:	204b      	movs	r0, #75	; 0x4b
 8002ca4:	f7fe fdf3 	bl	800188e <ILI9341_WriteString>
		break;
 8002ca8:	e01f      	b.n	8002cea <GUICalibration+0x212>
	case ERRCALIB:
		ILI9341_FillRectangle(60, 50, 260, 20, ILI9341_BLACK);
 8002caa:	2300      	movs	r3, #0
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2314      	movs	r3, #20
 8002cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cb4:	2132      	movs	r1, #50	; 0x32
 8002cb6:	203c      	movs	r0, #60	; 0x3c
 8002cb8:	f7fe fba0 	bl	80013fc <ILI9341_FillRectangle>
		ILI9341_FillRectangle(150, 110, 30, 30, ILI9341_BLACK);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	231e      	movs	r3, #30
 8002cc2:	221e      	movs	r2, #30
 8002cc4:	216e      	movs	r1, #110	; 0x6e
 8002cc6:	2096      	movs	r0, #150	; 0x96
 8002cc8:	f7fe fb98 	bl	80013fc <ILI9341_FillRectangle>
		ILI9341_WriteString(60, 20, "Invalid calibration", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <GUICalibration+0x21c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	9202      	str	r2, [sp, #8]
 8002cd2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002cd6:	9201      	str	r2, [sp, #4]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	9200      	str	r2, [sp, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <GUICalibration+0x230>)
 8002ce0:	2114      	movs	r1, #20
 8002ce2:	203c      	movs	r0, #60	; 0x3c
 8002ce4:	f7fe fdd3 	bl	800188e <ILI9341_WriteString>
		break;
 8002ce8:	bf00      	nop
	}
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	0800ae64 	.word	0x0800ae64
 8002cfc:	0800ae80 	.word	0x0800ae80
 8002d00:	0800ae9c 	.word	0x0800ae9c
 8002d04:	0800aeb0 	.word	0x0800aeb0
 8002d08:	0800aec0 	.word	0x0800aec0

08002d0c <setOK>:

void setOK(uint8_t flag) {                                                                     // при калибровке показывать действие
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af04      	add	r7, sp, #16
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
	if (flag) {
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00e      	beq.n	8002d3a <setOK+0x2e>
		ILI9341_WriteString(140, 100, " OK    ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <setOK+0x54>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	9202      	str	r2, [sp, #8]
 8002d22:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002d26:	9201      	str	r2, [sp, #4]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	9200      	str	r2, [sp, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <setOK+0x58>)
 8002d30:	2164      	movs	r1, #100	; 0x64
 8002d32:	208c      	movs	r0, #140	; 0x8c
 8002d34:	f7fe fdab 	bl	800188e <ILI9341_WriteString>
	} else {
		ILI9341_WriteString(140, 100, "Wait", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
	}
}
 8002d38:	e00d      	b.n	8002d56 <setOK+0x4a>
		ILI9341_WriteString(140, 100, "Wait", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <setOK+0x54>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	9202      	str	r2, [sp, #8]
 8002d40:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002d44:	9201      	str	r2, [sp, #4]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	9200      	str	r2, [sp, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a06      	ldr	r2, [pc, #24]	; (8002d68 <setOK+0x5c>)
 8002d4e:	2164      	movs	r1, #100	; 0x64
 8002d50:	208c      	movs	r0, #140	; 0x8c
 8002d52:	f7fe fd9c 	bl	800188e <ILI9341_WriteString>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000
 8002d64:	0800aed4 	.word	0x0800aed4
 8002d68:	0800aedc 	.word	0x0800aedc

08002d6c <startDisplay>:

void startDisplay(void) {                                                                      // инициализация дисплея
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	ILI9341_TouchUnselect();
 8002d70:	f7ff fbba 	bl	80024e8 <ILI9341_TouchUnselect>
	ILI9341_Unselect();
 8002d74:	f7fe f92e 	bl	8000fd4 <ILI9341_Unselect>
	HAL_Delay(10);
 8002d78:	200a      	movs	r0, #10
 8002d7a:	f002 f911 	bl	8004fa0 <HAL_Delay>
	SET_BIT(SPI1->CR1, SPI_CR1_SPE);                                                           // включить SPI
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <startDisplay+0x34>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <startDisplay+0x34>)
 8002d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d88:	6013      	str	r3, [r2, #0]
	ILI9341_Init();
 8002d8a:	f7fe f9cf 	bl	800112c <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f7fe fb9e 	bl	80014d0 <ILI9341_FillScreen>
	HAL_Delay(100);
 8002d94:	2064      	movs	r0, #100	; 0x64
 8002d96:	f002 f903 	bl	8004fa0 <HAL_Delay>
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40013000 	.word	0x40013000

08002da4 <printFreeq>:

void printFreeq(void) {                                                                        // пересчет и вывод текущей частоты
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af04      	add	r7, sp, #16
	uint8_t count = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	71fb      	strb	r3, [r7, #7]
	float freq = 0;
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	603b      	str	r3, [r7, #0]
	freq = (1 / (((float) ParamDevice.impuls / (float) multiplicationFreq[ParamDevice.unitImpuls]) +
 8002db4:	4b43      	ldr	r3, [pc, #268]	; (8002ec4 <printFreeq+0x120>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc0:	4b40      	ldr	r3, [pc, #256]	; (8002ec4 <printFreeq+0x120>)
 8002dc2:	7a1b      	ldrb	r3, [r3, #8]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <printFreeq+0x124>)
 8002dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dcc:	ee07 3a90 	vmov	s15, r3
 8002dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			((float) ParamDevice.pause / (float) multiplicationFreq[ParamDevice.unitPause])));
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <printFreeq+0x120>)
 8002dda:	885b      	ldrh	r3, [r3, #2]
 8002ddc:	ee07 3a90 	vmov	s15, r3
 8002de0:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8002de4:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <printFreeq+0x120>)
 8002de6:	7a5b      	ldrb	r3, [r3, #9]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b37      	ldr	r3, [pc, #220]	; (8002ec8 <printFreeq+0x124>)
 8002dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002df8:	eec6 7a26 	vdiv.f32	s15, s12, s13
	freq = (1 / (((float) ParamDevice.impuls / (float) multiplicationFreq[ParamDevice.unitImpuls]) +
 8002dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e08:	edc7 7a00 	vstr	s15, [r7]
	if (freq >= 1000000) {                                                                     // если частоты больше 1000000
 8002e0c:	edd7 7a00 	vldr	s15, [r7]
 8002e10:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002ecc <printFreeq+0x128>
 8002e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1c:	db09      	blt.n	8002e32 <printFreeq+0x8e>
		count = 2;                                                                             // ставим пометку с какой ячейки читать
 8002e1e:	2302      	movs	r3, #2
 8002e20:	71fb      	strb	r3, [r7, #7]
		freq = freq / 1000000;                                                                 // уменьшаем нули
 8002e22:	ed97 7a00 	vldr	s14, [r7]
 8002e26:	eddf 6a29 	vldr	s13, [pc, #164]	; 8002ecc <printFreeq+0x128>
 8002e2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e2e:	edc7 7a00 	vstr	s15, [r7]
	}
	if (freq >= 1000) {
 8002e32:	edd7 7a00 	vldr	s15, [r7]
 8002e36:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ed0 <printFreeq+0x12c>
 8002e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	db09      	blt.n	8002e58 <printFreeq+0xb4>
		count = 1;
 8002e44:	2301      	movs	r3, #1
 8002e46:	71fb      	strb	r3, [r7, #7]
		freq = freq / 1000;
 8002e48:	ed97 7a00 	vldr	s14, [r7]
 8002e4c:	eddf 6a20 	vldr	s13, [pc, #128]	; 8002ed0 <printFreeq+0x12c>
 8002e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e54:	edc7 7a00 	vstr	s15, [r7]
	}
	strcpy(bufSpi, "Freq=");                                                                  // ну и печать
 8002e58:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <printFreeq+0x130>)
 8002e5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <printFreeq+0x134>)
 8002e5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e60:	6018      	str	r0, [r3, #0]
 8002e62:	3304      	adds	r3, #4
 8002e64:	8019      	strh	r1, [r3, #0]
	ILI9341_WriteString(10, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <printFreeq+0x138>)
 8002e68:	221f      	movs	r2, #31
 8002e6a:	9202      	str	r2, [sp, #8]
 8002e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e70:	9201      	str	r2, [sp, #4]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	9200      	str	r2, [sp, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <printFreeq+0x130>)
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	200a      	movs	r0, #10
 8002e7e:	f7fe fd06 	bl	800188e <ILI9341_WriteString>
	sprintf(bufSpi, "%06.2f%s", freq, unitFreq[count]);                                       // помним что 6 это общее количество символов
 8002e82:	6838      	ldr	r0, [r7, #0]
 8002e84:	f7fd fb68 	bl	8000558 <__aeabi_f2d>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	79f9      	ldrb	r1, [r7, #7]
 8002e8e:	4814      	ldr	r0, [pc, #80]	; (8002ee0 <printFreeq+0x13c>)
 8002e90:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002e94:	9100      	str	r1, [sp, #0]
 8002e96:	4913      	ldr	r1, [pc, #76]	; (8002ee4 <printFreeq+0x140>)
 8002e98:	480e      	ldr	r0, [pc, #56]	; (8002ed4 <printFreeq+0x130>)
 8002e9a:	f005 fd27 	bl	80088ec <siprintf>
	ILI9341_WriteString(65, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <printFreeq+0x138>)
 8002ea0:	221f      	movs	r2, #31
 8002ea2:	9202      	str	r2, [sp, #8]
 8002ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ea8:	9201      	str	r2, [sp, #4]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	9200      	str	r2, [sp, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a08      	ldr	r2, [pc, #32]	; (8002ed4 <printFreeq+0x130>)
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	2041      	movs	r0, #65	; 0x41
 8002eb6:	f7fe fcea 	bl	800188e <ILI9341_WriteString>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000040 	.word	0x20000040
 8002ec8:	20000020 	.word	0x20000020
 8002ecc:	49742400 	.word	0x49742400
 8002ed0:	447a0000 	.word	0x447a0000
 8002ed4:	20000268 	.word	0x20000268
 8002ed8:	0800aee4 	.word	0x0800aee4
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	20000014 	.word	0x20000014
 8002ee4:	0800aeec 	.word	0x0800aeec

08002ee8 <printCurrent>:

void printCurrent (float current) {                                                            // принт текущего значения тока
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af04      	add	r7, sp, #16
 8002eee:	ed87 0a01 	vstr	s0, [r7, #4]
	strcpy(bufSpi, "Iout: ");                                                                  // это тупо, можно где то один раз нарисовать
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <printCurrent+0x74>)
 8002ef4:	4a1a      	ldr	r2, [pc, #104]	; (8002f60 <printCurrent+0x78>)
 8002ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002efa:	6018      	str	r0, [r3, #0]
 8002efc:	3304      	adds	r3, #4
 8002efe:	8019      	strh	r1, [r3, #0]
 8002f00:	3302      	adds	r3, #2
 8002f02:	0c0a      	lsrs	r2, r1, #16
 8002f04:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteString(190, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <printCurrent+0x7c>)
 8002f08:	221f      	movs	r2, #31
 8002f0a:	9202      	str	r2, [sp, #8]
 8002f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f10:	9201      	str	r2, [sp, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	9200      	str	r2, [sp, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a10      	ldr	r2, [pc, #64]	; (8002f5c <printCurrent+0x74>)
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	20be      	movs	r0, #190	; 0xbe
 8002f1e:	f7fe fcb6 	bl	800188e <ILI9341_WriteString>
	sprintf(bufSpi, "%05.3f%s ", current, "A");
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fb18 	bl	8000558 <__aeabi_f2d>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	490e      	ldr	r1, [pc, #56]	; (8002f68 <printCurrent+0x80>)
 8002f2e:	9100      	str	r1, [sp, #0]
 8002f30:	490e      	ldr	r1, [pc, #56]	; (8002f6c <printCurrent+0x84>)
 8002f32:	480a      	ldr	r0, [pc, #40]	; (8002f5c <printCurrent+0x74>)
 8002f34:	f005 fcda 	bl	80088ec <siprintf>
	ILI9341_WriteString(245, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <printCurrent+0x7c>)
 8002f3a:	221f      	movs	r2, #31
 8002f3c:	9202      	str	r2, [sp, #8]
 8002f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f42:	9201      	str	r2, [sp, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	9200      	str	r2, [sp, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <printCurrent+0x74>)
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	20f5      	movs	r0, #245	; 0xf5
 8002f50:	f7fe fc9d 	bl	800188e <ILI9341_WriteString>
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000268 	.word	0x20000268
 8002f60:	0800aef8 	.word	0x0800aef8
 8002f64:	20000000 	.word	0x20000000
 8002f68:	0800af0c 	.word	0x0800af0c
 8002f6c:	0800af00 	.word	0x0800af00

08002f70 <printTImpulse>:
		strcpy(bufSpi, "Out:No out");
		ILI9341_WriteString(190, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
	}
}*/

void printTImpulse(void) {                                                                     // переписать длительность импульса
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af02      	add	r7, sp, #8
	strcpy(bufSpi, "T imp:");
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <printTImpulse+0x60>)
 8002f78:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <printTImpulse+0x64>)
 8002f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f7e:	6018      	str	r0, [r3, #0]
 8002f80:	3304      	adds	r3, #4
 8002f82:	8019      	strh	r1, [r3, #0]
 8002f84:	3302      	adds	r3, #2
 8002f86:	0c0a      	lsrs	r2, r1, #16
 8002f88:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteMyString(12, 30, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f92:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <printTImpulse+0x60>)
 8002f94:	211e      	movs	r1, #30
 8002f96:	200c      	movs	r0, #12
 8002f98:	f7fe fba2 	bl	80016e0 <ILI9341_WriteMyString>
	sprintf(bufSpi, "%-3d %s  ", ParamDevice.impuls, unitTXT[ParamDevice.unitImpuls]);
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <printTImpulse+0x68>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <printTImpulse+0x68>)
 8002fa4:	7a1b      	ldrb	r3, [r3, #8]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <printTImpulse+0x6c>)
 8002faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fae:	460a      	mov	r2, r1
 8002fb0:	490b      	ldr	r1, [pc, #44]	; (8002fe0 <printTImpulse+0x70>)
 8002fb2:	4807      	ldr	r0, [pc, #28]	; (8002fd0 <printTImpulse+0x60>)
 8002fb4:	f005 fc9a 	bl	80088ec <siprintf>
	ILI9341_WriteMyString(125, 30, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fc0:	4a03      	ldr	r2, [pc, #12]	; (8002fd0 <printTImpulse+0x60>)
 8002fc2:	211e      	movs	r1, #30
 8002fc4:	207d      	movs	r0, #125	; 0x7d
 8002fc6:	f7fe fb8b 	bl	80016e0 <ILI9341_WriteMyString>
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000268 	.word	0x20000268
 8002fd4:	0800af10 	.word	0x0800af10
 8002fd8:	20000040 	.word	0x20000040
 8002fdc:	20000008 	.word	0x20000008
 8002fe0:	0800af18 	.word	0x0800af18

08002fe4 <printTPause>:

void printTPause(void) {                                                                       // переписать длительность паузы
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af02      	add	r7, sp, #8
	strcpy(bufSpi, "T paus:");
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <printTPause+0x58>)
 8002fec:	4a14      	ldr	r2, [pc, #80]	; (8003040 <printTPause+0x5c>)
 8002fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ff2:	e883 0003 	stmia.w	r3, {r0, r1}
	ILI9341_WriteMyString(12, 78, bufSpi, ILI9341_YELLOW, ILI9341_BLACK);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ffe:	4a0f      	ldr	r2, [pc, #60]	; (800303c <printTPause+0x58>)
 8003000:	214e      	movs	r1, #78	; 0x4e
 8003002:	200c      	movs	r0, #12
 8003004:	f7fe fb6c 	bl	80016e0 <ILI9341_WriteMyString>
	sprintf(bufSpi, "%-3d %s  ", ParamDevice.pause, unitTXT[ParamDevice.unitPause]);
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <printTPause+0x60>)
 800300a:	885b      	ldrh	r3, [r3, #2]
 800300c:	4619      	mov	r1, r3
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <printTPause+0x60>)
 8003010:	7a5b      	ldrb	r3, [r3, #9]
 8003012:	461a      	mov	r2, r3
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <printTPause+0x64>)
 8003016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301a:	460a      	mov	r2, r1
 800301c:	490b      	ldr	r1, [pc, #44]	; (800304c <printTPause+0x68>)
 800301e:	4807      	ldr	r0, [pc, #28]	; (800303c <printTPause+0x58>)
 8003020:	f005 fc64 	bl	80088ec <siprintf>
	ILI9341_WriteMyString(125, 78, bufSpi, ILI9341_YELLOW, ILI9341_BLACK);
 8003024:	2300      	movs	r3, #0
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800302c:	4a03      	ldr	r2, [pc, #12]	; (800303c <printTPause+0x58>)
 800302e:	214e      	movs	r1, #78	; 0x4e
 8003030:	207d      	movs	r0, #125	; 0x7d
 8003032:	f7fe fb55 	bl	80016e0 <ILI9341_WriteMyString>
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000268 	.word	0x20000268
 8003040:	0800af24 	.word	0x0800af24
 8003044:	20000040 	.word	0x20000040
 8003048:	20000008 	.word	0x20000008
 800304c:	0800af18 	.word	0x0800af18

08003050 <printCount>:

void printCount(void) {                                                                        // переписать количество повторений
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af02      	add	r7, sp, #8
	strcpy(bufSpi, "Count:");
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <printCount+0x7c>)
 8003058:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <printCount+0x80>)
 800305a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800305e:	6018      	str	r0, [r3, #0]
 8003060:	3304      	adds	r3, #4
 8003062:	8019      	strh	r1, [r3, #0]
 8003064:	3302      	adds	r3, #2
 8003066:	0c0a      	lsrs	r2, r1, #16
 8003068:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteMyString(12, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
 800306a:	2300      	movs	r3, #0
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003072:	4a16      	ldr	r2, [pc, #88]	; (80030cc <printCount+0x7c>)
 8003074:	217e      	movs	r1, #126	; 0x7e
 8003076:	200c      	movs	r0, #12
 8003078:	f7fe fb32 	bl	80016e0 <ILI9341_WriteMyString>
	if (ParamDevice.count) {
 800307c:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <printCount+0x84>)
 800307e:	889b      	ldrh	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d011      	beq.n	80030a8 <printCount+0x58>
		sprintf(bufSpi, "%-3d %s  ", ParamDevice.count, "rp");
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <printCount+0x84>)
 8003086:	889b      	ldrh	r3, [r3, #4]
 8003088:	461a      	mov	r2, r3
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <printCount+0x88>)
 800308c:	4913      	ldr	r1, [pc, #76]	; (80030dc <printCount+0x8c>)
 800308e:	480f      	ldr	r0, [pc, #60]	; (80030cc <printCount+0x7c>)
 8003090:	f005 fc2c 	bl	80088ec <siprintf>
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
 8003094:	2300      	movs	r3, #0
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800309c:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <printCount+0x7c>)
 800309e:	217e      	movs	r1, #126	; 0x7e
 80030a0:	207d      	movs	r0, #125	; 0x7d
 80030a2:	f7fe fb1d 	bl	80016e0 <ILI9341_WriteMyString>
	} else {
		sprintf(bufSpi, "~   %s  ", "rp");                                                     // в символах я заменил ~ знаком бесконечности
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
	}
}
 80030a6:	e00d      	b.n	80030c4 <printCount+0x74>
		sprintf(bufSpi, "~   %s  ", "rp");                                                     // в символах я заменил ~ знаком бесконечности
 80030a8:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <printCount+0x88>)
 80030aa:	490d      	ldr	r1, [pc, #52]	; (80030e0 <printCount+0x90>)
 80030ac:	4807      	ldr	r0, [pc, #28]	; (80030cc <printCount+0x7c>)
 80030ae:	f005 fc1d 	bl	80088ec <siprintf>
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
 80030b2:	2300      	movs	r3, #0
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80030ba:	4a04      	ldr	r2, [pc, #16]	; (80030cc <printCount+0x7c>)
 80030bc:	217e      	movs	r1, #126	; 0x7e
 80030be:	207d      	movs	r0, #125	; 0x7d
 80030c0:	f7fe fb0e 	bl	80016e0 <ILI9341_WriteMyString>
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000268 	.word	0x20000268
 80030d0:	0800af2c 	.word	0x0800af2c
 80030d4:	20000040 	.word	0x20000040
 80030d8:	0800af34 	.word	0x0800af34
 80030dc:	0800af18 	.word	0x0800af18
 80030e0:	0800af38 	.word	0x0800af38

080030e4 <printColorImage>:

void printColorImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h,                           // печать цветной картинки по координатам + статус нажато
		uint16_t status, const uint16_t *data) {
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	4604      	mov	r4, r0
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	4623      	mov	r3, r4
 80030f4:	80fb      	strh	r3, [r7, #6]
 80030f6:	4603      	mov	r3, r0
 80030f8:	80bb      	strh	r3, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	807b      	strh	r3, [r7, #2]
 80030fe:	4613      	mov	r3, r2
 8003100:	803b      	strh	r3, [r7, #0]
	if (status == NO_PRESSED) {
 8003102:	8b3b      	ldrh	r3, [r7, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d11c      	bne.n	8003142 <printColorImage+0x5e>
		drawRect(x - 1, y - 1, w + 2, h + 2, ILI9341_BLACK);                                   // печатаем со смещением чтоб стереть старое
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	3b01      	subs	r3, #1
 800310c:	b29b      	uxth	r3, r3
 800310e:	b218      	sxth	r0, r3
 8003110:	88bb      	ldrh	r3, [r7, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	b29b      	uxth	r3, r3
 8003116:	b219      	sxth	r1, r3
 8003118:	887b      	ldrh	r3, [r7, #2]
 800311a:	3302      	adds	r3, #2
 800311c:	b29b      	uxth	r3, r3
 800311e:	b21a      	sxth	r2, r3
 8003120:	883b      	ldrh	r3, [r7, #0]
 8003122:	3302      	adds	r3, #2
 8003124:	b29b      	uxth	r3, r3
 8003126:	b21b      	sxth	r3, r3
 8003128:	2400      	movs	r4, #0
 800312a:	9400      	str	r4, [sp, #0]
 800312c:	f7fe fd12 	bl	8001b54 <drawRect>
		ILI9341_DrawImage(x, y, w, h, data);
 8003130:	883c      	ldrh	r4, [r7, #0]
 8003132:	887a      	ldrh	r2, [r7, #2]
 8003134:	88b9      	ldrh	r1, [r7, #4]
 8003136:	88f8      	ldrh	r0, [r7, #6]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	4623      	mov	r3, r4
 800313e:	f7fe fbf1 	bl	8001924 <ILI9341_DrawImage>
	}
	if (status == PRESSED) {
 8003142:	8b3b      	ldrh	r3, [r7, #24]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d11c      	bne.n	8003182 <printColorImage+0x9e>
		drawRect(x, y, w + 2, h + 2, ILI9341_BLACK);
 8003148:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800314c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003150:	887b      	ldrh	r3, [r7, #2]
 8003152:	3302      	adds	r3, #2
 8003154:	b29b      	uxth	r3, r3
 8003156:	b21a      	sxth	r2, r3
 8003158:	883b      	ldrh	r3, [r7, #0]
 800315a:	3302      	adds	r3, #2
 800315c:	b29b      	uxth	r3, r3
 800315e:	b21b      	sxth	r3, r3
 8003160:	2400      	movs	r4, #0
 8003162:	9400      	str	r4, [sp, #0]
 8003164:	f7fe fcf6 	bl	8001b54 <drawRect>
		ILI9341_DrawImage(x + 1, y + 1, w, h, data);                                           // печатаем со смещением для эффекта нажатия
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	3301      	adds	r3, #1
 800316c:	b298      	uxth	r0, r3
 800316e:	88bb      	ldrh	r3, [r7, #4]
 8003170:	3301      	adds	r3, #1
 8003172:	b299      	uxth	r1, r3
 8003174:	883c      	ldrh	r4, [r7, #0]
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4623      	mov	r3, r4
 800317e:	f7fe fbd1 	bl	8001924 <ILI9341_DrawImage>
	}
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bd90      	pop	{r4, r7, pc}
	...

0800318c <mainDisplayPrint>:

void mainDisplayPrint(void) {                                                                  // стартовая печать на экране
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af04      	add	r7, sp, #16
	ILI9341_FillScreen(ILI9341_BLACK);
 8003192:	2000      	movs	r0, #0
 8003194:	f7fe f99c 	bl	80014d0 <ILI9341_FillScreen>
	ILI9341_FillRectangle(0, 0, 320, 22, ILI9341_BLUE);
 8003198:	231f      	movs	r3, #31
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2316      	movs	r3, #22
 800319e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031a2:	2100      	movs	r1, #0
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fe f929 	bl	80013fc <ILI9341_FillRectangle>
	//printTypeOutput();
	printFreeq();
 80031aa:	f7ff fdfb 	bl	8002da4 <printFreeq>
	printTImpulse();
 80031ae:	f7ff fedf 	bl	8002f70 <printTImpulse>
	printTPause();
 80031b2:	f7ff ff17 	bl	8002fe4 <printTPause>
	printCount();
 80031b6:	f7ff ff4b 	bl	8003050 <printCount>
	printColorImage(24, 182, 50, 50, NO_PRESSED, image_Plus);
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <mainDisplayPrint+0xb0>)
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	2300      	movs	r3, #0
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2332      	movs	r3, #50	; 0x32
 80031c4:	2232      	movs	r2, #50	; 0x32
 80031c6:	21b6      	movs	r1, #182	; 0xb6
 80031c8:	2018      	movs	r0, #24
 80031ca:	f7ff ff8b 	bl	80030e4 <printColorImage>
	printColorImage(98, 182, 50, 50, NO_PRESSED, image_Arrow);
 80031ce:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <mainDisplayPrint+0xb4>)
 80031d0:	9301      	str	r3, [sp, #4]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2332      	movs	r3, #50	; 0x32
 80031d8:	2232      	movs	r2, #50	; 0x32
 80031da:	21b6      	movs	r1, #182	; 0xb6
 80031dc:	2062      	movs	r0, #98	; 0x62
 80031de:	f7ff ff81 	bl	80030e4 <printColorImage>
	printColorImage(172, 182, 50, 50, NO_PRESSED, image_Minus);
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <mainDisplayPrint+0xb8>)
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	2300      	movs	r3, #0
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	2332      	movs	r3, #50	; 0x32
 80031ec:	2232      	movs	r2, #50	; 0x32
 80031ee:	21b6      	movs	r1, #182	; 0xb6
 80031f0:	20ac      	movs	r0, #172	; 0xac
 80031f2:	f7ff ff77 	bl	80030e4 <printColorImage>
	printColorImage(246, 182, 50, 50, NO_PRESSED, image_powerGreen);
 80031f6:	4b14      	ldr	r3, [pc, #80]	; (8003248 <mainDisplayPrint+0xbc>)
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	2300      	movs	r3, #0
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	2332      	movs	r3, #50	; 0x32
 8003200:	2232      	movs	r2, #50	; 0x32
 8003202:	21b6      	movs	r1, #182	; 0xb6
 8003204:	20f6      	movs	r0, #246	; 0xf6
 8003206:	f7ff ff6d 	bl	80030e4 <printColorImage>
	ILI9341_DrawMonochromeImage(260, 43, ILI9341_YELLOW, ILI9341_BLACK, tranzistor);
 800320a:	4a10      	ldr	r2, [pc, #64]	; (800324c <mainDisplayPrint+0xc0>)
 800320c:	466b      	mov	r3, sp
 800320e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003210:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003214:	2300      	movs	r3, #0
 8003216:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800321a:	212b      	movs	r1, #43	; 0x2b
 800321c:	f44f 7082 	mov.w	r0, #260	; 0x104
 8003220:	f7fe fbc8 	bl	80019b4 <ILI9341_DrawMonochromeImage>
	NPN_PNPButton(NPN, PRESSED);
 8003224:	2101      	movs	r1, #1
 8003226:	2001      	movs	r0, #1
 8003228:	f000 fb2c 	bl	8003884 <NPN_PNPButton>
	NPN_PNPButton(PNP, NO_PRESSED);
 800322c:	2100      	movs	r1, #0
 800322e:	2000      	movs	r0, #0
 8003230:	f000 fb28 	bl	8003884 <NPN_PNPButton>
    /*if(ILI9341_TouchGetCoordinates(&x, &y)) {                                                // это рисовалка на дисплее)
	 ILI9341_DrawPixel(x, y, ILI9341_WHITE);
	 }*/
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	0800d66c 	.word	0x0800d66c
 8003240:	0800fea8 	.word	0x0800fea8
 8003244:	0800e9f4 	.word	0x0800e9f4
 8003248:	0800c2e4 	.word	0x0800c2e4
 800324c:	08015668 	.word	0x08015668

08003250 <checkAreaTouch>:

uint8_t checkAreaTouch(uint16_t xTouch, uint16_t yTouch, uint16_t xScan, uint16_t yScan, uint16_t weight, uint16_t height) { // проверка нажата кнопка или не
 8003250:	b490      	push	{r4, r7}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	4604      	mov	r4, r0
 8003258:	4608      	mov	r0, r1
 800325a:	4611      	mov	r1, r2
 800325c:	461a      	mov	r2, r3
 800325e:	4623      	mov	r3, r4
 8003260:	80fb      	strh	r3, [r7, #6]
 8003262:	4603      	mov	r3, r0
 8003264:	80bb      	strh	r3, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	807b      	strh	r3, [r7, #2]
 800326a:	4613      	mov	r3, r2
 800326c:	803b      	strh	r3, [r7, #0]
	if (xTouch >= xScan && xTouch <= xScan + weight && yTouch >= yScan && yTouch <= yScan + height) return true;  // если мы на клавише вернуть ок
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	887b      	ldrh	r3, [r7, #2]
 8003272:	429a      	cmp	r2, r3
 8003274:	d311      	bcc.n	800329a <checkAreaTouch+0x4a>
 8003276:	88fa      	ldrh	r2, [r7, #6]
 8003278:	8879      	ldrh	r1, [r7, #2]
 800327a:	8a3b      	ldrh	r3, [r7, #16]
 800327c:	440b      	add	r3, r1
 800327e:	429a      	cmp	r2, r3
 8003280:	dc0b      	bgt.n	800329a <checkAreaTouch+0x4a>
 8003282:	88ba      	ldrh	r2, [r7, #4]
 8003284:	883b      	ldrh	r3, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d307      	bcc.n	800329a <checkAreaTouch+0x4a>
 800328a:	88ba      	ldrh	r2, [r7, #4]
 800328c:	8839      	ldrh	r1, [r7, #0]
 800328e:	8abb      	ldrh	r3, [r7, #20]
 8003290:	440b      	add	r3, r1
 8003292:	429a      	cmp	r2, r3
 8003294:	dc01      	bgt.n	800329a <checkAreaTouch+0x4a>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <checkAreaTouch+0x4c>
	return false;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc90      	pop	{r4, r7}
 80032a4:	4770      	bx	lr
	...

080032a8 <checkstrokeArea>:

void checkstrokeArea(void) {                                                                   // проверка нажатия на параметры ( импульс, пауза)
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af04      	add	r7, sp, #16
	if (!READ_FLAG(AREA1_PRESS, globalFlag)) {                                                 // если область активна то рисуем желтый прямоугольник
 80032ae:	4b31      	ldr	r3, [pc, #196]	; (8003374 <checkstrokeArea+0xcc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10c      	bne.n	80032d4 <checkstrokeArea+0x2c>
		drawSomePixelRoundRect(7, 28, 242, 48, 4, 2, ILI9341_BLACK);                           // а если нет то черным закрашиваем
 80032ba:	2300      	movs	r3, #0
 80032bc:	9302      	str	r3, [sp, #8]
 80032be:	2302      	movs	r3, #2
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2304      	movs	r3, #4
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2330      	movs	r3, #48	; 0x30
 80032c8:	22f2      	movs	r2, #242	; 0xf2
 80032ca:	211c      	movs	r1, #28
 80032cc:	2007      	movs	r0, #7
 80032ce:	f7fe feee 	bl	80020ae <drawSomePixelRoundRect>
 80032d2:	e00c      	b.n	80032ee <checkstrokeArea+0x46>
	} else {
		drawSomePixelRoundRect(7, 28, 242, 48, 4, 2, ILI9341_YELLOW);
 80032d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032d8:	9302      	str	r3, [sp, #8]
 80032da:	2302      	movs	r3, #2
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	2304      	movs	r3, #4
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	2330      	movs	r3, #48	; 0x30
 80032e4:	22f2      	movs	r2, #242	; 0xf2
 80032e6:	211c      	movs	r1, #28
 80032e8:	2007      	movs	r0, #7
 80032ea:	f7fe fee0 	bl	80020ae <drawSomePixelRoundRect>
	}
	if (!READ_FLAG(AREA2_PRESS, globalFlag)) {
 80032ee:	4b21      	ldr	r3, [pc, #132]	; (8003374 <checkstrokeArea+0xcc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10c      	bne.n	8003314 <checkstrokeArea+0x6c>
		drawSomePixelRoundRect(7, 76, 242, 48, 4, 2, ILI9341_BLACK);
 80032fa:	2300      	movs	r3, #0
 80032fc:	9302      	str	r3, [sp, #8]
 80032fe:	2302      	movs	r3, #2
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	2304      	movs	r3, #4
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2330      	movs	r3, #48	; 0x30
 8003308:	22f2      	movs	r2, #242	; 0xf2
 800330a:	214c      	movs	r1, #76	; 0x4c
 800330c:	2007      	movs	r0, #7
 800330e:	f7fe fece 	bl	80020ae <drawSomePixelRoundRect>
 8003312:	e00c      	b.n	800332e <checkstrokeArea+0x86>
	} else {
		drawSomePixelRoundRect(7, 76, 242, 48, 4, 2, ILI9341_YELLOW);
 8003314:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003318:	9302      	str	r3, [sp, #8]
 800331a:	2302      	movs	r3, #2
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	2304      	movs	r3, #4
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	2330      	movs	r3, #48	; 0x30
 8003324:	22f2      	movs	r2, #242	; 0xf2
 8003326:	214c      	movs	r1, #76	; 0x4c
 8003328:	2007      	movs	r0, #7
 800332a:	f7fe fec0 	bl	80020ae <drawSomePixelRoundRect>
	}
	if (!READ_FLAG(AREA3_PRESS, globalFlag)) {
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <checkstrokeArea+0xcc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10c      	bne.n	8003354 <checkstrokeArea+0xac>
		drawSomePixelRoundRect(7, 124, 242, 48, 4, 2, ILI9341_BLACK);
 800333a:	2300      	movs	r3, #0
 800333c:	9302      	str	r3, [sp, #8]
 800333e:	2302      	movs	r3, #2
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	2304      	movs	r3, #4
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2330      	movs	r3, #48	; 0x30
 8003348:	22f2      	movs	r2, #242	; 0xf2
 800334a:	217c      	movs	r1, #124	; 0x7c
 800334c:	2007      	movs	r0, #7
 800334e:	f7fe feae 	bl	80020ae <drawSomePixelRoundRect>
	} else {
		drawSomePixelRoundRect(7, 124, 242, 48, 4, 2, ILI9341_YELLOW);
	}
}
 8003352:	e00c      	b.n	800336e <checkstrokeArea+0xc6>
		drawSomePixelRoundRect(7, 124, 242, 48, 4, 2, ILI9341_YELLOW);
 8003354:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003358:	9302      	str	r3, [sp, #8]
 800335a:	2302      	movs	r3, #2
 800335c:	9301      	str	r3, [sp, #4]
 800335e:	2304      	movs	r3, #4
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2330      	movs	r3, #48	; 0x30
 8003364:	22f2      	movs	r2, #242	; 0xf2
 8003366:	217c      	movs	r1, #124	; 0x7c
 8003368:	2007      	movs	r0, #7
 800336a:	f7fe fea0 	bl	80020ae <drawSomePixelRoundRect>
}
 800336e:	bf00      	nop
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	200004c0 	.word	0x200004c0

08003378 <endOperationWindow>:

void endOperationWindow(uint8_t onOff) {                                                       // табличка генерация завершена
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af04      	add	r7, sp, #16
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
	if (onOff) {
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d023      	beq.n	80033d0 <endOperationWindow+0x58>
		ILI9341_FillRectangle(40, 60, 180, 60, ILI9341_BLACK);
 8003388:	2300      	movs	r3, #0
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	233c      	movs	r3, #60	; 0x3c
 800338e:	22b4      	movs	r2, #180	; 0xb4
 8003390:	213c      	movs	r1, #60	; 0x3c
 8003392:	2028      	movs	r0, #40	; 0x28
 8003394:	f7fe f832 	bl	80013fc <ILI9341_FillRectangle>
		drawSomePixelRoundRect(38, 58, 182, 62, 3, 2, ILI9341_YELLOW);
 8003398:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800339c:	9302      	str	r3, [sp, #8]
 800339e:	2302      	movs	r3, #2
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	2303      	movs	r3, #3
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	233e      	movs	r3, #62	; 0x3e
 80033a8:	22b6      	movs	r2, #182	; 0xb6
 80033aa:	213a      	movs	r1, #58	; 0x3a
 80033ac:	2026      	movs	r0, #38	; 0x26
 80033ae:	f7fe fe7e 	bl	80020ae <drawSomePixelRoundRect>
		strcpy(bufSpi, "COMPLETE");
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <endOperationWindow+0x7c>)
 80033b4:	4a10      	ldr	r2, [pc, #64]	; (80033f8 <endOperationWindow+0x80>)
 80033b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80033b8:	c303      	stmia	r3!, {r0, r1}
 80033ba:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteMyString(48, 65, bufSpi, ILI9341_RED, ILI9341_BLACK);
 80033bc:	2300      	movs	r3, #0
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033c4:	4a0b      	ldr	r2, [pc, #44]	; (80033f4 <endOperationWindow+0x7c>)
 80033c6:	2141      	movs	r1, #65	; 0x41
 80033c8:	2030      	movs	r0, #48	; 0x30
 80033ca:	f7fe f989 	bl	80016e0 <ILI9341_WriteMyString>
		ILI9341_FillRectangle(38, 58, 182, 62, ILI9341_BLACK);                                 // или же вернуть обратно изображение на дисплее
		printTImpulse();
		printTPause();
		checkstrokeArea();
	}
}
 80033ce:	e00d      	b.n	80033ec <endOperationWindow+0x74>
		ILI9341_FillRectangle(38, 58, 182, 62, ILI9341_BLACK);                                 // или же вернуть обратно изображение на дисплее
 80033d0:	2300      	movs	r3, #0
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	233e      	movs	r3, #62	; 0x3e
 80033d6:	22b6      	movs	r2, #182	; 0xb6
 80033d8:	213a      	movs	r1, #58	; 0x3a
 80033da:	2026      	movs	r0, #38	; 0x26
 80033dc:	f7fe f80e 	bl	80013fc <ILI9341_FillRectangle>
		printTImpulse();
 80033e0:	f7ff fdc6 	bl	8002f70 <printTImpulse>
		printTPause();
 80033e4:	f7ff fdfe 	bl	8002fe4 <printTPause>
		checkstrokeArea();
 80033e8:	f7ff ff5e 	bl	80032a8 <checkstrokeArea>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000268 	.word	0x20000268
 80033f8:	0800af44 	.word	0x0800af44

080033fc <overCurrent>:

void overCurrent (uint8_t onOff) {                                                            // табличка превышение тока!
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af04      	add	r7, sp, #16
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
	if (onOff) {
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d023      	beq.n	8003454 <overCurrent+0x58>
		ILI9341_FillRectangle(40, 60, 180, 60, ILI9341_BLACK);
 800340c:	2300      	movs	r3, #0
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	233c      	movs	r3, #60	; 0x3c
 8003412:	22b4      	movs	r2, #180	; 0xb4
 8003414:	213c      	movs	r1, #60	; 0x3c
 8003416:	2028      	movs	r0, #40	; 0x28
 8003418:	f7fd fff0 	bl	80013fc <ILI9341_FillRectangle>
		drawSomePixelRoundRect(38, 58, 182, 62, 3, 2, ILI9341_YELLOW);
 800341c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003420:	9302      	str	r3, [sp, #8]
 8003422:	2302      	movs	r3, #2
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	2303      	movs	r3, #3
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	233e      	movs	r3, #62	; 0x3e
 800342c:	22b6      	movs	r2, #182	; 0xb6
 800342e:	213a      	movs	r1, #58	; 0x3a
 8003430:	2026      	movs	r0, #38	; 0x26
 8003432:	f7fe fe3c 	bl	80020ae <drawSomePixelRoundRect>
		strcpy(bufSpi, "OVER CUR");
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <overCurrent+0x7c>)
 8003438:	4a10      	ldr	r2, [pc, #64]	; (800347c <overCurrent+0x80>)
 800343a:	ca07      	ldmia	r2, {r0, r1, r2}
 800343c:	c303      	stmia	r3!, {r0, r1}
 800343e:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteMyString(48, 65, bufSpi, ILI9341_RED, ILI9341_BLACK);
 8003440:	2300      	movs	r3, #0
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003448:	4a0b      	ldr	r2, [pc, #44]	; (8003478 <overCurrent+0x7c>)
 800344a:	2141      	movs	r1, #65	; 0x41
 800344c:	2030      	movs	r0, #48	; 0x30
 800344e:	f7fe f947 	bl	80016e0 <ILI9341_WriteMyString>
		ILI9341_FillRectangle(38, 58, 182, 62, ILI9341_BLACK);                                 // или же вернуть обратно изображение на дисплее
		printTImpulse();
		printTPause();
		checkstrokeArea();
	}
}
 8003452:	e00d      	b.n	8003470 <overCurrent+0x74>
		ILI9341_FillRectangle(38, 58, 182, 62, ILI9341_BLACK);                                 // или же вернуть обратно изображение на дисплее
 8003454:	2300      	movs	r3, #0
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	233e      	movs	r3, #62	; 0x3e
 800345a:	22b6      	movs	r2, #182	; 0xb6
 800345c:	213a      	movs	r1, #58	; 0x3a
 800345e:	2026      	movs	r0, #38	; 0x26
 8003460:	f7fd ffcc 	bl	80013fc <ILI9341_FillRectangle>
		printTImpulse();
 8003464:	f7ff fd84 	bl	8002f70 <printTImpulse>
		printTPause();
 8003468:	f7ff fdbc 	bl	8002fe4 <printTPause>
		checkstrokeArea();
 800346c:	f7ff ff1c 	bl	80032a8 <checkstrokeArea>
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20000268 	.word	0x20000268
 800347c:	0800af50 	.word	0x0800af50

08003480 <powerButton>:

void powerButton(void) {                                                                       // включаем/выключаем кнопку повер
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af02      	add	r7, sp, #8
	if (!READ_FLAG(ONE_TOUCH, globalFlag) && !timToEndOperation && !timToOvercurrent) {        // единичное нажатие + пока показывает комплит не нажимать
 8003486:	4b23      	ldr	r3, [pc, #140]	; (8003514 <powerButton+0x94>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d13c      	bne.n	800350c <powerButton+0x8c>
 8003492:	4b21      	ldr	r3, [pc, #132]	; (8003518 <powerButton+0x98>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d138      	bne.n	800350c <powerButton+0x8c>
 800349a:	4b20      	ldr	r3, [pc, #128]	; (800351c <powerButton+0x9c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d134      	bne.n	800350c <powerButton+0x8c>
		SET_FLAG(ONE_TOUCH, globalFlag);
 80034a2:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <powerButton+0x94>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f043 0302 	orr.w	r3, r3, #2
 80034aa:	4a1a      	ldr	r2, [pc, #104]	; (8003514 <powerButton+0x94>)
 80034ac:	6013      	str	r3, [r2, #0]
		RESET_FLAG(AREA1_PRESS|AREA2_PRESS|AREA3_PRESS, globalFlag);                           // уберем выбор области при пуске
 80034ae:	4b19      	ldr	r3, [pc, #100]	; (8003514 <powerButton+0x94>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80034b6:	4a17      	ldr	r2, [pc, #92]	; (8003514 <powerButton+0x94>)
 80034b8:	6013      	str	r3, [r2, #0]
		checkstrokeArea();
 80034ba:	f7ff fef5 	bl	80032a8 <checkstrokeArea>
		if (ParamDevice.NPNTranzistor || ParamDevice.PNPTranzistor) {                          // если хоть один из транзисторов включен
 80034be:	4b18      	ldr	r3, [pc, #96]	; (8003520 <powerButton+0xa0>)
 80034c0:	7adb      	ldrb	r3, [r3, #11]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <powerButton+0x4e>
 80034c6:	4b16      	ldr	r3, [pc, #88]	; (8003520 <powerButton+0xa0>)
 80034c8:	7b1b      	ldrb	r3, [r3, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01e      	beq.n	800350c <powerButton+0x8c>
			if (ParamDevice.power) {                                                           // если питание включено
 80034ce:	4b14      	ldr	r3, [pc, #80]	; (8003520 <powerButton+0xa0>)
 80034d0:	7b5b      	ldrb	r3, [r3, #13]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <powerButton+0x72>
				ParamDevice.power = false;                                                     // выключим
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <powerButton+0xa0>)
 80034d8:	2200      	movs	r2, #0
 80034da:	735a      	strb	r2, [r3, #13]
				printColorImage(246, 182, 50, 50, NO_PRESSED, image_powerGreen);
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <powerButton+0xa4>)
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	2300      	movs	r3, #0
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2332      	movs	r3, #50	; 0x32
 80034e6:	2232      	movs	r2, #50	; 0x32
 80034e8:	21b6      	movs	r1, #182	; 0xb6
 80034ea:	20f6      	movs	r0, #246	; 0xf6
 80034ec:	f7ff fdfa 	bl	80030e4 <printColorImage>
				ParamDevice.power = true;                                                      // а если выключено то включим
				printColorImage(246, 182, 50, 50, PRESSED, image_powerRed);
			}
		}
	}
}
 80034f0:	e00c      	b.n	800350c <powerButton+0x8c>
				ParamDevice.power = true;                                                      // а если выключено то включим
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <powerButton+0xa0>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	735a      	strb	r2, [r3, #13]
				printColorImage(246, 182, 50, 50, PRESSED, image_powerRed);
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <powerButton+0xa8>)
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	2301      	movs	r3, #1
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2332      	movs	r3, #50	; 0x32
 8003502:	2232      	movs	r2, #50	; 0x32
 8003504:	21b6      	movs	r1, #182	; 0xb6
 8003506:	20f6      	movs	r0, #246	; 0xf6
 8003508:	f7ff fdec 	bl	80030e4 <printColorImage>
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	200004c0 	.word	0x200004c0
 8003518:	200004d8 	.word	0x200004d8
 800351c:	200004d0 	.word	0x200004d0
 8003520:	20000040 	.word	0x20000040
 8003524:	0800c2e4 	.word	0x0800c2e4
 8003528:	0800af5c 	.word	0x0800af5c

0800352c <externalPowerOff>:

void externalPowerOff(void) {                                                                 // перерисовать кнопку включения из вне
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af02      	add	r7, sp, #8
	printColorImage(246, 182, 50, 50, NO_PRESSED, image_powerGreen);
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <externalPowerOff+0x20>)
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	2300      	movs	r3, #0
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2332      	movs	r3, #50	; 0x32
 800353c:	2232      	movs	r2, #50	; 0x32
 800353e:	21b6      	movs	r1, #182	; 0xb6
 8003540:	20f6      	movs	r0, #246	; 0xf6
 8003542:	f7ff fdcf 	bl	80030e4 <printColorImage>
}
 8003546:	bf00      	nop
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	0800c2e4 	.word	0x0800c2e4

08003550 <rangeMinMax>:

void rangeMinMax(uint16_t *data, uint16_t count, uint16_t plus_minus, uint16_t min, uint16_t max) {   // ограничить максимальное количество ввода
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	4603      	mov	r3, r0
 8003560:	817b      	strh	r3, [r7, #10]
 8003562:	460b      	mov	r3, r1
 8003564:	813b      	strh	r3, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
	if (plus_minus == PLUS) {
 800356a:	893b      	ldrh	r3, [r7, #8]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d11b      	bne.n	80035a8 <rangeMinMax+0x58>
		if (*data + count < max) {
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	897b      	ldrh	r3, [r7, #10]
 8003578:	441a      	add	r2, r3
 800357a:	8b3b      	ldrh	r3, [r7, #24]
 800357c:	429a      	cmp	r2, r3
 800357e:	da07      	bge.n	8003590 <rangeMinMax+0x40>
			*data += count;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	881a      	ldrh	r2, [r3, #0]
 8003584:	897b      	ldrh	r3, [r7, #10]
 8003586:	4413      	add	r3, r2
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	801a      	strh	r2, [r3, #0]
		} else {
			if (*data > min)
				*data -= 1;
		}
	}
}
 800358e:	e026      	b.n	80035de <rangeMinMax+0x8e>
			if (*data < max)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	8b3a      	ldrh	r2, [r7, #24]
 8003596:	429a      	cmp	r2, r3
 8003598:	d921      	bls.n	80035de <rangeMinMax+0x8e>
				*data += 1;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	3301      	adds	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	801a      	strh	r2, [r3, #0]
}
 80035a6:	e01a      	b.n	80035de <rangeMinMax+0x8e>
		if (*data - count > min) {
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	1ad2      	subs	r2, r2, r3
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	dd07      	ble.n	80035c8 <rangeMinMax+0x78>
			*data -= count;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	881a      	ldrh	r2, [r3, #0]
 80035bc:	897b      	ldrh	r3, [r7, #10]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	801a      	strh	r2, [r3, #0]
}
 80035c6:	e00a      	b.n	80035de <rangeMinMax+0x8e>
			if (*data > min)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d205      	bcs.n	80035de <rangeMinMax+0x8e>
				*data -= 1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	801a      	strh	r2, [r3, #0]
}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <changeData>:

void changeData(uint16_t count, uint16_t plus_minus) {                                        // изменить параметры импульса
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	4603      	mov	r3, r0
 80035f4:	460a      	mov	r2, r1
 80035f6:	80fb      	strh	r3, [r7, #6]
 80035f8:	4613      	mov	r3, r2
 80035fa:	80bb      	strh	r3, [r7, #4]
	if (READ_FLAG(AREA1_PRESS, globalFlag)) {                                                 // в зависимости от выбранной области
 80035fc:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <changeData+0xb8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d019      	beq.n	800363c <changeData+0x50>
		if (ParamDevice.unitImpuls != 2) {                                                    // если мы не на секундах
 8003608:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <changeData+0xbc>)
 800360a:	7a1b      	ldrb	r3, [r3, #8]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d009      	beq.n	8003624 <changeData+0x38>
			rangeMinMax(&ParamDevice.impuls, count, plus_minus, 1, 999);                      // то можем изменяться до 999
 8003610:	88ba      	ldrh	r2, [r7, #4]
 8003612:	88f9      	ldrh	r1, [r7, #6]
 8003614:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	2301      	movs	r3, #1
 800361c:	4822      	ldr	r0, [pc, #136]	; (80036a8 <changeData+0xbc>)
 800361e:	f7ff ff97 	bl	8003550 <rangeMinMax>
 8003622:	e007      	b.n	8003634 <changeData+0x48>
		} else {
			rangeMinMax(&ParamDevice.impuls, count, plus_minus, 1, 20);                       // а если на секундах то только до 20
 8003624:	88ba      	ldrh	r2, [r7, #4]
 8003626:	88f9      	ldrh	r1, [r7, #6]
 8003628:	2314      	movs	r3, #20
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2301      	movs	r3, #1
 800362e:	481e      	ldr	r0, [pc, #120]	; (80036a8 <changeData+0xbc>)
 8003630:	f7ff ff8e 	bl	8003550 <rangeMinMax>
		}
		printTImpulse();                                                                      // и перерисуем
 8003634:	f7ff fc9c 	bl	8002f70 <printTImpulse>
		printFreeq();                                                                         // и перепишем частоту
 8003638:	f7ff fbb4 	bl	8002da4 <printFreeq>
	}
	if (READ_FLAG(AREA2_PRESS, globalFlag)) {
 800363c:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <changeData+0xb8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d019      	beq.n	800367c <changeData+0x90>
		if (ParamDevice.unitPause != 2) {
 8003648:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <changeData+0xbc>)
 800364a:	7a5b      	ldrb	r3, [r3, #9]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d009      	beq.n	8003664 <changeData+0x78>
			rangeMinMax(&ParamDevice.pause, count, plus_minus, 1, 999);
 8003650:	88ba      	ldrh	r2, [r7, #4]
 8003652:	88f9      	ldrh	r1, [r7, #6]
 8003654:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2301      	movs	r3, #1
 800365c:	4813      	ldr	r0, [pc, #76]	; (80036ac <changeData+0xc0>)
 800365e:	f7ff ff77 	bl	8003550 <rangeMinMax>
 8003662:	e007      	b.n	8003674 <changeData+0x88>
		} else {
			rangeMinMax(&ParamDevice.pause, count, plus_minus, 1, 20);
 8003664:	88ba      	ldrh	r2, [r7, #4]
 8003666:	88f9      	ldrh	r1, [r7, #6]
 8003668:	2314      	movs	r3, #20
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2301      	movs	r3, #1
 800366e:	480f      	ldr	r0, [pc, #60]	; (80036ac <changeData+0xc0>)
 8003670:	f7ff ff6e 	bl	8003550 <rangeMinMax>
		}
		printTPause();
 8003674:	f7ff fcb6 	bl	8002fe4 <printTPause>
		printFreeq();
 8003678:	f7ff fb94 	bl	8002da4 <printFreeq>
	}
	if (READ_FLAG(AREA3_PRESS, globalFlag)) {                                                 // чуть проще для количества повторов
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <changeData+0xb8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d009      	beq.n	800369c <changeData+0xb0>
		rangeMinMax(&ParamDevice.count, count, plus_minus, 0, 255);
 8003688:	88ba      	ldrh	r2, [r7, #4]
 800368a:	88f9      	ldrh	r1, [r7, #6]
 800368c:	23ff      	movs	r3, #255	; 0xff
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	2300      	movs	r3, #0
 8003692:	4807      	ldr	r0, [pc, #28]	; (80036b0 <changeData+0xc4>)
 8003694:	f7ff ff5c 	bl	8003550 <rangeMinMax>
		printCount();
 8003698:	f7ff fcda 	bl	8003050 <printCount>
	}
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	200004c0 	.word	0x200004c0
 80036a8:	20000040 	.word	0x20000040
 80036ac:	20000042 	.word	0x20000042
 80036b0:	20000044 	.word	0x20000044

080036b4 <speedControl>:

void speedControl(void) {                                                                     // инкремент в зависимости от длительности нажатия
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
	if (timHoldButtonPress < SPPED4 && timHoldButtonPress > SPPED3) {
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <speedControl+0x74>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f241 3287 	movw	r2, #4999	; 0x1387
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d807      	bhi.n	80036d4 <speedControl+0x20>
 80036c4:	4b18      	ldr	r3, [pc, #96]	; (8003728 <speedControl+0x74>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80036cc:	d902      	bls.n	80036d4 <speedControl+0x20>
		countSpeed = 2;
 80036ce:	4b17      	ldr	r3, [pc, #92]	; (800372c <speedControl+0x78>)
 80036d0:	2202      	movs	r2, #2
 80036d2:	801a      	strh	r2, [r3, #0]
	}
	if (timHoldButtonPress < SPPED3 && timHoldButtonPress > SPPED2) {
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <speedControl+0x74>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80036dc:	d208      	bcs.n	80036f0 <speedControl+0x3c>
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <speedControl+0x74>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d902      	bls.n	80036f0 <speedControl+0x3c>
		countSpeed = 5;
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <speedControl+0x78>)
 80036ec:	2205      	movs	r2, #5
 80036ee:	801a      	strh	r2, [r3, #0]
	}
	if (timHoldButtonPress < SPPED2 && timHoldButtonPress > SPPED1) {
 80036f0:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <speedControl+0x74>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d807      	bhi.n	800370c <speedControl+0x58>
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <speedControl+0x74>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003704:	d902      	bls.n	800370c <speedControl+0x58>
		countSpeed = 10;
 8003706:	4b09      	ldr	r3, [pc, #36]	; (800372c <speedControl+0x78>)
 8003708:	220a      	movs	r2, #10
 800370a:	801a      	strh	r2, [r3, #0]
	}
	if (timHoldButtonPress < SPPED1) {
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <speedControl+0x74>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003714:	d202      	bcs.n	800371c <speedControl+0x68>
		countSpeed = 25;
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <speedControl+0x78>)
 8003718:	2219      	movs	r2, #25
 800371a:	801a      	strh	r2, [r3, #0]
	}
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	2000029c 	.word	0x2000029c
 800372c:	2000002c 	.word	0x2000002c

08003730 <changeParamPlusMinus>:

void changeParamPlusMinus(uint16_t plus_minus) {                                             // обработка нажатий плюс минуса
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
	if (!READ_FLAG(TOUCH_DISPLAY, globalFlag)) {                                             // одно касание одно нажатие
 800373a:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <changeParamPlusMinus+0x90>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <changeParamPlusMinus+0x2a>
		SET_FLAG(TOUCH_DISPLAY, globalFlag);
 8003746:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <changeParamPlusMinus+0x90>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <changeParamPlusMinus+0x90>)
 8003750:	6013      	str	r3, [r2, #0]
		timHoldButtonPress = SPPED5;                                                         // сбросим время для инкремента
 8003752:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <changeParamPlusMinus+0x94>)
 8003754:	f241 527c 	movw	r2, #5500	; 0x157c
 8003758:	601a      	str	r2, [r3, #0]
	}
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {                                                 // чтоб можео было нажимать по одному разу
 800375a:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <changeParamPlusMinus+0x90>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d105      	bne.n	8003772 <changeParamPlusMinus+0x42>
		changeData(1, plus_minus);
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	4619      	mov	r1, r3
 800376a:	2001      	movs	r0, #1
 800376c:	f7ff ff3e 	bl	80035ec <changeData>
 8003770:	e013      	b.n	800379a <changeParamPlusMinus+0x6a>
	} else {
		if (countSpeed >= 2) {                                                               // спустя время когда у нас счетчик отсчитает увеличиваем на большее количество
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <changeParamPlusMinus+0x98>)
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d90f      	bls.n	800379a <changeParamPlusMinus+0x6a>
			changeData(countSpeed, plus_minus);
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <changeParamPlusMinus+0x98>)
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ff32 	bl	80035ec <changeData>
			buzzerSet(100 - countSpeed);
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <changeParamPlusMinus+0x98>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003790:	b29b      	uxth	r3, r3
 8003792:	b21b      	sxth	r3, r3
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fd8b 	bl	80042b0 <buzzerSet>
		}
	}
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {                                                 // поднимем флаг что один раз уже нажали
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <changeParamPlusMinus+0x90>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d105      	bne.n	80037b2 <changeParamPlusMinus+0x82>
		SET_FLAG(ONE_TOUCH, globalFlag);
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <changeParamPlusMinus+0x90>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f043 0302 	orr.w	r3, r3, #2
 80037ae:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <changeParamPlusMinus+0x90>)
 80037b0:	6013      	str	r3, [r2, #0]
	}
	speedControl();
 80037b2:	f7ff ff7f 	bl	80036b4 <speedControl>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	200004c0 	.word	0x200004c0
 80037c4:	2000029c 	.word	0x2000029c
 80037c8:	2000002c 	.word	0x2000002c

080037cc <togleUnits>:

void togleUnits(void) {                                                                      // переключалка единиц
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {                                                 // так же запрещаем множественное нажатие
 80037d0:	4b2a      	ldr	r3, [pc, #168]	; (800387c <togleUnits+0xb0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d14d      	bne.n	8003878 <togleUnits+0xac>
		SET_FLAG(ONE_TOUCH, globalFlag);
 80037dc:	4b27      	ldr	r3, [pc, #156]	; (800387c <togleUnits+0xb0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f043 0302 	orr.w	r3, r3, #2
 80037e4:	4a25      	ldr	r2, [pc, #148]	; (800387c <togleUnits+0xb0>)
 80037e6:	6013      	str	r3, [r2, #0]

		if (READ_FLAG(AREA1_PRESS, globalFlag)) {                                            // в зависимости от того в какой мы области
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <togleUnits+0xb0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01e      	beq.n	8003832 <togleUnits+0x66>
			if (ParamDevice.unitImpuls < 2)
 80037f4:	4b22      	ldr	r3, [pc, #136]	; (8003880 <togleUnits+0xb4>)
 80037f6:	7a1b      	ldrb	r3, [r3, #8]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d806      	bhi.n	800380a <togleUnits+0x3e>
				ParamDevice.unitImpuls++;                                                    // меняем единицы времени
 80037fc:	4b20      	ldr	r3, [pc, #128]	; (8003880 <togleUnits+0xb4>)
 80037fe:	7a1b      	ldrb	r3, [r3, #8]
 8003800:	3301      	adds	r3, #1
 8003802:	b2da      	uxtb	r2, r3
 8003804:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <togleUnits+0xb4>)
 8003806:	721a      	strb	r2, [r3, #8]
 8003808:	e002      	b.n	8003810 <togleUnits+0x44>
			else
				ParamDevice.unitImpuls = 0;
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <togleUnits+0xb4>)
 800380c:	2200      	movs	r2, #0
 800380e:	721a      	strb	r2, [r3, #8]
			printTImpulse();
 8003810:	f7ff fbae 	bl	8002f70 <printTImpulse>
			if (ParamDevice.unitImpuls == 2 && ParamDevice.impuls > 20) {
 8003814:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <togleUnits+0xb4>)
 8003816:	7a1b      	ldrb	r3, [r3, #8]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d106      	bne.n	800382a <togleUnits+0x5e>
 800381c:	4b18      	ldr	r3, [pc, #96]	; (8003880 <togleUnits+0xb4>)
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	2b14      	cmp	r3, #20
 8003822:	d902      	bls.n	800382a <togleUnits+0x5e>
				ParamDevice.impuls = 20;
 8003824:	4b16      	ldr	r3, [pc, #88]	; (8003880 <togleUnits+0xb4>)
 8003826:	2214      	movs	r2, #20
 8003828:	801a      	strh	r2, [r3, #0]
			}
			printTImpulse();                                                                // и обновляем надписи
 800382a:	f7ff fba1 	bl	8002f70 <printTImpulse>
			printFreeq();
 800382e:	f7ff fab9 	bl	8002da4 <printFreeq>
		}
		if (READ_FLAG(AREA2_PRESS, globalFlag)) {
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <togleUnits+0xb0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01c      	beq.n	8003878 <togleUnits+0xac>
			if (ParamDevice.unitPause < 2)
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <togleUnits+0xb4>)
 8003840:	7a5b      	ldrb	r3, [r3, #9]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d806      	bhi.n	8003854 <togleUnits+0x88>
				ParamDevice.unitPause++;
 8003846:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <togleUnits+0xb4>)
 8003848:	7a5b      	ldrb	r3, [r3, #9]
 800384a:	3301      	adds	r3, #1
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <togleUnits+0xb4>)
 8003850:	725a      	strb	r2, [r3, #9]
 8003852:	e002      	b.n	800385a <togleUnits+0x8e>
			else
				ParamDevice.unitPause = 0;
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <togleUnits+0xb4>)
 8003856:	2200      	movs	r2, #0
 8003858:	725a      	strb	r2, [r3, #9]
			if (ParamDevice.unitPause == 2 && ParamDevice.pause > 20) {
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <togleUnits+0xb4>)
 800385c:	7a5b      	ldrb	r3, [r3, #9]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d106      	bne.n	8003870 <togleUnits+0xa4>
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <togleUnits+0xb4>)
 8003864:	885b      	ldrh	r3, [r3, #2]
 8003866:	2b14      	cmp	r3, #20
 8003868:	d902      	bls.n	8003870 <togleUnits+0xa4>
				ParamDevice.pause = 20;
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <togleUnits+0xb4>)
 800386c:	2214      	movs	r2, #20
 800386e:	805a      	strh	r2, [r3, #2]
			}
			printTPause();
 8003870:	f7ff fbb8 	bl	8002fe4 <printTPause>
			printFreeq();
 8003874:	f7ff fa96 	bl	8002da4 <printFreeq>
		}
	}
}
 8003878:	bf00      	nop
 800387a:	bd80      	pop	{r7, pc}
 800387c:	200004c0 	.word	0x200004c0
 8003880:	20000040 	.word	0x20000040

08003884 <NPN_PNPButton>:

void NPN_PNPButton(uint8_t type, uint8_t status) {                                               // выбираем каким транзистором подавать импульс
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af04      	add	r7, sp, #16
 800388a:	4603      	mov	r3, r0
 800388c:	460a      	mov	r2, r1
 800388e:	71fb      	strb	r3, [r7, #7]
 8003890:	4613      	mov	r3, r2
 8003892:	71bb      	strb	r3, [r7, #6]
	if (type) {
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d045      	beq.n	8003926 <NPN_PNPButton+0xa2>
		if (status) {
 800389a:	79bb      	ldrb	r3, [r7, #6]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d021      	beq.n	80038e4 <NPN_PNPButton+0x60>
			ParamDevice.NPNTranzistor = true;                                                    // включаем транзистор
 80038a0:	4b45      	ldr	r3, [pc, #276]	; (80039b8 <NPN_PNPButton+0x134>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	72da      	strb	r2, [r3, #11]
			strcpy(bufSpi, "NPN");
 80038a6:	4b45      	ldr	r3, [pc, #276]	; (80039bc <NPN_PNPButton+0x138>)
 80038a8:	4a45      	ldr	r2, [pc, #276]	; (80039c0 <NPN_PNPButton+0x13c>)
 80038aa:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 102, 50, 26, 3, ILI9341_YELLOW);                                  // делаем заливку
 80038ac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	2303      	movs	r3, #3
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	231a      	movs	r3, #26
 80038b8:	2232      	movs	r2, #50	; 0x32
 80038ba:	2166      	movs	r1, #102	; 0x66
 80038bc:	f44f 7082 	mov.w	r0, #260	; 0x104
 80038c0:	f7fe fc80 	bl	80021c4 <fillRoundRect>
			ILI9341_WriteString(270, 106, bufSpi, Font_11x18, ILI9341_BLACK, ILI9341_YELLOW);    // печатаем тип транзистора
 80038c4:	4b3f      	ldr	r3, [pc, #252]	; (80039c4 <NPN_PNPButton+0x140>)
 80038c6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80038ca:	9202      	str	r2, [sp, #8]
 80038cc:	2200      	movs	r2, #0
 80038ce:	9201      	str	r2, [sp, #4]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	9200      	str	r2, [sp, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a39      	ldr	r2, [pc, #228]	; (80039bc <NPN_PNPButton+0x138>)
 80038d8:	216a      	movs	r1, #106	; 0x6a
 80038da:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80038de:	f7fd ffd6 	bl	800188e <ILI9341_WriteString>
			fillRoundRect(260, 140, 50, 26, 3, ILI9341_BLUE);
			ILI9341_WriteString(270, 144, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
		}
	}
	//printTypeOutput();                                                                           // дополнительно вверху переписываем типы транзисторов
}
 80038e2:	e065      	b.n	80039b0 <NPN_PNPButton+0x12c>
			ParamDevice.NPNTranzistor = false;
 80038e4:	4b34      	ldr	r3, [pc, #208]	; (80039b8 <NPN_PNPButton+0x134>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	72da      	strb	r2, [r3, #11]
			strcpy(bufSpi, "NPN");
 80038ea:	4b34      	ldr	r3, [pc, #208]	; (80039bc <NPN_PNPButton+0x138>)
 80038ec:	4a34      	ldr	r2, [pc, #208]	; (80039c0 <NPN_PNPButton+0x13c>)
 80038ee:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 102, 50, 26, 3, ILI9341_BLUE);
 80038f0:	231f      	movs	r3, #31
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	2303      	movs	r3, #3
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	231a      	movs	r3, #26
 80038fa:	2232      	movs	r2, #50	; 0x32
 80038fc:	2166      	movs	r1, #102	; 0x66
 80038fe:	f44f 7082 	mov.w	r0, #260	; 0x104
 8003902:	f7fe fc5f 	bl	80021c4 <fillRoundRect>
			ILI9341_WriteString(270, 106, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
 8003906:	4b2f      	ldr	r3, [pc, #188]	; (80039c4 <NPN_PNPButton+0x140>)
 8003908:	221f      	movs	r2, #31
 800390a:	9202      	str	r2, [sp, #8]
 800390c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003910:	9201      	str	r2, [sp, #4]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	9200      	str	r2, [sp, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a28      	ldr	r2, [pc, #160]	; (80039bc <NPN_PNPButton+0x138>)
 800391a:	216a      	movs	r1, #106	; 0x6a
 800391c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003920:	f7fd ffb5 	bl	800188e <ILI9341_WriteString>
}
 8003924:	e044      	b.n	80039b0 <NPN_PNPButton+0x12c>
		if (status) {
 8003926:	79bb      	ldrb	r3, [r7, #6]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d021      	beq.n	8003970 <NPN_PNPButton+0xec>
			ParamDevice.PNPTranzistor = true;
 800392c:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <NPN_PNPButton+0x134>)
 800392e:	2201      	movs	r2, #1
 8003930:	731a      	strb	r2, [r3, #12]
			strcpy(bufSpi, "PNP");
 8003932:	4b22      	ldr	r3, [pc, #136]	; (80039bc <NPN_PNPButton+0x138>)
 8003934:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <NPN_PNPButton+0x144>)
 8003936:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 140, 50, 26, 3, ILI9341_YELLOW);
 8003938:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	2303      	movs	r3, #3
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	231a      	movs	r3, #26
 8003944:	2232      	movs	r2, #50	; 0x32
 8003946:	218c      	movs	r1, #140	; 0x8c
 8003948:	f44f 7082 	mov.w	r0, #260	; 0x104
 800394c:	f7fe fc3a 	bl	80021c4 <fillRoundRect>
			ILI9341_WriteString(270, 144, bufSpi, Font_11x18, ILI9341_BLACK, ILI9341_YELLOW);
 8003950:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <NPN_PNPButton+0x140>)
 8003952:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003956:	9202      	str	r2, [sp, #8]
 8003958:	2200      	movs	r2, #0
 800395a:	9201      	str	r2, [sp, #4]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	9200      	str	r2, [sp, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a16      	ldr	r2, [pc, #88]	; (80039bc <NPN_PNPButton+0x138>)
 8003964:	2190      	movs	r1, #144	; 0x90
 8003966:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800396a:	f7fd ff90 	bl	800188e <ILI9341_WriteString>
}
 800396e:	e01f      	b.n	80039b0 <NPN_PNPButton+0x12c>
			ParamDevice.PNPTranzistor = false;
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <NPN_PNPButton+0x134>)
 8003972:	2200      	movs	r2, #0
 8003974:	731a      	strb	r2, [r3, #12]
			strcpy(bufSpi, "PNP");
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <NPN_PNPButton+0x138>)
 8003978:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <NPN_PNPButton+0x144>)
 800397a:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 140, 50, 26, 3, ILI9341_BLUE);
 800397c:	231f      	movs	r3, #31
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	2303      	movs	r3, #3
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	231a      	movs	r3, #26
 8003986:	2232      	movs	r2, #50	; 0x32
 8003988:	218c      	movs	r1, #140	; 0x8c
 800398a:	f44f 7082 	mov.w	r0, #260	; 0x104
 800398e:	f7fe fc19 	bl	80021c4 <fillRoundRect>
			ILI9341_WriteString(270, 144, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <NPN_PNPButton+0x140>)
 8003994:	221f      	movs	r2, #31
 8003996:	9202      	str	r2, [sp, #8]
 8003998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800399c:	9201      	str	r2, [sp, #4]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	9200      	str	r2, [sp, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a05      	ldr	r2, [pc, #20]	; (80039bc <NPN_PNPButton+0x138>)
 80039a6:	2190      	movs	r1, #144	; 0x90
 80039a8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80039ac:	f7fd ff6f 	bl	800188e <ILI9341_WriteString>
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000040 	.word	0x20000040
 80039bc:	20000268 	.word	0x20000268
 80039c0:	004e504e 	.word	0x004e504e
 80039c4:	20000000 	.word	0x20000000
 80039c8:	00504e50 	.word	0x00504e50

080039cc <setParamNPN_PNP>:

void setParamNPN_PNP(uint8_t type) {                                                             // отслеживаем нажатие по кнопкам выбора транзистора
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	71fb      	strb	r3, [r7, #7]
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {                                                     // единичное нажатие
 80039d6:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <setParamNPN_PNP+0x6c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d125      	bne.n	8003a2e <setParamNPN_PNP+0x62>
		SET_FLAG(ONE_TOUCH, globalFlag);
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <setParamNPN_PNP+0x6c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f043 0302 	orr.w	r3, r3, #2
 80039ea:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <setParamNPN_PNP+0x6c>)
 80039ec:	6013      	str	r3, [r2, #0]
		if (type == NPN) {                                                                       // ну и дергаем вывод
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d10c      	bne.n	8003a0e <setParamNPN_PNP+0x42>
			if (ParamDevice.NPNTranzistor) {
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <setParamNPN_PNP+0x70>)
 80039f6:	7adb      	ldrb	r3, [r3, #11]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <setParamNPN_PNP+0x3a>
				NPN_PNPButton(NPN, NO_PRESSED);
 80039fc:	2100      	movs	r1, #0
 80039fe:	2001      	movs	r0, #1
 8003a00:	f7ff ff40 	bl	8003884 <NPN_PNPButton>
 8003a04:	e003      	b.n	8003a0e <setParamNPN_PNP+0x42>
			} else {
				NPN_PNPButton(NPN, PRESSED);
 8003a06:	2101      	movs	r1, #1
 8003a08:	2001      	movs	r0, #1
 8003a0a:	f7ff ff3b 	bl	8003884 <NPN_PNPButton>
			}
		}
		if (type == PNP) {
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10c      	bne.n	8003a2e <setParamNPN_PNP+0x62>
			if (ParamDevice.PNPTranzistor) {
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <setParamNPN_PNP+0x70>)
 8003a16:	7b1b      	ldrb	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d004      	beq.n	8003a26 <setParamNPN_PNP+0x5a>
				NPN_PNPButton(PNP, NO_PRESSED);
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f7ff ff30 	bl	8003884 <NPN_PNPButton>
			} else {
				NPN_PNPButton(PNP, PRESSED);
			}
		}
	}
}
 8003a24:	e003      	b.n	8003a2e <setParamNPN_PNP+0x62>
				NPN_PNPButton(PNP, PRESSED);
 8003a26:	2101      	movs	r1, #1
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f7ff ff2b 	bl	8003884 <NPN_PNPButton>
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200004c0 	.word	0x200004c0
 8003a3c:	20000040 	.word	0x20000040

08003a40 <checkButtonPress>:

void checkButtonPress(void) {                                                                    // отслеживаем нажатие кнопок
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af02      	add	r7, sp, #8
	if (!READ_TOUCH_IRQ) {                                                                       // считываем нажатие
 8003a46:	4b8b      	ldr	r3, [pc, #556]	; (8003c74 <checkButtonPress+0x234>)
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 8105 	bne.w	8003c5e <checkButtonPress+0x21e>
		if (ILI9341_TouchGetCoordinates(&x, &y)) {                                               // считываем данные из SPI
 8003a54:	4988      	ldr	r1, [pc, #544]	; (8003c78 <checkButtonPress+0x238>)
 8003a56:	4889      	ldr	r0, [pc, #548]	; (8003c7c <checkButtonPress+0x23c>)
 8003a58:	f7fe fd64 	bl	8002524 <ILI9341_TouchGetCoordinates>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80f5 	beq.w	8003c4e <checkButtonPress+0x20e>

			if (!READ_FLAG(ONE_BUZZER, globalFlag)) {                                            // ставим флаг чтоб один раз пикнуть бузером
 8003a64:	4b86      	ldr	r3, [pc, #536]	; (8003c80 <checkButtonPress+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d108      	bne.n	8003a82 <checkButtonPress+0x42>
				SET_FLAG(ONE_BUZZER, globalFlag);
 8003a70:	4b83      	ldr	r3, [pc, #524]	; (8003c80 <checkButtonPress+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f043 0304 	orr.w	r3, r3, #4
 8003a78:	4a81      	ldr	r2, [pc, #516]	; (8003c80 <checkButtonPress+0x240>)
 8003a7a:	6013      	str	r3, [r2, #0]
				buzzerSet(100);
 8003a7c:	2064      	movs	r0, #100	; 0x64
 8003a7e:	f000 fc17 	bl	80042b0 <buzzerSet>
			}

			if (checkAreaTouch(x, y, 246, 182, 50, 50)) {                                        // считываем не нажата ли кнопка пуск
 8003a82:	4b7e      	ldr	r3, [pc, #504]	; (8003c7c <checkButtonPress+0x23c>)
 8003a84:	8818      	ldrh	r0, [r3, #0]
 8003a86:	4b7c      	ldr	r3, [pc, #496]	; (8003c78 <checkButtonPress+0x238>)
 8003a88:	8819      	ldrh	r1, [r3, #0]
 8003a8a:	2332      	movs	r3, #50	; 0x32
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	2332      	movs	r3, #50	; 0x32
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	23b6      	movs	r3, #182	; 0xb6
 8003a94:	22f6      	movs	r2, #246	; 0xf6
 8003a96:	f7ff fbdb 	bl	8003250 <checkAreaTouch>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <checkButtonPress+0x64>
				powerButton();
 8003aa0:	f7ff fcee 	bl	8003480 <powerButton>
			}
			if (!ParamDevice.power) {                                                            // запрещаем что либо менять пока идут импульсы
 8003aa4:	4b77      	ldr	r3, [pc, #476]	; (8003c84 <checkButtonPress+0x244>)
 8003aa6:	7b5b      	ldrb	r3, [r3, #13]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f040 80d0 	bne.w	8003c4e <checkButtonPress+0x20e>
				if (checkAreaTouch(x, y, 15, 30, 235, 35)) {                                     // проверка и сброс соседних областей
 8003aae:	4b73      	ldr	r3, [pc, #460]	; (8003c7c <checkButtonPress+0x23c>)
 8003ab0:	8818      	ldrh	r0, [r3, #0]
 8003ab2:	4b71      	ldr	r3, [pc, #452]	; (8003c78 <checkButtonPress+0x238>)
 8003ab4:	8819      	ldrh	r1, [r3, #0]
 8003ab6:	2323      	movs	r3, #35	; 0x23
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	23eb      	movs	r3, #235	; 0xeb
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	231e      	movs	r3, #30
 8003ac0:	220f      	movs	r2, #15
 8003ac2:	f7ff fbc5 	bl	8003250 <checkAreaTouch>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00d      	beq.n	8003ae8 <checkButtonPress+0xa8>
					RESET_FLAG(AREA2_PRESS|AREA3_PRESS, globalFlag);
 8003acc:	4b6c      	ldr	r3, [pc, #432]	; (8003c80 <checkButtonPress+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ad4:	4a6a      	ldr	r2, [pc, #424]	; (8003c80 <checkButtonPress+0x240>)
 8003ad6:	6013      	str	r3, [r2, #0]
					SET_FLAG(AREA1_PRESS, globalFlag);
 8003ad8:	4b69      	ldr	r3, [pc, #420]	; (8003c80 <checkButtonPress+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f043 0308 	orr.w	r3, r3, #8
 8003ae0:	4a67      	ldr	r2, [pc, #412]	; (8003c80 <checkButtonPress+0x240>)
 8003ae2:	6013      	str	r3, [r2, #0]
					checkstrokeArea();                                                           // нарисуем какая область нажата
 8003ae4:	f7ff fbe0 	bl	80032a8 <checkstrokeArea>
				}

				if (checkAreaTouch(x, y, 15, 78, 235, 35)) {
 8003ae8:	4b64      	ldr	r3, [pc, #400]	; (8003c7c <checkButtonPress+0x23c>)
 8003aea:	8818      	ldrh	r0, [r3, #0]
 8003aec:	4b62      	ldr	r3, [pc, #392]	; (8003c78 <checkButtonPress+0x238>)
 8003aee:	8819      	ldrh	r1, [r3, #0]
 8003af0:	2323      	movs	r3, #35	; 0x23
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	23eb      	movs	r3, #235	; 0xeb
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	234e      	movs	r3, #78	; 0x4e
 8003afa:	220f      	movs	r2, #15
 8003afc:	f7ff fba8 	bl	8003250 <checkAreaTouch>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00d      	beq.n	8003b22 <checkButtonPress+0xe2>
					RESET_FLAG(AREA1_PRESS|AREA3_PRESS, globalFlag);
 8003b06:	4b5e      	ldr	r3, [pc, #376]	; (8003c80 <checkButtonPress+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003b0e:	4a5c      	ldr	r2, [pc, #368]	; (8003c80 <checkButtonPress+0x240>)
 8003b10:	6013      	str	r3, [r2, #0]
					SET_FLAG(AREA2_PRESS, globalFlag);
 8003b12:	4b5b      	ldr	r3, [pc, #364]	; (8003c80 <checkButtonPress+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f043 0310 	orr.w	r3, r3, #16
 8003b1a:	4a59      	ldr	r2, [pc, #356]	; (8003c80 <checkButtonPress+0x240>)
 8003b1c:	6013      	str	r3, [r2, #0]
					checkstrokeArea();
 8003b1e:	f7ff fbc3 	bl	80032a8 <checkstrokeArea>
				}

				if (checkAreaTouch(x, y, 15, 126, 235, 35)) {
 8003b22:	4b56      	ldr	r3, [pc, #344]	; (8003c7c <checkButtonPress+0x23c>)
 8003b24:	8818      	ldrh	r0, [r3, #0]
 8003b26:	4b54      	ldr	r3, [pc, #336]	; (8003c78 <checkButtonPress+0x238>)
 8003b28:	8819      	ldrh	r1, [r3, #0]
 8003b2a:	2323      	movs	r3, #35	; 0x23
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	23eb      	movs	r3, #235	; 0xeb
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	237e      	movs	r3, #126	; 0x7e
 8003b34:	220f      	movs	r2, #15
 8003b36:	f7ff fb8b 	bl	8003250 <checkAreaTouch>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <checkButtonPress+0x11c>
					RESET_FLAG(AREA1_PRESS|AREA2_PRESS, globalFlag);
 8003b40:	4b4f      	ldr	r3, [pc, #316]	; (8003c80 <checkButtonPress+0x240>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 0318 	bic.w	r3, r3, #24
 8003b48:	4a4d      	ldr	r2, [pc, #308]	; (8003c80 <checkButtonPress+0x240>)
 8003b4a:	6013      	str	r3, [r2, #0]
					SET_FLAG(AREA3_PRESS, globalFlag);
 8003b4c:	4b4c      	ldr	r3, [pc, #304]	; (8003c80 <checkButtonPress+0x240>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f043 0320 	orr.w	r3, r3, #32
 8003b54:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <checkButtonPress+0x240>)
 8003b56:	6013      	str	r3, [r2, #0]
					checkstrokeArea();
 8003b58:	f7ff fba6 	bl	80032a8 <checkstrokeArea>
				}

				if (checkAreaTouch(x, y, 24, 182, 50, 50)) {
 8003b5c:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <checkButtonPress+0x23c>)
 8003b5e:	8818      	ldrh	r0, [r3, #0]
 8003b60:	4b45      	ldr	r3, [pc, #276]	; (8003c78 <checkButtonPress+0x238>)
 8003b62:	8819      	ldrh	r1, [r3, #0]
 8003b64:	2332      	movs	r3, #50	; 0x32
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	2332      	movs	r3, #50	; 0x32
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	23b6      	movs	r3, #182	; 0xb6
 8003b6e:	2218      	movs	r2, #24
 8003b70:	f7ff fb6e 	bl	8003250 <checkAreaTouch>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00c      	beq.n	8003b94 <checkButtonPress+0x154>
					printColorImage(24, 182, 50, 50, PRESSED, image_Plus);
 8003b7a:	4b43      	ldr	r3, [pc, #268]	; (8003c88 <checkButtonPress+0x248>)
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	2301      	movs	r3, #1
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2332      	movs	r3, #50	; 0x32
 8003b84:	2232      	movs	r2, #50	; 0x32
 8003b86:	21b6      	movs	r1, #182	; 0xb6
 8003b88:	2018      	movs	r0, #24
 8003b8a:	f7ff faab 	bl	80030e4 <printColorImage>
					changeParamPlusMinus(PLUS);
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f7ff fdce 	bl	8003730 <changeParamPlusMinus>
				}

				if (checkAreaTouch(x, y, 172, 182, 50, 50)) {
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <checkButtonPress+0x23c>)
 8003b96:	8818      	ldrh	r0, [r3, #0]
 8003b98:	4b37      	ldr	r3, [pc, #220]	; (8003c78 <checkButtonPress+0x238>)
 8003b9a:	8819      	ldrh	r1, [r3, #0]
 8003b9c:	2332      	movs	r3, #50	; 0x32
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	2332      	movs	r3, #50	; 0x32
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	23b6      	movs	r3, #182	; 0xb6
 8003ba6:	22ac      	movs	r2, #172	; 0xac
 8003ba8:	f7ff fb52 	bl	8003250 <checkAreaTouch>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00c      	beq.n	8003bcc <checkButtonPress+0x18c>
					printColorImage(172, 182, 50, 50, PRESSED, image_Minus);
 8003bb2:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <checkButtonPress+0x24c>)
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2332      	movs	r3, #50	; 0x32
 8003bbc:	2232      	movs	r2, #50	; 0x32
 8003bbe:	21b6      	movs	r1, #182	; 0xb6
 8003bc0:	20ac      	movs	r0, #172	; 0xac
 8003bc2:	f7ff fa8f 	bl	80030e4 <printColorImage>
					changeParamPlusMinus(MINUS);
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f7ff fdb2 	bl	8003730 <changeParamPlusMinus>
				}

				if (checkAreaTouch(x, y, 98, 182, 50, 50)) {
 8003bcc:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <checkButtonPress+0x23c>)
 8003bce:	8818      	ldrh	r0, [r3, #0]
 8003bd0:	4b29      	ldr	r3, [pc, #164]	; (8003c78 <checkButtonPress+0x238>)
 8003bd2:	8819      	ldrh	r1, [r3, #0]
 8003bd4:	2332      	movs	r3, #50	; 0x32
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	2332      	movs	r3, #50	; 0x32
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	23b6      	movs	r3, #182	; 0xb6
 8003bde:	2262      	movs	r2, #98	; 0x62
 8003be0:	f7ff fb36 	bl	8003250 <checkAreaTouch>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <checkButtonPress+0x1c2>
					printColorImage(98, 182, 50, 50, PRESSED, image_Arrow);
 8003bea:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <checkButtonPress+0x250>)
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	2301      	movs	r3, #1
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	2332      	movs	r3, #50	; 0x32
 8003bf4:	2232      	movs	r2, #50	; 0x32
 8003bf6:	21b6      	movs	r1, #182	; 0xb6
 8003bf8:	2062      	movs	r0, #98	; 0x62
 8003bfa:	f7ff fa73 	bl	80030e4 <printColorImage>
					togleUnits();
 8003bfe:	f7ff fde5 	bl	80037cc <togleUnits>
				}

				if (checkAreaTouch(x, y, 260, 102, 50, 26)) {
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <checkButtonPress+0x23c>)
 8003c04:	8818      	ldrh	r0, [r3, #0]
 8003c06:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <checkButtonPress+0x238>)
 8003c08:	8819      	ldrh	r1, [r3, #0]
 8003c0a:	231a      	movs	r3, #26
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	2332      	movs	r3, #50	; 0x32
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	2366      	movs	r3, #102	; 0x66
 8003c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c18:	f7ff fb1a 	bl	8003250 <checkAreaTouch>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <checkButtonPress+0x1e8>
					setParamNPN_PNP(NPN);
 8003c22:	2001      	movs	r0, #1
 8003c24:	f7ff fed2 	bl	80039cc <setParamNPN_PNP>
				}

				if (checkAreaTouch(x, y, 260, 140, 50, 26)) {
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <checkButtonPress+0x23c>)
 8003c2a:	8818      	ldrh	r0, [r3, #0]
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <checkButtonPress+0x238>)
 8003c2e:	8819      	ldrh	r1, [r3, #0]
 8003c30:	231a      	movs	r3, #26
 8003c32:	9301      	str	r3, [sp, #4]
 8003c34:	2332      	movs	r3, #50	; 0x32
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	238c      	movs	r3, #140	; 0x8c
 8003c3a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c3e:	f7ff fb07 	bl	8003250 <checkAreaTouch>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <checkButtonPress+0x20e>
					setParamNPN_PNP(PNP);
 8003c48:	2000      	movs	r0, #0
 8003c4a:	f7ff febf 	bl	80039cc <setParamNPN_PNP>
				}
			}
		}
		timBigArea = 5000;                                                  // задержка на обводку области квадратом
 8003c4e:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <checkButtonPress+0x254>)
 8003c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c54:	601a      	str	r2, [r3, #0]
		timButtonPress = 50;                                                // задержка для защиты от дребезга
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <checkButtonPress+0x258>)
 8003c58:	2232      	movs	r2, #50	; 0x32
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e005      	b.n	8003c6a <checkButtonPress+0x22a>
	} else {
		RESET_FLAG(ONE_BUZZER, globalFlag);                                 // сбросим пищалку
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <checkButtonPress+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 0304 	bic.w	r3, r3, #4
 8003c66:	4a06      	ldr	r2, [pc, #24]	; (8003c80 <checkButtonPress+0x240>)
 8003c68:	6013      	str	r3, [r2, #0]
	}
	GUIPostHandler();                                                       // обработаем сбросы
 8003c6a:	f000 f817 	bl	8003c9c <GUIPostHandler>
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40020000 	.word	0x40020000
 8003c78:	20000292 	.word	0x20000292
 8003c7c:	20000290 	.word	0x20000290
 8003c80:	200004c0 	.word	0x200004c0
 8003c84:	20000040 	.word	0x20000040
 8003c88:	0800d66c 	.word	0x0800d66c
 8003c8c:	0800e9f4 	.word	0x0800e9f4
 8003c90:	0800fea8 	.word	0x0800fea8
 8003c94:	20000294 	.word	0x20000294
 8003c98:	20000298 	.word	0x20000298

08003c9c <GUIPostHandler>:

void GUIPostHandler(void) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af02      	add	r7, sp, #8
	if (timBigArea == 0 && (globalFlag & 0x38)) {
 8003ca2:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <GUIPostHandler+0xa0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <GUIPostHandler+0x2a>
 8003caa:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <GUIPostHandler+0xa4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <GUIPostHandler+0x2a>
		RESET_FLAG(AREA1_PRESS|AREA2_PRESS|AREA3_PRESS, globalFlag);
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <GUIPostHandler+0xa4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003cbe:	4a20      	ldr	r2, [pc, #128]	; (8003d40 <GUIPostHandler+0xa4>)
 8003cc0:	6013      	str	r3, [r2, #0]
		checkstrokeArea();
 8003cc2:	f7ff faf1 	bl	80032a8 <checkstrokeArea>
	}
	if (timButtonPress == 0 && READ_FLAG(ONE_TOUCH, globalFlag)) {          // сбросим нажатия на кнопки и защиту от множества нажатий и скорость
 8003cc6:	4b1f      	ldr	r3, [pc, #124]	; (8003d44 <GUIPostHandler+0xa8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d132      	bne.n	8003d34 <GUIPostHandler+0x98>
 8003cce:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <GUIPostHandler+0xa4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d02c      	beq.n	8003d34 <GUIPostHandler+0x98>
		printColorImage(24, 182, 50, 50, NO_PRESSED, image_Plus);
 8003cda:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <GUIPostHandler+0xac>)
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2332      	movs	r3, #50	; 0x32
 8003ce4:	2232      	movs	r2, #50	; 0x32
 8003ce6:	21b6      	movs	r1, #182	; 0xb6
 8003ce8:	2018      	movs	r0, #24
 8003cea:	f7ff f9fb 	bl	80030e4 <printColorImage>
		printColorImage(172, 182, 50, 50, NO_PRESSED, image_Minus);
 8003cee:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <GUIPostHandler+0xb0>)
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2332      	movs	r3, #50	; 0x32
 8003cf8:	2232      	movs	r2, #50	; 0x32
 8003cfa:	21b6      	movs	r1, #182	; 0xb6
 8003cfc:	20ac      	movs	r0, #172	; 0xac
 8003cfe:	f7ff f9f1 	bl	80030e4 <printColorImage>
		printColorImage(98, 182, 50, 50, NO_PRESSED, image_Arrow);
 8003d02:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <GUIPostHandler+0xb4>)
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	2300      	movs	r3, #0
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	2332      	movs	r3, #50	; 0x32
 8003d0c:	2232      	movs	r2, #50	; 0x32
 8003d0e:	21b6      	movs	r1, #182	; 0xb6
 8003d10:	2062      	movs	r0, #98	; 0x62
 8003d12:	f7ff f9e7 	bl	80030e4 <printColorImage>
		RESET_FLAG(TOUCH_DISPLAY, globalFlag);
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <GUIPostHandler+0xa4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <GUIPostHandler+0xa4>)
 8003d20:	6013      	str	r3, [r2, #0]
		RESET_FLAG(ONE_TOUCH, globalFlag);
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <GUIPostHandler+0xa4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 0302 	bic.w	r3, r3, #2
 8003d2a:	4a05      	ldr	r2, [pc, #20]	; (8003d40 <GUIPostHandler+0xa4>)
 8003d2c:	6013      	str	r3, [r2, #0]
		countSpeed = 1;
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <GUIPostHandler+0xb8>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	801a      	strh	r2, [r3, #0]
	}
}
 8003d34:	bf00      	nop
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000294 	.word	0x20000294
 8003d40:	200004c0 	.word	0x200004c0
 8003d44:	20000298 	.word	0x20000298
 8003d48:	0800d66c 	.word	0x0800d66c
 8003d4c:	0800e9f4 	.word	0x0800e9f4
 8003d50:	0800fea8 	.word	0x0800fea8
 8003d54:	2000002c 	.word	0x2000002c

08003d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d5c:	f001 f8ae 	bl	8004ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d60:	f000 f840 	bl	8003de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d64:	f000 f9e8 	bl	8004138 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d68:	f000 f9cc 	bl	8004104 <MX_DMA_Init>
  MX_SPI1_Init();
 8003d6c:	f000 f8f4 	bl	8003f58 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003d70:	f000 f928 	bl	8003fc4 <MX_SPI2_Init>
  MX_TIM5_Init();
 8003d74:	f000 f95c 	bl	8004030 <MX_TIM5_Init>
  MX_ADC1_Init();
 8003d78:	f000 f89c 	bl	8003eb4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SET_BIT(TIM5->CCER, TIM_CCER_CC2E);                     // включим выходы таймера на ноги МК
 8003d7c:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <main+0x80>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <main+0x80>)
 8003d82:	f043 0310 	orr.w	r3, r3, #16
 8003d86:	6213      	str	r3, [r2, #32]
  SET_BIT(TIM5->CCER, TIM_CCER_CC3E);                     // включим выходы таймера на ноги МК
 8003d88:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <main+0x80>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4a12      	ldr	r2, [pc, #72]	; (8003dd8 <main+0x80>)
 8003d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d92:	6213      	str	r3, [r2, #32]
  CLEAR_BIT(TIM5->CCMR1, TIM_CCMR1_OC2M);                 // очистим регистр
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <main+0x80>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4a0f      	ldr	r2, [pc, #60]	; (8003dd8 <main+0x80>)
 8003d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9e:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(TIM5->CCMR2, TIM_CCMR2_OC3M);                 // очистим регистр
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <main+0x80>)
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	4a0c      	ldr	r2, [pc, #48]	; (8003dd8 <main+0x80>)
 8003da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003daa:	61d3      	str	r3, [r2, #28]
  SET_BIT(TIM5->CCMR1, 0b100 << TIM_CCMR1_OC2M_Pos);      // ноль на выходе Force inactive level
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <main+0x80>)
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <main+0x80>)
 8003db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db6:	6193      	str	r3, [r2, #24]
  SET_BIT(TIM5->CCMR2, 0b100 << TIM_CCMR2_OC3M_Pos);      // ноль на выходе Force inactive level
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <main+0x80>)
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	4a06      	ldr	r2, [pc, #24]	; (8003dd8 <main+0x80>)
 8003dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc2:	61d3      	str	r3, [r2, #28]
  HAL_ADC_Start_DMA (&hadc1, (uint32_t *)adcBuf, FILTRADC);      // запустим АЦП
 8003dc4:	2240      	movs	r2, #64	; 0x40
 8003dc6:	4905      	ldr	r1, [pc, #20]	; (8003ddc <main+0x84>)
 8003dc8:	4805      	ldr	r0, [pc, #20]	; (8003de0 <main+0x88>)
 8003dca:	f001 f951 	bl	8005070 <HAL_ADC_Start_DMA>
  doWork ();
 8003dce:	f000 febb 	bl	8004b48 <doWork>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Work ();
 8003dd2:	f000 fecf 	bl	8004b74 <Work>
 8003dd6:	e7fc      	b.n	8003dd2 <main+0x7a>
 8003dd8:	40000c00 	.word	0x40000c00
 8003ddc:	20000440 	.word	0x20000440
 8003de0:	200002a0 	.word	0x200002a0

08003de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b094      	sub	sp, #80	; 0x50
 8003de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dea:	f107 0320 	add.w	r3, r7, #32
 8003dee:	2230      	movs	r2, #48	; 0x30
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f004 f908 	bl	8008008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003df8:	f107 030c 	add.w	r3, r7, #12
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	4b27      	ldr	r3, [pc, #156]	; (8003eac <SystemClock_Config+0xc8>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	4a26      	ldr	r2, [pc, #152]	; (8003eac <SystemClock_Config+0xc8>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e16:	6413      	str	r3, [r2, #64]	; 0x40
 8003e18:	4b24      	ldr	r3, [pc, #144]	; (8003eac <SystemClock_Config+0xc8>)
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e24:	2300      	movs	r3, #0
 8003e26:	607b      	str	r3, [r7, #4]
 8003e28:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <SystemClock_Config+0xcc>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <SystemClock_Config+0xcc>)
 8003e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <SystemClock_Config+0xcc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e40:	2301      	movs	r3, #1
 8003e42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003e54:	2304      	movs	r3, #4
 8003e56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003e58:	2364      	movs	r3, #100	; 0x64
 8003e5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e60:	2304      	movs	r3, #4
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e64:	f107 0320 	add.w	r3, r7, #32
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f002 fb33 	bl	80064d4 <HAL_RCC_OscConfig>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003e74:	f000 f9d6 	bl	8004224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e78:	230f      	movs	r3, #15
 8003e7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003e8e:	f107 030c 	add.w	r3, r7, #12
 8003e92:	2103      	movs	r1, #3
 8003e94:	4618      	mov	r0, r3
 8003e96:	f002 fd95 	bl	80069c4 <HAL_RCC_ClockConfig>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003ea0:	f000 f9c0 	bl	8004224 <Error_Handler>
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	3750      	adds	r7, #80	; 0x50
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40007000 	.word	0x40007000

08003eb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003eba:	463b      	mov	r3, r7
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003ec6:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003ec8:	4a21      	ldr	r2, [pc, #132]	; (8003f50 <MX_ADC1_Init+0x9c>)
 8003eca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8003ecc:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003ece:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ed2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003eda:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ee6:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ef4:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <MX_ADC1_Init+0xa0>)
 8003ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003f00:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003f06:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003f14:	480d      	ldr	r0, [pc, #52]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003f16:	f001 f867 	bl	8004fe8 <HAL_ADC_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003f20:	f000 f980 	bl	8004224 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003f24:	2303      	movs	r3, #3
 8003f26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003f2c:	2307      	movs	r3, #7
 8003f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f30:	463b      	mov	r3, r7
 8003f32:	4619      	mov	r1, r3
 8003f34:	4805      	ldr	r0, [pc, #20]	; (8003f4c <MX_ADC1_Init+0x98>)
 8003f36:	f001 f9a9 	bl	800528c <HAL_ADC_ConfigChannel>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003f40:	f000 f970 	bl	8004224 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	200002a0 	.word	0x200002a0
 8003f50:	40012000 	.word	0x40012000
 8003f54:	0f000001 	.word	0x0f000001

08003f58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <MX_SPI1_Init+0x68>)
 8003f60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f62:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003f64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f6a:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003fa4:	220a      	movs	r2, #10
 8003fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003fa8:	4804      	ldr	r0, [pc, #16]	; (8003fbc <MX_SPI1_Init+0x64>)
 8003faa:	f002 fef7 	bl	8006d9c <HAL_SPI_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003fb4:	f000 f936 	bl	8004224 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000348 	.word	0x20000348
 8003fc0:	40013000 	.word	0x40013000

08003fc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003fc8:	4b17      	ldr	r3, [pc, #92]	; (8004028 <MX_SPI2_Init+0x64>)
 8003fca:	4a18      	ldr	r2, [pc, #96]	; (800402c <MX_SPI2_Init+0x68>)
 8003fcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003fce:	4b16      	ldr	r3, [pc, #88]	; (8004028 <MX_SPI2_Init+0x64>)
 8003fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <MX_SPI2_Init+0x64>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fdc:	4b12      	ldr	r3, [pc, #72]	; (8004028 <MX_SPI2_Init+0x64>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <MX_SPI2_Init+0x64>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fe8:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <MX_SPI2_Init+0x64>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <MX_SPI2_Init+0x64>)
 8003ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <MX_SPI2_Init+0x64>)
 8003ff8:	2238      	movs	r2, #56	; 0x38
 8003ffa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <MX_SPI2_Init+0x64>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <MX_SPI2_Init+0x64>)
 8004004:	2200      	movs	r2, #0
 8004006:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004008:	4b07      	ldr	r3, [pc, #28]	; (8004028 <MX_SPI2_Init+0x64>)
 800400a:	2200      	movs	r2, #0
 800400c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <MX_SPI2_Init+0x64>)
 8004010:	220a      	movs	r2, #10
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004014:	4804      	ldr	r0, [pc, #16]	; (8004028 <MX_SPI2_Init+0x64>)
 8004016:	f002 fec1 	bl	8006d9c <HAL_SPI_Init>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004020:	f000 f900 	bl	8004224 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004024:	bf00      	nop
 8004026:	bd80      	pop	{r7, pc}
 8004028:	200003a0 	.word	0x200003a0
 800402c:	40003800 	.word	0x40003800

08004030 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004036:	f107 0320 	add.w	r3, r7, #32
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	609a      	str	r2, [r3, #8]
 800404a:	60da      	str	r2, [r3, #12]
 800404c:	611a      	str	r2, [r3, #16]
 800404e:	615a      	str	r2, [r3, #20]
 8004050:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004052:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <MX_TIM5_Init+0xc8>)
 8004054:	4a29      	ldr	r2, [pc, #164]	; (80040fc <MX_TIM5_Init+0xcc>)
 8004056:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <MX_TIM5_Init+0xc8>)
 800405a:	2200      	movs	r2, #0
 800405c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800405e:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <MX_TIM5_Init+0xc8>)
 8004060:	2200      	movs	r2, #0
 8004062:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000;
 8004064:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <MX_TIM5_Init+0xc8>)
 8004066:	4a26      	ldr	r2, [pc, #152]	; (8004100 <MX_TIM5_Init+0xd0>)
 8004068:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <MX_TIM5_Init+0xc8>)
 800406c:	2200      	movs	r2, #0
 800406e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004070:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <MX_TIM5_Init+0xc8>)
 8004072:	2280      	movs	r2, #128	; 0x80
 8004074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004076:	4820      	ldr	r0, [pc, #128]	; (80040f8 <MX_TIM5_Init+0xc8>)
 8004078:	f003 fac2 	bl	8007600 <HAL_TIM_PWM_Init>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8004082:	f000 f8cf 	bl	8004224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004086:	2300      	movs	r3, #0
 8004088:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800408e:	f107 0320 	add.w	r3, r7, #32
 8004092:	4619      	mov	r1, r3
 8004094:	4818      	ldr	r0, [pc, #96]	; (80040f8 <MX_TIM5_Init+0xc8>)
 8004096:	f003 ff0b 	bl	8007eb0 <HAL_TIMEx_MasterConfigSynchronization>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80040a0:	f000 f8c0 	bl	8004224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040a4:	2360      	movs	r3, #96	; 0x60
 80040a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000;
 80040a8:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80040ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	2204      	movs	r2, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	480e      	ldr	r0, [pc, #56]	; (80040f8 <MX_TIM5_Init+0xc8>)
 80040be:	f003 fbf7 	bl	80078b0 <HAL_TIM_PWM_ConfigChannel>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80040c8:	f000 f8ac 	bl	8004224 <Error_Handler>
  }
  sConfigOC.Pulse = 2100;
 80040cc:	f640 0334 	movw	r3, #2100	; 0x834
 80040d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040d2:	1d3b      	adds	r3, r7, #4
 80040d4:	2208      	movs	r2, #8
 80040d6:	4619      	mov	r1, r3
 80040d8:	4807      	ldr	r0, [pc, #28]	; (80040f8 <MX_TIM5_Init+0xc8>)
 80040da:	f003 fbe9 	bl	80078b0 <HAL_TIM_PWM_ConfigChannel>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 80040e4:	f000 f89e 	bl	8004224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80040e8:	4803      	ldr	r0, [pc, #12]	; (80040f8 <MX_TIM5_Init+0xc8>)
 80040ea:	f000 fa61 	bl	80045b0 <HAL_TIM_MspPostInit>

}
 80040ee:	bf00      	nop
 80040f0:	3728      	adds	r7, #40	; 0x28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	200003f8 	.word	0x200003f8
 80040fc:	40000c00 	.word	0x40000c00
 8004100:	000186a0 	.word	0x000186a0

08004104 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <MX_DMA_Init+0x30>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	4a08      	ldr	r2, [pc, #32]	; (8004134 <MX_DMA_Init+0x30>)
 8004114:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004118:	6313      	str	r3, [r2, #48]	; 0x30
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <MX_DMA_Init+0x30>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	687b      	ldr	r3, [r7, #4]

}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800

08004138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413e:	f107 030c 	add.w	r3, r7, #12
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	60da      	str	r2, [r3, #12]
 800414c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <MX_GPIO_Init+0xe0>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	4a30      	ldr	r2, [pc, #192]	; (8004218 <MX_GPIO_Init+0xe0>)
 8004158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800415c:	6313      	str	r3, [r2, #48]	; 0x30
 800415e:	4b2e      	ldr	r3, [pc, #184]	; (8004218 <MX_GPIO_Init+0xe0>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	607b      	str	r3, [r7, #4]
 800416e:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <MX_GPIO_Init+0xe0>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	4a29      	ldr	r2, [pc, #164]	; (8004218 <MX_GPIO_Init+0xe0>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6313      	str	r3, [r2, #48]	; 0x30
 800417a:	4b27      	ldr	r3, [pc, #156]	; (8004218 <MX_GPIO_Init+0xe0>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	607b      	str	r3, [r7, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	4b23      	ldr	r3, [pc, #140]	; (8004218 <MX_GPIO_Init+0xe0>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	4a22      	ldr	r2, [pc, #136]	; (8004218 <MX_GPIO_Init+0xe0>)
 8004190:	f043 0302 	orr.w	r3, r3, #2
 8004194:	6313      	str	r3, [r2, #48]	; 0x30
 8004196:	4b20      	ldr	r3, [pc, #128]	; (8004218 <MX_GPIO_Init+0xe0>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Data_Comand_Pin|Reset_Display_Pin|CS_Display_Pin|Led_Display_Pin
 80041a2:	2200      	movs	r2, #0
 80041a4:	f241 2107 	movw	r1, #4615	; 0x1207
 80041a8:	481c      	ldr	r0, [pc, #112]	; (800421c <MX_GPIO_Init+0xe4>)
 80041aa:	f002 f979 	bl	80064a0 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Touch_Pin|LEDS_Pin, GPIO_PIN_RESET);
 80041ae:	2200      	movs	r2, #0
 80041b0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80041b4:	481a      	ldr	r0, [pc, #104]	; (8004220 <MX_GPIO_Init+0xe8>)
 80041b6:	f002 f973 	bl	80064a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Data_Comand_Pin Reset_Display_Pin CS_Display_Pin Led_Display_Pin
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = Data_Comand_Pin|Reset_Display_Pin|CS_Display_Pin|Led_Display_Pin
 80041ba:	f241 2307 	movw	r3, #4615	; 0x1207
 80041be:	60fb      	str	r3, [r7, #12]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c0:	2301      	movs	r3, #1
 80041c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041cc:	f107 030c 	add.w	r3, r7, #12
 80041d0:	4619      	mov	r1, r3
 80041d2:	4812      	ldr	r0, [pc, #72]	; (800421c <MX_GPIO_Init+0xe4>)
 80041d4:	f001 ffc8 	bl	8006168 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Touch_Pin LEDS_Pin */
  GPIO_InitStruct.Pin = CS_Touch_Pin|LEDS_Pin;
 80041d8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80041dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041de:	2301      	movs	r3, #1
 80041e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	4619      	mov	r1, r3
 80041f0:	480b      	ldr	r0, [pc, #44]	; (8004220 <MX_GPIO_Init+0xe8>)
 80041f2:	f001 ffb9 	bl	8006168 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Touch_Pin */
  GPIO_InitStruct.Pin = IRQ_Touch_Pin;
 80041f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_Touch_GPIO_Port, &GPIO_InitStruct);
 8004204:	f107 030c 	add.w	r3, r7, #12
 8004208:	4619      	mov	r1, r3
 800420a:	4805      	ldr	r0, [pc, #20]	; (8004220 <MX_GPIO_Init+0xe8>)
 800420c:	f001 ffac 	bl	8006168 <HAL_GPIO_Init>

}
 8004210:	bf00      	nop
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40023800 	.word	0x40023800
 800421c:	40020400 	.word	0x40020400
 8004220:	40020000 	.word	0x40020000

08004224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004228:	b672      	cpsid	i
}
 800422a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800422c:	e7fe      	b.n	800422c <Error_Handler+0x8>

0800422e <wholeDevider>:
/**************************************************************************
   @brief     swaps values in variables
    @param    a  num first
    @param    a  num two
**************************************************************************/
int16_t wholeDevider (int16_t data, int16_t devider) {
 800422e:	b480      	push	{r7}
 8004230:	b087      	sub	sp, #28
 8004232:	af00      	add	r7, sp, #0
 8004234:	4603      	mov	r3, r0
 8004236:	460a      	mov	r2, r1
 8004238:	80fb      	strh	r3, [r7, #6]
 800423a:	4613      	mov	r3, r2
 800423c:	80bb      	strh	r3, [r7, #4]
	int16_t result = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	82fb      	strh	r3, [r7, #22]
	int16_t max = (data / devider) + 1;
 8004242:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004246:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800424a:	fb92 f3f3 	sdiv	r3, r2, r3
 800424e:	b29b      	uxth	r3, r3
 8004250:	3301      	adds	r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < max; i ++) {
 8004256:	2300      	movs	r3, #0
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	e013      	b.n	8004284 <wholeDevider+0x56>
		if (data <= devider) break;
 800425c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004260:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	dd13      	ble.n	8004290 <wholeDevider+0x62>
		data -= devider;
 8004268:	88fa      	ldrh	r2, [r7, #6]
 800426a:	88bb      	ldrh	r3, [r7, #4]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	b29b      	uxth	r3, r3
 8004270:	80fb      	strh	r3, [r7, #6]
		result ++;
 8004272:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004276:	b29b      	uxth	r3, r3
 8004278:	3301      	adds	r3, #1
 800427a:	b29b      	uxth	r3, r3
 800427c:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < max; i ++) {
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	3301      	adds	r3, #1
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	429a      	cmp	r2, r3
 800428c:	dbe6      	blt.n	800425c <wholeDevider+0x2e>
 800428e:	e000      	b.n	8004292 <wholeDevider+0x64>
		if (data <= devider) break;
 8004290:	bf00      	nop
	}
	result ++;
 8004292:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004296:	b29b      	uxth	r3, r3
 8004298:	3301      	adds	r3, #1
 800429a:	b29b      	uxth	r3, r3
 800429c:	82fb      	strh	r3, [r7, #22]
	return result;
 800429e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <buzzerSet>:

void buzzerSet (int16_t time) {
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	80fb      	strh	r3, [r7, #6]
	if (!timBuzzer){
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <buzzerSet+0x34>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <buzzerSet+0x26>
		timBuzzer = time;
 80042c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042c6:	4a07      	ldr	r2, [pc, #28]	; (80042e4 <buzzerSet+0x34>)
 80042c8:	6013      	str	r3, [r2, #0]
		BUZER_SET;
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <buzzerSet+0x38>)
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	4a06      	ldr	r2, [pc, #24]	; (80042e8 <buzzerSet+0x38>)
 80042d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042d4:	6193      	str	r3, [r2, #24]
	}
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	200004c4 	.word	0x200004c4
 80042e8:	40020400 	.word	0x40020400

080042ec <writeDataToMemory>:

void writeDataToMemory(uint32_t address, uint32_t data) {
 80042ec:	b5b0      	push	{r4, r5, r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80042f6:	f001 fdc5 	bl	8005e84 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <writeDataToMemory+0x34>)
 80042fc:	22f3      	movs	r2, #243	; 0xf3
 80042fe:	60da      	str	r2, [r3, #12]
	  //FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	461c      	mov	r4, r3
 8004306:	4615      	mov	r5, r2
 8004308:	4622      	mov	r2, r4
 800430a:	462b      	mov	r3, r5
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	2002      	movs	r0, #2
 8004310:	f001 fd64 	bl	8005ddc <HAL_FLASH_Program>
	  HAL_FLASH_Lock();
 8004314:	f001 fdd8 	bl	8005ec8 <HAL_FLASH_Lock>
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bdb0      	pop	{r4, r5, r7, pc}
 8004320:	40023c00 	.word	0x40023c00

08004324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_MspInit+0x4c>)
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <HAL_MspInit+0x4c>)
 8004334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004338:	6453      	str	r3, [r2, #68]	; 0x44
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <HAL_MspInit+0x4c>)
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_MspInit+0x4c>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <HAL_MspInit+0x4c>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	6413      	str	r3, [r2, #64]	; 0x40
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_MspInit+0x4c>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800

08004374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	; 0x28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	60da      	str	r2, [r3, #12]
 800438a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2f      	ldr	r2, [pc, #188]	; (8004450 <HAL_ADC_MspInit+0xdc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d157      	bne.n	8004446 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	4b2e      	ldr	r3, [pc, #184]	; (8004454 <HAL_ADC_MspInit+0xe0>)
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	4a2d      	ldr	r2, [pc, #180]	; (8004454 <HAL_ADC_MspInit+0xe0>)
 80043a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a4:	6453      	str	r3, [r2, #68]	; 0x44
 80043a6:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <HAL_ADC_MspInit+0xe0>)
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	4b27      	ldr	r3, [pc, #156]	; (8004454 <HAL_ADC_MspInit+0xe0>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	4a26      	ldr	r2, [pc, #152]	; (8004454 <HAL_ADC_MspInit+0xe0>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	6313      	str	r3, [r2, #48]	; 0x30
 80043c2:	4b24      	ldr	r3, [pc, #144]	; (8004454 <HAL_ADC_MspInit+0xe0>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043ce:	2308      	movs	r3, #8
 80043d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043d2:	2303      	movs	r3, #3
 80043d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043da:	f107 0314 	add.w	r3, r7, #20
 80043de:	4619      	mov	r1, r3
 80043e0:	481d      	ldr	r0, [pc, #116]	; (8004458 <HAL_ADC_MspInit+0xe4>)
 80043e2:	f001 fec1 	bl	8006168 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_ADC_MspInit+0xe8>)
 80043e8:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <HAL_ADC_MspInit+0xec>)
 80043ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <HAL_ADC_MspInit+0xe8>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043f2:	4b1a      	ldr	r3, [pc, #104]	; (800445c <HAL_ADC_MspInit+0xe8>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80043f8:	4b18      	ldr	r3, [pc, #96]	; (800445c <HAL_ADC_MspInit+0xe8>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <HAL_ADC_MspInit+0xe8>)
 8004400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004404:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <HAL_ADC_MspInit+0xe8>)
 8004408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800440c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800440e:	4b13      	ldr	r3, [pc, #76]	; (800445c <HAL_ADC_MspInit+0xe8>)
 8004410:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004414:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <HAL_ADC_MspInit+0xe8>)
 8004418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800441c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800441e:	4b0f      	ldr	r3, [pc, #60]	; (800445c <HAL_ADC_MspInit+0xe8>)
 8004420:	2200      	movs	r2, #0
 8004422:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004424:	4b0d      	ldr	r3, [pc, #52]	; (800445c <HAL_ADC_MspInit+0xe8>)
 8004426:	2200      	movs	r2, #0
 8004428:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800442a:	480c      	ldr	r0, [pc, #48]	; (800445c <HAL_ADC_MspInit+0xe8>)
 800442c:	f001 faf0 	bl	8005a10 <HAL_DMA_Init>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004436:	f7ff fef5 	bl	8004224 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a07      	ldr	r2, [pc, #28]	; (800445c <HAL_ADC_MspInit+0xe8>)
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
 8004440:	4a06      	ldr	r2, [pc, #24]	; (800445c <HAL_ADC_MspInit+0xe8>)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004446:	bf00      	nop
 8004448:	3728      	adds	r7, #40	; 0x28
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40012000 	.word	0x40012000
 8004454:	40023800 	.word	0x40023800
 8004458:	40020000 	.word	0x40020000
 800445c:	200002e8 	.word	0x200002e8
 8004460:	40026410 	.word	0x40026410

08004464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446c:	f107 031c 	add.w	r3, r7, #28
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	60da      	str	r2, [r3, #12]
 800447a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a32      	ldr	r2, [pc, #200]	; (800454c <HAL_SPI_MspInit+0xe8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d12c      	bne.n	80044e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	4b31      	ldr	r3, [pc, #196]	; (8004550 <HAL_SPI_MspInit+0xec>)
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	4a30      	ldr	r2, [pc, #192]	; (8004550 <HAL_SPI_MspInit+0xec>)
 8004490:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004494:	6453      	str	r3, [r2, #68]	; 0x44
 8004496:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_SPI_MspInit+0xec>)
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <HAL_SPI_MspInit+0xec>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	4a29      	ldr	r2, [pc, #164]	; (8004550 <HAL_SPI_MspInit+0xec>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	6313      	str	r3, [r2, #48]	; 0x30
 80044b2:	4b27      	ldr	r3, [pc, #156]	; (8004550 <HAL_SPI_MspInit+0xec>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80044be:	23e0      	movs	r3, #224	; 0xe0
 80044c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c2:	2302      	movs	r3, #2
 80044c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ca:	2303      	movs	r3, #3
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044ce:	2305      	movs	r3, #5
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d2:	f107 031c 	add.w	r3, r7, #28
 80044d6:	4619      	mov	r1, r3
 80044d8:	481e      	ldr	r0, [pc, #120]	; (8004554 <HAL_SPI_MspInit+0xf0>)
 80044da:	f001 fe45 	bl	8006168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80044de:	e031      	b.n	8004544 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1c      	ldr	r2, [pc, #112]	; (8004558 <HAL_SPI_MspInit+0xf4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d12c      	bne.n	8004544 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	4b18      	ldr	r3, [pc, #96]	; (8004550 <HAL_SPI_MspInit+0xec>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	4a17      	ldr	r2, [pc, #92]	; (8004550 <HAL_SPI_MspInit+0xec>)
 80044f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044f8:	6413      	str	r3, [r2, #64]	; 0x40
 80044fa:	4b15      	ldr	r3, [pc, #84]	; (8004550 <HAL_SPI_MspInit+0xec>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	4b11      	ldr	r3, [pc, #68]	; (8004550 <HAL_SPI_MspInit+0xec>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	4a10      	ldr	r2, [pc, #64]	; (8004550 <HAL_SPI_MspInit+0xec>)
 8004510:	f043 0302 	orr.w	r3, r3, #2
 8004514:	6313      	str	r3, [r2, #48]	; 0x30
 8004516:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <HAL_SPI_MspInit+0xec>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004522:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004528:	2302      	movs	r3, #2
 800452a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004530:	2303      	movs	r3, #3
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004534:	2305      	movs	r3, #5
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004538:	f107 031c 	add.w	r3, r7, #28
 800453c:	4619      	mov	r1, r3
 800453e:	4807      	ldr	r0, [pc, #28]	; (800455c <HAL_SPI_MspInit+0xf8>)
 8004540:	f001 fe12 	bl	8006168 <HAL_GPIO_Init>
}
 8004544:	bf00      	nop
 8004546:	3730      	adds	r7, #48	; 0x30
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40013000 	.word	0x40013000
 8004550:	40023800 	.word	0x40023800
 8004554:	40020000 	.word	0x40020000
 8004558:	40003800 	.word	0x40003800
 800455c:	40020400 	.word	0x40020400

08004560 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0e      	ldr	r2, [pc, #56]	; (80045a8 <HAL_TIM_PWM_MspInit+0x48>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d115      	bne.n	800459e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <HAL_TIM_PWM_MspInit+0x4c>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <HAL_TIM_PWM_MspInit+0x4c>)
 800457c:	f043 0308 	orr.w	r3, r3, #8
 8004580:	6413      	str	r3, [r2, #64]	; 0x40
 8004582:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <HAL_TIM_PWM_MspInit+0x4c>)
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800458e:	2200      	movs	r2, #0
 8004590:	2100      	movs	r1, #0
 8004592:	2032      	movs	r0, #50	; 0x32
 8004594:	f001 fa05 	bl	80059a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004598:	2032      	movs	r0, #50	; 0x32
 800459a:	f001 fa1e 	bl	80059da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40000c00 	.word	0x40000c00
 80045ac:	40023800 	.word	0x40023800

080045b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a12      	ldr	r2, [pc, #72]	; (8004618 <HAL_TIM_MspPostInit+0x68>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d11d      	bne.n	800460e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <HAL_TIM_MspPostInit+0x6c>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a10      	ldr	r2, [pc, #64]	; (800461c <HAL_TIM_MspPostInit+0x6c>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30
 80045e2:	4b0e      	ldr	r3, [pc, #56]	; (800461c <HAL_TIM_MspPostInit+0x6c>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80045ee:	2306      	movs	r3, #6
 80045f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f2:	2302      	movs	r3, #2
 80045f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80045fe:	2302      	movs	r3, #2
 8004600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004602:	f107 030c 	add.w	r3, r7, #12
 8004606:	4619      	mov	r1, r3
 8004608:	4805      	ldr	r0, [pc, #20]	; (8004620 <HAL_TIM_MspPostInit+0x70>)
 800460a:	f001 fdad 	bl	8006168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800460e:	bf00      	nop
 8004610:	3720      	adds	r7, #32
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40000c00 	.word	0x40000c00
 800461c:	40023800 	.word	0x40023800
 8004620:	40020000 	.word	0x40020000

08004624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004628:	e7fe      	b.n	8004628 <NMI_Handler+0x4>

0800462a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800462a:	b480      	push	{r7}
 800462c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800462e:	e7fe      	b.n	800462e <HardFault_Handler+0x4>

08004630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004634:	e7fe      	b.n	8004634 <MemManage_Handler+0x4>

08004636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004636:	b480      	push	{r7}
 8004638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800463a:	e7fe      	b.n	800463a <BusFault_Handler+0x4>

0800463c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004640:	e7fe      	b.n	8004640 <UsageFault_Handler+0x4>

08004642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004662:	bf00      	nop
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (timBigArea) timBigArea --;
 8004670:	4b26      	ldr	r3, [pc, #152]	; (800470c <SysTick_Handler+0xa0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d004      	beq.n	8004682 <SysTick_Handler+0x16>
 8004678:	4b24      	ldr	r3, [pc, #144]	; (800470c <SysTick_Handler+0xa0>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3b01      	subs	r3, #1
 800467e:	4a23      	ldr	r2, [pc, #140]	; (800470c <SysTick_Handler+0xa0>)
 8004680:	6013      	str	r3, [r2, #0]
	if (timButtonPress) timButtonPress --;
 8004682:	4b23      	ldr	r3, [pc, #140]	; (8004710 <SysTick_Handler+0xa4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <SysTick_Handler+0x28>
 800468a:	4b21      	ldr	r3, [pc, #132]	; (8004710 <SysTick_Handler+0xa4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3b01      	subs	r3, #1
 8004690:	4a1f      	ldr	r2, [pc, #124]	; (8004710 <SysTick_Handler+0xa4>)
 8004692:	6013      	str	r3, [r2, #0]
	if (timHoldButtonPress) timHoldButtonPress --;
 8004694:	4b1f      	ldr	r3, [pc, #124]	; (8004714 <SysTick_Handler+0xa8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <SysTick_Handler+0x3a>
 800469c:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <SysTick_Handler+0xa8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <SysTick_Handler+0xa8>)
 80046a4:	6013      	str	r3, [r2, #0]
	if (timToOvercurrent > 1) timToOvercurrent --;
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <SysTick_Handler+0xac>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d904      	bls.n	80046b8 <SysTick_Handler+0x4c>
 80046ae:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <SysTick_Handler+0xac>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	4a18      	ldr	r2, [pc, #96]	; (8004718 <SysTick_Handler+0xac>)
 80046b6:	6013      	str	r3, [r2, #0]
	if (timToEndOperation > 1) timToEndOperation --;
 80046b8:	4b18      	ldr	r3, [pc, #96]	; (800471c <SysTick_Handler+0xb0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d904      	bls.n	80046ca <SysTick_Handler+0x5e>
 80046c0:	4b16      	ldr	r3, [pc, #88]	; (800471c <SysTick_Handler+0xb0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	4a15      	ldr	r2, [pc, #84]	; (800471c <SysTick_Handler+0xb0>)
 80046c8:	6013      	str	r3, [r2, #0]
	if (timToCurrent) timToCurrent --;
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <SysTick_Handler+0xb4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <SysTick_Handler+0x70>
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <SysTick_Handler+0xb4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	4a11      	ldr	r2, [pc, #68]	; (8004720 <SysTick_Handler+0xb4>)
 80046da:	6013      	str	r3, [r2, #0]
	if (timBuzzer) timBuzzer --;
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <SysTick_Handler+0xb8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <SysTick_Handler+0x82>
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <SysTick_Handler+0xb8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	4a0e      	ldr	r2, [pc, #56]	; (8004724 <SysTick_Handler+0xb8>)
 80046ec:	6013      	str	r3, [r2, #0]
	if (timBuzzer == 10) SET_BIT(GPIOB->BSRR, GPIO_BSRR_BR_9);
 80046ee:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <SysTick_Handler+0xb8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b0a      	cmp	r3, #10
 80046f4:	d105      	bne.n	8004702 <SysTick_Handler+0x96>
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <SysTick_Handler+0xbc>)
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	4a0b      	ldr	r2, [pc, #44]	; (8004728 <SysTick_Handler+0xbc>)
 80046fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004700:	6193      	str	r3, [r2, #24]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004702:	f000 fc2d 	bl	8004f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004706:	bf00      	nop
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000294 	.word	0x20000294
 8004710:	20000298 	.word	0x20000298
 8004714:	2000029c 	.word	0x2000029c
 8004718:	200004d0 	.word	0x200004d0
 800471c:	200004d8 	.word	0x200004d8
 8004720:	200004d4 	.word	0x200004d4
 8004724:	200004c4 	.word	0x200004c4
 8004728:	40020400 	.word	0x40020400

0800472c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004730:	4826      	ldr	r0, [pc, #152]	; (80047cc <TIM5_IRQHandler+0xa0>)
 8004732:	f002 ffb4 	bl	800769e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  CLEAR_BIT(TIM5->SR, TIM_SR_CC2IF|TIM_SR_CC3IF);                                                        // сбросими руками флаг прерывания
 8004736:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 800473c:	f023 030c 	bic.w	r3, r3, #12
 8004740:	6113      	str	r3, [r2, #16]
  if (ParamDevice.changeCount) ParamDevice.changeCount --;                                               // отнимаем количество отработаных импульсов
 8004742:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <TIM5_IRQHandler+0xa8>)
 8004744:	88db      	ldrh	r3, [r3, #6]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <TIM5_IRQHandler+0x2a>
 800474a:	4b22      	ldr	r3, [pc, #136]	; (80047d4 <TIM5_IRQHandler+0xa8>)
 800474c:	88db      	ldrh	r3, [r3, #6]
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <TIM5_IRQHandler+0xa8>)
 8004754:	80da      	strh	r2, [r3, #6]
  if(!ParamDevice.changeCount && !ParamDevice.flagInfinity && !READ_FLAG(END_OPERATION, globalFlag)){    // заходим только если у нас не бесконечность и досчитали до конца один раз
 8004756:	4b1f      	ldr	r3, [pc, #124]	; (80047d4 <TIM5_IRQHandler+0xa8>)
 8004758:	88db      	ldrh	r3, [r3, #6]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d133      	bne.n	80047c6 <TIM5_IRQHandler+0x9a>
 800475e:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <TIM5_IRQHandler+0xa8>)
 8004760:	7a9b      	ldrb	r3, [r3, #10]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d12f      	bne.n	80047c6 <TIM5_IRQHandler+0x9a>
 8004766:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <TIM5_IRQHandler+0xac>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d129      	bne.n	80047c6 <TIM5_IRQHandler+0x9a>
	  //HAL_TIM_PWM_Stop_IT(&htim5, TIM_CHANNEL_2);
	  //HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);  гавно хал
	  //HAL_TIM_Base_Stop(&htim5);
	  CLEAR_BIT(TIM5->CCMR1, TIM_CCMR1_OC2M);                                                            // очистим регистр
 8004772:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 8004778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477c:	6193      	str	r3, [r2, #24]
	  CLEAR_BIT(TIM5->CCMR2, TIM_CCMR2_OC3M);                                                            // очистим регистр
 800477e:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 8004784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004788:	61d3      	str	r3, [r2, #28]
	  SET_BIT(TIM5->CCMR1, 0b100 << TIM_CCMR1_OC2M_Pos);                                                 // ноль на выходе Force inactive level
 800478a:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	4a10      	ldr	r2, [pc, #64]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 8004790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004794:	6193      	str	r3, [r2, #24]
      SET_BIT(TIM5->CCMR2, 0b100 << TIM_CCMR2_OC3M_Pos);                                                 // ноль на выходе Force inactive level
 8004796:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 800479c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a0:	61d3      	str	r3, [r2, #28]
	  CLEAR_BIT(TIM5->DIER, TIM_DIER_CC2IE|TIM_DIER_CC3IE);                                              // выключим прерывания
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 80047a8:	f023 030c 	bic.w	r3, r3, #12
 80047ac:	60d3      	str	r3, [r2, #12]
	  CLEAR_BIT(TIM5->CR1, TIM_CR1_CEN);                                                                 // выключим таймер в место хала
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <TIM5_IRQHandler+0xa4>)
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	6013      	str	r3, [r2, #0]
	  SET_FLAG (END_OPERATION, globalFlag);                                                              // поднимем флаг окончания
 80047ba:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <TIM5_IRQHandler+0xac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c2:	4a05      	ldr	r2, [pc, #20]	; (80047d8 <TIM5_IRQHandler+0xac>)
 80047c4:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END TIM5_IRQn 1 */
}
 80047c6:	bf00      	nop
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200003f8 	.word	0x200003f8
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	20000040 	.word	0x20000040
 80047d8:	200004c0 	.word	0x200004c0

080047dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return 1;
 80047e0:	2301      	movs	r3, #1
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <_kill>:

int _kill(int pid, int sig)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80047f6:	f003 fbdd 	bl	8007fb4 <__errno>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2216      	movs	r2, #22
 80047fe:	601a      	str	r2, [r3, #0]
  return -1;
 8004800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <_exit>:

void _exit (int status)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004814:	f04f 31ff 	mov.w	r1, #4294967295
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ffe7 	bl	80047ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800481e:	e7fe      	b.n	800481e <_exit+0x12>

08004820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	e00a      	b.n	8004848 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004832:	f3af 8000 	nop.w
 8004836:	4601      	mov	r1, r0
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	60ba      	str	r2, [r7, #8]
 800483e:	b2ca      	uxtb	r2, r1
 8004840:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	3301      	adds	r3, #1
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	dbf0      	blt.n	8004832 <_read+0x12>
  }

  return len;
 8004850:	687b      	ldr	r3, [r7, #4]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b086      	sub	sp, #24
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e009      	b.n	8004880 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	60ba      	str	r2, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	3301      	adds	r3, #1
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	429a      	cmp	r2, r3
 8004886:	dbf1      	blt.n	800486c <_write+0x12>
  }
  return len;
 8004888:	687b      	ldr	r3, [r7, #4]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <_close>:

int _close(int file)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800489a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800489e:	4618      	mov	r0, r3
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048ba:	605a      	str	r2, [r3, #4]
  return 0;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <_isatty>:

int _isatty(int file)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80048d2:	2301      	movs	r3, #1
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004904:	4a14      	ldr	r2, [pc, #80]	; (8004958 <_sbrk+0x5c>)
 8004906:	4b15      	ldr	r3, [pc, #84]	; (800495c <_sbrk+0x60>)
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <_sbrk+0x64>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d102      	bne.n	800491e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <_sbrk+0x64>)
 800491a:	4a12      	ldr	r2, [pc, #72]	; (8004964 <_sbrk+0x68>)
 800491c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800491e:	4b10      	ldr	r3, [pc, #64]	; (8004960 <_sbrk+0x64>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	429a      	cmp	r2, r3
 800492a:	d207      	bcs.n	800493c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800492c:	f003 fb42 	bl	8007fb4 <__errno>
 8004930:	4603      	mov	r3, r0
 8004932:	220c      	movs	r2, #12
 8004934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004936:	f04f 33ff 	mov.w	r3, #4294967295
 800493a:	e009      	b.n	8004950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800493c:	4b08      	ldr	r3, [pc, #32]	; (8004960 <_sbrk+0x64>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <_sbrk+0x64>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4413      	add	r3, r2
 800494a:	4a05      	ldr	r2, [pc, #20]	; (8004960 <_sbrk+0x64>)
 800494c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800494e:	68fb      	ldr	r3, [r7, #12]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20020000 	.word	0x20020000
 800495c:	00000400 	.word	0x00000400
 8004960:	200004c8 	.word	0x200004c8
 8004964:	20000510 	.word	0x20000510

08004968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <SystemInit+0x20>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	4a05      	ldr	r2, [pc, #20]	; (8004988 <SystemInit+0x20>)
 8004974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800497c:	bf00      	nop
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <setTimAndStart>:
extern struct ChangParamDevice ParamDevice;
extern TIM_HandleTypeDef htim5;
//----------------------- переменные из этого файла ----------------------------------//
uint32_t multiplicationFactor[3] = { 100, 100000, 100000000 };   //множитель
//------------------------------ функции ---------------------------------------------//
void setTimAndStart(void) {
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
	ParamDevice.changeCount = ParamDevice.count;                                      // копируем из статических счетчиков в динамические
 8004990:	4b51      	ldr	r3, [pc, #324]	; (8004ad8 <setTimAndStart+0x14c>)
 8004992:	889a      	ldrh	r2, [r3, #4]
 8004994:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <setTimAndStart+0x14c>)
 8004996:	80da      	strh	r2, [r3, #6]
	CLEAR_BIT(TIM5->CCMR1, TIM_CCMR1_OC2M);                 // очистим регистр
 8004998:	4b50      	ldr	r3, [pc, #320]	; (8004adc <setTimAndStart+0x150>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	4a4f      	ldr	r2, [pc, #316]	; (8004adc <setTimAndStart+0x150>)
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a2:	6193      	str	r3, [r2, #24]
	CLEAR_BIT(TIM5->CCMR2, TIM_CCMR2_OC3M);                 // очистим регистр
 80049a4:	4b4d      	ldr	r3, [pc, #308]	; (8004adc <setTimAndStart+0x150>)
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	4a4c      	ldr	r2, [pc, #304]	; (8004adc <setTimAndStart+0x150>)
 80049aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ae:	61d3      	str	r3, [r2, #28]
	CLEAR_BIT(TIM5->SR, TIM_SR_CC2IF|TIM_SR_CC3IF);         // очищаем флаг
 80049b0:	4b4a      	ldr	r3, [pc, #296]	; (8004adc <setTimAndStart+0x150>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	4a49      	ldr	r2, [pc, #292]	; (8004adc <setTimAndStart+0x150>)
 80049b6:	f023 030c 	bic.w	r3, r3, #12
 80049ba:	6113      	str	r3, [r2, #16]
	//__HAL_TIM_CLEAR_FLAG(&htim5, TIM_SR_UIF);             // очищаем флаг
	TIM5->ARR = (ParamDevice.impuls * multiplicationFactor[ParamDevice.unitImpuls]) + (ParamDevice.pause * multiplicationFactor[ParamDevice.unitPause]);
 80049bc:	4b46      	ldr	r3, [pc, #280]	; (8004ad8 <setTimAndStart+0x14c>)
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	4b45      	ldr	r3, [pc, #276]	; (8004ad8 <setTimAndStart+0x14c>)
 80049c4:	7a1b      	ldrb	r3, [r3, #8]
 80049c6:	4619      	mov	r1, r3
 80049c8:	4b45      	ldr	r3, [pc, #276]	; (8004ae0 <setTimAndStart+0x154>)
 80049ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80049ce:	fb03 f202 	mul.w	r2, r3, r2
 80049d2:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <setTimAndStart+0x14c>)
 80049d4:	885b      	ldrh	r3, [r3, #2]
 80049d6:	4619      	mov	r1, r3
 80049d8:	4b3f      	ldr	r3, [pc, #252]	; (8004ad8 <setTimAndStart+0x14c>)
 80049da:	7a5b      	ldrb	r3, [r3, #9]
 80049dc:	4618      	mov	r0, r3
 80049de:	4b40      	ldr	r3, [pc, #256]	; (8004ae0 <setTimAndStart+0x154>)
 80049e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	493c      	ldr	r1, [pc, #240]	; (8004adc <setTimAndStart+0x150>)
 80049ea:	4413      	add	r3, r2
 80049ec:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM5->CCR2 = (ParamDevice.impuls * multiplicationFactor[ParamDevice.unitImpuls]);
 80049ee:	4b3a      	ldr	r3, [pc, #232]	; (8004ad8 <setTimAndStart+0x14c>)
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	4619      	mov	r1, r3
 80049f4:	4b38      	ldr	r3, [pc, #224]	; (8004ad8 <setTimAndStart+0x14c>)
 80049f6:	7a1b      	ldrb	r3, [r3, #8]
 80049f8:	461a      	mov	r2, r3
 80049fa:	4b39      	ldr	r3, [pc, #228]	; (8004ae0 <setTimAndStart+0x154>)
 80049fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a00:	4a36      	ldr	r2, [pc, #216]	; (8004adc <setTimAndStart+0x150>)
 8004a02:	fb01 f303 	mul.w	r3, r1, r3
 8004a06:	6393      	str	r3, [r2, #56]	; 0x38
	TIM5->CCR3 = (ParamDevice.impuls * multiplicationFactor[ParamDevice.unitImpuls]);
 8004a08:	4b33      	ldr	r3, [pc, #204]	; (8004ad8 <setTimAndStart+0x14c>)
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4b32      	ldr	r3, [pc, #200]	; (8004ad8 <setTimAndStart+0x14c>)
 8004a10:	7a1b      	ldrb	r3, [r3, #8]
 8004a12:	461a      	mov	r2, r3
 8004a14:	4b32      	ldr	r3, [pc, #200]	; (8004ae0 <setTimAndStart+0x154>)
 8004a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1a:	4a30      	ldr	r2, [pc, #192]	; (8004adc <setTimAndStart+0x150>)
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	63d3      	str	r3, [r2, #60]	; 0x3c
	// пересчитываем время паузы и время импульса исходя из того что частота 100МГц
	//TIM5->CNT = TIM5->ARR;
	TIM5->CNT = 0;
 8004a22:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <setTimAndStart+0x150>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24
	//HAL_TIM_GenerateEvent(&htim5, TIM_EVENTSOURCE_UPDATE);
	SET_BIT(TIM5->EGR, TIM_EGR_UG);  // применим данные
 8004a28:	4b2c      	ldr	r3, [pc, #176]	; (8004adc <setTimAndStart+0x150>)
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	4a2b      	ldr	r2, [pc, #172]	; (8004adc <setTimAndStart+0x150>)
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	6153      	str	r3, [r2, #20]
	if (!ParamDevice.changeCount) {  // тут если ноль то ставим бесконечный импульс
 8004a34:	4b28      	ldr	r3, [pc, #160]	; (8004ad8 <setTimAndStart+0x14c>)
 8004a36:	88db      	ldrh	r3, [r3, #6]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <setTimAndStart+0xb6>
		ParamDevice.flagInfinity = true;
 8004a3c:	4b26      	ldr	r3, [pc, #152]	; (8004ad8 <setTimAndStart+0x14c>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	729a      	strb	r2, [r3, #10]
	}
	if (ParamDevice.PNPTranzistor && !ParamDevice.NPNTranzistor) {            // смотрим какой транзистор включен и какой канал запускать
 8004a42:	4b25      	ldr	r3, [pc, #148]	; (8004ad8 <setTimAndStart+0x14c>)
 8004a44:	7b1b      	ldrb	r3, [r3, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d013      	beq.n	8004a72 <setTimAndStart+0xe6>
 8004a4a:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <setTimAndStart+0x14c>)
 8004a4c:	7adb      	ldrb	r3, [r3, #11]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10f      	bne.n	8004a72 <setTimAndStart+0xe6>
		if (!ParamDevice.flagInfinity) SET_BIT(TIM5->DIER, TIM_DIER_CC3IE);   // если не бесконечное количество запустим прерывания
 8004a52:	4b21      	ldr	r3, [pc, #132]	; (8004ad8 <setTimAndStart+0x14c>)
 8004a54:	7a9b      	ldrb	r3, [r3, #10]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d105      	bne.n	8004a66 <setTimAndStart+0xda>
 8004a5a:	4b20      	ldr	r3, [pc, #128]	; (8004adc <setTimAndStart+0x150>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	4a1f      	ldr	r2, [pc, #124]	; (8004adc <setTimAndStart+0x150>)
 8004a60:	f043 0308 	orr.w	r3, r3, #8
 8004a64:	60d3      	str	r3, [r2, #12]
		SET_BIT(TIM5->CCMR1, 0b110 << TIM_CCMR1_OC2M_Pos);                    // PWM mode 1
 8004a66:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <setTimAndStart+0x150>)
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	4a1c      	ldr	r2, [pc, #112]	; (8004adc <setTimAndStart+0x150>)
 8004a6c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8004a70:	6193      	str	r3, [r2, #24]
		//HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_3);
	}
	if (ParamDevice.NPNTranzistor) {
 8004a72:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <setTimAndStart+0x14c>)
 8004a74:	7adb      	ldrb	r3, [r3, #11]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00f      	beq.n	8004a9a <setTimAndStart+0x10e>
		if (!ParamDevice.flagInfinity) SET_BIT(TIM5->DIER, TIM_DIER_CC2IE);   // если не бесконечное количество запустим прерывания
 8004a7a:	4b17      	ldr	r3, [pc, #92]	; (8004ad8 <setTimAndStart+0x14c>)
 8004a7c:	7a9b      	ldrb	r3, [r3, #10]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d105      	bne.n	8004a8e <setTimAndStart+0x102>
 8004a82:	4b16      	ldr	r3, [pc, #88]	; (8004adc <setTimAndStart+0x150>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	4a15      	ldr	r2, [pc, #84]	; (8004adc <setTimAndStart+0x150>)
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	60d3      	str	r3, [r2, #12]
		SET_BIT(TIM5->CCMR2, 0b110 << TIM_CCMR2_OC3M_Pos);                    // PWM mode 1
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <setTimAndStart+0x150>)
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	4a12      	ldr	r2, [pc, #72]	; (8004adc <setTimAndStart+0x150>)
 8004a94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a98:	61d3      	str	r3, [r2, #28]
		//HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_2);
	}
	if (ParamDevice.PNPTranzistor && ParamDevice.NPNTranzistor) {
 8004a9a:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <setTimAndStart+0x14c>)
 8004a9c:	7b1b      	ldrb	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00f      	beq.n	8004ac2 <setTimAndStart+0x136>
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <setTimAndStart+0x14c>)
 8004aa4:	7adb      	ldrb	r3, [r3, #11]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <setTimAndStart+0x136>
		SET_BIT(TIM5->CCMR1, 0b110 << TIM_CCMR1_OC2M_Pos);                    // PWM mode 1
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <setTimAndStart+0x150>)
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	4a0b      	ldr	r2, [pc, #44]	; (8004adc <setTimAndStart+0x150>)
 8004ab0:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8004ab4:	6193      	str	r3, [r2, #24]
		SET_BIT(TIM5->CCMR2, 0b110 << TIM_CCMR2_OC3M_Pos);                    // PWM mode 1
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <setTimAndStart+0x150>)
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	4a08      	ldr	r2, [pc, #32]	; (8004adc <setTimAndStart+0x150>)
 8004abc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ac0:	61d3      	str	r3, [r2, #28]
		//HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
	}
	// тут сложная логика, задача включить только одно прерывание от сравнения. и мы проверяем какой транзистор активный и от этого включаем прерывание
	SET_BIT(TIM5->CR1, TIM_CR1_CEN);  // запустим таймер
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <setTimAndStart+0x150>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a05      	ldr	r2, [pc, #20]	; (8004adc <setTimAndStart+0x150>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	6013      	str	r3, [r2, #0]
	//HAL_TIM_Base_Start(&htim5); гавно хал
}
 8004ace:	bf00      	nop
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	20000040 	.word	0x20000040
 8004adc:	40000c00 	.word	0x40000c00
 8004ae0:	20000034 	.word	0x20000034

08004ae4 <timerOff>:

void timerOff(void) {                                       // для вызова из программы
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
	CLEAR_BIT(TIM5->CCMR1, TIM_CCMR1_OC2M);                 // очистим регистр
 8004ae8:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <timerOff+0x5c>)
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <timerOff+0x5c>)
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af2:	6193      	str	r3, [r2, #24]
	CLEAR_BIT(TIM5->CCMR2, TIM_CCMR2_OC3M);                 // очистим регистр
 8004af4:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <timerOff+0x5c>)
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	4a11      	ldr	r2, [pc, #68]	; (8004b40 <timerOff+0x5c>)
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	61d3      	str	r3, [r2, #28]
	SET_BIT(TIM5->CCMR1, 0b100 << TIM_CCMR1_OC2M_Pos);      // ноль на выходе Force inactive level
 8004b00:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <timerOff+0x5c>)
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	4a0e      	ldr	r2, [pc, #56]	; (8004b40 <timerOff+0x5c>)
 8004b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b0a:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM5->CCMR2, 0b100 << TIM_CCMR2_OC3M_Pos);      // ноль на выходе Force inactive level
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <timerOff+0x5c>)
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	4a0b      	ldr	r2, [pc, #44]	; (8004b40 <timerOff+0x5c>)
 8004b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b16:	61d3      	str	r3, [r2, #28]
	CLEAR_BIT(TIM5->DIER, TIM_DIER_CC2IE|TIM_DIER_CC3IE);
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <timerOff+0x5c>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <timerOff+0x5c>)
 8004b1e:	f023 030c 	bic.w	r3, r3, #12
 8004b22:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(TIM5->CR1, TIM_CR1_CEN);
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <timerOff+0x5c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a05      	ldr	r2, [pc, #20]	; (8004b40 <timerOff+0x5c>)
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	6013      	str	r3, [r2, #0]
	ParamDevice.flagInfinity = false;
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <timerOff+0x60>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	729a      	strb	r2, [r3, #10]
}
 8004b36:	bf00      	nop
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	20000040 	.word	0x20000040

08004b48 <doWork>:
uint32_t timToCurrent = 0;
uint32_t timToEndOperation = 0;
uint32_t* memADR = (uint32_t*)ADR_DATA_MIN_X;
//------------------------------ функции ---------------------------------------------//

void doWork (void){
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
	startDisplay ();                                        // старт дисплея
 8004b4c:	f7fe f90e 	bl	8002d6c <startDisplay>
	calibration();                                          // проверим нужна калибровка или нет
 8004b50:	f000 f924 	bl	8004d9c <calibration>
	ILI9341_ToucInit();                                     // инициализация после калибровки
 8004b54:	f7fd fc8a 	bl	800246c <ILI9341_ToucInit>
	screenSaver();                                          // заставка
 8004b58:	f7fd ff6a 	bl	8002a30 <screenSaver>
	mainDisplayPrint();                                     // первоначальный принт
 8004b5c:	f7fe fb16 	bl	800318c <mainDisplayPrint>
	zeroCurrent = adcBuf [0];                               // получим точку нуля АЦП
 8004b60:	4b02      	ldr	r3, [pc, #8]	; (8004b6c <doWork+0x24>)
 8004b62:	881a      	ldrh	r2, [r3, #0]
 8004b64:	4b02      	ldr	r3, [pc, #8]	; (8004b70 <doWork+0x28>)
 8004b66:	801a      	strh	r2, [r3, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20000440 	.word	0x20000440
 8004b70:	200004cc 	.word	0x200004cc

08004b74 <Work>:

void Work (void){                                                                       // меин
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
	checkButtonPress();                                                                 // проверим нажатие кнопок
 8004b78:	f7fe ff62 	bl	8003a40 <checkButtonPress>
	if (ParamDevice.power && !READ_FLAG(WORKING, globalFlag)){                          // проверим включен выход или нет
 8004b7c:	4b2f      	ldr	r3, [pc, #188]	; (8004c3c <Work+0xc8>)
 8004b7e:	7b5b      	ldrb	r3, [r3, #13]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <Work+0x2c>
 8004b84:	4b2e      	ldr	r3, [pc, #184]	; (8004c40 <Work+0xcc>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <Work+0x2c>
		SET_FLAG(WORKING, globalFlag);                                                  // если включен запретим повторный вход
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <Work+0xcc>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b98:	4a29      	ldr	r2, [pc, #164]	; (8004c40 <Work+0xcc>)
 8004b9a:	6013      	str	r3, [r2, #0]
		setTimAndStart ();                                                              // запустим выход
 8004b9c:	f7ff fef6 	bl	800498c <setTimAndStart>
	}
	if (READ_FLAG(END_OPERATION, globalFlag) && READ_FLAG(WORKING, globalFlag)){        // если поднялся флаг окончания
 8004ba0:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <Work+0xcc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <Work+0x64>
 8004bac:	4b24      	ldr	r3, [pc, #144]	; (8004c40 <Work+0xcc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00f      	beq.n	8004bd8 <Work+0x64>
		RESET_FLAG(END_OPERATION, globalFlag);                                          // сбросим конец операции
 8004bb8:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <Work+0xcc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc0:	4a1f      	ldr	r2, [pc, #124]	; (8004c40 <Work+0xcc>)
 8004bc2:	6013      	str	r3, [r2, #0]
		endOperationWindow (true);                                                      // покажем окно комплит
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f7fe fbd7 	bl	8003378 <endOperationWindow>
		timToEndOperation = 1000;                                                       // взведем таймер показа окна
 8004bca:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <Work+0xd0>)
 8004bcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bd0:	601a      	str	r2, [r3, #0]
		buzzerSet(100);
 8004bd2:	2064      	movs	r0, #100	; 0x64
 8004bd4:	f7ff fb6c 	bl	80042b0 <buzzerSet>
	}
	if (READ_FLAG(WORKING, globalFlag) && timToEndOperation == 1){                      // когда отсчитали время
 8004bd8:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <Work+0xcc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d014      	beq.n	8004c0e <Work+0x9a>
 8004be4:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <Work+0xd0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d110      	bne.n	8004c0e <Work+0x9a>
		timToEndOperation = 0;                                                          // сбросим полностью
 8004bec:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <Work+0xd0>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
		RESET_FLAG(WORKING, globalFlag);                                                // выключим флаг работы
 8004bf2:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <Work+0xcc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bfa:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <Work+0xcc>)
 8004bfc:	6013      	str	r3, [r2, #0]
		externalPowerOff ();                                                            // погасим клавишу повер
 8004bfe:	f7fe fc95 	bl	800352c <externalPowerOff>
		ParamDevice.power = false;                                                      // и снимем флаг работы
 8004c02:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <Work+0xc8>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	735a      	strb	r2, [r3, #13]
		endOperationWindow (false);                                                     // уберем показ комплит
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f7fe fbb5 	bl	8003378 <endOperationWindow>
	}
	if (!ParamDevice.power && READ_FLAG(WORKING, globalFlag) ){                         // если мы нажали кнопку повер при выполнении
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <Work+0xc8>)
 8004c10:	7b5b      	ldrb	r3, [r3, #13]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10d      	bne.n	8004c32 <Work+0xbe>
 8004c16:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <Work+0xcc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <Work+0xbe>
		timerOff ();                                                                    // остановить
 8004c22:	f7ff ff5f 	bl	8004ae4 <timerOff>
		RESET_FLAG(WORKING, globalFlag);                                                // сбросить
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <Work+0xcc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c2e:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <Work+0xcc>)
 8004c30:	6013      	str	r3, [r2, #0]
	}
	filtrADC ();
 8004c32:	f000 f809 	bl	8004c48 <filtrADC>
}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000040 	.word	0x20000040
 8004c40:	200004c0 	.word	0x200004c0
 8004c44:	200004d8 	.word	0x200004d8

08004c48 <filtrADC>:

void filtrADC (void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
	int32_t filtrAdc = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
	float current = 0;
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < FILTRADC; i ++) {
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	e00a      	b.n	8004c74 <filtrADC+0x2c>
		filtrAdc += adcBuf [i];
 8004c5e:	4a48      	ldr	r2, [pc, #288]	; (8004d80 <filtrADC+0x138>)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c66:	461a      	mov	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTRADC; i ++) {
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3301      	adds	r3, #1
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b3f      	cmp	r3, #63	; 0x3f
 8004c78:	ddf1      	ble.n	8004c5e <filtrADC+0x16>
	}
	filtrAdc = filtrAdc / FILTRADC;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	da00      	bge.n	8004c82 <filtrADC+0x3a>
 8004c80:	333f      	adds	r3, #63	; 0x3f
 8004c82:	119b      	asrs	r3, r3, #6
 8004c84:	60fb      	str	r3, [r7, #12]
	if ((filtrAdc - zeroCurrent) <= 0) filtrAdc = 0;
 8004c86:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <filtrADC+0x13c>)
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	dc02      	bgt.n	8004c9a <filtrADC+0x52>
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e005      	b.n	8004ca6 <filtrADC+0x5e>
	else filtrAdc = filtrAdc - zeroCurrent;
 8004c9a:	4b3a      	ldr	r3, [pc, #232]	; (8004d84 <filtrADC+0x13c>)
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
	current = (((float)filtrAdc * 0.0008)*1.52)*11 ;      // 1.52 k , 0.0008 LSB ADC, 1 вольт = 10А +-
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	ee07 3a90 	vmov	s15, r3
 8004cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cb0:	ee17 0a90 	vmov	r0, s15
 8004cb4:	f7fb fc50 	bl	8000558 <__aeabi_f2d>
 8004cb8:	a32d      	add	r3, pc, #180	; (adr r3, 8004d70 <filtrADC+0x128>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb fca3 	bl	8000608 <__aeabi_dmul>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	a32b      	add	r3, pc, #172	; (adr r3, 8004d78 <filtrADC+0x130>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fc9a 	bl	8000608 <__aeabi_dmul>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4619      	mov	r1, r3
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	4b29      	ldr	r3, [pc, #164]	; (8004d88 <filtrADC+0x140>)
 8004ce2:	f7fb fc91 	bl	8000608 <__aeabi_dmul>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4610      	mov	r0, r2
 8004cec:	4619      	mov	r1, r3
 8004cee:	f7fb ff63 	bl	8000bb8 <__aeabi_d2f>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	607b      	str	r3, [r7, #4]
	if (!timToCurrent){
 8004cf6:	4b25      	ldr	r3, [pc, #148]	; (8004d8c <filtrADC+0x144>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d107      	bne.n	8004d0e <filtrADC+0xc6>
		timToCurrent = 500;
 8004cfe:	4b23      	ldr	r3, [pc, #140]	; (8004d8c <filtrADC+0x144>)
 8004d00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d04:	601a      	str	r2, [r3, #0]
		printCurrent (current);
 8004d06:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d0a:	f7fe f8ed 	bl	8002ee8 <printCurrent>
	}
	if (current > MAX_CURRENT) {                                                        // если перегруз по току
 8004d0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d12:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1e:	dd0b      	ble.n	8004d38 <filtrADC+0xf0>
		timerOff ();                                                                    // остановим таймер
 8004d20:	f7ff fee0 	bl	8004ae4 <timerOff>
		overCurrent (true);                                                             // покажем табличку
 8004d24:	2001      	movs	r0, #1
 8004d26:	f7fe fb69 	bl	80033fc <overCurrent>
		timToOvercurrent = 1000;
 8004d2a:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <filtrADC+0x148>)
 8004d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d30:	601a      	str	r2, [r3, #0]
		buzzerSet(100);                                                                 // пик
 8004d32:	2064      	movs	r0, #100	; 0x64
 8004d34:	f7ff fabc 	bl	80042b0 <buzzerSet>
	}
	if (timToOvercurrent == 1) {
 8004d38:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <filtrADC+0x148>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d110      	bne.n	8004d62 <filtrADC+0x11a>
		timToOvercurrent = 0;
 8004d40:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <filtrADC+0x148>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
		overCurrent (false);
 8004d46:	2000      	movs	r0, #0
 8004d48:	f7fe fb58 	bl	80033fc <overCurrent>
		RESET_FLAG(WORKING, globalFlag);                                                // выключим флаг работы
 8004d4c:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <filtrADC+0x14c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d54:	4a0f      	ldr	r2, [pc, #60]	; (8004d94 <filtrADC+0x14c>)
 8004d56:	6013      	str	r3, [r2, #0]
		externalPowerOff ();                                                            // погасим клавишу повер
 8004d58:	f7fe fbe8 	bl	800352c <externalPowerOff>
		ParamDevice.power = false;                                                      // и снимем флаг работы
 8004d5c:	4b0e      	ldr	r3, [pc, #56]	; (8004d98 <filtrADC+0x150>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	735a      	strb	r2, [r3, #13]
	}
}
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	f3af 8000 	nop.w
 8004d70:	eb1c432d 	.word	0xeb1c432d
 8004d74:	3f4a36e2 	.word	0x3f4a36e2
 8004d78:	851eb852 	.word	0x851eb852
 8004d7c:	3ff851eb 	.word	0x3ff851eb
 8004d80:	20000440 	.word	0x20000440
 8004d84:	200004cc 	.word	0x200004cc
 8004d88:	40260000 	.word	0x40260000
 8004d8c:	200004d4 	.word	0x200004d4
 8004d90:	200004d0 	.word	0x200004d0
 8004d94:	200004c0 	.word	0x200004c0
 8004d98:	20000040 	.word	0x20000040

08004d9c <calibration>:

void calibration (void){                     // калибровка
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
	if (*memADR == 0xFFFFFFFF) {             // если в ячейке калибровки начальное значение значит нужно калибровать
 8004da0:	4b30      	ldr	r3, [pc, #192]	; (8004e64 <calibration+0xc8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d159      	bne.n	8004e60 <calibration+0xc4>
		reset:                               // при неудаче вернуться в начало
 8004dac:	bf00      	nop
		GUICalibration (LEFTUP);
 8004dae:	2000      	movs	r0, #0
 8004db0:	f7fd fe92 	bl	8002ad8 <GUICalibration>
		setOK (false);
 8004db4:	2000      	movs	r0, #0
 8004db6:	f7fd ffa9 	bl	8002d0c <setOK>
		calibTouch(LEFTUP);
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f7fd fcea 	bl	8002794 <calibTouch>
		setOK (true);
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	f7fd ffa3 	bl	8002d0c <setOK>
		HAL_Delay(1000);
 8004dc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dca:	f000 f8e9 	bl	8004fa0 <HAL_Delay>

		GUICalibration (RIGHTUP);
 8004dce:	2001      	movs	r0, #1
 8004dd0:	f7fd fe82 	bl	8002ad8 <GUICalibration>
		setOK (false);
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	f7fd ff99 	bl	8002d0c <setOK>
		calibTouch(RIGHTUP);
 8004dda:	2001      	movs	r0, #1
 8004ddc:	f7fd fcda 	bl	8002794 <calibTouch>
		setOK (true);
 8004de0:	2001      	movs	r0, #1
 8004de2:	f7fd ff93 	bl	8002d0c <setOK>
		HAL_Delay(1000);
 8004de6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dea:	f000 f8d9 	bl	8004fa0 <HAL_Delay>

		GUICalibration (LEFTDOWN);
 8004dee:	2002      	movs	r0, #2
 8004df0:	f7fd fe72 	bl	8002ad8 <GUICalibration>
		setOK (false);
 8004df4:	2000      	movs	r0, #0
 8004df6:	f7fd ff89 	bl	8002d0c <setOK>
		calibTouch(LEFTDOWN);
 8004dfa:	2002      	movs	r0, #2
 8004dfc:	f7fd fcca 	bl	8002794 <calibTouch>
		setOK (true);
 8004e00:	2001      	movs	r0, #1
 8004e02:	f7fd ff83 	bl	8002d0c <setOK>
		HAL_Delay(1000);
 8004e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e0a:	f000 f8c9 	bl	8004fa0 <HAL_Delay>

		GUICalibration (RIGHTDOWN);
 8004e0e:	2003      	movs	r0, #3
 8004e10:	f7fd fe62 	bl	8002ad8 <GUICalibration>
		setOK (false);
 8004e14:	2000      	movs	r0, #0
 8004e16:	f7fd ff79 	bl	8002d0c <setOK>
		calibTouch(RIGHTDOWN);
 8004e1a:	2003      	movs	r0, #3
 8004e1c:	f7fd fcba 	bl	8002794 <calibTouch>
		setOK (true);
 8004e20:	2001      	movs	r0, #1
 8004e22:	f7fd ff73 	bl	8002d0c <setOK>
		HAL_Delay(1000);
 8004e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e2a:	f000 f8b9 	bl	8004fa0 <HAL_Delay>

		GUICalibration (CHECKCALIB);
 8004e2e:	2004      	movs	r0, #4
 8004e30:	f7fd fe52 	bl	8002ad8 <GUICalibration>
		if (calibTouch(CHECKCALIB)) {
 8004e34:	2004      	movs	r0, #4
 8004e36:	f7fd fcad 	bl	8002794 <calibTouch>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <calibration+0xb4>
			GUICalibration(CALIBOK);
 8004e40:	2005      	movs	r0, #5
 8004e42:	f7fd fe49 	bl	8002ad8 <GUICalibration>
			HAL_Delay(1000);
 8004e46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e4a:	f000 f8a9 	bl	8004fa0 <HAL_Delay>
			GUICalibration(ERRCALIB);
			HAL_Delay(1000);
			goto reset;
		}
	}
}
 8004e4e:	e007      	b.n	8004e60 <calibration+0xc4>
			GUICalibration(ERRCALIB);
 8004e50:	2006      	movs	r0, #6
 8004e52:	f7fd fe41 	bl	8002ad8 <GUICalibration>
			HAL_Delay(1000);
 8004e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e5a:	f000 f8a1 	bl	8004fa0 <HAL_Delay>
			goto reset;
 8004e5e:	e7a6      	b.n	8004dae <calibration+0x12>
}
 8004e60:	bf00      	nop
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000050 	.word	0x20000050

08004e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ea0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e6c:	480d      	ldr	r0, [pc, #52]	; (8004ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004e6e:	490e      	ldr	r1, [pc, #56]	; (8004ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004e70:	4a0e      	ldr	r2, [pc, #56]	; (8004eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e74:	e002      	b.n	8004e7c <LoopCopyDataInit>

08004e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e7a:	3304      	adds	r3, #4

08004e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e80:	d3f9      	bcc.n	8004e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e82:	4a0b      	ldr	r2, [pc, #44]	; (8004eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004e84:	4c0b      	ldr	r4, [pc, #44]	; (8004eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e88:	e001      	b.n	8004e8e <LoopFillZerobss>

08004e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e8c:	3204      	adds	r2, #4

08004e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e90:	d3fb      	bcc.n	8004e8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e92:	f7ff fd69 	bl	8004968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e96:	f003 f893 	bl	8007fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e9a:	f7fe ff5d 	bl	8003d58 <main>
  bx  lr    
 8004e9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ea8:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8004eac:	08015a74 	.word	0x08015a74
  ldr r2, =_sbss
 8004eb0:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8004eb4:	20000510 	.word	0x20000510

08004eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004eb8:	e7fe      	b.n	8004eb8 <ADC_IRQHandler>
	...

08004ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <HAL_Init+0x40>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <HAL_Init+0x40>)
 8004ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_Init+0x40>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <HAL_Init+0x40>)
 8004ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <HAL_Init+0x40>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a07      	ldr	r2, [pc, #28]	; (8004efc <HAL_Init+0x40>)
 8004ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ee4:	2003      	movs	r0, #3
 8004ee6:	f000 fd51 	bl	800598c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eea:	200f      	movs	r0, #15
 8004eec:	f000 f808 	bl	8004f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ef0:	f7ff fa18 	bl	8004324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40023c00 	.word	0x40023c00

08004f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f08:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <HAL_InitTick+0x54>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <HAL_InitTick+0x58>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	4619      	mov	r1, r3
 8004f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fd69 	bl	80059f6 <HAL_SYSTICK_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e00e      	b.n	8004f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b0f      	cmp	r3, #15
 8004f32:	d80a      	bhi.n	8004f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f34:	2200      	movs	r2, #0
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	f000 fd31 	bl	80059a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f40:	4a06      	ldr	r2, [pc, #24]	; (8004f5c <HAL_InitTick+0x5c>)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	e000      	b.n	8004f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20000030 	.word	0x20000030
 8004f58:	20000058 	.word	0x20000058
 8004f5c:	20000054 	.word	0x20000054

08004f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_IncTick+0x20>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <HAL_IncTick+0x24>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4413      	add	r3, r2
 8004f70:	4a04      	ldr	r2, [pc, #16]	; (8004f84 <HAL_IncTick+0x24>)
 8004f72:	6013      	str	r3, [r2, #0]
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000058 	.word	0x20000058
 8004f84:	200004dc 	.word	0x200004dc

08004f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <HAL_GetTick+0x14>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	200004dc 	.word	0x200004dc

08004fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fa8:	f7ff ffee 	bl	8004f88 <HAL_GetTick>
 8004fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d005      	beq.n	8004fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fba:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <HAL_Delay+0x44>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004fc6:	bf00      	nop
 8004fc8:	f7ff ffde 	bl	8004f88 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d8f7      	bhi.n	8004fc8 <HAL_Delay+0x28>
  {
  }
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000058 	.word	0x20000058

08004fe8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e033      	b.n	8005066 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff f9b4 	bl	8004374 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b00      	cmp	r3, #0
 8005024:	d118      	bne.n	8005058 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800502e:	f023 0302 	bic.w	r3, r3, #2
 8005032:	f043 0202 	orr.w	r2, r3, #2
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fa58 	bl	80054f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	f043 0201 	orr.w	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	641a      	str	r2, [r3, #64]	; 0x40
 8005056:	e001      	b.n	800505c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005064:	7bfb      	ldrb	r3, [r7, #15]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_ADC_Start_DMA+0x1e>
 800508a:	2302      	movs	r3, #2
 800508c:	e0ce      	b.n	800522c <HAL_ADC_Start_DMA+0x1bc>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d018      	beq.n	80050d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80050b4:	4b5f      	ldr	r3, [pc, #380]	; (8005234 <HAL_ADC_Start_DMA+0x1c4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a5f      	ldr	r2, [pc, #380]	; (8005238 <HAL_ADC_Start_DMA+0x1c8>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	0c9a      	lsrs	r2, r3, #18
 80050c0:	4613      	mov	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4413      	add	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80050c8:	e002      	b.n	80050d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f9      	bne.n	80050ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e4:	d107      	bne.n	80050f6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	f040 8086 	bne.w	8005212 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800510e:	f023 0301 	bic.w	r3, r3, #1
 8005112:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005130:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005144:	d106      	bne.n	8005154 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	f023 0206 	bic.w	r2, r3, #6
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	645a      	str	r2, [r3, #68]	; 0x44
 8005152:	e002      	b.n	800515a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005162:	4b36      	ldr	r3, [pc, #216]	; (800523c <HAL_ADC_Start_DMA+0x1cc>)
 8005164:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	4a35      	ldr	r2, [pc, #212]	; (8005240 <HAL_ADC_Start_DMA+0x1d0>)
 800516c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	4a34      	ldr	r2, [pc, #208]	; (8005244 <HAL_ADC_Start_DMA+0x1d4>)
 8005174:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	4a33      	ldr	r2, [pc, #204]	; (8005248 <HAL_ADC_Start_DMA+0x1d8>)
 800517c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005186:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005196:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	334c      	adds	r3, #76	; 0x4c
 80051b2:	4619      	mov	r1, r3
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f000 fcd8 	bl	8005b6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10f      	bne.n	80051e8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d129      	bne.n	800522a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80051e4:	609a      	str	r2, [r3, #8]
 80051e6:	e020      	b.n	800522a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a17      	ldr	r2, [pc, #92]	; (800524c <HAL_ADC_Start_DMA+0x1dc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d11b      	bne.n	800522a <HAL_ADC_Start_DMA+0x1ba>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d114      	bne.n	800522a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	e00b      	b.n	800522a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f043 0210 	orr.w	r2, r3, #16
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005222:	f043 0201 	orr.w	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20000030 	.word	0x20000030
 8005238:	431bde83 	.word	0x431bde83
 800523c:	40012300 	.word	0x40012300
 8005240:	080056e9 	.word	0x080056e9
 8005244:	080057a3 	.word	0x080057a3
 8005248:	080057bf 	.word	0x080057bf
 800524c:	40012000 	.word	0x40012000

08005250 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_ADC_ConfigChannel+0x1c>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e113      	b.n	80054d0 <HAL_ADC_ConfigChannel+0x244>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b09      	cmp	r3, #9
 80052b6:	d925      	bls.n	8005304 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68d9      	ldr	r1, [r3, #12]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	4613      	mov	r3, r2
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	4413      	add	r3, r2
 80052cc:	3b1e      	subs	r3, #30
 80052ce:	2207      	movs	r2, #7
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	43da      	mvns	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	400a      	ands	r2, r1
 80052dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68d9      	ldr	r1, [r3, #12]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	4618      	mov	r0, r3
 80052f0:	4603      	mov	r3, r0
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4403      	add	r3, r0
 80052f6:	3b1e      	subs	r3, #30
 80052f8:	409a      	lsls	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	60da      	str	r2, [r3, #12]
 8005302:	e022      	b.n	800534a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6919      	ldr	r1, [r3, #16]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	4613      	mov	r3, r2
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	4413      	add	r3, r2
 8005318:	2207      	movs	r2, #7
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	43da      	mvns	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	400a      	ands	r2, r1
 8005326:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6919      	ldr	r1, [r3, #16]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	4618      	mov	r0, r3
 800533a:	4603      	mov	r3, r0
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4403      	add	r3, r0
 8005340:	409a      	lsls	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b06      	cmp	r3, #6
 8005350:	d824      	bhi.n	800539c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	3b05      	subs	r3, #5
 8005364:	221f      	movs	r2, #31
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43da      	mvns	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	400a      	ands	r2, r1
 8005372:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	4618      	mov	r0, r3
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	3b05      	subs	r3, #5
 800538e:	fa00 f203 	lsl.w	r2, r0, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	635a      	str	r2, [r3, #52]	; 0x34
 800539a:	e04c      	b.n	8005436 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b0c      	cmp	r3, #12
 80053a2:	d824      	bhi.n	80053ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	3b23      	subs	r3, #35	; 0x23
 80053b6:	221f      	movs	r2, #31
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	43da      	mvns	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	400a      	ands	r2, r1
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	4618      	mov	r0, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	3b23      	subs	r3, #35	; 0x23
 80053e0:	fa00 f203 	lsl.w	r2, r0, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
 80053ec:	e023      	b.n	8005436 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	3b41      	subs	r3, #65	; 0x41
 8005400:	221f      	movs	r2, #31
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	43da      	mvns	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	400a      	ands	r2, r1
 800540e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	4618      	mov	r0, r3
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	3b41      	subs	r3, #65	; 0x41
 800542a:	fa00 f203 	lsl.w	r2, r0, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005436:	4b29      	ldr	r3, [pc, #164]	; (80054dc <HAL_ADC_ConfigChannel+0x250>)
 8005438:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a28      	ldr	r2, [pc, #160]	; (80054e0 <HAL_ADC_ConfigChannel+0x254>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d10f      	bne.n	8005464 <HAL_ADC_ConfigChannel+0x1d8>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b12      	cmp	r3, #18
 800544a:	d10b      	bne.n	8005464 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1d      	ldr	r2, [pc, #116]	; (80054e0 <HAL_ADC_ConfigChannel+0x254>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d12b      	bne.n	80054c6 <HAL_ADC_ConfigChannel+0x23a>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1c      	ldr	r2, [pc, #112]	; (80054e4 <HAL_ADC_ConfigChannel+0x258>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <HAL_ADC_ConfigChannel+0x1f4>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b11      	cmp	r3, #17
 800547e:	d122      	bne.n	80054c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a11      	ldr	r2, [pc, #68]	; (80054e4 <HAL_ADC_ConfigChannel+0x258>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d111      	bne.n	80054c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80054a2:	4b11      	ldr	r3, [pc, #68]	; (80054e8 <HAL_ADC_ConfigChannel+0x25c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a11      	ldr	r2, [pc, #68]	; (80054ec <HAL_ADC_ConfigChannel+0x260>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	0c9a      	lsrs	r2, r3, #18
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054b8:	e002      	b.n	80054c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3b01      	subs	r3, #1
 80054be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f9      	bne.n	80054ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	40012300 	.word	0x40012300
 80054e0:	40012000 	.word	0x40012000
 80054e4:	10000012 	.word	0x10000012
 80054e8:	20000030 	.word	0x20000030
 80054ec:	431bde83 	.word	0x431bde83

080054f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054f8:	4b79      	ldr	r3, [pc, #484]	; (80056e0 <ADC_Init+0x1f0>)
 80054fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	431a      	orrs	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6859      	ldr	r1, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	021a      	lsls	r2, r3, #8
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6859      	ldr	r1, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800556a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6899      	ldr	r1, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	4a58      	ldr	r2, [pc, #352]	; (80056e4 <ADC_Init+0x1f4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d022      	beq.n	80055ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005596:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6899      	ldr	r1, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6899      	ldr	r1, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]
 80055cc:	e00f      	b.n	80055ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0202 	bic.w	r2, r2, #2
 80055fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6899      	ldr	r1, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	7e1b      	ldrb	r3, [r3, #24]
 8005608:	005a      	lsls	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01b      	beq.n	8005654 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800562a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800563a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6859      	ldr	r1, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	3b01      	subs	r3, #1
 8005648:	035a      	lsls	r2, r3, #13
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	e007      	b.n	8005664 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005662:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005672:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	3b01      	subs	r3, #1
 8005680:	051a      	lsls	r2, r3, #20
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6899      	ldr	r1, [r3, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056a6:	025a      	lsls	r2, r3, #9
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6899      	ldr	r1, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	029a      	lsls	r2, r3, #10
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]
}
 80056d4:	bf00      	nop
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	40012300 	.word	0x40012300
 80056e4:	0f000001 	.word	0x0f000001

080056e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d13c      	bne.n	800577c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d12b      	bne.n	8005774 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005720:	2b00      	cmp	r3, #0
 8005722:	d127      	bne.n	8005774 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800572e:	2b00      	cmp	r3, #0
 8005730:	d006      	beq.n	8005740 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800573c:	2b00      	cmp	r3, #0
 800573e:	d119      	bne.n	8005774 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0220 	bic.w	r2, r2, #32
 800574e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d105      	bne.n	8005774 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	f043 0201 	orr.w	r2, r3, #1
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7ff fd6b 	bl	8005250 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800577a:	e00e      	b.n	800579a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f7ff fd75 	bl	8005278 <HAL_ADC_ErrorCallback>
}
 800578e:	e004      	b.n	800579a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	4798      	blx	r3
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff fd57 	bl	8005264 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2240      	movs	r2, #64	; 0x40
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	f043 0204 	orr.w	r2, r3, #4
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff fd4a 	bl	8005278 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057fc:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <__NVIC_SetPriorityGrouping+0x44>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005808:	4013      	ands	r3, r2
 800580a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800581c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800581e:	4a04      	ldr	r2, [pc, #16]	; (8005830 <__NVIC_SetPriorityGrouping+0x44>)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	60d3      	str	r3, [r2, #12]
}
 8005824:	bf00      	nop
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	e000ed00 	.word	0xe000ed00

08005834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005838:	4b04      	ldr	r3, [pc, #16]	; (800584c <__NVIC_GetPriorityGrouping+0x18>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	0a1b      	lsrs	r3, r3, #8
 800583e:	f003 0307 	and.w	r3, r3, #7
}
 8005842:	4618      	mov	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	e000ed00 	.word	0xe000ed00

08005850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800585a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585e:	2b00      	cmp	r3, #0
 8005860:	db0b      	blt.n	800587a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	f003 021f 	and.w	r2, r3, #31
 8005868:	4907      	ldr	r1, [pc, #28]	; (8005888 <__NVIC_EnableIRQ+0x38>)
 800586a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	2001      	movs	r0, #1
 8005872:	fa00 f202 	lsl.w	r2, r0, r2
 8005876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	e000e100 	.word	0xe000e100

0800588c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	4603      	mov	r3, r0
 8005894:	6039      	str	r1, [r7, #0]
 8005896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589c:	2b00      	cmp	r3, #0
 800589e:	db0a      	blt.n	80058b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	490c      	ldr	r1, [pc, #48]	; (80058d8 <__NVIC_SetPriority+0x4c>)
 80058a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058aa:	0112      	lsls	r2, r2, #4
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	440b      	add	r3, r1
 80058b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058b4:	e00a      	b.n	80058cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	4908      	ldr	r1, [pc, #32]	; (80058dc <__NVIC_SetPriority+0x50>)
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	3b04      	subs	r3, #4
 80058c4:	0112      	lsls	r2, r2, #4
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	440b      	add	r3, r1
 80058ca:	761a      	strb	r2, [r3, #24]
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	e000e100 	.word	0xe000e100
 80058dc:	e000ed00 	.word	0xe000ed00

080058e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b089      	sub	sp, #36	; 0x24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f1c3 0307 	rsb	r3, r3, #7
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	bf28      	it	cs
 80058fe:	2304      	movcs	r3, #4
 8005900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	3304      	adds	r3, #4
 8005906:	2b06      	cmp	r3, #6
 8005908:	d902      	bls.n	8005910 <NVIC_EncodePriority+0x30>
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	3b03      	subs	r3, #3
 800590e:	e000      	b.n	8005912 <NVIC_EncodePriority+0x32>
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005914:	f04f 32ff 	mov.w	r2, #4294967295
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	43da      	mvns	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	401a      	ands	r2, r3
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005928:	f04f 31ff 	mov.w	r1, #4294967295
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	fa01 f303 	lsl.w	r3, r1, r3
 8005932:	43d9      	mvns	r1, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005938:	4313      	orrs	r3, r2
         );
}
 800593a:	4618      	mov	r0, r3
 800593c:	3724      	adds	r7, #36	; 0x24
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
	...

08005948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3b01      	subs	r3, #1
 8005954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005958:	d301      	bcc.n	800595e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800595a:	2301      	movs	r3, #1
 800595c:	e00f      	b.n	800597e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800595e:	4a0a      	ldr	r2, [pc, #40]	; (8005988 <SysTick_Config+0x40>)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	3b01      	subs	r3, #1
 8005964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005966:	210f      	movs	r1, #15
 8005968:	f04f 30ff 	mov.w	r0, #4294967295
 800596c:	f7ff ff8e 	bl	800588c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <SysTick_Config+0x40>)
 8005972:	2200      	movs	r2, #0
 8005974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005976:	4b04      	ldr	r3, [pc, #16]	; (8005988 <SysTick_Config+0x40>)
 8005978:	2207      	movs	r2, #7
 800597a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	e000e010 	.word	0xe000e010

0800598c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ff29 	bl	80057ec <__NVIC_SetPriorityGrouping>
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	4603      	mov	r3, r0
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	607a      	str	r2, [r7, #4]
 80059ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059b4:	f7ff ff3e 	bl	8005834 <__NVIC_GetPriorityGrouping>
 80059b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	6978      	ldr	r0, [r7, #20]
 80059c0:	f7ff ff8e 	bl	80058e0 <NVIC_EncodePriority>
 80059c4:	4602      	mov	r2, r0
 80059c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ca:	4611      	mov	r1, r2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff ff5d 	bl	800588c <__NVIC_SetPriority>
}
 80059d2:	bf00      	nop
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	4603      	mov	r3, r0
 80059e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff ff31 	bl	8005850 <__NVIC_EnableIRQ>
}
 80059ee:	bf00      	nop
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff ffa2 	bl	8005948 <SysTick_Config>
 8005a04:	4603      	mov	r3, r0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a1c:	f7ff fab4 	bl	8004f88 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e099      	b.n	8005b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0201 	bic.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a4c:	e00f      	b.n	8005a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a4e:	f7ff fa9b 	bl	8004f88 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	d908      	bls.n	8005a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2203      	movs	r2, #3
 8005a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e078      	b.n	8005b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e8      	bne.n	8005a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4b38      	ldr	r3, [pc, #224]	; (8005b68 <HAL_DMA_Init+0x158>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d107      	bne.n	8005ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d117      	bne.n	8005b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00e      	beq.n	8005b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f8e5 	bl	8005ce4 <DMA_CheckFifoParam>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d008      	beq.n	8005b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2240      	movs	r2, #64	; 0x40
 8005b24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e016      	b.n	8005b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f89c 	bl	8005c78 <DMA_CalcBaseAndBitshift>
 8005b40:	4603      	mov	r3, r0
 8005b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b48:	223f      	movs	r2, #63	; 0x3f
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	f010803f 	.word	0xf010803f

08005b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <HAL_DMA_Start_IT+0x26>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	e040      	b.n	8005c14 <HAL_DMA_Start_IT+0xa8>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d12f      	bne.n	8005c06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f82e 	bl	8005c1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc4:	223f      	movs	r2, #63	; 0x3f
 8005bc6:	409a      	lsls	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0216 	orr.w	r2, r2, #22
 8005bda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d007      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0208 	orr.w	r2, r2, #8
 8005bf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	e005      	b.n	8005c12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c0e:	2302      	movs	r3, #2
 8005c10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b40      	cmp	r3, #64	; 0x40
 8005c48:	d108      	bne.n	8005c5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c5a:	e007      	b.n	8005c6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	60da      	str	r2, [r3, #12]
}
 8005c6c:	bf00      	nop
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	3b10      	subs	r3, #16
 8005c88:	4a14      	ldr	r2, [pc, #80]	; (8005cdc <DMA_CalcBaseAndBitshift+0x64>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c92:	4a13      	ldr	r2, [pc, #76]	; (8005ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d909      	bls.n	8005cba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cae:	f023 0303 	bic.w	r3, r3, #3
 8005cb2:	1d1a      	adds	r2, r3, #4
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	659a      	str	r2, [r3, #88]	; 0x58
 8005cb8:	e007      	b.n	8005cca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	aaaaaaab 	.word	0xaaaaaaab
 8005ce0:	08015684 	.word	0x08015684

08005ce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d11f      	bne.n	8005d3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d856      	bhi.n	8005db2 <DMA_CheckFifoParam+0xce>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <DMA_CheckFifoParam+0x28>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d1d 	.word	0x08005d1d
 8005d10:	08005d2f 	.word	0x08005d2f
 8005d14:	08005d1d 	.word	0x08005d1d
 8005d18:	08005db3 	.word	0x08005db3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d046      	beq.n	8005db6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d2c:	e043      	b.n	8005db6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d36:	d140      	bne.n	8005dba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d3c:	e03d      	b.n	8005dba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d46:	d121      	bne.n	8005d8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d837      	bhi.n	8005dbe <DMA_CheckFifoParam+0xda>
 8005d4e:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <DMA_CheckFifoParam+0x70>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d65 	.word	0x08005d65
 8005d58:	08005d6b 	.word	0x08005d6b
 8005d5c:	08005d65 	.word	0x08005d65
 8005d60:	08005d7d 	.word	0x08005d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
      break;
 8005d68:	e030      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d025      	beq.n	8005dc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d7a:	e022      	b.n	8005dc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d84:	d11f      	bne.n	8005dc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d8a:	e01c      	b.n	8005dc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d903      	bls.n	8005d9a <DMA_CheckFifoParam+0xb6>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d003      	beq.n	8005da0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d98:	e018      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d9e:	e015      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00e      	beq.n	8005dca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
      break;
 8005db0:	e00b      	b.n	8005dca <DMA_CheckFifoParam+0xe6>
      break;
 8005db2:	bf00      	nop
 8005db4:	e00a      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      break;
 8005db6:	bf00      	nop
 8005db8:	e008      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      break;
 8005dba:	bf00      	nop
 8005dbc:	e006      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e004      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e002      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      break;   
 8005dc6:	bf00      	nop
 8005dc8:	e000      	b.n	8005dcc <DMA_CheckFifoParam+0xe8>
      break;
 8005dca:	bf00      	nop
    }
  } 
  
  return status; 
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop

08005ddc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005dee:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <HAL_FLASH_Program+0xa0>)
 8005df0:	7e1b      	ldrb	r3, [r3, #24]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_FLASH_Program+0x1e>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e03b      	b.n	8005e72 <HAL_FLASH_Program+0x96>
 8005dfa:	4b20      	ldr	r3, [pc, #128]	; (8005e7c <HAL_FLASH_Program+0xa0>)
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e04:	f000 f870 	bl	8005ee8 <FLASH_WaitForLastOperation>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d12b      	bne.n	8005e6a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d105      	bne.n	8005e24 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005e18:	783b      	ldrb	r3, [r7, #0]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	68b8      	ldr	r0, [r7, #8]
 8005e1e:	f000 f91b 	bl	8006058 <FLASH_Program_Byte>
 8005e22:	e016      	b.n	8005e52 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d105      	bne.n	8005e36 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005e2a:	883b      	ldrh	r3, [r7, #0]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	68b8      	ldr	r0, [r7, #8]
 8005e30:	f000 f8ee 	bl	8006010 <FLASH_Program_HalfWord>
 8005e34:	e00d      	b.n	8005e52 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d105      	bne.n	8005e48 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	68b8      	ldr	r0, [r7, #8]
 8005e42:	f000 f8c3 	bl	8005fcc <FLASH_Program_Word>
 8005e46:	e004      	b.n	8005e52 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e4c:	68b8      	ldr	r0, [r7, #8]
 8005e4e:	f000 f88b 	bl	8005f68 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e52:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e56:	f000 f847 	bl	8005ee8 <FLASH_WaitForLastOperation>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005e5e:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <HAL_FLASH_Program+0xa4>)
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	4a07      	ldr	r2, [pc, #28]	; (8005e80 <HAL_FLASH_Program+0xa4>)
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e6a:	4b04      	ldr	r3, [pc, #16]	; (8005e7c <HAL_FLASH_Program+0xa0>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	200004e0 	.word	0x200004e0
 8005e80:	40023c00 	.word	0x40023c00

08005e84 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005e8e:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <HAL_FLASH_Unlock+0x38>)
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	da0b      	bge.n	8005eae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005e96:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <HAL_FLASH_Unlock+0x38>)
 8005e98:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <HAL_FLASH_Unlock+0x3c>)
 8005e9a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005e9c:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <HAL_FLASH_Unlock+0x38>)
 8005e9e:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <HAL_FLASH_Unlock+0x40>)
 8005ea0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005ea2:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <HAL_FLASH_Unlock+0x38>)
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da01      	bge.n	8005eae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005eae:	79fb      	ldrb	r3, [r7, #7]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	40023c00 	.word	0x40023c00
 8005ec0:	45670123 	.word	0x45670123
 8005ec4:	cdef89ab 	.word	0xcdef89ab

08005ec8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <HAL_FLASH_Lock+0x1c>)
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	4a04      	ldr	r2, [pc, #16]	; (8005ee4 <HAL_FLASH_Lock+0x1c>)
 8005ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ed6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	40023c00 	.word	0x40023c00

08005ee8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ef4:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <FLASH_WaitForLastOperation+0x78>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005efa:	f7ff f845 	bl	8004f88 <HAL_GetTick>
 8005efe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005f00:	e010      	b.n	8005f24 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d00c      	beq.n	8005f24 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d007      	beq.n	8005f20 <FLASH_WaitForLastOperation+0x38>
 8005f10:	f7ff f83a 	bl	8004f88 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d201      	bcs.n	8005f24 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e019      	b.n	8005f58 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <FLASH_WaitForLastOperation+0x7c>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e8      	bne.n	8005f02 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005f30:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <FLASH_WaitForLastOperation+0x7c>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005f3c:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <FLASH_WaitForLastOperation+0x7c>)
 8005f3e:	2201      	movs	r2, #1
 8005f40:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005f42:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <FLASH_WaitForLastOperation+0x7c>)
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005f4e:	f000 f8a5 	bl	800609c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
  
}  
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	200004e0 	.word	0x200004e0
 8005f64:	40023c00 	.word	0x40023c00

08005f68 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005f74:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <FLASH_Program_DoubleWord+0x60>)
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <FLASH_Program_DoubleWord+0x60>)
 8005f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005f80:	4b11      	ldr	r3, [pc, #68]	; (8005fc8 <FLASH_Program_DoubleWord+0x60>)
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	4a10      	ldr	r2, [pc, #64]	; (8005fc8 <FLASH_Program_DoubleWord+0x60>)
 8005f86:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <FLASH_Program_DoubleWord+0x60>)
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	4a0d      	ldr	r2, [pc, #52]	; (8005fc8 <FLASH_Program_DoubleWord+0x60>)
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005f9e:	f3bf 8f6f 	isb	sy
}
 8005fa2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	f04f 0300 	mov.w	r3, #0
 8005fb0:	000a      	movs	r2, r1
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	68f9      	ldr	r1, [r7, #12]
 8005fb6:	3104      	adds	r1, #4
 8005fb8:	4613      	mov	r3, r2
 8005fba:	600b      	str	r3, [r1, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	40023c00 	.word	0x40023c00

08005fcc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	; (800600c <FLASH_Program_Word+0x40>)
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	4a0c      	ldr	r2, [pc, #48]	; (800600c <FLASH_Program_Word+0x40>)
 8005fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	; (800600c <FLASH_Program_Word+0x40>)
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	4a09      	ldr	r2, [pc, #36]	; (800600c <FLASH_Program_Word+0x40>)
 8005fe8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <FLASH_Program_Word+0x40>)
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	4a06      	ldr	r2, [pc, #24]	; (800600c <FLASH_Program_Word+0x40>)
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	601a      	str	r2, [r3, #0]
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	40023c00 	.word	0x40023c00

08006010 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800601c:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <FLASH_Program_HalfWord+0x44>)
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	4a0c      	ldr	r2, [pc, #48]	; (8006054 <FLASH_Program_HalfWord+0x44>)
 8006022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006026:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <FLASH_Program_HalfWord+0x44>)
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	4a09      	ldr	r2, [pc, #36]	; (8006054 <FLASH_Program_HalfWord+0x44>)
 800602e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006032:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006034:	4b07      	ldr	r3, [pc, #28]	; (8006054 <FLASH_Program_HalfWord+0x44>)
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	4a06      	ldr	r2, [pc, #24]	; (8006054 <FLASH_Program_HalfWord+0x44>)
 800603a:	f043 0301 	orr.w	r3, r3, #1
 800603e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	887a      	ldrh	r2, [r7, #2]
 8006044:	801a      	strh	r2, [r3, #0]
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40023c00 	.word	0x40023c00

08006058 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006064:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <FLASH_Program_Byte+0x40>)
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	4a0b      	ldr	r2, [pc, #44]	; (8006098 <FLASH_Program_Byte+0x40>)
 800606a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006070:	4b09      	ldr	r3, [pc, #36]	; (8006098 <FLASH_Program_Byte+0x40>)
 8006072:	4a09      	ldr	r2, [pc, #36]	; (8006098 <FLASH_Program_Byte+0x40>)
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <FLASH_Program_Byte+0x40>)
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	4a06      	ldr	r2, [pc, #24]	; (8006098 <FLASH_Program_Byte+0x40>)
 800607e:	f043 0301 	orr.w	r3, r3, #1
 8006082:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	78fa      	ldrb	r2, [r7, #3]
 8006088:	701a      	strb	r2, [r3, #0]
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	40023c00 	.word	0x40023c00

0800609c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80060a0:	4b2f      	ldr	r3, [pc, #188]	; (8006160 <FLASH_SetErrorCode+0xc4>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d008      	beq.n	80060be <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80060ac:	4b2d      	ldr	r3, [pc, #180]	; (8006164 <FLASH_SetErrorCode+0xc8>)
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	f043 0310 	orr.w	r3, r3, #16
 80060b4:	4a2b      	ldr	r2, [pc, #172]	; (8006164 <FLASH_SetErrorCode+0xc8>)
 80060b6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80060b8:	4b29      	ldr	r3, [pc, #164]	; (8006160 <FLASH_SetErrorCode+0xc4>)
 80060ba:	2210      	movs	r2, #16
 80060bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80060be:	4b28      	ldr	r3, [pc, #160]	; (8006160 <FLASH_SetErrorCode+0xc4>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d008      	beq.n	80060dc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80060ca:	4b26      	ldr	r3, [pc, #152]	; (8006164 <FLASH_SetErrorCode+0xc8>)
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	f043 0308 	orr.w	r3, r3, #8
 80060d2:	4a24      	ldr	r2, [pc, #144]	; (8006164 <FLASH_SetErrorCode+0xc8>)
 80060d4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80060d6:	4b22      	ldr	r3, [pc, #136]	; (8006160 <FLASH_SetErrorCode+0xc4>)
 80060d8:	2220      	movs	r2, #32
 80060da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80060dc:	4b20      	ldr	r3, [pc, #128]	; (8006160 <FLASH_SetErrorCode+0xc4>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d008      	beq.n	80060fa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80060e8:	4b1e      	ldr	r3, [pc, #120]	; (8006164 <FLASH_SetErrorCode+0xc8>)
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	f043 0304 	orr.w	r3, r3, #4
 80060f0:	4a1c      	ldr	r2, [pc, #112]	; (8006164 <FLASH_SetErrorCode+0xc8>)
 80060f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80060f4:	4b1a      	ldr	r3, [pc, #104]	; (8006160 <FLASH_SetErrorCode+0xc4>)
 80060f6:	2240      	movs	r2, #64	; 0x40
 80060f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80060fa:	4b19      	ldr	r3, [pc, #100]	; (8006160 <FLASH_SetErrorCode+0xc4>)
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006106:	4b17      	ldr	r3, [pc, #92]	; (8006164 <FLASH_SetErrorCode+0xc8>)
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f043 0302 	orr.w	r3, r3, #2
 800610e:	4a15      	ldr	r2, [pc, #84]	; (8006164 <FLASH_SetErrorCode+0xc8>)
 8006110:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006112:	4b13      	ldr	r3, [pc, #76]	; (8006160 <FLASH_SetErrorCode+0xc4>)
 8006114:	2280      	movs	r2, #128	; 0x80
 8006116:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006118:	4b11      	ldr	r3, [pc, #68]	; (8006160 <FLASH_SetErrorCode+0xc4>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006120:	2b00      	cmp	r3, #0
 8006122:	d009      	beq.n	8006138 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006124:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <FLASH_SetErrorCode+0xc8>)
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	4a0d      	ldr	r2, [pc, #52]	; (8006164 <FLASH_SetErrorCode+0xc8>)
 800612e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <FLASH_SetErrorCode+0xc4>)
 8006132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006136:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006138:	4b09      	ldr	r3, [pc, #36]	; (8006160 <FLASH_SetErrorCode+0xc4>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d008      	beq.n	8006156 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006144:	4b07      	ldr	r3, [pc, #28]	; (8006164 <FLASH_SetErrorCode+0xc8>)
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	f043 0320 	orr.w	r3, r3, #32
 800614c:	4a05      	ldr	r2, [pc, #20]	; (8006164 <FLASH_SetErrorCode+0xc8>)
 800614e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006150:	4b03      	ldr	r3, [pc, #12]	; (8006160 <FLASH_SetErrorCode+0xc4>)
 8006152:	2202      	movs	r2, #2
 8006154:	60da      	str	r2, [r3, #12]
  }
}
 8006156:	bf00      	nop
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	40023c00 	.word	0x40023c00
 8006164:	200004e0 	.word	0x200004e0

08006168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006168:	b480      	push	{r7}
 800616a:	b089      	sub	sp, #36	; 0x24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006176:	2300      	movs	r3, #0
 8006178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800617a:	2300      	movs	r3, #0
 800617c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	e159      	b.n	8006438 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006184:	2201      	movs	r2, #1
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4013      	ands	r3, r2
 8006196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	429a      	cmp	r2, r3
 800619e:	f040 8148 	bne.w	8006432 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d005      	beq.n	80061ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d130      	bne.n	800621c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	2203      	movs	r2, #3
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	43db      	mvns	r3, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4013      	ands	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061f0:	2201      	movs	r2, #1
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	43db      	mvns	r3, r3
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	4013      	ands	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	091b      	lsrs	r3, r3, #4
 8006206:	f003 0201 	and.w	r2, r3, #1
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4313      	orrs	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b03      	cmp	r3, #3
 8006226:	d017      	beq.n	8006258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	2203      	movs	r2, #3
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	43db      	mvns	r3, r3
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4013      	ands	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	4313      	orrs	r3, r2
 8006250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f003 0303 	and.w	r3, r3, #3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d123      	bne.n	80062ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	08da      	lsrs	r2, r3, #3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3208      	adds	r2, #8
 800626c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	220f      	movs	r2, #15
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	43db      	mvns	r3, r3
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4013      	ands	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	4313      	orrs	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	08da      	lsrs	r2, r3, #3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3208      	adds	r2, #8
 80062a6:	69b9      	ldr	r1, [r7, #24]
 80062a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	2203      	movs	r2, #3
 80062b8:	fa02 f303 	lsl.w	r3, r2, r3
 80062bc:	43db      	mvns	r3, r3
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	4013      	ands	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f003 0203 	and.w	r2, r3, #3
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80a2 	beq.w	8006432 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	4b57      	ldr	r3, [pc, #348]	; (8006450 <HAL_GPIO_Init+0x2e8>)
 80062f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f6:	4a56      	ldr	r2, [pc, #344]	; (8006450 <HAL_GPIO_Init+0x2e8>)
 80062f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062fc:	6453      	str	r3, [r2, #68]	; 0x44
 80062fe:	4b54      	ldr	r3, [pc, #336]	; (8006450 <HAL_GPIO_Init+0x2e8>)
 8006300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800630a:	4a52      	ldr	r2, [pc, #328]	; (8006454 <HAL_GPIO_Init+0x2ec>)
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	089b      	lsrs	r3, r3, #2
 8006310:	3302      	adds	r3, #2
 8006312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	220f      	movs	r2, #15
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	43db      	mvns	r3, r3
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	4013      	ands	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a49      	ldr	r2, [pc, #292]	; (8006458 <HAL_GPIO_Init+0x2f0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d019      	beq.n	800636a <HAL_GPIO_Init+0x202>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a48      	ldr	r2, [pc, #288]	; (800645c <HAL_GPIO_Init+0x2f4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <HAL_GPIO_Init+0x1fe>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a47      	ldr	r2, [pc, #284]	; (8006460 <HAL_GPIO_Init+0x2f8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00d      	beq.n	8006362 <HAL_GPIO_Init+0x1fa>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a46      	ldr	r2, [pc, #280]	; (8006464 <HAL_GPIO_Init+0x2fc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <HAL_GPIO_Init+0x1f6>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a45      	ldr	r2, [pc, #276]	; (8006468 <HAL_GPIO_Init+0x300>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d101      	bne.n	800635a <HAL_GPIO_Init+0x1f2>
 8006356:	2304      	movs	r3, #4
 8006358:	e008      	b.n	800636c <HAL_GPIO_Init+0x204>
 800635a:	2307      	movs	r3, #7
 800635c:	e006      	b.n	800636c <HAL_GPIO_Init+0x204>
 800635e:	2303      	movs	r3, #3
 8006360:	e004      	b.n	800636c <HAL_GPIO_Init+0x204>
 8006362:	2302      	movs	r3, #2
 8006364:	e002      	b.n	800636c <HAL_GPIO_Init+0x204>
 8006366:	2301      	movs	r3, #1
 8006368:	e000      	b.n	800636c <HAL_GPIO_Init+0x204>
 800636a:	2300      	movs	r3, #0
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	f002 0203 	and.w	r2, r2, #3
 8006372:	0092      	lsls	r2, r2, #2
 8006374:	4093      	lsls	r3, r2
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	4313      	orrs	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800637c:	4935      	ldr	r1, [pc, #212]	; (8006454 <HAL_GPIO_Init+0x2ec>)
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	089b      	lsrs	r3, r3, #2
 8006382:	3302      	adds	r3, #2
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800638a:	4b38      	ldr	r3, [pc, #224]	; (800646c <HAL_GPIO_Init+0x304>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	43db      	mvns	r3, r3
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4013      	ands	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063ae:	4a2f      	ldr	r2, [pc, #188]	; (800646c <HAL_GPIO_Init+0x304>)
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063b4:	4b2d      	ldr	r3, [pc, #180]	; (800646c <HAL_GPIO_Init+0x304>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	43db      	mvns	r3, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4013      	ands	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063d8:	4a24      	ldr	r2, [pc, #144]	; (800646c <HAL_GPIO_Init+0x304>)
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063de:	4b23      	ldr	r3, [pc, #140]	; (800646c <HAL_GPIO_Init+0x304>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	43db      	mvns	r3, r3
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	4013      	ands	r3, r2
 80063ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006402:	4a1a      	ldr	r2, [pc, #104]	; (800646c <HAL_GPIO_Init+0x304>)
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006408:	4b18      	ldr	r3, [pc, #96]	; (800646c <HAL_GPIO_Init+0x304>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	43db      	mvns	r3, r3
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	4013      	ands	r3, r2
 8006416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800642c:	4a0f      	ldr	r2, [pc, #60]	; (800646c <HAL_GPIO_Init+0x304>)
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	3301      	adds	r3, #1
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b0f      	cmp	r3, #15
 800643c:	f67f aea2 	bls.w	8006184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	3724      	adds	r7, #36	; 0x24
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40023800 	.word	0x40023800
 8006454:	40013800 	.word	0x40013800
 8006458:	40020000 	.word	0x40020000
 800645c:	40020400 	.word	0x40020400
 8006460:	40020800 	.word	0x40020800
 8006464:	40020c00 	.word	0x40020c00
 8006468:	40021000 	.word	0x40021000
 800646c:	40013c00 	.word	0x40013c00

08006470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	887b      	ldrh	r3, [r7, #2]
 8006482:	4013      	ands	r3, r2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006488:	2301      	movs	r3, #1
 800648a:	73fb      	strb	r3, [r7, #15]
 800648c:	e001      	b.n	8006492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006492:	7bfb      	ldrb	r3, [r7, #15]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	807b      	strh	r3, [r7, #2]
 80064ac:	4613      	mov	r3, r2
 80064ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064b0:	787b      	ldrb	r3, [r7, #1]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064b6:	887a      	ldrh	r2, [r7, #2]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064bc:	e003      	b.n	80064c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064be:	887b      	ldrh	r3, [r7, #2]
 80064c0:	041a      	lsls	r2, r3, #16
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	619a      	str	r2, [r3, #24]
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
	...

080064d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e267      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d075      	beq.n	80065de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064f2:	4b88      	ldr	r3, [pc, #544]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d00c      	beq.n	8006518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064fe:	4b85      	ldr	r3, [pc, #532]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006506:	2b08      	cmp	r3, #8
 8006508:	d112      	bne.n	8006530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800650a:	4b82      	ldr	r3, [pc, #520]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006516:	d10b      	bne.n	8006530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006518:	4b7e      	ldr	r3, [pc, #504]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d05b      	beq.n	80065dc <HAL_RCC_OscConfig+0x108>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d157      	bne.n	80065dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e242      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006538:	d106      	bne.n	8006548 <HAL_RCC_OscConfig+0x74>
 800653a:	4b76      	ldr	r3, [pc, #472]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a75      	ldr	r2, [pc, #468]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e01d      	b.n	8006584 <HAL_RCC_OscConfig+0xb0>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006550:	d10c      	bne.n	800656c <HAL_RCC_OscConfig+0x98>
 8006552:	4b70      	ldr	r3, [pc, #448]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a6f      	ldr	r2, [pc, #444]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	4b6d      	ldr	r3, [pc, #436]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a6c      	ldr	r2, [pc, #432]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e00b      	b.n	8006584 <HAL_RCC_OscConfig+0xb0>
 800656c:	4b69      	ldr	r3, [pc, #420]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a68      	ldr	r2, [pc, #416]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	4b66      	ldr	r3, [pc, #408]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a65      	ldr	r2, [pc, #404]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 800657e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d013      	beq.n	80065b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658c:	f7fe fcfc 	bl	8004f88 <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006594:	f7fe fcf8 	bl	8004f88 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b64      	cmp	r3, #100	; 0x64
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e207      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065a6:	4b5b      	ldr	r3, [pc, #364]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0f0      	beq.n	8006594 <HAL_RCC_OscConfig+0xc0>
 80065b2:	e014      	b.n	80065de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b4:	f7fe fce8 	bl	8004f88 <HAL_GetTick>
 80065b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065bc:	f7fe fce4 	bl	8004f88 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b64      	cmp	r3, #100	; 0x64
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e1f3      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ce:	4b51      	ldr	r3, [pc, #324]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1f0      	bne.n	80065bc <HAL_RCC_OscConfig+0xe8>
 80065da:	e000      	b.n	80065de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d063      	beq.n	80066b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065ea:	4b4a      	ldr	r3, [pc, #296]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f003 030c 	and.w	r3, r3, #12
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00b      	beq.n	800660e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065f6:	4b47      	ldr	r3, [pc, #284]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065fe:	2b08      	cmp	r3, #8
 8006600:	d11c      	bne.n	800663c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006602:	4b44      	ldr	r3, [pc, #272]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d116      	bne.n	800663c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800660e:	4b41      	ldr	r3, [pc, #260]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <HAL_RCC_OscConfig+0x152>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d001      	beq.n	8006626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e1c7      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006626:	4b3b      	ldr	r3, [pc, #236]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	00db      	lsls	r3, r3, #3
 8006634:	4937      	ldr	r1, [pc, #220]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006636:	4313      	orrs	r3, r2
 8006638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800663a:	e03a      	b.n	80066b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d020      	beq.n	8006686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006644:	4b34      	ldr	r3, [pc, #208]	; (8006718 <HAL_RCC_OscConfig+0x244>)
 8006646:	2201      	movs	r2, #1
 8006648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664a:	f7fe fc9d 	bl	8004f88 <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006652:	f7fe fc99 	bl	8004f88 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e1a8      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006664:	4b2b      	ldr	r3, [pc, #172]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0f0      	beq.n	8006652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006670:	4b28      	ldr	r3, [pc, #160]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	00db      	lsls	r3, r3, #3
 800667e:	4925      	ldr	r1, [pc, #148]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 8006680:	4313      	orrs	r3, r2
 8006682:	600b      	str	r3, [r1, #0]
 8006684:	e015      	b.n	80066b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006686:	4b24      	ldr	r3, [pc, #144]	; (8006718 <HAL_RCC_OscConfig+0x244>)
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668c:	f7fe fc7c 	bl	8004f88 <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006694:	f7fe fc78 	bl	8004f88 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e187      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066a6:	4b1b      	ldr	r3, [pc, #108]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f0      	bne.n	8006694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d036      	beq.n	800672c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d016      	beq.n	80066f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066c6:	4b15      	ldr	r3, [pc, #84]	; (800671c <HAL_RCC_OscConfig+0x248>)
 80066c8:	2201      	movs	r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066cc:	f7fe fc5c 	bl	8004f88 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066d4:	f7fe fc58 	bl	8004f88 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e167      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <HAL_RCC_OscConfig+0x240>)
 80066e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0x200>
 80066f2:	e01b      	b.n	800672c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <HAL_RCC_OscConfig+0x248>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066fa:	f7fe fc45 	bl	8004f88 <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006700:	e00e      	b.n	8006720 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006702:	f7fe fc41 	bl	8004f88 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d907      	bls.n	8006720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e150      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
 8006714:	40023800 	.word	0x40023800
 8006718:	42470000 	.word	0x42470000
 800671c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006720:	4b88      	ldr	r3, [pc, #544]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 8006722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1ea      	bne.n	8006702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8097 	beq.w	8006868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800673a:	2300      	movs	r3, #0
 800673c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800673e:	4b81      	ldr	r3, [pc, #516]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10f      	bne.n	800676a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800674a:	2300      	movs	r3, #0
 800674c:	60bb      	str	r3, [r7, #8]
 800674e:	4b7d      	ldr	r3, [pc, #500]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	4a7c      	ldr	r2, [pc, #496]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 8006754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006758:	6413      	str	r3, [r2, #64]	; 0x40
 800675a:	4b7a      	ldr	r3, [pc, #488]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006766:	2301      	movs	r3, #1
 8006768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800676a:	4b77      	ldr	r3, [pc, #476]	; (8006948 <HAL_RCC_OscConfig+0x474>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006772:	2b00      	cmp	r3, #0
 8006774:	d118      	bne.n	80067a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006776:	4b74      	ldr	r3, [pc, #464]	; (8006948 <HAL_RCC_OscConfig+0x474>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a73      	ldr	r2, [pc, #460]	; (8006948 <HAL_RCC_OscConfig+0x474>)
 800677c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006782:	f7fe fc01 	bl	8004f88 <HAL_GetTick>
 8006786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006788:	e008      	b.n	800679c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800678a:	f7fe fbfd 	bl	8004f88 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e10c      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679c:	4b6a      	ldr	r3, [pc, #424]	; (8006948 <HAL_RCC_OscConfig+0x474>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0f0      	beq.n	800678a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d106      	bne.n	80067be <HAL_RCC_OscConfig+0x2ea>
 80067b0:	4b64      	ldr	r3, [pc, #400]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80067b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b4:	4a63      	ldr	r2, [pc, #396]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	6713      	str	r3, [r2, #112]	; 0x70
 80067bc:	e01c      	b.n	80067f8 <HAL_RCC_OscConfig+0x324>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	2b05      	cmp	r3, #5
 80067c4:	d10c      	bne.n	80067e0 <HAL_RCC_OscConfig+0x30c>
 80067c6:	4b5f      	ldr	r3, [pc, #380]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80067c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ca:	4a5e      	ldr	r2, [pc, #376]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80067cc:	f043 0304 	orr.w	r3, r3, #4
 80067d0:	6713      	str	r3, [r2, #112]	; 0x70
 80067d2:	4b5c      	ldr	r3, [pc, #368]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	4a5b      	ldr	r2, [pc, #364]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80067d8:	f043 0301 	orr.w	r3, r3, #1
 80067dc:	6713      	str	r3, [r2, #112]	; 0x70
 80067de:	e00b      	b.n	80067f8 <HAL_RCC_OscConfig+0x324>
 80067e0:	4b58      	ldr	r3, [pc, #352]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	4a57      	ldr	r2, [pc, #348]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80067e6:	f023 0301 	bic.w	r3, r3, #1
 80067ea:	6713      	str	r3, [r2, #112]	; 0x70
 80067ec:	4b55      	ldr	r3, [pc, #340]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f0:	4a54      	ldr	r2, [pc, #336]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80067f2:	f023 0304 	bic.w	r3, r3, #4
 80067f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d015      	beq.n	800682c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006800:	f7fe fbc2 	bl	8004f88 <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006806:	e00a      	b.n	800681e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006808:	f7fe fbbe 	bl	8004f88 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	f241 3288 	movw	r2, #5000	; 0x1388
 8006816:	4293      	cmp	r3, r2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e0cb      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681e:	4b49      	ldr	r3, [pc, #292]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 8006820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0ee      	beq.n	8006808 <HAL_RCC_OscConfig+0x334>
 800682a:	e014      	b.n	8006856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800682c:	f7fe fbac 	bl	8004f88 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006832:	e00a      	b.n	800684a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006834:	f7fe fba8 	bl	8004f88 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e0b5      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800684a:	4b3e      	ldr	r3, [pc, #248]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1ee      	bne.n	8006834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006856:	7dfb      	ldrb	r3, [r7, #23]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d105      	bne.n	8006868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800685c:	4b39      	ldr	r3, [pc, #228]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 800685e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006860:	4a38      	ldr	r2, [pc, #224]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 8006862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80a1 	beq.w	80069b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006872:	4b34      	ldr	r3, [pc, #208]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 030c 	and.w	r3, r3, #12
 800687a:	2b08      	cmp	r3, #8
 800687c:	d05c      	beq.n	8006938 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d141      	bne.n	800690a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006886:	4b31      	ldr	r3, [pc, #196]	; (800694c <HAL_RCC_OscConfig+0x478>)
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688c:	f7fe fb7c 	bl	8004f88 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006894:	f7fe fb78 	bl	8004f88 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e087      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068a6:	4b27      	ldr	r3, [pc, #156]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69da      	ldr	r2, [r3, #28]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	019b      	lsls	r3, r3, #6
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	3b01      	subs	r3, #1
 80068cc:	041b      	lsls	r3, r3, #16
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	061b      	lsls	r3, r3, #24
 80068d6:	491b      	ldr	r1, [pc, #108]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068dc:	4b1b      	ldr	r3, [pc, #108]	; (800694c <HAL_RCC_OscConfig+0x478>)
 80068de:	2201      	movs	r2, #1
 80068e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e2:	f7fe fb51 	bl	8004f88 <HAL_GetTick>
 80068e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068e8:	e008      	b.n	80068fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068ea:	f7fe fb4d 	bl	8004f88 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d901      	bls.n	80068fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e05c      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068fc:	4b11      	ldr	r3, [pc, #68]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0f0      	beq.n	80068ea <HAL_RCC_OscConfig+0x416>
 8006908:	e054      	b.n	80069b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800690a:	4b10      	ldr	r3, [pc, #64]	; (800694c <HAL_RCC_OscConfig+0x478>)
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006910:	f7fe fb3a 	bl	8004f88 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006918:	f7fe fb36 	bl	8004f88 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e045      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800692a:	4b06      	ldr	r3, [pc, #24]	; (8006944 <HAL_RCC_OscConfig+0x470>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1f0      	bne.n	8006918 <HAL_RCC_OscConfig+0x444>
 8006936:	e03d      	b.n	80069b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d107      	bne.n	8006950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e038      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
 8006944:	40023800 	.word	0x40023800
 8006948:	40007000 	.word	0x40007000
 800694c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006950:	4b1b      	ldr	r3, [pc, #108]	; (80069c0 <HAL_RCC_OscConfig+0x4ec>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d028      	beq.n	80069b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006968:	429a      	cmp	r2, r3
 800696a:	d121      	bne.n	80069b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006976:	429a      	cmp	r2, r3
 8006978:	d11a      	bne.n	80069b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006980:	4013      	ands	r3, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006988:	4293      	cmp	r3, r2
 800698a:	d111      	bne.n	80069b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	085b      	lsrs	r3, r3, #1
 8006998:	3b01      	subs	r3, #1
 800699a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800699c:	429a      	cmp	r2, r3
 800699e:	d107      	bne.n	80069b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d001      	beq.n	80069b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	40023800 	.word	0x40023800

080069c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e0cc      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069d8:	4b68      	ldr	r3, [pc, #416]	; (8006b7c <HAL_RCC_ClockConfig+0x1b8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d90c      	bls.n	8006a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e6:	4b65      	ldr	r3, [pc, #404]	; (8006b7c <HAL_RCC_ClockConfig+0x1b8>)
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ee:	4b63      	ldr	r3, [pc, #396]	; (8006b7c <HAL_RCC_ClockConfig+0x1b8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d001      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0b8      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d020      	beq.n	8006a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a18:	4b59      	ldr	r3, [pc, #356]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	4a58      	ldr	r2, [pc, #352]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a30:	4b53      	ldr	r3, [pc, #332]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	4a52      	ldr	r2, [pc, #328]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a3c:	4b50      	ldr	r3, [pc, #320]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	494d      	ldr	r1, [pc, #308]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d044      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d107      	bne.n	8006a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a62:	4b47      	ldr	r3, [pc, #284]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d119      	bne.n	8006aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e07f      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d003      	beq.n	8006a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d107      	bne.n	8006a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a82:	4b3f      	ldr	r3, [pc, #252]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d109      	bne.n	8006aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e06f      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a92:	4b3b      	ldr	r3, [pc, #236]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e067      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006aa2:	4b37      	ldr	r3, [pc, #220]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f023 0203 	bic.w	r2, r3, #3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	4934      	ldr	r1, [pc, #208]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ab4:	f7fe fa68 	bl	8004f88 <HAL_GetTick>
 8006ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aba:	e00a      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006abc:	f7fe fa64 	bl	8004f88 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e04f      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ad2:	4b2b      	ldr	r3, [pc, #172]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 020c 	and.w	r2, r3, #12
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d1eb      	bne.n	8006abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ae4:	4b25      	ldr	r3, [pc, #148]	; (8006b7c <HAL_RCC_ClockConfig+0x1b8>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d20c      	bcs.n	8006b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af2:	4b22      	ldr	r3, [pc, #136]	; (8006b7c <HAL_RCC_ClockConfig+0x1b8>)
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006afa:	4b20      	ldr	r3, [pc, #128]	; (8006b7c <HAL_RCC_ClockConfig+0x1b8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d001      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e032      	b.n	8006b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d008      	beq.n	8006b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b18:	4b19      	ldr	r3, [pc, #100]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	4916      	ldr	r1, [pc, #88]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b36:	4b12      	ldr	r3, [pc, #72]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	490e      	ldr	r1, [pc, #56]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b4a:	f000 f821 	bl	8006b90 <HAL_RCC_GetSysClockFreq>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <HAL_RCC_ClockConfig+0x1bc>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	f003 030f 	and.w	r3, r3, #15
 8006b5a:	490a      	ldr	r1, [pc, #40]	; (8006b84 <HAL_RCC_ClockConfig+0x1c0>)
 8006b5c:	5ccb      	ldrb	r3, [r1, r3]
 8006b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b62:	4a09      	ldr	r2, [pc, #36]	; (8006b88 <HAL_RCC_ClockConfig+0x1c4>)
 8006b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <HAL_RCC_ClockConfig+0x1c8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe f9c8 	bl	8004f00 <HAL_InitTick>

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40023c00 	.word	0x40023c00
 8006b80:	40023800 	.word	0x40023800
 8006b84:	08015674 	.word	0x08015674
 8006b88:	20000030 	.word	0x20000030
 8006b8c:	20000054 	.word	0x20000054

08006b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b94:	b094      	sub	sp, #80	; 0x50
 8006b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ba8:	4b79      	ldr	r3, [pc, #484]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f003 030c 	and.w	r3, r3, #12
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d00d      	beq.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	f200 80e1 	bhi.w	8006d7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d003      	beq.n	8006bca <HAL_RCC_GetSysClockFreq+0x3a>
 8006bc2:	e0db      	b.n	8006d7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bc4:	4b73      	ldr	r3, [pc, #460]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006bc8:	e0db      	b.n	8006d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bca:	4b73      	ldr	r3, [pc, #460]	; (8006d98 <HAL_RCC_GetSysClockFreq+0x208>)
 8006bcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bce:	e0d8      	b.n	8006d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bd0:	4b6f      	ldr	r3, [pc, #444]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bda:	4b6d      	ldr	r3, [pc, #436]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d063      	beq.n	8006cae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006be6:	4b6a      	ldr	r3, [pc, #424]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	099b      	lsrs	r3, r3, #6
 8006bec:	2200      	movs	r2, #0
 8006bee:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c02:	4622      	mov	r2, r4
 8006c04:	462b      	mov	r3, r5
 8006c06:	f04f 0000 	mov.w	r0, #0
 8006c0a:	f04f 0100 	mov.w	r1, #0
 8006c0e:	0159      	lsls	r1, r3, #5
 8006c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c14:	0150      	lsls	r0, r2, #5
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	1a51      	subs	r1, r2, r1
 8006c1e:	6139      	str	r1, [r7, #16]
 8006c20:	4629      	mov	r1, r5
 8006c22:	eb63 0301 	sbc.w	r3, r3, r1
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c34:	4659      	mov	r1, fp
 8006c36:	018b      	lsls	r3, r1, #6
 8006c38:	4651      	mov	r1, sl
 8006c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c3e:	4651      	mov	r1, sl
 8006c40:	018a      	lsls	r2, r1, #6
 8006c42:	4651      	mov	r1, sl
 8006c44:	ebb2 0801 	subs.w	r8, r2, r1
 8006c48:	4659      	mov	r1, fp
 8006c4a:	eb63 0901 	sbc.w	r9, r3, r1
 8006c4e:	f04f 0200 	mov.w	r2, #0
 8006c52:	f04f 0300 	mov.w	r3, #0
 8006c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c62:	4690      	mov	r8, r2
 8006c64:	4699      	mov	r9, r3
 8006c66:	4623      	mov	r3, r4
 8006c68:	eb18 0303 	adds.w	r3, r8, r3
 8006c6c:	60bb      	str	r3, [r7, #8]
 8006c6e:	462b      	mov	r3, r5
 8006c70:	eb49 0303 	adc.w	r3, r9, r3
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c82:	4629      	mov	r1, r5
 8006c84:	024b      	lsls	r3, r1, #9
 8006c86:	4621      	mov	r1, r4
 8006c88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	024a      	lsls	r2, r1, #9
 8006c90:	4610      	mov	r0, r2
 8006c92:	4619      	mov	r1, r3
 8006c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c96:	2200      	movs	r2, #0
 8006c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ca0:	f7f9 ffda 	bl	8000c58 <__aeabi_uldivmod>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4613      	mov	r3, r2
 8006caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cac:	e058      	b.n	8006d60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cae:	4b38      	ldr	r3, [pc, #224]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	099b      	lsrs	r3, r3, #6
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	4611      	mov	r1, r2
 8006cba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cbe:	623b      	str	r3, [r7, #32]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006cc8:	4642      	mov	r2, r8
 8006cca:	464b      	mov	r3, r9
 8006ccc:	f04f 0000 	mov.w	r0, #0
 8006cd0:	f04f 0100 	mov.w	r1, #0
 8006cd4:	0159      	lsls	r1, r3, #5
 8006cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cda:	0150      	lsls	r0, r2, #5
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4641      	mov	r1, r8
 8006ce2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006cf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006cfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d00:	ebb2 040a 	subs.w	r4, r2, sl
 8006d04:	eb63 050b 	sbc.w	r5, r3, fp
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	00eb      	lsls	r3, r5, #3
 8006d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d16:	00e2      	lsls	r2, r4, #3
 8006d18:	4614      	mov	r4, r2
 8006d1a:	461d      	mov	r5, r3
 8006d1c:	4643      	mov	r3, r8
 8006d1e:	18e3      	adds	r3, r4, r3
 8006d20:	603b      	str	r3, [r7, #0]
 8006d22:	464b      	mov	r3, r9
 8006d24:	eb45 0303 	adc.w	r3, r5, r3
 8006d28:	607b      	str	r3, [r7, #4]
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	f04f 0300 	mov.w	r3, #0
 8006d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d36:	4629      	mov	r1, r5
 8006d38:	028b      	lsls	r3, r1, #10
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d40:	4621      	mov	r1, r4
 8006d42:	028a      	lsls	r2, r1, #10
 8006d44:	4610      	mov	r0, r2
 8006d46:	4619      	mov	r1, r3
 8006d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	61fa      	str	r2, [r7, #28]
 8006d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d54:	f7f9 ff80 	bl	8000c58 <__aeabi_uldivmod>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d60:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	0c1b      	lsrs	r3, r3, #16
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006d70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d7a:	e002      	b.n	8006d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d7c:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3750      	adds	r7, #80	; 0x50
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d8e:	bf00      	nop
 8006d90:	40023800 	.word	0x40023800
 8006d94:	00f42400 	.word	0x00f42400
 8006d98:	007a1200 	.word	0x007a1200

08006d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e07b      	b.n	8006ea6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d108      	bne.n	8006dc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dbe:	d009      	beq.n	8006dd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	61da      	str	r2, [r3, #28]
 8006dc6:	e005      	b.n	8006dd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fd fb38 	bl	8004464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e58:	ea42 0103 	orr.w	r1, r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	0c1b      	lsrs	r3, r3, #16
 8006e72:	f003 0104 	and.w	r1, r3, #4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	f003 0210 	and.w	r2, r3, #16
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69da      	ldr	r2, [r3, #28]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b088      	sub	sp, #32
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	603b      	str	r3, [r7, #0]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_SPI_Transmit+0x22>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e126      	b.n	800711e <HAL_SPI_Transmit+0x270>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ed8:	f7fe f856 	bl	8004f88 <HAL_GetTick>
 8006edc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d002      	beq.n	8006ef4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ef2:	e10b      	b.n	800710c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <HAL_SPI_Transmit+0x52>
 8006efa:	88fb      	ldrh	r3, [r7, #6]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f04:	e102      	b.n	800710c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2203      	movs	r2, #3
 8006f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	88fa      	ldrh	r2, [r7, #6]
 8006f1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	88fa      	ldrh	r2, [r7, #6]
 8006f24:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f4c:	d10f      	bne.n	8006f6e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	d007      	beq.n	8006f8c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f94:	d14b      	bne.n	800702e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <HAL_SPI_Transmit+0xf6>
 8006f9e:	8afb      	ldrh	r3, [r7, #22]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d13e      	bne.n	8007022 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa8:	881a      	ldrh	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	1c9a      	adds	r2, r3, #2
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fc8:	e02b      	b.n	8007022 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d112      	bne.n	8006ffe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	881a      	ldrh	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe8:	1c9a      	adds	r2, r3, #2
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ffc:	e011      	b.n	8007022 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ffe:	f7fd ffc3 	bl	8004f88 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d803      	bhi.n	8007016 <HAL_SPI_Transmit+0x168>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d102      	bne.n	800701c <HAL_SPI_Transmit+0x16e>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d102      	bne.n	8007022 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007020:	e074      	b.n	800710c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007026:	b29b      	uxth	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1ce      	bne.n	8006fca <HAL_SPI_Transmit+0x11c>
 800702c:	e04c      	b.n	80070c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <HAL_SPI_Transmit+0x18e>
 8007036:	8afb      	ldrh	r3, [r7, #22]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d140      	bne.n	80070be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	330c      	adds	r3, #12
 8007046:	7812      	ldrb	r2, [r2, #0]
 8007048:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007062:	e02c      	b.n	80070be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b02      	cmp	r3, #2
 8007070:	d113      	bne.n	800709a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	330c      	adds	r3, #12
 800707c:	7812      	ldrb	r2, [r2, #0]
 800707e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800708e:	b29b      	uxth	r3, r3
 8007090:	3b01      	subs	r3, #1
 8007092:	b29a      	uxth	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	86da      	strh	r2, [r3, #54]	; 0x36
 8007098:	e011      	b.n	80070be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800709a:	f7fd ff75 	bl	8004f88 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d803      	bhi.n	80070b2 <HAL_SPI_Transmit+0x204>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d102      	bne.n	80070b8 <HAL_SPI_Transmit+0x20a>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d102      	bne.n	80070be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070bc:	e026      	b.n	800710c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1cd      	bne.n	8007064 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 fa55 	bl	800757c <SPI_EndRxTxTransaction>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2220      	movs	r2, #32
 80070dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070e6:	2300      	movs	r3, #0
 80070e8:	613b      	str	r3, [r7, #16]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	77fb      	strb	r3, [r7, #31]
 8007108:	e000      	b.n	800710c <HAL_SPI_Transmit+0x25e>
  }

error:
 800710a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800711c:	7ffb      	ldrb	r3, [r7, #31]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b08c      	sub	sp, #48	; 0x30
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007134:	2301      	movs	r3, #1
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_SPI_TransmitReceive+0x26>
 8007148:	2302      	movs	r3, #2
 800714a:	e18a      	b.n	8007462 <HAL_SPI_TransmitReceive+0x33c>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007154:	f7fd ff18 	bl	8004f88 <HAL_GetTick>
 8007158:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800716a:	887b      	ldrh	r3, [r7, #2]
 800716c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800716e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007172:	2b01      	cmp	r3, #1
 8007174:	d00f      	beq.n	8007196 <HAL_SPI_TransmitReceive+0x70>
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800717c:	d107      	bne.n	800718e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d103      	bne.n	800718e <HAL_SPI_TransmitReceive+0x68>
 8007186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800718a:	2b04      	cmp	r3, #4
 800718c:	d003      	beq.n	8007196 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800718e:	2302      	movs	r3, #2
 8007190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007194:	e15b      	b.n	800744e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d005      	beq.n	80071a8 <HAL_SPI_TransmitReceive+0x82>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <HAL_SPI_TransmitReceive+0x82>
 80071a2:	887b      	ldrh	r3, [r7, #2]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d103      	bne.n	80071b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071ae:	e14e      	b.n	800744e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d003      	beq.n	80071c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2205      	movs	r2, #5
 80071c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	887a      	ldrh	r2, [r7, #2]
 80071d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	887a      	ldrh	r2, [r7, #2]
 80071da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	887a      	ldrh	r2, [r7, #2]
 80071e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	887a      	ldrh	r2, [r7, #2]
 80071ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007204:	2b40      	cmp	r3, #64	; 0x40
 8007206:	d007      	beq.n	8007218 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007216:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007220:	d178      	bne.n	8007314 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <HAL_SPI_TransmitReceive+0x10a>
 800722a:	8b7b      	ldrh	r3, [r7, #26]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d166      	bne.n	80072fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	881a      	ldrh	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007240:	1c9a      	adds	r2, r3, #2
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007254:	e053      	b.n	80072fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b02      	cmp	r3, #2
 8007262:	d11b      	bne.n	800729c <HAL_SPI_TransmitReceive+0x176>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d016      	beq.n	800729c <HAL_SPI_TransmitReceive+0x176>
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	2b01      	cmp	r3, #1
 8007272:	d113      	bne.n	800729c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007278:	881a      	ldrh	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	1c9a      	adds	r2, r3, #2
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d119      	bne.n	80072de <HAL_SPI_TransmitReceive+0x1b8>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d014      	beq.n	80072de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	b292      	uxth	r2, r2
 80072c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	1c9a      	adds	r2, r3, #2
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072da:	2301      	movs	r3, #1
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072de:	f7fd fe53 	bl	8004f88 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d807      	bhi.n	80072fe <HAL_SPI_TransmitReceive+0x1d8>
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f4:	d003      	beq.n	80072fe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072fc:	e0a7      	b.n	800744e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007302:	b29b      	uxth	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1a6      	bne.n	8007256 <HAL_SPI_TransmitReceive+0x130>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1a1      	bne.n	8007256 <HAL_SPI_TransmitReceive+0x130>
 8007312:	e07c      	b.n	800740e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <HAL_SPI_TransmitReceive+0x1fc>
 800731c:	8b7b      	ldrh	r3, [r7, #26]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d16b      	bne.n	80073fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	7812      	ldrb	r2, [r2, #0]
 800732e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007348:	e057      	b.n	80073fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b02      	cmp	r3, #2
 8007356:	d11c      	bne.n	8007392 <HAL_SPI_TransmitReceive+0x26c>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d017      	beq.n	8007392 <HAL_SPI_TransmitReceive+0x26c>
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	2b01      	cmp	r3, #1
 8007366:	d114      	bne.n	8007392 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	330c      	adds	r3, #12
 8007372:	7812      	ldrb	r2, [r2, #0]
 8007374:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b01      	cmp	r3, #1
 800739e:	d119      	bne.n	80073d4 <HAL_SPI_TransmitReceive+0x2ae>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d014      	beq.n	80073d4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	b2d2      	uxtb	r2, r2
 80073b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073d0:	2301      	movs	r3, #1
 80073d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073d4:	f7fd fdd8 	bl	8004f88 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d803      	bhi.n	80073ec <HAL_SPI_TransmitReceive+0x2c6>
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ea:	d102      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x2cc>
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073f8:	e029      	b.n	800744e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1a2      	bne.n	800734a <HAL_SPI_TransmitReceive+0x224>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d19d      	bne.n	800734a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800740e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007410:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 f8b2 	bl	800757c <SPI_EndRxTxTransaction>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d006      	beq.n	800742c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800742a:	e010      	b.n	800744e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10b      	bne.n	800744c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007434:	2300      	movs	r3, #0
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	e000      	b.n	800744e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800744c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800745e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007462:	4618      	mov	r0, r3
 8007464:	3730      	adds	r7, #48	; 0x30
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	4613      	mov	r3, r2
 800747a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800747c:	f7fd fd84 	bl	8004f88 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	4413      	add	r3, r2
 800748a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800748c:	f7fd fd7c 	bl	8004f88 <HAL_GetTick>
 8007490:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007492:	4b39      	ldr	r3, [pc, #228]	; (8007578 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	015b      	lsls	r3, r3, #5
 8007498:	0d1b      	lsrs	r3, r3, #20
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	fb02 f303 	mul.w	r3, r2, r3
 80074a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074a2:	e054      	b.n	800754e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074aa:	d050      	beq.n	800754e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074ac:	f7fd fd6c 	bl	8004f88 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d902      	bls.n	80074c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d13d      	bne.n	800753e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074da:	d111      	bne.n	8007500 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e4:	d004      	beq.n	80074f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ee:	d107      	bne.n	8007500 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007508:	d10f      	bne.n	800752a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007528:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e017      	b.n	800756e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	3b01      	subs	r3, #1
 800754c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	4013      	ands	r3, r2
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	429a      	cmp	r2, r3
 800755c:	bf0c      	ite	eq
 800755e:	2301      	moveq	r3, #1
 8007560:	2300      	movne	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	429a      	cmp	r2, r3
 800756a:	d19b      	bne.n	80074a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000030 	.word	0x20000030

0800757c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af02      	add	r7, sp, #8
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007588:	4b1b      	ldr	r3, [pc, #108]	; (80075f8 <SPI_EndRxTxTransaction+0x7c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1b      	ldr	r2, [pc, #108]	; (80075fc <SPI_EndRxTxTransaction+0x80>)
 800758e:	fba2 2303 	umull	r2, r3, r2, r3
 8007592:	0d5b      	lsrs	r3, r3, #21
 8007594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007598:	fb02 f303 	mul.w	r3, r2, r3
 800759c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075a6:	d112      	bne.n	80075ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2200      	movs	r2, #0
 80075b0:	2180      	movs	r1, #128	; 0x80
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f7ff ff5a 	bl	800746c <SPI_WaitFlagStateUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d016      	beq.n	80075ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c2:	f043 0220 	orr.w	r2, r3, #32
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e00f      	b.n	80075ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00a      	beq.n	80075ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e4:	2b80      	cmp	r3, #128	; 0x80
 80075e6:	d0f2      	beq.n	80075ce <SPI_EndRxTxTransaction+0x52>
 80075e8:	e000      	b.n	80075ec <SPI_EndRxTxTransaction+0x70>
        break;
 80075ea:	bf00      	nop
  }

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000030 	.word	0x20000030
 80075fc:	165e9f81 	.word	0x165e9f81

08007600 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e041      	b.n	8007696 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7fc ff9a 	bl	8004560 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3304      	adds	r3, #4
 800763c:	4619      	mov	r1, r3
 800763e:	4610      	mov	r0, r2
 8007640:	f000 fa2a 	bl	8007a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	f003 0302 	and.w	r3, r3, #2
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d122      	bne.n	80076fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d11b      	bne.n	80076fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f06f 0202 	mvn.w	r2, #2
 80076ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f9bb 	bl	8007a5c <HAL_TIM_IC_CaptureCallback>
 80076e6:	e005      	b.n	80076f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f9ad 	bl	8007a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f9be 	bl	8007a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b04      	cmp	r3, #4
 8007706:	d122      	bne.n	800774e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	2b04      	cmp	r3, #4
 8007714:	d11b      	bne.n	800774e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f06f 0204 	mvn.w	r2, #4
 800771e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f991 	bl	8007a5c <HAL_TIM_IC_CaptureCallback>
 800773a:	e005      	b.n	8007748 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f983 	bl	8007a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f994 	bl	8007a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b08      	cmp	r3, #8
 800775a:	d122      	bne.n	80077a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	2b08      	cmp	r3, #8
 8007768:	d11b      	bne.n	80077a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f06f 0208 	mvn.w	r2, #8
 8007772:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2204      	movs	r2, #4
 8007778:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	f003 0303 	and.w	r3, r3, #3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f967 	bl	8007a5c <HAL_TIM_IC_CaptureCallback>
 800778e:	e005      	b.n	800779c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f959 	bl	8007a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f96a 	bl	8007a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b10      	cmp	r3, #16
 80077ae:	d122      	bne.n	80077f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f003 0310 	and.w	r3, r3, #16
 80077ba:	2b10      	cmp	r3, #16
 80077bc:	d11b      	bne.n	80077f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f06f 0210 	mvn.w	r2, #16
 80077c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2208      	movs	r2, #8
 80077cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f93d 	bl	8007a5c <HAL_TIM_IC_CaptureCallback>
 80077e2:	e005      	b.n	80077f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f92f 	bl	8007a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f940 	bl	8007a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b01      	cmp	r3, #1
 8007802:	d10e      	bne.n	8007822 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b01      	cmp	r3, #1
 8007810:	d107      	bne.n	8007822 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f06f 0201 	mvn.w	r2, #1
 800781a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f909 	bl	8007a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782c:	2b80      	cmp	r3, #128	; 0x80
 800782e:	d10e      	bne.n	800784e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783a:	2b80      	cmp	r3, #128	; 0x80
 800783c:	d107      	bne.n	800784e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fba9 	bl	8007fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007858:	2b40      	cmp	r3, #64	; 0x40
 800785a:	d10e      	bne.n	800787a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d107      	bne.n	800787a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f905 	bl	8007a84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b20      	cmp	r3, #32
 8007886:	d10e      	bne.n	80078a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b20      	cmp	r3, #32
 8007894:	d107      	bne.n	80078a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f06f 0220 	mvn.w	r2, #32
 800789e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fb73 	bl	8007f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d101      	bne.n	80078ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078ca:	2302      	movs	r3, #2
 80078cc:	e0ae      	b.n	8007a2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b0c      	cmp	r3, #12
 80078da:	f200 809f 	bhi.w	8007a1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078de:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	08007919 	.word	0x08007919
 80078e8:	08007a1d 	.word	0x08007a1d
 80078ec:	08007a1d 	.word	0x08007a1d
 80078f0:	08007a1d 	.word	0x08007a1d
 80078f4:	08007959 	.word	0x08007959
 80078f8:	08007a1d 	.word	0x08007a1d
 80078fc:	08007a1d 	.word	0x08007a1d
 8007900:	08007a1d 	.word	0x08007a1d
 8007904:	0800799b 	.word	0x0800799b
 8007908:	08007a1d 	.word	0x08007a1d
 800790c:	08007a1d 	.word	0x08007a1d
 8007910:	08007a1d 	.word	0x08007a1d
 8007914:	080079db 	.word	0x080079db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	4618      	mov	r0, r3
 8007920:	f000 f93a 	bl	8007b98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0208 	orr.w	r2, r2, #8
 8007932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	699a      	ldr	r2, [r3, #24]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0204 	bic.w	r2, r2, #4
 8007942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6999      	ldr	r1, [r3, #24]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	691a      	ldr	r2, [r3, #16]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	619a      	str	r2, [r3, #24]
      break;
 8007956:	e064      	b.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	4618      	mov	r0, r3
 8007960:	f000 f980 	bl	8007c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699a      	ldr	r2, [r3, #24]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699a      	ldr	r2, [r3, #24]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6999      	ldr	r1, [r3, #24]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	021a      	lsls	r2, r3, #8
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	619a      	str	r2, [r3, #24]
      break;
 8007998:	e043      	b.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68b9      	ldr	r1, [r7, #8]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 f9cb 	bl	8007d3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69da      	ldr	r2, [r3, #28]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f042 0208 	orr.w	r2, r2, #8
 80079b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0204 	bic.w	r2, r2, #4
 80079c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69d9      	ldr	r1, [r3, #28]
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	691a      	ldr	r2, [r3, #16]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	61da      	str	r2, [r3, #28]
      break;
 80079d8:	e023      	b.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 fa15 	bl	8007e10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69da      	ldr	r2, [r3, #28]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69da      	ldr	r2, [r3, #28]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69d9      	ldr	r1, [r3, #28]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	021a      	lsls	r2, r3, #8
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	61da      	str	r2, [r3, #28]
      break;
 8007a1a:	e002      	b.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a34      	ldr	r2, [pc, #208]	; (8007b7c <TIM_Base_SetConfig+0xe4>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00f      	beq.n	8007ad0 <TIM_Base_SetConfig+0x38>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab6:	d00b      	beq.n	8007ad0 <TIM_Base_SetConfig+0x38>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a31      	ldr	r2, [pc, #196]	; (8007b80 <TIM_Base_SetConfig+0xe8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d007      	beq.n	8007ad0 <TIM_Base_SetConfig+0x38>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a30      	ldr	r2, [pc, #192]	; (8007b84 <TIM_Base_SetConfig+0xec>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d003      	beq.n	8007ad0 <TIM_Base_SetConfig+0x38>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a2f      	ldr	r2, [pc, #188]	; (8007b88 <TIM_Base_SetConfig+0xf0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d108      	bne.n	8007ae2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a25      	ldr	r2, [pc, #148]	; (8007b7c <TIM_Base_SetConfig+0xe4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d01b      	beq.n	8007b22 <TIM_Base_SetConfig+0x8a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af0:	d017      	beq.n	8007b22 <TIM_Base_SetConfig+0x8a>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a22      	ldr	r2, [pc, #136]	; (8007b80 <TIM_Base_SetConfig+0xe8>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d013      	beq.n	8007b22 <TIM_Base_SetConfig+0x8a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a21      	ldr	r2, [pc, #132]	; (8007b84 <TIM_Base_SetConfig+0xec>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00f      	beq.n	8007b22 <TIM_Base_SetConfig+0x8a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a20      	ldr	r2, [pc, #128]	; (8007b88 <TIM_Base_SetConfig+0xf0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00b      	beq.n	8007b22 <TIM_Base_SetConfig+0x8a>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a1f      	ldr	r2, [pc, #124]	; (8007b8c <TIM_Base_SetConfig+0xf4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d007      	beq.n	8007b22 <TIM_Base_SetConfig+0x8a>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a1e      	ldr	r2, [pc, #120]	; (8007b90 <TIM_Base_SetConfig+0xf8>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d003      	beq.n	8007b22 <TIM_Base_SetConfig+0x8a>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <TIM_Base_SetConfig+0xfc>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d108      	bne.n	8007b34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a08      	ldr	r2, [pc, #32]	; (8007b7c <TIM_Base_SetConfig+0xe4>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d103      	bne.n	8007b68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	691a      	ldr	r2, [r3, #16]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	615a      	str	r2, [r3, #20]
}
 8007b6e:	bf00      	nop
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	40010000 	.word	0x40010000
 8007b80:	40000400 	.word	0x40000400
 8007b84:	40000800 	.word	0x40000800
 8007b88:	40000c00 	.word	0x40000c00
 8007b8c:	40014000 	.word	0x40014000
 8007b90:	40014400 	.word	0x40014400
 8007b94:	40014800 	.word	0x40014800

08007b98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	f023 0201 	bic.w	r2, r3, #1
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 0303 	bic.w	r3, r3, #3
 8007bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f023 0302 	bic.w	r3, r3, #2
 8007be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a1c      	ldr	r2, [pc, #112]	; (8007c60 <TIM_OC1_SetConfig+0xc8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d10c      	bne.n	8007c0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f023 0308 	bic.w	r3, r3, #8
 8007bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f023 0304 	bic.w	r3, r3, #4
 8007c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a13      	ldr	r2, [pc, #76]	; (8007c60 <TIM_OC1_SetConfig+0xc8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d111      	bne.n	8007c3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	621a      	str	r2, [r3, #32]
}
 8007c54:	bf00      	nop
 8007c56:	371c      	adds	r7, #28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	40010000 	.word	0x40010000

08007c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f023 0210 	bic.w	r2, r3, #16
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f023 0320 	bic.w	r3, r3, #32
 8007cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	011b      	lsls	r3, r3, #4
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a1e      	ldr	r2, [pc, #120]	; (8007d38 <TIM_OC2_SetConfig+0xd4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d10d      	bne.n	8007ce0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a15      	ldr	r2, [pc, #84]	; (8007d38 <TIM_OC2_SetConfig+0xd4>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d113      	bne.n	8007d10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	621a      	str	r2, [r3, #32]
}
 8007d2a:	bf00      	nop
 8007d2c:	371c      	adds	r7, #28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	40010000 	.word	0x40010000

08007d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0303 	bic.w	r3, r3, #3
 8007d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a1d      	ldr	r2, [pc, #116]	; (8007e0c <TIM_OC3_SetConfig+0xd0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d10d      	bne.n	8007db6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007da0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	021b      	lsls	r3, r3, #8
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a14      	ldr	r2, [pc, #80]	; (8007e0c <TIM_OC3_SetConfig+0xd0>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d113      	bne.n	8007de6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	621a      	str	r2, [r3, #32]
}
 8007e00:	bf00      	nop
 8007e02:	371c      	adds	r7, #28
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	40010000 	.word	0x40010000

08007e10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	021b      	lsls	r3, r3, #8
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	031b      	lsls	r3, r3, #12
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a10      	ldr	r2, [pc, #64]	; (8007eac <TIM_OC4_SetConfig+0x9c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d109      	bne.n	8007e84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	019b      	lsls	r3, r3, #6
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	621a      	str	r2, [r3, #32]
}
 8007e9e:	bf00      	nop
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	40010000 	.word	0x40010000

08007eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e050      	b.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1c      	ldr	r2, [pc, #112]	; (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d018      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f14:	d013      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00e      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a16      	ldr	r2, [pc, #88]	; (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d009      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d004      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a13      	ldr	r2, [pc, #76]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d10c      	bne.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	40010000 	.word	0x40010000
 8007f7c:	40000400 	.word	0x40000400
 8007f80:	40000800 	.word	0x40000800
 8007f84:	40000c00 	.word	0x40000c00
 8007f88:	40014000 	.word	0x40014000

08007f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <__errno>:
 8007fb4:	4b01      	ldr	r3, [pc, #4]	; (8007fbc <__errno+0x8>)
 8007fb6:	6818      	ldr	r0, [r3, #0]
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	2000005c 	.word	0x2000005c

08007fc0 <__libc_init_array>:
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	4d0d      	ldr	r5, [pc, #52]	; (8007ff8 <__libc_init_array+0x38>)
 8007fc4:	4c0d      	ldr	r4, [pc, #52]	; (8007ffc <__libc_init_array+0x3c>)
 8007fc6:	1b64      	subs	r4, r4, r5
 8007fc8:	10a4      	asrs	r4, r4, #2
 8007fca:	2600      	movs	r6, #0
 8007fcc:	42a6      	cmp	r6, r4
 8007fce:	d109      	bne.n	8007fe4 <__libc_init_array+0x24>
 8007fd0:	4d0b      	ldr	r5, [pc, #44]	; (8008000 <__libc_init_array+0x40>)
 8007fd2:	4c0c      	ldr	r4, [pc, #48]	; (8008004 <__libc_init_array+0x44>)
 8007fd4:	f002 ff04 	bl	800ade0 <_init>
 8007fd8:	1b64      	subs	r4, r4, r5
 8007fda:	10a4      	asrs	r4, r4, #2
 8007fdc:	2600      	movs	r6, #0
 8007fde:	42a6      	cmp	r6, r4
 8007fe0:	d105      	bne.n	8007fee <__libc_init_array+0x2e>
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
 8007fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe8:	4798      	blx	r3
 8007fea:	3601      	adds	r6, #1
 8007fec:	e7ee      	b.n	8007fcc <__libc_init_array+0xc>
 8007fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff2:	4798      	blx	r3
 8007ff4:	3601      	adds	r6, #1
 8007ff6:	e7f2      	b.n	8007fde <__libc_init_array+0x1e>
 8007ff8:	08015a6c 	.word	0x08015a6c
 8007ffc:	08015a6c 	.word	0x08015a6c
 8008000:	08015a6c 	.word	0x08015a6c
 8008004:	08015a70 	.word	0x08015a70

08008008 <memset>:
 8008008:	4402      	add	r2, r0
 800800a:	4603      	mov	r3, r0
 800800c:	4293      	cmp	r3, r2
 800800e:	d100      	bne.n	8008012 <memset+0xa>
 8008010:	4770      	bx	lr
 8008012:	f803 1b01 	strb.w	r1, [r3], #1
 8008016:	e7f9      	b.n	800800c <memset+0x4>

08008018 <__cvt>:
 8008018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	ec55 4b10 	vmov	r4, r5, d0
 8008020:	2d00      	cmp	r5, #0
 8008022:	460e      	mov	r6, r1
 8008024:	4619      	mov	r1, r3
 8008026:	462b      	mov	r3, r5
 8008028:	bfbb      	ittet	lt
 800802a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800802e:	461d      	movlt	r5, r3
 8008030:	2300      	movge	r3, #0
 8008032:	232d      	movlt	r3, #45	; 0x2d
 8008034:	700b      	strb	r3, [r1, #0]
 8008036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008038:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800803c:	4691      	mov	r9, r2
 800803e:	f023 0820 	bic.w	r8, r3, #32
 8008042:	bfbc      	itt	lt
 8008044:	4622      	movlt	r2, r4
 8008046:	4614      	movlt	r4, r2
 8008048:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800804c:	d005      	beq.n	800805a <__cvt+0x42>
 800804e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008052:	d100      	bne.n	8008056 <__cvt+0x3e>
 8008054:	3601      	adds	r6, #1
 8008056:	2102      	movs	r1, #2
 8008058:	e000      	b.n	800805c <__cvt+0x44>
 800805a:	2103      	movs	r1, #3
 800805c:	ab03      	add	r3, sp, #12
 800805e:	9301      	str	r3, [sp, #4]
 8008060:	ab02      	add	r3, sp, #8
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	ec45 4b10 	vmov	d0, r4, r5
 8008068:	4653      	mov	r3, sl
 800806a:	4632      	mov	r2, r6
 800806c:	f000 fcec 	bl	8008a48 <_dtoa_r>
 8008070:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008074:	4607      	mov	r7, r0
 8008076:	d102      	bne.n	800807e <__cvt+0x66>
 8008078:	f019 0f01 	tst.w	r9, #1
 800807c:	d022      	beq.n	80080c4 <__cvt+0xac>
 800807e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008082:	eb07 0906 	add.w	r9, r7, r6
 8008086:	d110      	bne.n	80080aa <__cvt+0x92>
 8008088:	783b      	ldrb	r3, [r7, #0]
 800808a:	2b30      	cmp	r3, #48	; 0x30
 800808c:	d10a      	bne.n	80080a4 <__cvt+0x8c>
 800808e:	2200      	movs	r2, #0
 8008090:	2300      	movs	r3, #0
 8008092:	4620      	mov	r0, r4
 8008094:	4629      	mov	r1, r5
 8008096:	f7f8 fd1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800809a:	b918      	cbnz	r0, 80080a4 <__cvt+0x8c>
 800809c:	f1c6 0601 	rsb	r6, r6, #1
 80080a0:	f8ca 6000 	str.w	r6, [sl]
 80080a4:	f8da 3000 	ldr.w	r3, [sl]
 80080a8:	4499      	add	r9, r3
 80080aa:	2200      	movs	r2, #0
 80080ac:	2300      	movs	r3, #0
 80080ae:	4620      	mov	r0, r4
 80080b0:	4629      	mov	r1, r5
 80080b2:	f7f8 fd11 	bl	8000ad8 <__aeabi_dcmpeq>
 80080b6:	b108      	cbz	r0, 80080bc <__cvt+0xa4>
 80080b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80080bc:	2230      	movs	r2, #48	; 0x30
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	454b      	cmp	r3, r9
 80080c2:	d307      	bcc.n	80080d4 <__cvt+0xbc>
 80080c4:	9b03      	ldr	r3, [sp, #12]
 80080c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080c8:	1bdb      	subs	r3, r3, r7
 80080ca:	4638      	mov	r0, r7
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	b004      	add	sp, #16
 80080d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d4:	1c59      	adds	r1, r3, #1
 80080d6:	9103      	str	r1, [sp, #12]
 80080d8:	701a      	strb	r2, [r3, #0]
 80080da:	e7f0      	b.n	80080be <__cvt+0xa6>

080080dc <__exponent>:
 80080dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080de:	4603      	mov	r3, r0
 80080e0:	2900      	cmp	r1, #0
 80080e2:	bfb8      	it	lt
 80080e4:	4249      	neglt	r1, r1
 80080e6:	f803 2b02 	strb.w	r2, [r3], #2
 80080ea:	bfb4      	ite	lt
 80080ec:	222d      	movlt	r2, #45	; 0x2d
 80080ee:	222b      	movge	r2, #43	; 0x2b
 80080f0:	2909      	cmp	r1, #9
 80080f2:	7042      	strb	r2, [r0, #1]
 80080f4:	dd2a      	ble.n	800814c <__exponent+0x70>
 80080f6:	f10d 0407 	add.w	r4, sp, #7
 80080fa:	46a4      	mov	ip, r4
 80080fc:	270a      	movs	r7, #10
 80080fe:	46a6      	mov	lr, r4
 8008100:	460a      	mov	r2, r1
 8008102:	fb91 f6f7 	sdiv	r6, r1, r7
 8008106:	fb07 1516 	mls	r5, r7, r6, r1
 800810a:	3530      	adds	r5, #48	; 0x30
 800810c:	2a63      	cmp	r2, #99	; 0x63
 800810e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008112:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008116:	4631      	mov	r1, r6
 8008118:	dcf1      	bgt.n	80080fe <__exponent+0x22>
 800811a:	3130      	adds	r1, #48	; 0x30
 800811c:	f1ae 0502 	sub.w	r5, lr, #2
 8008120:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008124:	1c44      	adds	r4, r0, #1
 8008126:	4629      	mov	r1, r5
 8008128:	4561      	cmp	r1, ip
 800812a:	d30a      	bcc.n	8008142 <__exponent+0x66>
 800812c:	f10d 0209 	add.w	r2, sp, #9
 8008130:	eba2 020e 	sub.w	r2, r2, lr
 8008134:	4565      	cmp	r5, ip
 8008136:	bf88      	it	hi
 8008138:	2200      	movhi	r2, #0
 800813a:	4413      	add	r3, r2
 800813c:	1a18      	subs	r0, r3, r0
 800813e:	b003      	add	sp, #12
 8008140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008146:	f804 2f01 	strb.w	r2, [r4, #1]!
 800814a:	e7ed      	b.n	8008128 <__exponent+0x4c>
 800814c:	2330      	movs	r3, #48	; 0x30
 800814e:	3130      	adds	r1, #48	; 0x30
 8008150:	7083      	strb	r3, [r0, #2]
 8008152:	70c1      	strb	r1, [r0, #3]
 8008154:	1d03      	adds	r3, r0, #4
 8008156:	e7f1      	b.n	800813c <__exponent+0x60>

08008158 <_printf_float>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	ed2d 8b02 	vpush	{d8}
 8008160:	b08d      	sub	sp, #52	; 0x34
 8008162:	460c      	mov	r4, r1
 8008164:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008168:	4616      	mov	r6, r2
 800816a:	461f      	mov	r7, r3
 800816c:	4605      	mov	r5, r0
 800816e:	f001 fa59 	bl	8009624 <_localeconv_r>
 8008172:	f8d0 a000 	ldr.w	sl, [r0]
 8008176:	4650      	mov	r0, sl
 8008178:	f7f8 f832 	bl	80001e0 <strlen>
 800817c:	2300      	movs	r3, #0
 800817e:	930a      	str	r3, [sp, #40]	; 0x28
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	9305      	str	r3, [sp, #20]
 8008184:	f8d8 3000 	ldr.w	r3, [r8]
 8008188:	f894 b018 	ldrb.w	fp, [r4, #24]
 800818c:	3307      	adds	r3, #7
 800818e:	f023 0307 	bic.w	r3, r3, #7
 8008192:	f103 0208 	add.w	r2, r3, #8
 8008196:	f8c8 2000 	str.w	r2, [r8]
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081aa:	9307      	str	r3, [sp, #28]
 80081ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80081b0:	ee08 0a10 	vmov	s16, r0
 80081b4:	4b9f      	ldr	r3, [pc, #636]	; (8008434 <_printf_float+0x2dc>)
 80081b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081ba:	f04f 32ff 	mov.w	r2, #4294967295
 80081be:	f7f8 fcbd 	bl	8000b3c <__aeabi_dcmpun>
 80081c2:	bb88      	cbnz	r0, 8008228 <_printf_float+0xd0>
 80081c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081c8:	4b9a      	ldr	r3, [pc, #616]	; (8008434 <_printf_float+0x2dc>)
 80081ca:	f04f 32ff 	mov.w	r2, #4294967295
 80081ce:	f7f8 fc97 	bl	8000b00 <__aeabi_dcmple>
 80081d2:	bb48      	cbnz	r0, 8008228 <_printf_float+0xd0>
 80081d4:	2200      	movs	r2, #0
 80081d6:	2300      	movs	r3, #0
 80081d8:	4640      	mov	r0, r8
 80081da:	4649      	mov	r1, r9
 80081dc:	f7f8 fc86 	bl	8000aec <__aeabi_dcmplt>
 80081e0:	b110      	cbz	r0, 80081e8 <_printf_float+0x90>
 80081e2:	232d      	movs	r3, #45	; 0x2d
 80081e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081e8:	4b93      	ldr	r3, [pc, #588]	; (8008438 <_printf_float+0x2e0>)
 80081ea:	4894      	ldr	r0, [pc, #592]	; (800843c <_printf_float+0x2e4>)
 80081ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081f0:	bf94      	ite	ls
 80081f2:	4698      	movls	r8, r3
 80081f4:	4680      	movhi	r8, r0
 80081f6:	2303      	movs	r3, #3
 80081f8:	6123      	str	r3, [r4, #16]
 80081fa:	9b05      	ldr	r3, [sp, #20]
 80081fc:	f023 0204 	bic.w	r2, r3, #4
 8008200:	6022      	str	r2, [r4, #0]
 8008202:	f04f 0900 	mov.w	r9, #0
 8008206:	9700      	str	r7, [sp, #0]
 8008208:	4633      	mov	r3, r6
 800820a:	aa0b      	add	r2, sp, #44	; 0x2c
 800820c:	4621      	mov	r1, r4
 800820e:	4628      	mov	r0, r5
 8008210:	f000 f9d8 	bl	80085c4 <_printf_common>
 8008214:	3001      	adds	r0, #1
 8008216:	f040 8090 	bne.w	800833a <_printf_float+0x1e2>
 800821a:	f04f 30ff 	mov.w	r0, #4294967295
 800821e:	b00d      	add	sp, #52	; 0x34
 8008220:	ecbd 8b02 	vpop	{d8}
 8008224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008228:	4642      	mov	r2, r8
 800822a:	464b      	mov	r3, r9
 800822c:	4640      	mov	r0, r8
 800822e:	4649      	mov	r1, r9
 8008230:	f7f8 fc84 	bl	8000b3c <__aeabi_dcmpun>
 8008234:	b140      	cbz	r0, 8008248 <_printf_float+0xf0>
 8008236:	464b      	mov	r3, r9
 8008238:	2b00      	cmp	r3, #0
 800823a:	bfbc      	itt	lt
 800823c:	232d      	movlt	r3, #45	; 0x2d
 800823e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008242:	487f      	ldr	r0, [pc, #508]	; (8008440 <_printf_float+0x2e8>)
 8008244:	4b7f      	ldr	r3, [pc, #508]	; (8008444 <_printf_float+0x2ec>)
 8008246:	e7d1      	b.n	80081ec <_printf_float+0x94>
 8008248:	6863      	ldr	r3, [r4, #4]
 800824a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800824e:	9206      	str	r2, [sp, #24]
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	d13f      	bne.n	80082d4 <_printf_float+0x17c>
 8008254:	2306      	movs	r3, #6
 8008256:	6063      	str	r3, [r4, #4]
 8008258:	9b05      	ldr	r3, [sp, #20]
 800825a:	6861      	ldr	r1, [r4, #4]
 800825c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008260:	2300      	movs	r3, #0
 8008262:	9303      	str	r3, [sp, #12]
 8008264:	ab0a      	add	r3, sp, #40	; 0x28
 8008266:	e9cd b301 	strd	fp, r3, [sp, #4]
 800826a:	ab09      	add	r3, sp, #36	; 0x24
 800826c:	ec49 8b10 	vmov	d0, r8, r9
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	6022      	str	r2, [r4, #0]
 8008274:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008278:	4628      	mov	r0, r5
 800827a:	f7ff fecd 	bl	8008018 <__cvt>
 800827e:	9b06      	ldr	r3, [sp, #24]
 8008280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008282:	2b47      	cmp	r3, #71	; 0x47
 8008284:	4680      	mov	r8, r0
 8008286:	d108      	bne.n	800829a <_printf_float+0x142>
 8008288:	1cc8      	adds	r0, r1, #3
 800828a:	db02      	blt.n	8008292 <_printf_float+0x13a>
 800828c:	6863      	ldr	r3, [r4, #4]
 800828e:	4299      	cmp	r1, r3
 8008290:	dd41      	ble.n	8008316 <_printf_float+0x1be>
 8008292:	f1ab 0b02 	sub.w	fp, fp, #2
 8008296:	fa5f fb8b 	uxtb.w	fp, fp
 800829a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800829e:	d820      	bhi.n	80082e2 <_printf_float+0x18a>
 80082a0:	3901      	subs	r1, #1
 80082a2:	465a      	mov	r2, fp
 80082a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082a8:	9109      	str	r1, [sp, #36]	; 0x24
 80082aa:	f7ff ff17 	bl	80080dc <__exponent>
 80082ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082b0:	1813      	adds	r3, r2, r0
 80082b2:	2a01      	cmp	r2, #1
 80082b4:	4681      	mov	r9, r0
 80082b6:	6123      	str	r3, [r4, #16]
 80082b8:	dc02      	bgt.n	80082c0 <_printf_float+0x168>
 80082ba:	6822      	ldr	r2, [r4, #0]
 80082bc:	07d2      	lsls	r2, r2, #31
 80082be:	d501      	bpl.n	80082c4 <_printf_float+0x16c>
 80082c0:	3301      	adds	r3, #1
 80082c2:	6123      	str	r3, [r4, #16]
 80082c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d09c      	beq.n	8008206 <_printf_float+0xae>
 80082cc:	232d      	movs	r3, #45	; 0x2d
 80082ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082d2:	e798      	b.n	8008206 <_printf_float+0xae>
 80082d4:	9a06      	ldr	r2, [sp, #24]
 80082d6:	2a47      	cmp	r2, #71	; 0x47
 80082d8:	d1be      	bne.n	8008258 <_printf_float+0x100>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1bc      	bne.n	8008258 <_printf_float+0x100>
 80082de:	2301      	movs	r3, #1
 80082e0:	e7b9      	b.n	8008256 <_printf_float+0xfe>
 80082e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80082e6:	d118      	bne.n	800831a <_printf_float+0x1c2>
 80082e8:	2900      	cmp	r1, #0
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	dd0b      	ble.n	8008306 <_printf_float+0x1ae>
 80082ee:	6121      	str	r1, [r4, #16]
 80082f0:	b913      	cbnz	r3, 80082f8 <_printf_float+0x1a0>
 80082f2:	6822      	ldr	r2, [r4, #0]
 80082f4:	07d0      	lsls	r0, r2, #31
 80082f6:	d502      	bpl.n	80082fe <_printf_float+0x1a6>
 80082f8:	3301      	adds	r3, #1
 80082fa:	440b      	add	r3, r1
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8008300:	f04f 0900 	mov.w	r9, #0
 8008304:	e7de      	b.n	80082c4 <_printf_float+0x16c>
 8008306:	b913      	cbnz	r3, 800830e <_printf_float+0x1b6>
 8008308:	6822      	ldr	r2, [r4, #0]
 800830a:	07d2      	lsls	r2, r2, #31
 800830c:	d501      	bpl.n	8008312 <_printf_float+0x1ba>
 800830e:	3302      	adds	r3, #2
 8008310:	e7f4      	b.n	80082fc <_printf_float+0x1a4>
 8008312:	2301      	movs	r3, #1
 8008314:	e7f2      	b.n	80082fc <_printf_float+0x1a4>
 8008316:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800831a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800831c:	4299      	cmp	r1, r3
 800831e:	db05      	blt.n	800832c <_printf_float+0x1d4>
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	6121      	str	r1, [r4, #16]
 8008324:	07d8      	lsls	r0, r3, #31
 8008326:	d5ea      	bpl.n	80082fe <_printf_float+0x1a6>
 8008328:	1c4b      	adds	r3, r1, #1
 800832a:	e7e7      	b.n	80082fc <_printf_float+0x1a4>
 800832c:	2900      	cmp	r1, #0
 800832e:	bfd4      	ite	le
 8008330:	f1c1 0202 	rsble	r2, r1, #2
 8008334:	2201      	movgt	r2, #1
 8008336:	4413      	add	r3, r2
 8008338:	e7e0      	b.n	80082fc <_printf_float+0x1a4>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	055a      	lsls	r2, r3, #21
 800833e:	d407      	bmi.n	8008350 <_printf_float+0x1f8>
 8008340:	6923      	ldr	r3, [r4, #16]
 8008342:	4642      	mov	r2, r8
 8008344:	4631      	mov	r1, r6
 8008346:	4628      	mov	r0, r5
 8008348:	47b8      	blx	r7
 800834a:	3001      	adds	r0, #1
 800834c:	d12c      	bne.n	80083a8 <_printf_float+0x250>
 800834e:	e764      	b.n	800821a <_printf_float+0xc2>
 8008350:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008354:	f240 80e0 	bls.w	8008518 <_printf_float+0x3c0>
 8008358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800835c:	2200      	movs	r2, #0
 800835e:	2300      	movs	r3, #0
 8008360:	f7f8 fbba 	bl	8000ad8 <__aeabi_dcmpeq>
 8008364:	2800      	cmp	r0, #0
 8008366:	d034      	beq.n	80083d2 <_printf_float+0x27a>
 8008368:	4a37      	ldr	r2, [pc, #220]	; (8008448 <_printf_float+0x2f0>)
 800836a:	2301      	movs	r3, #1
 800836c:	4631      	mov	r1, r6
 800836e:	4628      	mov	r0, r5
 8008370:	47b8      	blx	r7
 8008372:	3001      	adds	r0, #1
 8008374:	f43f af51 	beq.w	800821a <_printf_float+0xc2>
 8008378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800837c:	429a      	cmp	r2, r3
 800837e:	db02      	blt.n	8008386 <_printf_float+0x22e>
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	07d8      	lsls	r0, r3, #31
 8008384:	d510      	bpl.n	80083a8 <_printf_float+0x250>
 8008386:	ee18 3a10 	vmov	r3, s16
 800838a:	4652      	mov	r2, sl
 800838c:	4631      	mov	r1, r6
 800838e:	4628      	mov	r0, r5
 8008390:	47b8      	blx	r7
 8008392:	3001      	adds	r0, #1
 8008394:	f43f af41 	beq.w	800821a <_printf_float+0xc2>
 8008398:	f04f 0800 	mov.w	r8, #0
 800839c:	f104 091a 	add.w	r9, r4, #26
 80083a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a2:	3b01      	subs	r3, #1
 80083a4:	4543      	cmp	r3, r8
 80083a6:	dc09      	bgt.n	80083bc <_printf_float+0x264>
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	079b      	lsls	r3, r3, #30
 80083ac:	f100 8105 	bmi.w	80085ba <_printf_float+0x462>
 80083b0:	68e0      	ldr	r0, [r4, #12]
 80083b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083b4:	4298      	cmp	r0, r3
 80083b6:	bfb8      	it	lt
 80083b8:	4618      	movlt	r0, r3
 80083ba:	e730      	b.n	800821e <_printf_float+0xc6>
 80083bc:	2301      	movs	r3, #1
 80083be:	464a      	mov	r2, r9
 80083c0:	4631      	mov	r1, r6
 80083c2:	4628      	mov	r0, r5
 80083c4:	47b8      	blx	r7
 80083c6:	3001      	adds	r0, #1
 80083c8:	f43f af27 	beq.w	800821a <_printf_float+0xc2>
 80083cc:	f108 0801 	add.w	r8, r8, #1
 80083d0:	e7e6      	b.n	80083a0 <_printf_float+0x248>
 80083d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dc39      	bgt.n	800844c <_printf_float+0x2f4>
 80083d8:	4a1b      	ldr	r2, [pc, #108]	; (8008448 <_printf_float+0x2f0>)
 80083da:	2301      	movs	r3, #1
 80083dc:	4631      	mov	r1, r6
 80083de:	4628      	mov	r0, r5
 80083e0:	47b8      	blx	r7
 80083e2:	3001      	adds	r0, #1
 80083e4:	f43f af19 	beq.w	800821a <_printf_float+0xc2>
 80083e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083ec:	4313      	orrs	r3, r2
 80083ee:	d102      	bne.n	80083f6 <_printf_float+0x29e>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	07d9      	lsls	r1, r3, #31
 80083f4:	d5d8      	bpl.n	80083a8 <_printf_float+0x250>
 80083f6:	ee18 3a10 	vmov	r3, s16
 80083fa:	4652      	mov	r2, sl
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	47b8      	blx	r7
 8008402:	3001      	adds	r0, #1
 8008404:	f43f af09 	beq.w	800821a <_printf_float+0xc2>
 8008408:	f04f 0900 	mov.w	r9, #0
 800840c:	f104 0a1a 	add.w	sl, r4, #26
 8008410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008412:	425b      	negs	r3, r3
 8008414:	454b      	cmp	r3, r9
 8008416:	dc01      	bgt.n	800841c <_printf_float+0x2c4>
 8008418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841a:	e792      	b.n	8008342 <_printf_float+0x1ea>
 800841c:	2301      	movs	r3, #1
 800841e:	4652      	mov	r2, sl
 8008420:	4631      	mov	r1, r6
 8008422:	4628      	mov	r0, r5
 8008424:	47b8      	blx	r7
 8008426:	3001      	adds	r0, #1
 8008428:	f43f aef7 	beq.w	800821a <_printf_float+0xc2>
 800842c:	f109 0901 	add.w	r9, r9, #1
 8008430:	e7ee      	b.n	8008410 <_printf_float+0x2b8>
 8008432:	bf00      	nop
 8008434:	7fefffff 	.word	0x7fefffff
 8008438:	08015690 	.word	0x08015690
 800843c:	08015694 	.word	0x08015694
 8008440:	0801569c 	.word	0x0801569c
 8008444:	08015698 	.word	0x08015698
 8008448:	080156a0 	.word	0x080156a0
 800844c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800844e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008450:	429a      	cmp	r2, r3
 8008452:	bfa8      	it	ge
 8008454:	461a      	movge	r2, r3
 8008456:	2a00      	cmp	r2, #0
 8008458:	4691      	mov	r9, r2
 800845a:	dc37      	bgt.n	80084cc <_printf_float+0x374>
 800845c:	f04f 0b00 	mov.w	fp, #0
 8008460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008464:	f104 021a 	add.w	r2, r4, #26
 8008468:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800846a:	9305      	str	r3, [sp, #20]
 800846c:	eba3 0309 	sub.w	r3, r3, r9
 8008470:	455b      	cmp	r3, fp
 8008472:	dc33      	bgt.n	80084dc <_printf_float+0x384>
 8008474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008478:	429a      	cmp	r2, r3
 800847a:	db3b      	blt.n	80084f4 <_printf_float+0x39c>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	07da      	lsls	r2, r3, #31
 8008480:	d438      	bmi.n	80084f4 <_printf_float+0x39c>
 8008482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008484:	9a05      	ldr	r2, [sp, #20]
 8008486:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008488:	1a9a      	subs	r2, r3, r2
 800848a:	eba3 0901 	sub.w	r9, r3, r1
 800848e:	4591      	cmp	r9, r2
 8008490:	bfa8      	it	ge
 8008492:	4691      	movge	r9, r2
 8008494:	f1b9 0f00 	cmp.w	r9, #0
 8008498:	dc35      	bgt.n	8008506 <_printf_float+0x3ae>
 800849a:	f04f 0800 	mov.w	r8, #0
 800849e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084a2:	f104 0a1a 	add.w	sl, r4, #26
 80084a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084aa:	1a9b      	subs	r3, r3, r2
 80084ac:	eba3 0309 	sub.w	r3, r3, r9
 80084b0:	4543      	cmp	r3, r8
 80084b2:	f77f af79 	ble.w	80083a8 <_printf_float+0x250>
 80084b6:	2301      	movs	r3, #1
 80084b8:	4652      	mov	r2, sl
 80084ba:	4631      	mov	r1, r6
 80084bc:	4628      	mov	r0, r5
 80084be:	47b8      	blx	r7
 80084c0:	3001      	adds	r0, #1
 80084c2:	f43f aeaa 	beq.w	800821a <_printf_float+0xc2>
 80084c6:	f108 0801 	add.w	r8, r8, #1
 80084ca:	e7ec      	b.n	80084a6 <_printf_float+0x34e>
 80084cc:	4613      	mov	r3, r2
 80084ce:	4631      	mov	r1, r6
 80084d0:	4642      	mov	r2, r8
 80084d2:	4628      	mov	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	3001      	adds	r0, #1
 80084d8:	d1c0      	bne.n	800845c <_printf_float+0x304>
 80084da:	e69e      	b.n	800821a <_printf_float+0xc2>
 80084dc:	2301      	movs	r3, #1
 80084de:	4631      	mov	r1, r6
 80084e0:	4628      	mov	r0, r5
 80084e2:	9205      	str	r2, [sp, #20]
 80084e4:	47b8      	blx	r7
 80084e6:	3001      	adds	r0, #1
 80084e8:	f43f ae97 	beq.w	800821a <_printf_float+0xc2>
 80084ec:	9a05      	ldr	r2, [sp, #20]
 80084ee:	f10b 0b01 	add.w	fp, fp, #1
 80084f2:	e7b9      	b.n	8008468 <_printf_float+0x310>
 80084f4:	ee18 3a10 	vmov	r3, s16
 80084f8:	4652      	mov	r2, sl
 80084fa:	4631      	mov	r1, r6
 80084fc:	4628      	mov	r0, r5
 80084fe:	47b8      	blx	r7
 8008500:	3001      	adds	r0, #1
 8008502:	d1be      	bne.n	8008482 <_printf_float+0x32a>
 8008504:	e689      	b.n	800821a <_printf_float+0xc2>
 8008506:	9a05      	ldr	r2, [sp, #20]
 8008508:	464b      	mov	r3, r9
 800850a:	4442      	add	r2, r8
 800850c:	4631      	mov	r1, r6
 800850e:	4628      	mov	r0, r5
 8008510:	47b8      	blx	r7
 8008512:	3001      	adds	r0, #1
 8008514:	d1c1      	bne.n	800849a <_printf_float+0x342>
 8008516:	e680      	b.n	800821a <_printf_float+0xc2>
 8008518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800851a:	2a01      	cmp	r2, #1
 800851c:	dc01      	bgt.n	8008522 <_printf_float+0x3ca>
 800851e:	07db      	lsls	r3, r3, #31
 8008520:	d538      	bpl.n	8008594 <_printf_float+0x43c>
 8008522:	2301      	movs	r3, #1
 8008524:	4642      	mov	r2, r8
 8008526:	4631      	mov	r1, r6
 8008528:	4628      	mov	r0, r5
 800852a:	47b8      	blx	r7
 800852c:	3001      	adds	r0, #1
 800852e:	f43f ae74 	beq.w	800821a <_printf_float+0xc2>
 8008532:	ee18 3a10 	vmov	r3, s16
 8008536:	4652      	mov	r2, sl
 8008538:	4631      	mov	r1, r6
 800853a:	4628      	mov	r0, r5
 800853c:	47b8      	blx	r7
 800853e:	3001      	adds	r0, #1
 8008540:	f43f ae6b 	beq.w	800821a <_printf_float+0xc2>
 8008544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008548:	2200      	movs	r2, #0
 800854a:	2300      	movs	r3, #0
 800854c:	f7f8 fac4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008550:	b9d8      	cbnz	r0, 800858a <_printf_float+0x432>
 8008552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008554:	f108 0201 	add.w	r2, r8, #1
 8008558:	3b01      	subs	r3, #1
 800855a:	4631      	mov	r1, r6
 800855c:	4628      	mov	r0, r5
 800855e:	47b8      	blx	r7
 8008560:	3001      	adds	r0, #1
 8008562:	d10e      	bne.n	8008582 <_printf_float+0x42a>
 8008564:	e659      	b.n	800821a <_printf_float+0xc2>
 8008566:	2301      	movs	r3, #1
 8008568:	4652      	mov	r2, sl
 800856a:	4631      	mov	r1, r6
 800856c:	4628      	mov	r0, r5
 800856e:	47b8      	blx	r7
 8008570:	3001      	adds	r0, #1
 8008572:	f43f ae52 	beq.w	800821a <_printf_float+0xc2>
 8008576:	f108 0801 	add.w	r8, r8, #1
 800857a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857c:	3b01      	subs	r3, #1
 800857e:	4543      	cmp	r3, r8
 8008580:	dcf1      	bgt.n	8008566 <_printf_float+0x40e>
 8008582:	464b      	mov	r3, r9
 8008584:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008588:	e6dc      	b.n	8008344 <_printf_float+0x1ec>
 800858a:	f04f 0800 	mov.w	r8, #0
 800858e:	f104 0a1a 	add.w	sl, r4, #26
 8008592:	e7f2      	b.n	800857a <_printf_float+0x422>
 8008594:	2301      	movs	r3, #1
 8008596:	4642      	mov	r2, r8
 8008598:	e7df      	b.n	800855a <_printf_float+0x402>
 800859a:	2301      	movs	r3, #1
 800859c:	464a      	mov	r2, r9
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	f43f ae38 	beq.w	800821a <_printf_float+0xc2>
 80085aa:	f108 0801 	add.w	r8, r8, #1
 80085ae:	68e3      	ldr	r3, [r4, #12]
 80085b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085b2:	1a5b      	subs	r3, r3, r1
 80085b4:	4543      	cmp	r3, r8
 80085b6:	dcf0      	bgt.n	800859a <_printf_float+0x442>
 80085b8:	e6fa      	b.n	80083b0 <_printf_float+0x258>
 80085ba:	f04f 0800 	mov.w	r8, #0
 80085be:	f104 0919 	add.w	r9, r4, #25
 80085c2:	e7f4      	b.n	80085ae <_printf_float+0x456>

080085c4 <_printf_common>:
 80085c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c8:	4616      	mov	r6, r2
 80085ca:	4699      	mov	r9, r3
 80085cc:	688a      	ldr	r2, [r1, #8]
 80085ce:	690b      	ldr	r3, [r1, #16]
 80085d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085d4:	4293      	cmp	r3, r2
 80085d6:	bfb8      	it	lt
 80085d8:	4613      	movlt	r3, r2
 80085da:	6033      	str	r3, [r6, #0]
 80085dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085e0:	4607      	mov	r7, r0
 80085e2:	460c      	mov	r4, r1
 80085e4:	b10a      	cbz	r2, 80085ea <_printf_common+0x26>
 80085e6:	3301      	adds	r3, #1
 80085e8:	6033      	str	r3, [r6, #0]
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	0699      	lsls	r1, r3, #26
 80085ee:	bf42      	ittt	mi
 80085f0:	6833      	ldrmi	r3, [r6, #0]
 80085f2:	3302      	addmi	r3, #2
 80085f4:	6033      	strmi	r3, [r6, #0]
 80085f6:	6825      	ldr	r5, [r4, #0]
 80085f8:	f015 0506 	ands.w	r5, r5, #6
 80085fc:	d106      	bne.n	800860c <_printf_common+0x48>
 80085fe:	f104 0a19 	add.w	sl, r4, #25
 8008602:	68e3      	ldr	r3, [r4, #12]
 8008604:	6832      	ldr	r2, [r6, #0]
 8008606:	1a9b      	subs	r3, r3, r2
 8008608:	42ab      	cmp	r3, r5
 800860a:	dc26      	bgt.n	800865a <_printf_common+0x96>
 800860c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008610:	1e13      	subs	r3, r2, #0
 8008612:	6822      	ldr	r2, [r4, #0]
 8008614:	bf18      	it	ne
 8008616:	2301      	movne	r3, #1
 8008618:	0692      	lsls	r2, r2, #26
 800861a:	d42b      	bmi.n	8008674 <_printf_common+0xb0>
 800861c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008620:	4649      	mov	r1, r9
 8008622:	4638      	mov	r0, r7
 8008624:	47c0      	blx	r8
 8008626:	3001      	adds	r0, #1
 8008628:	d01e      	beq.n	8008668 <_printf_common+0xa4>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	68e5      	ldr	r5, [r4, #12]
 800862e:	6832      	ldr	r2, [r6, #0]
 8008630:	f003 0306 	and.w	r3, r3, #6
 8008634:	2b04      	cmp	r3, #4
 8008636:	bf08      	it	eq
 8008638:	1aad      	subeq	r5, r5, r2
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	6922      	ldr	r2, [r4, #16]
 800863e:	bf0c      	ite	eq
 8008640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008644:	2500      	movne	r5, #0
 8008646:	4293      	cmp	r3, r2
 8008648:	bfc4      	itt	gt
 800864a:	1a9b      	subgt	r3, r3, r2
 800864c:	18ed      	addgt	r5, r5, r3
 800864e:	2600      	movs	r6, #0
 8008650:	341a      	adds	r4, #26
 8008652:	42b5      	cmp	r5, r6
 8008654:	d11a      	bne.n	800868c <_printf_common+0xc8>
 8008656:	2000      	movs	r0, #0
 8008658:	e008      	b.n	800866c <_printf_common+0xa8>
 800865a:	2301      	movs	r3, #1
 800865c:	4652      	mov	r2, sl
 800865e:	4649      	mov	r1, r9
 8008660:	4638      	mov	r0, r7
 8008662:	47c0      	blx	r8
 8008664:	3001      	adds	r0, #1
 8008666:	d103      	bne.n	8008670 <_printf_common+0xac>
 8008668:	f04f 30ff 	mov.w	r0, #4294967295
 800866c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008670:	3501      	adds	r5, #1
 8008672:	e7c6      	b.n	8008602 <_printf_common+0x3e>
 8008674:	18e1      	adds	r1, r4, r3
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	2030      	movs	r0, #48	; 0x30
 800867a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800867e:	4422      	add	r2, r4
 8008680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008688:	3302      	adds	r3, #2
 800868a:	e7c7      	b.n	800861c <_printf_common+0x58>
 800868c:	2301      	movs	r3, #1
 800868e:	4622      	mov	r2, r4
 8008690:	4649      	mov	r1, r9
 8008692:	4638      	mov	r0, r7
 8008694:	47c0      	blx	r8
 8008696:	3001      	adds	r0, #1
 8008698:	d0e6      	beq.n	8008668 <_printf_common+0xa4>
 800869a:	3601      	adds	r6, #1
 800869c:	e7d9      	b.n	8008652 <_printf_common+0x8e>
	...

080086a0 <_printf_i>:
 80086a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086a4:	7e0f      	ldrb	r7, [r1, #24]
 80086a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086a8:	2f78      	cmp	r7, #120	; 0x78
 80086aa:	4691      	mov	r9, r2
 80086ac:	4680      	mov	r8, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	469a      	mov	sl, r3
 80086b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086b6:	d807      	bhi.n	80086c8 <_printf_i+0x28>
 80086b8:	2f62      	cmp	r7, #98	; 0x62
 80086ba:	d80a      	bhi.n	80086d2 <_printf_i+0x32>
 80086bc:	2f00      	cmp	r7, #0
 80086be:	f000 80d8 	beq.w	8008872 <_printf_i+0x1d2>
 80086c2:	2f58      	cmp	r7, #88	; 0x58
 80086c4:	f000 80a3 	beq.w	800880e <_printf_i+0x16e>
 80086c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086d0:	e03a      	b.n	8008748 <_printf_i+0xa8>
 80086d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086d6:	2b15      	cmp	r3, #21
 80086d8:	d8f6      	bhi.n	80086c8 <_printf_i+0x28>
 80086da:	a101      	add	r1, pc, #4	; (adr r1, 80086e0 <_printf_i+0x40>)
 80086dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086e0:	08008739 	.word	0x08008739
 80086e4:	0800874d 	.word	0x0800874d
 80086e8:	080086c9 	.word	0x080086c9
 80086ec:	080086c9 	.word	0x080086c9
 80086f0:	080086c9 	.word	0x080086c9
 80086f4:	080086c9 	.word	0x080086c9
 80086f8:	0800874d 	.word	0x0800874d
 80086fc:	080086c9 	.word	0x080086c9
 8008700:	080086c9 	.word	0x080086c9
 8008704:	080086c9 	.word	0x080086c9
 8008708:	080086c9 	.word	0x080086c9
 800870c:	08008859 	.word	0x08008859
 8008710:	0800877d 	.word	0x0800877d
 8008714:	0800883b 	.word	0x0800883b
 8008718:	080086c9 	.word	0x080086c9
 800871c:	080086c9 	.word	0x080086c9
 8008720:	0800887b 	.word	0x0800887b
 8008724:	080086c9 	.word	0x080086c9
 8008728:	0800877d 	.word	0x0800877d
 800872c:	080086c9 	.word	0x080086c9
 8008730:	080086c9 	.word	0x080086c9
 8008734:	08008843 	.word	0x08008843
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	1d1a      	adds	r2, r3, #4
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	602a      	str	r2, [r5, #0]
 8008740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008748:	2301      	movs	r3, #1
 800874a:	e0a3      	b.n	8008894 <_printf_i+0x1f4>
 800874c:	6820      	ldr	r0, [r4, #0]
 800874e:	6829      	ldr	r1, [r5, #0]
 8008750:	0606      	lsls	r6, r0, #24
 8008752:	f101 0304 	add.w	r3, r1, #4
 8008756:	d50a      	bpl.n	800876e <_printf_i+0xce>
 8008758:	680e      	ldr	r6, [r1, #0]
 800875a:	602b      	str	r3, [r5, #0]
 800875c:	2e00      	cmp	r6, #0
 800875e:	da03      	bge.n	8008768 <_printf_i+0xc8>
 8008760:	232d      	movs	r3, #45	; 0x2d
 8008762:	4276      	negs	r6, r6
 8008764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008768:	485e      	ldr	r0, [pc, #376]	; (80088e4 <_printf_i+0x244>)
 800876a:	230a      	movs	r3, #10
 800876c:	e019      	b.n	80087a2 <_printf_i+0x102>
 800876e:	680e      	ldr	r6, [r1, #0]
 8008770:	602b      	str	r3, [r5, #0]
 8008772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008776:	bf18      	it	ne
 8008778:	b236      	sxthne	r6, r6
 800877a:	e7ef      	b.n	800875c <_printf_i+0xbc>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	6820      	ldr	r0, [r4, #0]
 8008780:	1d19      	adds	r1, r3, #4
 8008782:	6029      	str	r1, [r5, #0]
 8008784:	0601      	lsls	r1, r0, #24
 8008786:	d501      	bpl.n	800878c <_printf_i+0xec>
 8008788:	681e      	ldr	r6, [r3, #0]
 800878a:	e002      	b.n	8008792 <_printf_i+0xf2>
 800878c:	0646      	lsls	r6, r0, #25
 800878e:	d5fb      	bpl.n	8008788 <_printf_i+0xe8>
 8008790:	881e      	ldrh	r6, [r3, #0]
 8008792:	4854      	ldr	r0, [pc, #336]	; (80088e4 <_printf_i+0x244>)
 8008794:	2f6f      	cmp	r7, #111	; 0x6f
 8008796:	bf0c      	ite	eq
 8008798:	2308      	moveq	r3, #8
 800879a:	230a      	movne	r3, #10
 800879c:	2100      	movs	r1, #0
 800879e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087a2:	6865      	ldr	r5, [r4, #4]
 80087a4:	60a5      	str	r5, [r4, #8]
 80087a6:	2d00      	cmp	r5, #0
 80087a8:	bfa2      	ittt	ge
 80087aa:	6821      	ldrge	r1, [r4, #0]
 80087ac:	f021 0104 	bicge.w	r1, r1, #4
 80087b0:	6021      	strge	r1, [r4, #0]
 80087b2:	b90e      	cbnz	r6, 80087b8 <_printf_i+0x118>
 80087b4:	2d00      	cmp	r5, #0
 80087b6:	d04d      	beq.n	8008854 <_printf_i+0x1b4>
 80087b8:	4615      	mov	r5, r2
 80087ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80087be:	fb03 6711 	mls	r7, r3, r1, r6
 80087c2:	5dc7      	ldrb	r7, [r0, r7]
 80087c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087c8:	4637      	mov	r7, r6
 80087ca:	42bb      	cmp	r3, r7
 80087cc:	460e      	mov	r6, r1
 80087ce:	d9f4      	bls.n	80087ba <_printf_i+0x11a>
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d10b      	bne.n	80087ec <_printf_i+0x14c>
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	07de      	lsls	r6, r3, #31
 80087d8:	d508      	bpl.n	80087ec <_printf_i+0x14c>
 80087da:	6923      	ldr	r3, [r4, #16]
 80087dc:	6861      	ldr	r1, [r4, #4]
 80087de:	4299      	cmp	r1, r3
 80087e0:	bfde      	ittt	le
 80087e2:	2330      	movle	r3, #48	; 0x30
 80087e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087ec:	1b52      	subs	r2, r2, r5
 80087ee:	6122      	str	r2, [r4, #16]
 80087f0:	f8cd a000 	str.w	sl, [sp]
 80087f4:	464b      	mov	r3, r9
 80087f6:	aa03      	add	r2, sp, #12
 80087f8:	4621      	mov	r1, r4
 80087fa:	4640      	mov	r0, r8
 80087fc:	f7ff fee2 	bl	80085c4 <_printf_common>
 8008800:	3001      	adds	r0, #1
 8008802:	d14c      	bne.n	800889e <_printf_i+0x1fe>
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	b004      	add	sp, #16
 800880a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880e:	4835      	ldr	r0, [pc, #212]	; (80088e4 <_printf_i+0x244>)
 8008810:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008814:	6829      	ldr	r1, [r5, #0]
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	f851 6b04 	ldr.w	r6, [r1], #4
 800881c:	6029      	str	r1, [r5, #0]
 800881e:	061d      	lsls	r5, r3, #24
 8008820:	d514      	bpl.n	800884c <_printf_i+0x1ac>
 8008822:	07df      	lsls	r7, r3, #31
 8008824:	bf44      	itt	mi
 8008826:	f043 0320 	orrmi.w	r3, r3, #32
 800882a:	6023      	strmi	r3, [r4, #0]
 800882c:	b91e      	cbnz	r6, 8008836 <_printf_i+0x196>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	f023 0320 	bic.w	r3, r3, #32
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	2310      	movs	r3, #16
 8008838:	e7b0      	b.n	800879c <_printf_i+0xfc>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	f043 0320 	orr.w	r3, r3, #32
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	2378      	movs	r3, #120	; 0x78
 8008844:	4828      	ldr	r0, [pc, #160]	; (80088e8 <_printf_i+0x248>)
 8008846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800884a:	e7e3      	b.n	8008814 <_printf_i+0x174>
 800884c:	0659      	lsls	r1, r3, #25
 800884e:	bf48      	it	mi
 8008850:	b2b6      	uxthmi	r6, r6
 8008852:	e7e6      	b.n	8008822 <_printf_i+0x182>
 8008854:	4615      	mov	r5, r2
 8008856:	e7bb      	b.n	80087d0 <_printf_i+0x130>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	6826      	ldr	r6, [r4, #0]
 800885c:	6961      	ldr	r1, [r4, #20]
 800885e:	1d18      	adds	r0, r3, #4
 8008860:	6028      	str	r0, [r5, #0]
 8008862:	0635      	lsls	r5, r6, #24
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	d501      	bpl.n	800886c <_printf_i+0x1cc>
 8008868:	6019      	str	r1, [r3, #0]
 800886a:	e002      	b.n	8008872 <_printf_i+0x1d2>
 800886c:	0670      	lsls	r0, r6, #25
 800886e:	d5fb      	bpl.n	8008868 <_printf_i+0x1c8>
 8008870:	8019      	strh	r1, [r3, #0]
 8008872:	2300      	movs	r3, #0
 8008874:	6123      	str	r3, [r4, #16]
 8008876:	4615      	mov	r5, r2
 8008878:	e7ba      	b.n	80087f0 <_printf_i+0x150>
 800887a:	682b      	ldr	r3, [r5, #0]
 800887c:	1d1a      	adds	r2, r3, #4
 800887e:	602a      	str	r2, [r5, #0]
 8008880:	681d      	ldr	r5, [r3, #0]
 8008882:	6862      	ldr	r2, [r4, #4]
 8008884:	2100      	movs	r1, #0
 8008886:	4628      	mov	r0, r5
 8008888:	f7f7 fcb2 	bl	80001f0 <memchr>
 800888c:	b108      	cbz	r0, 8008892 <_printf_i+0x1f2>
 800888e:	1b40      	subs	r0, r0, r5
 8008890:	6060      	str	r0, [r4, #4]
 8008892:	6863      	ldr	r3, [r4, #4]
 8008894:	6123      	str	r3, [r4, #16]
 8008896:	2300      	movs	r3, #0
 8008898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800889c:	e7a8      	b.n	80087f0 <_printf_i+0x150>
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	462a      	mov	r2, r5
 80088a2:	4649      	mov	r1, r9
 80088a4:	4640      	mov	r0, r8
 80088a6:	47d0      	blx	sl
 80088a8:	3001      	adds	r0, #1
 80088aa:	d0ab      	beq.n	8008804 <_printf_i+0x164>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	079b      	lsls	r3, r3, #30
 80088b0:	d413      	bmi.n	80088da <_printf_i+0x23a>
 80088b2:	68e0      	ldr	r0, [r4, #12]
 80088b4:	9b03      	ldr	r3, [sp, #12]
 80088b6:	4298      	cmp	r0, r3
 80088b8:	bfb8      	it	lt
 80088ba:	4618      	movlt	r0, r3
 80088bc:	e7a4      	b.n	8008808 <_printf_i+0x168>
 80088be:	2301      	movs	r3, #1
 80088c0:	4632      	mov	r2, r6
 80088c2:	4649      	mov	r1, r9
 80088c4:	4640      	mov	r0, r8
 80088c6:	47d0      	blx	sl
 80088c8:	3001      	adds	r0, #1
 80088ca:	d09b      	beq.n	8008804 <_printf_i+0x164>
 80088cc:	3501      	adds	r5, #1
 80088ce:	68e3      	ldr	r3, [r4, #12]
 80088d0:	9903      	ldr	r1, [sp, #12]
 80088d2:	1a5b      	subs	r3, r3, r1
 80088d4:	42ab      	cmp	r3, r5
 80088d6:	dcf2      	bgt.n	80088be <_printf_i+0x21e>
 80088d8:	e7eb      	b.n	80088b2 <_printf_i+0x212>
 80088da:	2500      	movs	r5, #0
 80088dc:	f104 0619 	add.w	r6, r4, #25
 80088e0:	e7f5      	b.n	80088ce <_printf_i+0x22e>
 80088e2:	bf00      	nop
 80088e4:	080156a2 	.word	0x080156a2
 80088e8:	080156b3 	.word	0x080156b3

080088ec <siprintf>:
 80088ec:	b40e      	push	{r1, r2, r3}
 80088ee:	b500      	push	{lr}
 80088f0:	b09c      	sub	sp, #112	; 0x70
 80088f2:	ab1d      	add	r3, sp, #116	; 0x74
 80088f4:	9002      	str	r0, [sp, #8]
 80088f6:	9006      	str	r0, [sp, #24]
 80088f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088fc:	4809      	ldr	r0, [pc, #36]	; (8008924 <siprintf+0x38>)
 80088fe:	9107      	str	r1, [sp, #28]
 8008900:	9104      	str	r1, [sp, #16]
 8008902:	4909      	ldr	r1, [pc, #36]	; (8008928 <siprintf+0x3c>)
 8008904:	f853 2b04 	ldr.w	r2, [r3], #4
 8008908:	9105      	str	r1, [sp, #20]
 800890a:	6800      	ldr	r0, [r0, #0]
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	a902      	add	r1, sp, #8
 8008910:	f001 fb78 	bl	800a004 <_svfiprintf_r>
 8008914:	9b02      	ldr	r3, [sp, #8]
 8008916:	2200      	movs	r2, #0
 8008918:	701a      	strb	r2, [r3, #0]
 800891a:	b01c      	add	sp, #112	; 0x70
 800891c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008920:	b003      	add	sp, #12
 8008922:	4770      	bx	lr
 8008924:	2000005c 	.word	0x2000005c
 8008928:	ffff0208 	.word	0xffff0208

0800892c <quorem>:
 800892c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008930:	6903      	ldr	r3, [r0, #16]
 8008932:	690c      	ldr	r4, [r1, #16]
 8008934:	42a3      	cmp	r3, r4
 8008936:	4607      	mov	r7, r0
 8008938:	f2c0 8081 	blt.w	8008a3e <quorem+0x112>
 800893c:	3c01      	subs	r4, #1
 800893e:	f101 0814 	add.w	r8, r1, #20
 8008942:	f100 0514 	add.w	r5, r0, #20
 8008946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800894a:	9301      	str	r3, [sp, #4]
 800894c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008950:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008954:	3301      	adds	r3, #1
 8008956:	429a      	cmp	r2, r3
 8008958:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800895c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008960:	fbb2 f6f3 	udiv	r6, r2, r3
 8008964:	d331      	bcc.n	80089ca <quorem+0x9e>
 8008966:	f04f 0e00 	mov.w	lr, #0
 800896a:	4640      	mov	r0, r8
 800896c:	46ac      	mov	ip, r5
 800896e:	46f2      	mov	sl, lr
 8008970:	f850 2b04 	ldr.w	r2, [r0], #4
 8008974:	b293      	uxth	r3, r2
 8008976:	fb06 e303 	mla	r3, r6, r3, lr
 800897a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800897e:	b29b      	uxth	r3, r3
 8008980:	ebaa 0303 	sub.w	r3, sl, r3
 8008984:	f8dc a000 	ldr.w	sl, [ip]
 8008988:	0c12      	lsrs	r2, r2, #16
 800898a:	fa13 f38a 	uxtah	r3, r3, sl
 800898e:	fb06 e202 	mla	r2, r6, r2, lr
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	9b00      	ldr	r3, [sp, #0]
 8008996:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800899a:	b292      	uxth	r2, r2
 800899c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80089a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80089a8:	4581      	cmp	r9, r0
 80089aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089ae:	f84c 3b04 	str.w	r3, [ip], #4
 80089b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80089b6:	d2db      	bcs.n	8008970 <quorem+0x44>
 80089b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80089bc:	b92b      	cbnz	r3, 80089ca <quorem+0x9e>
 80089be:	9b01      	ldr	r3, [sp, #4]
 80089c0:	3b04      	subs	r3, #4
 80089c2:	429d      	cmp	r5, r3
 80089c4:	461a      	mov	r2, r3
 80089c6:	d32e      	bcc.n	8008a26 <quorem+0xfa>
 80089c8:	613c      	str	r4, [r7, #16]
 80089ca:	4638      	mov	r0, r7
 80089cc:	f001 f8c6 	bl	8009b5c <__mcmp>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	db24      	blt.n	8008a1e <quorem+0xf2>
 80089d4:	3601      	adds	r6, #1
 80089d6:	4628      	mov	r0, r5
 80089d8:	f04f 0c00 	mov.w	ip, #0
 80089dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80089e0:	f8d0 e000 	ldr.w	lr, [r0]
 80089e4:	b293      	uxth	r3, r2
 80089e6:	ebac 0303 	sub.w	r3, ip, r3
 80089ea:	0c12      	lsrs	r2, r2, #16
 80089ec:	fa13 f38e 	uxtah	r3, r3, lr
 80089f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089fe:	45c1      	cmp	r9, r8
 8008a00:	f840 3b04 	str.w	r3, [r0], #4
 8008a04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a08:	d2e8      	bcs.n	80089dc <quorem+0xb0>
 8008a0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a12:	b922      	cbnz	r2, 8008a1e <quorem+0xf2>
 8008a14:	3b04      	subs	r3, #4
 8008a16:	429d      	cmp	r5, r3
 8008a18:	461a      	mov	r2, r3
 8008a1a:	d30a      	bcc.n	8008a32 <quorem+0x106>
 8008a1c:	613c      	str	r4, [r7, #16]
 8008a1e:	4630      	mov	r0, r6
 8008a20:	b003      	add	sp, #12
 8008a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a26:	6812      	ldr	r2, [r2, #0]
 8008a28:	3b04      	subs	r3, #4
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	d1cc      	bne.n	80089c8 <quorem+0x9c>
 8008a2e:	3c01      	subs	r4, #1
 8008a30:	e7c7      	b.n	80089c2 <quorem+0x96>
 8008a32:	6812      	ldr	r2, [r2, #0]
 8008a34:	3b04      	subs	r3, #4
 8008a36:	2a00      	cmp	r2, #0
 8008a38:	d1f0      	bne.n	8008a1c <quorem+0xf0>
 8008a3a:	3c01      	subs	r4, #1
 8008a3c:	e7eb      	b.n	8008a16 <quorem+0xea>
 8008a3e:	2000      	movs	r0, #0
 8008a40:	e7ee      	b.n	8008a20 <quorem+0xf4>
 8008a42:	0000      	movs	r0, r0
 8008a44:	0000      	movs	r0, r0
	...

08008a48 <_dtoa_r>:
 8008a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4c:	ed2d 8b04 	vpush	{d8-d9}
 8008a50:	ec57 6b10 	vmov	r6, r7, d0
 8008a54:	b093      	sub	sp, #76	; 0x4c
 8008a56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a5c:	9106      	str	r1, [sp, #24]
 8008a5e:	ee10 aa10 	vmov	sl, s0
 8008a62:	4604      	mov	r4, r0
 8008a64:	9209      	str	r2, [sp, #36]	; 0x24
 8008a66:	930c      	str	r3, [sp, #48]	; 0x30
 8008a68:	46bb      	mov	fp, r7
 8008a6a:	b975      	cbnz	r5, 8008a8a <_dtoa_r+0x42>
 8008a6c:	2010      	movs	r0, #16
 8008a6e:	f000 fddd 	bl	800962c <malloc>
 8008a72:	4602      	mov	r2, r0
 8008a74:	6260      	str	r0, [r4, #36]	; 0x24
 8008a76:	b920      	cbnz	r0, 8008a82 <_dtoa_r+0x3a>
 8008a78:	4ba7      	ldr	r3, [pc, #668]	; (8008d18 <_dtoa_r+0x2d0>)
 8008a7a:	21ea      	movs	r1, #234	; 0xea
 8008a7c:	48a7      	ldr	r0, [pc, #668]	; (8008d1c <_dtoa_r+0x2d4>)
 8008a7e:	f001 fbd1 	bl	800a224 <__assert_func>
 8008a82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a86:	6005      	str	r5, [r0, #0]
 8008a88:	60c5      	str	r5, [r0, #12]
 8008a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a8c:	6819      	ldr	r1, [r3, #0]
 8008a8e:	b151      	cbz	r1, 8008aa6 <_dtoa_r+0x5e>
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	604a      	str	r2, [r1, #4]
 8008a94:	2301      	movs	r3, #1
 8008a96:	4093      	lsls	r3, r2
 8008a98:	608b      	str	r3, [r1, #8]
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f000 fe1c 	bl	80096d8 <_Bfree>
 8008aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
 8008aa6:	1e3b      	subs	r3, r7, #0
 8008aa8:	bfaa      	itet	ge
 8008aaa:	2300      	movge	r3, #0
 8008aac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008ab0:	f8c8 3000 	strge.w	r3, [r8]
 8008ab4:	4b9a      	ldr	r3, [pc, #616]	; (8008d20 <_dtoa_r+0x2d8>)
 8008ab6:	bfbc      	itt	lt
 8008ab8:	2201      	movlt	r2, #1
 8008aba:	f8c8 2000 	strlt.w	r2, [r8]
 8008abe:	ea33 030b 	bics.w	r3, r3, fp
 8008ac2:	d11b      	bne.n	8008afc <_dtoa_r+0xb4>
 8008ac4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ac6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ad0:	4333      	orrs	r3, r6
 8008ad2:	f000 8592 	beq.w	80095fa <_dtoa_r+0xbb2>
 8008ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ad8:	b963      	cbnz	r3, 8008af4 <_dtoa_r+0xac>
 8008ada:	4b92      	ldr	r3, [pc, #584]	; (8008d24 <_dtoa_r+0x2dc>)
 8008adc:	e022      	b.n	8008b24 <_dtoa_r+0xdc>
 8008ade:	4b92      	ldr	r3, [pc, #584]	; (8008d28 <_dtoa_r+0x2e0>)
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	9801      	ldr	r0, [sp, #4]
 8008aea:	b013      	add	sp, #76	; 0x4c
 8008aec:	ecbd 8b04 	vpop	{d8-d9}
 8008af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af4:	4b8b      	ldr	r3, [pc, #556]	; (8008d24 <_dtoa_r+0x2dc>)
 8008af6:	9301      	str	r3, [sp, #4]
 8008af8:	3303      	adds	r3, #3
 8008afa:	e7f3      	b.n	8008ae4 <_dtoa_r+0x9c>
 8008afc:	2200      	movs	r2, #0
 8008afe:	2300      	movs	r3, #0
 8008b00:	4650      	mov	r0, sl
 8008b02:	4659      	mov	r1, fp
 8008b04:	f7f7 ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b08:	ec4b ab19 	vmov	d9, sl, fp
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	b158      	cbz	r0, 8008b28 <_dtoa_r+0xe0>
 8008b10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b12:	2301      	movs	r3, #1
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 856b 	beq.w	80095f4 <_dtoa_r+0xbac>
 8008b1e:	4883      	ldr	r0, [pc, #524]	; (8008d2c <_dtoa_r+0x2e4>)
 8008b20:	6018      	str	r0, [r3, #0]
 8008b22:	1e43      	subs	r3, r0, #1
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	e7df      	b.n	8008ae8 <_dtoa_r+0xa0>
 8008b28:	ec4b ab10 	vmov	d0, sl, fp
 8008b2c:	aa10      	add	r2, sp, #64	; 0x40
 8008b2e:	a911      	add	r1, sp, #68	; 0x44
 8008b30:	4620      	mov	r0, r4
 8008b32:	f001 f8b9 	bl	8009ca8 <__d2b>
 8008b36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008b3a:	ee08 0a10 	vmov	s16, r0
 8008b3e:	2d00      	cmp	r5, #0
 8008b40:	f000 8084 	beq.w	8008c4c <_dtoa_r+0x204>
 8008b44:	ee19 3a90 	vmov	r3, s19
 8008b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b50:	4656      	mov	r6, sl
 8008b52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008b5e:	4b74      	ldr	r3, [pc, #464]	; (8008d30 <_dtoa_r+0x2e8>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	4630      	mov	r0, r6
 8008b64:	4639      	mov	r1, r7
 8008b66:	f7f7 fb97 	bl	8000298 <__aeabi_dsub>
 8008b6a:	a365      	add	r3, pc, #404	; (adr r3, 8008d00 <_dtoa_r+0x2b8>)
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	f7f7 fd4a 	bl	8000608 <__aeabi_dmul>
 8008b74:	a364      	add	r3, pc, #400	; (adr r3, 8008d08 <_dtoa_r+0x2c0>)
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	f7f7 fb8f 	bl	800029c <__adddf3>
 8008b7e:	4606      	mov	r6, r0
 8008b80:	4628      	mov	r0, r5
 8008b82:	460f      	mov	r7, r1
 8008b84:	f7f7 fcd6 	bl	8000534 <__aeabi_i2d>
 8008b88:	a361      	add	r3, pc, #388	; (adr r3, 8008d10 <_dtoa_r+0x2c8>)
 8008b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8e:	f7f7 fd3b 	bl	8000608 <__aeabi_dmul>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4630      	mov	r0, r6
 8008b98:	4639      	mov	r1, r7
 8008b9a:	f7f7 fb7f 	bl	800029c <__adddf3>
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	460f      	mov	r7, r1
 8008ba2:	f7f7 ffe1 	bl	8000b68 <__aeabi_d2iz>
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	9000      	str	r0, [sp, #0]
 8008baa:	2300      	movs	r3, #0
 8008bac:	4630      	mov	r0, r6
 8008bae:	4639      	mov	r1, r7
 8008bb0:	f7f7 ff9c 	bl	8000aec <__aeabi_dcmplt>
 8008bb4:	b150      	cbz	r0, 8008bcc <_dtoa_r+0x184>
 8008bb6:	9800      	ldr	r0, [sp, #0]
 8008bb8:	f7f7 fcbc 	bl	8000534 <__aeabi_i2d>
 8008bbc:	4632      	mov	r2, r6
 8008bbe:	463b      	mov	r3, r7
 8008bc0:	f7f7 ff8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bc4:	b910      	cbnz	r0, 8008bcc <_dtoa_r+0x184>
 8008bc6:	9b00      	ldr	r3, [sp, #0]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	9b00      	ldr	r3, [sp, #0]
 8008bce:	2b16      	cmp	r3, #22
 8008bd0:	d85a      	bhi.n	8008c88 <_dtoa_r+0x240>
 8008bd2:	9a00      	ldr	r2, [sp, #0]
 8008bd4:	4b57      	ldr	r3, [pc, #348]	; (8008d34 <_dtoa_r+0x2ec>)
 8008bd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	ec51 0b19 	vmov	r0, r1, d9
 8008be2:	f7f7 ff83 	bl	8000aec <__aeabi_dcmplt>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d050      	beq.n	8008c8c <_dtoa_r+0x244>
 8008bea:	9b00      	ldr	r3, [sp, #0]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bf6:	1b5d      	subs	r5, r3, r5
 8008bf8:	1e6b      	subs	r3, r5, #1
 8008bfa:	9305      	str	r3, [sp, #20]
 8008bfc:	bf45      	ittet	mi
 8008bfe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008c02:	9304      	strmi	r3, [sp, #16]
 8008c04:	2300      	movpl	r3, #0
 8008c06:	2300      	movmi	r3, #0
 8008c08:	bf4c      	ite	mi
 8008c0a:	9305      	strmi	r3, [sp, #20]
 8008c0c:	9304      	strpl	r3, [sp, #16]
 8008c0e:	9b00      	ldr	r3, [sp, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	db3d      	blt.n	8008c90 <_dtoa_r+0x248>
 8008c14:	9b05      	ldr	r3, [sp, #20]
 8008c16:	9a00      	ldr	r2, [sp, #0]
 8008c18:	920a      	str	r2, [sp, #40]	; 0x28
 8008c1a:	4413      	add	r3, r2
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	9307      	str	r3, [sp, #28]
 8008c22:	9b06      	ldr	r3, [sp, #24]
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	f200 8089 	bhi.w	8008d3c <_dtoa_r+0x2f4>
 8008c2a:	2b05      	cmp	r3, #5
 8008c2c:	bfc4      	itt	gt
 8008c2e:	3b04      	subgt	r3, #4
 8008c30:	9306      	strgt	r3, [sp, #24]
 8008c32:	9b06      	ldr	r3, [sp, #24]
 8008c34:	f1a3 0302 	sub.w	r3, r3, #2
 8008c38:	bfcc      	ite	gt
 8008c3a:	2500      	movgt	r5, #0
 8008c3c:	2501      	movle	r5, #1
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	f200 8087 	bhi.w	8008d52 <_dtoa_r+0x30a>
 8008c44:	e8df f003 	tbb	[pc, r3]
 8008c48:	59383a2d 	.word	0x59383a2d
 8008c4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c50:	441d      	add	r5, r3
 8008c52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c56:	2b20      	cmp	r3, #32
 8008c58:	bfc1      	itttt	gt
 8008c5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c62:	fa0b f303 	lslgt.w	r3, fp, r3
 8008c66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c6a:	bfda      	itte	le
 8008c6c:	f1c3 0320 	rsble	r3, r3, #32
 8008c70:	fa06 f003 	lslle.w	r0, r6, r3
 8008c74:	4318      	orrgt	r0, r3
 8008c76:	f7f7 fc4d 	bl	8000514 <__aeabi_ui2d>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c82:	3d01      	subs	r5, #1
 8008c84:	930e      	str	r3, [sp, #56]	; 0x38
 8008c86:	e76a      	b.n	8008b5e <_dtoa_r+0x116>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e7b2      	b.n	8008bf2 <_dtoa_r+0x1aa>
 8008c8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c8e:	e7b1      	b.n	8008bf4 <_dtoa_r+0x1ac>
 8008c90:	9b04      	ldr	r3, [sp, #16]
 8008c92:	9a00      	ldr	r2, [sp, #0]
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	9304      	str	r3, [sp, #16]
 8008c98:	4253      	negs	r3, r2
 8008c9a:	9307      	str	r3, [sp, #28]
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008ca0:	e7bf      	b.n	8008c22 <_dtoa_r+0x1da>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	9308      	str	r3, [sp, #32]
 8008ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	dc55      	bgt.n	8008d58 <_dtoa_r+0x310>
 8008cac:	2301      	movs	r3, #1
 8008cae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8008cb6:	e00c      	b.n	8008cd2 <_dtoa_r+0x28a>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e7f3      	b.n	8008ca4 <_dtoa_r+0x25c>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cc0:	9308      	str	r3, [sp, #32]
 8008cc2:	9b00      	ldr	r3, [sp, #0]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	9302      	str	r3, [sp, #8]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	9303      	str	r3, [sp, #12]
 8008cce:	bfb8      	it	lt
 8008cd0:	2301      	movlt	r3, #1
 8008cd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	6042      	str	r2, [r0, #4]
 8008cd8:	2204      	movs	r2, #4
 8008cda:	f102 0614 	add.w	r6, r2, #20
 8008cde:	429e      	cmp	r6, r3
 8008ce0:	6841      	ldr	r1, [r0, #4]
 8008ce2:	d93d      	bls.n	8008d60 <_dtoa_r+0x318>
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 fcb7 	bl	8009658 <_Balloc>
 8008cea:	9001      	str	r0, [sp, #4]
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d13b      	bne.n	8008d68 <_dtoa_r+0x320>
 8008cf0:	4b11      	ldr	r3, [pc, #68]	; (8008d38 <_dtoa_r+0x2f0>)
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008cf8:	e6c0      	b.n	8008a7c <_dtoa_r+0x34>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e7df      	b.n	8008cbe <_dtoa_r+0x276>
 8008cfe:	bf00      	nop
 8008d00:	636f4361 	.word	0x636f4361
 8008d04:	3fd287a7 	.word	0x3fd287a7
 8008d08:	8b60c8b3 	.word	0x8b60c8b3
 8008d0c:	3fc68a28 	.word	0x3fc68a28
 8008d10:	509f79fb 	.word	0x509f79fb
 8008d14:	3fd34413 	.word	0x3fd34413
 8008d18:	080156d1 	.word	0x080156d1
 8008d1c:	080156e8 	.word	0x080156e8
 8008d20:	7ff00000 	.word	0x7ff00000
 8008d24:	080156cd 	.word	0x080156cd
 8008d28:	080156c4 	.word	0x080156c4
 8008d2c:	080156a1 	.word	0x080156a1
 8008d30:	3ff80000 	.word	0x3ff80000
 8008d34:	080157d8 	.word	0x080157d8
 8008d38:	08015743 	.word	0x08015743
 8008d3c:	2501      	movs	r5, #1
 8008d3e:	2300      	movs	r3, #0
 8008d40:	9306      	str	r3, [sp, #24]
 8008d42:	9508      	str	r5, [sp, #32]
 8008d44:	f04f 33ff 	mov.w	r3, #4294967295
 8008d48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2312      	movs	r3, #18
 8008d50:	e7b0      	b.n	8008cb4 <_dtoa_r+0x26c>
 8008d52:	2301      	movs	r3, #1
 8008d54:	9308      	str	r3, [sp, #32]
 8008d56:	e7f5      	b.n	8008d44 <_dtoa_r+0x2fc>
 8008d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d5e:	e7b8      	b.n	8008cd2 <_dtoa_r+0x28a>
 8008d60:	3101      	adds	r1, #1
 8008d62:	6041      	str	r1, [r0, #4]
 8008d64:	0052      	lsls	r2, r2, #1
 8008d66:	e7b8      	b.n	8008cda <_dtoa_r+0x292>
 8008d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d6a:	9a01      	ldr	r2, [sp, #4]
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	9b03      	ldr	r3, [sp, #12]
 8008d70:	2b0e      	cmp	r3, #14
 8008d72:	f200 809d 	bhi.w	8008eb0 <_dtoa_r+0x468>
 8008d76:	2d00      	cmp	r5, #0
 8008d78:	f000 809a 	beq.w	8008eb0 <_dtoa_r+0x468>
 8008d7c:	9b00      	ldr	r3, [sp, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	dd32      	ble.n	8008de8 <_dtoa_r+0x3a0>
 8008d82:	4ab7      	ldr	r2, [pc, #732]	; (8009060 <_dtoa_r+0x618>)
 8008d84:	f003 030f 	and.w	r3, r3, #15
 8008d88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d90:	9b00      	ldr	r3, [sp, #0]
 8008d92:	05d8      	lsls	r0, r3, #23
 8008d94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d98:	d516      	bpl.n	8008dc8 <_dtoa_r+0x380>
 8008d9a:	4bb2      	ldr	r3, [pc, #712]	; (8009064 <_dtoa_r+0x61c>)
 8008d9c:	ec51 0b19 	vmov	r0, r1, d9
 8008da0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008da4:	f7f7 fd5a 	bl	800085c <__aeabi_ddiv>
 8008da8:	f007 070f 	and.w	r7, r7, #15
 8008dac:	4682      	mov	sl, r0
 8008dae:	468b      	mov	fp, r1
 8008db0:	2503      	movs	r5, #3
 8008db2:	4eac      	ldr	r6, [pc, #688]	; (8009064 <_dtoa_r+0x61c>)
 8008db4:	b957      	cbnz	r7, 8008dcc <_dtoa_r+0x384>
 8008db6:	4642      	mov	r2, r8
 8008db8:	464b      	mov	r3, r9
 8008dba:	4650      	mov	r0, sl
 8008dbc:	4659      	mov	r1, fp
 8008dbe:	f7f7 fd4d 	bl	800085c <__aeabi_ddiv>
 8008dc2:	4682      	mov	sl, r0
 8008dc4:	468b      	mov	fp, r1
 8008dc6:	e028      	b.n	8008e1a <_dtoa_r+0x3d2>
 8008dc8:	2502      	movs	r5, #2
 8008dca:	e7f2      	b.n	8008db2 <_dtoa_r+0x36a>
 8008dcc:	07f9      	lsls	r1, r7, #31
 8008dce:	d508      	bpl.n	8008de2 <_dtoa_r+0x39a>
 8008dd0:	4640      	mov	r0, r8
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dd8:	f7f7 fc16 	bl	8000608 <__aeabi_dmul>
 8008ddc:	3501      	adds	r5, #1
 8008dde:	4680      	mov	r8, r0
 8008de0:	4689      	mov	r9, r1
 8008de2:	107f      	asrs	r7, r7, #1
 8008de4:	3608      	adds	r6, #8
 8008de6:	e7e5      	b.n	8008db4 <_dtoa_r+0x36c>
 8008de8:	f000 809b 	beq.w	8008f22 <_dtoa_r+0x4da>
 8008dec:	9b00      	ldr	r3, [sp, #0]
 8008dee:	4f9d      	ldr	r7, [pc, #628]	; (8009064 <_dtoa_r+0x61c>)
 8008df0:	425e      	negs	r6, r3
 8008df2:	4b9b      	ldr	r3, [pc, #620]	; (8009060 <_dtoa_r+0x618>)
 8008df4:	f006 020f 	and.w	r2, r6, #15
 8008df8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	ec51 0b19 	vmov	r0, r1, d9
 8008e04:	f7f7 fc00 	bl	8000608 <__aeabi_dmul>
 8008e08:	1136      	asrs	r6, r6, #4
 8008e0a:	4682      	mov	sl, r0
 8008e0c:	468b      	mov	fp, r1
 8008e0e:	2300      	movs	r3, #0
 8008e10:	2502      	movs	r5, #2
 8008e12:	2e00      	cmp	r6, #0
 8008e14:	d17a      	bne.n	8008f0c <_dtoa_r+0x4c4>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1d3      	bne.n	8008dc2 <_dtoa_r+0x37a>
 8008e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 8082 	beq.w	8008f26 <_dtoa_r+0x4de>
 8008e22:	4b91      	ldr	r3, [pc, #580]	; (8009068 <_dtoa_r+0x620>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	4650      	mov	r0, sl
 8008e28:	4659      	mov	r1, fp
 8008e2a:	f7f7 fe5f 	bl	8000aec <__aeabi_dcmplt>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d079      	beq.n	8008f26 <_dtoa_r+0x4de>
 8008e32:	9b03      	ldr	r3, [sp, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d076      	beq.n	8008f26 <_dtoa_r+0x4de>
 8008e38:	9b02      	ldr	r3, [sp, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dd36      	ble.n	8008eac <_dtoa_r+0x464>
 8008e3e:	9b00      	ldr	r3, [sp, #0]
 8008e40:	4650      	mov	r0, sl
 8008e42:	4659      	mov	r1, fp
 8008e44:	1e5f      	subs	r7, r3, #1
 8008e46:	2200      	movs	r2, #0
 8008e48:	4b88      	ldr	r3, [pc, #544]	; (800906c <_dtoa_r+0x624>)
 8008e4a:	f7f7 fbdd 	bl	8000608 <__aeabi_dmul>
 8008e4e:	9e02      	ldr	r6, [sp, #8]
 8008e50:	4682      	mov	sl, r0
 8008e52:	468b      	mov	fp, r1
 8008e54:	3501      	adds	r5, #1
 8008e56:	4628      	mov	r0, r5
 8008e58:	f7f7 fb6c 	bl	8000534 <__aeabi_i2d>
 8008e5c:	4652      	mov	r2, sl
 8008e5e:	465b      	mov	r3, fp
 8008e60:	f7f7 fbd2 	bl	8000608 <__aeabi_dmul>
 8008e64:	4b82      	ldr	r3, [pc, #520]	; (8009070 <_dtoa_r+0x628>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	f7f7 fa18 	bl	800029c <__adddf3>
 8008e6c:	46d0      	mov	r8, sl
 8008e6e:	46d9      	mov	r9, fp
 8008e70:	4682      	mov	sl, r0
 8008e72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008e76:	2e00      	cmp	r6, #0
 8008e78:	d158      	bne.n	8008f2c <_dtoa_r+0x4e4>
 8008e7a:	4b7e      	ldr	r3, [pc, #504]	; (8009074 <_dtoa_r+0x62c>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4640      	mov	r0, r8
 8008e80:	4649      	mov	r1, r9
 8008e82:	f7f7 fa09 	bl	8000298 <__aeabi_dsub>
 8008e86:	4652      	mov	r2, sl
 8008e88:	465b      	mov	r3, fp
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	4689      	mov	r9, r1
 8008e8e:	f7f7 fe4b 	bl	8000b28 <__aeabi_dcmpgt>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	f040 8295 	bne.w	80093c2 <_dtoa_r+0x97a>
 8008e98:	4652      	mov	r2, sl
 8008e9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e9e:	4640      	mov	r0, r8
 8008ea0:	4649      	mov	r1, r9
 8008ea2:	f7f7 fe23 	bl	8000aec <__aeabi_dcmplt>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	f040 8289 	bne.w	80093be <_dtoa_r+0x976>
 8008eac:	ec5b ab19 	vmov	sl, fp, d9
 8008eb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f2c0 8148 	blt.w	8009148 <_dtoa_r+0x700>
 8008eb8:	9a00      	ldr	r2, [sp, #0]
 8008eba:	2a0e      	cmp	r2, #14
 8008ebc:	f300 8144 	bgt.w	8009148 <_dtoa_r+0x700>
 8008ec0:	4b67      	ldr	r3, [pc, #412]	; (8009060 <_dtoa_r+0x618>)
 8008ec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ec6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f280 80d5 	bge.w	800907c <_dtoa_r+0x634>
 8008ed2:	9b03      	ldr	r3, [sp, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f300 80d1 	bgt.w	800907c <_dtoa_r+0x634>
 8008eda:	f040 826f 	bne.w	80093bc <_dtoa_r+0x974>
 8008ede:	4b65      	ldr	r3, [pc, #404]	; (8009074 <_dtoa_r+0x62c>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	f7f7 fb8f 	bl	8000608 <__aeabi_dmul>
 8008eea:	4652      	mov	r2, sl
 8008eec:	465b      	mov	r3, fp
 8008eee:	f7f7 fe11 	bl	8000b14 <__aeabi_dcmpge>
 8008ef2:	9e03      	ldr	r6, [sp, #12]
 8008ef4:	4637      	mov	r7, r6
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f040 8245 	bne.w	8009386 <_dtoa_r+0x93e>
 8008efc:	9d01      	ldr	r5, [sp, #4]
 8008efe:	2331      	movs	r3, #49	; 0x31
 8008f00:	f805 3b01 	strb.w	r3, [r5], #1
 8008f04:	9b00      	ldr	r3, [sp, #0]
 8008f06:	3301      	adds	r3, #1
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	e240      	b.n	800938e <_dtoa_r+0x946>
 8008f0c:	07f2      	lsls	r2, r6, #31
 8008f0e:	d505      	bpl.n	8008f1c <_dtoa_r+0x4d4>
 8008f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f14:	f7f7 fb78 	bl	8000608 <__aeabi_dmul>
 8008f18:	3501      	adds	r5, #1
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	1076      	asrs	r6, r6, #1
 8008f1e:	3708      	adds	r7, #8
 8008f20:	e777      	b.n	8008e12 <_dtoa_r+0x3ca>
 8008f22:	2502      	movs	r5, #2
 8008f24:	e779      	b.n	8008e1a <_dtoa_r+0x3d2>
 8008f26:	9f00      	ldr	r7, [sp, #0]
 8008f28:	9e03      	ldr	r6, [sp, #12]
 8008f2a:	e794      	b.n	8008e56 <_dtoa_r+0x40e>
 8008f2c:	9901      	ldr	r1, [sp, #4]
 8008f2e:	4b4c      	ldr	r3, [pc, #304]	; (8009060 <_dtoa_r+0x618>)
 8008f30:	4431      	add	r1, r6
 8008f32:	910d      	str	r1, [sp, #52]	; 0x34
 8008f34:	9908      	ldr	r1, [sp, #32]
 8008f36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f3e:	2900      	cmp	r1, #0
 8008f40:	d043      	beq.n	8008fca <_dtoa_r+0x582>
 8008f42:	494d      	ldr	r1, [pc, #308]	; (8009078 <_dtoa_r+0x630>)
 8008f44:	2000      	movs	r0, #0
 8008f46:	f7f7 fc89 	bl	800085c <__aeabi_ddiv>
 8008f4a:	4652      	mov	r2, sl
 8008f4c:	465b      	mov	r3, fp
 8008f4e:	f7f7 f9a3 	bl	8000298 <__aeabi_dsub>
 8008f52:	9d01      	ldr	r5, [sp, #4]
 8008f54:	4682      	mov	sl, r0
 8008f56:	468b      	mov	fp, r1
 8008f58:	4649      	mov	r1, r9
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	f7f7 fe04 	bl	8000b68 <__aeabi_d2iz>
 8008f60:	4606      	mov	r6, r0
 8008f62:	f7f7 fae7 	bl	8000534 <__aeabi_i2d>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	f7f7 f993 	bl	8000298 <__aeabi_dsub>
 8008f72:	3630      	adds	r6, #48	; 0x30
 8008f74:	f805 6b01 	strb.w	r6, [r5], #1
 8008f78:	4652      	mov	r2, sl
 8008f7a:	465b      	mov	r3, fp
 8008f7c:	4680      	mov	r8, r0
 8008f7e:	4689      	mov	r9, r1
 8008f80:	f7f7 fdb4 	bl	8000aec <__aeabi_dcmplt>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d163      	bne.n	8009050 <_dtoa_r+0x608>
 8008f88:	4642      	mov	r2, r8
 8008f8a:	464b      	mov	r3, r9
 8008f8c:	4936      	ldr	r1, [pc, #216]	; (8009068 <_dtoa_r+0x620>)
 8008f8e:	2000      	movs	r0, #0
 8008f90:	f7f7 f982 	bl	8000298 <__aeabi_dsub>
 8008f94:	4652      	mov	r2, sl
 8008f96:	465b      	mov	r3, fp
 8008f98:	f7f7 fda8 	bl	8000aec <__aeabi_dcmplt>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	f040 80b5 	bne.w	800910c <_dtoa_r+0x6c4>
 8008fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fa4:	429d      	cmp	r5, r3
 8008fa6:	d081      	beq.n	8008eac <_dtoa_r+0x464>
 8008fa8:	4b30      	ldr	r3, [pc, #192]	; (800906c <_dtoa_r+0x624>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	4650      	mov	r0, sl
 8008fae:	4659      	mov	r1, fp
 8008fb0:	f7f7 fb2a 	bl	8000608 <__aeabi_dmul>
 8008fb4:	4b2d      	ldr	r3, [pc, #180]	; (800906c <_dtoa_r+0x624>)
 8008fb6:	4682      	mov	sl, r0
 8008fb8:	468b      	mov	fp, r1
 8008fba:	4640      	mov	r0, r8
 8008fbc:	4649      	mov	r1, r9
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f7f7 fb22 	bl	8000608 <__aeabi_dmul>
 8008fc4:	4680      	mov	r8, r0
 8008fc6:	4689      	mov	r9, r1
 8008fc8:	e7c6      	b.n	8008f58 <_dtoa_r+0x510>
 8008fca:	4650      	mov	r0, sl
 8008fcc:	4659      	mov	r1, fp
 8008fce:	f7f7 fb1b 	bl	8000608 <__aeabi_dmul>
 8008fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fd4:	9d01      	ldr	r5, [sp, #4]
 8008fd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fd8:	4682      	mov	sl, r0
 8008fda:	468b      	mov	fp, r1
 8008fdc:	4649      	mov	r1, r9
 8008fde:	4640      	mov	r0, r8
 8008fe0:	f7f7 fdc2 	bl	8000b68 <__aeabi_d2iz>
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	f7f7 faa5 	bl	8000534 <__aeabi_i2d>
 8008fea:	3630      	adds	r6, #48	; 0x30
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	f7f7 f950 	bl	8000298 <__aeabi_dsub>
 8008ff8:	f805 6b01 	strb.w	r6, [r5], #1
 8008ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ffe:	429d      	cmp	r5, r3
 8009000:	4680      	mov	r8, r0
 8009002:	4689      	mov	r9, r1
 8009004:	f04f 0200 	mov.w	r2, #0
 8009008:	d124      	bne.n	8009054 <_dtoa_r+0x60c>
 800900a:	4b1b      	ldr	r3, [pc, #108]	; (8009078 <_dtoa_r+0x630>)
 800900c:	4650      	mov	r0, sl
 800900e:	4659      	mov	r1, fp
 8009010:	f7f7 f944 	bl	800029c <__adddf3>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4640      	mov	r0, r8
 800901a:	4649      	mov	r1, r9
 800901c:	f7f7 fd84 	bl	8000b28 <__aeabi_dcmpgt>
 8009020:	2800      	cmp	r0, #0
 8009022:	d173      	bne.n	800910c <_dtoa_r+0x6c4>
 8009024:	4652      	mov	r2, sl
 8009026:	465b      	mov	r3, fp
 8009028:	4913      	ldr	r1, [pc, #76]	; (8009078 <_dtoa_r+0x630>)
 800902a:	2000      	movs	r0, #0
 800902c:	f7f7 f934 	bl	8000298 <__aeabi_dsub>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4640      	mov	r0, r8
 8009036:	4649      	mov	r1, r9
 8009038:	f7f7 fd58 	bl	8000aec <__aeabi_dcmplt>
 800903c:	2800      	cmp	r0, #0
 800903e:	f43f af35 	beq.w	8008eac <_dtoa_r+0x464>
 8009042:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009044:	1e6b      	subs	r3, r5, #1
 8009046:	930f      	str	r3, [sp, #60]	; 0x3c
 8009048:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800904c:	2b30      	cmp	r3, #48	; 0x30
 800904e:	d0f8      	beq.n	8009042 <_dtoa_r+0x5fa>
 8009050:	9700      	str	r7, [sp, #0]
 8009052:	e049      	b.n	80090e8 <_dtoa_r+0x6a0>
 8009054:	4b05      	ldr	r3, [pc, #20]	; (800906c <_dtoa_r+0x624>)
 8009056:	f7f7 fad7 	bl	8000608 <__aeabi_dmul>
 800905a:	4680      	mov	r8, r0
 800905c:	4689      	mov	r9, r1
 800905e:	e7bd      	b.n	8008fdc <_dtoa_r+0x594>
 8009060:	080157d8 	.word	0x080157d8
 8009064:	080157b0 	.word	0x080157b0
 8009068:	3ff00000 	.word	0x3ff00000
 800906c:	40240000 	.word	0x40240000
 8009070:	401c0000 	.word	0x401c0000
 8009074:	40140000 	.word	0x40140000
 8009078:	3fe00000 	.word	0x3fe00000
 800907c:	9d01      	ldr	r5, [sp, #4]
 800907e:	4656      	mov	r6, sl
 8009080:	465f      	mov	r7, fp
 8009082:	4642      	mov	r2, r8
 8009084:	464b      	mov	r3, r9
 8009086:	4630      	mov	r0, r6
 8009088:	4639      	mov	r1, r7
 800908a:	f7f7 fbe7 	bl	800085c <__aeabi_ddiv>
 800908e:	f7f7 fd6b 	bl	8000b68 <__aeabi_d2iz>
 8009092:	4682      	mov	sl, r0
 8009094:	f7f7 fa4e 	bl	8000534 <__aeabi_i2d>
 8009098:	4642      	mov	r2, r8
 800909a:	464b      	mov	r3, r9
 800909c:	f7f7 fab4 	bl	8000608 <__aeabi_dmul>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4630      	mov	r0, r6
 80090a6:	4639      	mov	r1, r7
 80090a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80090ac:	f7f7 f8f4 	bl	8000298 <__aeabi_dsub>
 80090b0:	f805 6b01 	strb.w	r6, [r5], #1
 80090b4:	9e01      	ldr	r6, [sp, #4]
 80090b6:	9f03      	ldr	r7, [sp, #12]
 80090b8:	1bae      	subs	r6, r5, r6
 80090ba:	42b7      	cmp	r7, r6
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	d135      	bne.n	800912e <_dtoa_r+0x6e6>
 80090c2:	f7f7 f8eb 	bl	800029c <__adddf3>
 80090c6:	4642      	mov	r2, r8
 80090c8:	464b      	mov	r3, r9
 80090ca:	4606      	mov	r6, r0
 80090cc:	460f      	mov	r7, r1
 80090ce:	f7f7 fd2b 	bl	8000b28 <__aeabi_dcmpgt>
 80090d2:	b9d0      	cbnz	r0, 800910a <_dtoa_r+0x6c2>
 80090d4:	4642      	mov	r2, r8
 80090d6:	464b      	mov	r3, r9
 80090d8:	4630      	mov	r0, r6
 80090da:	4639      	mov	r1, r7
 80090dc:	f7f7 fcfc 	bl	8000ad8 <__aeabi_dcmpeq>
 80090e0:	b110      	cbz	r0, 80090e8 <_dtoa_r+0x6a0>
 80090e2:	f01a 0f01 	tst.w	sl, #1
 80090e6:	d110      	bne.n	800910a <_dtoa_r+0x6c2>
 80090e8:	4620      	mov	r0, r4
 80090ea:	ee18 1a10 	vmov	r1, s16
 80090ee:	f000 faf3 	bl	80096d8 <_Bfree>
 80090f2:	2300      	movs	r3, #0
 80090f4:	9800      	ldr	r0, [sp, #0]
 80090f6:	702b      	strb	r3, [r5, #0]
 80090f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090fa:	3001      	adds	r0, #1
 80090fc:	6018      	str	r0, [r3, #0]
 80090fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009100:	2b00      	cmp	r3, #0
 8009102:	f43f acf1 	beq.w	8008ae8 <_dtoa_r+0xa0>
 8009106:	601d      	str	r5, [r3, #0]
 8009108:	e4ee      	b.n	8008ae8 <_dtoa_r+0xa0>
 800910a:	9f00      	ldr	r7, [sp, #0]
 800910c:	462b      	mov	r3, r5
 800910e:	461d      	mov	r5, r3
 8009110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009114:	2a39      	cmp	r2, #57	; 0x39
 8009116:	d106      	bne.n	8009126 <_dtoa_r+0x6de>
 8009118:	9a01      	ldr	r2, [sp, #4]
 800911a:	429a      	cmp	r2, r3
 800911c:	d1f7      	bne.n	800910e <_dtoa_r+0x6c6>
 800911e:	9901      	ldr	r1, [sp, #4]
 8009120:	2230      	movs	r2, #48	; 0x30
 8009122:	3701      	adds	r7, #1
 8009124:	700a      	strb	r2, [r1, #0]
 8009126:	781a      	ldrb	r2, [r3, #0]
 8009128:	3201      	adds	r2, #1
 800912a:	701a      	strb	r2, [r3, #0]
 800912c:	e790      	b.n	8009050 <_dtoa_r+0x608>
 800912e:	4ba6      	ldr	r3, [pc, #664]	; (80093c8 <_dtoa_r+0x980>)
 8009130:	2200      	movs	r2, #0
 8009132:	f7f7 fa69 	bl	8000608 <__aeabi_dmul>
 8009136:	2200      	movs	r2, #0
 8009138:	2300      	movs	r3, #0
 800913a:	4606      	mov	r6, r0
 800913c:	460f      	mov	r7, r1
 800913e:	f7f7 fccb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009142:	2800      	cmp	r0, #0
 8009144:	d09d      	beq.n	8009082 <_dtoa_r+0x63a>
 8009146:	e7cf      	b.n	80090e8 <_dtoa_r+0x6a0>
 8009148:	9a08      	ldr	r2, [sp, #32]
 800914a:	2a00      	cmp	r2, #0
 800914c:	f000 80d7 	beq.w	80092fe <_dtoa_r+0x8b6>
 8009150:	9a06      	ldr	r2, [sp, #24]
 8009152:	2a01      	cmp	r2, #1
 8009154:	f300 80ba 	bgt.w	80092cc <_dtoa_r+0x884>
 8009158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800915a:	2a00      	cmp	r2, #0
 800915c:	f000 80b2 	beq.w	80092c4 <_dtoa_r+0x87c>
 8009160:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009164:	9e07      	ldr	r6, [sp, #28]
 8009166:	9d04      	ldr	r5, [sp, #16]
 8009168:	9a04      	ldr	r2, [sp, #16]
 800916a:	441a      	add	r2, r3
 800916c:	9204      	str	r2, [sp, #16]
 800916e:	9a05      	ldr	r2, [sp, #20]
 8009170:	2101      	movs	r1, #1
 8009172:	441a      	add	r2, r3
 8009174:	4620      	mov	r0, r4
 8009176:	9205      	str	r2, [sp, #20]
 8009178:	f000 fb66 	bl	8009848 <__i2b>
 800917c:	4607      	mov	r7, r0
 800917e:	2d00      	cmp	r5, #0
 8009180:	dd0c      	ble.n	800919c <_dtoa_r+0x754>
 8009182:	9b05      	ldr	r3, [sp, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	dd09      	ble.n	800919c <_dtoa_r+0x754>
 8009188:	42ab      	cmp	r3, r5
 800918a:	9a04      	ldr	r2, [sp, #16]
 800918c:	bfa8      	it	ge
 800918e:	462b      	movge	r3, r5
 8009190:	1ad2      	subs	r2, r2, r3
 8009192:	9204      	str	r2, [sp, #16]
 8009194:	9a05      	ldr	r2, [sp, #20]
 8009196:	1aed      	subs	r5, r5, r3
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	9305      	str	r3, [sp, #20]
 800919c:	9b07      	ldr	r3, [sp, #28]
 800919e:	b31b      	cbz	r3, 80091e8 <_dtoa_r+0x7a0>
 80091a0:	9b08      	ldr	r3, [sp, #32]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 80af 	beq.w	8009306 <_dtoa_r+0x8be>
 80091a8:	2e00      	cmp	r6, #0
 80091aa:	dd13      	ble.n	80091d4 <_dtoa_r+0x78c>
 80091ac:	4639      	mov	r1, r7
 80091ae:	4632      	mov	r2, r6
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fc09 	bl	80099c8 <__pow5mult>
 80091b6:	ee18 2a10 	vmov	r2, s16
 80091ba:	4601      	mov	r1, r0
 80091bc:	4607      	mov	r7, r0
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 fb58 	bl	8009874 <__multiply>
 80091c4:	ee18 1a10 	vmov	r1, s16
 80091c8:	4680      	mov	r8, r0
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 fa84 	bl	80096d8 <_Bfree>
 80091d0:	ee08 8a10 	vmov	s16, r8
 80091d4:	9b07      	ldr	r3, [sp, #28]
 80091d6:	1b9a      	subs	r2, r3, r6
 80091d8:	d006      	beq.n	80091e8 <_dtoa_r+0x7a0>
 80091da:	ee18 1a10 	vmov	r1, s16
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 fbf2 	bl	80099c8 <__pow5mult>
 80091e4:	ee08 0a10 	vmov	s16, r0
 80091e8:	2101      	movs	r1, #1
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 fb2c 	bl	8009848 <__i2b>
 80091f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	4606      	mov	r6, r0
 80091f6:	f340 8088 	ble.w	800930a <_dtoa_r+0x8c2>
 80091fa:	461a      	mov	r2, r3
 80091fc:	4601      	mov	r1, r0
 80091fe:	4620      	mov	r0, r4
 8009200:	f000 fbe2 	bl	80099c8 <__pow5mult>
 8009204:	9b06      	ldr	r3, [sp, #24]
 8009206:	2b01      	cmp	r3, #1
 8009208:	4606      	mov	r6, r0
 800920a:	f340 8081 	ble.w	8009310 <_dtoa_r+0x8c8>
 800920e:	f04f 0800 	mov.w	r8, #0
 8009212:	6933      	ldr	r3, [r6, #16]
 8009214:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009218:	6918      	ldr	r0, [r3, #16]
 800921a:	f000 fac5 	bl	80097a8 <__hi0bits>
 800921e:	f1c0 0020 	rsb	r0, r0, #32
 8009222:	9b05      	ldr	r3, [sp, #20]
 8009224:	4418      	add	r0, r3
 8009226:	f010 001f 	ands.w	r0, r0, #31
 800922a:	f000 8092 	beq.w	8009352 <_dtoa_r+0x90a>
 800922e:	f1c0 0320 	rsb	r3, r0, #32
 8009232:	2b04      	cmp	r3, #4
 8009234:	f340 808a 	ble.w	800934c <_dtoa_r+0x904>
 8009238:	f1c0 001c 	rsb	r0, r0, #28
 800923c:	9b04      	ldr	r3, [sp, #16]
 800923e:	4403      	add	r3, r0
 8009240:	9304      	str	r3, [sp, #16]
 8009242:	9b05      	ldr	r3, [sp, #20]
 8009244:	4403      	add	r3, r0
 8009246:	4405      	add	r5, r0
 8009248:	9305      	str	r3, [sp, #20]
 800924a:	9b04      	ldr	r3, [sp, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	dd07      	ble.n	8009260 <_dtoa_r+0x818>
 8009250:	ee18 1a10 	vmov	r1, s16
 8009254:	461a      	mov	r2, r3
 8009256:	4620      	mov	r0, r4
 8009258:	f000 fc10 	bl	8009a7c <__lshift>
 800925c:	ee08 0a10 	vmov	s16, r0
 8009260:	9b05      	ldr	r3, [sp, #20]
 8009262:	2b00      	cmp	r3, #0
 8009264:	dd05      	ble.n	8009272 <_dtoa_r+0x82a>
 8009266:	4631      	mov	r1, r6
 8009268:	461a      	mov	r2, r3
 800926a:	4620      	mov	r0, r4
 800926c:	f000 fc06 	bl	8009a7c <__lshift>
 8009270:	4606      	mov	r6, r0
 8009272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d06e      	beq.n	8009356 <_dtoa_r+0x90e>
 8009278:	ee18 0a10 	vmov	r0, s16
 800927c:	4631      	mov	r1, r6
 800927e:	f000 fc6d 	bl	8009b5c <__mcmp>
 8009282:	2800      	cmp	r0, #0
 8009284:	da67      	bge.n	8009356 <_dtoa_r+0x90e>
 8009286:	9b00      	ldr	r3, [sp, #0]
 8009288:	3b01      	subs	r3, #1
 800928a:	ee18 1a10 	vmov	r1, s16
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	220a      	movs	r2, #10
 8009292:	2300      	movs	r3, #0
 8009294:	4620      	mov	r0, r4
 8009296:	f000 fa41 	bl	800971c <__multadd>
 800929a:	9b08      	ldr	r3, [sp, #32]
 800929c:	ee08 0a10 	vmov	s16, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 81b1 	beq.w	8009608 <_dtoa_r+0xbc0>
 80092a6:	2300      	movs	r3, #0
 80092a8:	4639      	mov	r1, r7
 80092aa:	220a      	movs	r2, #10
 80092ac:	4620      	mov	r0, r4
 80092ae:	f000 fa35 	bl	800971c <__multadd>
 80092b2:	9b02      	ldr	r3, [sp, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	4607      	mov	r7, r0
 80092b8:	f300 808e 	bgt.w	80093d8 <_dtoa_r+0x990>
 80092bc:	9b06      	ldr	r3, [sp, #24]
 80092be:	2b02      	cmp	r3, #2
 80092c0:	dc51      	bgt.n	8009366 <_dtoa_r+0x91e>
 80092c2:	e089      	b.n	80093d8 <_dtoa_r+0x990>
 80092c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80092ca:	e74b      	b.n	8009164 <_dtoa_r+0x71c>
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	1e5e      	subs	r6, r3, #1
 80092d0:	9b07      	ldr	r3, [sp, #28]
 80092d2:	42b3      	cmp	r3, r6
 80092d4:	bfbf      	itttt	lt
 80092d6:	9b07      	ldrlt	r3, [sp, #28]
 80092d8:	9607      	strlt	r6, [sp, #28]
 80092da:	1af2      	sublt	r2, r6, r3
 80092dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80092de:	bfb6      	itet	lt
 80092e0:	189b      	addlt	r3, r3, r2
 80092e2:	1b9e      	subge	r6, r3, r6
 80092e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80092e6:	9b03      	ldr	r3, [sp, #12]
 80092e8:	bfb8      	it	lt
 80092ea:	2600      	movlt	r6, #0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	bfb7      	itett	lt
 80092f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80092f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80092f8:	1a9d      	sublt	r5, r3, r2
 80092fa:	2300      	movlt	r3, #0
 80092fc:	e734      	b.n	8009168 <_dtoa_r+0x720>
 80092fe:	9e07      	ldr	r6, [sp, #28]
 8009300:	9d04      	ldr	r5, [sp, #16]
 8009302:	9f08      	ldr	r7, [sp, #32]
 8009304:	e73b      	b.n	800917e <_dtoa_r+0x736>
 8009306:	9a07      	ldr	r2, [sp, #28]
 8009308:	e767      	b.n	80091da <_dtoa_r+0x792>
 800930a:	9b06      	ldr	r3, [sp, #24]
 800930c:	2b01      	cmp	r3, #1
 800930e:	dc18      	bgt.n	8009342 <_dtoa_r+0x8fa>
 8009310:	f1ba 0f00 	cmp.w	sl, #0
 8009314:	d115      	bne.n	8009342 <_dtoa_r+0x8fa>
 8009316:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800931a:	b993      	cbnz	r3, 8009342 <_dtoa_r+0x8fa>
 800931c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009320:	0d1b      	lsrs	r3, r3, #20
 8009322:	051b      	lsls	r3, r3, #20
 8009324:	b183      	cbz	r3, 8009348 <_dtoa_r+0x900>
 8009326:	9b04      	ldr	r3, [sp, #16]
 8009328:	3301      	adds	r3, #1
 800932a:	9304      	str	r3, [sp, #16]
 800932c:	9b05      	ldr	r3, [sp, #20]
 800932e:	3301      	adds	r3, #1
 8009330:	9305      	str	r3, [sp, #20]
 8009332:	f04f 0801 	mov.w	r8, #1
 8009336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009338:	2b00      	cmp	r3, #0
 800933a:	f47f af6a 	bne.w	8009212 <_dtoa_r+0x7ca>
 800933e:	2001      	movs	r0, #1
 8009340:	e76f      	b.n	8009222 <_dtoa_r+0x7da>
 8009342:	f04f 0800 	mov.w	r8, #0
 8009346:	e7f6      	b.n	8009336 <_dtoa_r+0x8ee>
 8009348:	4698      	mov	r8, r3
 800934a:	e7f4      	b.n	8009336 <_dtoa_r+0x8ee>
 800934c:	f43f af7d 	beq.w	800924a <_dtoa_r+0x802>
 8009350:	4618      	mov	r0, r3
 8009352:	301c      	adds	r0, #28
 8009354:	e772      	b.n	800923c <_dtoa_r+0x7f4>
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	dc37      	bgt.n	80093cc <_dtoa_r+0x984>
 800935c:	9b06      	ldr	r3, [sp, #24]
 800935e:	2b02      	cmp	r3, #2
 8009360:	dd34      	ble.n	80093cc <_dtoa_r+0x984>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	9302      	str	r3, [sp, #8]
 8009366:	9b02      	ldr	r3, [sp, #8]
 8009368:	b96b      	cbnz	r3, 8009386 <_dtoa_r+0x93e>
 800936a:	4631      	mov	r1, r6
 800936c:	2205      	movs	r2, #5
 800936e:	4620      	mov	r0, r4
 8009370:	f000 f9d4 	bl	800971c <__multadd>
 8009374:	4601      	mov	r1, r0
 8009376:	4606      	mov	r6, r0
 8009378:	ee18 0a10 	vmov	r0, s16
 800937c:	f000 fbee 	bl	8009b5c <__mcmp>
 8009380:	2800      	cmp	r0, #0
 8009382:	f73f adbb 	bgt.w	8008efc <_dtoa_r+0x4b4>
 8009386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009388:	9d01      	ldr	r5, [sp, #4]
 800938a:	43db      	mvns	r3, r3
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	f04f 0800 	mov.w	r8, #0
 8009392:	4631      	mov	r1, r6
 8009394:	4620      	mov	r0, r4
 8009396:	f000 f99f 	bl	80096d8 <_Bfree>
 800939a:	2f00      	cmp	r7, #0
 800939c:	f43f aea4 	beq.w	80090e8 <_dtoa_r+0x6a0>
 80093a0:	f1b8 0f00 	cmp.w	r8, #0
 80093a4:	d005      	beq.n	80093b2 <_dtoa_r+0x96a>
 80093a6:	45b8      	cmp	r8, r7
 80093a8:	d003      	beq.n	80093b2 <_dtoa_r+0x96a>
 80093aa:	4641      	mov	r1, r8
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 f993 	bl	80096d8 <_Bfree>
 80093b2:	4639      	mov	r1, r7
 80093b4:	4620      	mov	r0, r4
 80093b6:	f000 f98f 	bl	80096d8 <_Bfree>
 80093ba:	e695      	b.n	80090e8 <_dtoa_r+0x6a0>
 80093bc:	2600      	movs	r6, #0
 80093be:	4637      	mov	r7, r6
 80093c0:	e7e1      	b.n	8009386 <_dtoa_r+0x93e>
 80093c2:	9700      	str	r7, [sp, #0]
 80093c4:	4637      	mov	r7, r6
 80093c6:	e599      	b.n	8008efc <_dtoa_r+0x4b4>
 80093c8:	40240000 	.word	0x40240000
 80093cc:	9b08      	ldr	r3, [sp, #32]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 80ca 	beq.w	8009568 <_dtoa_r+0xb20>
 80093d4:	9b03      	ldr	r3, [sp, #12]
 80093d6:	9302      	str	r3, [sp, #8]
 80093d8:	2d00      	cmp	r5, #0
 80093da:	dd05      	ble.n	80093e8 <_dtoa_r+0x9a0>
 80093dc:	4639      	mov	r1, r7
 80093de:	462a      	mov	r2, r5
 80093e0:	4620      	mov	r0, r4
 80093e2:	f000 fb4b 	bl	8009a7c <__lshift>
 80093e6:	4607      	mov	r7, r0
 80093e8:	f1b8 0f00 	cmp.w	r8, #0
 80093ec:	d05b      	beq.n	80094a6 <_dtoa_r+0xa5e>
 80093ee:	6879      	ldr	r1, [r7, #4]
 80093f0:	4620      	mov	r0, r4
 80093f2:	f000 f931 	bl	8009658 <_Balloc>
 80093f6:	4605      	mov	r5, r0
 80093f8:	b928      	cbnz	r0, 8009406 <_dtoa_r+0x9be>
 80093fa:	4b87      	ldr	r3, [pc, #540]	; (8009618 <_dtoa_r+0xbd0>)
 80093fc:	4602      	mov	r2, r0
 80093fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009402:	f7ff bb3b 	b.w	8008a7c <_dtoa_r+0x34>
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	3202      	adds	r2, #2
 800940a:	0092      	lsls	r2, r2, #2
 800940c:	f107 010c 	add.w	r1, r7, #12
 8009410:	300c      	adds	r0, #12
 8009412:	f000 f913 	bl	800963c <memcpy>
 8009416:	2201      	movs	r2, #1
 8009418:	4629      	mov	r1, r5
 800941a:	4620      	mov	r0, r4
 800941c:	f000 fb2e 	bl	8009a7c <__lshift>
 8009420:	9b01      	ldr	r3, [sp, #4]
 8009422:	f103 0901 	add.w	r9, r3, #1
 8009426:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800942a:	4413      	add	r3, r2
 800942c:	9305      	str	r3, [sp, #20]
 800942e:	f00a 0301 	and.w	r3, sl, #1
 8009432:	46b8      	mov	r8, r7
 8009434:	9304      	str	r3, [sp, #16]
 8009436:	4607      	mov	r7, r0
 8009438:	4631      	mov	r1, r6
 800943a:	ee18 0a10 	vmov	r0, s16
 800943e:	f7ff fa75 	bl	800892c <quorem>
 8009442:	4641      	mov	r1, r8
 8009444:	9002      	str	r0, [sp, #8]
 8009446:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800944a:	ee18 0a10 	vmov	r0, s16
 800944e:	f000 fb85 	bl	8009b5c <__mcmp>
 8009452:	463a      	mov	r2, r7
 8009454:	9003      	str	r0, [sp, #12]
 8009456:	4631      	mov	r1, r6
 8009458:	4620      	mov	r0, r4
 800945a:	f000 fb9b 	bl	8009b94 <__mdiff>
 800945e:	68c2      	ldr	r2, [r0, #12]
 8009460:	f109 3bff 	add.w	fp, r9, #4294967295
 8009464:	4605      	mov	r5, r0
 8009466:	bb02      	cbnz	r2, 80094aa <_dtoa_r+0xa62>
 8009468:	4601      	mov	r1, r0
 800946a:	ee18 0a10 	vmov	r0, s16
 800946e:	f000 fb75 	bl	8009b5c <__mcmp>
 8009472:	4602      	mov	r2, r0
 8009474:	4629      	mov	r1, r5
 8009476:	4620      	mov	r0, r4
 8009478:	9207      	str	r2, [sp, #28]
 800947a:	f000 f92d 	bl	80096d8 <_Bfree>
 800947e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009482:	ea43 0102 	orr.w	r1, r3, r2
 8009486:	9b04      	ldr	r3, [sp, #16]
 8009488:	430b      	orrs	r3, r1
 800948a:	464d      	mov	r5, r9
 800948c:	d10f      	bne.n	80094ae <_dtoa_r+0xa66>
 800948e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009492:	d02a      	beq.n	80094ea <_dtoa_r+0xaa2>
 8009494:	9b03      	ldr	r3, [sp, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	dd02      	ble.n	80094a0 <_dtoa_r+0xa58>
 800949a:	9b02      	ldr	r3, [sp, #8]
 800949c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80094a0:	f88b a000 	strb.w	sl, [fp]
 80094a4:	e775      	b.n	8009392 <_dtoa_r+0x94a>
 80094a6:	4638      	mov	r0, r7
 80094a8:	e7ba      	b.n	8009420 <_dtoa_r+0x9d8>
 80094aa:	2201      	movs	r2, #1
 80094ac:	e7e2      	b.n	8009474 <_dtoa_r+0xa2c>
 80094ae:	9b03      	ldr	r3, [sp, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	db04      	blt.n	80094be <_dtoa_r+0xa76>
 80094b4:	9906      	ldr	r1, [sp, #24]
 80094b6:	430b      	orrs	r3, r1
 80094b8:	9904      	ldr	r1, [sp, #16]
 80094ba:	430b      	orrs	r3, r1
 80094bc:	d122      	bne.n	8009504 <_dtoa_r+0xabc>
 80094be:	2a00      	cmp	r2, #0
 80094c0:	ddee      	ble.n	80094a0 <_dtoa_r+0xa58>
 80094c2:	ee18 1a10 	vmov	r1, s16
 80094c6:	2201      	movs	r2, #1
 80094c8:	4620      	mov	r0, r4
 80094ca:	f000 fad7 	bl	8009a7c <__lshift>
 80094ce:	4631      	mov	r1, r6
 80094d0:	ee08 0a10 	vmov	s16, r0
 80094d4:	f000 fb42 	bl	8009b5c <__mcmp>
 80094d8:	2800      	cmp	r0, #0
 80094da:	dc03      	bgt.n	80094e4 <_dtoa_r+0xa9c>
 80094dc:	d1e0      	bne.n	80094a0 <_dtoa_r+0xa58>
 80094de:	f01a 0f01 	tst.w	sl, #1
 80094e2:	d0dd      	beq.n	80094a0 <_dtoa_r+0xa58>
 80094e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094e8:	d1d7      	bne.n	800949a <_dtoa_r+0xa52>
 80094ea:	2339      	movs	r3, #57	; 0x39
 80094ec:	f88b 3000 	strb.w	r3, [fp]
 80094f0:	462b      	mov	r3, r5
 80094f2:	461d      	mov	r5, r3
 80094f4:	3b01      	subs	r3, #1
 80094f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094fa:	2a39      	cmp	r2, #57	; 0x39
 80094fc:	d071      	beq.n	80095e2 <_dtoa_r+0xb9a>
 80094fe:	3201      	adds	r2, #1
 8009500:	701a      	strb	r2, [r3, #0]
 8009502:	e746      	b.n	8009392 <_dtoa_r+0x94a>
 8009504:	2a00      	cmp	r2, #0
 8009506:	dd07      	ble.n	8009518 <_dtoa_r+0xad0>
 8009508:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800950c:	d0ed      	beq.n	80094ea <_dtoa_r+0xaa2>
 800950e:	f10a 0301 	add.w	r3, sl, #1
 8009512:	f88b 3000 	strb.w	r3, [fp]
 8009516:	e73c      	b.n	8009392 <_dtoa_r+0x94a>
 8009518:	9b05      	ldr	r3, [sp, #20]
 800951a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800951e:	4599      	cmp	r9, r3
 8009520:	d047      	beq.n	80095b2 <_dtoa_r+0xb6a>
 8009522:	ee18 1a10 	vmov	r1, s16
 8009526:	2300      	movs	r3, #0
 8009528:	220a      	movs	r2, #10
 800952a:	4620      	mov	r0, r4
 800952c:	f000 f8f6 	bl	800971c <__multadd>
 8009530:	45b8      	cmp	r8, r7
 8009532:	ee08 0a10 	vmov	s16, r0
 8009536:	f04f 0300 	mov.w	r3, #0
 800953a:	f04f 020a 	mov.w	r2, #10
 800953e:	4641      	mov	r1, r8
 8009540:	4620      	mov	r0, r4
 8009542:	d106      	bne.n	8009552 <_dtoa_r+0xb0a>
 8009544:	f000 f8ea 	bl	800971c <__multadd>
 8009548:	4680      	mov	r8, r0
 800954a:	4607      	mov	r7, r0
 800954c:	f109 0901 	add.w	r9, r9, #1
 8009550:	e772      	b.n	8009438 <_dtoa_r+0x9f0>
 8009552:	f000 f8e3 	bl	800971c <__multadd>
 8009556:	4639      	mov	r1, r7
 8009558:	4680      	mov	r8, r0
 800955a:	2300      	movs	r3, #0
 800955c:	220a      	movs	r2, #10
 800955e:	4620      	mov	r0, r4
 8009560:	f000 f8dc 	bl	800971c <__multadd>
 8009564:	4607      	mov	r7, r0
 8009566:	e7f1      	b.n	800954c <_dtoa_r+0xb04>
 8009568:	9b03      	ldr	r3, [sp, #12]
 800956a:	9302      	str	r3, [sp, #8]
 800956c:	9d01      	ldr	r5, [sp, #4]
 800956e:	ee18 0a10 	vmov	r0, s16
 8009572:	4631      	mov	r1, r6
 8009574:	f7ff f9da 	bl	800892c <quorem>
 8009578:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800957c:	9b01      	ldr	r3, [sp, #4]
 800957e:	f805 ab01 	strb.w	sl, [r5], #1
 8009582:	1aea      	subs	r2, r5, r3
 8009584:	9b02      	ldr	r3, [sp, #8]
 8009586:	4293      	cmp	r3, r2
 8009588:	dd09      	ble.n	800959e <_dtoa_r+0xb56>
 800958a:	ee18 1a10 	vmov	r1, s16
 800958e:	2300      	movs	r3, #0
 8009590:	220a      	movs	r2, #10
 8009592:	4620      	mov	r0, r4
 8009594:	f000 f8c2 	bl	800971c <__multadd>
 8009598:	ee08 0a10 	vmov	s16, r0
 800959c:	e7e7      	b.n	800956e <_dtoa_r+0xb26>
 800959e:	9b02      	ldr	r3, [sp, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bfc8      	it	gt
 80095a4:	461d      	movgt	r5, r3
 80095a6:	9b01      	ldr	r3, [sp, #4]
 80095a8:	bfd8      	it	le
 80095aa:	2501      	movle	r5, #1
 80095ac:	441d      	add	r5, r3
 80095ae:	f04f 0800 	mov.w	r8, #0
 80095b2:	ee18 1a10 	vmov	r1, s16
 80095b6:	2201      	movs	r2, #1
 80095b8:	4620      	mov	r0, r4
 80095ba:	f000 fa5f 	bl	8009a7c <__lshift>
 80095be:	4631      	mov	r1, r6
 80095c0:	ee08 0a10 	vmov	s16, r0
 80095c4:	f000 faca 	bl	8009b5c <__mcmp>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	dc91      	bgt.n	80094f0 <_dtoa_r+0xaa8>
 80095cc:	d102      	bne.n	80095d4 <_dtoa_r+0xb8c>
 80095ce:	f01a 0f01 	tst.w	sl, #1
 80095d2:	d18d      	bne.n	80094f0 <_dtoa_r+0xaa8>
 80095d4:	462b      	mov	r3, r5
 80095d6:	461d      	mov	r5, r3
 80095d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095dc:	2a30      	cmp	r2, #48	; 0x30
 80095de:	d0fa      	beq.n	80095d6 <_dtoa_r+0xb8e>
 80095e0:	e6d7      	b.n	8009392 <_dtoa_r+0x94a>
 80095e2:	9a01      	ldr	r2, [sp, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d184      	bne.n	80094f2 <_dtoa_r+0xaaa>
 80095e8:	9b00      	ldr	r3, [sp, #0]
 80095ea:	3301      	adds	r3, #1
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	2331      	movs	r3, #49	; 0x31
 80095f0:	7013      	strb	r3, [r2, #0]
 80095f2:	e6ce      	b.n	8009392 <_dtoa_r+0x94a>
 80095f4:	4b09      	ldr	r3, [pc, #36]	; (800961c <_dtoa_r+0xbd4>)
 80095f6:	f7ff ba95 	b.w	8008b24 <_dtoa_r+0xdc>
 80095fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f47f aa6e 	bne.w	8008ade <_dtoa_r+0x96>
 8009602:	4b07      	ldr	r3, [pc, #28]	; (8009620 <_dtoa_r+0xbd8>)
 8009604:	f7ff ba8e 	b.w	8008b24 <_dtoa_r+0xdc>
 8009608:	9b02      	ldr	r3, [sp, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	dcae      	bgt.n	800956c <_dtoa_r+0xb24>
 800960e:	9b06      	ldr	r3, [sp, #24]
 8009610:	2b02      	cmp	r3, #2
 8009612:	f73f aea8 	bgt.w	8009366 <_dtoa_r+0x91e>
 8009616:	e7a9      	b.n	800956c <_dtoa_r+0xb24>
 8009618:	08015743 	.word	0x08015743
 800961c:	080156a0 	.word	0x080156a0
 8009620:	080156c4 	.word	0x080156c4

08009624 <_localeconv_r>:
 8009624:	4800      	ldr	r0, [pc, #0]	; (8009628 <_localeconv_r+0x4>)
 8009626:	4770      	bx	lr
 8009628:	200001b0 	.word	0x200001b0

0800962c <malloc>:
 800962c:	4b02      	ldr	r3, [pc, #8]	; (8009638 <malloc+0xc>)
 800962e:	4601      	mov	r1, r0
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	f000 bc17 	b.w	8009e64 <_malloc_r>
 8009636:	bf00      	nop
 8009638:	2000005c 	.word	0x2000005c

0800963c <memcpy>:
 800963c:	440a      	add	r2, r1
 800963e:	4291      	cmp	r1, r2
 8009640:	f100 33ff 	add.w	r3, r0, #4294967295
 8009644:	d100      	bne.n	8009648 <memcpy+0xc>
 8009646:	4770      	bx	lr
 8009648:	b510      	push	{r4, lr}
 800964a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800964e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009652:	4291      	cmp	r1, r2
 8009654:	d1f9      	bne.n	800964a <memcpy+0xe>
 8009656:	bd10      	pop	{r4, pc}

08009658 <_Balloc>:
 8009658:	b570      	push	{r4, r5, r6, lr}
 800965a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800965c:	4604      	mov	r4, r0
 800965e:	460d      	mov	r5, r1
 8009660:	b976      	cbnz	r6, 8009680 <_Balloc+0x28>
 8009662:	2010      	movs	r0, #16
 8009664:	f7ff ffe2 	bl	800962c <malloc>
 8009668:	4602      	mov	r2, r0
 800966a:	6260      	str	r0, [r4, #36]	; 0x24
 800966c:	b920      	cbnz	r0, 8009678 <_Balloc+0x20>
 800966e:	4b18      	ldr	r3, [pc, #96]	; (80096d0 <_Balloc+0x78>)
 8009670:	4818      	ldr	r0, [pc, #96]	; (80096d4 <_Balloc+0x7c>)
 8009672:	2166      	movs	r1, #102	; 0x66
 8009674:	f000 fdd6 	bl	800a224 <__assert_func>
 8009678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800967c:	6006      	str	r6, [r0, #0]
 800967e:	60c6      	str	r6, [r0, #12]
 8009680:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009682:	68f3      	ldr	r3, [r6, #12]
 8009684:	b183      	cbz	r3, 80096a8 <_Balloc+0x50>
 8009686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800968e:	b9b8      	cbnz	r0, 80096c0 <_Balloc+0x68>
 8009690:	2101      	movs	r1, #1
 8009692:	fa01 f605 	lsl.w	r6, r1, r5
 8009696:	1d72      	adds	r2, r6, #5
 8009698:	0092      	lsls	r2, r2, #2
 800969a:	4620      	mov	r0, r4
 800969c:	f000 fb60 	bl	8009d60 <_calloc_r>
 80096a0:	b160      	cbz	r0, 80096bc <_Balloc+0x64>
 80096a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096a6:	e00e      	b.n	80096c6 <_Balloc+0x6e>
 80096a8:	2221      	movs	r2, #33	; 0x21
 80096aa:	2104      	movs	r1, #4
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 fb57 	bl	8009d60 <_calloc_r>
 80096b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b4:	60f0      	str	r0, [r6, #12]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e4      	bne.n	8009686 <_Balloc+0x2e>
 80096bc:	2000      	movs	r0, #0
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	6802      	ldr	r2, [r0, #0]
 80096c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096c6:	2300      	movs	r3, #0
 80096c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096cc:	e7f7      	b.n	80096be <_Balloc+0x66>
 80096ce:	bf00      	nop
 80096d0:	080156d1 	.word	0x080156d1
 80096d4:	08015754 	.word	0x08015754

080096d8 <_Bfree>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096dc:	4605      	mov	r5, r0
 80096de:	460c      	mov	r4, r1
 80096e0:	b976      	cbnz	r6, 8009700 <_Bfree+0x28>
 80096e2:	2010      	movs	r0, #16
 80096e4:	f7ff ffa2 	bl	800962c <malloc>
 80096e8:	4602      	mov	r2, r0
 80096ea:	6268      	str	r0, [r5, #36]	; 0x24
 80096ec:	b920      	cbnz	r0, 80096f8 <_Bfree+0x20>
 80096ee:	4b09      	ldr	r3, [pc, #36]	; (8009714 <_Bfree+0x3c>)
 80096f0:	4809      	ldr	r0, [pc, #36]	; (8009718 <_Bfree+0x40>)
 80096f2:	218a      	movs	r1, #138	; 0x8a
 80096f4:	f000 fd96 	bl	800a224 <__assert_func>
 80096f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096fc:	6006      	str	r6, [r0, #0]
 80096fe:	60c6      	str	r6, [r0, #12]
 8009700:	b13c      	cbz	r4, 8009712 <_Bfree+0x3a>
 8009702:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009704:	6862      	ldr	r2, [r4, #4]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800970c:	6021      	str	r1, [r4, #0]
 800970e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009712:	bd70      	pop	{r4, r5, r6, pc}
 8009714:	080156d1 	.word	0x080156d1
 8009718:	08015754 	.word	0x08015754

0800971c <__multadd>:
 800971c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009720:	690d      	ldr	r5, [r1, #16]
 8009722:	4607      	mov	r7, r0
 8009724:	460c      	mov	r4, r1
 8009726:	461e      	mov	r6, r3
 8009728:	f101 0c14 	add.w	ip, r1, #20
 800972c:	2000      	movs	r0, #0
 800972e:	f8dc 3000 	ldr.w	r3, [ip]
 8009732:	b299      	uxth	r1, r3
 8009734:	fb02 6101 	mla	r1, r2, r1, r6
 8009738:	0c1e      	lsrs	r6, r3, #16
 800973a:	0c0b      	lsrs	r3, r1, #16
 800973c:	fb02 3306 	mla	r3, r2, r6, r3
 8009740:	b289      	uxth	r1, r1
 8009742:	3001      	adds	r0, #1
 8009744:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009748:	4285      	cmp	r5, r0
 800974a:	f84c 1b04 	str.w	r1, [ip], #4
 800974e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009752:	dcec      	bgt.n	800972e <__multadd+0x12>
 8009754:	b30e      	cbz	r6, 800979a <__multadd+0x7e>
 8009756:	68a3      	ldr	r3, [r4, #8]
 8009758:	42ab      	cmp	r3, r5
 800975a:	dc19      	bgt.n	8009790 <__multadd+0x74>
 800975c:	6861      	ldr	r1, [r4, #4]
 800975e:	4638      	mov	r0, r7
 8009760:	3101      	adds	r1, #1
 8009762:	f7ff ff79 	bl	8009658 <_Balloc>
 8009766:	4680      	mov	r8, r0
 8009768:	b928      	cbnz	r0, 8009776 <__multadd+0x5a>
 800976a:	4602      	mov	r2, r0
 800976c:	4b0c      	ldr	r3, [pc, #48]	; (80097a0 <__multadd+0x84>)
 800976e:	480d      	ldr	r0, [pc, #52]	; (80097a4 <__multadd+0x88>)
 8009770:	21b5      	movs	r1, #181	; 0xb5
 8009772:	f000 fd57 	bl	800a224 <__assert_func>
 8009776:	6922      	ldr	r2, [r4, #16]
 8009778:	3202      	adds	r2, #2
 800977a:	f104 010c 	add.w	r1, r4, #12
 800977e:	0092      	lsls	r2, r2, #2
 8009780:	300c      	adds	r0, #12
 8009782:	f7ff ff5b 	bl	800963c <memcpy>
 8009786:	4621      	mov	r1, r4
 8009788:	4638      	mov	r0, r7
 800978a:	f7ff ffa5 	bl	80096d8 <_Bfree>
 800978e:	4644      	mov	r4, r8
 8009790:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009794:	3501      	adds	r5, #1
 8009796:	615e      	str	r6, [r3, #20]
 8009798:	6125      	str	r5, [r4, #16]
 800979a:	4620      	mov	r0, r4
 800979c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a0:	08015743 	.word	0x08015743
 80097a4:	08015754 	.word	0x08015754

080097a8 <__hi0bits>:
 80097a8:	0c03      	lsrs	r3, r0, #16
 80097aa:	041b      	lsls	r3, r3, #16
 80097ac:	b9d3      	cbnz	r3, 80097e4 <__hi0bits+0x3c>
 80097ae:	0400      	lsls	r0, r0, #16
 80097b0:	2310      	movs	r3, #16
 80097b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097b6:	bf04      	itt	eq
 80097b8:	0200      	lsleq	r0, r0, #8
 80097ba:	3308      	addeq	r3, #8
 80097bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097c0:	bf04      	itt	eq
 80097c2:	0100      	lsleq	r0, r0, #4
 80097c4:	3304      	addeq	r3, #4
 80097c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097ca:	bf04      	itt	eq
 80097cc:	0080      	lsleq	r0, r0, #2
 80097ce:	3302      	addeq	r3, #2
 80097d0:	2800      	cmp	r0, #0
 80097d2:	db05      	blt.n	80097e0 <__hi0bits+0x38>
 80097d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097d8:	f103 0301 	add.w	r3, r3, #1
 80097dc:	bf08      	it	eq
 80097de:	2320      	moveq	r3, #32
 80097e0:	4618      	mov	r0, r3
 80097e2:	4770      	bx	lr
 80097e4:	2300      	movs	r3, #0
 80097e6:	e7e4      	b.n	80097b2 <__hi0bits+0xa>

080097e8 <__lo0bits>:
 80097e8:	6803      	ldr	r3, [r0, #0]
 80097ea:	f013 0207 	ands.w	r2, r3, #7
 80097ee:	4601      	mov	r1, r0
 80097f0:	d00b      	beq.n	800980a <__lo0bits+0x22>
 80097f2:	07da      	lsls	r2, r3, #31
 80097f4:	d423      	bmi.n	800983e <__lo0bits+0x56>
 80097f6:	0798      	lsls	r0, r3, #30
 80097f8:	bf49      	itett	mi
 80097fa:	085b      	lsrmi	r3, r3, #1
 80097fc:	089b      	lsrpl	r3, r3, #2
 80097fe:	2001      	movmi	r0, #1
 8009800:	600b      	strmi	r3, [r1, #0]
 8009802:	bf5c      	itt	pl
 8009804:	600b      	strpl	r3, [r1, #0]
 8009806:	2002      	movpl	r0, #2
 8009808:	4770      	bx	lr
 800980a:	b298      	uxth	r0, r3
 800980c:	b9a8      	cbnz	r0, 800983a <__lo0bits+0x52>
 800980e:	0c1b      	lsrs	r3, r3, #16
 8009810:	2010      	movs	r0, #16
 8009812:	b2da      	uxtb	r2, r3
 8009814:	b90a      	cbnz	r2, 800981a <__lo0bits+0x32>
 8009816:	3008      	adds	r0, #8
 8009818:	0a1b      	lsrs	r3, r3, #8
 800981a:	071a      	lsls	r2, r3, #28
 800981c:	bf04      	itt	eq
 800981e:	091b      	lsreq	r3, r3, #4
 8009820:	3004      	addeq	r0, #4
 8009822:	079a      	lsls	r2, r3, #30
 8009824:	bf04      	itt	eq
 8009826:	089b      	lsreq	r3, r3, #2
 8009828:	3002      	addeq	r0, #2
 800982a:	07da      	lsls	r2, r3, #31
 800982c:	d403      	bmi.n	8009836 <__lo0bits+0x4e>
 800982e:	085b      	lsrs	r3, r3, #1
 8009830:	f100 0001 	add.w	r0, r0, #1
 8009834:	d005      	beq.n	8009842 <__lo0bits+0x5a>
 8009836:	600b      	str	r3, [r1, #0]
 8009838:	4770      	bx	lr
 800983a:	4610      	mov	r0, r2
 800983c:	e7e9      	b.n	8009812 <__lo0bits+0x2a>
 800983e:	2000      	movs	r0, #0
 8009840:	4770      	bx	lr
 8009842:	2020      	movs	r0, #32
 8009844:	4770      	bx	lr
	...

08009848 <__i2b>:
 8009848:	b510      	push	{r4, lr}
 800984a:	460c      	mov	r4, r1
 800984c:	2101      	movs	r1, #1
 800984e:	f7ff ff03 	bl	8009658 <_Balloc>
 8009852:	4602      	mov	r2, r0
 8009854:	b928      	cbnz	r0, 8009862 <__i2b+0x1a>
 8009856:	4b05      	ldr	r3, [pc, #20]	; (800986c <__i2b+0x24>)
 8009858:	4805      	ldr	r0, [pc, #20]	; (8009870 <__i2b+0x28>)
 800985a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800985e:	f000 fce1 	bl	800a224 <__assert_func>
 8009862:	2301      	movs	r3, #1
 8009864:	6144      	str	r4, [r0, #20]
 8009866:	6103      	str	r3, [r0, #16]
 8009868:	bd10      	pop	{r4, pc}
 800986a:	bf00      	nop
 800986c:	08015743 	.word	0x08015743
 8009870:	08015754 	.word	0x08015754

08009874 <__multiply>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	4691      	mov	r9, r2
 800987a:	690a      	ldr	r2, [r1, #16]
 800987c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009880:	429a      	cmp	r2, r3
 8009882:	bfb8      	it	lt
 8009884:	460b      	movlt	r3, r1
 8009886:	460c      	mov	r4, r1
 8009888:	bfbc      	itt	lt
 800988a:	464c      	movlt	r4, r9
 800988c:	4699      	movlt	r9, r3
 800988e:	6927      	ldr	r7, [r4, #16]
 8009890:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009894:	68a3      	ldr	r3, [r4, #8]
 8009896:	6861      	ldr	r1, [r4, #4]
 8009898:	eb07 060a 	add.w	r6, r7, sl
 800989c:	42b3      	cmp	r3, r6
 800989e:	b085      	sub	sp, #20
 80098a0:	bfb8      	it	lt
 80098a2:	3101      	addlt	r1, #1
 80098a4:	f7ff fed8 	bl	8009658 <_Balloc>
 80098a8:	b930      	cbnz	r0, 80098b8 <__multiply+0x44>
 80098aa:	4602      	mov	r2, r0
 80098ac:	4b44      	ldr	r3, [pc, #272]	; (80099c0 <__multiply+0x14c>)
 80098ae:	4845      	ldr	r0, [pc, #276]	; (80099c4 <__multiply+0x150>)
 80098b0:	f240 115d 	movw	r1, #349	; 0x15d
 80098b4:	f000 fcb6 	bl	800a224 <__assert_func>
 80098b8:	f100 0514 	add.w	r5, r0, #20
 80098bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098c0:	462b      	mov	r3, r5
 80098c2:	2200      	movs	r2, #0
 80098c4:	4543      	cmp	r3, r8
 80098c6:	d321      	bcc.n	800990c <__multiply+0x98>
 80098c8:	f104 0314 	add.w	r3, r4, #20
 80098cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098d0:	f109 0314 	add.w	r3, r9, #20
 80098d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098d8:	9202      	str	r2, [sp, #8]
 80098da:	1b3a      	subs	r2, r7, r4
 80098dc:	3a15      	subs	r2, #21
 80098de:	f022 0203 	bic.w	r2, r2, #3
 80098e2:	3204      	adds	r2, #4
 80098e4:	f104 0115 	add.w	r1, r4, #21
 80098e8:	428f      	cmp	r7, r1
 80098ea:	bf38      	it	cc
 80098ec:	2204      	movcc	r2, #4
 80098ee:	9201      	str	r2, [sp, #4]
 80098f0:	9a02      	ldr	r2, [sp, #8]
 80098f2:	9303      	str	r3, [sp, #12]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d80c      	bhi.n	8009912 <__multiply+0x9e>
 80098f8:	2e00      	cmp	r6, #0
 80098fa:	dd03      	ble.n	8009904 <__multiply+0x90>
 80098fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009900:	2b00      	cmp	r3, #0
 8009902:	d05a      	beq.n	80099ba <__multiply+0x146>
 8009904:	6106      	str	r6, [r0, #16]
 8009906:	b005      	add	sp, #20
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	f843 2b04 	str.w	r2, [r3], #4
 8009910:	e7d8      	b.n	80098c4 <__multiply+0x50>
 8009912:	f8b3 a000 	ldrh.w	sl, [r3]
 8009916:	f1ba 0f00 	cmp.w	sl, #0
 800991a:	d024      	beq.n	8009966 <__multiply+0xf2>
 800991c:	f104 0e14 	add.w	lr, r4, #20
 8009920:	46a9      	mov	r9, r5
 8009922:	f04f 0c00 	mov.w	ip, #0
 8009926:	f85e 2b04 	ldr.w	r2, [lr], #4
 800992a:	f8d9 1000 	ldr.w	r1, [r9]
 800992e:	fa1f fb82 	uxth.w	fp, r2
 8009932:	b289      	uxth	r1, r1
 8009934:	fb0a 110b 	mla	r1, sl, fp, r1
 8009938:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800993c:	f8d9 2000 	ldr.w	r2, [r9]
 8009940:	4461      	add	r1, ip
 8009942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009946:	fb0a c20b 	mla	r2, sl, fp, ip
 800994a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800994e:	b289      	uxth	r1, r1
 8009950:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009954:	4577      	cmp	r7, lr
 8009956:	f849 1b04 	str.w	r1, [r9], #4
 800995a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800995e:	d8e2      	bhi.n	8009926 <__multiply+0xb2>
 8009960:	9a01      	ldr	r2, [sp, #4]
 8009962:	f845 c002 	str.w	ip, [r5, r2]
 8009966:	9a03      	ldr	r2, [sp, #12]
 8009968:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800996c:	3304      	adds	r3, #4
 800996e:	f1b9 0f00 	cmp.w	r9, #0
 8009972:	d020      	beq.n	80099b6 <__multiply+0x142>
 8009974:	6829      	ldr	r1, [r5, #0]
 8009976:	f104 0c14 	add.w	ip, r4, #20
 800997a:	46ae      	mov	lr, r5
 800997c:	f04f 0a00 	mov.w	sl, #0
 8009980:	f8bc b000 	ldrh.w	fp, [ip]
 8009984:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009988:	fb09 220b 	mla	r2, r9, fp, r2
 800998c:	4492      	add	sl, r2
 800998e:	b289      	uxth	r1, r1
 8009990:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009994:	f84e 1b04 	str.w	r1, [lr], #4
 8009998:	f85c 2b04 	ldr.w	r2, [ip], #4
 800999c:	f8be 1000 	ldrh.w	r1, [lr]
 80099a0:	0c12      	lsrs	r2, r2, #16
 80099a2:	fb09 1102 	mla	r1, r9, r2, r1
 80099a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80099aa:	4567      	cmp	r7, ip
 80099ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099b0:	d8e6      	bhi.n	8009980 <__multiply+0x10c>
 80099b2:	9a01      	ldr	r2, [sp, #4]
 80099b4:	50a9      	str	r1, [r5, r2]
 80099b6:	3504      	adds	r5, #4
 80099b8:	e79a      	b.n	80098f0 <__multiply+0x7c>
 80099ba:	3e01      	subs	r6, #1
 80099bc:	e79c      	b.n	80098f8 <__multiply+0x84>
 80099be:	bf00      	nop
 80099c0:	08015743 	.word	0x08015743
 80099c4:	08015754 	.word	0x08015754

080099c8 <__pow5mult>:
 80099c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099cc:	4615      	mov	r5, r2
 80099ce:	f012 0203 	ands.w	r2, r2, #3
 80099d2:	4606      	mov	r6, r0
 80099d4:	460f      	mov	r7, r1
 80099d6:	d007      	beq.n	80099e8 <__pow5mult+0x20>
 80099d8:	4c25      	ldr	r4, [pc, #148]	; (8009a70 <__pow5mult+0xa8>)
 80099da:	3a01      	subs	r2, #1
 80099dc:	2300      	movs	r3, #0
 80099de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099e2:	f7ff fe9b 	bl	800971c <__multadd>
 80099e6:	4607      	mov	r7, r0
 80099e8:	10ad      	asrs	r5, r5, #2
 80099ea:	d03d      	beq.n	8009a68 <__pow5mult+0xa0>
 80099ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099ee:	b97c      	cbnz	r4, 8009a10 <__pow5mult+0x48>
 80099f0:	2010      	movs	r0, #16
 80099f2:	f7ff fe1b 	bl	800962c <malloc>
 80099f6:	4602      	mov	r2, r0
 80099f8:	6270      	str	r0, [r6, #36]	; 0x24
 80099fa:	b928      	cbnz	r0, 8009a08 <__pow5mult+0x40>
 80099fc:	4b1d      	ldr	r3, [pc, #116]	; (8009a74 <__pow5mult+0xac>)
 80099fe:	481e      	ldr	r0, [pc, #120]	; (8009a78 <__pow5mult+0xb0>)
 8009a00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a04:	f000 fc0e 	bl	800a224 <__assert_func>
 8009a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a0c:	6004      	str	r4, [r0, #0]
 8009a0e:	60c4      	str	r4, [r0, #12]
 8009a10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a18:	b94c      	cbnz	r4, 8009a2e <__pow5mult+0x66>
 8009a1a:	f240 2171 	movw	r1, #625	; 0x271
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f7ff ff12 	bl	8009848 <__i2b>
 8009a24:	2300      	movs	r3, #0
 8009a26:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	6003      	str	r3, [r0, #0]
 8009a2e:	f04f 0900 	mov.w	r9, #0
 8009a32:	07eb      	lsls	r3, r5, #31
 8009a34:	d50a      	bpl.n	8009a4c <__pow5mult+0x84>
 8009a36:	4639      	mov	r1, r7
 8009a38:	4622      	mov	r2, r4
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f7ff ff1a 	bl	8009874 <__multiply>
 8009a40:	4639      	mov	r1, r7
 8009a42:	4680      	mov	r8, r0
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7ff fe47 	bl	80096d8 <_Bfree>
 8009a4a:	4647      	mov	r7, r8
 8009a4c:	106d      	asrs	r5, r5, #1
 8009a4e:	d00b      	beq.n	8009a68 <__pow5mult+0xa0>
 8009a50:	6820      	ldr	r0, [r4, #0]
 8009a52:	b938      	cbnz	r0, 8009a64 <__pow5mult+0x9c>
 8009a54:	4622      	mov	r2, r4
 8009a56:	4621      	mov	r1, r4
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f7ff ff0b 	bl	8009874 <__multiply>
 8009a5e:	6020      	str	r0, [r4, #0]
 8009a60:	f8c0 9000 	str.w	r9, [r0]
 8009a64:	4604      	mov	r4, r0
 8009a66:	e7e4      	b.n	8009a32 <__pow5mult+0x6a>
 8009a68:	4638      	mov	r0, r7
 8009a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a6e:	bf00      	nop
 8009a70:	080158a0 	.word	0x080158a0
 8009a74:	080156d1 	.word	0x080156d1
 8009a78:	08015754 	.word	0x08015754

08009a7c <__lshift>:
 8009a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a80:	460c      	mov	r4, r1
 8009a82:	6849      	ldr	r1, [r1, #4]
 8009a84:	6923      	ldr	r3, [r4, #16]
 8009a86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a8a:	68a3      	ldr	r3, [r4, #8]
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	4691      	mov	r9, r2
 8009a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a94:	f108 0601 	add.w	r6, r8, #1
 8009a98:	42b3      	cmp	r3, r6
 8009a9a:	db0b      	blt.n	8009ab4 <__lshift+0x38>
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	f7ff fddb 	bl	8009658 <_Balloc>
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	b948      	cbnz	r0, 8009aba <__lshift+0x3e>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	4b2a      	ldr	r3, [pc, #168]	; (8009b54 <__lshift+0xd8>)
 8009aaa:	482b      	ldr	r0, [pc, #172]	; (8009b58 <__lshift+0xdc>)
 8009aac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ab0:	f000 fbb8 	bl	800a224 <__assert_func>
 8009ab4:	3101      	adds	r1, #1
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	e7ee      	b.n	8009a98 <__lshift+0x1c>
 8009aba:	2300      	movs	r3, #0
 8009abc:	f100 0114 	add.w	r1, r0, #20
 8009ac0:	f100 0210 	add.w	r2, r0, #16
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	4553      	cmp	r3, sl
 8009ac8:	db37      	blt.n	8009b3a <__lshift+0xbe>
 8009aca:	6920      	ldr	r0, [r4, #16]
 8009acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ad0:	f104 0314 	add.w	r3, r4, #20
 8009ad4:	f019 091f 	ands.w	r9, r9, #31
 8009ad8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009adc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ae0:	d02f      	beq.n	8009b42 <__lshift+0xc6>
 8009ae2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ae6:	468a      	mov	sl, r1
 8009ae8:	f04f 0c00 	mov.w	ip, #0
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	fa02 f209 	lsl.w	r2, r2, r9
 8009af2:	ea42 020c 	orr.w	r2, r2, ip
 8009af6:	f84a 2b04 	str.w	r2, [sl], #4
 8009afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009afe:	4298      	cmp	r0, r3
 8009b00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009b04:	d8f2      	bhi.n	8009aec <__lshift+0x70>
 8009b06:	1b03      	subs	r3, r0, r4
 8009b08:	3b15      	subs	r3, #21
 8009b0a:	f023 0303 	bic.w	r3, r3, #3
 8009b0e:	3304      	adds	r3, #4
 8009b10:	f104 0215 	add.w	r2, r4, #21
 8009b14:	4290      	cmp	r0, r2
 8009b16:	bf38      	it	cc
 8009b18:	2304      	movcc	r3, #4
 8009b1a:	f841 c003 	str.w	ip, [r1, r3]
 8009b1e:	f1bc 0f00 	cmp.w	ip, #0
 8009b22:	d001      	beq.n	8009b28 <__lshift+0xac>
 8009b24:	f108 0602 	add.w	r6, r8, #2
 8009b28:	3e01      	subs	r6, #1
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	612e      	str	r6, [r5, #16]
 8009b2e:	4621      	mov	r1, r4
 8009b30:	f7ff fdd2 	bl	80096d8 <_Bfree>
 8009b34:	4628      	mov	r0, r5
 8009b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b3e:	3301      	adds	r3, #1
 8009b40:	e7c1      	b.n	8009ac6 <__lshift+0x4a>
 8009b42:	3904      	subs	r1, #4
 8009b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b48:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b4c:	4298      	cmp	r0, r3
 8009b4e:	d8f9      	bhi.n	8009b44 <__lshift+0xc8>
 8009b50:	e7ea      	b.n	8009b28 <__lshift+0xac>
 8009b52:	bf00      	nop
 8009b54:	08015743 	.word	0x08015743
 8009b58:	08015754 	.word	0x08015754

08009b5c <__mcmp>:
 8009b5c:	b530      	push	{r4, r5, lr}
 8009b5e:	6902      	ldr	r2, [r0, #16]
 8009b60:	690c      	ldr	r4, [r1, #16]
 8009b62:	1b12      	subs	r2, r2, r4
 8009b64:	d10e      	bne.n	8009b84 <__mcmp+0x28>
 8009b66:	f100 0314 	add.w	r3, r0, #20
 8009b6a:	3114      	adds	r1, #20
 8009b6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b7c:	42a5      	cmp	r5, r4
 8009b7e:	d003      	beq.n	8009b88 <__mcmp+0x2c>
 8009b80:	d305      	bcc.n	8009b8e <__mcmp+0x32>
 8009b82:	2201      	movs	r2, #1
 8009b84:	4610      	mov	r0, r2
 8009b86:	bd30      	pop	{r4, r5, pc}
 8009b88:	4283      	cmp	r3, r0
 8009b8a:	d3f3      	bcc.n	8009b74 <__mcmp+0x18>
 8009b8c:	e7fa      	b.n	8009b84 <__mcmp+0x28>
 8009b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b92:	e7f7      	b.n	8009b84 <__mcmp+0x28>

08009b94 <__mdiff>:
 8009b94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b98:	460c      	mov	r4, r1
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	4690      	mov	r8, r2
 8009ba2:	f7ff ffdb 	bl	8009b5c <__mcmp>
 8009ba6:	1e05      	subs	r5, r0, #0
 8009ba8:	d110      	bne.n	8009bcc <__mdiff+0x38>
 8009baa:	4629      	mov	r1, r5
 8009bac:	4630      	mov	r0, r6
 8009bae:	f7ff fd53 	bl	8009658 <_Balloc>
 8009bb2:	b930      	cbnz	r0, 8009bc2 <__mdiff+0x2e>
 8009bb4:	4b3a      	ldr	r3, [pc, #232]	; (8009ca0 <__mdiff+0x10c>)
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	f240 2132 	movw	r1, #562	; 0x232
 8009bbc:	4839      	ldr	r0, [pc, #228]	; (8009ca4 <__mdiff+0x110>)
 8009bbe:	f000 fb31 	bl	800a224 <__assert_func>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bcc:	bfa4      	itt	ge
 8009bce:	4643      	movge	r3, r8
 8009bd0:	46a0      	movge	r8, r4
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bd8:	bfa6      	itte	ge
 8009bda:	461c      	movge	r4, r3
 8009bdc:	2500      	movge	r5, #0
 8009bde:	2501      	movlt	r5, #1
 8009be0:	f7ff fd3a 	bl	8009658 <_Balloc>
 8009be4:	b920      	cbnz	r0, 8009bf0 <__mdiff+0x5c>
 8009be6:	4b2e      	ldr	r3, [pc, #184]	; (8009ca0 <__mdiff+0x10c>)
 8009be8:	4602      	mov	r2, r0
 8009bea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bee:	e7e5      	b.n	8009bbc <__mdiff+0x28>
 8009bf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bf4:	6926      	ldr	r6, [r4, #16]
 8009bf6:	60c5      	str	r5, [r0, #12]
 8009bf8:	f104 0914 	add.w	r9, r4, #20
 8009bfc:	f108 0514 	add.w	r5, r8, #20
 8009c00:	f100 0e14 	add.w	lr, r0, #20
 8009c04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c0c:	f108 0210 	add.w	r2, r8, #16
 8009c10:	46f2      	mov	sl, lr
 8009c12:	2100      	movs	r1, #0
 8009c14:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c1c:	fa1f f883 	uxth.w	r8, r3
 8009c20:	fa11 f18b 	uxtah	r1, r1, fp
 8009c24:	0c1b      	lsrs	r3, r3, #16
 8009c26:	eba1 0808 	sub.w	r8, r1, r8
 8009c2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c32:	fa1f f888 	uxth.w	r8, r8
 8009c36:	1419      	asrs	r1, r3, #16
 8009c38:	454e      	cmp	r6, r9
 8009c3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c3e:	f84a 3b04 	str.w	r3, [sl], #4
 8009c42:	d8e7      	bhi.n	8009c14 <__mdiff+0x80>
 8009c44:	1b33      	subs	r3, r6, r4
 8009c46:	3b15      	subs	r3, #21
 8009c48:	f023 0303 	bic.w	r3, r3, #3
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	3415      	adds	r4, #21
 8009c50:	42a6      	cmp	r6, r4
 8009c52:	bf38      	it	cc
 8009c54:	2304      	movcc	r3, #4
 8009c56:	441d      	add	r5, r3
 8009c58:	4473      	add	r3, lr
 8009c5a:	469e      	mov	lr, r3
 8009c5c:	462e      	mov	r6, r5
 8009c5e:	4566      	cmp	r6, ip
 8009c60:	d30e      	bcc.n	8009c80 <__mdiff+0xec>
 8009c62:	f10c 0203 	add.w	r2, ip, #3
 8009c66:	1b52      	subs	r2, r2, r5
 8009c68:	f022 0203 	bic.w	r2, r2, #3
 8009c6c:	3d03      	subs	r5, #3
 8009c6e:	45ac      	cmp	ip, r5
 8009c70:	bf38      	it	cc
 8009c72:	2200      	movcc	r2, #0
 8009c74:	441a      	add	r2, r3
 8009c76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c7a:	b17b      	cbz	r3, 8009c9c <__mdiff+0x108>
 8009c7c:	6107      	str	r7, [r0, #16]
 8009c7e:	e7a3      	b.n	8009bc8 <__mdiff+0x34>
 8009c80:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c84:	fa11 f288 	uxtah	r2, r1, r8
 8009c88:	1414      	asrs	r4, r2, #16
 8009c8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c8e:	b292      	uxth	r2, r2
 8009c90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c94:	f84e 2b04 	str.w	r2, [lr], #4
 8009c98:	1421      	asrs	r1, r4, #16
 8009c9a:	e7e0      	b.n	8009c5e <__mdiff+0xca>
 8009c9c:	3f01      	subs	r7, #1
 8009c9e:	e7ea      	b.n	8009c76 <__mdiff+0xe2>
 8009ca0:	08015743 	.word	0x08015743
 8009ca4:	08015754 	.word	0x08015754

08009ca8 <__d2b>:
 8009ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cac:	4689      	mov	r9, r1
 8009cae:	2101      	movs	r1, #1
 8009cb0:	ec57 6b10 	vmov	r6, r7, d0
 8009cb4:	4690      	mov	r8, r2
 8009cb6:	f7ff fccf 	bl	8009658 <_Balloc>
 8009cba:	4604      	mov	r4, r0
 8009cbc:	b930      	cbnz	r0, 8009ccc <__d2b+0x24>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	4b25      	ldr	r3, [pc, #148]	; (8009d58 <__d2b+0xb0>)
 8009cc2:	4826      	ldr	r0, [pc, #152]	; (8009d5c <__d2b+0xb4>)
 8009cc4:	f240 310a 	movw	r1, #778	; 0x30a
 8009cc8:	f000 faac 	bl	800a224 <__assert_func>
 8009ccc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009cd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009cd4:	bb35      	cbnz	r5, 8009d24 <__d2b+0x7c>
 8009cd6:	2e00      	cmp	r6, #0
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	d028      	beq.n	8009d2e <__d2b+0x86>
 8009cdc:	4668      	mov	r0, sp
 8009cde:	9600      	str	r6, [sp, #0]
 8009ce0:	f7ff fd82 	bl	80097e8 <__lo0bits>
 8009ce4:	9900      	ldr	r1, [sp, #0]
 8009ce6:	b300      	cbz	r0, 8009d2a <__d2b+0x82>
 8009ce8:	9a01      	ldr	r2, [sp, #4]
 8009cea:	f1c0 0320 	rsb	r3, r0, #32
 8009cee:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf2:	430b      	orrs	r3, r1
 8009cf4:	40c2      	lsrs	r2, r0
 8009cf6:	6163      	str	r3, [r4, #20]
 8009cf8:	9201      	str	r2, [sp, #4]
 8009cfa:	9b01      	ldr	r3, [sp, #4]
 8009cfc:	61a3      	str	r3, [r4, #24]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	bf14      	ite	ne
 8009d02:	2202      	movne	r2, #2
 8009d04:	2201      	moveq	r2, #1
 8009d06:	6122      	str	r2, [r4, #16]
 8009d08:	b1d5      	cbz	r5, 8009d40 <__d2b+0x98>
 8009d0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d0e:	4405      	add	r5, r0
 8009d10:	f8c9 5000 	str.w	r5, [r9]
 8009d14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d18:	f8c8 0000 	str.w	r0, [r8]
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	b003      	add	sp, #12
 8009d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d28:	e7d5      	b.n	8009cd6 <__d2b+0x2e>
 8009d2a:	6161      	str	r1, [r4, #20]
 8009d2c:	e7e5      	b.n	8009cfa <__d2b+0x52>
 8009d2e:	a801      	add	r0, sp, #4
 8009d30:	f7ff fd5a 	bl	80097e8 <__lo0bits>
 8009d34:	9b01      	ldr	r3, [sp, #4]
 8009d36:	6163      	str	r3, [r4, #20]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	6122      	str	r2, [r4, #16]
 8009d3c:	3020      	adds	r0, #32
 8009d3e:	e7e3      	b.n	8009d08 <__d2b+0x60>
 8009d40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d48:	f8c9 0000 	str.w	r0, [r9]
 8009d4c:	6918      	ldr	r0, [r3, #16]
 8009d4e:	f7ff fd2b 	bl	80097a8 <__hi0bits>
 8009d52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d56:	e7df      	b.n	8009d18 <__d2b+0x70>
 8009d58:	08015743 	.word	0x08015743
 8009d5c:	08015754 	.word	0x08015754

08009d60 <_calloc_r>:
 8009d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d62:	fba1 2402 	umull	r2, r4, r1, r2
 8009d66:	b94c      	cbnz	r4, 8009d7c <_calloc_r+0x1c>
 8009d68:	4611      	mov	r1, r2
 8009d6a:	9201      	str	r2, [sp, #4]
 8009d6c:	f000 f87a 	bl	8009e64 <_malloc_r>
 8009d70:	9a01      	ldr	r2, [sp, #4]
 8009d72:	4605      	mov	r5, r0
 8009d74:	b930      	cbnz	r0, 8009d84 <_calloc_r+0x24>
 8009d76:	4628      	mov	r0, r5
 8009d78:	b003      	add	sp, #12
 8009d7a:	bd30      	pop	{r4, r5, pc}
 8009d7c:	220c      	movs	r2, #12
 8009d7e:	6002      	str	r2, [r0, #0]
 8009d80:	2500      	movs	r5, #0
 8009d82:	e7f8      	b.n	8009d76 <_calloc_r+0x16>
 8009d84:	4621      	mov	r1, r4
 8009d86:	f7fe f93f 	bl	8008008 <memset>
 8009d8a:	e7f4      	b.n	8009d76 <_calloc_r+0x16>

08009d8c <_free_r>:
 8009d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d8e:	2900      	cmp	r1, #0
 8009d90:	d044      	beq.n	8009e1c <_free_r+0x90>
 8009d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d96:	9001      	str	r0, [sp, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d9e:	bfb8      	it	lt
 8009da0:	18e4      	addlt	r4, r4, r3
 8009da2:	f000 fa9b 	bl	800a2dc <__malloc_lock>
 8009da6:	4a1e      	ldr	r2, [pc, #120]	; (8009e20 <_free_r+0x94>)
 8009da8:	9801      	ldr	r0, [sp, #4]
 8009daa:	6813      	ldr	r3, [r2, #0]
 8009dac:	b933      	cbnz	r3, 8009dbc <_free_r+0x30>
 8009dae:	6063      	str	r3, [r4, #4]
 8009db0:	6014      	str	r4, [r2, #0]
 8009db2:	b003      	add	sp, #12
 8009db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009db8:	f000 ba96 	b.w	800a2e8 <__malloc_unlock>
 8009dbc:	42a3      	cmp	r3, r4
 8009dbe:	d908      	bls.n	8009dd2 <_free_r+0x46>
 8009dc0:	6825      	ldr	r5, [r4, #0]
 8009dc2:	1961      	adds	r1, r4, r5
 8009dc4:	428b      	cmp	r3, r1
 8009dc6:	bf01      	itttt	eq
 8009dc8:	6819      	ldreq	r1, [r3, #0]
 8009dca:	685b      	ldreq	r3, [r3, #4]
 8009dcc:	1949      	addeq	r1, r1, r5
 8009dce:	6021      	streq	r1, [r4, #0]
 8009dd0:	e7ed      	b.n	8009dae <_free_r+0x22>
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	b10b      	cbz	r3, 8009ddc <_free_r+0x50>
 8009dd8:	42a3      	cmp	r3, r4
 8009dda:	d9fa      	bls.n	8009dd2 <_free_r+0x46>
 8009ddc:	6811      	ldr	r1, [r2, #0]
 8009dde:	1855      	adds	r5, r2, r1
 8009de0:	42a5      	cmp	r5, r4
 8009de2:	d10b      	bne.n	8009dfc <_free_r+0x70>
 8009de4:	6824      	ldr	r4, [r4, #0]
 8009de6:	4421      	add	r1, r4
 8009de8:	1854      	adds	r4, r2, r1
 8009dea:	42a3      	cmp	r3, r4
 8009dec:	6011      	str	r1, [r2, #0]
 8009dee:	d1e0      	bne.n	8009db2 <_free_r+0x26>
 8009df0:	681c      	ldr	r4, [r3, #0]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	6053      	str	r3, [r2, #4]
 8009df6:	4421      	add	r1, r4
 8009df8:	6011      	str	r1, [r2, #0]
 8009dfa:	e7da      	b.n	8009db2 <_free_r+0x26>
 8009dfc:	d902      	bls.n	8009e04 <_free_r+0x78>
 8009dfe:	230c      	movs	r3, #12
 8009e00:	6003      	str	r3, [r0, #0]
 8009e02:	e7d6      	b.n	8009db2 <_free_r+0x26>
 8009e04:	6825      	ldr	r5, [r4, #0]
 8009e06:	1961      	adds	r1, r4, r5
 8009e08:	428b      	cmp	r3, r1
 8009e0a:	bf04      	itt	eq
 8009e0c:	6819      	ldreq	r1, [r3, #0]
 8009e0e:	685b      	ldreq	r3, [r3, #4]
 8009e10:	6063      	str	r3, [r4, #4]
 8009e12:	bf04      	itt	eq
 8009e14:	1949      	addeq	r1, r1, r5
 8009e16:	6021      	streq	r1, [r4, #0]
 8009e18:	6054      	str	r4, [r2, #4]
 8009e1a:	e7ca      	b.n	8009db2 <_free_r+0x26>
 8009e1c:	b003      	add	sp, #12
 8009e1e:	bd30      	pop	{r4, r5, pc}
 8009e20:	20000500 	.word	0x20000500

08009e24 <sbrk_aligned>:
 8009e24:	b570      	push	{r4, r5, r6, lr}
 8009e26:	4e0e      	ldr	r6, [pc, #56]	; (8009e60 <sbrk_aligned+0x3c>)
 8009e28:	460c      	mov	r4, r1
 8009e2a:	6831      	ldr	r1, [r6, #0]
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	b911      	cbnz	r1, 8009e36 <sbrk_aligned+0x12>
 8009e30:	f000 f9e8 	bl	800a204 <_sbrk_r>
 8009e34:	6030      	str	r0, [r6, #0]
 8009e36:	4621      	mov	r1, r4
 8009e38:	4628      	mov	r0, r5
 8009e3a:	f000 f9e3 	bl	800a204 <_sbrk_r>
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	d00a      	beq.n	8009e58 <sbrk_aligned+0x34>
 8009e42:	1cc4      	adds	r4, r0, #3
 8009e44:	f024 0403 	bic.w	r4, r4, #3
 8009e48:	42a0      	cmp	r0, r4
 8009e4a:	d007      	beq.n	8009e5c <sbrk_aligned+0x38>
 8009e4c:	1a21      	subs	r1, r4, r0
 8009e4e:	4628      	mov	r0, r5
 8009e50:	f000 f9d8 	bl	800a204 <_sbrk_r>
 8009e54:	3001      	adds	r0, #1
 8009e56:	d101      	bne.n	8009e5c <sbrk_aligned+0x38>
 8009e58:	f04f 34ff 	mov.w	r4, #4294967295
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	20000504 	.word	0x20000504

08009e64 <_malloc_r>:
 8009e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e68:	1ccd      	adds	r5, r1, #3
 8009e6a:	f025 0503 	bic.w	r5, r5, #3
 8009e6e:	3508      	adds	r5, #8
 8009e70:	2d0c      	cmp	r5, #12
 8009e72:	bf38      	it	cc
 8009e74:	250c      	movcc	r5, #12
 8009e76:	2d00      	cmp	r5, #0
 8009e78:	4607      	mov	r7, r0
 8009e7a:	db01      	blt.n	8009e80 <_malloc_r+0x1c>
 8009e7c:	42a9      	cmp	r1, r5
 8009e7e:	d905      	bls.n	8009e8c <_malloc_r+0x28>
 8009e80:	230c      	movs	r3, #12
 8009e82:	603b      	str	r3, [r7, #0]
 8009e84:	2600      	movs	r6, #0
 8009e86:	4630      	mov	r0, r6
 8009e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e8c:	4e2e      	ldr	r6, [pc, #184]	; (8009f48 <_malloc_r+0xe4>)
 8009e8e:	f000 fa25 	bl	800a2dc <__malloc_lock>
 8009e92:	6833      	ldr	r3, [r6, #0]
 8009e94:	461c      	mov	r4, r3
 8009e96:	bb34      	cbnz	r4, 8009ee6 <_malloc_r+0x82>
 8009e98:	4629      	mov	r1, r5
 8009e9a:	4638      	mov	r0, r7
 8009e9c:	f7ff ffc2 	bl	8009e24 <sbrk_aligned>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	d14d      	bne.n	8009f42 <_malloc_r+0xde>
 8009ea6:	6834      	ldr	r4, [r6, #0]
 8009ea8:	4626      	mov	r6, r4
 8009eaa:	2e00      	cmp	r6, #0
 8009eac:	d140      	bne.n	8009f30 <_malloc_r+0xcc>
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	4631      	mov	r1, r6
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	eb04 0803 	add.w	r8, r4, r3
 8009eb8:	f000 f9a4 	bl	800a204 <_sbrk_r>
 8009ebc:	4580      	cmp	r8, r0
 8009ebe:	d13a      	bne.n	8009f36 <_malloc_r+0xd2>
 8009ec0:	6821      	ldr	r1, [r4, #0]
 8009ec2:	3503      	adds	r5, #3
 8009ec4:	1a6d      	subs	r5, r5, r1
 8009ec6:	f025 0503 	bic.w	r5, r5, #3
 8009eca:	3508      	adds	r5, #8
 8009ecc:	2d0c      	cmp	r5, #12
 8009ece:	bf38      	it	cc
 8009ed0:	250c      	movcc	r5, #12
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f7ff ffa5 	bl	8009e24 <sbrk_aligned>
 8009eda:	3001      	adds	r0, #1
 8009edc:	d02b      	beq.n	8009f36 <_malloc_r+0xd2>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	442b      	add	r3, r5
 8009ee2:	6023      	str	r3, [r4, #0]
 8009ee4:	e00e      	b.n	8009f04 <_malloc_r+0xa0>
 8009ee6:	6822      	ldr	r2, [r4, #0]
 8009ee8:	1b52      	subs	r2, r2, r5
 8009eea:	d41e      	bmi.n	8009f2a <_malloc_r+0xc6>
 8009eec:	2a0b      	cmp	r2, #11
 8009eee:	d916      	bls.n	8009f1e <_malloc_r+0xba>
 8009ef0:	1961      	adds	r1, r4, r5
 8009ef2:	42a3      	cmp	r3, r4
 8009ef4:	6025      	str	r5, [r4, #0]
 8009ef6:	bf18      	it	ne
 8009ef8:	6059      	strne	r1, [r3, #4]
 8009efa:	6863      	ldr	r3, [r4, #4]
 8009efc:	bf08      	it	eq
 8009efe:	6031      	streq	r1, [r6, #0]
 8009f00:	5162      	str	r2, [r4, r5]
 8009f02:	604b      	str	r3, [r1, #4]
 8009f04:	4638      	mov	r0, r7
 8009f06:	f104 060b 	add.w	r6, r4, #11
 8009f0a:	f000 f9ed 	bl	800a2e8 <__malloc_unlock>
 8009f0e:	f026 0607 	bic.w	r6, r6, #7
 8009f12:	1d23      	adds	r3, r4, #4
 8009f14:	1af2      	subs	r2, r6, r3
 8009f16:	d0b6      	beq.n	8009e86 <_malloc_r+0x22>
 8009f18:	1b9b      	subs	r3, r3, r6
 8009f1a:	50a3      	str	r3, [r4, r2]
 8009f1c:	e7b3      	b.n	8009e86 <_malloc_r+0x22>
 8009f1e:	6862      	ldr	r2, [r4, #4]
 8009f20:	42a3      	cmp	r3, r4
 8009f22:	bf0c      	ite	eq
 8009f24:	6032      	streq	r2, [r6, #0]
 8009f26:	605a      	strne	r2, [r3, #4]
 8009f28:	e7ec      	b.n	8009f04 <_malloc_r+0xa0>
 8009f2a:	4623      	mov	r3, r4
 8009f2c:	6864      	ldr	r4, [r4, #4]
 8009f2e:	e7b2      	b.n	8009e96 <_malloc_r+0x32>
 8009f30:	4634      	mov	r4, r6
 8009f32:	6876      	ldr	r6, [r6, #4]
 8009f34:	e7b9      	b.n	8009eaa <_malloc_r+0x46>
 8009f36:	230c      	movs	r3, #12
 8009f38:	603b      	str	r3, [r7, #0]
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	f000 f9d4 	bl	800a2e8 <__malloc_unlock>
 8009f40:	e7a1      	b.n	8009e86 <_malloc_r+0x22>
 8009f42:	6025      	str	r5, [r4, #0]
 8009f44:	e7de      	b.n	8009f04 <_malloc_r+0xa0>
 8009f46:	bf00      	nop
 8009f48:	20000500 	.word	0x20000500

08009f4c <__ssputs_r>:
 8009f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	688e      	ldr	r6, [r1, #8]
 8009f52:	429e      	cmp	r6, r3
 8009f54:	4682      	mov	sl, r0
 8009f56:	460c      	mov	r4, r1
 8009f58:	4690      	mov	r8, r2
 8009f5a:	461f      	mov	r7, r3
 8009f5c:	d838      	bhi.n	8009fd0 <__ssputs_r+0x84>
 8009f5e:	898a      	ldrh	r2, [r1, #12]
 8009f60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f64:	d032      	beq.n	8009fcc <__ssputs_r+0x80>
 8009f66:	6825      	ldr	r5, [r4, #0]
 8009f68:	6909      	ldr	r1, [r1, #16]
 8009f6a:	eba5 0901 	sub.w	r9, r5, r1
 8009f6e:	6965      	ldr	r5, [r4, #20]
 8009f70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f78:	3301      	adds	r3, #1
 8009f7a:	444b      	add	r3, r9
 8009f7c:	106d      	asrs	r5, r5, #1
 8009f7e:	429d      	cmp	r5, r3
 8009f80:	bf38      	it	cc
 8009f82:	461d      	movcc	r5, r3
 8009f84:	0553      	lsls	r3, r2, #21
 8009f86:	d531      	bpl.n	8009fec <__ssputs_r+0xa0>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	f7ff ff6b 	bl	8009e64 <_malloc_r>
 8009f8e:	4606      	mov	r6, r0
 8009f90:	b950      	cbnz	r0, 8009fa8 <__ssputs_r+0x5c>
 8009f92:	230c      	movs	r3, #12
 8009f94:	f8ca 3000 	str.w	r3, [sl]
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f9e:	81a3      	strh	r3, [r4, #12]
 8009fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa8:	6921      	ldr	r1, [r4, #16]
 8009faa:	464a      	mov	r2, r9
 8009fac:	f7ff fb46 	bl	800963c <memcpy>
 8009fb0:	89a3      	ldrh	r3, [r4, #12]
 8009fb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	6126      	str	r6, [r4, #16]
 8009fbe:	6165      	str	r5, [r4, #20]
 8009fc0:	444e      	add	r6, r9
 8009fc2:	eba5 0509 	sub.w	r5, r5, r9
 8009fc6:	6026      	str	r6, [r4, #0]
 8009fc8:	60a5      	str	r5, [r4, #8]
 8009fca:	463e      	mov	r6, r7
 8009fcc:	42be      	cmp	r6, r7
 8009fce:	d900      	bls.n	8009fd2 <__ssputs_r+0x86>
 8009fd0:	463e      	mov	r6, r7
 8009fd2:	6820      	ldr	r0, [r4, #0]
 8009fd4:	4632      	mov	r2, r6
 8009fd6:	4641      	mov	r1, r8
 8009fd8:	f000 f966 	bl	800a2a8 <memmove>
 8009fdc:	68a3      	ldr	r3, [r4, #8]
 8009fde:	1b9b      	subs	r3, r3, r6
 8009fe0:	60a3      	str	r3, [r4, #8]
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	4433      	add	r3, r6
 8009fe6:	6023      	str	r3, [r4, #0]
 8009fe8:	2000      	movs	r0, #0
 8009fea:	e7db      	b.n	8009fa4 <__ssputs_r+0x58>
 8009fec:	462a      	mov	r2, r5
 8009fee:	f000 f981 	bl	800a2f4 <_realloc_r>
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d1e1      	bne.n	8009fbc <__ssputs_r+0x70>
 8009ff8:	6921      	ldr	r1, [r4, #16]
 8009ffa:	4650      	mov	r0, sl
 8009ffc:	f7ff fec6 	bl	8009d8c <_free_r>
 800a000:	e7c7      	b.n	8009f92 <__ssputs_r+0x46>
	...

0800a004 <_svfiprintf_r>:
 800a004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a008:	4698      	mov	r8, r3
 800a00a:	898b      	ldrh	r3, [r1, #12]
 800a00c:	061b      	lsls	r3, r3, #24
 800a00e:	b09d      	sub	sp, #116	; 0x74
 800a010:	4607      	mov	r7, r0
 800a012:	460d      	mov	r5, r1
 800a014:	4614      	mov	r4, r2
 800a016:	d50e      	bpl.n	800a036 <_svfiprintf_r+0x32>
 800a018:	690b      	ldr	r3, [r1, #16]
 800a01a:	b963      	cbnz	r3, 800a036 <_svfiprintf_r+0x32>
 800a01c:	2140      	movs	r1, #64	; 0x40
 800a01e:	f7ff ff21 	bl	8009e64 <_malloc_r>
 800a022:	6028      	str	r0, [r5, #0]
 800a024:	6128      	str	r0, [r5, #16]
 800a026:	b920      	cbnz	r0, 800a032 <_svfiprintf_r+0x2e>
 800a028:	230c      	movs	r3, #12
 800a02a:	603b      	str	r3, [r7, #0]
 800a02c:	f04f 30ff 	mov.w	r0, #4294967295
 800a030:	e0d1      	b.n	800a1d6 <_svfiprintf_r+0x1d2>
 800a032:	2340      	movs	r3, #64	; 0x40
 800a034:	616b      	str	r3, [r5, #20]
 800a036:	2300      	movs	r3, #0
 800a038:	9309      	str	r3, [sp, #36]	; 0x24
 800a03a:	2320      	movs	r3, #32
 800a03c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a040:	f8cd 800c 	str.w	r8, [sp, #12]
 800a044:	2330      	movs	r3, #48	; 0x30
 800a046:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1f0 <_svfiprintf_r+0x1ec>
 800a04a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a04e:	f04f 0901 	mov.w	r9, #1
 800a052:	4623      	mov	r3, r4
 800a054:	469a      	mov	sl, r3
 800a056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a05a:	b10a      	cbz	r2, 800a060 <_svfiprintf_r+0x5c>
 800a05c:	2a25      	cmp	r2, #37	; 0x25
 800a05e:	d1f9      	bne.n	800a054 <_svfiprintf_r+0x50>
 800a060:	ebba 0b04 	subs.w	fp, sl, r4
 800a064:	d00b      	beq.n	800a07e <_svfiprintf_r+0x7a>
 800a066:	465b      	mov	r3, fp
 800a068:	4622      	mov	r2, r4
 800a06a:	4629      	mov	r1, r5
 800a06c:	4638      	mov	r0, r7
 800a06e:	f7ff ff6d 	bl	8009f4c <__ssputs_r>
 800a072:	3001      	adds	r0, #1
 800a074:	f000 80aa 	beq.w	800a1cc <_svfiprintf_r+0x1c8>
 800a078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a07a:	445a      	add	r2, fp
 800a07c:	9209      	str	r2, [sp, #36]	; 0x24
 800a07e:	f89a 3000 	ldrb.w	r3, [sl]
 800a082:	2b00      	cmp	r3, #0
 800a084:	f000 80a2 	beq.w	800a1cc <_svfiprintf_r+0x1c8>
 800a088:	2300      	movs	r3, #0
 800a08a:	f04f 32ff 	mov.w	r2, #4294967295
 800a08e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a092:	f10a 0a01 	add.w	sl, sl, #1
 800a096:	9304      	str	r3, [sp, #16]
 800a098:	9307      	str	r3, [sp, #28]
 800a09a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a09e:	931a      	str	r3, [sp, #104]	; 0x68
 800a0a0:	4654      	mov	r4, sl
 800a0a2:	2205      	movs	r2, #5
 800a0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a8:	4851      	ldr	r0, [pc, #324]	; (800a1f0 <_svfiprintf_r+0x1ec>)
 800a0aa:	f7f6 f8a1 	bl	80001f0 <memchr>
 800a0ae:	9a04      	ldr	r2, [sp, #16]
 800a0b0:	b9d8      	cbnz	r0, 800a0ea <_svfiprintf_r+0xe6>
 800a0b2:	06d0      	lsls	r0, r2, #27
 800a0b4:	bf44      	itt	mi
 800a0b6:	2320      	movmi	r3, #32
 800a0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0bc:	0711      	lsls	r1, r2, #28
 800a0be:	bf44      	itt	mi
 800a0c0:	232b      	movmi	r3, #43	; 0x2b
 800a0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a0cc:	d015      	beq.n	800a0fa <_svfiprintf_r+0xf6>
 800a0ce:	9a07      	ldr	r2, [sp, #28]
 800a0d0:	4654      	mov	r4, sl
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	f04f 0c0a 	mov.w	ip, #10
 800a0d8:	4621      	mov	r1, r4
 800a0da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0de:	3b30      	subs	r3, #48	; 0x30
 800a0e0:	2b09      	cmp	r3, #9
 800a0e2:	d94e      	bls.n	800a182 <_svfiprintf_r+0x17e>
 800a0e4:	b1b0      	cbz	r0, 800a114 <_svfiprintf_r+0x110>
 800a0e6:	9207      	str	r2, [sp, #28]
 800a0e8:	e014      	b.n	800a114 <_svfiprintf_r+0x110>
 800a0ea:	eba0 0308 	sub.w	r3, r0, r8
 800a0ee:	fa09 f303 	lsl.w	r3, r9, r3
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	9304      	str	r3, [sp, #16]
 800a0f6:	46a2      	mov	sl, r4
 800a0f8:	e7d2      	b.n	800a0a0 <_svfiprintf_r+0x9c>
 800a0fa:	9b03      	ldr	r3, [sp, #12]
 800a0fc:	1d19      	adds	r1, r3, #4
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	9103      	str	r1, [sp, #12]
 800a102:	2b00      	cmp	r3, #0
 800a104:	bfbb      	ittet	lt
 800a106:	425b      	neglt	r3, r3
 800a108:	f042 0202 	orrlt.w	r2, r2, #2
 800a10c:	9307      	strge	r3, [sp, #28]
 800a10e:	9307      	strlt	r3, [sp, #28]
 800a110:	bfb8      	it	lt
 800a112:	9204      	strlt	r2, [sp, #16]
 800a114:	7823      	ldrb	r3, [r4, #0]
 800a116:	2b2e      	cmp	r3, #46	; 0x2e
 800a118:	d10c      	bne.n	800a134 <_svfiprintf_r+0x130>
 800a11a:	7863      	ldrb	r3, [r4, #1]
 800a11c:	2b2a      	cmp	r3, #42	; 0x2a
 800a11e:	d135      	bne.n	800a18c <_svfiprintf_r+0x188>
 800a120:	9b03      	ldr	r3, [sp, #12]
 800a122:	1d1a      	adds	r2, r3, #4
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	9203      	str	r2, [sp, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	bfb8      	it	lt
 800a12c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a130:	3402      	adds	r4, #2
 800a132:	9305      	str	r3, [sp, #20]
 800a134:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a200 <_svfiprintf_r+0x1fc>
 800a138:	7821      	ldrb	r1, [r4, #0]
 800a13a:	2203      	movs	r2, #3
 800a13c:	4650      	mov	r0, sl
 800a13e:	f7f6 f857 	bl	80001f0 <memchr>
 800a142:	b140      	cbz	r0, 800a156 <_svfiprintf_r+0x152>
 800a144:	2340      	movs	r3, #64	; 0x40
 800a146:	eba0 000a 	sub.w	r0, r0, sl
 800a14a:	fa03 f000 	lsl.w	r0, r3, r0
 800a14e:	9b04      	ldr	r3, [sp, #16]
 800a150:	4303      	orrs	r3, r0
 800a152:	3401      	adds	r4, #1
 800a154:	9304      	str	r3, [sp, #16]
 800a156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a15a:	4826      	ldr	r0, [pc, #152]	; (800a1f4 <_svfiprintf_r+0x1f0>)
 800a15c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a160:	2206      	movs	r2, #6
 800a162:	f7f6 f845 	bl	80001f0 <memchr>
 800a166:	2800      	cmp	r0, #0
 800a168:	d038      	beq.n	800a1dc <_svfiprintf_r+0x1d8>
 800a16a:	4b23      	ldr	r3, [pc, #140]	; (800a1f8 <_svfiprintf_r+0x1f4>)
 800a16c:	bb1b      	cbnz	r3, 800a1b6 <_svfiprintf_r+0x1b2>
 800a16e:	9b03      	ldr	r3, [sp, #12]
 800a170:	3307      	adds	r3, #7
 800a172:	f023 0307 	bic.w	r3, r3, #7
 800a176:	3308      	adds	r3, #8
 800a178:	9303      	str	r3, [sp, #12]
 800a17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17c:	4433      	add	r3, r6
 800a17e:	9309      	str	r3, [sp, #36]	; 0x24
 800a180:	e767      	b.n	800a052 <_svfiprintf_r+0x4e>
 800a182:	fb0c 3202 	mla	r2, ip, r2, r3
 800a186:	460c      	mov	r4, r1
 800a188:	2001      	movs	r0, #1
 800a18a:	e7a5      	b.n	800a0d8 <_svfiprintf_r+0xd4>
 800a18c:	2300      	movs	r3, #0
 800a18e:	3401      	adds	r4, #1
 800a190:	9305      	str	r3, [sp, #20]
 800a192:	4619      	mov	r1, r3
 800a194:	f04f 0c0a 	mov.w	ip, #10
 800a198:	4620      	mov	r0, r4
 800a19a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a19e:	3a30      	subs	r2, #48	; 0x30
 800a1a0:	2a09      	cmp	r2, #9
 800a1a2:	d903      	bls.n	800a1ac <_svfiprintf_r+0x1a8>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d0c5      	beq.n	800a134 <_svfiprintf_r+0x130>
 800a1a8:	9105      	str	r1, [sp, #20]
 800a1aa:	e7c3      	b.n	800a134 <_svfiprintf_r+0x130>
 800a1ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e7f0      	b.n	800a198 <_svfiprintf_r+0x194>
 800a1b6:	ab03      	add	r3, sp, #12
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	462a      	mov	r2, r5
 800a1bc:	4b0f      	ldr	r3, [pc, #60]	; (800a1fc <_svfiprintf_r+0x1f8>)
 800a1be:	a904      	add	r1, sp, #16
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f7fd ffc9 	bl	8008158 <_printf_float>
 800a1c6:	1c42      	adds	r2, r0, #1
 800a1c8:	4606      	mov	r6, r0
 800a1ca:	d1d6      	bne.n	800a17a <_svfiprintf_r+0x176>
 800a1cc:	89ab      	ldrh	r3, [r5, #12]
 800a1ce:	065b      	lsls	r3, r3, #25
 800a1d0:	f53f af2c 	bmi.w	800a02c <_svfiprintf_r+0x28>
 800a1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1d6:	b01d      	add	sp, #116	; 0x74
 800a1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1dc:	ab03      	add	r3, sp, #12
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	4b06      	ldr	r3, [pc, #24]	; (800a1fc <_svfiprintf_r+0x1f8>)
 800a1e4:	a904      	add	r1, sp, #16
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	f7fe fa5a 	bl	80086a0 <_printf_i>
 800a1ec:	e7eb      	b.n	800a1c6 <_svfiprintf_r+0x1c2>
 800a1ee:	bf00      	nop
 800a1f0:	080158ac 	.word	0x080158ac
 800a1f4:	080158b6 	.word	0x080158b6
 800a1f8:	08008159 	.word	0x08008159
 800a1fc:	08009f4d 	.word	0x08009f4d
 800a200:	080158b2 	.word	0x080158b2

0800a204 <_sbrk_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	4d06      	ldr	r5, [pc, #24]	; (800a220 <_sbrk_r+0x1c>)
 800a208:	2300      	movs	r3, #0
 800a20a:	4604      	mov	r4, r0
 800a20c:	4608      	mov	r0, r1
 800a20e:	602b      	str	r3, [r5, #0]
 800a210:	f7fa fb74 	bl	80048fc <_sbrk>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_sbrk_r+0x1a>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_sbrk_r+0x1a>
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	20000508 	.word	0x20000508

0800a224 <__assert_func>:
 800a224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a226:	4614      	mov	r4, r2
 800a228:	461a      	mov	r2, r3
 800a22a:	4b09      	ldr	r3, [pc, #36]	; (800a250 <__assert_func+0x2c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4605      	mov	r5, r0
 800a230:	68d8      	ldr	r0, [r3, #12]
 800a232:	b14c      	cbz	r4, 800a248 <__assert_func+0x24>
 800a234:	4b07      	ldr	r3, [pc, #28]	; (800a254 <__assert_func+0x30>)
 800a236:	9100      	str	r1, [sp, #0]
 800a238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a23c:	4906      	ldr	r1, [pc, #24]	; (800a258 <__assert_func+0x34>)
 800a23e:	462b      	mov	r3, r5
 800a240:	f000 f80e 	bl	800a260 <fiprintf>
 800a244:	f000 faac 	bl	800a7a0 <abort>
 800a248:	4b04      	ldr	r3, [pc, #16]	; (800a25c <__assert_func+0x38>)
 800a24a:	461c      	mov	r4, r3
 800a24c:	e7f3      	b.n	800a236 <__assert_func+0x12>
 800a24e:	bf00      	nop
 800a250:	2000005c 	.word	0x2000005c
 800a254:	080158bd 	.word	0x080158bd
 800a258:	080158ca 	.word	0x080158ca
 800a25c:	080158f8 	.word	0x080158f8

0800a260 <fiprintf>:
 800a260:	b40e      	push	{r1, r2, r3}
 800a262:	b503      	push	{r0, r1, lr}
 800a264:	4601      	mov	r1, r0
 800a266:	ab03      	add	r3, sp, #12
 800a268:	4805      	ldr	r0, [pc, #20]	; (800a280 <fiprintf+0x20>)
 800a26a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a26e:	6800      	ldr	r0, [r0, #0]
 800a270:	9301      	str	r3, [sp, #4]
 800a272:	f000 f897 	bl	800a3a4 <_vfiprintf_r>
 800a276:	b002      	add	sp, #8
 800a278:	f85d eb04 	ldr.w	lr, [sp], #4
 800a27c:	b003      	add	sp, #12
 800a27e:	4770      	bx	lr
 800a280:	2000005c 	.word	0x2000005c

0800a284 <__ascii_mbtowc>:
 800a284:	b082      	sub	sp, #8
 800a286:	b901      	cbnz	r1, 800a28a <__ascii_mbtowc+0x6>
 800a288:	a901      	add	r1, sp, #4
 800a28a:	b142      	cbz	r2, 800a29e <__ascii_mbtowc+0x1a>
 800a28c:	b14b      	cbz	r3, 800a2a2 <__ascii_mbtowc+0x1e>
 800a28e:	7813      	ldrb	r3, [r2, #0]
 800a290:	600b      	str	r3, [r1, #0]
 800a292:	7812      	ldrb	r2, [r2, #0]
 800a294:	1e10      	subs	r0, r2, #0
 800a296:	bf18      	it	ne
 800a298:	2001      	movne	r0, #1
 800a29a:	b002      	add	sp, #8
 800a29c:	4770      	bx	lr
 800a29e:	4610      	mov	r0, r2
 800a2a0:	e7fb      	b.n	800a29a <__ascii_mbtowc+0x16>
 800a2a2:	f06f 0001 	mvn.w	r0, #1
 800a2a6:	e7f8      	b.n	800a29a <__ascii_mbtowc+0x16>

0800a2a8 <memmove>:
 800a2a8:	4288      	cmp	r0, r1
 800a2aa:	b510      	push	{r4, lr}
 800a2ac:	eb01 0402 	add.w	r4, r1, r2
 800a2b0:	d902      	bls.n	800a2b8 <memmove+0x10>
 800a2b2:	4284      	cmp	r4, r0
 800a2b4:	4623      	mov	r3, r4
 800a2b6:	d807      	bhi.n	800a2c8 <memmove+0x20>
 800a2b8:	1e43      	subs	r3, r0, #1
 800a2ba:	42a1      	cmp	r1, r4
 800a2bc:	d008      	beq.n	800a2d0 <memmove+0x28>
 800a2be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2c6:	e7f8      	b.n	800a2ba <memmove+0x12>
 800a2c8:	4402      	add	r2, r0
 800a2ca:	4601      	mov	r1, r0
 800a2cc:	428a      	cmp	r2, r1
 800a2ce:	d100      	bne.n	800a2d2 <memmove+0x2a>
 800a2d0:	bd10      	pop	{r4, pc}
 800a2d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2da:	e7f7      	b.n	800a2cc <memmove+0x24>

0800a2dc <__malloc_lock>:
 800a2dc:	4801      	ldr	r0, [pc, #4]	; (800a2e4 <__malloc_lock+0x8>)
 800a2de:	f000 bc1f 	b.w	800ab20 <__retarget_lock_acquire_recursive>
 800a2e2:	bf00      	nop
 800a2e4:	2000050c 	.word	0x2000050c

0800a2e8 <__malloc_unlock>:
 800a2e8:	4801      	ldr	r0, [pc, #4]	; (800a2f0 <__malloc_unlock+0x8>)
 800a2ea:	f000 bc1a 	b.w	800ab22 <__retarget_lock_release_recursive>
 800a2ee:	bf00      	nop
 800a2f0:	2000050c 	.word	0x2000050c

0800a2f4 <_realloc_r>:
 800a2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f8:	4680      	mov	r8, r0
 800a2fa:	4614      	mov	r4, r2
 800a2fc:	460e      	mov	r6, r1
 800a2fe:	b921      	cbnz	r1, 800a30a <_realloc_r+0x16>
 800a300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a304:	4611      	mov	r1, r2
 800a306:	f7ff bdad 	b.w	8009e64 <_malloc_r>
 800a30a:	b92a      	cbnz	r2, 800a318 <_realloc_r+0x24>
 800a30c:	f7ff fd3e 	bl	8009d8c <_free_r>
 800a310:	4625      	mov	r5, r4
 800a312:	4628      	mov	r0, r5
 800a314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a318:	f000 fc6a 	bl	800abf0 <_malloc_usable_size_r>
 800a31c:	4284      	cmp	r4, r0
 800a31e:	4607      	mov	r7, r0
 800a320:	d802      	bhi.n	800a328 <_realloc_r+0x34>
 800a322:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a326:	d812      	bhi.n	800a34e <_realloc_r+0x5a>
 800a328:	4621      	mov	r1, r4
 800a32a:	4640      	mov	r0, r8
 800a32c:	f7ff fd9a 	bl	8009e64 <_malloc_r>
 800a330:	4605      	mov	r5, r0
 800a332:	2800      	cmp	r0, #0
 800a334:	d0ed      	beq.n	800a312 <_realloc_r+0x1e>
 800a336:	42bc      	cmp	r4, r7
 800a338:	4622      	mov	r2, r4
 800a33a:	4631      	mov	r1, r6
 800a33c:	bf28      	it	cs
 800a33e:	463a      	movcs	r2, r7
 800a340:	f7ff f97c 	bl	800963c <memcpy>
 800a344:	4631      	mov	r1, r6
 800a346:	4640      	mov	r0, r8
 800a348:	f7ff fd20 	bl	8009d8c <_free_r>
 800a34c:	e7e1      	b.n	800a312 <_realloc_r+0x1e>
 800a34e:	4635      	mov	r5, r6
 800a350:	e7df      	b.n	800a312 <_realloc_r+0x1e>

0800a352 <__sfputc_r>:
 800a352:	6893      	ldr	r3, [r2, #8]
 800a354:	3b01      	subs	r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	b410      	push	{r4}
 800a35a:	6093      	str	r3, [r2, #8]
 800a35c:	da08      	bge.n	800a370 <__sfputc_r+0x1e>
 800a35e:	6994      	ldr	r4, [r2, #24]
 800a360:	42a3      	cmp	r3, r4
 800a362:	db01      	blt.n	800a368 <__sfputc_r+0x16>
 800a364:	290a      	cmp	r1, #10
 800a366:	d103      	bne.n	800a370 <__sfputc_r+0x1e>
 800a368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a36c:	f000 b94a 	b.w	800a604 <__swbuf_r>
 800a370:	6813      	ldr	r3, [r2, #0]
 800a372:	1c58      	adds	r0, r3, #1
 800a374:	6010      	str	r0, [r2, #0]
 800a376:	7019      	strb	r1, [r3, #0]
 800a378:	4608      	mov	r0, r1
 800a37a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <__sfputs_r>:
 800a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a382:	4606      	mov	r6, r0
 800a384:	460f      	mov	r7, r1
 800a386:	4614      	mov	r4, r2
 800a388:	18d5      	adds	r5, r2, r3
 800a38a:	42ac      	cmp	r4, r5
 800a38c:	d101      	bne.n	800a392 <__sfputs_r+0x12>
 800a38e:	2000      	movs	r0, #0
 800a390:	e007      	b.n	800a3a2 <__sfputs_r+0x22>
 800a392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a396:	463a      	mov	r2, r7
 800a398:	4630      	mov	r0, r6
 800a39a:	f7ff ffda 	bl	800a352 <__sfputc_r>
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	d1f3      	bne.n	800a38a <__sfputs_r+0xa>
 800a3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3a4 <_vfiprintf_r>:
 800a3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a8:	460d      	mov	r5, r1
 800a3aa:	b09d      	sub	sp, #116	; 0x74
 800a3ac:	4614      	mov	r4, r2
 800a3ae:	4698      	mov	r8, r3
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	b118      	cbz	r0, 800a3bc <_vfiprintf_r+0x18>
 800a3b4:	6983      	ldr	r3, [r0, #24]
 800a3b6:	b90b      	cbnz	r3, 800a3bc <_vfiprintf_r+0x18>
 800a3b8:	f000 fb14 	bl	800a9e4 <__sinit>
 800a3bc:	4b89      	ldr	r3, [pc, #548]	; (800a5e4 <_vfiprintf_r+0x240>)
 800a3be:	429d      	cmp	r5, r3
 800a3c0:	d11b      	bne.n	800a3fa <_vfiprintf_r+0x56>
 800a3c2:	6875      	ldr	r5, [r6, #4]
 800a3c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3c6:	07d9      	lsls	r1, r3, #31
 800a3c8:	d405      	bmi.n	800a3d6 <_vfiprintf_r+0x32>
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	059a      	lsls	r2, r3, #22
 800a3ce:	d402      	bmi.n	800a3d6 <_vfiprintf_r+0x32>
 800a3d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3d2:	f000 fba5 	bl	800ab20 <__retarget_lock_acquire_recursive>
 800a3d6:	89ab      	ldrh	r3, [r5, #12]
 800a3d8:	071b      	lsls	r3, r3, #28
 800a3da:	d501      	bpl.n	800a3e0 <_vfiprintf_r+0x3c>
 800a3dc:	692b      	ldr	r3, [r5, #16]
 800a3de:	b9eb      	cbnz	r3, 800a41c <_vfiprintf_r+0x78>
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f000 f96e 	bl	800a6c4 <__swsetup_r>
 800a3e8:	b1c0      	cbz	r0, 800a41c <_vfiprintf_r+0x78>
 800a3ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3ec:	07dc      	lsls	r4, r3, #31
 800a3ee:	d50e      	bpl.n	800a40e <_vfiprintf_r+0x6a>
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	b01d      	add	sp, #116	; 0x74
 800a3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fa:	4b7b      	ldr	r3, [pc, #492]	; (800a5e8 <_vfiprintf_r+0x244>)
 800a3fc:	429d      	cmp	r5, r3
 800a3fe:	d101      	bne.n	800a404 <_vfiprintf_r+0x60>
 800a400:	68b5      	ldr	r5, [r6, #8]
 800a402:	e7df      	b.n	800a3c4 <_vfiprintf_r+0x20>
 800a404:	4b79      	ldr	r3, [pc, #484]	; (800a5ec <_vfiprintf_r+0x248>)
 800a406:	429d      	cmp	r5, r3
 800a408:	bf08      	it	eq
 800a40a:	68f5      	ldreq	r5, [r6, #12]
 800a40c:	e7da      	b.n	800a3c4 <_vfiprintf_r+0x20>
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	0598      	lsls	r0, r3, #22
 800a412:	d4ed      	bmi.n	800a3f0 <_vfiprintf_r+0x4c>
 800a414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a416:	f000 fb84 	bl	800ab22 <__retarget_lock_release_recursive>
 800a41a:	e7e9      	b.n	800a3f0 <_vfiprintf_r+0x4c>
 800a41c:	2300      	movs	r3, #0
 800a41e:	9309      	str	r3, [sp, #36]	; 0x24
 800a420:	2320      	movs	r3, #32
 800a422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a426:	f8cd 800c 	str.w	r8, [sp, #12]
 800a42a:	2330      	movs	r3, #48	; 0x30
 800a42c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5f0 <_vfiprintf_r+0x24c>
 800a430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a434:	f04f 0901 	mov.w	r9, #1
 800a438:	4623      	mov	r3, r4
 800a43a:	469a      	mov	sl, r3
 800a43c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a440:	b10a      	cbz	r2, 800a446 <_vfiprintf_r+0xa2>
 800a442:	2a25      	cmp	r2, #37	; 0x25
 800a444:	d1f9      	bne.n	800a43a <_vfiprintf_r+0x96>
 800a446:	ebba 0b04 	subs.w	fp, sl, r4
 800a44a:	d00b      	beq.n	800a464 <_vfiprintf_r+0xc0>
 800a44c:	465b      	mov	r3, fp
 800a44e:	4622      	mov	r2, r4
 800a450:	4629      	mov	r1, r5
 800a452:	4630      	mov	r0, r6
 800a454:	f7ff ff94 	bl	800a380 <__sfputs_r>
 800a458:	3001      	adds	r0, #1
 800a45a:	f000 80aa 	beq.w	800a5b2 <_vfiprintf_r+0x20e>
 800a45e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a460:	445a      	add	r2, fp
 800a462:	9209      	str	r2, [sp, #36]	; 0x24
 800a464:	f89a 3000 	ldrb.w	r3, [sl]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f000 80a2 	beq.w	800a5b2 <_vfiprintf_r+0x20e>
 800a46e:	2300      	movs	r3, #0
 800a470:	f04f 32ff 	mov.w	r2, #4294967295
 800a474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a478:	f10a 0a01 	add.w	sl, sl, #1
 800a47c:	9304      	str	r3, [sp, #16]
 800a47e:	9307      	str	r3, [sp, #28]
 800a480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a484:	931a      	str	r3, [sp, #104]	; 0x68
 800a486:	4654      	mov	r4, sl
 800a488:	2205      	movs	r2, #5
 800a48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48e:	4858      	ldr	r0, [pc, #352]	; (800a5f0 <_vfiprintf_r+0x24c>)
 800a490:	f7f5 feae 	bl	80001f0 <memchr>
 800a494:	9a04      	ldr	r2, [sp, #16]
 800a496:	b9d8      	cbnz	r0, 800a4d0 <_vfiprintf_r+0x12c>
 800a498:	06d1      	lsls	r1, r2, #27
 800a49a:	bf44      	itt	mi
 800a49c:	2320      	movmi	r3, #32
 800a49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4a2:	0713      	lsls	r3, r2, #28
 800a4a4:	bf44      	itt	mi
 800a4a6:	232b      	movmi	r3, #43	; 0x2b
 800a4a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a4b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4b2:	d015      	beq.n	800a4e0 <_vfiprintf_r+0x13c>
 800a4b4:	9a07      	ldr	r2, [sp, #28]
 800a4b6:	4654      	mov	r4, sl
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	f04f 0c0a 	mov.w	ip, #10
 800a4be:	4621      	mov	r1, r4
 800a4c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4c4:	3b30      	subs	r3, #48	; 0x30
 800a4c6:	2b09      	cmp	r3, #9
 800a4c8:	d94e      	bls.n	800a568 <_vfiprintf_r+0x1c4>
 800a4ca:	b1b0      	cbz	r0, 800a4fa <_vfiprintf_r+0x156>
 800a4cc:	9207      	str	r2, [sp, #28]
 800a4ce:	e014      	b.n	800a4fa <_vfiprintf_r+0x156>
 800a4d0:	eba0 0308 	sub.w	r3, r0, r8
 800a4d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	9304      	str	r3, [sp, #16]
 800a4dc:	46a2      	mov	sl, r4
 800a4de:	e7d2      	b.n	800a486 <_vfiprintf_r+0xe2>
 800a4e0:	9b03      	ldr	r3, [sp, #12]
 800a4e2:	1d19      	adds	r1, r3, #4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	9103      	str	r1, [sp, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	bfbb      	ittet	lt
 800a4ec:	425b      	neglt	r3, r3
 800a4ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a4f2:	9307      	strge	r3, [sp, #28]
 800a4f4:	9307      	strlt	r3, [sp, #28]
 800a4f6:	bfb8      	it	lt
 800a4f8:	9204      	strlt	r2, [sp, #16]
 800a4fa:	7823      	ldrb	r3, [r4, #0]
 800a4fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a4fe:	d10c      	bne.n	800a51a <_vfiprintf_r+0x176>
 800a500:	7863      	ldrb	r3, [r4, #1]
 800a502:	2b2a      	cmp	r3, #42	; 0x2a
 800a504:	d135      	bne.n	800a572 <_vfiprintf_r+0x1ce>
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	1d1a      	adds	r2, r3, #4
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	9203      	str	r2, [sp, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	bfb8      	it	lt
 800a512:	f04f 33ff 	movlt.w	r3, #4294967295
 800a516:	3402      	adds	r4, #2
 800a518:	9305      	str	r3, [sp, #20]
 800a51a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a600 <_vfiprintf_r+0x25c>
 800a51e:	7821      	ldrb	r1, [r4, #0]
 800a520:	2203      	movs	r2, #3
 800a522:	4650      	mov	r0, sl
 800a524:	f7f5 fe64 	bl	80001f0 <memchr>
 800a528:	b140      	cbz	r0, 800a53c <_vfiprintf_r+0x198>
 800a52a:	2340      	movs	r3, #64	; 0x40
 800a52c:	eba0 000a 	sub.w	r0, r0, sl
 800a530:	fa03 f000 	lsl.w	r0, r3, r0
 800a534:	9b04      	ldr	r3, [sp, #16]
 800a536:	4303      	orrs	r3, r0
 800a538:	3401      	adds	r4, #1
 800a53a:	9304      	str	r3, [sp, #16]
 800a53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a540:	482c      	ldr	r0, [pc, #176]	; (800a5f4 <_vfiprintf_r+0x250>)
 800a542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a546:	2206      	movs	r2, #6
 800a548:	f7f5 fe52 	bl	80001f0 <memchr>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d03f      	beq.n	800a5d0 <_vfiprintf_r+0x22c>
 800a550:	4b29      	ldr	r3, [pc, #164]	; (800a5f8 <_vfiprintf_r+0x254>)
 800a552:	bb1b      	cbnz	r3, 800a59c <_vfiprintf_r+0x1f8>
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	3307      	adds	r3, #7
 800a558:	f023 0307 	bic.w	r3, r3, #7
 800a55c:	3308      	adds	r3, #8
 800a55e:	9303      	str	r3, [sp, #12]
 800a560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a562:	443b      	add	r3, r7
 800a564:	9309      	str	r3, [sp, #36]	; 0x24
 800a566:	e767      	b.n	800a438 <_vfiprintf_r+0x94>
 800a568:	fb0c 3202 	mla	r2, ip, r2, r3
 800a56c:	460c      	mov	r4, r1
 800a56e:	2001      	movs	r0, #1
 800a570:	e7a5      	b.n	800a4be <_vfiprintf_r+0x11a>
 800a572:	2300      	movs	r3, #0
 800a574:	3401      	adds	r4, #1
 800a576:	9305      	str	r3, [sp, #20]
 800a578:	4619      	mov	r1, r3
 800a57a:	f04f 0c0a 	mov.w	ip, #10
 800a57e:	4620      	mov	r0, r4
 800a580:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a584:	3a30      	subs	r2, #48	; 0x30
 800a586:	2a09      	cmp	r2, #9
 800a588:	d903      	bls.n	800a592 <_vfiprintf_r+0x1ee>
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d0c5      	beq.n	800a51a <_vfiprintf_r+0x176>
 800a58e:	9105      	str	r1, [sp, #20]
 800a590:	e7c3      	b.n	800a51a <_vfiprintf_r+0x176>
 800a592:	fb0c 2101 	mla	r1, ip, r1, r2
 800a596:	4604      	mov	r4, r0
 800a598:	2301      	movs	r3, #1
 800a59a:	e7f0      	b.n	800a57e <_vfiprintf_r+0x1da>
 800a59c:	ab03      	add	r3, sp, #12
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	462a      	mov	r2, r5
 800a5a2:	4b16      	ldr	r3, [pc, #88]	; (800a5fc <_vfiprintf_r+0x258>)
 800a5a4:	a904      	add	r1, sp, #16
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	f7fd fdd6 	bl	8008158 <_printf_float>
 800a5ac:	4607      	mov	r7, r0
 800a5ae:	1c78      	adds	r0, r7, #1
 800a5b0:	d1d6      	bne.n	800a560 <_vfiprintf_r+0x1bc>
 800a5b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5b4:	07d9      	lsls	r1, r3, #31
 800a5b6:	d405      	bmi.n	800a5c4 <_vfiprintf_r+0x220>
 800a5b8:	89ab      	ldrh	r3, [r5, #12]
 800a5ba:	059a      	lsls	r2, r3, #22
 800a5bc:	d402      	bmi.n	800a5c4 <_vfiprintf_r+0x220>
 800a5be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5c0:	f000 faaf 	bl	800ab22 <__retarget_lock_release_recursive>
 800a5c4:	89ab      	ldrh	r3, [r5, #12]
 800a5c6:	065b      	lsls	r3, r3, #25
 800a5c8:	f53f af12 	bmi.w	800a3f0 <_vfiprintf_r+0x4c>
 800a5cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ce:	e711      	b.n	800a3f4 <_vfiprintf_r+0x50>
 800a5d0:	ab03      	add	r3, sp, #12
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	462a      	mov	r2, r5
 800a5d6:	4b09      	ldr	r3, [pc, #36]	; (800a5fc <_vfiprintf_r+0x258>)
 800a5d8:	a904      	add	r1, sp, #16
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7fe f860 	bl	80086a0 <_printf_i>
 800a5e0:	e7e4      	b.n	800a5ac <_vfiprintf_r+0x208>
 800a5e2:	bf00      	nop
 800a5e4:	08015a24 	.word	0x08015a24
 800a5e8:	08015a44 	.word	0x08015a44
 800a5ec:	08015a04 	.word	0x08015a04
 800a5f0:	080158ac 	.word	0x080158ac
 800a5f4:	080158b6 	.word	0x080158b6
 800a5f8:	08008159 	.word	0x08008159
 800a5fc:	0800a381 	.word	0x0800a381
 800a600:	080158b2 	.word	0x080158b2

0800a604 <__swbuf_r>:
 800a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a606:	460e      	mov	r6, r1
 800a608:	4614      	mov	r4, r2
 800a60a:	4605      	mov	r5, r0
 800a60c:	b118      	cbz	r0, 800a616 <__swbuf_r+0x12>
 800a60e:	6983      	ldr	r3, [r0, #24]
 800a610:	b90b      	cbnz	r3, 800a616 <__swbuf_r+0x12>
 800a612:	f000 f9e7 	bl	800a9e4 <__sinit>
 800a616:	4b21      	ldr	r3, [pc, #132]	; (800a69c <__swbuf_r+0x98>)
 800a618:	429c      	cmp	r4, r3
 800a61a:	d12b      	bne.n	800a674 <__swbuf_r+0x70>
 800a61c:	686c      	ldr	r4, [r5, #4]
 800a61e:	69a3      	ldr	r3, [r4, #24]
 800a620:	60a3      	str	r3, [r4, #8]
 800a622:	89a3      	ldrh	r3, [r4, #12]
 800a624:	071a      	lsls	r2, r3, #28
 800a626:	d52f      	bpl.n	800a688 <__swbuf_r+0x84>
 800a628:	6923      	ldr	r3, [r4, #16]
 800a62a:	b36b      	cbz	r3, 800a688 <__swbuf_r+0x84>
 800a62c:	6923      	ldr	r3, [r4, #16]
 800a62e:	6820      	ldr	r0, [r4, #0]
 800a630:	1ac0      	subs	r0, r0, r3
 800a632:	6963      	ldr	r3, [r4, #20]
 800a634:	b2f6      	uxtb	r6, r6
 800a636:	4283      	cmp	r3, r0
 800a638:	4637      	mov	r7, r6
 800a63a:	dc04      	bgt.n	800a646 <__swbuf_r+0x42>
 800a63c:	4621      	mov	r1, r4
 800a63e:	4628      	mov	r0, r5
 800a640:	f000 f93c 	bl	800a8bc <_fflush_r>
 800a644:	bb30      	cbnz	r0, 800a694 <__swbuf_r+0x90>
 800a646:	68a3      	ldr	r3, [r4, #8]
 800a648:	3b01      	subs	r3, #1
 800a64a:	60a3      	str	r3, [r4, #8]
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	6022      	str	r2, [r4, #0]
 800a652:	701e      	strb	r6, [r3, #0]
 800a654:	6963      	ldr	r3, [r4, #20]
 800a656:	3001      	adds	r0, #1
 800a658:	4283      	cmp	r3, r0
 800a65a:	d004      	beq.n	800a666 <__swbuf_r+0x62>
 800a65c:	89a3      	ldrh	r3, [r4, #12]
 800a65e:	07db      	lsls	r3, r3, #31
 800a660:	d506      	bpl.n	800a670 <__swbuf_r+0x6c>
 800a662:	2e0a      	cmp	r6, #10
 800a664:	d104      	bne.n	800a670 <__swbuf_r+0x6c>
 800a666:	4621      	mov	r1, r4
 800a668:	4628      	mov	r0, r5
 800a66a:	f000 f927 	bl	800a8bc <_fflush_r>
 800a66e:	b988      	cbnz	r0, 800a694 <__swbuf_r+0x90>
 800a670:	4638      	mov	r0, r7
 800a672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a674:	4b0a      	ldr	r3, [pc, #40]	; (800a6a0 <__swbuf_r+0x9c>)
 800a676:	429c      	cmp	r4, r3
 800a678:	d101      	bne.n	800a67e <__swbuf_r+0x7a>
 800a67a:	68ac      	ldr	r4, [r5, #8]
 800a67c:	e7cf      	b.n	800a61e <__swbuf_r+0x1a>
 800a67e:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <__swbuf_r+0xa0>)
 800a680:	429c      	cmp	r4, r3
 800a682:	bf08      	it	eq
 800a684:	68ec      	ldreq	r4, [r5, #12]
 800a686:	e7ca      	b.n	800a61e <__swbuf_r+0x1a>
 800a688:	4621      	mov	r1, r4
 800a68a:	4628      	mov	r0, r5
 800a68c:	f000 f81a 	bl	800a6c4 <__swsetup_r>
 800a690:	2800      	cmp	r0, #0
 800a692:	d0cb      	beq.n	800a62c <__swbuf_r+0x28>
 800a694:	f04f 37ff 	mov.w	r7, #4294967295
 800a698:	e7ea      	b.n	800a670 <__swbuf_r+0x6c>
 800a69a:	bf00      	nop
 800a69c:	08015a24 	.word	0x08015a24
 800a6a0:	08015a44 	.word	0x08015a44
 800a6a4:	08015a04 	.word	0x08015a04

0800a6a8 <__ascii_wctomb>:
 800a6a8:	b149      	cbz	r1, 800a6be <__ascii_wctomb+0x16>
 800a6aa:	2aff      	cmp	r2, #255	; 0xff
 800a6ac:	bf85      	ittet	hi
 800a6ae:	238a      	movhi	r3, #138	; 0x8a
 800a6b0:	6003      	strhi	r3, [r0, #0]
 800a6b2:	700a      	strbls	r2, [r1, #0]
 800a6b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6b8:	bf98      	it	ls
 800a6ba:	2001      	movls	r0, #1
 800a6bc:	4770      	bx	lr
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <__swsetup_r>:
 800a6c4:	4b32      	ldr	r3, [pc, #200]	; (800a790 <__swsetup_r+0xcc>)
 800a6c6:	b570      	push	{r4, r5, r6, lr}
 800a6c8:	681d      	ldr	r5, [r3, #0]
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	b125      	cbz	r5, 800a6da <__swsetup_r+0x16>
 800a6d0:	69ab      	ldr	r3, [r5, #24]
 800a6d2:	b913      	cbnz	r3, 800a6da <__swsetup_r+0x16>
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	f000 f985 	bl	800a9e4 <__sinit>
 800a6da:	4b2e      	ldr	r3, [pc, #184]	; (800a794 <__swsetup_r+0xd0>)
 800a6dc:	429c      	cmp	r4, r3
 800a6de:	d10f      	bne.n	800a700 <__swsetup_r+0x3c>
 800a6e0:	686c      	ldr	r4, [r5, #4]
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6e8:	0719      	lsls	r1, r3, #28
 800a6ea:	d42c      	bmi.n	800a746 <__swsetup_r+0x82>
 800a6ec:	06dd      	lsls	r5, r3, #27
 800a6ee:	d411      	bmi.n	800a714 <__swsetup_r+0x50>
 800a6f0:	2309      	movs	r3, #9
 800a6f2:	6033      	str	r3, [r6, #0]
 800a6f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fe:	e03e      	b.n	800a77e <__swsetup_r+0xba>
 800a700:	4b25      	ldr	r3, [pc, #148]	; (800a798 <__swsetup_r+0xd4>)
 800a702:	429c      	cmp	r4, r3
 800a704:	d101      	bne.n	800a70a <__swsetup_r+0x46>
 800a706:	68ac      	ldr	r4, [r5, #8]
 800a708:	e7eb      	b.n	800a6e2 <__swsetup_r+0x1e>
 800a70a:	4b24      	ldr	r3, [pc, #144]	; (800a79c <__swsetup_r+0xd8>)
 800a70c:	429c      	cmp	r4, r3
 800a70e:	bf08      	it	eq
 800a710:	68ec      	ldreq	r4, [r5, #12]
 800a712:	e7e6      	b.n	800a6e2 <__swsetup_r+0x1e>
 800a714:	0758      	lsls	r0, r3, #29
 800a716:	d512      	bpl.n	800a73e <__swsetup_r+0x7a>
 800a718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a71a:	b141      	cbz	r1, 800a72e <__swsetup_r+0x6a>
 800a71c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a720:	4299      	cmp	r1, r3
 800a722:	d002      	beq.n	800a72a <__swsetup_r+0x66>
 800a724:	4630      	mov	r0, r6
 800a726:	f7ff fb31 	bl	8009d8c <_free_r>
 800a72a:	2300      	movs	r3, #0
 800a72c:	6363      	str	r3, [r4, #52]	; 0x34
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a734:	81a3      	strh	r3, [r4, #12]
 800a736:	2300      	movs	r3, #0
 800a738:	6063      	str	r3, [r4, #4]
 800a73a:	6923      	ldr	r3, [r4, #16]
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	f043 0308 	orr.w	r3, r3, #8
 800a744:	81a3      	strh	r3, [r4, #12]
 800a746:	6923      	ldr	r3, [r4, #16]
 800a748:	b94b      	cbnz	r3, 800a75e <__swsetup_r+0x9a>
 800a74a:	89a3      	ldrh	r3, [r4, #12]
 800a74c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a754:	d003      	beq.n	800a75e <__swsetup_r+0x9a>
 800a756:	4621      	mov	r1, r4
 800a758:	4630      	mov	r0, r6
 800a75a:	f000 fa09 	bl	800ab70 <__smakebuf_r>
 800a75e:	89a0      	ldrh	r0, [r4, #12]
 800a760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a764:	f010 0301 	ands.w	r3, r0, #1
 800a768:	d00a      	beq.n	800a780 <__swsetup_r+0xbc>
 800a76a:	2300      	movs	r3, #0
 800a76c:	60a3      	str	r3, [r4, #8]
 800a76e:	6963      	ldr	r3, [r4, #20]
 800a770:	425b      	negs	r3, r3
 800a772:	61a3      	str	r3, [r4, #24]
 800a774:	6923      	ldr	r3, [r4, #16]
 800a776:	b943      	cbnz	r3, 800a78a <__swsetup_r+0xc6>
 800a778:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a77c:	d1ba      	bne.n	800a6f4 <__swsetup_r+0x30>
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
 800a780:	0781      	lsls	r1, r0, #30
 800a782:	bf58      	it	pl
 800a784:	6963      	ldrpl	r3, [r4, #20]
 800a786:	60a3      	str	r3, [r4, #8]
 800a788:	e7f4      	b.n	800a774 <__swsetup_r+0xb0>
 800a78a:	2000      	movs	r0, #0
 800a78c:	e7f7      	b.n	800a77e <__swsetup_r+0xba>
 800a78e:	bf00      	nop
 800a790:	2000005c 	.word	0x2000005c
 800a794:	08015a24 	.word	0x08015a24
 800a798:	08015a44 	.word	0x08015a44
 800a79c:	08015a04 	.word	0x08015a04

0800a7a0 <abort>:
 800a7a0:	b508      	push	{r3, lr}
 800a7a2:	2006      	movs	r0, #6
 800a7a4:	f000 fa54 	bl	800ac50 <raise>
 800a7a8:	2001      	movs	r0, #1
 800a7aa:	f7fa f82f 	bl	800480c <_exit>
	...

0800a7b0 <__sflush_r>:
 800a7b0:	898a      	ldrh	r2, [r1, #12]
 800a7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	0710      	lsls	r0, r2, #28
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	d458      	bmi.n	800a870 <__sflush_r+0xc0>
 800a7be:	684b      	ldr	r3, [r1, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	dc05      	bgt.n	800a7d0 <__sflush_r+0x20>
 800a7c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	dc02      	bgt.n	800a7d0 <__sflush_r+0x20>
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7d2:	2e00      	cmp	r6, #0
 800a7d4:	d0f9      	beq.n	800a7ca <__sflush_r+0x1a>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7dc:	682f      	ldr	r7, [r5, #0]
 800a7de:	602b      	str	r3, [r5, #0]
 800a7e0:	d032      	beq.n	800a848 <__sflush_r+0x98>
 800a7e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	075a      	lsls	r2, r3, #29
 800a7e8:	d505      	bpl.n	800a7f6 <__sflush_r+0x46>
 800a7ea:	6863      	ldr	r3, [r4, #4]
 800a7ec:	1ac0      	subs	r0, r0, r3
 800a7ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7f0:	b10b      	cbz	r3, 800a7f6 <__sflush_r+0x46>
 800a7f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7f4:	1ac0      	subs	r0, r0, r3
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7fc:	6a21      	ldr	r1, [r4, #32]
 800a7fe:	4628      	mov	r0, r5
 800a800:	47b0      	blx	r6
 800a802:	1c43      	adds	r3, r0, #1
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	d106      	bne.n	800a816 <__sflush_r+0x66>
 800a808:	6829      	ldr	r1, [r5, #0]
 800a80a:	291d      	cmp	r1, #29
 800a80c:	d82c      	bhi.n	800a868 <__sflush_r+0xb8>
 800a80e:	4a2a      	ldr	r2, [pc, #168]	; (800a8b8 <__sflush_r+0x108>)
 800a810:	40ca      	lsrs	r2, r1
 800a812:	07d6      	lsls	r6, r2, #31
 800a814:	d528      	bpl.n	800a868 <__sflush_r+0xb8>
 800a816:	2200      	movs	r2, #0
 800a818:	6062      	str	r2, [r4, #4]
 800a81a:	04d9      	lsls	r1, r3, #19
 800a81c:	6922      	ldr	r2, [r4, #16]
 800a81e:	6022      	str	r2, [r4, #0]
 800a820:	d504      	bpl.n	800a82c <__sflush_r+0x7c>
 800a822:	1c42      	adds	r2, r0, #1
 800a824:	d101      	bne.n	800a82a <__sflush_r+0x7a>
 800a826:	682b      	ldr	r3, [r5, #0]
 800a828:	b903      	cbnz	r3, 800a82c <__sflush_r+0x7c>
 800a82a:	6560      	str	r0, [r4, #84]	; 0x54
 800a82c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a82e:	602f      	str	r7, [r5, #0]
 800a830:	2900      	cmp	r1, #0
 800a832:	d0ca      	beq.n	800a7ca <__sflush_r+0x1a>
 800a834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a838:	4299      	cmp	r1, r3
 800a83a:	d002      	beq.n	800a842 <__sflush_r+0x92>
 800a83c:	4628      	mov	r0, r5
 800a83e:	f7ff faa5 	bl	8009d8c <_free_r>
 800a842:	2000      	movs	r0, #0
 800a844:	6360      	str	r0, [r4, #52]	; 0x34
 800a846:	e7c1      	b.n	800a7cc <__sflush_r+0x1c>
 800a848:	6a21      	ldr	r1, [r4, #32]
 800a84a:	2301      	movs	r3, #1
 800a84c:	4628      	mov	r0, r5
 800a84e:	47b0      	blx	r6
 800a850:	1c41      	adds	r1, r0, #1
 800a852:	d1c7      	bne.n	800a7e4 <__sflush_r+0x34>
 800a854:	682b      	ldr	r3, [r5, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0c4      	beq.n	800a7e4 <__sflush_r+0x34>
 800a85a:	2b1d      	cmp	r3, #29
 800a85c:	d001      	beq.n	800a862 <__sflush_r+0xb2>
 800a85e:	2b16      	cmp	r3, #22
 800a860:	d101      	bne.n	800a866 <__sflush_r+0xb6>
 800a862:	602f      	str	r7, [r5, #0]
 800a864:	e7b1      	b.n	800a7ca <__sflush_r+0x1a>
 800a866:	89a3      	ldrh	r3, [r4, #12]
 800a868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86c:	81a3      	strh	r3, [r4, #12]
 800a86e:	e7ad      	b.n	800a7cc <__sflush_r+0x1c>
 800a870:	690f      	ldr	r7, [r1, #16]
 800a872:	2f00      	cmp	r7, #0
 800a874:	d0a9      	beq.n	800a7ca <__sflush_r+0x1a>
 800a876:	0793      	lsls	r3, r2, #30
 800a878:	680e      	ldr	r6, [r1, #0]
 800a87a:	bf08      	it	eq
 800a87c:	694b      	ldreq	r3, [r1, #20]
 800a87e:	600f      	str	r7, [r1, #0]
 800a880:	bf18      	it	ne
 800a882:	2300      	movne	r3, #0
 800a884:	eba6 0807 	sub.w	r8, r6, r7
 800a888:	608b      	str	r3, [r1, #8]
 800a88a:	f1b8 0f00 	cmp.w	r8, #0
 800a88e:	dd9c      	ble.n	800a7ca <__sflush_r+0x1a>
 800a890:	6a21      	ldr	r1, [r4, #32]
 800a892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a894:	4643      	mov	r3, r8
 800a896:	463a      	mov	r2, r7
 800a898:	4628      	mov	r0, r5
 800a89a:	47b0      	blx	r6
 800a89c:	2800      	cmp	r0, #0
 800a89e:	dc06      	bgt.n	800a8ae <__sflush_r+0xfe>
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a6:	81a3      	strh	r3, [r4, #12]
 800a8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ac:	e78e      	b.n	800a7cc <__sflush_r+0x1c>
 800a8ae:	4407      	add	r7, r0
 800a8b0:	eba8 0800 	sub.w	r8, r8, r0
 800a8b4:	e7e9      	b.n	800a88a <__sflush_r+0xda>
 800a8b6:	bf00      	nop
 800a8b8:	20400001 	.word	0x20400001

0800a8bc <_fflush_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	690b      	ldr	r3, [r1, #16]
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	b913      	cbnz	r3, 800a8cc <_fflush_r+0x10>
 800a8c6:	2500      	movs	r5, #0
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	bd38      	pop	{r3, r4, r5, pc}
 800a8cc:	b118      	cbz	r0, 800a8d6 <_fflush_r+0x1a>
 800a8ce:	6983      	ldr	r3, [r0, #24]
 800a8d0:	b90b      	cbnz	r3, 800a8d6 <_fflush_r+0x1a>
 800a8d2:	f000 f887 	bl	800a9e4 <__sinit>
 800a8d6:	4b14      	ldr	r3, [pc, #80]	; (800a928 <_fflush_r+0x6c>)
 800a8d8:	429c      	cmp	r4, r3
 800a8da:	d11b      	bne.n	800a914 <_fflush_r+0x58>
 800a8dc:	686c      	ldr	r4, [r5, #4]
 800a8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0ef      	beq.n	800a8c6 <_fflush_r+0xa>
 800a8e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8e8:	07d0      	lsls	r0, r2, #31
 800a8ea:	d404      	bmi.n	800a8f6 <_fflush_r+0x3a>
 800a8ec:	0599      	lsls	r1, r3, #22
 800a8ee:	d402      	bmi.n	800a8f6 <_fflush_r+0x3a>
 800a8f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8f2:	f000 f915 	bl	800ab20 <__retarget_lock_acquire_recursive>
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	f7ff ff59 	bl	800a7b0 <__sflush_r>
 800a8fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a900:	07da      	lsls	r2, r3, #31
 800a902:	4605      	mov	r5, r0
 800a904:	d4e0      	bmi.n	800a8c8 <_fflush_r+0xc>
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	059b      	lsls	r3, r3, #22
 800a90a:	d4dd      	bmi.n	800a8c8 <_fflush_r+0xc>
 800a90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a90e:	f000 f908 	bl	800ab22 <__retarget_lock_release_recursive>
 800a912:	e7d9      	b.n	800a8c8 <_fflush_r+0xc>
 800a914:	4b05      	ldr	r3, [pc, #20]	; (800a92c <_fflush_r+0x70>)
 800a916:	429c      	cmp	r4, r3
 800a918:	d101      	bne.n	800a91e <_fflush_r+0x62>
 800a91a:	68ac      	ldr	r4, [r5, #8]
 800a91c:	e7df      	b.n	800a8de <_fflush_r+0x22>
 800a91e:	4b04      	ldr	r3, [pc, #16]	; (800a930 <_fflush_r+0x74>)
 800a920:	429c      	cmp	r4, r3
 800a922:	bf08      	it	eq
 800a924:	68ec      	ldreq	r4, [r5, #12]
 800a926:	e7da      	b.n	800a8de <_fflush_r+0x22>
 800a928:	08015a24 	.word	0x08015a24
 800a92c:	08015a44 	.word	0x08015a44
 800a930:	08015a04 	.word	0x08015a04

0800a934 <std>:
 800a934:	2300      	movs	r3, #0
 800a936:	b510      	push	{r4, lr}
 800a938:	4604      	mov	r4, r0
 800a93a:	e9c0 3300 	strd	r3, r3, [r0]
 800a93e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a942:	6083      	str	r3, [r0, #8]
 800a944:	8181      	strh	r1, [r0, #12]
 800a946:	6643      	str	r3, [r0, #100]	; 0x64
 800a948:	81c2      	strh	r2, [r0, #14]
 800a94a:	6183      	str	r3, [r0, #24]
 800a94c:	4619      	mov	r1, r3
 800a94e:	2208      	movs	r2, #8
 800a950:	305c      	adds	r0, #92	; 0x5c
 800a952:	f7fd fb59 	bl	8008008 <memset>
 800a956:	4b05      	ldr	r3, [pc, #20]	; (800a96c <std+0x38>)
 800a958:	6263      	str	r3, [r4, #36]	; 0x24
 800a95a:	4b05      	ldr	r3, [pc, #20]	; (800a970 <std+0x3c>)
 800a95c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a95e:	4b05      	ldr	r3, [pc, #20]	; (800a974 <std+0x40>)
 800a960:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a962:	4b05      	ldr	r3, [pc, #20]	; (800a978 <std+0x44>)
 800a964:	6224      	str	r4, [r4, #32]
 800a966:	6323      	str	r3, [r4, #48]	; 0x30
 800a968:	bd10      	pop	{r4, pc}
 800a96a:	bf00      	nop
 800a96c:	0800ac89 	.word	0x0800ac89
 800a970:	0800acab 	.word	0x0800acab
 800a974:	0800ace3 	.word	0x0800ace3
 800a978:	0800ad07 	.word	0x0800ad07

0800a97c <_cleanup_r>:
 800a97c:	4901      	ldr	r1, [pc, #4]	; (800a984 <_cleanup_r+0x8>)
 800a97e:	f000 b8af 	b.w	800aae0 <_fwalk_reent>
 800a982:	bf00      	nop
 800a984:	0800a8bd 	.word	0x0800a8bd

0800a988 <__sfmoreglue>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	2268      	movs	r2, #104	; 0x68
 800a98c:	1e4d      	subs	r5, r1, #1
 800a98e:	4355      	muls	r5, r2
 800a990:	460e      	mov	r6, r1
 800a992:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a996:	f7ff fa65 	bl	8009e64 <_malloc_r>
 800a99a:	4604      	mov	r4, r0
 800a99c:	b140      	cbz	r0, 800a9b0 <__sfmoreglue+0x28>
 800a99e:	2100      	movs	r1, #0
 800a9a0:	e9c0 1600 	strd	r1, r6, [r0]
 800a9a4:	300c      	adds	r0, #12
 800a9a6:	60a0      	str	r0, [r4, #8]
 800a9a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9ac:	f7fd fb2c 	bl	8008008 <memset>
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	bd70      	pop	{r4, r5, r6, pc}

0800a9b4 <__sfp_lock_acquire>:
 800a9b4:	4801      	ldr	r0, [pc, #4]	; (800a9bc <__sfp_lock_acquire+0x8>)
 800a9b6:	f000 b8b3 	b.w	800ab20 <__retarget_lock_acquire_recursive>
 800a9ba:	bf00      	nop
 800a9bc:	2000050d 	.word	0x2000050d

0800a9c0 <__sfp_lock_release>:
 800a9c0:	4801      	ldr	r0, [pc, #4]	; (800a9c8 <__sfp_lock_release+0x8>)
 800a9c2:	f000 b8ae 	b.w	800ab22 <__retarget_lock_release_recursive>
 800a9c6:	bf00      	nop
 800a9c8:	2000050d 	.word	0x2000050d

0800a9cc <__sinit_lock_acquire>:
 800a9cc:	4801      	ldr	r0, [pc, #4]	; (800a9d4 <__sinit_lock_acquire+0x8>)
 800a9ce:	f000 b8a7 	b.w	800ab20 <__retarget_lock_acquire_recursive>
 800a9d2:	bf00      	nop
 800a9d4:	2000050e 	.word	0x2000050e

0800a9d8 <__sinit_lock_release>:
 800a9d8:	4801      	ldr	r0, [pc, #4]	; (800a9e0 <__sinit_lock_release+0x8>)
 800a9da:	f000 b8a2 	b.w	800ab22 <__retarget_lock_release_recursive>
 800a9de:	bf00      	nop
 800a9e0:	2000050e 	.word	0x2000050e

0800a9e4 <__sinit>:
 800a9e4:	b510      	push	{r4, lr}
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	f7ff fff0 	bl	800a9cc <__sinit_lock_acquire>
 800a9ec:	69a3      	ldr	r3, [r4, #24]
 800a9ee:	b11b      	cbz	r3, 800a9f8 <__sinit+0x14>
 800a9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f4:	f7ff bff0 	b.w	800a9d8 <__sinit_lock_release>
 800a9f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9fc:	6523      	str	r3, [r4, #80]	; 0x50
 800a9fe:	4b13      	ldr	r3, [pc, #76]	; (800aa4c <__sinit+0x68>)
 800aa00:	4a13      	ldr	r2, [pc, #76]	; (800aa50 <__sinit+0x6c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa06:	42a3      	cmp	r3, r4
 800aa08:	bf04      	itt	eq
 800aa0a:	2301      	moveq	r3, #1
 800aa0c:	61a3      	streq	r3, [r4, #24]
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f000 f820 	bl	800aa54 <__sfp>
 800aa14:	6060      	str	r0, [r4, #4]
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 f81c 	bl	800aa54 <__sfp>
 800aa1c:	60a0      	str	r0, [r4, #8]
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f000 f818 	bl	800aa54 <__sfp>
 800aa24:	2200      	movs	r2, #0
 800aa26:	60e0      	str	r0, [r4, #12]
 800aa28:	2104      	movs	r1, #4
 800aa2a:	6860      	ldr	r0, [r4, #4]
 800aa2c:	f7ff ff82 	bl	800a934 <std>
 800aa30:	68a0      	ldr	r0, [r4, #8]
 800aa32:	2201      	movs	r2, #1
 800aa34:	2109      	movs	r1, #9
 800aa36:	f7ff ff7d 	bl	800a934 <std>
 800aa3a:	68e0      	ldr	r0, [r4, #12]
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	2112      	movs	r1, #18
 800aa40:	f7ff ff78 	bl	800a934 <std>
 800aa44:	2301      	movs	r3, #1
 800aa46:	61a3      	str	r3, [r4, #24]
 800aa48:	e7d2      	b.n	800a9f0 <__sinit+0xc>
 800aa4a:	bf00      	nop
 800aa4c:	0801568c 	.word	0x0801568c
 800aa50:	0800a97d 	.word	0x0800a97d

0800aa54 <__sfp>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	4607      	mov	r7, r0
 800aa58:	f7ff ffac 	bl	800a9b4 <__sfp_lock_acquire>
 800aa5c:	4b1e      	ldr	r3, [pc, #120]	; (800aad8 <__sfp+0x84>)
 800aa5e:	681e      	ldr	r6, [r3, #0]
 800aa60:	69b3      	ldr	r3, [r6, #24]
 800aa62:	b913      	cbnz	r3, 800aa6a <__sfp+0x16>
 800aa64:	4630      	mov	r0, r6
 800aa66:	f7ff ffbd 	bl	800a9e4 <__sinit>
 800aa6a:	3648      	adds	r6, #72	; 0x48
 800aa6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	d503      	bpl.n	800aa7c <__sfp+0x28>
 800aa74:	6833      	ldr	r3, [r6, #0]
 800aa76:	b30b      	cbz	r3, 800aabc <__sfp+0x68>
 800aa78:	6836      	ldr	r6, [r6, #0]
 800aa7a:	e7f7      	b.n	800aa6c <__sfp+0x18>
 800aa7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa80:	b9d5      	cbnz	r5, 800aab8 <__sfp+0x64>
 800aa82:	4b16      	ldr	r3, [pc, #88]	; (800aadc <__sfp+0x88>)
 800aa84:	60e3      	str	r3, [r4, #12]
 800aa86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa8a:	6665      	str	r5, [r4, #100]	; 0x64
 800aa8c:	f000 f847 	bl	800ab1e <__retarget_lock_init_recursive>
 800aa90:	f7ff ff96 	bl	800a9c0 <__sfp_lock_release>
 800aa94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa9c:	6025      	str	r5, [r4, #0]
 800aa9e:	61a5      	str	r5, [r4, #24]
 800aaa0:	2208      	movs	r2, #8
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aaa8:	f7fd faae 	bl	8008008 <memset>
 800aaac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aab0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aab4:	4620      	mov	r0, r4
 800aab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aab8:	3468      	adds	r4, #104	; 0x68
 800aaba:	e7d9      	b.n	800aa70 <__sfp+0x1c>
 800aabc:	2104      	movs	r1, #4
 800aabe:	4638      	mov	r0, r7
 800aac0:	f7ff ff62 	bl	800a988 <__sfmoreglue>
 800aac4:	4604      	mov	r4, r0
 800aac6:	6030      	str	r0, [r6, #0]
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d1d5      	bne.n	800aa78 <__sfp+0x24>
 800aacc:	f7ff ff78 	bl	800a9c0 <__sfp_lock_release>
 800aad0:	230c      	movs	r3, #12
 800aad2:	603b      	str	r3, [r7, #0]
 800aad4:	e7ee      	b.n	800aab4 <__sfp+0x60>
 800aad6:	bf00      	nop
 800aad8:	0801568c 	.word	0x0801568c
 800aadc:	ffff0001 	.word	0xffff0001

0800aae0 <_fwalk_reent>:
 800aae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aae4:	4606      	mov	r6, r0
 800aae6:	4688      	mov	r8, r1
 800aae8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aaec:	2700      	movs	r7, #0
 800aaee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaf2:	f1b9 0901 	subs.w	r9, r9, #1
 800aaf6:	d505      	bpl.n	800ab04 <_fwalk_reent+0x24>
 800aaf8:	6824      	ldr	r4, [r4, #0]
 800aafa:	2c00      	cmp	r4, #0
 800aafc:	d1f7      	bne.n	800aaee <_fwalk_reent+0xe>
 800aafe:	4638      	mov	r0, r7
 800ab00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab04:	89ab      	ldrh	r3, [r5, #12]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d907      	bls.n	800ab1a <_fwalk_reent+0x3a>
 800ab0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	d003      	beq.n	800ab1a <_fwalk_reent+0x3a>
 800ab12:	4629      	mov	r1, r5
 800ab14:	4630      	mov	r0, r6
 800ab16:	47c0      	blx	r8
 800ab18:	4307      	orrs	r7, r0
 800ab1a:	3568      	adds	r5, #104	; 0x68
 800ab1c:	e7e9      	b.n	800aaf2 <_fwalk_reent+0x12>

0800ab1e <__retarget_lock_init_recursive>:
 800ab1e:	4770      	bx	lr

0800ab20 <__retarget_lock_acquire_recursive>:
 800ab20:	4770      	bx	lr

0800ab22 <__retarget_lock_release_recursive>:
 800ab22:	4770      	bx	lr

0800ab24 <__swhatbuf_r>:
 800ab24:	b570      	push	{r4, r5, r6, lr}
 800ab26:	460e      	mov	r6, r1
 800ab28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	b096      	sub	sp, #88	; 0x58
 800ab30:	4614      	mov	r4, r2
 800ab32:	461d      	mov	r5, r3
 800ab34:	da08      	bge.n	800ab48 <__swhatbuf_r+0x24>
 800ab36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	602a      	str	r2, [r5, #0]
 800ab3e:	061a      	lsls	r2, r3, #24
 800ab40:	d410      	bmi.n	800ab64 <__swhatbuf_r+0x40>
 800ab42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab46:	e00e      	b.n	800ab66 <__swhatbuf_r+0x42>
 800ab48:	466a      	mov	r2, sp
 800ab4a:	f000 f903 	bl	800ad54 <_fstat_r>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	dbf1      	blt.n	800ab36 <__swhatbuf_r+0x12>
 800ab52:	9a01      	ldr	r2, [sp, #4]
 800ab54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab5c:	425a      	negs	r2, r3
 800ab5e:	415a      	adcs	r2, r3
 800ab60:	602a      	str	r2, [r5, #0]
 800ab62:	e7ee      	b.n	800ab42 <__swhatbuf_r+0x1e>
 800ab64:	2340      	movs	r3, #64	; 0x40
 800ab66:	2000      	movs	r0, #0
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	b016      	add	sp, #88	; 0x58
 800ab6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab70 <__smakebuf_r>:
 800ab70:	898b      	ldrh	r3, [r1, #12]
 800ab72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab74:	079d      	lsls	r5, r3, #30
 800ab76:	4606      	mov	r6, r0
 800ab78:	460c      	mov	r4, r1
 800ab7a:	d507      	bpl.n	800ab8c <__smakebuf_r+0x1c>
 800ab7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	6123      	str	r3, [r4, #16]
 800ab84:	2301      	movs	r3, #1
 800ab86:	6163      	str	r3, [r4, #20]
 800ab88:	b002      	add	sp, #8
 800ab8a:	bd70      	pop	{r4, r5, r6, pc}
 800ab8c:	ab01      	add	r3, sp, #4
 800ab8e:	466a      	mov	r2, sp
 800ab90:	f7ff ffc8 	bl	800ab24 <__swhatbuf_r>
 800ab94:	9900      	ldr	r1, [sp, #0]
 800ab96:	4605      	mov	r5, r0
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f7ff f963 	bl	8009e64 <_malloc_r>
 800ab9e:	b948      	cbnz	r0, 800abb4 <__smakebuf_r+0x44>
 800aba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aba4:	059a      	lsls	r2, r3, #22
 800aba6:	d4ef      	bmi.n	800ab88 <__smakebuf_r+0x18>
 800aba8:	f023 0303 	bic.w	r3, r3, #3
 800abac:	f043 0302 	orr.w	r3, r3, #2
 800abb0:	81a3      	strh	r3, [r4, #12]
 800abb2:	e7e3      	b.n	800ab7c <__smakebuf_r+0xc>
 800abb4:	4b0d      	ldr	r3, [pc, #52]	; (800abec <__smakebuf_r+0x7c>)
 800abb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	6020      	str	r0, [r4, #0]
 800abbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	9b00      	ldr	r3, [sp, #0]
 800abc4:	6163      	str	r3, [r4, #20]
 800abc6:	9b01      	ldr	r3, [sp, #4]
 800abc8:	6120      	str	r0, [r4, #16]
 800abca:	b15b      	cbz	r3, 800abe4 <__smakebuf_r+0x74>
 800abcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abd0:	4630      	mov	r0, r6
 800abd2:	f000 f8d1 	bl	800ad78 <_isatty_r>
 800abd6:	b128      	cbz	r0, 800abe4 <__smakebuf_r+0x74>
 800abd8:	89a3      	ldrh	r3, [r4, #12]
 800abda:	f023 0303 	bic.w	r3, r3, #3
 800abde:	f043 0301 	orr.w	r3, r3, #1
 800abe2:	81a3      	strh	r3, [r4, #12]
 800abe4:	89a0      	ldrh	r0, [r4, #12]
 800abe6:	4305      	orrs	r5, r0
 800abe8:	81a5      	strh	r5, [r4, #12]
 800abea:	e7cd      	b.n	800ab88 <__smakebuf_r+0x18>
 800abec:	0800a97d 	.word	0x0800a97d

0800abf0 <_malloc_usable_size_r>:
 800abf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abf4:	1f18      	subs	r0, r3, #4
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	bfbc      	itt	lt
 800abfa:	580b      	ldrlt	r3, [r1, r0]
 800abfc:	18c0      	addlt	r0, r0, r3
 800abfe:	4770      	bx	lr

0800ac00 <_raise_r>:
 800ac00:	291f      	cmp	r1, #31
 800ac02:	b538      	push	{r3, r4, r5, lr}
 800ac04:	4604      	mov	r4, r0
 800ac06:	460d      	mov	r5, r1
 800ac08:	d904      	bls.n	800ac14 <_raise_r+0x14>
 800ac0a:	2316      	movs	r3, #22
 800ac0c:	6003      	str	r3, [r0, #0]
 800ac0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac16:	b112      	cbz	r2, 800ac1e <_raise_r+0x1e>
 800ac18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac1c:	b94b      	cbnz	r3, 800ac32 <_raise_r+0x32>
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 f830 	bl	800ac84 <_getpid_r>
 800ac24:	462a      	mov	r2, r5
 800ac26:	4601      	mov	r1, r0
 800ac28:	4620      	mov	r0, r4
 800ac2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac2e:	f000 b817 	b.w	800ac60 <_kill_r>
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d00a      	beq.n	800ac4c <_raise_r+0x4c>
 800ac36:	1c59      	adds	r1, r3, #1
 800ac38:	d103      	bne.n	800ac42 <_raise_r+0x42>
 800ac3a:	2316      	movs	r3, #22
 800ac3c:	6003      	str	r3, [r0, #0]
 800ac3e:	2001      	movs	r0, #1
 800ac40:	e7e7      	b.n	800ac12 <_raise_r+0x12>
 800ac42:	2400      	movs	r4, #0
 800ac44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac48:	4628      	mov	r0, r5
 800ac4a:	4798      	blx	r3
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	e7e0      	b.n	800ac12 <_raise_r+0x12>

0800ac50 <raise>:
 800ac50:	4b02      	ldr	r3, [pc, #8]	; (800ac5c <raise+0xc>)
 800ac52:	4601      	mov	r1, r0
 800ac54:	6818      	ldr	r0, [r3, #0]
 800ac56:	f7ff bfd3 	b.w	800ac00 <_raise_r>
 800ac5a:	bf00      	nop
 800ac5c:	2000005c 	.word	0x2000005c

0800ac60 <_kill_r>:
 800ac60:	b538      	push	{r3, r4, r5, lr}
 800ac62:	4d07      	ldr	r5, [pc, #28]	; (800ac80 <_kill_r+0x20>)
 800ac64:	2300      	movs	r3, #0
 800ac66:	4604      	mov	r4, r0
 800ac68:	4608      	mov	r0, r1
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	602b      	str	r3, [r5, #0]
 800ac6e:	f7f9 fdbd 	bl	80047ec <_kill>
 800ac72:	1c43      	adds	r3, r0, #1
 800ac74:	d102      	bne.n	800ac7c <_kill_r+0x1c>
 800ac76:	682b      	ldr	r3, [r5, #0]
 800ac78:	b103      	cbz	r3, 800ac7c <_kill_r+0x1c>
 800ac7a:	6023      	str	r3, [r4, #0]
 800ac7c:	bd38      	pop	{r3, r4, r5, pc}
 800ac7e:	bf00      	nop
 800ac80:	20000508 	.word	0x20000508

0800ac84 <_getpid_r>:
 800ac84:	f7f9 bdaa 	b.w	80047dc <_getpid>

0800ac88 <__sread>:
 800ac88:	b510      	push	{r4, lr}
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac90:	f000 f894 	bl	800adbc <_read_r>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	bfab      	itete	ge
 800ac98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac9c:	181b      	addge	r3, r3, r0
 800ac9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aca2:	bfac      	ite	ge
 800aca4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aca6:	81a3      	strhlt	r3, [r4, #12]
 800aca8:	bd10      	pop	{r4, pc}

0800acaa <__swrite>:
 800acaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acae:	461f      	mov	r7, r3
 800acb0:	898b      	ldrh	r3, [r1, #12]
 800acb2:	05db      	lsls	r3, r3, #23
 800acb4:	4605      	mov	r5, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	4616      	mov	r6, r2
 800acba:	d505      	bpl.n	800acc8 <__swrite+0x1e>
 800acbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc0:	2302      	movs	r3, #2
 800acc2:	2200      	movs	r2, #0
 800acc4:	f000 f868 	bl	800ad98 <_lseek_r>
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acd2:	81a3      	strh	r3, [r4, #12]
 800acd4:	4632      	mov	r2, r6
 800acd6:	463b      	mov	r3, r7
 800acd8:	4628      	mov	r0, r5
 800acda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acde:	f000 b817 	b.w	800ad10 <_write_r>

0800ace2 <__sseek>:
 800ace2:	b510      	push	{r4, lr}
 800ace4:	460c      	mov	r4, r1
 800ace6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acea:	f000 f855 	bl	800ad98 <_lseek_r>
 800acee:	1c43      	adds	r3, r0, #1
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	bf15      	itete	ne
 800acf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800acf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acfe:	81a3      	strheq	r3, [r4, #12]
 800ad00:	bf18      	it	ne
 800ad02:	81a3      	strhne	r3, [r4, #12]
 800ad04:	bd10      	pop	{r4, pc}

0800ad06 <__sclose>:
 800ad06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad0a:	f000 b813 	b.w	800ad34 <_close_r>
	...

0800ad10 <_write_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	4d07      	ldr	r5, [pc, #28]	; (800ad30 <_write_r+0x20>)
 800ad14:	4604      	mov	r4, r0
 800ad16:	4608      	mov	r0, r1
 800ad18:	4611      	mov	r1, r2
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	602a      	str	r2, [r5, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	f7f9 fd9b 	bl	800485a <_write>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_write_r+0x1e>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_write_r+0x1e>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	20000508 	.word	0x20000508

0800ad34 <_close_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	4d06      	ldr	r5, [pc, #24]	; (800ad50 <_close_r+0x1c>)
 800ad38:	2300      	movs	r3, #0
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	4608      	mov	r0, r1
 800ad3e:	602b      	str	r3, [r5, #0]
 800ad40:	f7f9 fda7 	bl	8004892 <_close>
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	d102      	bne.n	800ad4e <_close_r+0x1a>
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	b103      	cbz	r3, 800ad4e <_close_r+0x1a>
 800ad4c:	6023      	str	r3, [r4, #0]
 800ad4e:	bd38      	pop	{r3, r4, r5, pc}
 800ad50:	20000508 	.word	0x20000508

0800ad54 <_fstat_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	4d07      	ldr	r5, [pc, #28]	; (800ad74 <_fstat_r+0x20>)
 800ad58:	2300      	movs	r3, #0
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4608      	mov	r0, r1
 800ad5e:	4611      	mov	r1, r2
 800ad60:	602b      	str	r3, [r5, #0]
 800ad62:	f7f9 fda2 	bl	80048aa <_fstat>
 800ad66:	1c43      	adds	r3, r0, #1
 800ad68:	d102      	bne.n	800ad70 <_fstat_r+0x1c>
 800ad6a:	682b      	ldr	r3, [r5, #0]
 800ad6c:	b103      	cbz	r3, 800ad70 <_fstat_r+0x1c>
 800ad6e:	6023      	str	r3, [r4, #0]
 800ad70:	bd38      	pop	{r3, r4, r5, pc}
 800ad72:	bf00      	nop
 800ad74:	20000508 	.word	0x20000508

0800ad78 <_isatty_r>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	4d06      	ldr	r5, [pc, #24]	; (800ad94 <_isatty_r+0x1c>)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4604      	mov	r4, r0
 800ad80:	4608      	mov	r0, r1
 800ad82:	602b      	str	r3, [r5, #0]
 800ad84:	f7f9 fda1 	bl	80048ca <_isatty>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	d102      	bne.n	800ad92 <_isatty_r+0x1a>
 800ad8c:	682b      	ldr	r3, [r5, #0]
 800ad8e:	b103      	cbz	r3, 800ad92 <_isatty_r+0x1a>
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	bd38      	pop	{r3, r4, r5, pc}
 800ad94:	20000508 	.word	0x20000508

0800ad98 <_lseek_r>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	4d07      	ldr	r5, [pc, #28]	; (800adb8 <_lseek_r+0x20>)
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	4608      	mov	r0, r1
 800ada0:	4611      	mov	r1, r2
 800ada2:	2200      	movs	r2, #0
 800ada4:	602a      	str	r2, [r5, #0]
 800ada6:	461a      	mov	r2, r3
 800ada8:	f7f9 fd9a 	bl	80048e0 <_lseek>
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	d102      	bne.n	800adb6 <_lseek_r+0x1e>
 800adb0:	682b      	ldr	r3, [r5, #0]
 800adb2:	b103      	cbz	r3, 800adb6 <_lseek_r+0x1e>
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	bd38      	pop	{r3, r4, r5, pc}
 800adb8:	20000508 	.word	0x20000508

0800adbc <_read_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4d07      	ldr	r5, [pc, #28]	; (800addc <_read_r+0x20>)
 800adc0:	4604      	mov	r4, r0
 800adc2:	4608      	mov	r0, r1
 800adc4:	4611      	mov	r1, r2
 800adc6:	2200      	movs	r2, #0
 800adc8:	602a      	str	r2, [r5, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	f7f9 fd28 	bl	8004820 <_read>
 800add0:	1c43      	adds	r3, r0, #1
 800add2:	d102      	bne.n	800adda <_read_r+0x1e>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	b103      	cbz	r3, 800adda <_read_r+0x1e>
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	bd38      	pop	{r3, r4, r5, pc}
 800addc:	20000508 	.word	0x20000508

0800ade0 <_init>:
 800ade0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade2:	bf00      	nop
 800ade4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ade6:	bc08      	pop	{r3}
 800ade8:	469e      	mov	lr, r3
 800adea:	4770      	bx	lr

0800adec <_fini>:
 800adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adee:	bf00      	nop
 800adf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf2:	bc08      	pop	{r3}
 800adf4:	469e      	mov	lr, r3
 800adf6:	4770      	bx	lr
