
PulseGeneratorILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0a8  0800c000  0800c000  0001c000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ac9c  080170a8  080170a8  000270a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021d44  08021d44  0004023c  2**0
                  CONTENTS
  4 .ARM          00000008  08021d44  08021d44  00031d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021d4c  08021d4c  0004023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021d4c  08021d4c  00031d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021d50  08021d50  00031d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  08021d54  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000023c  08021f90  0004023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08021f90  00040520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131c9  00000000  00000000  0004026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a5  00000000  00000000  00053435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  000567e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f04f  00000000  00000000  00057a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000059df  00000000  00000000  00066aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0006c48e  2**0
                  CONTENTS, READONLY
 18 .debug_ranges 000010d8  00000000  00000000  0006c4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00005d08  00000000  00000000  0006d5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	2000023c 	.word	0x2000023c
 800c01c:	00000000 	.word	0x00000000
 800c020:	08017090 	.word	0x08017090

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000240 	.word	0x20000240
 800c03c:	08017090 	.word	0x08017090

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <memchr>:
 800c050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c054:	2a10      	cmp	r2, #16
 800c056:	db2b      	blt.n	800c0b0 <memchr+0x60>
 800c058:	f010 0f07 	tst.w	r0, #7
 800c05c:	d008      	beq.n	800c070 <memchr+0x20>
 800c05e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c062:	3a01      	subs	r2, #1
 800c064:	428b      	cmp	r3, r1
 800c066:	d02d      	beq.n	800c0c4 <memchr+0x74>
 800c068:	f010 0f07 	tst.w	r0, #7
 800c06c:	b342      	cbz	r2, 800c0c0 <memchr+0x70>
 800c06e:	d1f6      	bne.n	800c05e <memchr+0xe>
 800c070:	b4f0      	push	{r4, r5, r6, r7}
 800c072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c07a:	f022 0407 	bic.w	r4, r2, #7
 800c07e:	f07f 0700 	mvns.w	r7, #0
 800c082:	2300      	movs	r3, #0
 800c084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c088:	3c08      	subs	r4, #8
 800c08a:	ea85 0501 	eor.w	r5, r5, r1
 800c08e:	ea86 0601 	eor.w	r6, r6, r1
 800c092:	fa85 f547 	uadd8	r5, r5, r7
 800c096:	faa3 f587 	sel	r5, r3, r7
 800c09a:	fa86 f647 	uadd8	r6, r6, r7
 800c09e:	faa5 f687 	sel	r6, r5, r7
 800c0a2:	b98e      	cbnz	r6, 800c0c8 <memchr+0x78>
 800c0a4:	d1ee      	bne.n	800c084 <memchr+0x34>
 800c0a6:	bcf0      	pop	{r4, r5, r6, r7}
 800c0a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c0ac:	f002 0207 	and.w	r2, r2, #7
 800c0b0:	b132      	cbz	r2, 800c0c0 <memchr+0x70>
 800c0b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0b6:	3a01      	subs	r2, #1
 800c0b8:	ea83 0301 	eor.w	r3, r3, r1
 800c0bc:	b113      	cbz	r3, 800c0c4 <memchr+0x74>
 800c0be:	d1f8      	bne.n	800c0b2 <memchr+0x62>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	4770      	bx	lr
 800c0c4:	3801      	subs	r0, #1
 800c0c6:	4770      	bx	lr
 800c0c8:	2d00      	cmp	r5, #0
 800c0ca:	bf06      	itte	eq
 800c0cc:	4635      	moveq	r5, r6
 800c0ce:	3803      	subeq	r0, #3
 800c0d0:	3807      	subne	r0, #7
 800c0d2:	f015 0f01 	tst.w	r5, #1
 800c0d6:	d107      	bne.n	800c0e8 <memchr+0x98>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	f415 7f80 	tst.w	r5, #256	; 0x100
 800c0de:	bf02      	ittt	eq
 800c0e0:	3001      	addeq	r0, #1
 800c0e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800c0e6:	3001      	addeq	r0, #1
 800c0e8:	bcf0      	pop	{r4, r5, r6, r7}
 800c0ea:	3801      	subs	r0, #1
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop

0800c0f0 <__aeabi_drsub>:
 800c0f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800c0f4:	e002      	b.n	800c0fc <__adddf3>
 800c0f6:	bf00      	nop

0800c0f8 <__aeabi_dsub>:
 800c0f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800c0fc <__adddf3>:
 800c0fc:	b530      	push	{r4, r5, lr}
 800c0fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c106:	ea94 0f05 	teq	r4, r5
 800c10a:	bf08      	it	eq
 800c10c:	ea90 0f02 	teqeq	r0, r2
 800c110:	bf1f      	itttt	ne
 800c112:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c11a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c11e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c122:	f000 80e2 	beq.w	800c2ea <__adddf3+0x1ee>
 800c126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c12a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c12e:	bfb8      	it	lt
 800c130:	426d      	neglt	r5, r5
 800c132:	dd0c      	ble.n	800c14e <__adddf3+0x52>
 800c134:	442c      	add	r4, r5
 800c136:	ea80 0202 	eor.w	r2, r0, r2
 800c13a:	ea81 0303 	eor.w	r3, r1, r3
 800c13e:	ea82 0000 	eor.w	r0, r2, r0
 800c142:	ea83 0101 	eor.w	r1, r3, r1
 800c146:	ea80 0202 	eor.w	r2, r0, r2
 800c14a:	ea81 0303 	eor.w	r3, r1, r3
 800c14e:	2d36      	cmp	r5, #54	; 0x36
 800c150:	bf88      	it	hi
 800c152:	bd30      	pophi	{r4, r5, pc}
 800c154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c15c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800c160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c164:	d002      	beq.n	800c16c <__adddf3+0x70>
 800c166:	4240      	negs	r0, r0
 800c168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c16c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800c170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c178:	d002      	beq.n	800c180 <__adddf3+0x84>
 800c17a:	4252      	negs	r2, r2
 800c17c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c180:	ea94 0f05 	teq	r4, r5
 800c184:	f000 80a7 	beq.w	800c2d6 <__adddf3+0x1da>
 800c188:	f1a4 0401 	sub.w	r4, r4, #1
 800c18c:	f1d5 0e20 	rsbs	lr, r5, #32
 800c190:	db0d      	blt.n	800c1ae <__adddf3+0xb2>
 800c192:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c196:	fa22 f205 	lsr.w	r2, r2, r5
 800c19a:	1880      	adds	r0, r0, r2
 800c19c:	f141 0100 	adc.w	r1, r1, #0
 800c1a0:	fa03 f20e 	lsl.w	r2, r3, lr
 800c1a4:	1880      	adds	r0, r0, r2
 800c1a6:	fa43 f305 	asr.w	r3, r3, r5
 800c1aa:	4159      	adcs	r1, r3
 800c1ac:	e00e      	b.n	800c1cc <__adddf3+0xd0>
 800c1ae:	f1a5 0520 	sub.w	r5, r5, #32
 800c1b2:	f10e 0e20 	add.w	lr, lr, #32
 800c1b6:	2a01      	cmp	r2, #1
 800c1b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c1bc:	bf28      	it	cs
 800c1be:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c1c2:	fa43 f305 	asr.w	r3, r3, r5
 800c1c6:	18c0      	adds	r0, r0, r3
 800c1c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c1cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c1d0:	d507      	bpl.n	800c1e2 <__adddf3+0xe6>
 800c1d2:	f04f 0e00 	mov.w	lr, #0
 800c1d6:	f1dc 0c00 	rsbs	ip, ip, #0
 800c1da:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c1de:	eb6e 0101 	sbc.w	r1, lr, r1
 800c1e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c1e6:	d31b      	bcc.n	800c220 <__adddf3+0x124>
 800c1e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c1ec:	d30c      	bcc.n	800c208 <__adddf3+0x10c>
 800c1ee:	0849      	lsrs	r1, r1, #1
 800c1f0:	ea5f 0030 	movs.w	r0, r0, rrx
 800c1f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c1f8:	f104 0401 	add.w	r4, r4, #1
 800c1fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800c204:	f080 809a 	bcs.w	800c33c <__adddf3+0x240>
 800c208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800c20c:	bf08      	it	eq
 800c20e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c212:	f150 0000 	adcs.w	r0, r0, #0
 800c216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c21a:	ea41 0105 	orr.w	r1, r1, r5
 800c21e:	bd30      	pop	{r4, r5, pc}
 800c220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c224:	4140      	adcs	r0, r0
 800c226:	eb41 0101 	adc.w	r1, r1, r1
 800c22a:	3c01      	subs	r4, #1
 800c22c:	bf28      	it	cs
 800c22e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800c232:	d2e9      	bcs.n	800c208 <__adddf3+0x10c>
 800c234:	f091 0f00 	teq	r1, #0
 800c238:	bf04      	itt	eq
 800c23a:	4601      	moveq	r1, r0
 800c23c:	2000      	moveq	r0, #0
 800c23e:	fab1 f381 	clz	r3, r1
 800c242:	bf08      	it	eq
 800c244:	3320      	addeq	r3, #32
 800c246:	f1a3 030b 	sub.w	r3, r3, #11
 800c24a:	f1b3 0220 	subs.w	r2, r3, #32
 800c24e:	da0c      	bge.n	800c26a <__adddf3+0x16e>
 800c250:	320c      	adds	r2, #12
 800c252:	dd08      	ble.n	800c266 <__adddf3+0x16a>
 800c254:	f102 0c14 	add.w	ip, r2, #20
 800c258:	f1c2 020c 	rsb	r2, r2, #12
 800c25c:	fa01 f00c 	lsl.w	r0, r1, ip
 800c260:	fa21 f102 	lsr.w	r1, r1, r2
 800c264:	e00c      	b.n	800c280 <__adddf3+0x184>
 800c266:	f102 0214 	add.w	r2, r2, #20
 800c26a:	bfd8      	it	le
 800c26c:	f1c2 0c20 	rsble	ip, r2, #32
 800c270:	fa01 f102 	lsl.w	r1, r1, r2
 800c274:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c278:	bfdc      	itt	le
 800c27a:	ea41 010c 	orrle.w	r1, r1, ip
 800c27e:	4090      	lslle	r0, r2
 800c280:	1ae4      	subs	r4, r4, r3
 800c282:	bfa2      	ittt	ge
 800c284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c288:	4329      	orrge	r1, r5
 800c28a:	bd30      	popge	{r4, r5, pc}
 800c28c:	ea6f 0404 	mvn.w	r4, r4
 800c290:	3c1f      	subs	r4, #31
 800c292:	da1c      	bge.n	800c2ce <__adddf3+0x1d2>
 800c294:	340c      	adds	r4, #12
 800c296:	dc0e      	bgt.n	800c2b6 <__adddf3+0x1ba>
 800c298:	f104 0414 	add.w	r4, r4, #20
 800c29c:	f1c4 0220 	rsb	r2, r4, #32
 800c2a0:	fa20 f004 	lsr.w	r0, r0, r4
 800c2a4:	fa01 f302 	lsl.w	r3, r1, r2
 800c2a8:	ea40 0003 	orr.w	r0, r0, r3
 800c2ac:	fa21 f304 	lsr.w	r3, r1, r4
 800c2b0:	ea45 0103 	orr.w	r1, r5, r3
 800c2b4:	bd30      	pop	{r4, r5, pc}
 800c2b6:	f1c4 040c 	rsb	r4, r4, #12
 800c2ba:	f1c4 0220 	rsb	r2, r4, #32
 800c2be:	fa20 f002 	lsr.w	r0, r0, r2
 800c2c2:	fa01 f304 	lsl.w	r3, r1, r4
 800c2c6:	ea40 0003 	orr.w	r0, r0, r3
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	bd30      	pop	{r4, r5, pc}
 800c2ce:	fa21 f004 	lsr.w	r0, r1, r4
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	bd30      	pop	{r4, r5, pc}
 800c2d6:	f094 0f00 	teq	r4, #0
 800c2da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800c2de:	bf06      	itte	eq
 800c2e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800c2e4:	3401      	addeq	r4, #1
 800c2e6:	3d01      	subne	r5, #1
 800c2e8:	e74e      	b.n	800c188 <__adddf3+0x8c>
 800c2ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c2ee:	bf18      	it	ne
 800c2f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c2f4:	d029      	beq.n	800c34a <__adddf3+0x24e>
 800c2f6:	ea94 0f05 	teq	r4, r5
 800c2fa:	bf08      	it	eq
 800c2fc:	ea90 0f02 	teqeq	r0, r2
 800c300:	d005      	beq.n	800c30e <__adddf3+0x212>
 800c302:	ea54 0c00 	orrs.w	ip, r4, r0
 800c306:	bf04      	itt	eq
 800c308:	4619      	moveq	r1, r3
 800c30a:	4610      	moveq	r0, r2
 800c30c:	bd30      	pop	{r4, r5, pc}
 800c30e:	ea91 0f03 	teq	r1, r3
 800c312:	bf1e      	ittt	ne
 800c314:	2100      	movne	r1, #0
 800c316:	2000      	movne	r0, #0
 800c318:	bd30      	popne	{r4, r5, pc}
 800c31a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c31e:	d105      	bne.n	800c32c <__adddf3+0x230>
 800c320:	0040      	lsls	r0, r0, #1
 800c322:	4149      	adcs	r1, r1
 800c324:	bf28      	it	cs
 800c326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800c32a:	bd30      	pop	{r4, r5, pc}
 800c32c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800c330:	bf3c      	itt	cc
 800c332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800c336:	bd30      	popcc	{r4, r5, pc}
 800c338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c33c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800c340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c344:	f04f 0000 	mov.w	r0, #0
 800c348:	bd30      	pop	{r4, r5, pc}
 800c34a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c34e:	bf1a      	itte	ne
 800c350:	4619      	movne	r1, r3
 800c352:	4610      	movne	r0, r2
 800c354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c358:	bf1c      	itt	ne
 800c35a:	460b      	movne	r3, r1
 800c35c:	4602      	movne	r2, r0
 800c35e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c362:	bf06      	itte	eq
 800c364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c368:	ea91 0f03 	teqeq	r1, r3
 800c36c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800c370:	bd30      	pop	{r4, r5, pc}
 800c372:	bf00      	nop

0800c374 <__aeabi_ui2d>:
 800c374:	f090 0f00 	teq	r0, #0
 800c378:	bf04      	itt	eq
 800c37a:	2100      	moveq	r1, #0
 800c37c:	4770      	bxeq	lr
 800c37e:	b530      	push	{r4, r5, lr}
 800c380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c388:	f04f 0500 	mov.w	r5, #0
 800c38c:	f04f 0100 	mov.w	r1, #0
 800c390:	e750      	b.n	800c234 <__adddf3+0x138>
 800c392:	bf00      	nop

0800c394 <__aeabi_i2d>:
 800c394:	f090 0f00 	teq	r0, #0
 800c398:	bf04      	itt	eq
 800c39a:	2100      	moveq	r1, #0
 800c39c:	4770      	bxeq	lr
 800c39e:	b530      	push	{r4, r5, lr}
 800c3a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800c3ac:	bf48      	it	mi
 800c3ae:	4240      	negmi	r0, r0
 800c3b0:	f04f 0100 	mov.w	r1, #0
 800c3b4:	e73e      	b.n	800c234 <__adddf3+0x138>
 800c3b6:	bf00      	nop

0800c3b8 <__aeabi_f2d>:
 800c3b8:	0042      	lsls	r2, r0, #1
 800c3ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c3be:	ea4f 0131 	mov.w	r1, r1, rrx
 800c3c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c3c6:	bf1f      	itttt	ne
 800c3c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800c3cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c3d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800c3d4:	4770      	bxne	lr
 800c3d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800c3da:	bf08      	it	eq
 800c3dc:	4770      	bxeq	lr
 800c3de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800c3e2:	bf04      	itt	eq
 800c3e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800c3e8:	4770      	bxeq	lr
 800c3ea:	b530      	push	{r4, r5, lr}
 800c3ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 800c3f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c3f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c3f8:	e71c      	b.n	800c234 <__adddf3+0x138>
 800c3fa:	bf00      	nop

0800c3fc <__aeabi_ul2d>:
 800c3fc:	ea50 0201 	orrs.w	r2, r0, r1
 800c400:	bf08      	it	eq
 800c402:	4770      	bxeq	lr
 800c404:	b530      	push	{r4, r5, lr}
 800c406:	f04f 0500 	mov.w	r5, #0
 800c40a:	e00a      	b.n	800c422 <__aeabi_l2d+0x16>

0800c40c <__aeabi_l2d>:
 800c40c:	ea50 0201 	orrs.w	r2, r0, r1
 800c410:	bf08      	it	eq
 800c412:	4770      	bxeq	lr
 800c414:	b530      	push	{r4, r5, lr}
 800c416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800c41a:	d502      	bpl.n	800c422 <__aeabi_l2d+0x16>
 800c41c:	4240      	negs	r0, r0
 800c41e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c42a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c42e:	f43f aed8 	beq.w	800c1e2 <__adddf3+0xe6>
 800c432:	f04f 0203 	mov.w	r2, #3
 800c436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c43a:	bf18      	it	ne
 800c43c:	3203      	addne	r2, #3
 800c43e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c442:	bf18      	it	ne
 800c444:	3203      	addne	r2, #3
 800c446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c44a:	f1c2 0320 	rsb	r3, r2, #32
 800c44e:	fa00 fc03 	lsl.w	ip, r0, r3
 800c452:	fa20 f002 	lsr.w	r0, r0, r2
 800c456:	fa01 fe03 	lsl.w	lr, r1, r3
 800c45a:	ea40 000e 	orr.w	r0, r0, lr
 800c45e:	fa21 f102 	lsr.w	r1, r1, r2
 800c462:	4414      	add	r4, r2
 800c464:	e6bd      	b.n	800c1e2 <__adddf3+0xe6>
 800c466:	bf00      	nop

0800c468 <__aeabi_dmul>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c46e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c476:	bf1d      	ittte	ne
 800c478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c47c:	ea94 0f0c 	teqne	r4, ip
 800c480:	ea95 0f0c 	teqne	r5, ip
 800c484:	f000 f8de 	bleq	800c644 <__aeabi_dmul+0x1dc>
 800c488:	442c      	add	r4, r5
 800c48a:	ea81 0603 	eor.w	r6, r1, r3
 800c48e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c49a:	bf18      	it	ne
 800c49c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c4a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c4a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4a8:	d038      	beq.n	800c51c <__aeabi_dmul+0xb4>
 800c4aa:	fba0 ce02 	umull	ip, lr, r0, r2
 800c4ae:	f04f 0500 	mov.w	r5, #0
 800c4b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c4b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800c4ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c4be:	f04f 0600 	mov.w	r6, #0
 800c4c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c4c6:	f09c 0f00 	teq	ip, #0
 800c4ca:	bf18      	it	ne
 800c4cc:	f04e 0e01 	orrne.w	lr, lr, #1
 800c4d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800c4d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800c4d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800c4dc:	d204      	bcs.n	800c4e8 <__aeabi_dmul+0x80>
 800c4de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c4e2:	416d      	adcs	r5, r5
 800c4e4:	eb46 0606 	adc.w	r6, r6, r6
 800c4e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c4ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c4f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c4f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c4f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c4fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c500:	bf88      	it	hi
 800c502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c506:	d81e      	bhi.n	800c546 <__aeabi_dmul+0xde>
 800c508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800c50c:	bf08      	it	eq
 800c50e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c512:	f150 0000 	adcs.w	r0, r0, #0
 800c516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800c520:	ea46 0101 	orr.w	r1, r6, r1
 800c524:	ea40 0002 	orr.w	r0, r0, r2
 800c528:	ea81 0103 	eor.w	r1, r1, r3
 800c52c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c530:	bfc2      	ittt	gt
 800c532:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c53a:	bd70      	popgt	{r4, r5, r6, pc}
 800c53c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c540:	f04f 0e00 	mov.w	lr, #0
 800c544:	3c01      	subs	r4, #1
 800c546:	f300 80ab 	bgt.w	800c6a0 <__aeabi_dmul+0x238>
 800c54a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800c54e:	bfde      	ittt	le
 800c550:	2000      	movle	r0, #0
 800c552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800c556:	bd70      	pople	{r4, r5, r6, pc}
 800c558:	f1c4 0400 	rsb	r4, r4, #0
 800c55c:	3c20      	subs	r4, #32
 800c55e:	da35      	bge.n	800c5cc <__aeabi_dmul+0x164>
 800c560:	340c      	adds	r4, #12
 800c562:	dc1b      	bgt.n	800c59c <__aeabi_dmul+0x134>
 800c564:	f104 0414 	add.w	r4, r4, #20
 800c568:	f1c4 0520 	rsb	r5, r4, #32
 800c56c:	fa00 f305 	lsl.w	r3, r0, r5
 800c570:	fa20 f004 	lsr.w	r0, r0, r4
 800c574:	fa01 f205 	lsl.w	r2, r1, r5
 800c578:	ea40 0002 	orr.w	r0, r0, r2
 800c57c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800c580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c588:	fa21 f604 	lsr.w	r6, r1, r4
 800c58c:	eb42 0106 	adc.w	r1, r2, r6
 800c590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c594:	bf08      	it	eq
 800c596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c59a:	bd70      	pop	{r4, r5, r6, pc}
 800c59c:	f1c4 040c 	rsb	r4, r4, #12
 800c5a0:	f1c4 0520 	rsb	r5, r4, #32
 800c5a4:	fa00 f304 	lsl.w	r3, r0, r4
 800c5a8:	fa20 f005 	lsr.w	r0, r0, r5
 800c5ac:	fa01 f204 	lsl.w	r2, r1, r4
 800c5b0:	ea40 0002 	orr.w	r0, r0, r2
 800c5b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c5b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c5bc:	f141 0100 	adc.w	r1, r1, #0
 800c5c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5c4:	bf08      	it	eq
 800c5c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c5ca:	bd70      	pop	{r4, r5, r6, pc}
 800c5cc:	f1c4 0520 	rsb	r5, r4, #32
 800c5d0:	fa00 f205 	lsl.w	r2, r0, r5
 800c5d4:	ea4e 0e02 	orr.w	lr, lr, r2
 800c5d8:	fa20 f304 	lsr.w	r3, r0, r4
 800c5dc:	fa01 f205 	lsl.w	r2, r1, r5
 800c5e0:	ea43 0302 	orr.w	r3, r3, r2
 800c5e4:	fa21 f004 	lsr.w	r0, r1, r4
 800c5e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c5ec:	fa21 f204 	lsr.w	r2, r1, r4
 800c5f0:	ea20 0002 	bic.w	r0, r0, r2
 800c5f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5fc:	bf08      	it	eq
 800c5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c602:	bd70      	pop	{r4, r5, r6, pc}
 800c604:	f094 0f00 	teq	r4, #0
 800c608:	d10f      	bne.n	800c62a <__aeabi_dmul+0x1c2>
 800c60a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800c60e:	0040      	lsls	r0, r0, #1
 800c610:	eb41 0101 	adc.w	r1, r1, r1
 800c614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c618:	bf08      	it	eq
 800c61a:	3c01      	subeq	r4, #1
 800c61c:	d0f7      	beq.n	800c60e <__aeabi_dmul+0x1a6>
 800c61e:	ea41 0106 	orr.w	r1, r1, r6
 800c622:	f095 0f00 	teq	r5, #0
 800c626:	bf18      	it	ne
 800c628:	4770      	bxne	lr
 800c62a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800c62e:	0052      	lsls	r2, r2, #1
 800c630:	eb43 0303 	adc.w	r3, r3, r3
 800c634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c638:	bf08      	it	eq
 800c63a:	3d01      	subeq	r5, #1
 800c63c:	d0f7      	beq.n	800c62e <__aeabi_dmul+0x1c6>
 800c63e:	ea43 0306 	orr.w	r3, r3, r6
 800c642:	4770      	bx	lr
 800c644:	ea94 0f0c 	teq	r4, ip
 800c648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c64c:	bf18      	it	ne
 800c64e:	ea95 0f0c 	teqne	r5, ip
 800c652:	d00c      	beq.n	800c66e <__aeabi_dmul+0x206>
 800c654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c658:	bf18      	it	ne
 800c65a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c65e:	d1d1      	bne.n	800c604 <__aeabi_dmul+0x19c>
 800c660:	ea81 0103 	eor.w	r1, r1, r3
 800c664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c668:	f04f 0000 	mov.w	r0, #0
 800c66c:	bd70      	pop	{r4, r5, r6, pc}
 800c66e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c672:	bf06      	itte	eq
 800c674:	4610      	moveq	r0, r2
 800c676:	4619      	moveq	r1, r3
 800c678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c67c:	d019      	beq.n	800c6b2 <__aeabi_dmul+0x24a>
 800c67e:	ea94 0f0c 	teq	r4, ip
 800c682:	d102      	bne.n	800c68a <__aeabi_dmul+0x222>
 800c684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c688:	d113      	bne.n	800c6b2 <__aeabi_dmul+0x24a>
 800c68a:	ea95 0f0c 	teq	r5, ip
 800c68e:	d105      	bne.n	800c69c <__aeabi_dmul+0x234>
 800c690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c694:	bf1c      	itt	ne
 800c696:	4610      	movne	r0, r2
 800c698:	4619      	movne	r1, r3
 800c69a:	d10a      	bne.n	800c6b2 <__aeabi_dmul+0x24a>
 800c69c:	ea81 0103 	eor.w	r1, r1, r3
 800c6a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c6a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c6ac:	f04f 0000 	mov.w	r0, #0
 800c6b0:	bd70      	pop	{r4, r5, r6, pc}
 800c6b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c6b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800c6ba:	bd70      	pop	{r4, r5, r6, pc}

0800c6bc <__aeabi_ddiv>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c6c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c6c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c6ca:	bf1d      	ittte	ne
 800c6cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c6d0:	ea94 0f0c 	teqne	r4, ip
 800c6d4:	ea95 0f0c 	teqne	r5, ip
 800c6d8:	f000 f8a7 	bleq	800c82a <__aeabi_ddiv+0x16e>
 800c6dc:	eba4 0405 	sub.w	r4, r4, r5
 800c6e0:	ea81 0e03 	eor.w	lr, r1, r3
 800c6e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c6e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c6ec:	f000 8088 	beq.w	800c800 <__aeabi_ddiv+0x144>
 800c6f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c6f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c6f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800c6fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800c708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800c70c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800c710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800c714:	429d      	cmp	r5, r3
 800c716:	bf08      	it	eq
 800c718:	4296      	cmpeq	r6, r2
 800c71a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800c71e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800c722:	d202      	bcs.n	800c72a <__aeabi_ddiv+0x6e>
 800c724:	085b      	lsrs	r3, r3, #1
 800c726:	ea4f 0232 	mov.w	r2, r2, rrx
 800c72a:	1ab6      	subs	r6, r6, r2
 800c72c:	eb65 0503 	sbc.w	r5, r5, r3
 800c730:	085b      	lsrs	r3, r3, #1
 800c732:	ea4f 0232 	mov.w	r2, r2, rrx
 800c736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c73a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800c73e:	ebb6 0e02 	subs.w	lr, r6, r2
 800c742:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c746:	bf22      	ittt	cs
 800c748:	1ab6      	subcs	r6, r6, r2
 800c74a:	4675      	movcs	r5, lr
 800c74c:	ea40 000c 	orrcs.w	r0, r0, ip
 800c750:	085b      	lsrs	r3, r3, #1
 800c752:	ea4f 0232 	mov.w	r2, r2, rrx
 800c756:	ebb6 0e02 	subs.w	lr, r6, r2
 800c75a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c75e:	bf22      	ittt	cs
 800c760:	1ab6      	subcs	r6, r6, r2
 800c762:	4675      	movcs	r5, lr
 800c764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800c768:	085b      	lsrs	r3, r3, #1
 800c76a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c76e:	ebb6 0e02 	subs.w	lr, r6, r2
 800c772:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c776:	bf22      	ittt	cs
 800c778:	1ab6      	subcs	r6, r6, r2
 800c77a:	4675      	movcs	r5, lr
 800c77c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800c780:	085b      	lsrs	r3, r3, #1
 800c782:	ea4f 0232 	mov.w	r2, r2, rrx
 800c786:	ebb6 0e02 	subs.w	lr, r6, r2
 800c78a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c78e:	bf22      	ittt	cs
 800c790:	1ab6      	subcs	r6, r6, r2
 800c792:	4675      	movcs	r5, lr
 800c794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800c798:	ea55 0e06 	orrs.w	lr, r5, r6
 800c79c:	d018      	beq.n	800c7d0 <__aeabi_ddiv+0x114>
 800c79e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c7a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800c7a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800c7aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c7ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c7b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c7b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800c7ba:	d1c0      	bne.n	800c73e <__aeabi_ddiv+0x82>
 800c7bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c7c0:	d10b      	bne.n	800c7da <__aeabi_ddiv+0x11e>
 800c7c2:	ea41 0100 	orr.w	r1, r1, r0
 800c7c6:	f04f 0000 	mov.w	r0, #0
 800c7ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c7ce:	e7b6      	b.n	800c73e <__aeabi_ddiv+0x82>
 800c7d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c7d4:	bf04      	itt	eq
 800c7d6:	4301      	orreq	r1, r0
 800c7d8:	2000      	moveq	r0, #0
 800c7da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c7de:	bf88      	it	hi
 800c7e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c7e4:	f63f aeaf 	bhi.w	800c546 <__aeabi_dmul+0xde>
 800c7e8:	ebb5 0c03 	subs.w	ip, r5, r3
 800c7ec:	bf04      	itt	eq
 800c7ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 800c7f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c7f6:	f150 0000 	adcs.w	r0, r0, #0
 800c7fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}
 800c800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800c804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800c808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800c80c:	bfc2      	ittt	gt
 800c80e:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c816:	bd70      	popgt	{r4, r5, r6, pc}
 800c818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c81c:	f04f 0e00 	mov.w	lr, #0
 800c820:	3c01      	subs	r4, #1
 800c822:	e690      	b.n	800c546 <__aeabi_dmul+0xde>
 800c824:	ea45 0e06 	orr.w	lr, r5, r6
 800c828:	e68d      	b.n	800c546 <__aeabi_dmul+0xde>
 800c82a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c82e:	ea94 0f0c 	teq	r4, ip
 800c832:	bf08      	it	eq
 800c834:	ea95 0f0c 	teqeq	r5, ip
 800c838:	f43f af3b 	beq.w	800c6b2 <__aeabi_dmul+0x24a>
 800c83c:	ea94 0f0c 	teq	r4, ip
 800c840:	d10a      	bne.n	800c858 <__aeabi_ddiv+0x19c>
 800c842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c846:	f47f af34 	bne.w	800c6b2 <__aeabi_dmul+0x24a>
 800c84a:	ea95 0f0c 	teq	r5, ip
 800c84e:	f47f af25 	bne.w	800c69c <__aeabi_dmul+0x234>
 800c852:	4610      	mov	r0, r2
 800c854:	4619      	mov	r1, r3
 800c856:	e72c      	b.n	800c6b2 <__aeabi_dmul+0x24a>
 800c858:	ea95 0f0c 	teq	r5, ip
 800c85c:	d106      	bne.n	800c86c <__aeabi_ddiv+0x1b0>
 800c85e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c862:	f43f aefd 	beq.w	800c660 <__aeabi_dmul+0x1f8>
 800c866:	4610      	mov	r0, r2
 800c868:	4619      	mov	r1, r3
 800c86a:	e722      	b.n	800c6b2 <__aeabi_dmul+0x24a>
 800c86c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c870:	bf18      	it	ne
 800c872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c876:	f47f aec5 	bne.w	800c604 <__aeabi_dmul+0x19c>
 800c87a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800c87e:	f47f af0d 	bne.w	800c69c <__aeabi_dmul+0x234>
 800c882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800c886:	f47f aeeb 	bne.w	800c660 <__aeabi_dmul+0x1f8>
 800c88a:	e712      	b.n	800c6b2 <__aeabi_dmul+0x24a>

0800c88c <__gedf2>:
 800c88c:	f04f 3cff 	mov.w	ip, #4294967295
 800c890:	e006      	b.n	800c8a0 <__cmpdf2+0x4>
 800c892:	bf00      	nop

0800c894 <__ledf2>:
 800c894:	f04f 0c01 	mov.w	ip, #1
 800c898:	e002      	b.n	800c8a0 <__cmpdf2+0x4>
 800c89a:	bf00      	nop

0800c89c <__cmpdf2>:
 800c89c:	f04f 0c01 	mov.w	ip, #1
 800c8a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 800c8a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c8a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c8ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c8b0:	bf18      	it	ne
 800c8b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800c8b6:	d01b      	beq.n	800c8f0 <__cmpdf2+0x54>
 800c8b8:	b001      	add	sp, #4
 800c8ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800c8be:	bf0c      	ite	eq
 800c8c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800c8c4:	ea91 0f03 	teqne	r1, r3
 800c8c8:	bf02      	ittt	eq
 800c8ca:	ea90 0f02 	teqeq	r0, r2
 800c8ce:	2000      	moveq	r0, #0
 800c8d0:	4770      	bxeq	lr
 800c8d2:	f110 0f00 	cmn.w	r0, #0
 800c8d6:	ea91 0f03 	teq	r1, r3
 800c8da:	bf58      	it	pl
 800c8dc:	4299      	cmppl	r1, r3
 800c8de:	bf08      	it	eq
 800c8e0:	4290      	cmpeq	r0, r2
 800c8e2:	bf2c      	ite	cs
 800c8e4:	17d8      	asrcs	r0, r3, #31
 800c8e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800c8ea:	f040 0001 	orr.w	r0, r0, #1
 800c8ee:	4770      	bx	lr
 800c8f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c8f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c8f8:	d102      	bne.n	800c900 <__cmpdf2+0x64>
 800c8fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800c8fe:	d107      	bne.n	800c910 <__cmpdf2+0x74>
 800c900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c908:	d1d6      	bne.n	800c8b8 <__cmpdf2+0x1c>
 800c90a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800c90e:	d0d3      	beq.n	800c8b8 <__cmpdf2+0x1c>
 800c910:	f85d 0b04 	ldr.w	r0, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop

0800c918 <__aeabi_cdrcmple>:
 800c918:	4684      	mov	ip, r0
 800c91a:	4610      	mov	r0, r2
 800c91c:	4662      	mov	r2, ip
 800c91e:	468c      	mov	ip, r1
 800c920:	4619      	mov	r1, r3
 800c922:	4663      	mov	r3, ip
 800c924:	e000      	b.n	800c928 <__aeabi_cdcmpeq>
 800c926:	bf00      	nop

0800c928 <__aeabi_cdcmpeq>:
 800c928:	b501      	push	{r0, lr}
 800c92a:	f7ff ffb7 	bl	800c89c <__cmpdf2>
 800c92e:	2800      	cmp	r0, #0
 800c930:	bf48      	it	mi
 800c932:	f110 0f00 	cmnmi.w	r0, #0
 800c936:	bd01      	pop	{r0, pc}

0800c938 <__aeabi_dcmpeq>:
 800c938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c93c:	f7ff fff4 	bl	800c928 <__aeabi_cdcmpeq>
 800c940:	bf0c      	ite	eq
 800c942:	2001      	moveq	r0, #1
 800c944:	2000      	movne	r0, #0
 800c946:	f85d fb08 	ldr.w	pc, [sp], #8
 800c94a:	bf00      	nop

0800c94c <__aeabi_dcmplt>:
 800c94c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c950:	f7ff ffea 	bl	800c928 <__aeabi_cdcmpeq>
 800c954:	bf34      	ite	cc
 800c956:	2001      	movcc	r0, #1
 800c958:	2000      	movcs	r0, #0
 800c95a:	f85d fb08 	ldr.w	pc, [sp], #8
 800c95e:	bf00      	nop

0800c960 <__aeabi_dcmple>:
 800c960:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c964:	f7ff ffe0 	bl	800c928 <__aeabi_cdcmpeq>
 800c968:	bf94      	ite	ls
 800c96a:	2001      	movls	r0, #1
 800c96c:	2000      	movhi	r0, #0
 800c96e:	f85d fb08 	ldr.w	pc, [sp], #8
 800c972:	bf00      	nop

0800c974 <__aeabi_dcmpge>:
 800c974:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c978:	f7ff ffce 	bl	800c918 <__aeabi_cdrcmple>
 800c97c:	bf94      	ite	ls
 800c97e:	2001      	movls	r0, #1
 800c980:	2000      	movhi	r0, #0
 800c982:	f85d fb08 	ldr.w	pc, [sp], #8
 800c986:	bf00      	nop

0800c988 <__aeabi_dcmpgt>:
 800c988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c98c:	f7ff ffc4 	bl	800c918 <__aeabi_cdrcmple>
 800c990:	bf34      	ite	cc
 800c992:	2001      	movcc	r0, #1
 800c994:	2000      	movcs	r0, #0
 800c996:	f85d fb08 	ldr.w	pc, [sp], #8
 800c99a:	bf00      	nop

0800c99c <__aeabi_dcmpun>:
 800c99c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c9a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c9a4:	d102      	bne.n	800c9ac <__aeabi_dcmpun+0x10>
 800c9a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800c9aa:	d10a      	bne.n	800c9c2 <__aeabi_dcmpun+0x26>
 800c9ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c9b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c9b4:	d102      	bne.n	800c9bc <__aeabi_dcmpun+0x20>
 800c9b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800c9ba:	d102      	bne.n	800c9c2 <__aeabi_dcmpun+0x26>
 800c9bc:	f04f 0000 	mov.w	r0, #0
 800c9c0:	4770      	bx	lr
 800c9c2:	f04f 0001 	mov.w	r0, #1
 800c9c6:	4770      	bx	lr

0800c9c8 <__aeabi_d2iz>:
 800c9c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800c9cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800c9d0:	d215      	bcs.n	800c9fe <__aeabi_d2iz+0x36>
 800c9d2:	d511      	bpl.n	800c9f8 <__aeabi_d2iz+0x30>
 800c9d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800c9d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800c9dc:	d912      	bls.n	800ca04 <__aeabi_d2iz+0x3c>
 800c9de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800c9e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800c9ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c9ee:	fa23 f002 	lsr.w	r0, r3, r2
 800c9f2:	bf18      	it	ne
 800c9f4:	4240      	negne	r0, r0
 800c9f6:	4770      	bx	lr
 800c9f8:	f04f 0000 	mov.w	r0, #0
 800c9fc:	4770      	bx	lr
 800c9fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800ca02:	d105      	bne.n	800ca10 <__aeabi_d2iz+0x48>
 800ca04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800ca08:	bf08      	it	eq
 800ca0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800ca0e:	4770      	bx	lr
 800ca10:	f04f 0000 	mov.w	r0, #0
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop

0800ca18 <__aeabi_d2f>:
 800ca18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ca1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800ca20:	bf24      	itt	cs
 800ca22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800ca26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800ca2a:	d90d      	bls.n	800ca48 <__aeabi_d2f+0x30>
 800ca2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800ca30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800ca34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800ca38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800ca3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800ca40:	bf08      	it	eq
 800ca42:	f020 0001 	biceq.w	r0, r0, #1
 800ca46:	4770      	bx	lr
 800ca48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800ca4c:	d121      	bne.n	800ca92 <__aeabi_d2f+0x7a>
 800ca4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800ca52:	bfbc      	itt	lt
 800ca54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800ca58:	4770      	bxlt	lr
 800ca5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ca5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800ca62:	f1c2 0218 	rsb	r2, r2, #24
 800ca66:	f1c2 0c20 	rsb	ip, r2, #32
 800ca6a:	fa10 f30c 	lsls.w	r3, r0, ip
 800ca6e:	fa20 f002 	lsr.w	r0, r0, r2
 800ca72:	bf18      	it	ne
 800ca74:	f040 0001 	orrne.w	r0, r0, #1
 800ca78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ca7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800ca80:	fa03 fc0c 	lsl.w	ip, r3, ip
 800ca84:	ea40 000c 	orr.w	r0, r0, ip
 800ca88:	fa23 f302 	lsr.w	r3, r3, r2
 800ca8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca90:	e7cc      	b.n	800ca2c <__aeabi_d2f+0x14>
 800ca92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800ca96:	d107      	bne.n	800caa8 <__aeabi_d2f+0x90>
 800ca98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800ca9c:	bf1e      	ittt	ne
 800ca9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800caa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800caa6:	4770      	bxne	lr
 800caa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800caac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800cab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop

0800cab8 <__aeabi_uldivmod>:
 800cab8:	b953      	cbnz	r3, 800cad0 <__aeabi_uldivmod+0x18>
 800caba:	b94a      	cbnz	r2, 800cad0 <__aeabi_uldivmod+0x18>
 800cabc:	2900      	cmp	r1, #0
 800cabe:	bf08      	it	eq
 800cac0:	2800      	cmpeq	r0, #0
 800cac2:	bf1c      	itt	ne
 800cac4:	f04f 31ff 	movne.w	r1, #4294967295
 800cac8:	f04f 30ff 	movne.w	r0, #4294967295
 800cacc:	f000 b974 	b.w	800cdb8 <__aeabi_idiv0>
 800cad0:	f1ad 0c08 	sub.w	ip, sp, #8
 800cad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800cad8:	f000 f806 	bl	800cae8 <__udivmoddi4>
 800cadc:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cae4:	b004      	add	sp, #16
 800cae6:	4770      	bx	lr

0800cae8 <__udivmoddi4>:
 800cae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caec:	9d08      	ldr	r5, [sp, #32]
 800caee:	4604      	mov	r4, r0
 800caf0:	468e      	mov	lr, r1
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d14d      	bne.n	800cb92 <__udivmoddi4+0xaa>
 800caf6:	428a      	cmp	r2, r1
 800caf8:	4694      	mov	ip, r2
 800cafa:	d969      	bls.n	800cbd0 <__udivmoddi4+0xe8>
 800cafc:	fab2 f282 	clz	r2, r2
 800cb00:	b152      	cbz	r2, 800cb18 <__udivmoddi4+0x30>
 800cb02:	fa01 f302 	lsl.w	r3, r1, r2
 800cb06:	f1c2 0120 	rsb	r1, r2, #32
 800cb0a:	fa20 f101 	lsr.w	r1, r0, r1
 800cb0e:	fa0c fc02 	lsl.w	ip, ip, r2
 800cb12:	ea41 0e03 	orr.w	lr, r1, r3
 800cb16:	4094      	lsls	r4, r2
 800cb18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800cb1c:	0c21      	lsrs	r1, r4, #16
 800cb1e:	fbbe f6f8 	udiv	r6, lr, r8
 800cb22:	fa1f f78c 	uxth.w	r7, ip
 800cb26:	fb08 e316 	mls	r3, r8, r6, lr
 800cb2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cb2e:	fb06 f107 	mul.w	r1, r6, r7
 800cb32:	4299      	cmp	r1, r3
 800cb34:	d90a      	bls.n	800cb4c <__udivmoddi4+0x64>
 800cb36:	eb1c 0303 	adds.w	r3, ip, r3
 800cb3a:	f106 30ff 	add.w	r0, r6, #4294967295
 800cb3e:	f080 811f 	bcs.w	800cd80 <__udivmoddi4+0x298>
 800cb42:	4299      	cmp	r1, r3
 800cb44:	f240 811c 	bls.w	800cd80 <__udivmoddi4+0x298>
 800cb48:	3e02      	subs	r6, #2
 800cb4a:	4463      	add	r3, ip
 800cb4c:	1a5b      	subs	r3, r3, r1
 800cb4e:	b2a4      	uxth	r4, r4
 800cb50:	fbb3 f0f8 	udiv	r0, r3, r8
 800cb54:	fb08 3310 	mls	r3, r8, r0, r3
 800cb58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800cb5c:	fb00 f707 	mul.w	r7, r0, r7
 800cb60:	42a7      	cmp	r7, r4
 800cb62:	d90a      	bls.n	800cb7a <__udivmoddi4+0x92>
 800cb64:	eb1c 0404 	adds.w	r4, ip, r4
 800cb68:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb6c:	f080 810a 	bcs.w	800cd84 <__udivmoddi4+0x29c>
 800cb70:	42a7      	cmp	r7, r4
 800cb72:	f240 8107 	bls.w	800cd84 <__udivmoddi4+0x29c>
 800cb76:	4464      	add	r4, ip
 800cb78:	3802      	subs	r0, #2
 800cb7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800cb7e:	1be4      	subs	r4, r4, r7
 800cb80:	2600      	movs	r6, #0
 800cb82:	b11d      	cbz	r5, 800cb8c <__udivmoddi4+0xa4>
 800cb84:	40d4      	lsrs	r4, r2
 800cb86:	2300      	movs	r3, #0
 800cb88:	e9c5 4300 	strd	r4, r3, [r5]
 800cb8c:	4631      	mov	r1, r6
 800cb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb92:	428b      	cmp	r3, r1
 800cb94:	d909      	bls.n	800cbaa <__udivmoddi4+0xc2>
 800cb96:	2d00      	cmp	r5, #0
 800cb98:	f000 80ef 	beq.w	800cd7a <__udivmoddi4+0x292>
 800cb9c:	2600      	movs	r6, #0
 800cb9e:	e9c5 0100 	strd	r0, r1, [r5]
 800cba2:	4630      	mov	r0, r6
 800cba4:	4631      	mov	r1, r6
 800cba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbaa:	fab3 f683 	clz	r6, r3
 800cbae:	2e00      	cmp	r6, #0
 800cbb0:	d14a      	bne.n	800cc48 <__udivmoddi4+0x160>
 800cbb2:	428b      	cmp	r3, r1
 800cbb4:	d302      	bcc.n	800cbbc <__udivmoddi4+0xd4>
 800cbb6:	4282      	cmp	r2, r0
 800cbb8:	f200 80f9 	bhi.w	800cdae <__udivmoddi4+0x2c6>
 800cbbc:	1a84      	subs	r4, r0, r2
 800cbbe:	eb61 0303 	sbc.w	r3, r1, r3
 800cbc2:	2001      	movs	r0, #1
 800cbc4:	469e      	mov	lr, r3
 800cbc6:	2d00      	cmp	r5, #0
 800cbc8:	d0e0      	beq.n	800cb8c <__udivmoddi4+0xa4>
 800cbca:	e9c5 4e00 	strd	r4, lr, [r5]
 800cbce:	e7dd      	b.n	800cb8c <__udivmoddi4+0xa4>
 800cbd0:	b902      	cbnz	r2, 800cbd4 <__udivmoddi4+0xec>
 800cbd2:	deff      	udf	#255	; 0xff
 800cbd4:	fab2 f282 	clz	r2, r2
 800cbd8:	2a00      	cmp	r2, #0
 800cbda:	f040 8092 	bne.w	800cd02 <__udivmoddi4+0x21a>
 800cbde:	eba1 010c 	sub.w	r1, r1, ip
 800cbe2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800cbe6:	fa1f fe8c 	uxth.w	lr, ip
 800cbea:	2601      	movs	r6, #1
 800cbec:	0c20      	lsrs	r0, r4, #16
 800cbee:	fbb1 f3f7 	udiv	r3, r1, r7
 800cbf2:	fb07 1113 	mls	r1, r7, r3, r1
 800cbf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800cbfa:	fb0e f003 	mul.w	r0, lr, r3
 800cbfe:	4288      	cmp	r0, r1
 800cc00:	d908      	bls.n	800cc14 <__udivmoddi4+0x12c>
 800cc02:	eb1c 0101 	adds.w	r1, ip, r1
 800cc06:	f103 38ff 	add.w	r8, r3, #4294967295
 800cc0a:	d202      	bcs.n	800cc12 <__udivmoddi4+0x12a>
 800cc0c:	4288      	cmp	r0, r1
 800cc0e:	f200 80cb 	bhi.w	800cda8 <__udivmoddi4+0x2c0>
 800cc12:	4643      	mov	r3, r8
 800cc14:	1a09      	subs	r1, r1, r0
 800cc16:	b2a4      	uxth	r4, r4
 800cc18:	fbb1 f0f7 	udiv	r0, r1, r7
 800cc1c:	fb07 1110 	mls	r1, r7, r0, r1
 800cc20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800cc24:	fb0e fe00 	mul.w	lr, lr, r0
 800cc28:	45a6      	cmp	lr, r4
 800cc2a:	d908      	bls.n	800cc3e <__udivmoddi4+0x156>
 800cc2c:	eb1c 0404 	adds.w	r4, ip, r4
 800cc30:	f100 31ff 	add.w	r1, r0, #4294967295
 800cc34:	d202      	bcs.n	800cc3c <__udivmoddi4+0x154>
 800cc36:	45a6      	cmp	lr, r4
 800cc38:	f200 80bb 	bhi.w	800cdb2 <__udivmoddi4+0x2ca>
 800cc3c:	4608      	mov	r0, r1
 800cc3e:	eba4 040e 	sub.w	r4, r4, lr
 800cc42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800cc46:	e79c      	b.n	800cb82 <__udivmoddi4+0x9a>
 800cc48:	f1c6 0720 	rsb	r7, r6, #32
 800cc4c:	40b3      	lsls	r3, r6
 800cc4e:	fa22 fc07 	lsr.w	ip, r2, r7
 800cc52:	ea4c 0c03 	orr.w	ip, ip, r3
 800cc56:	fa20 f407 	lsr.w	r4, r0, r7
 800cc5a:	fa01 f306 	lsl.w	r3, r1, r6
 800cc5e:	431c      	orrs	r4, r3
 800cc60:	40f9      	lsrs	r1, r7
 800cc62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800cc66:	fa00 f306 	lsl.w	r3, r0, r6
 800cc6a:	fbb1 f8f9 	udiv	r8, r1, r9
 800cc6e:	0c20      	lsrs	r0, r4, #16
 800cc70:	fa1f fe8c 	uxth.w	lr, ip
 800cc74:	fb09 1118 	mls	r1, r9, r8, r1
 800cc78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800cc7c:	fb08 f00e 	mul.w	r0, r8, lr
 800cc80:	4288      	cmp	r0, r1
 800cc82:	fa02 f206 	lsl.w	r2, r2, r6
 800cc86:	d90b      	bls.n	800cca0 <__udivmoddi4+0x1b8>
 800cc88:	eb1c 0101 	adds.w	r1, ip, r1
 800cc8c:	f108 3aff 	add.w	sl, r8, #4294967295
 800cc90:	f080 8088 	bcs.w	800cda4 <__udivmoddi4+0x2bc>
 800cc94:	4288      	cmp	r0, r1
 800cc96:	f240 8085 	bls.w	800cda4 <__udivmoddi4+0x2bc>
 800cc9a:	f1a8 0802 	sub.w	r8, r8, #2
 800cc9e:	4461      	add	r1, ip
 800cca0:	1a09      	subs	r1, r1, r0
 800cca2:	b2a4      	uxth	r4, r4
 800cca4:	fbb1 f0f9 	udiv	r0, r1, r9
 800cca8:	fb09 1110 	mls	r1, r9, r0, r1
 800ccac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800ccb0:	fb00 fe0e 	mul.w	lr, r0, lr
 800ccb4:	458e      	cmp	lr, r1
 800ccb6:	d908      	bls.n	800ccca <__udivmoddi4+0x1e2>
 800ccb8:	eb1c 0101 	adds.w	r1, ip, r1
 800ccbc:	f100 34ff 	add.w	r4, r0, #4294967295
 800ccc0:	d26c      	bcs.n	800cd9c <__udivmoddi4+0x2b4>
 800ccc2:	458e      	cmp	lr, r1
 800ccc4:	d96a      	bls.n	800cd9c <__udivmoddi4+0x2b4>
 800ccc6:	3802      	subs	r0, #2
 800ccc8:	4461      	add	r1, ip
 800ccca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800ccce:	fba0 9402 	umull	r9, r4, r0, r2
 800ccd2:	eba1 010e 	sub.w	r1, r1, lr
 800ccd6:	42a1      	cmp	r1, r4
 800ccd8:	46c8      	mov	r8, r9
 800ccda:	46a6      	mov	lr, r4
 800ccdc:	d356      	bcc.n	800cd8c <__udivmoddi4+0x2a4>
 800ccde:	d053      	beq.n	800cd88 <__udivmoddi4+0x2a0>
 800cce0:	b15d      	cbz	r5, 800ccfa <__udivmoddi4+0x212>
 800cce2:	ebb3 0208 	subs.w	r2, r3, r8
 800cce6:	eb61 010e 	sbc.w	r1, r1, lr
 800ccea:	fa01 f707 	lsl.w	r7, r1, r7
 800ccee:	fa22 f306 	lsr.w	r3, r2, r6
 800ccf2:	40f1      	lsrs	r1, r6
 800ccf4:	431f      	orrs	r7, r3
 800ccf6:	e9c5 7100 	strd	r7, r1, [r5]
 800ccfa:	2600      	movs	r6, #0
 800ccfc:	4631      	mov	r1, r6
 800ccfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd02:	f1c2 0320 	rsb	r3, r2, #32
 800cd06:	40d8      	lsrs	r0, r3
 800cd08:	fa0c fc02 	lsl.w	ip, ip, r2
 800cd0c:	fa21 f303 	lsr.w	r3, r1, r3
 800cd10:	4091      	lsls	r1, r2
 800cd12:	4301      	orrs	r1, r0
 800cd14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800cd18:	fa1f fe8c 	uxth.w	lr, ip
 800cd1c:	fbb3 f0f7 	udiv	r0, r3, r7
 800cd20:	fb07 3610 	mls	r6, r7, r0, r3
 800cd24:	0c0b      	lsrs	r3, r1, #16
 800cd26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800cd2a:	fb00 f60e 	mul.w	r6, r0, lr
 800cd2e:	429e      	cmp	r6, r3
 800cd30:	fa04 f402 	lsl.w	r4, r4, r2
 800cd34:	d908      	bls.n	800cd48 <__udivmoddi4+0x260>
 800cd36:	eb1c 0303 	adds.w	r3, ip, r3
 800cd3a:	f100 38ff 	add.w	r8, r0, #4294967295
 800cd3e:	d22f      	bcs.n	800cda0 <__udivmoddi4+0x2b8>
 800cd40:	429e      	cmp	r6, r3
 800cd42:	d92d      	bls.n	800cda0 <__udivmoddi4+0x2b8>
 800cd44:	3802      	subs	r0, #2
 800cd46:	4463      	add	r3, ip
 800cd48:	1b9b      	subs	r3, r3, r6
 800cd4a:	b289      	uxth	r1, r1
 800cd4c:	fbb3 f6f7 	udiv	r6, r3, r7
 800cd50:	fb07 3316 	mls	r3, r7, r6, r3
 800cd54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800cd58:	fb06 f30e 	mul.w	r3, r6, lr
 800cd5c:	428b      	cmp	r3, r1
 800cd5e:	d908      	bls.n	800cd72 <__udivmoddi4+0x28a>
 800cd60:	eb1c 0101 	adds.w	r1, ip, r1
 800cd64:	f106 38ff 	add.w	r8, r6, #4294967295
 800cd68:	d216      	bcs.n	800cd98 <__udivmoddi4+0x2b0>
 800cd6a:	428b      	cmp	r3, r1
 800cd6c:	d914      	bls.n	800cd98 <__udivmoddi4+0x2b0>
 800cd6e:	3e02      	subs	r6, #2
 800cd70:	4461      	add	r1, ip
 800cd72:	1ac9      	subs	r1, r1, r3
 800cd74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800cd78:	e738      	b.n	800cbec <__udivmoddi4+0x104>
 800cd7a:	462e      	mov	r6, r5
 800cd7c:	4628      	mov	r0, r5
 800cd7e:	e705      	b.n	800cb8c <__udivmoddi4+0xa4>
 800cd80:	4606      	mov	r6, r0
 800cd82:	e6e3      	b.n	800cb4c <__udivmoddi4+0x64>
 800cd84:	4618      	mov	r0, r3
 800cd86:	e6f8      	b.n	800cb7a <__udivmoddi4+0x92>
 800cd88:	454b      	cmp	r3, r9
 800cd8a:	d2a9      	bcs.n	800cce0 <__udivmoddi4+0x1f8>
 800cd8c:	ebb9 0802 	subs.w	r8, r9, r2
 800cd90:	eb64 0e0c 	sbc.w	lr, r4, ip
 800cd94:	3801      	subs	r0, #1
 800cd96:	e7a3      	b.n	800cce0 <__udivmoddi4+0x1f8>
 800cd98:	4646      	mov	r6, r8
 800cd9a:	e7ea      	b.n	800cd72 <__udivmoddi4+0x28a>
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	e794      	b.n	800ccca <__udivmoddi4+0x1e2>
 800cda0:	4640      	mov	r0, r8
 800cda2:	e7d1      	b.n	800cd48 <__udivmoddi4+0x260>
 800cda4:	46d0      	mov	r8, sl
 800cda6:	e77b      	b.n	800cca0 <__udivmoddi4+0x1b8>
 800cda8:	3b02      	subs	r3, #2
 800cdaa:	4461      	add	r1, ip
 800cdac:	e732      	b.n	800cc14 <__udivmoddi4+0x12c>
 800cdae:	4630      	mov	r0, r6
 800cdb0:	e709      	b.n	800cbc6 <__udivmoddi4+0xde>
 800cdb2:	4464      	add	r4, ip
 800cdb4:	3802      	subs	r0, #2
 800cdb6:	e742      	b.n	800cc3e <__udivmoddi4+0x156>

0800cdb8 <__aeabi_idiv0>:
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop

0800cdbc <mySPISend>:
/**************************************************************************
 @brief     функция для отправки в SPI. + ожидание окончания передачи.
 @param    buff указатель на буфер отправки
 @param    buff_size размер буфера
 **************************************************************************/
void mySPISend(uint8_t *buff, uint16_t buff_size) {
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	807b      	strh	r3, [r7, #2]
	while (buff_size > 0) {
 800cdc8:	e010      	b.n	800cdec <mySPISend+0x30>
		SPI1->DR = *buff;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	781a      	ldrb	r2, [r3, #0]
 800cdce:	4b10      	ldr	r3, [pc, #64]	; (800ce10 <mySPISend+0x54>)
 800cdd0:	60da      	str	r2, [r3, #12]
		while (!READ_BIT(SPI1->SR, SPI_SR_TXE))
 800cdd2:	bf00      	nop
 800cdd4:	4b0e      	ldr	r3, [pc, #56]	; (800ce10 <mySPISend+0x54>)
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	f003 0302 	and.w	r3, r3, #2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d0f9      	beq.n	800cdd4 <mySPISend+0x18>
			;
		buff++;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	3301      	adds	r3, #1
 800cde4:	607b      	str	r3, [r7, #4]
		buff_size--;
 800cde6:	887b      	ldrh	r3, [r7, #2]
 800cde8:	3b01      	subs	r3, #1
 800cdea:	807b      	strh	r3, [r7, #2]
	while (buff_size > 0) {
 800cdec:	887b      	ldrh	r3, [r7, #2]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1eb      	bne.n	800cdca <mySPISend+0xe>
	}
	while (READ_BIT(SPI1->SR, SPI_SR_BSY))
 800cdf2:	bf00      	nop
 800cdf4:	4b06      	ldr	r3, [pc, #24]	; (800ce10 <mySPISend+0x54>)
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d1f9      	bne.n	800cdf4 <mySPISend+0x38>
		;
}
 800ce00:	bf00      	nop
 800ce02:	bf00      	nop
 800ce04:	370c      	adds	r7, #12
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
 800ce0e:	bf00      	nop
 800ce10:	40013000 	.word	0x40013000

0800ce14 <ILI9341_Select>:

/**************************************************************************
 @brief     drive pin CS to GND
 **************************************************************************/
void ILI9341_Select() {
 800ce14:	b480      	push	{r7}
 800ce16:	af00      	add	r7, sp, #0
	CS_RESET;
 800ce18:	4b05      	ldr	r3, [pc, #20]	; (800ce30 <ILI9341_Select+0x1c>)
 800ce1a:	699b      	ldr	r3, [r3, #24]
 800ce1c:	4a04      	ldr	r2, [pc, #16]	; (800ce30 <ILI9341_Select+0x1c>)
 800ce1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ce22:	6193      	str	r3, [r2, #24]
	//HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
}
 800ce24:	bf00      	nop
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	40020400 	.word	0x40020400

0800ce34 <ILI9341_Unselect>:

/**************************************************************************
 @brief     drive pin CS to UP
 **************************************************************************/
void ILI9341_Unselect() {
 800ce34:	b480      	push	{r7}
 800ce36:	af00      	add	r7, sp, #0
	CS_SET;
 800ce38:	4b05      	ldr	r3, [pc, #20]	; (800ce50 <ILI9341_Unselect+0x1c>)
 800ce3a:	699b      	ldr	r3, [r3, #24]
 800ce3c:	4a04      	ldr	r2, [pc, #16]	; (800ce50 <ILI9341_Unselect+0x1c>)
 800ce3e:	f043 0304 	orr.w	r3, r3, #4
 800ce42:	6193      	str	r3, [r2, #24]
	//HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
}
 800ce44:	bf00      	nop
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	40020400 	.word	0x40020400

0800ce54 <ILI9341_Reset>:

/**************************************************************************
 @brief     drive pin Reset
 **************************************************************************/
static void ILI9341_Reset() {
 800ce54:	b580      	push	{r7, lr}
 800ce56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 800ce58:	2200      	movs	r2, #0
 800ce5a:	2102      	movs	r1, #2
 800ce5c:	4806      	ldr	r0, [pc, #24]	; (800ce78 <ILI9341_Reset+0x24>)
 800ce5e:	f005 fc77 	bl	8012750 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800ce62:	2005      	movs	r0, #5
 800ce64:	f004 f9ac 	bl	80111c0 <HAL_Delay>
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 800ce68:	2201      	movs	r2, #1
 800ce6a:	2102      	movs	r1, #2
 800ce6c:	4802      	ldr	r0, [pc, #8]	; (800ce78 <ILI9341_Reset+0x24>)
 800ce6e:	f005 fc6f 	bl	8012750 <HAL_GPIO_WritePin>
}
 800ce72:	bf00      	nop
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	40020400 	.word	0x40020400

0800ce7c <ILI9341_WriteCommand>:

/**************************************************************************
 @brief     write comand to display
 @param    cmd number comand
 **************************************************************************/
static void ILI9341_WriteCommand(uint8_t cmd) {
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	71fb      	strb	r3, [r7, #7]
	DC_RESET;                      // данные или команда
 800ce86:	4b07      	ldr	r3, [pc, #28]	; (800cea4 <ILI9341_WriteCommand+0x28>)
 800ce88:	699b      	ldr	r3, [r3, #24]
 800ce8a:	4a06      	ldr	r2, [pc, #24]	; (800cea4 <ILI9341_WriteCommand+0x28>)
 800ce8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce90:	6193      	str	r3, [r2, #24]
	mySPISend(&cmd, 1);
 800ce92:	1dfb      	adds	r3, r7, #7
 800ce94:	2101      	movs	r1, #1
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff ff90 	bl	800cdbc <mySPISend>
}
 800ce9c:	bf00      	nop
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	40020400 	.word	0x40020400

0800cea8 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t *buff, size_t buff_size) {
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
	DC_SET;                        // данные или команда
 800ceb2:	4b11      	ldr	r3, [pc, #68]	; (800cef8 <ILI9341_WriteData+0x50>)
 800ceb4:	699b      	ldr	r3, [r3, #24]
 800ceb6:	4a10      	ldr	r2, [pc, #64]	; (800cef8 <ILI9341_WriteData+0x50>)
 800ceb8:	f043 0301 	orr.w	r3, r3, #1
 800cebc:	6193      	str	r3, [r2, #24]
	// split data in small chunks because HAL can't send more then 64K at once
	while (buff_size > 0) {
 800cebe:	e013      	b.n	800cee8 <ILI9341_WriteData+0x40>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cec6:	bf28      	it	cs
 800cec8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800cecc:	81fb      	strh	r3, [r7, #14]
		mySPISend(buff, chunk_size);
 800cece:	89fb      	ldrh	r3, [r7, #14]
 800ced0:	4619      	mov	r1, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7ff ff72 	bl	800cdbc <mySPISend>
		buff += chunk_size;
 800ced8:	89fb      	ldrh	r3, [r7, #14]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	4413      	add	r3, r2
 800cede:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800cee0:	89fb      	ldrh	r3, [r7, #14]
 800cee2:	683a      	ldr	r2, [r7, #0]
 800cee4:	1ad3      	subs	r3, r2, r3
 800cee6:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1e8      	bne.n	800cec0 <ILI9341_WriteData+0x18>
	}
}
 800ceee:	bf00      	nop
 800cef0:	bf00      	nop
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	40020400 	.word	0x40020400

0800cefc <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1,
		uint16_t y1) {
 800cefc:	b590      	push	{r4, r7, lr}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	4604      	mov	r4, r0
 800cf04:	4608      	mov	r0, r1
 800cf06:	4611      	mov	r1, r2
 800cf08:	461a      	mov	r2, r3
 800cf0a:	4623      	mov	r3, r4
 800cf0c:	80fb      	strh	r3, [r7, #6]
 800cf0e:	4603      	mov	r3, r0
 800cf10:	80bb      	strh	r3, [r7, #4]
 800cf12:	460b      	mov	r3, r1
 800cf14:	807b      	strh	r3, [r7, #2]
 800cf16:	4613      	mov	r3, r2
 800cf18:	803b      	strh	r3, [r7, #0]
	// column address set
	ILI9341_WriteCommand(0x2A); // CASET
 800cf1a:	202a      	movs	r0, #42	; 0x2a
 800cf1c:	f7ff ffae 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1
 800cf20:	88fb      	ldrh	r3, [r7, #6]
 800cf22:	0a1b      	lsrs	r3, r3, #8
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	733b      	strb	r3, [r7, #12]
 800cf2a:	88fb      	ldrh	r3, [r7, #6]
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	737b      	strb	r3, [r7, #13]
 800cf30:	887b      	ldrh	r3, [r7, #2]
 800cf32:	0a1b      	lsrs	r3, r3, #8
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	73bb      	strb	r3, [r7, #14]
 800cf3a:	887b      	ldrh	r3, [r7, #2]
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	73fb      	strb	r3, [r7, #15]
				& 0xFF };
		ILI9341_WriteData(data, sizeof(data));
 800cf40:	f107 030c 	add.w	r3, r7, #12
 800cf44:	2104      	movs	r1, #4
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff ffae 	bl	800cea8 <ILI9341_WriteData>
	}
	// row address set
	ILI9341_WriteCommand(0x2B); // RASET
 800cf4c:	202b      	movs	r0, #43	; 0x2b
 800cf4e:	f7ff ff95 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1
 800cf52:	88bb      	ldrh	r3, [r7, #4]
 800cf54:	0a1b      	lsrs	r3, r3, #8
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	723b      	strb	r3, [r7, #8]
 800cf5c:	88bb      	ldrh	r3, [r7, #4]
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	727b      	strb	r3, [r7, #9]
 800cf62:	883b      	ldrh	r3, [r7, #0]
 800cf64:	0a1b      	lsrs	r3, r3, #8
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	72bb      	strb	r3, [r7, #10]
 800cf6c:	883b      	ldrh	r3, [r7, #0]
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	72fb      	strb	r3, [r7, #11]
				& 0xFF };
		ILI9341_WriteData(data, sizeof(data));
 800cf72:	f107 0308 	add.w	r3, r7, #8
 800cf76:	2104      	movs	r1, #4
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7ff ff95 	bl	800cea8 <ILI9341_WriteData>
	}
	// write to RAM
	ILI9341_WriteCommand(0x2C); // RAMWR
 800cf7e:	202c      	movs	r0, #44	; 0x2c
 800cf80:	f7ff ff7c 	bl	800ce7c <ILI9341_WriteCommand>
}
 800cf84:	bf00      	nop
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd90      	pop	{r4, r7, pc}

0800cf8c <ILI9341_Init>:

void ILI9341_Init() {
 800cf8c:	b590      	push	{r4, r7, lr}
 800cf8e:	b09b      	sub	sp, #108	; 0x6c
 800cf90:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Led_Display_GPIO_Port, Led_Display_Pin, GPIO_PIN_SET);
 800cf92:	2201      	movs	r2, #1
 800cf94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cf98:	488f      	ldr	r0, [pc, #572]	; (800d1d8 <ILI9341_Init+0x24c>)
 800cf9a:	f005 fbd9 	bl	8012750 <HAL_GPIO_WritePin>
	ILI9341_Select();
 800cf9e:	f7ff ff39 	bl	800ce14 <ILI9341_Select>
	ILI9341_Reset();
 800cfa2:	f7ff ff57 	bl	800ce54 <ILI9341_Reset>
	// command list is based on https://github.com/martnak/STM32-ILI9341
	ILI9341_WriteCommand(0x01); // SOFTWARE RESET
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	f7ff ff68 	bl	800ce7c <ILI9341_WriteCommand>
	HAL_Delay(1000);
 800cfac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cfb0:	f004 f906 	bl	80111c0 <HAL_Delay>
	ILI9341_WriteCommand(0xCB); // POWER CONTROL A
 800cfb4:	20cb      	movs	r0, #203	; 0xcb
 800cfb6:	f7ff ff61 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800cfba:	4a88      	ldr	r2, [pc, #544]	; (800d1dc <ILI9341_Init+0x250>)
 800cfbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cfc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfc4:	6018      	str	r0, [r3, #0]
 800cfc6:	3304      	adds	r3, #4
 800cfc8:	7019      	strb	r1, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 800cfca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cfce:	2105      	movs	r1, #5
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff ff69 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xCF); // POWER CONTROL B
 800cfd6:	20cf      	movs	r0, #207	; 0xcf
 800cfd8:	f7ff ff50 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0xC1, 0x30 };
 800cfdc:	4a80      	ldr	r2, [pc, #512]	; (800d1e0 <ILI9341_Init+0x254>)
 800cfde:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cfe2:	6812      	ldr	r2, [r2, #0]
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	8019      	strh	r1, [r3, #0]
 800cfe8:	3302      	adds	r3, #2
 800cfea:	0c12      	lsrs	r2, r2, #16
 800cfec:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 800cfee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cff2:	2103      	movs	r1, #3
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7ff ff57 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE8); // DRIVER TIMING CONTROL A
 800cffa:	20e8      	movs	r0, #232	; 0xe8
 800cffc:	f7ff ff3e 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x85, 0x00, 0x78 };
 800d000:	4a78      	ldr	r2, [pc, #480]	; (800d1e4 <ILI9341_Init+0x258>)
 800d002:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d006:	6812      	ldr	r2, [r2, #0]
 800d008:	4611      	mov	r1, r2
 800d00a:	8019      	strh	r1, [r3, #0]
 800d00c:	3302      	adds	r3, #2
 800d00e:	0c12      	lsrs	r2, r2, #16
 800d010:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 800d012:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d016:	2103      	movs	r1, #3
 800d018:	4618      	mov	r0, r3
 800d01a:	f7ff ff45 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xEA); // DRIVER TIMING CONTROL B
 800d01e:	20ea      	movs	r0, #234	; 0xea
 800d020:	f7ff ff2c 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x00 };
 800d024:	2300      	movs	r3, #0
 800d026:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		ILI9341_WriteData(data, sizeof(data));
 800d02a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d02e:	2102      	movs	r1, #2
 800d030:	4618      	mov	r0, r3
 800d032:	f7ff ff39 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xED);  // POWER ON SEQUENCE CONTROL
 800d036:	20ed      	movs	r0, #237	; 0xed
 800d038:	f7ff ff20 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 800d03c:	4b6a      	ldr	r3, [pc, #424]	; (800d1e8 <ILI9341_Init+0x25c>)
 800d03e:	653b      	str	r3, [r7, #80]	; 0x50
		ILI9341_WriteData(data, sizeof(data));
 800d040:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d044:	2104      	movs	r1, #4
 800d046:	4618      	mov	r0, r3
 800d048:	f7ff ff2e 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xF7);  // PUMP RATIO CONTROL
 800d04c:	20f7      	movs	r0, #247	; 0xf7
 800d04e:	f7ff ff15 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x20 };
 800d052:	2320      	movs	r3, #32
 800d054:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		ILI9341_WriteData(data, sizeof(data));
 800d058:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d05c:	2101      	movs	r1, #1
 800d05e:	4618      	mov	r0, r3
 800d060:	f7ff ff22 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC0); // POWER CONTROL,VRH[5:0]
 800d064:	20c0      	movs	r0, #192	; 0xc0
 800d066:	f7ff ff09 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x23 };
 800d06a:	2323      	movs	r3, #35	; 0x23
 800d06c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		ILI9341_WriteData(data, sizeof(data));
 800d070:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d074:	2101      	movs	r1, #1
 800d076:	4618      	mov	r0, r3
 800d078:	f7ff ff16 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC1); // POWER CONTROL,SAP[2:0];BT[3:0]
 800d07c:	20c1      	movs	r0, #193	; 0xc1
 800d07e:	f7ff fefd 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x10 };
 800d082:	2310      	movs	r3, #16
 800d084:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		ILI9341_WriteData(data, sizeof(data));
 800d088:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d08c:	2101      	movs	r1, #1
 800d08e:	4618      	mov	r0, r3
 800d090:	f7ff ff0a 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC5); // VCM CONTROL
 800d094:	20c5      	movs	r0, #197	; 0xc5
 800d096:	f7ff fef1 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x3E, 0x28 };
 800d09a:	f642 033e 	movw	r3, #10302	; 0x283e
 800d09e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		ILI9341_WriteData(data, sizeof(data));
 800d0a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d0a6:	2102      	movs	r1, #2
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff fefd 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC7);  // VCM CONTROL 2
 800d0ae:	20c7      	movs	r0, #199	; 0xc7
 800d0b0:	f7ff fee4 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x86 };
 800d0b4:	2386      	movs	r3, #134	; 0x86
 800d0b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		ILI9341_WriteData(data, sizeof(data));
 800d0ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d0be:	2101      	movs	r1, #1
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7ff fef1 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x36); // MEMORY ACCESS CONTROL
 800d0c6:	2036      	movs	r0, #54	; 0x36
 800d0c8:	f7ff fed8 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x48 };
 800d0cc:	2348      	movs	r3, #72	; 0x48
 800d0ce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		ILI9341_WriteData(data, sizeof(data));
 800d0d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d0d6:	2101      	movs	r1, #1
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7ff fee5 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x3A); // PIXEL FORMAT
 800d0de:	203a      	movs	r0, #58	; 0x3a
 800d0e0:	f7ff fecc 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x55 };
 800d0e4:	2355      	movs	r3, #85	; 0x55
 800d0e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		ILI9341_WriteData(data, sizeof(data));
 800d0ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d0ee:	2101      	movs	r1, #1
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7ff fed9 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xB1); // FRAME RATIO CONTROL, STANDARD RGB COLOR
 800d0f6:	20b1      	movs	r0, #177	; 0xb1
 800d0f8:	f7ff fec0 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x18 };
 800d0fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d100:	863b      	strh	r3, [r7, #48]	; 0x30
		ILI9341_WriteData(data, sizeof(data));
 800d102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d106:	2102      	movs	r1, #2
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff fecd 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xB6); // DISPLAY FUNCTION CONTROL
 800d10e:	20b6      	movs	r0, #182	; 0xb6
 800d110:	f7ff feb4 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x08, 0x82, 0x27 };
 800d114:	4a35      	ldr	r2, [pc, #212]	; (800d1ec <ILI9341_Init+0x260>)
 800d116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d11a:	6812      	ldr	r2, [r2, #0]
 800d11c:	4611      	mov	r1, r2
 800d11e:	8019      	strh	r1, [r3, #0]
 800d120:	3302      	adds	r3, #2
 800d122:	0c12      	lsrs	r2, r2, #16
 800d124:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
 800d126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d12a:	2103      	movs	r1, #3
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7ff febb 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xF2); // 3GAMMA FUNCTION DISABLE
 800d132:	20f2      	movs	r0, #242	; 0xf2
 800d134:	f7ff fea2 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00 };
 800d138:	2300      	movs	r3, #0
 800d13a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		ILI9341_WriteData(data, sizeof(data));
 800d13e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d142:	2101      	movs	r1, #1
 800d144:	4618      	mov	r0, r3
 800d146:	f7ff feaf 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x26); // GAMMA CURVE SELECTED
 800d14a:	2026      	movs	r0, #38	; 0x26
 800d14c:	f7ff fe96 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x01 };
 800d150:	2301      	movs	r3, #1
 800d152:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		ILI9341_WriteData(data, sizeof(data));
 800d156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d15a:	2101      	movs	r1, #1
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7ff fea3 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE0); // POSITIVE GAMMA CORRECTION
 800d162:	20e0      	movs	r0, #224	; 0xe0
 800d164:	f7ff fe8a 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1, 0x37,
 800d168:	4b21      	ldr	r3, [pc, #132]	; (800d1f0 <ILI9341_Init+0x264>)
 800d16a:	f107 0414 	add.w	r4, r7, #20
 800d16e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d170:	c407      	stmia	r4!, {r0, r1, r2}
 800d172:	8023      	strh	r3, [r4, #0]
 800d174:	3402      	adds	r4, #2
 800d176:	0c1b      	lsrs	r3, r3, #16
 800d178:	7023      	strb	r3, [r4, #0]
				0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
		ILI9341_WriteData(data, sizeof(data));
 800d17a:	f107 0314 	add.w	r3, r7, #20
 800d17e:	210f      	movs	r1, #15
 800d180:	4618      	mov	r0, r3
 800d182:	f7ff fe91 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE1); // NEGATIVE GAMMA CORRECTION
 800d186:	20e1      	movs	r0, #225	; 0xe1
 800d188:	f7ff fe78 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48,
 800d18c:	4b19      	ldr	r3, [pc, #100]	; (800d1f4 <ILI9341_Init+0x268>)
 800d18e:	1d3c      	adds	r4, r7, #4
 800d190:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d192:	c407      	stmia	r4!, {r0, r1, r2}
 800d194:	8023      	strh	r3, [r4, #0]
 800d196:	3402      	adds	r4, #2
 800d198:	0c1b      	lsrs	r3, r3, #16
 800d19a:	7023      	strb	r3, [r4, #0]
				0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
		ILI9341_WriteData(data, sizeof(data));
 800d19c:	1d3b      	adds	r3, r7, #4
 800d19e:	210f      	movs	r1, #15
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7ff fe81 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x11); // EXIT SLEEP
 800d1a6:	2011      	movs	r0, #17
 800d1a8:	f7ff fe68 	bl	800ce7c <ILI9341_WriteCommand>
	HAL_Delay(120);
 800d1ac:	2078      	movs	r0, #120	; 0x78
 800d1ae:	f004 f807 	bl	80111c0 <HAL_Delay>
	ILI9341_WriteCommand(0x29); // TURN ON DISPLAY
 800d1b2:	2029      	movs	r0, #41	; 0x29
 800d1b4:	f7ff fe62 	bl	800ce7c <ILI9341_WriteCommand>
	ILI9341_WriteCommand(0x36); // MADCTL
 800d1b8:	2036      	movs	r0, #54	; 0x36
 800d1ba:	f7ff fe5f 	bl	800ce7c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { ILI9341_ROTATION };
 800d1be:	2328      	movs	r3, #40	; 0x28
 800d1c0:	703b      	strb	r3, [r7, #0]
		ILI9341_WriteData(data, sizeof(data));
 800d1c2:	463b      	mov	r3, r7
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff fe6e 	bl	800cea8 <ILI9341_WriteData>
	}
	ILI9341_Unselect();
 800d1cc:	f7ff fe32 	bl	800ce34 <ILI9341_Unselect>
}
 800d1d0:	bf00      	nop
 800d1d2:	376c      	adds	r7, #108	; 0x6c
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd90      	pop	{r4, r7, pc}
 800d1d8:	40020400 	.word	0x40020400
 800d1dc:	080170a8 	.word	0x080170a8
 800d1e0:	080170b0 	.word	0x080170b0
 800d1e4:	080170b4 	.word	0x080170b4
 800d1e8:	81120364 	.word	0x81120364
 800d1ec:	080170b8 	.word	0x080170b8
 800d1f0:	080170bc 	.word	0x080170bc
 800d1f4:	080170cc 	.word	0x080170cc

0800d1f8 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	4603      	mov	r3, r0
 800d200:	80fb      	strh	r3, [r7, #6]
 800d202:	460b      	mov	r3, r1
 800d204:	80bb      	strh	r3, [r7, #4]
 800d206:	4613      	mov	r3, r2
 800d208:	807b      	strh	r3, [r7, #2]
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800d20a:	88fb      	ldrh	r3, [r7, #6]
 800d20c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d210:	d21f      	bcs.n	800d252 <ILI9341_DrawPixel+0x5a>
 800d212:	88bb      	ldrh	r3, [r7, #4]
 800d214:	2bef      	cmp	r3, #239	; 0xef
 800d216:	d81c      	bhi.n	800d252 <ILI9341_DrawPixel+0x5a>
		return;
	ILI9341_Select();
 800d218:	f7ff fdfc 	bl	800ce14 <ILI9341_Select>

	ILI9341_SetAddressWindow(x, y, x + 1, y + 1);
 800d21c:	88fb      	ldrh	r3, [r7, #6]
 800d21e:	3301      	adds	r3, #1
 800d220:	b29a      	uxth	r2, r3
 800d222:	88bb      	ldrh	r3, [r7, #4]
 800d224:	3301      	adds	r3, #1
 800d226:	b29b      	uxth	r3, r3
 800d228:	88b9      	ldrh	r1, [r7, #4]
 800d22a:	88f8      	ldrh	r0, [r7, #6]
 800d22c:	f7ff fe66 	bl	800cefc <ILI9341_SetAddressWindow>
	uint8_t data[] = { color >> 8, color & 0xFF };
 800d230:	887b      	ldrh	r3, [r7, #2]
 800d232:	0a1b      	lsrs	r3, r3, #8
 800d234:	b29b      	uxth	r3, r3
 800d236:	b2db      	uxtb	r3, r3
 800d238:	733b      	strb	r3, [r7, #12]
 800d23a:	887b      	ldrh	r3, [r7, #2]
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	737b      	strb	r3, [r7, #13]
	ILI9341_WriteData(data, sizeof(data));
 800d240:	f107 030c 	add.w	r3, r7, #12
 800d244:	2102      	movs	r1, #2
 800d246:	4618      	mov	r0, r3
 800d248:	f7ff fe2e 	bl	800cea8 <ILI9341_WriteData>

	ILI9341_Unselect();
 800d24c:	f7ff fdf2 	bl	800ce34 <ILI9341_Unselect>
 800d250:	e000      	b.n	800d254 <ILI9341_DrawPixel+0x5c>
		return;
 800d252:	bf00      	nop
}
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
	...

0800d25c <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t color) {
 800d25c:	b590      	push	{r4, r7, lr}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	4604      	mov	r4, r0
 800d264:	4608      	mov	r0, r1
 800d266:	4611      	mov	r1, r2
 800d268:	461a      	mov	r2, r3
 800d26a:	4623      	mov	r3, r4
 800d26c:	80fb      	strh	r3, [r7, #6]
 800d26e:	4603      	mov	r3, r0
 800d270:	80bb      	strh	r3, [r7, #4]
 800d272:	460b      	mov	r3, r1
 800d274:	807b      	strh	r3, [r7, #2]
 800d276:	4613      	mov	r3, r2
 800d278:	803b      	strh	r3, [r7, #0]
	// clipping
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800d27a:	88fb      	ldrh	r3, [r7, #6]
 800d27c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d280:	d250      	bcs.n	800d324 <ILI9341_FillRectangle+0xc8>
 800d282:	88bb      	ldrh	r3, [r7, #4]
 800d284:	2bef      	cmp	r3, #239	; 0xef
 800d286:	d84d      	bhi.n	800d324 <ILI9341_FillRectangle+0xc8>
		return;
	if ((x + w - 1) >= ILI9341_WIDTH)
 800d288:	88fa      	ldrh	r2, [r7, #6]
 800d28a:	887b      	ldrh	r3, [r7, #2]
 800d28c:	4413      	add	r3, r2
 800d28e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d292:	dd03      	ble.n	800d29c <ILI9341_FillRectangle+0x40>
		w = ILI9341_WIDTH - x;
 800d294:	88fb      	ldrh	r3, [r7, #6]
 800d296:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800d29a:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= ILI9341_HEIGHT)
 800d29c:	88ba      	ldrh	r2, [r7, #4]
 800d29e:	883b      	ldrh	r3, [r7, #0]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	2bf0      	cmp	r3, #240	; 0xf0
 800d2a4:	dd03      	ble.n	800d2ae <ILI9341_FillRectangle+0x52>
		h = ILI9341_HEIGHT - y;
 800d2a6:	88bb      	ldrh	r3, [r7, #4]
 800d2a8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800d2ac:	803b      	strh	r3, [r7, #0]

	ILI9341_Select();
 800d2ae:	f7ff fdb1 	bl	800ce14 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800d2b2:	88fa      	ldrh	r2, [r7, #6]
 800d2b4:	887b      	ldrh	r3, [r7, #2]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	b29c      	uxth	r4, r3
 800d2be:	88ba      	ldrh	r2, [r7, #4]
 800d2c0:	883b      	ldrh	r3, [r7, #0]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	88b9      	ldrh	r1, [r7, #4]
 800d2cc:	88f8      	ldrh	r0, [r7, #6]
 800d2ce:	4622      	mov	r2, r4
 800d2d0:	f7ff fe14 	bl	800cefc <ILI9341_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 800d2d4:	8c3b      	ldrh	r3, [r7, #32]
 800d2d6:	0a1b      	lsrs	r3, r3, #8
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	733b      	strb	r3, [r7, #12]
 800d2de:	8c3b      	ldrh	r3, [r7, #32]
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	2101      	movs	r1, #1
 800d2e8:	4810      	ldr	r0, [pc, #64]	; (800d32c <ILI9341_FillRectangle+0xd0>)
 800d2ea:	f005 fa31 	bl	8012750 <HAL_GPIO_WritePin>
	for (y = h; y > 0; y--) {
 800d2ee:	883b      	ldrh	r3, [r7, #0]
 800d2f0:	80bb      	strh	r3, [r7, #4]
 800d2f2:	e011      	b.n	800d318 <ILI9341_FillRectangle+0xbc>
		for (x = w; x > 0; x--) {
 800d2f4:	887b      	ldrh	r3, [r7, #2]
 800d2f6:	80fb      	strh	r3, [r7, #6]
 800d2f8:	e008      	b.n	800d30c <ILI9341_FillRectangle+0xb0>
			mySPISend(data, sizeof(data));
 800d2fa:	f107 030c 	add.w	r3, r7, #12
 800d2fe:	2102      	movs	r1, #2
 800d300:	4618      	mov	r0, r3
 800d302:	f7ff fd5b 	bl	800cdbc <mySPISend>
		for (x = w; x > 0; x--) {
 800d306:	88fb      	ldrh	r3, [r7, #6]
 800d308:	3b01      	subs	r3, #1
 800d30a:	80fb      	strh	r3, [r7, #6]
 800d30c:	88fb      	ldrh	r3, [r7, #6]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1f3      	bne.n	800d2fa <ILI9341_FillRectangle+0x9e>
	for (y = h; y > 0; y--) {
 800d312:	88bb      	ldrh	r3, [r7, #4]
 800d314:	3b01      	subs	r3, #1
 800d316:	80bb      	strh	r3, [r7, #4]
 800d318:	88bb      	ldrh	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1ea      	bne.n	800d2f4 <ILI9341_FillRectangle+0x98>
		}
	}

	ILI9341_Unselect();
 800d31e:	f7ff fd89 	bl	800ce34 <ILI9341_Unselect>
 800d322:	e000      	b.n	800d326 <ILI9341_FillRectangle+0xca>
		return;
 800d324:	bf00      	nop
}
 800d326:	3714      	adds	r7, #20
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd90      	pop	{r4, r7, pc}
 800d32c:	40020400 	.word	0x40020400

0800d330 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af02      	add	r7, sp, #8
 800d336:	4603      	mov	r3, r0
 800d338:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 800d33a:	88fb      	ldrh	r3, [r7, #6]
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	23f0      	movs	r3, #240	; 0xf0
 800d340:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d344:	2100      	movs	r1, #0
 800d346:	2000      	movs	r0, #0
 800d348:	f7ff ff88 	bl	800d25c <ILI9341_FillRectangle>
}
 800d34c:	bf00      	nop
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <ILI9341_WriteMyChar>:

static void ILI9341_WriteMyChar(uint16_t x, uint16_t y, char ch, uint16_t color,
		uint16_t bgcolor) {
 800d354:	b590      	push	{r4, r7, lr}
 800d356:	b089      	sub	sp, #36	; 0x24
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4604      	mov	r4, r0
 800d35c:	4608      	mov	r0, r1
 800d35e:	4611      	mov	r1, r2
 800d360:	461a      	mov	r2, r3
 800d362:	4623      	mov	r3, r4
 800d364:	80fb      	strh	r3, [r7, #6]
 800d366:	4603      	mov	r3, r0
 800d368:	80bb      	strh	r3, [r7, #4]
 800d36a:	460b      	mov	r3, r1
 800d36c:	70fb      	strb	r3, [r7, #3]
 800d36e:	4613      	mov	r3, r2
 800d370:	803b      	strh	r3, [r7, #0]
	uint16_t i, j, value;
	uint32_t devider, b;

	ILI9341_SetAddressWindow(x, y,
			x + Font24x36_array[(ch - 32)].image->width - 1,
 800d372:	78fb      	ldrb	r3, [r7, #3]
 800d374:	3b20      	subs	r3, #32
 800d376:	4a71      	ldr	r2, [pc, #452]	; (800d53c <ILI9341_WriteMyChar+0x1e8>)
 800d378:	00db      	lsls	r3, r3, #3
 800d37a:	4413      	add	r3, r2
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	889a      	ldrh	r2, [r3, #4]
 800d380:	88fb      	ldrh	r3, [r7, #6]
 800d382:	4413      	add	r3, r2
 800d384:	b29b      	uxth	r3, r3
	ILI9341_SetAddressWindow(x, y,
 800d386:	3b01      	subs	r3, #1
 800d388:	b29c      	uxth	r4, r3
			y + Font24x36_array[(ch - 32)].image->height - 1);
 800d38a:	78fb      	ldrb	r3, [r7, #3]
 800d38c:	3b20      	subs	r3, #32
 800d38e:	4a6b      	ldr	r2, [pc, #428]	; (800d53c <ILI9341_WriteMyChar+0x1e8>)
 800d390:	00db      	lsls	r3, r3, #3
 800d392:	4413      	add	r3, r2
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	88da      	ldrh	r2, [r3, #6]
 800d398:	88bb      	ldrh	r3, [r7, #4]
 800d39a:	4413      	add	r3, r2
 800d39c:	b29b      	uxth	r3, r3
	ILI9341_SetAddressWindow(x, y,
 800d39e:	3b01      	subs	r3, #1
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	88b9      	ldrh	r1, [r7, #4]
 800d3a4:	88f8      	ldrh	r0, [r7, #6]
 800d3a6:	4622      	mov	r2, r4
 800d3a8:	f7ff fda8 	bl	800cefc <ILI9341_SetAddressWindow>
	value = 1;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	837b      	strh	r3, [r7, #26]
	devider = 0x80;
 800d3b0:	2380      	movs	r3, #128	; 0x80
 800d3b2:	617b      	str	r3, [r7, #20]
	if ((Font24x36_array[(ch - 32)].image->width) > 8) {
 800d3b4:	78fb      	ldrb	r3, [r7, #3]
 800d3b6:	3b20      	subs	r3, #32
 800d3b8:	4a60      	ldr	r2, [pc, #384]	; (800d53c <ILI9341_WriteMyChar+0x1e8>)
 800d3ba:	00db      	lsls	r3, r3, #3
 800d3bc:	4413      	add	r3, r2
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	889b      	ldrh	r3, [r3, #4]
 800d3c2:	2b08      	cmp	r3, #8
 800d3c4:	d904      	bls.n	800d3d0 <ILI9341_WriteMyChar+0x7c>
		value = 2;
 800d3c6:	2302      	movs	r3, #2
 800d3c8:	837b      	strh	r3, [r7, #26]
		devider = 0x8000;
 800d3ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3ce:	617b      	str	r3, [r7, #20]
	}
	if ((Font24x36_array[(ch - 32)].image->width) > 16) {
 800d3d0:	78fb      	ldrb	r3, [r7, #3]
 800d3d2:	3b20      	subs	r3, #32
 800d3d4:	4a59      	ldr	r2, [pc, #356]	; (800d53c <ILI9341_WriteMyChar+0x1e8>)
 800d3d6:	00db      	lsls	r3, r3, #3
 800d3d8:	4413      	add	r3, r2
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	889b      	ldrh	r3, [r3, #4]
 800d3de:	2b10      	cmp	r3, #16
 800d3e0:	d904      	bls.n	800d3ec <ILI9341_WriteMyChar+0x98>
		value = 3;
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	837b      	strh	r3, [r7, #26]
		devider = 0x800000;
 800d3e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d3ea:	617b      	str	r3, [r7, #20]
	}
	if ((Font24x36_array[(ch - 32)].image->width) > 24) {
 800d3ec:	78fb      	ldrb	r3, [r7, #3]
 800d3ee:	3b20      	subs	r3, #32
 800d3f0:	4a52      	ldr	r2, [pc, #328]	; (800d53c <ILI9341_WriteMyChar+0x1e8>)
 800d3f2:	00db      	lsls	r3, r3, #3
 800d3f4:	4413      	add	r3, r2
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	889b      	ldrh	r3, [r3, #4]
 800d3fa:	2b18      	cmp	r3, #24
 800d3fc:	d904      	bls.n	800d408 <ILI9341_WriteMyChar+0xb4>
		value = 4;
 800d3fe:	2304      	movs	r3, #4
 800d400:	837b      	strh	r3, [r7, #26]
		devider = 0x80000000;
 800d402:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d406:	617b      	str	r3, [r7, #20]
	}
	for (i = 0; i < (Font24x36_array[(ch - 32)].image->height) * value; i +=
 800d408:	2300      	movs	r3, #0
 800d40a:	83fb      	strh	r3, [r7, #30]
 800d40c:	e081      	b.n	800d512 <ILI9341_WriteMyChar+0x1be>
			value) {
		b = Font24x36_array[(ch - 32)].image->data[i];
 800d40e:	78fb      	ldrb	r3, [r7, #3]
 800d410:	3b20      	subs	r3, #32
 800d412:	4a4a      	ldr	r2, [pc, #296]	; (800d53c <ILI9341_WriteMyChar+0x1e8>)
 800d414:	00db      	lsls	r3, r3, #3
 800d416:	4413      	add	r3, r2
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	8bfb      	ldrh	r3, [r7, #30]
 800d41e:	4413      	add	r3, r2
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	613b      	str	r3, [r7, #16]
		if (value >= 2) {
 800d424:	8b7b      	ldrh	r3, [r7, #26]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d911      	bls.n	800d44e <ILI9341_WriteMyChar+0xfa>
			b = b << 8;
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	021b      	lsls	r3, r3, #8
 800d42e:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 1];
 800d430:	78fb      	ldrb	r3, [r7, #3]
 800d432:	3b20      	subs	r3, #32
 800d434:	4a41      	ldr	r2, [pc, #260]	; (800d53c <ILI9341_WriteMyChar+0x1e8>)
 800d436:	00db      	lsls	r3, r3, #3
 800d438:	4413      	add	r3, r2
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	8bfb      	ldrh	r3, [r7, #30]
 800d440:	3301      	adds	r3, #1
 800d442:	4413      	add	r3, r2
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	461a      	mov	r2, r3
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	4313      	orrs	r3, r2
 800d44c:	613b      	str	r3, [r7, #16]
		}
		if (value >= 3) {
 800d44e:	8b7b      	ldrh	r3, [r7, #26]
 800d450:	2b02      	cmp	r3, #2
 800d452:	d911      	bls.n	800d478 <ILI9341_WriteMyChar+0x124>
			b = b << 8;
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	021b      	lsls	r3, r3, #8
 800d458:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 2];
 800d45a:	78fb      	ldrb	r3, [r7, #3]
 800d45c:	3b20      	subs	r3, #32
 800d45e:	4a37      	ldr	r2, [pc, #220]	; (800d53c <ILI9341_WriteMyChar+0x1e8>)
 800d460:	00db      	lsls	r3, r3, #3
 800d462:	4413      	add	r3, r2
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	8bfb      	ldrh	r3, [r7, #30]
 800d46a:	3302      	adds	r3, #2
 800d46c:	4413      	add	r3, r2
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	461a      	mov	r2, r3
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	4313      	orrs	r3, r2
 800d476:	613b      	str	r3, [r7, #16]
		}
		if (value >= 4) {
 800d478:	8b7b      	ldrh	r3, [r7, #26]
 800d47a:	2b03      	cmp	r3, #3
 800d47c:	d911      	bls.n	800d4a2 <ILI9341_WriteMyChar+0x14e>
			b = b << 8;
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	021b      	lsls	r3, r3, #8
 800d482:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 3];
 800d484:	78fb      	ldrb	r3, [r7, #3]
 800d486:	3b20      	subs	r3, #32
 800d488:	4a2c      	ldr	r2, [pc, #176]	; (800d53c <ILI9341_WriteMyChar+0x1e8>)
 800d48a:	00db      	lsls	r3, r3, #3
 800d48c:	4413      	add	r3, r2
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	8bfb      	ldrh	r3, [r7, #30]
 800d494:	3303      	adds	r3, #3
 800d496:	4413      	add	r3, r2
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	461a      	mov	r2, r3
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	613b      	str	r3, [r7, #16]
		}
		for (j = 0; j < Font24x36_array[(ch - 32)].image->width; j++) {
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	83bb      	strh	r3, [r7, #28]
 800d4a6:	e026      	b.n	800d4f6 <ILI9341_WriteMyChar+0x1a2>
			if ((b << j) & devider) {
 800d4a8:	8bbb      	ldrh	r3, [r7, #28]
 800d4aa:	693a      	ldr	r2, [r7, #16]
 800d4ac:	409a      	lsls	r2, r3
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00e      	beq.n	800d4d4 <ILI9341_WriteMyChar+0x180>
				uint8_t data[] = { color >> 8, color & 0xFF };
 800d4b6:	883b      	ldrh	r3, [r7, #0]
 800d4b8:	0a1b      	lsrs	r3, r3, #8
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	733b      	strb	r3, [r7, #12]
 800d4c0:	883b      	ldrh	r3, [r7, #0]
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	737b      	strb	r3, [r7, #13]
				ILI9341_WriteData(data, sizeof(data));
 800d4c6:	f107 030c 	add.w	r3, r7, #12
 800d4ca:	2102      	movs	r1, #2
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fceb 	bl	800cea8 <ILI9341_WriteData>
 800d4d2:	e00d      	b.n	800d4f0 <ILI9341_WriteMyChar+0x19c>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800d4d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d4d6:	0a1b      	lsrs	r3, r3, #8
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	723b      	strb	r3, [r7, #8]
 800d4de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	727b      	strb	r3, [r7, #9]
				ILI9341_WriteData(data, sizeof(data));
 800d4e4:	f107 0308 	add.w	r3, r7, #8
 800d4e8:	2102      	movs	r1, #2
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7ff fcdc 	bl	800cea8 <ILI9341_WriteData>
		for (j = 0; j < Font24x36_array[(ch - 32)].image->width; j++) {
 800d4f0:	8bbb      	ldrh	r3, [r7, #28]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	83bb      	strh	r3, [r7, #28]
 800d4f6:	78fb      	ldrb	r3, [r7, #3]
 800d4f8:	3b20      	subs	r3, #32
 800d4fa:	4a10      	ldr	r2, [pc, #64]	; (800d53c <ILI9341_WriteMyChar+0x1e8>)
 800d4fc:	00db      	lsls	r3, r3, #3
 800d4fe:	4413      	add	r3, r2
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	889b      	ldrh	r3, [r3, #4]
 800d504:	8bba      	ldrh	r2, [r7, #28]
 800d506:	429a      	cmp	r2, r3
 800d508:	d3ce      	bcc.n	800d4a8 <ILI9341_WriteMyChar+0x154>
	for (i = 0; i < (Font24x36_array[(ch - 32)].image->height) * value; i +=
 800d50a:	8bfa      	ldrh	r2, [r7, #30]
 800d50c:	8b7b      	ldrh	r3, [r7, #26]
 800d50e:	4413      	add	r3, r2
 800d510:	83fb      	strh	r3, [r7, #30]
 800d512:	8bfa      	ldrh	r2, [r7, #30]
 800d514:	78fb      	ldrb	r3, [r7, #3]
 800d516:	3b20      	subs	r3, #32
 800d518:	4908      	ldr	r1, [pc, #32]	; (800d53c <ILI9341_WriteMyChar+0x1e8>)
 800d51a:	00db      	lsls	r3, r3, #3
 800d51c:	440b      	add	r3, r1
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	88db      	ldrh	r3, [r3, #6]
 800d522:	4619      	mov	r1, r3
 800d524:	8b7b      	ldrh	r3, [r7, #26]
 800d526:	fb01 f303 	mul.w	r3, r1, r3
 800d52a:	429a      	cmp	r2, r3
 800d52c:	f6ff af6f 	blt.w	800d40e <ILI9341_WriteMyChar+0xba>
			}
		}
	}
}
 800d530:	bf00      	nop
 800d532:	bf00      	nop
 800d534:	3724      	adds	r7, #36	; 0x24
 800d536:	46bd      	mov	sp, r7
 800d538:	bd90      	pop	{r4, r7, pc}
 800d53a:	bf00      	nop
 800d53c:	08020770 	.word	0x08020770

0800d540 <ILI9341_WriteMyString>:

void ILI9341_WriteMyString(uint16_t x, uint16_t y, const char *str,
		uint16_t color, uint16_t bgcolor) {
 800d540:	b590      	push	{r4, r7, lr}
 800d542:	b087      	sub	sp, #28
 800d544:	af02      	add	r7, sp, #8
 800d546:	60ba      	str	r2, [r7, #8]
 800d548:	461a      	mov	r2, r3
 800d54a:	4603      	mov	r3, r0
 800d54c:	81fb      	strh	r3, [r7, #14]
 800d54e:	460b      	mov	r3, r1
 800d550:	81bb      	strh	r3, [r7, #12]
 800d552:	4613      	mov	r3, r2
 800d554:	80fb      	strh	r3, [r7, #6]
	ILI9341_Select();
 800d556:	f7ff fc5d 	bl	800ce14 <ILI9341_Select>
	while (*str) {
 800d55a:	e045      	b.n	800d5e8 <ILI9341_WriteMyString+0xa8>
		if (x + Font24x36_array[(*str - 32)].image->width >= ILI9341_WIDTH) {
 800d55c:	89fa      	ldrh	r2, [r7, #14]
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	3b20      	subs	r3, #32
 800d564:	4926      	ldr	r1, [pc, #152]	; (800d600 <ILI9341_WriteMyString+0xc0>)
 800d566:	00db      	lsls	r3, r3, #3
 800d568:	440b      	add	r3, r1
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	889b      	ldrh	r3, [r3, #4]
 800d56e:	4413      	add	r3, r2
 800d570:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d574:	db20      	blt.n	800d5b8 <ILI9341_WriteMyString+0x78>
			x = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	81fb      	strh	r3, [r7, #14]
			y += Font24x36_array[(*str - 32)].image->height;
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	3b20      	subs	r3, #32
 800d580:	4a1f      	ldr	r2, [pc, #124]	; (800d600 <ILI9341_WriteMyString+0xc0>)
 800d582:	00db      	lsls	r3, r3, #3
 800d584:	4413      	add	r3, r2
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	88da      	ldrh	r2, [r3, #6]
 800d58a:	89bb      	ldrh	r3, [r7, #12]
 800d58c:	4413      	add	r3, r2
 800d58e:	81bb      	strh	r3, [r7, #12]
			if (y + Font24x36_array[(*str - 32)].image->height >= ILI9341_HEIGHT) {
 800d590:	89ba      	ldrh	r2, [r7, #12]
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	3b20      	subs	r3, #32
 800d598:	4919      	ldr	r1, [pc, #100]	; (800d600 <ILI9341_WriteMyString+0xc0>)
 800d59a:	00db      	lsls	r3, r3, #3
 800d59c:	440b      	add	r3, r1
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	88db      	ldrh	r3, [r3, #6]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	2bef      	cmp	r3, #239	; 0xef
 800d5a6:	dc24      	bgt.n	800d5f2 <ILI9341_WriteMyString+0xb2>
				break;
			}
			if (*str == ' ') {
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b20      	cmp	r3, #32
 800d5ae:	d103      	bne.n	800d5b8 <ILI9341_WriteMyString+0x78>
				// skip spaces in the beginning of the new line
				str++;
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	60bb      	str	r3, [r7, #8]
				continue;
 800d5b6:	e017      	b.n	800d5e8 <ILI9341_WriteMyString+0xa8>
			}
		}
		ILI9341_WriteMyChar(x, y, *str, color, bgcolor);
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	781a      	ldrb	r2, [r3, #0]
 800d5bc:	88fc      	ldrh	r4, [r7, #6]
 800d5be:	89b9      	ldrh	r1, [r7, #12]
 800d5c0:	89f8      	ldrh	r0, [r7, #14]
 800d5c2:	8c3b      	ldrh	r3, [r7, #32]
 800d5c4:	9300      	str	r3, [sp, #0]
 800d5c6:	4623      	mov	r3, r4
 800d5c8:	f7ff fec4 	bl	800d354 <ILI9341_WriteMyChar>
		x += Font24x36_array[(*str - 32)].image->width;
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	3b20      	subs	r3, #32
 800d5d2:	4a0b      	ldr	r2, [pc, #44]	; (800d600 <ILI9341_WriteMyString+0xc0>)
 800d5d4:	00db      	lsls	r3, r3, #3
 800d5d6:	4413      	add	r3, r2
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	889a      	ldrh	r2, [r3, #4]
 800d5dc:	89fb      	ldrh	r3, [r7, #14]
 800d5de:	4413      	add	r3, r2
 800d5e0:	81fb      	strh	r3, [r7, #14]
		str++;
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	60bb      	str	r3, [r7, #8]
	while (*str) {
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1b5      	bne.n	800d55c <ILI9341_WriteMyString+0x1c>
 800d5f0:	e000      	b.n	800d5f4 <ILI9341_WriteMyString+0xb4>
				break;
 800d5f2:	bf00      	nop
	}
	ILI9341_Unselect();
 800d5f4:	f7ff fc1e 	bl	800ce34 <ILI9341_Unselect>
}
 800d5f8:	bf00      	nop
 800d5fa:	3714      	adds	r7, #20
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd90      	pop	{r4, r7, pc}
 800d600:	08020770 	.word	0x08020770

0800d604 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font,
		uint16_t color, uint16_t bgcolor) {
 800d604:	b082      	sub	sp, #8
 800d606:	b590      	push	{r4, r7, lr}
 800d608:	b089      	sub	sp, #36	; 0x24
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	637b      	str	r3, [r7, #52]	; 0x34
 800d60e:	4603      	mov	r3, r0
 800d610:	80fb      	strh	r3, [r7, #6]
 800d612:	460b      	mov	r3, r1
 800d614:	80bb      	strh	r3, [r7, #4]
 800d616:	4613      	mov	r3, r2
 800d618:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ILI9341_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 800d61a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d61e:	b29a      	uxth	r2, r3
 800d620:	88fb      	ldrh	r3, [r7, #6]
 800d622:	4413      	add	r3, r2
 800d624:	b29b      	uxth	r3, r3
 800d626:	3b01      	subs	r3, #1
 800d628:	b29c      	uxth	r4, r3
 800d62a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d62e:	b29a      	uxth	r2, r3
 800d630:	88bb      	ldrh	r3, [r7, #4]
 800d632:	4413      	add	r3, r2
 800d634:	b29b      	uxth	r3, r3
 800d636:	3b01      	subs	r3, #1
 800d638:	b29b      	uxth	r3, r3
 800d63a:	88b9      	ldrh	r1, [r7, #4]
 800d63c:	88f8      	ldrh	r0, [r7, #6]
 800d63e:	4622      	mov	r2, r4
 800d640:	f7ff fc5c 	bl	800cefc <ILI9341_SetAddressWindow>
	for (i = 0; i < font.height; i++) {
 800d644:	2300      	movs	r3, #0
 800d646:	61fb      	str	r3, [r7, #28]
 800d648:	e043      	b.n	800d6d2 <ILI9341_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 800d64a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d64c:	78fb      	ldrb	r3, [r7, #3]
 800d64e:	3b20      	subs	r3, #32
 800d650:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800d654:	fb01 f303 	mul.w	r3, r1, r3
 800d658:	4619      	mov	r1, r3
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	440b      	add	r3, r1
 800d65e:	005b      	lsls	r3, r3, #1
 800d660:	4413      	add	r3, r2
 800d662:	881b      	ldrh	r3, [r3, #0]
 800d664:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800d666:	2300      	movs	r3, #0
 800d668:	61bb      	str	r3, [r7, #24]
 800d66a:	e029      	b.n	800d6c0 <ILI9341_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 800d66c:	697a      	ldr	r2, [r7, #20]
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	fa02 f303 	lsl.w	r3, r2, r3
 800d674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d00e      	beq.n	800d69a <ILI9341_WriteChar+0x96>
				uint8_t data[] = { color >> 8, color & 0xFF };
 800d67c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d67e:	0a1b      	lsrs	r3, r3, #8
 800d680:	b29b      	uxth	r3, r3
 800d682:	b2db      	uxtb	r3, r3
 800d684:	743b      	strb	r3, [r7, #16]
 800d686:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d688:	b2db      	uxtb	r3, r3
 800d68a:	747b      	strb	r3, [r7, #17]
				ILI9341_WriteData(data, sizeof(data));
 800d68c:	f107 0310 	add.w	r3, r7, #16
 800d690:	2102      	movs	r1, #2
 800d692:	4618      	mov	r0, r3
 800d694:	f7ff fc08 	bl	800cea8 <ILI9341_WriteData>
 800d698:	e00f      	b.n	800d6ba <ILI9341_WriteChar+0xb6>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800d69a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d69e:	0a1b      	lsrs	r3, r3, #8
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	733b      	strb	r3, [r7, #12]
 800d6a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	737b      	strb	r3, [r7, #13]
				ILI9341_WriteData(data, sizeof(data));
 800d6ae:	f107 030c 	add.w	r3, r7, #12
 800d6b2:	2102      	movs	r1, #2
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7ff fbf7 	bl	800cea8 <ILI9341_WriteData>
		for (j = 0; j < font.width; j++) {
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	61bb      	str	r3, [r7, #24]
 800d6c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d3cf      	bcc.n	800d66c <ILI9341_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	61fb      	str	r3, [r7, #28]
 800d6d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d3b5      	bcc.n	800d64a <ILI9341_WriteChar+0x46>
			}
		}
	}
}
 800d6de:	bf00      	nop
 800d6e0:	bf00      	nop
 800d6e2:	3724      	adds	r7, #36	; 0x24
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800d6ea:	b002      	add	sp, #8
 800d6ec:	4770      	bx	lr

0800d6ee <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font,
		uint16_t color, uint16_t bgcolor) {
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b086      	sub	sp, #24
 800d6f4:	af04      	add	r7, sp, #16
 800d6f6:	603a      	str	r2, [r7, #0]
 800d6f8:	617b      	str	r3, [r7, #20]
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	80fb      	strh	r3, [r7, #6]
 800d6fe:	460b      	mov	r3, r1
 800d700:	80bb      	strh	r3, [r7, #4]
	ILI9341_Select();
 800d702:	f7ff fb87 	bl	800ce14 <ILI9341_Select>

	while (*str) {
 800d706:	e02e      	b.n	800d766 <ILI9341_WriteString+0x78>
		if (x + font.width >= ILI9341_WIDTH) {
 800d708:	88fb      	ldrh	r3, [r7, #6]
 800d70a:	7d3a      	ldrb	r2, [r7, #20]
 800d70c:	4413      	add	r3, r2
 800d70e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d712:	db13      	blt.n	800d73c <ILI9341_WriteString+0x4e>
			x = 0;
 800d714:	2300      	movs	r3, #0
 800d716:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800d718:	7d7b      	ldrb	r3, [r7, #21]
 800d71a:	b29a      	uxth	r2, r3
 800d71c:	88bb      	ldrh	r3, [r7, #4]
 800d71e:	4413      	add	r3, r2
 800d720:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ILI9341_HEIGHT) {
 800d722:	88bb      	ldrh	r3, [r7, #4]
 800d724:	7d7a      	ldrb	r2, [r7, #21]
 800d726:	4413      	add	r3, r2
 800d728:	2bef      	cmp	r3, #239	; 0xef
 800d72a:	dc21      	bgt.n	800d770 <ILI9341_WriteString+0x82>
				break;
			}
			if (*str == ' ') {
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	2b20      	cmp	r3, #32
 800d732:	d103      	bne.n	800d73c <ILI9341_WriteString+0x4e>
				// skip spaces in the beginning of the new line
				str++;
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	3301      	adds	r3, #1
 800d738:	603b      	str	r3, [r7, #0]
				continue;
 800d73a:	e014      	b.n	800d766 <ILI9341_WriteString+0x78>
			}
		}
		ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	781a      	ldrb	r2, [r3, #0]
 800d740:	88b9      	ldrh	r1, [r7, #4]
 800d742:	88f8      	ldrh	r0, [r7, #6]
 800d744:	8c3b      	ldrh	r3, [r7, #32]
 800d746:	9302      	str	r3, [sp, #8]
 800d748:	8bbb      	ldrh	r3, [r7, #28]
 800d74a:	9301      	str	r3, [sp, #4]
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	9300      	str	r3, [sp, #0]
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	f7ff ff57 	bl	800d604 <ILI9341_WriteChar>
		x += font.width;
 800d756:	7d3b      	ldrb	r3, [r7, #20]
 800d758:	b29a      	uxth	r2, r3
 800d75a:	88fb      	ldrh	r3, [r7, #6]
 800d75c:	4413      	add	r3, r2
 800d75e:	80fb      	strh	r3, [r7, #6]
		str++;
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	3301      	adds	r3, #1
 800d764:	603b      	str	r3, [r7, #0]
	while (*str) {
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1cc      	bne.n	800d708 <ILI9341_WriteString+0x1a>
 800d76e:	e000      	b.n	800d772 <ILI9341_WriteString+0x84>
				break;
 800d770:	bf00      	nop
	}

	ILI9341_Unselect();
 800d772:	f7ff fb5f 	bl	800ce34 <ILI9341_Unselect>
}
 800d776:	bf00      	nop
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d780:	b002      	add	sp, #8
 800d782:	4770      	bx	lr

0800d784 <ILI9341_DrawImage>:
void ILI9341_DeleteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor) {
	ILI9341_FillRectangle (x,y, strlen(str) * font.width, font.height, bgcolor);
}

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		const uint16_t *data) {
 800d784:	b590      	push	{r4, r7, lr}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	4604      	mov	r4, r0
 800d78c:	4608      	mov	r0, r1
 800d78e:	4611      	mov	r1, r2
 800d790:	461a      	mov	r2, r3
 800d792:	4623      	mov	r3, r4
 800d794:	80fb      	strh	r3, [r7, #6]
 800d796:	4603      	mov	r3, r0
 800d798:	80bb      	strh	r3, [r7, #4]
 800d79a:	460b      	mov	r3, r1
 800d79c:	807b      	strh	r3, [r7, #2]
 800d79e:	4613      	mov	r3, r2
 800d7a0:	803b      	strh	r3, [r7, #0]
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800d7a2:	88fb      	ldrh	r3, [r7, #6]
 800d7a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d7a8:	d22c      	bcs.n	800d804 <ILI9341_DrawImage+0x80>
 800d7aa:	88bb      	ldrh	r3, [r7, #4]
 800d7ac:	2bef      	cmp	r3, #239	; 0xef
 800d7ae:	d829      	bhi.n	800d804 <ILI9341_DrawImage+0x80>
		return;
	if ((x + w - 1) >= ILI9341_WIDTH)
 800d7b0:	88fa      	ldrh	r2, [r7, #6]
 800d7b2:	887b      	ldrh	r3, [r7, #2]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d7ba:	dc25      	bgt.n	800d808 <ILI9341_DrawImage+0x84>
		return;
	if ((y + h - 1) >= ILI9341_HEIGHT)
 800d7bc:	88ba      	ldrh	r2, [r7, #4]
 800d7be:	883b      	ldrh	r3, [r7, #0]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	2bf0      	cmp	r3, #240	; 0xf0
 800d7c4:	dc22      	bgt.n	800d80c <ILI9341_DrawImage+0x88>
		return;

	ILI9341_Select();
 800d7c6:	f7ff fb25 	bl	800ce14 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800d7ca:	88fa      	ldrh	r2, [r7, #6]
 800d7cc:	887b      	ldrh	r3, [r7, #2]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	b29c      	uxth	r4, r3
 800d7d6:	88ba      	ldrh	r2, [r7, #4]
 800d7d8:	883b      	ldrh	r3, [r7, #0]
 800d7da:	4413      	add	r3, r2
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	3b01      	subs	r3, #1
 800d7e0:	b29b      	uxth	r3, r3
 800d7e2:	88b9      	ldrh	r1, [r7, #4]
 800d7e4:	88f8      	ldrh	r0, [r7, #6]
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	f7ff fb88 	bl	800cefc <ILI9341_SetAddressWindow>
	ILI9341_WriteData((uint8_t*) data, sizeof(uint16_t) * w * h);
 800d7ec:	887b      	ldrh	r3, [r7, #2]
 800d7ee:	883a      	ldrh	r2, [r7, #0]
 800d7f0:	fb02 f303 	mul.w	r3, r2, r3
 800d7f4:	005b      	lsls	r3, r3, #1
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	69b8      	ldr	r0, [r7, #24]
 800d7fa:	f7ff fb55 	bl	800cea8 <ILI9341_WriteData>
	ILI9341_Unselect();
 800d7fe:	f7ff fb19 	bl	800ce34 <ILI9341_Unselect>
 800d802:	e004      	b.n	800d80e <ILI9341_DrawImage+0x8a>
		return;
 800d804:	bf00      	nop
 800d806:	e002      	b.n	800d80e <ILI9341_DrawImage+0x8a>
		return;
 800d808:	bf00      	nop
 800d80a:	e000      	b.n	800d80e <ILI9341_DrawImage+0x8a>
		return;
 800d80c:	bf00      	nop
}
 800d80e:	370c      	adds	r7, #12
 800d810:	46bd      	mov	sp, r7
 800d812:	bd90      	pop	{r4, r7, pc}

0800d814 <ILI9341_DrawMonochromeImage>:

void ILI9341_DrawMonochromeImage(uint16_t x, uint16_t y, uint16_t color,
		uint16_t bgcolor, tImage image) {
 800d814:	b590      	push	{r4, r7, lr}
 800d816:	b08b      	sub	sp, #44	; 0x2c
 800d818:	af00      	add	r7, sp, #0
 800d81a:	4604      	mov	r4, r0
 800d81c:	4608      	mov	r0, r1
 800d81e:	4611      	mov	r1, r2
 800d820:	461a      	mov	r2, r3
 800d822:	4623      	mov	r3, r4
 800d824:	80fb      	strh	r3, [r7, #6]
 800d826:	4603      	mov	r3, r0
 800d828:	80bb      	strh	r3, [r7, #4]
 800d82a:	460b      	mov	r3, r1
 800d82c:	807b      	strh	r3, [r7, #2]
 800d82e:	4613      	mov	r3, r2
 800d830:	803b      	strh	r3, [r7, #0]
	uint16_t b, devider, siz, count;
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800d832:	88fb      	ldrh	r3, [r7, #6]
 800d834:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d838:	d279      	bcs.n	800d92e <ILI9341_DrawMonochromeImage+0x11a>
 800d83a:	88bb      	ldrh	r3, [r7, #4]
 800d83c:	2bef      	cmp	r3, #239	; 0xef
 800d83e:	d876      	bhi.n	800d92e <ILI9341_DrawMonochromeImage+0x11a>
		return;
	devider = wholeDevider(image.height, 8);
 800d840:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d842:	b21b      	sxth	r3, r3
 800d844:	2108      	movs	r1, #8
 800d846:	4618      	mov	r0, r3
 800d848:	f002 fce3 	bl	8010212 <wholeDevider>
 800d84c:	4603      	mov	r3, r0
 800d84e:	82fb      	strh	r3, [r7, #22]
	siz = devider * image.width;
 800d850:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d852:	8afa      	ldrh	r2, [r7, #22]
 800d854:	fb12 f303 	smulbb	r3, r2, r3
 800d858:	82bb      	strh	r3, [r7, #20]
	ILI9341_Select();
 800d85a:	f7ff fadb 	bl	800ce14 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + image.width - 1, y + image.height - 1);
 800d85e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800d860:	88fb      	ldrh	r3, [r7, #6]
 800d862:	4413      	add	r3, r2
 800d864:	b29b      	uxth	r3, r3
 800d866:	3b01      	subs	r3, #1
 800d868:	b29c      	uxth	r4, r3
 800d86a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d86c:	88bb      	ldrh	r3, [r7, #4]
 800d86e:	4413      	add	r3, r2
 800d870:	b29b      	uxth	r3, r3
 800d872:	3b01      	subs	r3, #1
 800d874:	b29b      	uxth	r3, r3
 800d876:	88b9      	ldrh	r1, [r7, #4]
 800d878:	88f8      	ldrh	r0, [r7, #6]
 800d87a:	4622      	mov	r2, r4
 800d87c:	f7ff fb3e 	bl	800cefc <ILI9341_SetAddressWindow>

	for (int i = 0; i < siz; i += devider) {
 800d880:	2300      	movs	r3, #0
 800d882:	623b      	str	r3, [r7, #32]
 800d884:	e04c      	b.n	800d920 <ILI9341_DrawMonochromeImage+0x10c>
		count = image.width;
 800d886:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d888:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (int u = 0; u < devider; u++) {
 800d88a:	2300      	movs	r3, #0
 800d88c:	61fb      	str	r3, [r7, #28]
 800d88e:	e03f      	b.n	800d910 <ILI9341_DrawMonochromeImage+0xfc>
			b = image.data[i + u];
 800d890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d892:	6a39      	ldr	r1, [r7, #32]
 800d894:	69fa      	ldr	r2, [r7, #28]
 800d896:	440a      	add	r2, r1
 800d898:	4413      	add	r3, r2
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	827b      	strh	r3, [r7, #18]
			for (int j = 0; j < 8; j++) {
 800d89e:	2300      	movs	r3, #0
 800d8a0:	61bb      	str	r3, [r7, #24]
 800d8a2:	e02d      	b.n	800d900 <ILI9341_DrawMonochromeImage+0xec>
				if (count == 0) break;
 800d8a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d02e      	beq.n	800d908 <ILI9341_DrawMonochromeImage+0xf4>
				count --;
 800d8aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	84fb      	strh	r3, [r7, #38]	; 0x26
				if ((b << j) & 0x80) {
 800d8b0:	8a7a      	ldrh	r2, [r7, #18]
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00e      	beq.n	800d8de <ILI9341_DrawMonochromeImage+0xca>
					uint8_t data[] = { color >> 8, color & 0xFF };
 800d8c0:	887b      	ldrh	r3, [r7, #2]
 800d8c2:	0a1b      	lsrs	r3, r3, #8
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	743b      	strb	r3, [r7, #16]
 800d8ca:	887b      	ldrh	r3, [r7, #2]
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	747b      	strb	r3, [r7, #17]
					ILI9341_WriteData(data, sizeof(data));
 800d8d0:	f107 0310 	add.w	r3, r7, #16
 800d8d4:	2102      	movs	r1, #2
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7ff fae6 	bl	800cea8 <ILI9341_WriteData>
 800d8dc:	e00d      	b.n	800d8fa <ILI9341_DrawMonochromeImage+0xe6>
				} else {
					uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800d8de:	883b      	ldrh	r3, [r7, #0]
 800d8e0:	0a1b      	lsrs	r3, r3, #8
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	733b      	strb	r3, [r7, #12]
 800d8e8:	883b      	ldrh	r3, [r7, #0]
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	737b      	strb	r3, [r7, #13]
					ILI9341_WriteData(data, sizeof(data));
 800d8ee:	f107 030c 	add.w	r3, r7, #12
 800d8f2:	2102      	movs	r1, #2
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7ff fad7 	bl	800cea8 <ILI9341_WriteData>
			for (int j = 0; j < 8; j++) {
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	61bb      	str	r3, [r7, #24]
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	2b07      	cmp	r3, #7
 800d904:	ddce      	ble.n	800d8a4 <ILI9341_DrawMonochromeImage+0x90>
 800d906:	e000      	b.n	800d90a <ILI9341_DrawMonochromeImage+0xf6>
				if (count == 0) break;
 800d908:	bf00      	nop
		for (int u = 0; u < devider; u++) {
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	3301      	adds	r3, #1
 800d90e:	61fb      	str	r3, [r7, #28]
 800d910:	8afb      	ldrh	r3, [r7, #22]
 800d912:	69fa      	ldr	r2, [r7, #28]
 800d914:	429a      	cmp	r2, r3
 800d916:	dbbb      	blt.n	800d890 <ILI9341_DrawMonochromeImage+0x7c>
	for (int i = 0; i < siz; i += devider) {
 800d918:	8afb      	ldrh	r3, [r7, #22]
 800d91a:	6a3a      	ldr	r2, [r7, #32]
 800d91c:	4413      	add	r3, r2
 800d91e:	623b      	str	r3, [r7, #32]
 800d920:	8abb      	ldrh	r3, [r7, #20]
 800d922:	6a3a      	ldr	r2, [r7, #32]
 800d924:	429a      	cmp	r2, r3
 800d926:	dbae      	blt.n	800d886 <ILI9341_DrawMonochromeImage+0x72>
				}
			}
		}
	}
	ILI9341_Unselect();
 800d928:	f7ff fa84 	bl	800ce34 <ILI9341_Unselect>
 800d92c:	e000      	b.n	800d930 <ILI9341_DrawMonochromeImage+0x11c>
		return;
 800d92e:	bf00      	nop
}
 800d930:	372c      	adds	r7, #44	; 0x2c
 800d932:	46bd      	mov	sp, r7
 800d934:	bd90      	pop	{r4, r7, pc}

0800d936 <writeFastVLine>:
 @param    x   Top-most x coordinate
 @param    y   Top-most y coordinate
 @param    h   Height in pixels
 @param    color 16-bit 5-6-5 Color to fill with
 **************************************************************************/
void writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 800d936:	b590      	push	{r4, r7, lr}
 800d938:	b085      	sub	sp, #20
 800d93a:	af02      	add	r7, sp, #8
 800d93c:	4604      	mov	r4, r0
 800d93e:	4608      	mov	r0, r1
 800d940:	4611      	mov	r1, r2
 800d942:	461a      	mov	r2, r3
 800d944:	4623      	mov	r3, r4
 800d946:	80fb      	strh	r3, [r7, #6]
 800d948:	4603      	mov	r3, r0
 800d94a:	80bb      	strh	r3, [r7, #4]
 800d94c:	460b      	mov	r3, r1
 800d94e:	807b      	strh	r3, [r7, #2]
 800d950:	4613      	mov	r3, r2
 800d952:	803b      	strh	r3, [r7, #0]
	ILI9341_Select();
 800d954:	f7ff fa5e 	bl	800ce14 <ILI9341_Select>
	ILI9341_FillRectangle(x, y, 1, h, color);
 800d958:	88f8      	ldrh	r0, [r7, #6]
 800d95a:	88b9      	ldrh	r1, [r7, #4]
 800d95c:	887a      	ldrh	r2, [r7, #2]
 800d95e:	883b      	ldrh	r3, [r7, #0]
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	4613      	mov	r3, r2
 800d964:	2201      	movs	r2, #1
 800d966:	f7ff fc79 	bl	800d25c <ILI9341_FillRectangle>
	//writeLine(x, y, x, y + h - 1, color);
	ILI9341_Unselect();
 800d96a:	f7ff fa63 	bl	800ce34 <ILI9341_Unselect>
}
 800d96e:	bf00      	nop
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	bd90      	pop	{r4, r7, pc}

0800d976 <writeFastHLine>:
 @param    x   Left-most x coordinate
 @param    y   Left-most y coordinate
 @param    w   Width in pixels
 @param    color 16-bit 5-6-5 Color to fill with
 **************************************************************************/
void writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 800d976:	b590      	push	{r4, r7, lr}
 800d978:	b085      	sub	sp, #20
 800d97a:	af02      	add	r7, sp, #8
 800d97c:	4604      	mov	r4, r0
 800d97e:	4608      	mov	r0, r1
 800d980:	4611      	mov	r1, r2
 800d982:	461a      	mov	r2, r3
 800d984:	4623      	mov	r3, r4
 800d986:	80fb      	strh	r3, [r7, #6]
 800d988:	4603      	mov	r3, r0
 800d98a:	80bb      	strh	r3, [r7, #4]
 800d98c:	460b      	mov	r3, r1
 800d98e:	807b      	strh	r3, [r7, #2]
 800d990:	4613      	mov	r3, r2
 800d992:	803b      	strh	r3, [r7, #0]
	ILI9341_Select();
 800d994:	f7ff fa3e 	bl	800ce14 <ILI9341_Select>
	ILI9341_FillRectangle(x, y, w, 1, color);
 800d998:	88f8      	ldrh	r0, [r7, #6]
 800d99a:	88b9      	ldrh	r1, [r7, #4]
 800d99c:	887a      	ldrh	r2, [r7, #2]
 800d99e:	883b      	ldrh	r3, [r7, #0]
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	f7ff fc5a 	bl	800d25c <ILI9341_FillRectangle>
	//writeLine(x, y, x + w - 1, y, color);
	ILI9341_Unselect();
 800d9a8:	f7ff fa44 	bl	800ce34 <ILI9341_Unselect>
}
 800d9ac:	bf00      	nop
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd90      	pop	{r4, r7, pc}

0800d9b4 <drawRect>:
 @param    y   Top left corner y coordinate
 @param    w   Width in pixels
 @param    h   Height in pixels
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 800d9b4:	b590      	push	{r4, r7, lr}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	4608      	mov	r0, r1
 800d9be:	4611      	mov	r1, r2
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	4623      	mov	r3, r4
 800d9c4:	80fb      	strh	r3, [r7, #6]
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	80bb      	strh	r3, [r7, #4]
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	807b      	strh	r3, [r7, #2]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	803b      	strh	r3, [r7, #0]
	writeFastHLine(x, y, w, color);
 800d9d2:	8b3b      	ldrh	r3, [r7, #24]
 800d9d4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d9d8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d9dc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d9e0:	f7ff ffc9 	bl	800d976 <writeFastHLine>
	writeFastHLine(x, y + h - 1, w, color);
 800d9e4:	88ba      	ldrh	r2, [r7, #4]
 800d9e6:	883b      	ldrh	r3, [r7, #0]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	b219      	sxth	r1, r3
 800d9f2:	8b3b      	ldrh	r3, [r7, #24]
 800d9f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d9f8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d9fc:	f7ff ffbb 	bl	800d976 <writeFastHLine>
	writeFastVLine(x, y, h, color);
 800da00:	8b3b      	ldrh	r3, [r7, #24]
 800da02:	f9b7 2000 	ldrsh.w	r2, [r7]
 800da06:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800da0a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800da0e:	f7ff ff92 	bl	800d936 <writeFastVLine>
	writeFastVLine(x + w - 1, y, h, color);
 800da12:	88fa      	ldrh	r2, [r7, #6]
 800da14:	887b      	ldrh	r3, [r7, #2]
 800da16:	4413      	add	r3, r2
 800da18:	b29b      	uxth	r3, r3
 800da1a:	3b01      	subs	r3, #1
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	b218      	sxth	r0, r3
 800da20:	8b3b      	ldrh	r3, [r7, #24]
 800da22:	f9b7 2000 	ldrsh.w	r2, [r7]
 800da26:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800da2a:	f7ff ff84 	bl	800d936 <writeFastVLine>
}
 800da2e:	bf00      	nop
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	bd90      	pop	{r4, r7, pc}

0800da36 <drawCircleHelper>:
 @param    r   Radius of circle
 @param    cornername  Mask bit #1 or bit #2 to indicate which quarters of the circle we're doing
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
 800da36:	b590      	push	{r4, r7, lr}
 800da38:	b087      	sub	sp, #28
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	4604      	mov	r4, r0
 800da3e:	4608      	mov	r0, r1
 800da40:	4611      	mov	r1, r2
 800da42:	461a      	mov	r2, r3
 800da44:	4623      	mov	r3, r4
 800da46:	80fb      	strh	r3, [r7, #6]
 800da48:	4603      	mov	r3, r0
 800da4a:	80bb      	strh	r3, [r7, #4]
 800da4c:	460b      	mov	r3, r1
 800da4e:	807b      	strh	r3, [r7, #2]
 800da50:	4613      	mov	r3, r2
 800da52:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800da54:	887b      	ldrh	r3, [r7, #2]
 800da56:	f1c3 0301 	rsb	r3, r3, #1
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800da5e:	2301      	movs	r3, #1
 800da60:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800da62:	887b      	ldrh	r3, [r7, #2]
 800da64:	461a      	mov	r2, r3
 800da66:	03d2      	lsls	r2, r2, #15
 800da68:	1ad3      	subs	r3, r2, r3
 800da6a:	005b      	lsls	r3, r3, #1
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800da70:	2300      	movs	r3, #0
 800da72:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800da74:	887b      	ldrh	r3, [r7, #2]
 800da76:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 800da78:	e095      	b.n	800dba6 <drawCircleHelper+0x170>
		if (f >= 0) {
 800da7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	db0e      	blt.n	800daa0 <drawCircleHelper+0x6a>
			y--;
 800da82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800da86:	b29b      	uxth	r3, r3
 800da88:	3b01      	subs	r3, #1
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800da8e:	8a7b      	ldrh	r3, [r7, #18]
 800da90:	3302      	adds	r3, #2
 800da92:	b29b      	uxth	r3, r3
 800da94:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800da96:	8afa      	ldrh	r2, [r7, #22]
 800da98:	8a7b      	ldrh	r3, [r7, #18]
 800da9a:	4413      	add	r3, r2
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800daa0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	3301      	adds	r3, #1
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800daac:	8abb      	ldrh	r3, [r7, #20]
 800daae:	3302      	adds	r3, #2
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800dab4:	8afa      	ldrh	r2, [r7, #22]
 800dab6:	8abb      	ldrh	r3, [r7, #20]
 800dab8:	4413      	add	r3, r2
 800daba:	b29b      	uxth	r3, r3
 800dabc:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 800dabe:	787b      	ldrb	r3, [r7, #1]
 800dac0:	f003 0304 	and.w	r3, r3, #4
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d017      	beq.n	800daf8 <drawCircleHelper+0xc2>
			ILI9341_DrawPixel(x0 + x, y0 + y, color);
 800dac8:	88fa      	ldrh	r2, [r7, #6]
 800daca:	8a3b      	ldrh	r3, [r7, #16]
 800dacc:	4413      	add	r3, r2
 800dace:	b298      	uxth	r0, r3
 800dad0:	88ba      	ldrh	r2, [r7, #4]
 800dad2:	89fb      	ldrh	r3, [r7, #14]
 800dad4:	4413      	add	r3, r2
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dada:	4619      	mov	r1, r3
 800dadc:	f7ff fb8c 	bl	800d1f8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 + y, y0 + x, color);
 800dae0:	88fa      	ldrh	r2, [r7, #6]
 800dae2:	89fb      	ldrh	r3, [r7, #14]
 800dae4:	4413      	add	r3, r2
 800dae6:	b298      	uxth	r0, r3
 800dae8:	88ba      	ldrh	r2, [r7, #4]
 800daea:	8a3b      	ldrh	r3, [r7, #16]
 800daec:	4413      	add	r3, r2
 800daee:	b29b      	uxth	r3, r3
 800daf0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800daf2:	4619      	mov	r1, r3
 800daf4:	f7ff fb80 	bl	800d1f8 <ILI9341_DrawPixel>
		}
		if (cornername & 0x2) {
 800daf8:	787b      	ldrb	r3, [r7, #1]
 800dafa:	f003 0302 	and.w	r3, r3, #2
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d017      	beq.n	800db32 <drawCircleHelper+0xfc>
			ILI9341_DrawPixel(x0 + x, y0 - y, color);
 800db02:	88fa      	ldrh	r2, [r7, #6]
 800db04:	8a3b      	ldrh	r3, [r7, #16]
 800db06:	4413      	add	r3, r2
 800db08:	b298      	uxth	r0, r3
 800db0a:	88ba      	ldrh	r2, [r7, #4]
 800db0c:	89fb      	ldrh	r3, [r7, #14]
 800db0e:	1ad3      	subs	r3, r2, r3
 800db10:	b29b      	uxth	r3, r3
 800db12:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db14:	4619      	mov	r1, r3
 800db16:	f7ff fb6f 	bl	800d1f8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 + y, y0 - x, color);
 800db1a:	88fa      	ldrh	r2, [r7, #6]
 800db1c:	89fb      	ldrh	r3, [r7, #14]
 800db1e:	4413      	add	r3, r2
 800db20:	b298      	uxth	r0, r3
 800db22:	88ba      	ldrh	r2, [r7, #4]
 800db24:	8a3b      	ldrh	r3, [r7, #16]
 800db26:	1ad3      	subs	r3, r2, r3
 800db28:	b29b      	uxth	r3, r3
 800db2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db2c:	4619      	mov	r1, r3
 800db2e:	f7ff fb63 	bl	800d1f8 <ILI9341_DrawPixel>
		}
		if (cornername & 0x8) {
 800db32:	787b      	ldrb	r3, [r7, #1]
 800db34:	f003 0308 	and.w	r3, r3, #8
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d017      	beq.n	800db6c <drawCircleHelper+0x136>
			ILI9341_DrawPixel(x0 - y, y0 + x, color);
 800db3c:	88fa      	ldrh	r2, [r7, #6]
 800db3e:	89fb      	ldrh	r3, [r7, #14]
 800db40:	1ad3      	subs	r3, r2, r3
 800db42:	b298      	uxth	r0, r3
 800db44:	88ba      	ldrh	r2, [r7, #4]
 800db46:	8a3b      	ldrh	r3, [r7, #16]
 800db48:	4413      	add	r3, r2
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db4e:	4619      	mov	r1, r3
 800db50:	f7ff fb52 	bl	800d1f8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 - x, y0 + y, color);
 800db54:	88fa      	ldrh	r2, [r7, #6]
 800db56:	8a3b      	ldrh	r3, [r7, #16]
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	b298      	uxth	r0, r3
 800db5c:	88ba      	ldrh	r2, [r7, #4]
 800db5e:	89fb      	ldrh	r3, [r7, #14]
 800db60:	4413      	add	r3, r2
 800db62:	b29b      	uxth	r3, r3
 800db64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db66:	4619      	mov	r1, r3
 800db68:	f7ff fb46 	bl	800d1f8 <ILI9341_DrawPixel>
		}
		if (cornername & 0x1) {
 800db6c:	787b      	ldrb	r3, [r7, #1]
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	2b00      	cmp	r3, #0
 800db74:	d017      	beq.n	800dba6 <drawCircleHelper+0x170>
			ILI9341_DrawPixel(x0 - y, y0 - x, color);
 800db76:	88fa      	ldrh	r2, [r7, #6]
 800db78:	89fb      	ldrh	r3, [r7, #14]
 800db7a:	1ad3      	subs	r3, r2, r3
 800db7c:	b298      	uxth	r0, r3
 800db7e:	88ba      	ldrh	r2, [r7, #4]
 800db80:	8a3b      	ldrh	r3, [r7, #16]
 800db82:	1ad3      	subs	r3, r2, r3
 800db84:	b29b      	uxth	r3, r3
 800db86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db88:	4619      	mov	r1, r3
 800db8a:	f7ff fb35 	bl	800d1f8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(x0 - x, y0 - y, color);
 800db8e:	88fa      	ldrh	r2, [r7, #6]
 800db90:	8a3b      	ldrh	r3, [r7, #16]
 800db92:	1ad3      	subs	r3, r2, r3
 800db94:	b298      	uxth	r0, r3
 800db96:	88ba      	ldrh	r2, [r7, #4]
 800db98:	89fb      	ldrh	r3, [r7, #14]
 800db9a:	1ad3      	subs	r3, r2, r3
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dba0:	4619      	mov	r1, r3
 800dba2:	f7ff fb29 	bl	800d1f8 <ILI9341_DrawPixel>
	while (x < y) {
 800dba6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800dbaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	f6ff af63 	blt.w	800da7a <drawCircleHelper+0x44>
		}
	}
}
 800dbb4:	bf00      	nop
 800dbb6:	bf00      	nop
 800dbb8:	371c      	adds	r7, #28
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd90      	pop	{r4, r7, pc}

0800dbbe <fillCircleHelper>:
 @param  corners  Mask bits indicating which quarters we're doing
 @param  delta    Offset from center-point, used for round-rects
 @param  color    16-bit 5-6-5 Color to fill with
 **************************************************************************/
void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners,
		int16_t delta, uint16_t color) {
 800dbbe:	b590      	push	{r4, r7, lr}
 800dbc0:	b087      	sub	sp, #28
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	4604      	mov	r4, r0
 800dbc6:	4608      	mov	r0, r1
 800dbc8:	4611      	mov	r1, r2
 800dbca:	461a      	mov	r2, r3
 800dbcc:	4623      	mov	r3, r4
 800dbce:	80fb      	strh	r3, [r7, #6]
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	80bb      	strh	r3, [r7, #4]
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	807b      	strh	r3, [r7, #2]
 800dbd8:	4613      	mov	r3, r2
 800dbda:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800dbdc:	887b      	ldrh	r3, [r7, #2]
 800dbde:	f1c3 0301 	rsb	r3, r3, #1
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800dbea:	887b      	ldrh	r3, [r7, #2]
 800dbec:	461a      	mov	r2, r3
 800dbee:	03d2      	lsls	r2, r2, #15
 800dbf0:	1ad3      	subs	r3, r2, r3
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800dbfc:	887b      	ldrh	r3, [r7, #2]
 800dbfe:	81fb      	strh	r3, [r7, #14]
	int16_t px = x;
 800dc00:	8a3b      	ldrh	r3, [r7, #16]
 800dc02:	81bb      	strh	r3, [r7, #12]
	int16_t py = y;
 800dc04:	89fb      	ldrh	r3, [r7, #14]
 800dc06:	817b      	strh	r3, [r7, #10]

	delta++; // Avoid some +1's in the loop
 800dc08:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	3301      	adds	r3, #1
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	853b      	strh	r3, [r7, #40]	; 0x28

	while (x < y) {
 800dc14:	e095      	b.n	800dd42 <fillCircleHelper+0x184>
		if (f >= 0) {
 800dc16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	db0e      	blt.n	800dc3c <fillCircleHelper+0x7e>
			y--;
 800dc1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	3b01      	subs	r3, #1
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800dc2a:	8a7b      	ldrh	r3, [r7, #18]
 800dc2c:	3302      	adds	r3, #2
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800dc32:	8afa      	ldrh	r2, [r7, #22]
 800dc34:	8a7b      	ldrh	r3, [r7, #18]
 800dc36:	4413      	add	r3, r2
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800dc3c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	3301      	adds	r3, #1
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800dc48:	8abb      	ldrh	r3, [r7, #20]
 800dc4a:	3302      	adds	r3, #2
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800dc50:	8afa      	ldrh	r2, [r7, #22]
 800dc52:	8abb      	ldrh	r3, [r7, #20]
 800dc54:	4413      	add	r3, r2
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	82fb      	strh	r3, [r7, #22]
		// These checks avoid double-drawing certain lines, important
		// for the SSD1306 library which has an INVERT drawing mode.
		if (x < (y + 1)) {
 800dc5a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800dc5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	db31      	blt.n	800dcca <fillCircleHelper+0x10c>
			if (corners & 1)
 800dc66:	787b      	ldrb	r3, [r7, #1]
 800dc68:	f003 0301 	and.w	r3, r3, #1
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d013      	beq.n	800dc98 <fillCircleHelper+0xda>
				writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 800dc70:	88fa      	ldrh	r2, [r7, #6]
 800dc72:	8a3b      	ldrh	r3, [r7, #16]
 800dc74:	4413      	add	r3, r2
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	b218      	sxth	r0, r3
 800dc7a:	88ba      	ldrh	r2, [r7, #4]
 800dc7c:	89fb      	ldrh	r3, [r7, #14]
 800dc7e:	1ad3      	subs	r3, r2, r3
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	b219      	sxth	r1, r3
 800dc84:	89fb      	ldrh	r3, [r7, #14]
 800dc86:	005b      	lsls	r3, r3, #1
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dc8c:	4413      	add	r3, r2
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	b21a      	sxth	r2, r3
 800dc92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc94:	f7ff fe4f 	bl	800d936 <writeFastVLine>
			if (corners & 2)
 800dc98:	787b      	ldrb	r3, [r7, #1]
 800dc9a:	f003 0302 	and.w	r3, r3, #2
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d013      	beq.n	800dcca <fillCircleHelper+0x10c>
				writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 800dca2:	88fa      	ldrh	r2, [r7, #6]
 800dca4:	8a3b      	ldrh	r3, [r7, #16]
 800dca6:	1ad3      	subs	r3, r2, r3
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	b218      	sxth	r0, r3
 800dcac:	88ba      	ldrh	r2, [r7, #4]
 800dcae:	89fb      	ldrh	r3, [r7, #14]
 800dcb0:	1ad3      	subs	r3, r2, r3
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	b219      	sxth	r1, r3
 800dcb6:	89fb      	ldrh	r3, [r7, #14]
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dcbe:	4413      	add	r3, r2
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	b21a      	sxth	r2, r3
 800dcc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dcc6:	f7ff fe36 	bl	800d936 <writeFastVLine>
		}
		if (y != py) {
 800dcca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800dcce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d033      	beq.n	800dd3e <fillCircleHelper+0x180>
			if (corners & 1)
 800dcd6:	787b      	ldrb	r3, [r7, #1]
 800dcd8:	f003 0301 	and.w	r3, r3, #1
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d013      	beq.n	800dd08 <fillCircleHelper+0x14a>
				writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 800dce0:	88fa      	ldrh	r2, [r7, #6]
 800dce2:	897b      	ldrh	r3, [r7, #10]
 800dce4:	4413      	add	r3, r2
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	b218      	sxth	r0, r3
 800dcea:	88ba      	ldrh	r2, [r7, #4]
 800dcec:	89bb      	ldrh	r3, [r7, #12]
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	b219      	sxth	r1, r3
 800dcf4:	89bb      	ldrh	r3, [r7, #12]
 800dcf6:	005b      	lsls	r3, r3, #1
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dcfc:	4413      	add	r3, r2
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	b21a      	sxth	r2, r3
 800dd02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd04:	f7ff fe17 	bl	800d936 <writeFastVLine>
			if (corners & 2)
 800dd08:	787b      	ldrb	r3, [r7, #1]
 800dd0a:	f003 0302 	and.w	r3, r3, #2
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d013      	beq.n	800dd3a <fillCircleHelper+0x17c>
				writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 800dd12:	88fa      	ldrh	r2, [r7, #6]
 800dd14:	897b      	ldrh	r3, [r7, #10]
 800dd16:	1ad3      	subs	r3, r2, r3
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	b218      	sxth	r0, r3
 800dd1c:	88ba      	ldrh	r2, [r7, #4]
 800dd1e:	89bb      	ldrh	r3, [r7, #12]
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	b219      	sxth	r1, r3
 800dd26:	89bb      	ldrh	r3, [r7, #12]
 800dd28:	005b      	lsls	r3, r3, #1
 800dd2a:	b29a      	uxth	r2, r3
 800dd2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd2e:	4413      	add	r3, r2
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	b21a      	sxth	r2, r3
 800dd34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd36:	f7ff fdfe 	bl	800d936 <writeFastVLine>
			py = y;
 800dd3a:	89fb      	ldrh	r3, [r7, #14]
 800dd3c:	817b      	strh	r3, [r7, #10]
		}
		px = x;
 800dd3e:	8a3b      	ldrh	r3, [r7, #16]
 800dd40:	81bb      	strh	r3, [r7, #12]
	while (x < y) {
 800dd42:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800dd46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	f6ff af63 	blt.w	800dc16 <fillCircleHelper+0x58>
	}
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	371c      	adds	r7, #28
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd90      	pop	{r4, r7, pc}

0800dd5a <drawRoundRect>:
 @param    h   Height in pixels
 @param    r   Radius of corner rounding
 @param    color 16-bit 5-6-5 Color to draw/fill with
 **************************************************************************/
void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 800dd5a:	b590      	push	{r4, r7, lr}
 800dd5c:	b087      	sub	sp, #28
 800dd5e:	af02      	add	r7, sp, #8
 800dd60:	4604      	mov	r4, r0
 800dd62:	4608      	mov	r0, r1
 800dd64:	4611      	mov	r1, r2
 800dd66:	461a      	mov	r2, r3
 800dd68:	4623      	mov	r3, r4
 800dd6a:	80fb      	strh	r3, [r7, #6]
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	80bb      	strh	r3, [r7, #4]
 800dd70:	460b      	mov	r3, r1
 800dd72:	807b      	strh	r3, [r7, #2]
 800dd74:	4613      	mov	r3, r2
 800dd76:	803b      	strh	r3, [r7, #0]
	int16_t max_radius = 0;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	81fb      	strh	r3, [r7, #14]
	if (w < h)
 800dd7c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dd80:	f9b7 3000 	ldrsh.w	r3, [r7]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	da06      	bge.n	800dd96 <drawRoundRect+0x3c>
		max_radius = w / 2;
 800dd88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd8c:	0fda      	lsrs	r2, r3, #31
 800dd8e:	4413      	add	r3, r2
 800dd90:	105b      	asrs	r3, r3, #1
 800dd92:	81fb      	strh	r3, [r7, #14]
 800dd94:	e005      	b.n	800dda2 <drawRoundRect+0x48>
	else
		max_radius = h / 2;              // 1/2 minor axis
 800dd96:	f9b7 3000 	ldrsh.w	r3, [r7]
 800dd9a:	0fda      	lsrs	r2, r3, #31
 800dd9c:	4413      	add	r3, r2
 800dd9e:	105b      	asrs	r3, r3, #1
 800dda0:	81fb      	strh	r3, [r7, #14]
	if (r > max_radius)
 800dda2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dda6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	dd01      	ble.n	800ddb2 <drawRoundRect+0x58>
		r = max_radius;
 800ddae:	89fb      	ldrh	r3, [r7, #14]
 800ddb0:	843b      	strh	r3, [r7, #32]
// smarter version
	ILI9341_Select();
 800ddb2:	f7ff f82f 	bl	800ce14 <ILI9341_Select>
	writeFastHLine(x + r, y, w - 2 * r, color);         // Top
 800ddb6:	88fa      	ldrh	r2, [r7, #6]
 800ddb8:	8c3b      	ldrh	r3, [r7, #32]
 800ddba:	4413      	add	r3, r2
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	b218      	sxth	r0, r3
 800ddc0:	887a      	ldrh	r2, [r7, #2]
 800ddc2:	8c3b      	ldrh	r3, [r7, #32]
 800ddc4:	005b      	lsls	r3, r3, #1
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	1ad3      	subs	r3, r2, r3
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	b21a      	sxth	r2, r3
 800ddce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddd0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800ddd4:	f7ff fdcf 	bl	800d976 <writeFastHLine>
	writeFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 800ddd8:	88fa      	ldrh	r2, [r7, #6]
 800ddda:	8c3b      	ldrh	r3, [r7, #32]
 800dddc:	4413      	add	r3, r2
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	b218      	sxth	r0, r3
 800dde2:	88ba      	ldrh	r2, [r7, #4]
 800dde4:	883b      	ldrh	r3, [r7, #0]
 800dde6:	4413      	add	r3, r2
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	3b01      	subs	r3, #1
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	b219      	sxth	r1, r3
 800ddf0:	887a      	ldrh	r2, [r7, #2]
 800ddf2:	8c3b      	ldrh	r3, [r7, #32]
 800ddf4:	005b      	lsls	r3, r3, #1
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	1ad3      	subs	r3, r2, r3
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	b21a      	sxth	r2, r3
 800ddfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de00:	f7ff fdb9 	bl	800d976 <writeFastHLine>
	writeFastVLine(x, y + r, h - 2 * r, color);         // Left
 800de04:	88ba      	ldrh	r2, [r7, #4]
 800de06:	8c3b      	ldrh	r3, [r7, #32]
 800de08:	4413      	add	r3, r2
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	b219      	sxth	r1, r3
 800de0e:	883a      	ldrh	r2, [r7, #0]
 800de10:	8c3b      	ldrh	r3, [r7, #32]
 800de12:	005b      	lsls	r3, r3, #1
 800de14:	b29b      	uxth	r3, r3
 800de16:	1ad3      	subs	r3, r2, r3
 800de18:	b29b      	uxth	r3, r3
 800de1a:	b21a      	sxth	r2, r3
 800de1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de1e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800de22:	f7ff fd88 	bl	800d936 <writeFastVLine>
	writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 800de26:	88fa      	ldrh	r2, [r7, #6]
 800de28:	887b      	ldrh	r3, [r7, #2]
 800de2a:	4413      	add	r3, r2
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	3b01      	subs	r3, #1
 800de30:	b29b      	uxth	r3, r3
 800de32:	b218      	sxth	r0, r3
 800de34:	88ba      	ldrh	r2, [r7, #4]
 800de36:	8c3b      	ldrh	r3, [r7, #32]
 800de38:	4413      	add	r3, r2
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	b219      	sxth	r1, r3
 800de3e:	883a      	ldrh	r2, [r7, #0]
 800de40:	8c3b      	ldrh	r3, [r7, #32]
 800de42:	005b      	lsls	r3, r3, #1
 800de44:	b29b      	uxth	r3, r3
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	b29b      	uxth	r3, r3
 800de4a:	b21a      	sxth	r2, r3
 800de4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de4e:	f7ff fd72 	bl	800d936 <writeFastVLine>
// draw four corners
	drawCircleHelper(x + r, y + r, r, 1, color);
 800de52:	88fa      	ldrh	r2, [r7, #6]
 800de54:	8c3b      	ldrh	r3, [r7, #32]
 800de56:	4413      	add	r3, r2
 800de58:	b29b      	uxth	r3, r3
 800de5a:	b218      	sxth	r0, r3
 800de5c:	88ba      	ldrh	r2, [r7, #4]
 800de5e:	8c3b      	ldrh	r3, [r7, #32]
 800de60:	4413      	add	r3, r2
 800de62:	b29b      	uxth	r3, r3
 800de64:	b219      	sxth	r1, r3
 800de66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	2301      	movs	r3, #1
 800de70:	f7ff fde1 	bl	800da36 <drawCircleHelper>
	drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 800de74:	88fa      	ldrh	r2, [r7, #6]
 800de76:	887b      	ldrh	r3, [r7, #2]
 800de78:	4413      	add	r3, r2
 800de7a:	b29a      	uxth	r2, r3
 800de7c:	8c3b      	ldrh	r3, [r7, #32]
 800de7e:	1ad3      	subs	r3, r2, r3
 800de80:	b29b      	uxth	r3, r3
 800de82:	3b01      	subs	r3, #1
 800de84:	b29b      	uxth	r3, r3
 800de86:	b218      	sxth	r0, r3
 800de88:	88ba      	ldrh	r2, [r7, #4]
 800de8a:	8c3b      	ldrh	r3, [r7, #32]
 800de8c:	4413      	add	r3, r2
 800de8e:	b29b      	uxth	r3, r3
 800de90:	b219      	sxth	r1, r3
 800de92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	2302      	movs	r3, #2
 800de9c:	f7ff fdcb 	bl	800da36 <drawCircleHelper>
	drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 800dea0:	88fa      	ldrh	r2, [r7, #6]
 800dea2:	887b      	ldrh	r3, [r7, #2]
 800dea4:	4413      	add	r3, r2
 800dea6:	b29a      	uxth	r2, r3
 800dea8:	8c3b      	ldrh	r3, [r7, #32]
 800deaa:	1ad3      	subs	r3, r2, r3
 800deac:	b29b      	uxth	r3, r3
 800deae:	3b01      	subs	r3, #1
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	b218      	sxth	r0, r3
 800deb4:	88ba      	ldrh	r2, [r7, #4]
 800deb6:	883b      	ldrh	r3, [r7, #0]
 800deb8:	4413      	add	r3, r2
 800deba:	b29a      	uxth	r2, r3
 800debc:	8c3b      	ldrh	r3, [r7, #32]
 800debe:	1ad3      	subs	r3, r2, r3
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	3b01      	subs	r3, #1
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	b219      	sxth	r1, r3
 800dec8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800decc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	2304      	movs	r3, #4
 800ded2:	f7ff fdb0 	bl	800da36 <drawCircleHelper>
	drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 800ded6:	88fa      	ldrh	r2, [r7, #6]
 800ded8:	8c3b      	ldrh	r3, [r7, #32]
 800deda:	4413      	add	r3, r2
 800dedc:	b29b      	uxth	r3, r3
 800dede:	b218      	sxth	r0, r3
 800dee0:	88ba      	ldrh	r2, [r7, #4]
 800dee2:	883b      	ldrh	r3, [r7, #0]
 800dee4:	4413      	add	r3, r2
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	8c3b      	ldrh	r3, [r7, #32]
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	b29b      	uxth	r3, r3
 800deee:	3b01      	subs	r3, #1
 800def0:	b29b      	uxth	r3, r3
 800def2:	b219      	sxth	r1, r3
 800def4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800def8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800defa:	9300      	str	r3, [sp, #0]
 800defc:	2308      	movs	r3, #8
 800defe:	f7ff fd9a 	bl	800da36 <drawCircleHelper>
	ILI9341_Unselect();
 800df02:	f7fe ff97 	bl	800ce34 <ILI9341_Unselect>
}
 800df06:	bf00      	nop
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd90      	pop	{r4, r7, pc}

0800df0e <drawSomePixelRoundRect>:

void drawSomePixelRoundRect(int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, int16_t countPixel, uint16_t color) {
 800df0e:	b590      	push	{r4, r7, lr}
 800df10:	b087      	sub	sp, #28
 800df12:	af02      	add	r7, sp, #8
 800df14:	4604      	mov	r4, r0
 800df16:	4608      	mov	r0, r1
 800df18:	4611      	mov	r1, r2
 800df1a:	461a      	mov	r2, r3
 800df1c:	4623      	mov	r3, r4
 800df1e:	80fb      	strh	r3, [r7, #6]
 800df20:	4603      	mov	r3, r0
 800df22:	80bb      	strh	r3, [r7, #4]
 800df24:	460b      	mov	r3, r1
 800df26:	807b      	strh	r3, [r7, #2]
 800df28:	4613      	mov	r3, r2
 800df2a:	803b      	strh	r3, [r7, #0]
	if (countPixel < 1)
 800df2c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800df30:	2b00      	cmp	r3, #0
 800df32:	dd44      	ble.n	800dfbe <drawSomePixelRoundRect+0xb0>
		return;
	for (int i = 0; i < countPixel; i++) {
 800df34:	2300      	movs	r3, #0
 800df36:	60fb      	str	r3, [r7, #12]
 800df38:	e03b      	b.n	800dfb2 <drawSomePixelRoundRect+0xa4>
		if (i == 0) {
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d110      	bne.n	800df62 <drawSomePixelRoundRect+0x54>
			drawRoundRect(x, y, w, h, r, color);
 800df40:	f9b7 4000 	ldrsh.w	r4, [r7]
 800df44:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800df48:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800df4c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800df50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df52:	9301      	str	r3, [sp, #4]
 800df54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df58:	9300      	str	r3, [sp, #0]
 800df5a:	4623      	mov	r3, r4
 800df5c:	f7ff fefd 	bl	800dd5a <drawRoundRect>
			continue;
 800df60:	e024      	b.n	800dfac <drawSomePixelRoundRect+0x9e>
		}
		drawRoundRect(x + i, y + i, w - i * 2, h - i * 2, r, color);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	b29a      	uxth	r2, r3
 800df66:	88fb      	ldrh	r3, [r7, #6]
 800df68:	4413      	add	r3, r2
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	b218      	sxth	r0, r3
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	b29a      	uxth	r2, r3
 800df72:	88bb      	ldrh	r3, [r7, #4]
 800df74:	4413      	add	r3, r2
 800df76:	b29b      	uxth	r3, r3
 800df78:	b219      	sxth	r1, r3
 800df7a:	887a      	ldrh	r2, [r7, #2]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	b29b      	uxth	r3, r3
 800df80:	005b      	lsls	r3, r3, #1
 800df82:	b29b      	uxth	r3, r3
 800df84:	1ad3      	subs	r3, r2, r3
 800df86:	b29b      	uxth	r3, r3
 800df88:	b21c      	sxth	r4, r3
 800df8a:	883a      	ldrh	r2, [r7, #0]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	b29b      	uxth	r3, r3
 800df90:	005b      	lsls	r3, r3, #1
 800df92:	b29b      	uxth	r3, r3
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	b29b      	uxth	r3, r3
 800df98:	b21a      	sxth	r2, r3
 800df9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df9c:	9301      	str	r3, [sp, #4]
 800df9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	4622      	mov	r2, r4
 800dfa8:	f7ff fed7 	bl	800dd5a <drawRoundRect>
	for (int i = 0; i < countPixel; i++) {
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	60fb      	str	r3, [r7, #12]
 800dfb2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	dbbe      	blt.n	800df3a <drawSomePixelRoundRect+0x2c>
 800dfbc:	e000      	b.n	800dfc0 <drawSomePixelRoundRect+0xb2>
		return;
 800dfbe:	bf00      	nop
	}
}
 800dfc0:	3714      	adds	r7, #20
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd90      	pop	{r4, r7, pc}

0800dfc6 <fillRect>:
 @param    y   Top left corner y coordinate
 @param    w   Width in pixels
 @param    h   Height in pixels
 @param    color 16-bit 5-6-5 Color to fill with
 **************************************************************************/
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 800dfc6:	b590      	push	{r4, r7, lr}
 800dfc8:	b085      	sub	sp, #20
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	4604      	mov	r4, r0
 800dfce:	4608      	mov	r0, r1
 800dfd0:	4611      	mov	r1, r2
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	4623      	mov	r3, r4
 800dfd6:	80fb      	strh	r3, [r7, #6]
 800dfd8:	4603      	mov	r3, r0
 800dfda:	80bb      	strh	r3, [r7, #4]
 800dfdc:	460b      	mov	r3, r1
 800dfde:	807b      	strh	r3, [r7, #2]
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	803b      	strh	r3, [r7, #0]
	for (int16_t i = x; i < x + w; i++) {
 800dfe4:	88fb      	ldrh	r3, [r7, #6]
 800dfe6:	81fb      	strh	r3, [r7, #14]
 800dfe8:	e00e      	b.n	800e008 <fillRect+0x42>
		writeFastVLine(i, y, h, color);
 800dfea:	8c3b      	ldrh	r3, [r7, #32]
 800dfec:	f9b7 2000 	ldrsh.w	r2, [r7]
 800dff0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800dff4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800dff8:	f7ff fc9d 	bl	800d936 <writeFastVLine>
	for (int16_t i = x; i < x + w; i++) {
 800dffc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e000:	b29b      	uxth	r3, r3
 800e002:	3301      	adds	r3, #1
 800e004:	b29b      	uxth	r3, r3
 800e006:	81fb      	strh	r3, [r7, #14]
 800e008:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e00c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800e010:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e014:	440b      	add	r3, r1
 800e016:	429a      	cmp	r2, r3
 800e018:	dbe7      	blt.n	800dfea <fillRect+0x24>
	}
}
 800e01a:	bf00      	nop
 800e01c:	bf00      	nop
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	bd90      	pop	{r4, r7, pc}

0800e024 <fillRoundRect>:
 @param    h   Height in pixels
 @param    r   Radius of corner rounding
 @param    color 16-bit 5-6-5 Color to draw/fill with
 **************************************************************************/
void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 800e024:	b590      	push	{r4, r7, lr}
 800e026:	b087      	sub	sp, #28
 800e028:	af02      	add	r7, sp, #8
 800e02a:	4604      	mov	r4, r0
 800e02c:	4608      	mov	r0, r1
 800e02e:	4611      	mov	r1, r2
 800e030:	461a      	mov	r2, r3
 800e032:	4623      	mov	r3, r4
 800e034:	80fb      	strh	r3, [r7, #6]
 800e036:	4603      	mov	r3, r0
 800e038:	80bb      	strh	r3, [r7, #4]
 800e03a:	460b      	mov	r3, r1
 800e03c:	807b      	strh	r3, [r7, #2]
 800e03e:	4613      	mov	r3, r2
 800e040:	803b      	strh	r3, [r7, #0]
	int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800e042:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e046:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e04a:	4293      	cmp	r3, r2
 800e04c:	bfa8      	it	ge
 800e04e:	4613      	movge	r3, r2
 800e050:	b21b      	sxth	r3, r3
 800e052:	0fda      	lsrs	r2, r3, #31
 800e054:	4413      	add	r3, r2
 800e056:	105b      	asrs	r3, r3, #1
 800e058:	81fb      	strh	r3, [r7, #14]
	if (r > max_radius)
 800e05a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e05e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e062:	429a      	cmp	r2, r3
 800e064:	dd01      	ble.n	800e06a <fillRoundRect+0x46>
		r = max_radius;
 800e066:	89fb      	ldrh	r3, [r7, #14]
 800e068:	843b      	strh	r3, [r7, #32]
	ILI9341_Select();
 800e06a:	f7fe fed3 	bl	800ce14 <ILI9341_Select>
// smarter version
	fillRect(x + r, y, w - 2 * r, h, color);
 800e06e:	88fa      	ldrh	r2, [r7, #6]
 800e070:	8c3b      	ldrh	r3, [r7, #32]
 800e072:	4413      	add	r3, r2
 800e074:	b29b      	uxth	r3, r3
 800e076:	b218      	sxth	r0, r3
 800e078:	887a      	ldrh	r2, [r7, #2]
 800e07a:	8c3b      	ldrh	r3, [r7, #32]
 800e07c:	005b      	lsls	r3, r3, #1
 800e07e:	b29b      	uxth	r3, r3
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	b29b      	uxth	r3, r3
 800e084:	b21a      	sxth	r2, r3
 800e086:	f9b7 4000 	ldrsh.w	r4, [r7]
 800e08a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800e08e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e090:	9300      	str	r3, [sp, #0]
 800e092:	4623      	mov	r3, r4
 800e094:	f7ff ff97 	bl	800dfc6 <fillRect>
// draw four corners
	fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 800e098:	88fa      	ldrh	r2, [r7, #6]
 800e09a:	887b      	ldrh	r3, [r7, #2]
 800e09c:	4413      	add	r3, r2
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	8c3b      	ldrh	r3, [r7, #32]
 800e0a2:	1ad3      	subs	r3, r2, r3
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	b218      	sxth	r0, r3
 800e0ac:	88ba      	ldrh	r2, [r7, #4]
 800e0ae:	8c3b      	ldrh	r3, [r7, #32]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	b219      	sxth	r1, r3
 800e0b6:	883a      	ldrh	r2, [r7, #0]
 800e0b8:	8c3b      	ldrh	r3, [r7, #32]
 800e0ba:	005b      	lsls	r3, r3, #1
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	1ad3      	subs	r3, r2, r3
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	3b01      	subs	r3, #1
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	b21b      	sxth	r3, r3
 800e0c8:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800e0cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0ce:	9201      	str	r2, [sp, #4]
 800e0d0:	9300      	str	r3, [sp, #0]
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	4622      	mov	r2, r4
 800e0d6:	f7ff fd72 	bl	800dbbe <fillCircleHelper>
	fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 800e0da:	88fa      	ldrh	r2, [r7, #6]
 800e0dc:	8c3b      	ldrh	r3, [r7, #32]
 800e0de:	4413      	add	r3, r2
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	b218      	sxth	r0, r3
 800e0e4:	88ba      	ldrh	r2, [r7, #4]
 800e0e6:	8c3b      	ldrh	r3, [r7, #32]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	b219      	sxth	r1, r3
 800e0ee:	883a      	ldrh	r2, [r7, #0]
 800e0f0:	8c3b      	ldrh	r3, [r7, #32]
 800e0f2:	005b      	lsls	r3, r3, #1
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	1ad3      	subs	r3, r2, r3
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	b21b      	sxth	r3, r3
 800e100:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800e104:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e106:	9201      	str	r2, [sp, #4]
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	2302      	movs	r3, #2
 800e10c:	4622      	mov	r2, r4
 800e10e:	f7ff fd56 	bl	800dbbe <fillCircleHelper>
	ILI9341_Unselect();
 800e112:	f7fe fe8f 	bl	800ce34 <ILI9341_Unselect>
}
 800e116:	bf00      	nop
 800e118:	3714      	adds	r7, #20
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd90      	pop	{r4, r7, pc}

0800e11e <drawCircle>:
 @param    x0   Center-point x coordinate
 @param    y0   Center-point y coordinate
 @param    r   Radius of circle
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 800e11e:	b590      	push	{r4, r7, lr}
 800e120:	b087      	sub	sp, #28
 800e122:	af00      	add	r7, sp, #0
 800e124:	4604      	mov	r4, r0
 800e126:	4608      	mov	r0, r1
 800e128:	4611      	mov	r1, r2
 800e12a:	461a      	mov	r2, r3
 800e12c:	4623      	mov	r3, r4
 800e12e:	80fb      	strh	r3, [r7, #6]
 800e130:	4603      	mov	r3, r0
 800e132:	80bb      	strh	r3, [r7, #4]
 800e134:	460b      	mov	r3, r1
 800e136:	807b      	strh	r3, [r7, #2]
 800e138:	4613      	mov	r3, r2
 800e13a:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 800e13c:	887b      	ldrh	r3, [r7, #2]
 800e13e:	f1c3 0301 	rsb	r3, r3, #1
 800e142:	b29b      	uxth	r3, r3
 800e144:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800e146:	2301      	movs	r3, #1
 800e148:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800e14a:	887b      	ldrh	r3, [r7, #2]
 800e14c:	461a      	mov	r2, r3
 800e14e:	03d2      	lsls	r2, r2, #15
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	005b      	lsls	r3, r3, #1
 800e154:	b29b      	uxth	r3, r3
 800e156:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800e158:	2300      	movs	r3, #0
 800e15a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800e15c:	887b      	ldrh	r3, [r7, #2]
 800e15e:	81fb      	strh	r3, [r7, #14]

	ILI9341_Select();
 800e160:	f7fe fe58 	bl	800ce14 <ILI9341_Select>
	ILI9341_DrawPixel(x0, y0 + r, color);
 800e164:	88f8      	ldrh	r0, [r7, #6]
 800e166:	88ba      	ldrh	r2, [r7, #4]
 800e168:	887b      	ldrh	r3, [r7, #2]
 800e16a:	4413      	add	r3, r2
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	883a      	ldrh	r2, [r7, #0]
 800e170:	4619      	mov	r1, r3
 800e172:	f7ff f841 	bl	800d1f8 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0, y0 - r, color);
 800e176:	88f8      	ldrh	r0, [r7, #6]
 800e178:	88ba      	ldrh	r2, [r7, #4]
 800e17a:	887b      	ldrh	r3, [r7, #2]
 800e17c:	1ad3      	subs	r3, r2, r3
 800e17e:	b29b      	uxth	r3, r3
 800e180:	883a      	ldrh	r2, [r7, #0]
 800e182:	4619      	mov	r1, r3
 800e184:	f7ff f838 	bl	800d1f8 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0 + r, y0, color);
 800e188:	88fa      	ldrh	r2, [r7, #6]
 800e18a:	887b      	ldrh	r3, [r7, #2]
 800e18c:	4413      	add	r3, r2
 800e18e:	b29b      	uxth	r3, r3
 800e190:	88b9      	ldrh	r1, [r7, #4]
 800e192:	883a      	ldrh	r2, [r7, #0]
 800e194:	4618      	mov	r0, r3
 800e196:	f7ff f82f 	bl	800d1f8 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0 - r, y0, color);
 800e19a:	88fa      	ldrh	r2, [r7, #6]
 800e19c:	887b      	ldrh	r3, [r7, #2]
 800e19e:	1ad3      	subs	r3, r2, r3
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	88b9      	ldrh	r1, [r7, #4]
 800e1a4:	883a      	ldrh	r2, [r7, #0]
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7ff f826 	bl	800d1f8 <ILI9341_DrawPixel>

	while (x < y) {
 800e1ac:	e081      	b.n	800e2b2 <drawCircle+0x194>
		if (f >= 0) {
 800e1ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	db0e      	blt.n	800e1d4 <drawCircle+0xb6>
			y--;
 800e1b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	3b01      	subs	r3, #1
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800e1c2:	8a7b      	ldrh	r3, [r7, #18]
 800e1c4:	3302      	adds	r3, #2
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800e1ca:	8afa      	ldrh	r2, [r7, #22]
 800e1cc:	8a7b      	ldrh	r3, [r7, #18]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800e1d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	3301      	adds	r3, #1
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800e1e0:	8abb      	ldrh	r3, [r7, #20]
 800e1e2:	3302      	adds	r3, #2
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800e1e8:	8afa      	ldrh	r2, [r7, #22]
 800e1ea:	8abb      	ldrh	r3, [r7, #20]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	82fb      	strh	r3, [r7, #22]

		ILI9341_DrawPixel(x0 + x, y0 + y, color);
 800e1f2:	88fa      	ldrh	r2, [r7, #6]
 800e1f4:	8a3b      	ldrh	r3, [r7, #16]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	b298      	uxth	r0, r3
 800e1fa:	88ba      	ldrh	r2, [r7, #4]
 800e1fc:	89fb      	ldrh	r3, [r7, #14]
 800e1fe:	4413      	add	r3, r2
 800e200:	b29b      	uxth	r3, r3
 800e202:	883a      	ldrh	r2, [r7, #0]
 800e204:	4619      	mov	r1, r3
 800e206:	f7fe fff7 	bl	800d1f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - x, y0 + y, color);
 800e20a:	88fa      	ldrh	r2, [r7, #6]
 800e20c:	8a3b      	ldrh	r3, [r7, #16]
 800e20e:	1ad3      	subs	r3, r2, r3
 800e210:	b298      	uxth	r0, r3
 800e212:	88ba      	ldrh	r2, [r7, #4]
 800e214:	89fb      	ldrh	r3, [r7, #14]
 800e216:	4413      	add	r3, r2
 800e218:	b29b      	uxth	r3, r3
 800e21a:	883a      	ldrh	r2, [r7, #0]
 800e21c:	4619      	mov	r1, r3
 800e21e:	f7fe ffeb 	bl	800d1f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + x, y0 - y, color);
 800e222:	88fa      	ldrh	r2, [r7, #6]
 800e224:	8a3b      	ldrh	r3, [r7, #16]
 800e226:	4413      	add	r3, r2
 800e228:	b298      	uxth	r0, r3
 800e22a:	88ba      	ldrh	r2, [r7, #4]
 800e22c:	89fb      	ldrh	r3, [r7, #14]
 800e22e:	1ad3      	subs	r3, r2, r3
 800e230:	b29b      	uxth	r3, r3
 800e232:	883a      	ldrh	r2, [r7, #0]
 800e234:	4619      	mov	r1, r3
 800e236:	f7fe ffdf 	bl	800d1f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - x, y0 - y, color);
 800e23a:	88fa      	ldrh	r2, [r7, #6]
 800e23c:	8a3b      	ldrh	r3, [r7, #16]
 800e23e:	1ad3      	subs	r3, r2, r3
 800e240:	b298      	uxth	r0, r3
 800e242:	88ba      	ldrh	r2, [r7, #4]
 800e244:	89fb      	ldrh	r3, [r7, #14]
 800e246:	1ad3      	subs	r3, r2, r3
 800e248:	b29b      	uxth	r3, r3
 800e24a:	883a      	ldrh	r2, [r7, #0]
 800e24c:	4619      	mov	r1, r3
 800e24e:	f7fe ffd3 	bl	800d1f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + y, y0 + x, color);
 800e252:	88fa      	ldrh	r2, [r7, #6]
 800e254:	89fb      	ldrh	r3, [r7, #14]
 800e256:	4413      	add	r3, r2
 800e258:	b298      	uxth	r0, r3
 800e25a:	88ba      	ldrh	r2, [r7, #4]
 800e25c:	8a3b      	ldrh	r3, [r7, #16]
 800e25e:	4413      	add	r3, r2
 800e260:	b29b      	uxth	r3, r3
 800e262:	883a      	ldrh	r2, [r7, #0]
 800e264:	4619      	mov	r1, r3
 800e266:	f7fe ffc7 	bl	800d1f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - y, y0 + x, color);
 800e26a:	88fa      	ldrh	r2, [r7, #6]
 800e26c:	89fb      	ldrh	r3, [r7, #14]
 800e26e:	1ad3      	subs	r3, r2, r3
 800e270:	b298      	uxth	r0, r3
 800e272:	88ba      	ldrh	r2, [r7, #4]
 800e274:	8a3b      	ldrh	r3, [r7, #16]
 800e276:	4413      	add	r3, r2
 800e278:	b29b      	uxth	r3, r3
 800e27a:	883a      	ldrh	r2, [r7, #0]
 800e27c:	4619      	mov	r1, r3
 800e27e:	f7fe ffbb 	bl	800d1f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + y, y0 - x, color);
 800e282:	88fa      	ldrh	r2, [r7, #6]
 800e284:	89fb      	ldrh	r3, [r7, #14]
 800e286:	4413      	add	r3, r2
 800e288:	b298      	uxth	r0, r3
 800e28a:	88ba      	ldrh	r2, [r7, #4]
 800e28c:	8a3b      	ldrh	r3, [r7, #16]
 800e28e:	1ad3      	subs	r3, r2, r3
 800e290:	b29b      	uxth	r3, r3
 800e292:	883a      	ldrh	r2, [r7, #0]
 800e294:	4619      	mov	r1, r3
 800e296:	f7fe ffaf 	bl	800d1f8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - y, y0 - x, color);
 800e29a:	88fa      	ldrh	r2, [r7, #6]
 800e29c:	89fb      	ldrh	r3, [r7, #14]
 800e29e:	1ad3      	subs	r3, r2, r3
 800e2a0:	b298      	uxth	r0, r3
 800e2a2:	88ba      	ldrh	r2, [r7, #4]
 800e2a4:	8a3b      	ldrh	r3, [r7, #16]
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	883a      	ldrh	r2, [r7, #0]
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	f7fe ffa3 	bl	800d1f8 <ILI9341_DrawPixel>
	while (x < y) {
 800e2b2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800e2b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	f6ff af77 	blt.w	800e1ae <drawCircle+0x90>
	}
	ILI9341_Unselect();
 800e2c0:	f7fe fdb8 	bl	800ce34 <ILI9341_Unselect>
}
 800e2c4:	bf00      	nop
 800e2c6:	371c      	adds	r7, #28
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd90      	pop	{r4, r7, pc}

0800e2cc <ILI9341_ToucInit>:
uint32_t minRawY;
uint32_t maxRawY;
uint32_t minX, maxX, minY, maxY;
//------------------------------ функции ---------------------------------------------//

void ILI9341_ToucInit(void) {
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
	uint32_t *tempAdr = (uint32_t*) ADR_DATA_MIN_X;
 800e2d2:	4b0f      	ldr	r3, [pc, #60]	; (800e310 <ILI9341_ToucInit+0x44>)
 800e2d4:	607b      	str	r3, [r7, #4]
	minRawX = *tempAdr;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a0e      	ldr	r2, [pc, #56]	; (800e314 <ILI9341_ToucInit+0x48>)
 800e2dc:	6013      	str	r3, [r2, #0]
	tempAdr = (uint32_t*) ADR_DATA_MAX_X;
 800e2de:	4b0e      	ldr	r3, [pc, #56]	; (800e318 <ILI9341_ToucInit+0x4c>)
 800e2e0:	607b      	str	r3, [r7, #4]
	maxRawX = *tempAdr;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a0d      	ldr	r2, [pc, #52]	; (800e31c <ILI9341_ToucInit+0x50>)
 800e2e8:	6013      	str	r3, [r2, #0]
	tempAdr = (uint32_t*) ADR_DATA_MIN_Y;
 800e2ea:	4b0d      	ldr	r3, [pc, #52]	; (800e320 <ILI9341_ToucInit+0x54>)
 800e2ec:	607b      	str	r3, [r7, #4]
	minRawY = *tempAdr;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4a0c      	ldr	r2, [pc, #48]	; (800e324 <ILI9341_ToucInit+0x58>)
 800e2f4:	6013      	str	r3, [r2, #0]
	tempAdr = (uint32_t*) ADR_DATA_MAX_Y;
 800e2f6:	4b0c      	ldr	r3, [pc, #48]	; (800e328 <ILI9341_ToucInit+0x5c>)
 800e2f8:	607b      	str	r3, [r7, #4]
	maxRawY = *tempAdr;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4a0b      	ldr	r2, [pc, #44]	; (800e32c <ILI9341_ToucInit+0x60>)
 800e300:	6013      	str	r3, [r2, #0]
}
 800e302:	bf00      	nop
 800e304:	370c      	adds	r7, #12
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr
 800e30e:	bf00      	nop
 800e310:	08004000 	.word	0x08004000
 800e314:	20000258 	.word	0x20000258
 800e318:	08004004 	.word	0x08004004
 800e31c:	2000025c 	.word	0x2000025c
 800e320:	08004008 	.word	0x08004008
 800e324:	20000260 	.word	0x20000260
 800e328:	0800400c 	.word	0x0800400c
 800e32c:	20000264 	.word	0x20000264

0800e330 <ILI9341_TouchSelect>:
/**************************************************************************
 @brief     will return the modulus of the num like abs in C
 @param    num  incoming number
 **************************************************************************/
static void ILI9341_TouchSelect() {
 800e330:	b580      	push	{r7, lr}
 800e332:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
 800e334:	2200      	movs	r2, #0
 800e336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e33a:	4802      	ldr	r0, [pc, #8]	; (800e344 <ILI9341_TouchSelect+0x14>)
 800e33c:	f004 fa08 	bl	8012750 <HAL_GPIO_WritePin>
}
 800e340:	bf00      	nop
 800e342:	bd80      	pop	{r7, pc}
 800e344:	40020000 	.word	0x40020000

0800e348 <ILI9341_TouchUnselect>:
/**************************************************************************
 @brief     swaps values in variables
 @param    a  num first
 @param    a  num two
 **************************************************************************/
void ILI9341_TouchUnselect() {
 800e348:	b580      	push	{r7, lr}
 800e34a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 800e34c:	2201      	movs	r2, #1
 800e34e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e352:	4802      	ldr	r0, [pc, #8]	; (800e35c <ILI9341_TouchUnselect+0x14>)
 800e354:	f004 f9fc 	bl	8012750 <HAL_GPIO_WritePin>
}
 800e358:	bf00      	nop
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	40020000 	.word	0x40020000

0800e360 <flipX>:

uint32_t flipX(uint32_t x) {            // костыли для перевернутого дисплея!!
 800e360:	b480      	push	{r7}
 800e362:	b083      	sub	sp, #12
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
    return 320 - x;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
}
 800e36e:	4618      	mov	r0, r3
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr

0800e37a <flipY>:

uint32_t flipY(uint32_t y) {
 800e37a:	b480      	push	{r7}
 800e37c:	b083      	sub	sp, #12
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
    return 240 - y;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
}
 800e388:	4618      	mov	r0, r3
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <ILI9341_TouchPressed>:

bool ILI9341_TouchPressed() {
 800e394:	b580      	push	{r7, lr}
 800e396:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(ILI9341_TOUCH_IRQ_GPIO_Port, ILI9341_TOUCH_IRQ_Pin) == GPIO_PIN_RESET;
 800e398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e39c:	4805      	ldr	r0, [pc, #20]	; (800e3b4 <ILI9341_TouchPressed+0x20>)
 800e39e:	f004 f9bf 	bl	8012720 <HAL_GPIO_ReadPin>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	bf0c      	ite	eq
 800e3a8:	2301      	moveq	r3, #1
 800e3aa:	2300      	movne	r3, #0
 800e3ac:	b2db      	uxtb	r3, r3
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	40020000 	.word	0x40020000

0800e3b8 <ILI9341_TouchGetCoordinates>:

bool ILI9341_TouchGetCoordinates(uint16_t *x, uint16_t *y) {
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08e      	sub	sp, #56	; 0x38
 800e3bc:	af02      	add	r7, sp, #8
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
	static const uint8_t cmd_read_x[] = { READ_X };
	static const uint8_t cmd_read_y[] = { READ_Y };
	static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

	ILI9341_TouchSelect();
 800e3c2:	f7ff ffb5 	bl	800e330 <ILI9341_TouchSelect>

	uint32_t avg_x = 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t avg_y = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t nsamples = 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < 16; i++) {
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e3da:	e04b      	b.n	800e474 <ILI9341_TouchGetCoordinates+0xbc>
		if (!ILI9341_TouchPressed())
 800e3dc:	f7ff ffda 	bl	800e394 <ILI9341_TouchPressed>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	f083 0301 	eor.w	r3, r3, #1
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d148      	bne.n	800e47e <ILI9341_TouchGetCoordinates+0xc6>
			break;

		nsamples++;
 800e3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 800e3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	4951      	ldr	r1, [pc, #324]	; (800e544 <ILI9341_TouchGetCoordinates+0x18c>)
 800e3fe:	4852      	ldr	r0, [pc, #328]	; (800e548 <ILI9341_TouchGetCoordinates+0x190>)
 800e400:	f004 fead 	bl	801315e <HAL_SPI_Transmit>
		uint8_t y_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 800e404:	f107 0210 	add.w	r2, r7, #16
 800e408:	f04f 33ff 	mov.w	r3, #4294967295
 800e40c:	9300      	str	r3, [sp, #0]
 800e40e:	2302      	movs	r3, #2
 800e410:	494e      	ldr	r1, [pc, #312]	; (800e54c <ILI9341_TouchGetCoordinates+0x194>)
 800e412:	484d      	ldr	r0, [pc, #308]	; (800e548 <ILI9341_TouchGetCoordinates+0x190>)
 800e414:	f004 ffdf 	bl	80133d6 <HAL_SPI_TransmitReceive>

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 800e418:	f04f 33ff 	mov.w	r3, #4294967295
 800e41c:	2201      	movs	r2, #1
 800e41e:	494c      	ldr	r1, [pc, #304]	; (800e550 <ILI9341_TouchGetCoordinates+0x198>)
 800e420:	4849      	ldr	r0, [pc, #292]	; (800e548 <ILI9341_TouchGetCoordinates+0x190>)
 800e422:	f004 fe9c 	bl	801315e <HAL_SPI_Transmit>
		uint8_t x_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 800e426:	f107 020c 	add.w	r2, r7, #12
 800e42a:	f04f 33ff 	mov.w	r3, #4294967295
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	2302      	movs	r3, #2
 800e432:	4946      	ldr	r1, [pc, #280]	; (800e54c <ILI9341_TouchGetCoordinates+0x194>)
 800e434:	4844      	ldr	r0, [pc, #272]	; (800e548 <ILI9341_TouchGetCoordinates+0x190>)
 800e436:	f004 ffce 	bl	80133d6 <HAL_SPI_TransmitReceive>

		uint32_t mirrorX = ((((uint16_t) x_raw[0]) << 8) | (uint16_t) x_raw[1]);
 800e43a:	7b3b      	ldrb	r3, [r7, #12]
 800e43c:	021b      	lsls	r3, r3, #8
 800e43e:	7b7a      	ldrb	r2, [r7, #13]
 800e440:	4313      	orrs	r3, r2
 800e442:	61bb      	str	r3, [r7, #24]
		avg_x += (mirrorX >> 3) & 0xFFF;
 800e444:	69bb      	ldr	r3, [r7, #24]
 800e446:	08db      	lsrs	r3, r3, #3
 800e448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e44c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e44e:	4413      	add	r3, r2
 800e450:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t mirrorY = ((((uint16_t) y_raw[0]) << 8) | (uint16_t) y_raw[1]);
 800e452:	7c3b      	ldrb	r3, [r7, #16]
 800e454:	021b      	lsls	r3, r3, #8
 800e456:	7c7a      	ldrb	r2, [r7, #17]
 800e458:	4313      	orrs	r3, r2
 800e45a:	617b      	str	r3, [r7, #20]
		avg_y += (mirrorY >> 3) & 0xFFF;
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	08db      	lsrs	r3, r3, #3
 800e460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e466:	4413      	add	r3, r2
 800e468:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < 16; i++) {
 800e46a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e46e:	3301      	adds	r3, #1
 800e470:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e478:	2b0f      	cmp	r3, #15
 800e47a:	d9af      	bls.n	800e3dc <ILI9341_TouchGetCoordinates+0x24>
 800e47c:	e000      	b.n	800e480 <ILI9341_TouchGetCoordinates+0xc8>
			break;
 800e47e:	bf00      	nop
	}

	ILI9341_TouchUnselect();
 800e480:	f7ff ff62 	bl	800e348 <ILI9341_TouchUnselect>

	if (nsamples < 16)
 800e484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e488:	2b0f      	cmp	r3, #15
 800e48a:	d801      	bhi.n	800e490 <ILI9341_TouchGetCoordinates+0xd8>
		return false;
 800e48c:	2300      	movs	r3, #0
 800e48e:	e054      	b.n	800e53a <ILI9341_TouchGetCoordinates+0x182>

	uint32_t raw_x = (avg_x / 16);
 800e490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e492:	091b      	lsrs	r3, r3, #4
 800e494:	623b      	str	r3, [r7, #32]
	if (raw_x < minRawX)
 800e496:	4b2f      	ldr	r3, [pc, #188]	; (800e554 <ILI9341_TouchGetCoordinates+0x19c>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	6a3a      	ldr	r2, [r7, #32]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d202      	bcs.n	800e4a6 <ILI9341_TouchGetCoordinates+0xee>
		raw_x = minRawX;
 800e4a0:	4b2c      	ldr	r3, [pc, #176]	; (800e554 <ILI9341_TouchGetCoordinates+0x19c>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	623b      	str	r3, [r7, #32]
	if (raw_x > maxRawX)
 800e4a6:	4b2c      	ldr	r3, [pc, #176]	; (800e558 <ILI9341_TouchGetCoordinates+0x1a0>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	6a3a      	ldr	r2, [r7, #32]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d902      	bls.n	800e4b6 <ILI9341_TouchGetCoordinates+0xfe>
		raw_x = maxRawX;
 800e4b0:	4b29      	ldr	r3, [pc, #164]	; (800e558 <ILI9341_TouchGetCoordinates+0x1a0>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	623b      	str	r3, [r7, #32]

	uint32_t raw_y = (avg_y / 16);
 800e4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b8:	091b      	lsrs	r3, r3, #4
 800e4ba:	61fb      	str	r3, [r7, #28]
	if (raw_y < minRawY)
 800e4bc:	4b27      	ldr	r3, [pc, #156]	; (800e55c <ILI9341_TouchGetCoordinates+0x1a4>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	69fa      	ldr	r2, [r7, #28]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d202      	bcs.n	800e4cc <ILI9341_TouchGetCoordinates+0x114>
		raw_y = minRawY;
 800e4c6:	4b25      	ldr	r3, [pc, #148]	; (800e55c <ILI9341_TouchGetCoordinates+0x1a4>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	61fb      	str	r3, [r7, #28]
	if (raw_y > maxRawY)
 800e4cc:	4b24      	ldr	r3, [pc, #144]	; (800e560 <ILI9341_TouchGetCoordinates+0x1a8>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	69fa      	ldr	r2, [r7, #28]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d902      	bls.n	800e4dc <ILI9341_TouchGetCoordinates+0x124>
		raw_y = maxRawY;
 800e4d6:	4b22      	ldr	r3, [pc, #136]	; (800e560 <ILI9341_TouchGetCoordinates+0x1a8>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	61fb      	str	r3, [r7, #28]

	// Uncomment this line to calibrate touchscreen:
	// UART_Printf("raw_x = %d, raw_y = %d\r\n", x, y);

	*x = flipX((raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX));       // если дисплей не перевернут убрать flipX и flipY
 800e4dc:	4b1d      	ldr	r3, [pc, #116]	; (800e554 <ILI9341_TouchGetCoordinates+0x19c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6a3a      	ldr	r2, [r7, #32]
 800e4e2:	1ad2      	subs	r2, r2, r3
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	4413      	add	r3, r2
 800e4ea:	019b      	lsls	r3, r3, #6
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	4b1a      	ldr	r3, [pc, #104]	; (800e558 <ILI9341_TouchGetCoordinates+0x1a0>)
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	4b18      	ldr	r3, [pc, #96]	; (800e554 <ILI9341_TouchGetCoordinates+0x19c>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	1ad3      	subs	r3, r2, r3
 800e4f8:	fbb1 f3f3 	udiv	r3, r1, r3
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7ff ff2f 	bl	800e360 <flipX>
 800e502:	4603      	mov	r3, r0
 800e504:	b29a      	uxth	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	801a      	strh	r2, [r3, #0]
	*y = flipY((raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY));
 800e50a:	4b14      	ldr	r3, [pc, #80]	; (800e55c <ILI9341_TouchGetCoordinates+0x1a4>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	69fa      	ldr	r2, [r7, #28]
 800e510:	1ad2      	subs	r2, r2, r3
 800e512:	4613      	mov	r3, r2
 800e514:	011b      	lsls	r3, r3, #4
 800e516:	1a9b      	subs	r3, r3, r2
 800e518:	011b      	lsls	r3, r3, #4
 800e51a:	4619      	mov	r1, r3
 800e51c:	4b10      	ldr	r3, [pc, #64]	; (800e560 <ILI9341_TouchGetCoordinates+0x1a8>)
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	4b0e      	ldr	r3, [pc, #56]	; (800e55c <ILI9341_TouchGetCoordinates+0x1a4>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	1ad3      	subs	r3, r2, r3
 800e526:	fbb1 f3f3 	udiv	r3, r1, r3
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7ff ff25 	bl	800e37a <flipY>
 800e530:	4603      	mov	r3, r0
 800e532:	b29a      	uxth	r2, r3
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	801a      	strh	r2, [r3, #0]

	return true;
 800e538:	2301      	movs	r3, #1
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3730      	adds	r7, #48	; 0x30
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	080217cc 	.word	0x080217cc
 800e548:	200003b0 	.word	0x200003b0
 800e54c:	080217d0 	.word	0x080217d0
 800e550:	080217d4 	.word	0x080217d4
 800e554:	20000258 	.word	0x20000258
 800e558:	2000025c 	.word	0x2000025c
 800e55c:	20000260 	.word	0x20000260
 800e560:	20000264 	.word	0x20000264

0800e564 <figuringData>:

void figuringData(void) {
 800e564:	b480      	push	{r7}
 800e566:	b083      	sub	sp, #12
 800e568:	af00      	add	r7, sp, #0
	uint32_t multiplicationFactorX, multiplicationFactorY;
	minX = minX / 2;                               // ищем минимальное среднее на всем отрезке
 800e56a:	4b29      	ldr	r3, [pc, #164]	; (800e610 <figuringData+0xac>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	085b      	lsrs	r3, r3, #1
 800e570:	4a27      	ldr	r2, [pc, #156]	; (800e610 <figuringData+0xac>)
 800e572:	6013      	str	r3, [r2, #0]
	minY = minY / 2;
 800e574:	4b27      	ldr	r3, [pc, #156]	; (800e614 <figuringData+0xb0>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	085b      	lsrs	r3, r3, #1
 800e57a:	4a26      	ldr	r2, [pc, #152]	; (800e614 <figuringData+0xb0>)
 800e57c:	6013      	str	r3, [r2, #0]
	maxX = maxX / 2;
 800e57e:	4b26      	ldr	r3, [pc, #152]	; (800e618 <figuringData+0xb4>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	085b      	lsrs	r3, r3, #1
 800e584:	4a24      	ldr	r2, [pc, #144]	; (800e618 <figuringData+0xb4>)
 800e586:	6013      	str	r3, [r2, #0]
	maxY = maxY / 2;
 800e588:	4b24      	ldr	r3, [pc, #144]	; (800e61c <figuringData+0xb8>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	085b      	lsrs	r3, r3, #1
 800e58e:	4a23      	ldr	r2, [pc, #140]	; (800e61c <figuringData+0xb8>)
 800e590:	6013      	str	r3, [r2, #0]
	multiplicationFactorX = (maxX - minX) / 300;   // так как у нас отступ с обоих сторон 10 то рабочая область 300
 800e592:	4b21      	ldr	r3, [pc, #132]	; (800e618 <figuringData+0xb4>)
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	4b1e      	ldr	r3, [pc, #120]	; (800e610 <figuringData+0xac>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	1ad3      	subs	r3, r2, r3
 800e59c:	4a20      	ldr	r2, [pc, #128]	; (800e620 <figuringData+0xbc>)
 800e59e:	fba2 2303 	umull	r2, r3, r2, r3
 800e5a2:	095b      	lsrs	r3, r3, #5
 800e5a4:	607b      	str	r3, [r7, #4]
	multiplicationFactorY = (maxY - minY) / 220;   // узнаем сколько единиц тача на 1 пиксель
 800e5a6:	4b1d      	ldr	r3, [pc, #116]	; (800e61c <figuringData+0xb8>)
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	4b1a      	ldr	r3, [pc, #104]	; (800e614 <figuringData+0xb0>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	1ad3      	subs	r3, r2, r3
 800e5b0:	089b      	lsrs	r3, r3, #2
 800e5b2:	4a1c      	ldr	r2, [pc, #112]	; (800e624 <figuringData+0xc0>)
 800e5b4:	fba2 2303 	umull	r2, r3, r2, r3
 800e5b8:	085b      	lsrs	r3, r3, #1
 800e5ba:	603b      	str	r3, [r7, #0]
	multiplicationFactorX = multiplicationFactorX * 10;  // так как нужно узнать сколько на 10 пикселей примерно отсчетов тача
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	4613      	mov	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	005b      	lsls	r3, r3, #1
 800e5c6:	607b      	str	r3, [r7, #4]
	multiplicationFactorY = multiplicationFactorY * 10;
 800e5c8:	683a      	ldr	r2, [r7, #0]
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	4413      	add	r3, r2
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	603b      	str	r3, [r7, #0]
	minRawX = minX - multiplicationFactorX;
 800e5d4:	4b0e      	ldr	r3, [pc, #56]	; (800e610 <figuringData+0xac>)
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	1ad3      	subs	r3, r2, r3
 800e5dc:	4a12      	ldr	r2, [pc, #72]	; (800e628 <figuringData+0xc4>)
 800e5de:	6013      	str	r3, [r2, #0]
	maxRawX = maxX + multiplicationFactorX;
 800e5e0:	4b0d      	ldr	r3, [pc, #52]	; (800e618 <figuringData+0xb4>)
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	4a10      	ldr	r2, [pc, #64]	; (800e62c <figuringData+0xc8>)
 800e5ea:	6013      	str	r3, [r2, #0]
	minRawY = minY - multiplicationFactorY;
 800e5ec:	4b09      	ldr	r3, [pc, #36]	; (800e614 <figuringData+0xb0>)
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	4a0e      	ldr	r2, [pc, #56]	; (800e630 <figuringData+0xcc>)
 800e5f6:	6013      	str	r3, [r2, #0]
	maxRawY = maxY + multiplicationFactorY;
 800e5f8:	4b08      	ldr	r3, [pc, #32]	; (800e61c <figuringData+0xb8>)
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	4413      	add	r3, r2
 800e600:	4a0c      	ldr	r2, [pc, #48]	; (800e634 <figuringData+0xd0>)
 800e602:	6013      	str	r3, [r2, #0]
}
 800e604:	bf00      	nop
 800e606:	370c      	adds	r7, #12
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr
 800e610:	20000268 	.word	0x20000268
 800e614:	20000270 	.word	0x20000270
 800e618:	2000026c 	.word	0x2000026c
 800e61c:	20000274 	.word	0x20000274
 800e620:	1b4e81b5 	.word	0x1b4e81b5
 800e624:	094f2095 	.word	0x094f2095
 800e628:	20000258 	.word	0x20000258
 800e62c:	2000025c 	.word	0x2000025c
 800e630:	20000260 	.word	0x20000260
 800e634:	20000264 	.word	0x20000264

0800e638 <calibTouch>:

uint8_t calibTouch(uint8_t poz) {
 800e638:	b580      	push	{r7, lr}
 800e63a:	b08e      	sub	sp, #56	; 0x38
 800e63c:	af02      	add	r7, sp, #8
 800e63e:	4603      	mov	r3, r0
 800e640:	71fb      	strb	r3, [r7, #7]
	static const uint8_t cmd_read_x[] = { READ_X };
	static const uint8_t cmd_read_y[] = { READ_Y };
	static const uint8_t zeroes_tx[] = { 0x00, 0x00 };
	repit: while (!ILI9341_TouchPressed()) ILI9341_TouchSelect();
 800e642:	e001      	b.n	800e648 <calibTouch+0x10>
 800e644:	f7ff fe74 	bl	800e330 <ILI9341_TouchSelect>
 800e648:	f7ff fea4 	bl	800e394 <ILI9341_TouchPressed>
 800e64c:	4603      	mov	r3, r0
 800e64e:	f083 0301 	eor.w	r3, r3, #1
 800e652:	b2db      	uxtb	r3, r3
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1f5      	bne.n	800e644 <calibTouch+0xc>
	uint32_t avg_x = 0;
 800e658:	2300      	movs	r3, #0
 800e65a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t avg_y = 0;
 800e65c:	2300      	movs	r3, #0
 800e65e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t nsamples = 0;
 800e660:	2300      	movs	r3, #0
 800e662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < 16; i++) {
 800e666:	2300      	movs	r3, #0
 800e668:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e66c:	e04b      	b.n	800e706 <calibTouch+0xce>
		if (!ILI9341_TouchPressed())
 800e66e:	f7ff fe91 	bl	800e394 <ILI9341_TouchPressed>
 800e672:	4603      	mov	r3, r0
 800e674:	f083 0301 	eor.w	r3, r3, #1
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d148      	bne.n	800e710 <calibTouch+0xd8>
			break;
		nsamples++;
 800e67e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e682:	3301      	adds	r3, #1
 800e684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 800e688:	f04f 33ff 	mov.w	r3, #4294967295
 800e68c:	2201      	movs	r2, #1
 800e68e:	4989      	ldr	r1, [pc, #548]	; (800e8b4 <calibTouch+0x27c>)
 800e690:	4889      	ldr	r0, [pc, #548]	; (800e8b8 <calibTouch+0x280>)
 800e692:	f004 fd64 	bl	801315e <HAL_SPI_Transmit>
		uint8_t y_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 800e696:	f107 0210 	add.w	r2, r7, #16
 800e69a:	f04f 33ff 	mov.w	r3, #4294967295
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	2302      	movs	r3, #2
 800e6a2:	4986      	ldr	r1, [pc, #536]	; (800e8bc <calibTouch+0x284>)
 800e6a4:	4884      	ldr	r0, [pc, #528]	; (800e8b8 <calibTouch+0x280>)
 800e6a6:	f004 fe96 	bl	80133d6 <HAL_SPI_TransmitReceive>

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 800e6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	4983      	ldr	r1, [pc, #524]	; (800e8c0 <calibTouch+0x288>)
 800e6b2:	4881      	ldr	r0, [pc, #516]	; (800e8b8 <calibTouch+0x280>)
 800e6b4:	f004 fd53 	bl	801315e <HAL_SPI_Transmit>
		uint8_t x_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 800e6b8:	f107 020c 	add.w	r2, r7, #12
 800e6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c0:	9300      	str	r3, [sp, #0]
 800e6c2:	2302      	movs	r3, #2
 800e6c4:	497d      	ldr	r1, [pc, #500]	; (800e8bc <calibTouch+0x284>)
 800e6c6:	487c      	ldr	r0, [pc, #496]	; (800e8b8 <calibTouch+0x280>)
 800e6c8:	f004 fe85 	bl	80133d6 <HAL_SPI_TransmitReceive>

		uint32_t mirrorX = ((((uint16_t) x_raw[0]) << 8) | (uint16_t) x_raw[1]);
 800e6cc:	7b3b      	ldrb	r3, [r7, #12]
 800e6ce:	021b      	lsls	r3, r3, #8
 800e6d0:	7b7a      	ldrb	r2, [r7, #13]
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	623b      	str	r3, [r7, #32]
		avg_x += (mirrorX >> 3) & 0xFFF;
 800e6d6:	6a3b      	ldr	r3, [r7, #32]
 800e6d8:	08db      	lsrs	r3, r3, #3
 800e6da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6e0:	4413      	add	r3, r2
 800e6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t mirrorY = ((((uint16_t) y_raw[0]) << 8) | (uint16_t) y_raw[1]);
 800e6e4:	7c3b      	ldrb	r3, [r7, #16]
 800e6e6:	021b      	lsls	r3, r3, #8
 800e6e8:	7c7a      	ldrb	r2, [r7, #17]
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	61fb      	str	r3, [r7, #28]
		avg_y += (mirrorY >> 3) & 0xFFF;
 800e6ee:	69fb      	ldr	r3, [r7, #28]
 800e6f0:	08db      	lsrs	r3, r3, #3
 800e6f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6f8:	4413      	add	r3, r2
 800e6fa:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < 16; i++) {
 800e6fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e700:	3301      	adds	r3, #1
 800e702:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e706:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e70a:	2b0f      	cmp	r3, #15
 800e70c:	d9af      	bls.n	800e66e <calibTouch+0x36>
 800e70e:	e000      	b.n	800e712 <calibTouch+0xda>
			break;
 800e710:	bf00      	nop
	}
	ILI9341_TouchUnselect();
 800e712:	f7ff fe19 	bl	800e348 <ILI9341_TouchUnselect>
	if (nsamples < 16)
 800e716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e71a:	2b0f      	cmp	r3, #15
 800e71c:	d800      	bhi.n	800e720 <calibTouch+0xe8>
		goto repit;
 800e71e:	e790      	b.n	800e642 <calibTouch+0xa>
	uint32_t raw_x = (avg_x / 16);
 800e720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e722:	091b      	lsrs	r3, r3, #4
 800e724:	61bb      	str	r3, [r7, #24]
	uint32_t raw_y = (avg_y / 16);
 800e726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e728:	091b      	lsrs	r3, r3, #4
 800e72a:	617b      	str	r3, [r7, #20]
	switch (poz) {                               // костыль костылем, ничего умнее не придумал, при калибровке точки повернул как будто дисплей уже повернут
 800e72c:	79fb      	ldrb	r3, [r7, #7]
 800e72e:	2b04      	cmp	r3, #4
 800e730:	f200 80ba 	bhi.w	800e8a8 <calibTouch+0x270>
 800e734:	a201      	add	r2, pc, #4	; (adr r2, 800e73c <calibTouch+0x104>)
 800e736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e73a:	bf00      	nop
 800e73c:	0800e751 	.word	0x0800e751
 800e740:	0800e765 	.word	0x0800e765
 800e744:	0800e77f 	.word	0x0800e77f
 800e748:	0800e799 	.word	0x0800e799
 800e74c:	0800e7bd 	.word	0x0800e7bd
	case LEFTUP:                                 // и у нас лево верх на самом деле право низ и тд
		maxX = raw_x;
 800e750:	4a5c      	ldr	r2, [pc, #368]	; (800e8c4 <calibTouch+0x28c>)
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	6013      	str	r3, [r2, #0]
		maxY = raw_y;
 800e756:	4a5c      	ldr	r2, [pc, #368]	; (800e8c8 <calibTouch+0x290>)
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
 800e75c:	2064      	movs	r0, #100	; 0x64
 800e75e:	f001 fd99 	bl	8010294 <buzzerSet>
		break;
 800e762:	e0a1      	b.n	800e8a8 <calibTouch+0x270>
	case RIGHTUP:
		minX = raw_x;
 800e764:	4a59      	ldr	r2, [pc, #356]	; (800e8cc <calibTouch+0x294>)
 800e766:	69bb      	ldr	r3, [r7, #24]
 800e768:	6013      	str	r3, [r2, #0]
		maxY += raw_y;
 800e76a:	4b57      	ldr	r3, [pc, #348]	; (800e8c8 <calibTouch+0x290>)
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	4413      	add	r3, r2
 800e772:	4a55      	ldr	r2, [pc, #340]	; (800e8c8 <calibTouch+0x290>)
 800e774:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
 800e776:	2064      	movs	r0, #100	; 0x64
 800e778:	f001 fd8c 	bl	8010294 <buzzerSet>
		break;
 800e77c:	e094      	b.n	800e8a8 <calibTouch+0x270>
	case LEFTDOWN:
		maxX += raw_x;
 800e77e:	4b51      	ldr	r3, [pc, #324]	; (800e8c4 <calibTouch+0x28c>)
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	4413      	add	r3, r2
 800e786:	4a4f      	ldr	r2, [pc, #316]	; (800e8c4 <calibTouch+0x28c>)
 800e788:	6013      	str	r3, [r2, #0]
		minY = raw_y;
 800e78a:	4a51      	ldr	r2, [pc, #324]	; (800e8d0 <calibTouch+0x298>)
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
 800e790:	2064      	movs	r0, #100	; 0x64
 800e792:	f001 fd7f 	bl	8010294 <buzzerSet>
		break;
 800e796:	e087      	b.n	800e8a8 <calibTouch+0x270>
	case RIGHTDOWN:
		minX += raw_x;
 800e798:	4b4c      	ldr	r3, [pc, #304]	; (800e8cc <calibTouch+0x294>)
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	4413      	add	r3, r2
 800e7a0:	4a4a      	ldr	r2, [pc, #296]	; (800e8cc <calibTouch+0x294>)
 800e7a2:	6013      	str	r3, [r2, #0]
		minY += raw_y;
 800e7a4:	4b4a      	ldr	r3, [pc, #296]	; (800e8d0 <calibTouch+0x298>)
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	4a48      	ldr	r2, [pc, #288]	; (800e8d0 <calibTouch+0x298>)
 800e7ae:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
 800e7b0:	2064      	movs	r0, #100	; 0x64
 800e7b2:	f001 fd6f 	bl	8010294 <buzzerSet>
		figuringData();
 800e7b6:	f7ff fed5 	bl	800e564 <figuringData>
		break;
 800e7ba:	e075      	b.n	800e8a8 <calibTouch+0x270>
	case CHECKCALIB:
		buzzerSet(100);
 800e7bc:	2064      	movs	r0, #100	; 0x64
 800e7be:	f001 fd69 	bl	8010294 <buzzerSet>
		if (((flipY((raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY))) < 125 && (flipY((raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY))) > 115) \
 800e7c2:	4b44      	ldr	r3, [pc, #272]	; (800e8d4 <calibTouch+0x29c>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	1ad2      	subs	r2, r2, r3
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	011b      	lsls	r3, r3, #4
 800e7ce:	1a9b      	subs	r3, r3, r2
 800e7d0:	011b      	lsls	r3, r3, #4
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	4b40      	ldr	r3, [pc, #256]	; (800e8d8 <calibTouch+0x2a0>)
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	4b3e      	ldr	r3, [pc, #248]	; (800e8d4 <calibTouch+0x29c>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	1ad3      	subs	r3, r2, r3
 800e7de:	fbb1 f3f3 	udiv	r3, r1, r3
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7ff fdc9 	bl	800e37a <flipY>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b7c      	cmp	r3, #124	; 0x7c
 800e7ec:	d85a      	bhi.n	800e8a4 <calibTouch+0x26c>
 800e7ee:	4b39      	ldr	r3, [pc, #228]	; (800e8d4 <calibTouch+0x29c>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	697a      	ldr	r2, [r7, #20]
 800e7f4:	1ad2      	subs	r2, r2, r3
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	011b      	lsls	r3, r3, #4
 800e7fa:	1a9b      	subs	r3, r3, r2
 800e7fc:	011b      	lsls	r3, r3, #4
 800e7fe:	4619      	mov	r1, r3
 800e800:	4b35      	ldr	r3, [pc, #212]	; (800e8d8 <calibTouch+0x2a0>)
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	4b33      	ldr	r3, [pc, #204]	; (800e8d4 <calibTouch+0x29c>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	1ad3      	subs	r3, r2, r3
 800e80a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e80e:	4618      	mov	r0, r3
 800e810:	f7ff fdb3 	bl	800e37a <flipY>
 800e814:	4603      	mov	r3, r0
 800e816:	2b73      	cmp	r3, #115	; 0x73
 800e818:	d944      	bls.n	800e8a4 <calibTouch+0x26c>
		&& ((flipX((raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX))) < 165 && (flipX((raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX)) > 155))){
 800e81a:	4b30      	ldr	r3, [pc, #192]	; (800e8dc <calibTouch+0x2a4>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	69ba      	ldr	r2, [r7, #24]
 800e820:	1ad2      	subs	r2, r2, r3
 800e822:	4613      	mov	r3, r2
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	4413      	add	r3, r2
 800e828:	019b      	lsls	r3, r3, #6
 800e82a:	4619      	mov	r1, r3
 800e82c:	4b2c      	ldr	r3, [pc, #176]	; (800e8e0 <calibTouch+0x2a8>)
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	4b2a      	ldr	r3, [pc, #168]	; (800e8dc <calibTouch+0x2a4>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	1ad3      	subs	r3, r2, r3
 800e836:	fbb1 f3f3 	udiv	r3, r1, r3
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7ff fd90 	bl	800e360 <flipX>
 800e840:	4603      	mov	r3, r0
 800e842:	2ba4      	cmp	r3, #164	; 0xa4
 800e844:	d82e      	bhi.n	800e8a4 <calibTouch+0x26c>
 800e846:	4b25      	ldr	r3, [pc, #148]	; (800e8dc <calibTouch+0x2a4>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	69ba      	ldr	r2, [r7, #24]
 800e84c:	1ad2      	subs	r2, r2, r3
 800e84e:	4613      	mov	r3, r2
 800e850:	009b      	lsls	r3, r3, #2
 800e852:	4413      	add	r3, r2
 800e854:	019b      	lsls	r3, r3, #6
 800e856:	4619      	mov	r1, r3
 800e858:	4b21      	ldr	r3, [pc, #132]	; (800e8e0 <calibTouch+0x2a8>)
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	4b1f      	ldr	r3, [pc, #124]	; (800e8dc <calibTouch+0x2a4>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	1ad3      	subs	r3, r2, r3
 800e862:	fbb1 f3f3 	udiv	r3, r1, r3
 800e866:	4618      	mov	r0, r3
 800e868:	f7ff fd7a 	bl	800e360 <flipX>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b9b      	cmp	r3, #155	; 0x9b
 800e870:	d918      	bls.n	800e8a4 <calibTouch+0x26c>
			writeDataToMemory (ADR_DATA_MIN_X, minRawX);
 800e872:	4b1a      	ldr	r3, [pc, #104]	; (800e8dc <calibTouch+0x2a4>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4619      	mov	r1, r3
 800e878:	481a      	ldr	r0, [pc, #104]	; (800e8e4 <calibTouch+0x2ac>)
 800e87a:	f001 fd29 	bl	80102d0 <writeDataToMemory>
			writeDataToMemory (ADR_DATA_MAX_X, maxRawX);
 800e87e:	4b18      	ldr	r3, [pc, #96]	; (800e8e0 <calibTouch+0x2a8>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4619      	mov	r1, r3
 800e884:	4818      	ldr	r0, [pc, #96]	; (800e8e8 <calibTouch+0x2b0>)
 800e886:	f001 fd23 	bl	80102d0 <writeDataToMemory>
			writeDataToMemory (ADR_DATA_MIN_Y, minRawY);
 800e88a:	4b12      	ldr	r3, [pc, #72]	; (800e8d4 <calibTouch+0x29c>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4619      	mov	r1, r3
 800e890:	4816      	ldr	r0, [pc, #88]	; (800e8ec <calibTouch+0x2b4>)
 800e892:	f001 fd1d 	bl	80102d0 <writeDataToMemory>
			writeDataToMemory (ADR_DATA_MAX_Y, maxRawY);
 800e896:	4b10      	ldr	r3, [pc, #64]	; (800e8d8 <calibTouch+0x2a0>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4619      	mov	r1, r3
 800e89c:	4814      	ldr	r0, [pc, #80]	; (800e8f0 <calibTouch+0x2b8>)
 800e89e:	f001 fd17 	bl	80102d0 <writeDataToMemory>
		} else {
			return false;
		}
		break;
 800e8a2:	e001      	b.n	800e8a8 <calibTouch+0x270>
			return false;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	e000      	b.n	800e8aa <calibTouch+0x272>
	}
	return true;
 800e8a8:	2301      	movs	r3, #1
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3730      	adds	r7, #48	; 0x30
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	080217d8 	.word	0x080217d8
 800e8b8:	200003b0 	.word	0x200003b0
 800e8bc:	080217dc 	.word	0x080217dc
 800e8c0:	080217e0 	.word	0x080217e0
 800e8c4:	2000026c 	.word	0x2000026c
 800e8c8:	20000274 	.word	0x20000274
 800e8cc:	20000268 	.word	0x20000268
 800e8d0:	20000270 	.word	0x20000270
 800e8d4:	20000260 	.word	0x20000260
 800e8d8:	20000264 	.word	0x20000264
 800e8dc:	20000258 	.word	0x20000258
 800e8e0:	2000025c 	.word	0x2000025c
 800e8e4:	08004000 	.word	0x08004000
 800e8e8:	08004004 	.word	0x08004004
 800e8ec:	08004008 	.word	0x08004008
 800e8f0:	0800400c 	.word	0x0800400c

0800e8f4 <screenSaver>:
char *unitFreq[3] = { "Hz ", "kHz", "MHz", };
uint32_t multiplicationFreq[3] = { 1000000, 1000, 1 };
uint16_t x, y, countSpeed = 1;
uint32_t timBigArea = 0, timButtonPress = 0, timHoldButtonPress = 0;
//------------------------------ функции ---------------------------------------------//
void screenSaver (void) {                                                                      // заставка
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af04      	add	r7, sp, #16
	ILI9341_FillScreen(ILI9341_BLACK);                                                         // очистить экран
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	f7fe fd18 	bl	800d330 <ILI9341_FillScreen>
	strcpy(bufSpi, "PULSE");                                                                   // написать название
 800e900:	4b21      	ldr	r3, [pc, #132]	; (800e988 <screenSaver+0x94>)
 800e902:	4a22      	ldr	r2, [pc, #136]	; (800e98c <screenSaver+0x98>)
 800e904:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e908:	6018      	str	r0, [r3, #0]
 800e90a:	3304      	adds	r3, #4
 800e90c:	8019      	strh	r1, [r3, #0]
	ILI9341_WriteMyString(105, 76, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
 800e90e:	2300      	movs	r3, #0
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800e916:	4a1c      	ldr	r2, [pc, #112]	; (800e988 <screenSaver+0x94>)
 800e918:	214c      	movs	r1, #76	; 0x4c
 800e91a:	2069      	movs	r0, #105	; 0x69
 800e91c:	f7fe fe10 	bl	800d540 <ILI9341_WriteMyString>
	strcpy(bufSpi, "GENERATOR");
 800e920:	4b19      	ldr	r3, [pc, #100]	; (800e988 <screenSaver+0x94>)
 800e922:	4a1b      	ldr	r2, [pc, #108]	; (800e990 <screenSaver+0x9c>)
 800e924:	ca07      	ldmia	r2, {r0, r1, r2}
 800e926:	c303      	stmia	r3!, {r0, r1}
 800e928:	801a      	strh	r2, [r3, #0]
	ILI9341_WriteMyString(65, 120, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
 800e92a:	2300      	movs	r3, #0
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800e932:	4a15      	ldr	r2, [pc, #84]	; (800e988 <screenSaver+0x94>)
 800e934:	2178      	movs	r1, #120	; 0x78
 800e936:	2041      	movs	r0, #65	; 0x41
 800e938:	f7fe fe02 	bl	800d540 <ILI9341_WriteMyString>
	ILI9341_WriteString(250, 220, "Ver1.2", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 800e93c:	4b15      	ldr	r3, [pc, #84]	; (800e994 <screenSaver+0xa0>)
 800e93e:	2200      	movs	r2, #0
 800e940:	9202      	str	r2, [sp, #8]
 800e942:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800e946:	9201      	str	r2, [sp, #4]
 800e948:	685a      	ldr	r2, [r3, #4]
 800e94a:	9200      	str	r2, [sp, #0]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4a12      	ldr	r2, [pc, #72]	; (800e998 <screenSaver+0xa4>)
 800e950:	21dc      	movs	r1, #220	; 0xdc
 800e952:	20fa      	movs	r0, #250	; 0xfa
 800e954:	f7fe fecb 	bl	800d6ee <ILI9341_WriteString>
	drawSomePixelRoundRect(40, 66, 240, 108, 4, 2, ILI9341_YELLOW);
 800e958:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800e95c:	9302      	str	r3, [sp, #8]
 800e95e:	2302      	movs	r3, #2
 800e960:	9301      	str	r3, [sp, #4]
 800e962:	2304      	movs	r3, #4
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	236c      	movs	r3, #108	; 0x6c
 800e968:	22f0      	movs	r2, #240	; 0xf0
 800e96a:	2142      	movs	r1, #66	; 0x42
 800e96c:	2028      	movs	r0, #40	; 0x28
 800e96e:	f7ff face 	bl	800df0e <drawSomePixelRoundRect>
	HAL_Delay(2000);
 800e972:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e976:	f002 fc23 	bl	80111c0 <HAL_Delay>
	buzzerSet(100);                                                                            // пикнуть
 800e97a:	2064      	movs	r0, #100	; 0x64
 800e97c:	f001 fc8a 	bl	8010294 <buzzerSet>
}
 800e980:	bf00      	nop
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	20000278 	.word	0x20000278
 800e98c:	080170f8 	.word	0x080170f8
 800e990:	08017100 	.word	0x08017100
 800e994:	20000000 	.word	0x20000000
 800e998:	0801710c 	.word	0x0801710c

0800e99c <GUICalibration>:

void GUICalibration(uint8_t pozition) {                                                        // калибровка графическое отображение
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b086      	sub	sp, #24
 800e9a0:	af04      	add	r7, sp, #16
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	71fb      	strb	r3, [r7, #7]
	switch (pozition) {
 800e9a6:	79fb      	ldrb	r3, [r7, #7]
 800e9a8:	2b06      	cmp	r3, #6
 800e9aa:	f200 8100 	bhi.w	800ebae <GUICalibration+0x212>
 800e9ae:	a201      	add	r2, pc, #4	; (adr r2, 800e9b4 <GUICalibration+0x18>)
 800e9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b4:	0800e9d1 	.word	0x0800e9d1
 800e9b8:	0800ea2d 	.word	0x0800ea2d
 800e9bc:	0800ea5f 	.word	0x0800ea5f
 800e9c0:	0800ea8f 	.word	0x0800ea8f
 800e9c4:	0800eac1 	.word	0x0800eac1
 800e9c8:	0800eb2f 	.word	0x0800eb2f
 800e9cc:	0800eb6f 	.word	0x0800eb6f
	case LEFTUP:                                                                               // левая точка
		ILI9341_FillScreen(ILI9341_BLACK);
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	f7fe fcad 	bl	800d330 <ILI9341_FillScreen>
		ILI9341_WriteString(15, 50, "Display calibration, click", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);      // а так же пишем что калибруемся
 800e9d6:	4b78      	ldr	r3, [pc, #480]	; (800ebb8 <GUICalibration+0x21c>)
 800e9d8:	2200      	movs	r2, #0
 800e9da:	9202      	str	r2, [sp, #8]
 800e9dc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800e9e0:	9201      	str	r2, [sp, #4]
 800e9e2:	685a      	ldr	r2, [r3, #4]
 800e9e4:	9200      	str	r2, [sp, #0]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a74      	ldr	r2, [pc, #464]	; (800ebbc <GUICalibration+0x220>)
 800e9ea:	2132      	movs	r1, #50	; 0x32
 800e9ec:	200f      	movs	r0, #15
 800e9ee:	f7fe fe7e 	bl	800d6ee <ILI9341_WriteString>
		ILI9341_WriteString(15, 70, "on all the circles in turn", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 800e9f2:	4b71      	ldr	r3, [pc, #452]	; (800ebb8 <GUICalibration+0x21c>)
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	9202      	str	r2, [sp, #8]
 800e9f8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800e9fc:	9201      	str	r2, [sp, #4]
 800e9fe:	685a      	ldr	r2, [r3, #4]
 800ea00:	9200      	str	r2, [sp, #0]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a6e      	ldr	r2, [pc, #440]	; (800ebc0 <GUICalibration+0x224>)
 800ea06:	2146      	movs	r1, #70	; 0x46
 800ea08:	200f      	movs	r0, #15
 800ea0a:	f7fe fe70 	bl	800d6ee <ILI9341_WriteString>
		drawCircle(10, 10, 10, ILI9341_YELLOW);
 800ea0e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ea12:	220a      	movs	r2, #10
 800ea14:	210a      	movs	r1, #10
 800ea16:	200a      	movs	r0, #10
 800ea18:	f7ff fb81 	bl	800e11e <drawCircle>
		drawCircle(10, 10, 9, ILI9341_YELLOW);                                                  // точка в которую нажать
 800ea1c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ea20:	2209      	movs	r2, #9
 800ea22:	210a      	movs	r1, #10
 800ea24:	200a      	movs	r0, #10
 800ea26:	f7ff fb7a 	bl	800e11e <drawCircle>
		break;
 800ea2a:	e0c0      	b.n	800ebae <GUICalibration+0x212>
	case RIGHTUP:
		ILI9341_FillRectangle(0, 0, 25, 25, ILI9341_BLACK);
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	9300      	str	r3, [sp, #0]
 800ea30:	2319      	movs	r3, #25
 800ea32:	2219      	movs	r2, #25
 800ea34:	2100      	movs	r1, #0
 800ea36:	2000      	movs	r0, #0
 800ea38:	f7fe fc10 	bl	800d25c <ILI9341_FillRectangle>
		drawCircle(309, 10, 10, ILI9341_YELLOW);
 800ea3c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ea40:	220a      	movs	r2, #10
 800ea42:	210a      	movs	r1, #10
 800ea44:	f240 1035 	movw	r0, #309	; 0x135
 800ea48:	f7ff fb69 	bl	800e11e <drawCircle>
		drawCircle(309, 10, 9, ILI9341_YELLOW);
 800ea4c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ea50:	2209      	movs	r2, #9
 800ea52:	210a      	movs	r1, #10
 800ea54:	f240 1035 	movw	r0, #309	; 0x135
 800ea58:	f7ff fb61 	bl	800e11e <drawCircle>
		break;
 800ea5c:	e0a7      	b.n	800ebae <GUICalibration+0x212>
	case LEFTDOWN:
		ILI9341_FillRectangle(299, 0, 25, 25, ILI9341_BLACK);
 800ea5e:	2300      	movs	r3, #0
 800ea60:	9300      	str	r3, [sp, #0]
 800ea62:	2319      	movs	r3, #25
 800ea64:	2219      	movs	r2, #25
 800ea66:	2100      	movs	r1, #0
 800ea68:	f240 102b 	movw	r0, #299	; 0x12b
 800ea6c:	f7fe fbf6 	bl	800d25c <ILI9341_FillRectangle>
		drawCircle(10, 229, 10, ILI9341_YELLOW);
 800ea70:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ea74:	220a      	movs	r2, #10
 800ea76:	21e5      	movs	r1, #229	; 0xe5
 800ea78:	200a      	movs	r0, #10
 800ea7a:	f7ff fb50 	bl	800e11e <drawCircle>
		drawCircle(10, 229, 9, ILI9341_YELLOW);
 800ea7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ea82:	2209      	movs	r2, #9
 800ea84:	21e5      	movs	r1, #229	; 0xe5
 800ea86:	200a      	movs	r0, #10
 800ea88:	f7ff fb49 	bl	800e11e <drawCircle>
		break;
 800ea8c:	e08f      	b.n	800ebae <GUICalibration+0x212>
	case RIGHTDOWN:
		ILI9341_FillRectangle(0, 219, 25, 25, ILI9341_BLACK);
 800ea8e:	2300      	movs	r3, #0
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	2319      	movs	r3, #25
 800ea94:	2219      	movs	r2, #25
 800ea96:	21db      	movs	r1, #219	; 0xdb
 800ea98:	2000      	movs	r0, #0
 800ea9a:	f7fe fbdf 	bl	800d25c <ILI9341_FillRectangle>
		drawCircle(309, 229, 10, ILI9341_YELLOW);
 800ea9e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800eaa2:	220a      	movs	r2, #10
 800eaa4:	21e5      	movs	r1, #229	; 0xe5
 800eaa6:	f240 1035 	movw	r0, #309	; 0x135
 800eaaa:	f7ff fb38 	bl	800e11e <drawCircle>
		drawCircle(309, 229, 9, ILI9341_YELLOW);
 800eaae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800eab2:	2209      	movs	r2, #9
 800eab4:	21e5      	movs	r1, #229	; 0xe5
 800eab6:	f240 1035 	movw	r0, #309	; 0x135
 800eaba:	f7ff fb30 	bl	800e11e <drawCircle>
		break;
 800eabe:	e076      	b.n	800ebae <GUICalibration+0x212>
	case CHECKCALIB:
		ILI9341_FillRectangle(299, 219, 25, 25, ILI9341_BLACK);                                  // проверка калибровки
 800eac0:	2300      	movs	r3, #0
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	2319      	movs	r3, #25
 800eac6:	2219      	movs	r2, #25
 800eac8:	21db      	movs	r1, #219	; 0xdb
 800eaca:	f240 102b 	movw	r0, #299	; 0x12b
 800eace:	f7fe fbc5 	bl	800d25c <ILI9341_FillRectangle>
		ILI9341_FillRectangle(15, 50, 290, 40, ILI9341_BLACK);
 800ead2:	2300      	movs	r3, #0
 800ead4:	9300      	str	r3, [sp, #0]
 800ead6:	2328      	movs	r3, #40	; 0x28
 800ead8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800eadc:	2132      	movs	r1, #50	; 0x32
 800eade:	200f      	movs	r0, #15
 800eae0:	f7fe fbbc 	bl	800d25c <ILI9341_FillRectangle>
		ILI9341_FillRectangle(140, 100, 60, 20, ILI9341_BLACK);
 800eae4:	2300      	movs	r3, #0
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	2314      	movs	r3, #20
 800eaea:	223c      	movs	r2, #60	; 0x3c
 800eaec:	2164      	movs	r1, #100	; 0x64
 800eaee:	208c      	movs	r0, #140	; 0x8c
 800eaf0:	f7fe fbb4 	bl	800d25c <ILI9341_FillRectangle>
		ILI9341_WriteString(60, 20, "Calibration check", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 800eaf4:	4b30      	ldr	r3, [pc, #192]	; (800ebb8 <GUICalibration+0x21c>)
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	9202      	str	r2, [sp, #8]
 800eafa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800eafe:	9201      	str	r2, [sp, #4]
 800eb00:	685a      	ldr	r2, [r3, #4]
 800eb02:	9200      	str	r2, [sp, #0]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	4a2f      	ldr	r2, [pc, #188]	; (800ebc4 <GUICalibration+0x228>)
 800eb08:	2114      	movs	r1, #20
 800eb0a:	203c      	movs	r0, #60	; 0x3c
 800eb0c:	f7fe fdef 	bl	800d6ee <ILI9341_WriteString>
		drawCircle(160, 120, 10, ILI9341_YELLOW);
 800eb10:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800eb14:	220a      	movs	r2, #10
 800eb16:	2178      	movs	r1, #120	; 0x78
 800eb18:	20a0      	movs	r0, #160	; 0xa0
 800eb1a:	f7ff fb00 	bl	800e11e <drawCircle>
		drawCircle(160, 120, 9, ILI9341_YELLOW);
 800eb1e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800eb22:	2209      	movs	r2, #9
 800eb24:	2178      	movs	r1, #120	; 0x78
 800eb26:	20a0      	movs	r0, #160	; 0xa0
 800eb28:	f7ff faf9 	bl	800e11e <drawCircle>
		break;
 800eb2c:	e03f      	b.n	800ebae <GUICalibration+0x212>
	case CALIBOK:
		ILI9341_FillRectangle(60, 20, 260, 20, ILI9341_BLACK);
 800eb2e:	2300      	movs	r3, #0
 800eb30:	9300      	str	r3, [sp, #0]
 800eb32:	2314      	movs	r3, #20
 800eb34:	f44f 7282 	mov.w	r2, #260	; 0x104
 800eb38:	2114      	movs	r1, #20
 800eb3a:	203c      	movs	r0, #60	; 0x3c
 800eb3c:	f7fe fb8e 	bl	800d25c <ILI9341_FillRectangle>
		ILI9341_FillRectangle(150, 110, 30, 30, ILI9341_BLACK);
 800eb40:	2300      	movs	r3, #0
 800eb42:	9300      	str	r3, [sp, #0]
 800eb44:	231e      	movs	r3, #30
 800eb46:	221e      	movs	r2, #30
 800eb48:	216e      	movs	r1, #110	; 0x6e
 800eb4a:	2096      	movs	r0, #150	; 0x96
 800eb4c:	f7fe fb86 	bl	800d25c <ILI9341_FillRectangle>
		ILI9341_WriteString(75, 20, "Calibration ok", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 800eb50:	4b19      	ldr	r3, [pc, #100]	; (800ebb8 <GUICalibration+0x21c>)
 800eb52:	2200      	movs	r2, #0
 800eb54:	9202      	str	r2, [sp, #8]
 800eb56:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800eb5a:	9201      	str	r2, [sp, #4]
 800eb5c:	685a      	ldr	r2, [r3, #4]
 800eb5e:	9200      	str	r2, [sp, #0]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4a19      	ldr	r2, [pc, #100]	; (800ebc8 <GUICalibration+0x22c>)
 800eb64:	2114      	movs	r1, #20
 800eb66:	204b      	movs	r0, #75	; 0x4b
 800eb68:	f7fe fdc1 	bl	800d6ee <ILI9341_WriteString>
		break;
 800eb6c:	e01f      	b.n	800ebae <GUICalibration+0x212>
	case ERRCALIB:
		ILI9341_FillRectangle(60, 50, 260, 20, ILI9341_BLACK);
 800eb6e:	2300      	movs	r3, #0
 800eb70:	9300      	str	r3, [sp, #0]
 800eb72:	2314      	movs	r3, #20
 800eb74:	f44f 7282 	mov.w	r2, #260	; 0x104
 800eb78:	2132      	movs	r1, #50	; 0x32
 800eb7a:	203c      	movs	r0, #60	; 0x3c
 800eb7c:	f7fe fb6e 	bl	800d25c <ILI9341_FillRectangle>
		ILI9341_FillRectangle(150, 110, 30, 30, ILI9341_BLACK);
 800eb80:	2300      	movs	r3, #0
 800eb82:	9300      	str	r3, [sp, #0]
 800eb84:	231e      	movs	r3, #30
 800eb86:	221e      	movs	r2, #30
 800eb88:	216e      	movs	r1, #110	; 0x6e
 800eb8a:	2096      	movs	r0, #150	; 0x96
 800eb8c:	f7fe fb66 	bl	800d25c <ILI9341_FillRectangle>
		ILI9341_WriteString(60, 20, "Invalid calibration", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 800eb90:	4b09      	ldr	r3, [pc, #36]	; (800ebb8 <GUICalibration+0x21c>)
 800eb92:	2200      	movs	r2, #0
 800eb94:	9202      	str	r2, [sp, #8]
 800eb96:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800eb9a:	9201      	str	r2, [sp, #4]
 800eb9c:	685a      	ldr	r2, [r3, #4]
 800eb9e:	9200      	str	r2, [sp, #0]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	4a0a      	ldr	r2, [pc, #40]	; (800ebcc <GUICalibration+0x230>)
 800eba4:	2114      	movs	r1, #20
 800eba6:	203c      	movs	r0, #60	; 0x3c
 800eba8:	f7fe fda1 	bl	800d6ee <ILI9341_WriteString>
		break;
 800ebac:	bf00      	nop
	}
}
 800ebae:	bf00      	nop
 800ebb0:	3708      	adds	r7, #8
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	bf00      	nop
 800ebb8:	20000000 	.word	0x20000000
 800ebbc:	08017114 	.word	0x08017114
 800ebc0:	08017130 	.word	0x08017130
 800ebc4:	0801714c 	.word	0x0801714c
 800ebc8:	08017160 	.word	0x08017160
 800ebcc:	08017170 	.word	0x08017170

0800ebd0 <setOK>:

void setOK(uint8_t flag) {                                                                     // при калибровке показывать действие
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b086      	sub	sp, #24
 800ebd4:	af04      	add	r7, sp, #16
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	71fb      	strb	r3, [r7, #7]
	if (flag) {
 800ebda:	79fb      	ldrb	r3, [r7, #7]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d00e      	beq.n	800ebfe <setOK+0x2e>
		ILI9341_WriteString(140, 100, " OK    ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 800ebe0:	4b10      	ldr	r3, [pc, #64]	; (800ec24 <setOK+0x54>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	9202      	str	r2, [sp, #8]
 800ebe6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800ebea:	9201      	str	r2, [sp, #4]
 800ebec:	685a      	ldr	r2, [r3, #4]
 800ebee:	9200      	str	r2, [sp, #0]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a0d      	ldr	r2, [pc, #52]	; (800ec28 <setOK+0x58>)
 800ebf4:	2164      	movs	r1, #100	; 0x64
 800ebf6:	208c      	movs	r0, #140	; 0x8c
 800ebf8:	f7fe fd79 	bl	800d6ee <ILI9341_WriteString>
	} else {
		ILI9341_WriteString(140, 100, "Wait", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
	}
}
 800ebfc:	e00d      	b.n	800ec1a <setOK+0x4a>
		ILI9341_WriteString(140, 100, "Wait", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 800ebfe:	4b09      	ldr	r3, [pc, #36]	; (800ec24 <setOK+0x54>)
 800ec00:	2200      	movs	r2, #0
 800ec02:	9202      	str	r2, [sp, #8]
 800ec04:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800ec08:	9201      	str	r2, [sp, #4]
 800ec0a:	685a      	ldr	r2, [r3, #4]
 800ec0c:	9200      	str	r2, [sp, #0]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4a06      	ldr	r2, [pc, #24]	; (800ec2c <setOK+0x5c>)
 800ec12:	2164      	movs	r1, #100	; 0x64
 800ec14:	208c      	movs	r0, #140	; 0x8c
 800ec16:	f7fe fd6a 	bl	800d6ee <ILI9341_WriteString>
}
 800ec1a:	bf00      	nop
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	20000000 	.word	0x20000000
 800ec28:	08017184 	.word	0x08017184
 800ec2c:	0801718c 	.word	0x0801718c

0800ec30 <startDisplay>:

void startDisplay(void) {                                                                      // инициализация дисплея
 800ec30:	b580      	push	{r7, lr}
 800ec32:	af00      	add	r7, sp, #0
	ILI9341_TouchUnselect();
 800ec34:	f7ff fb88 	bl	800e348 <ILI9341_TouchUnselect>
	ILI9341_Unselect();
 800ec38:	f7fe f8fc 	bl	800ce34 <ILI9341_Unselect>
	HAL_Delay(10);
 800ec3c:	200a      	movs	r0, #10
 800ec3e:	f002 fabf 	bl	80111c0 <HAL_Delay>
	SET_BIT(SPI1->CR1, SPI_CR1_SPE);                                                           // включить SPI
 800ec42:	4b08      	ldr	r3, [pc, #32]	; (800ec64 <startDisplay+0x34>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	4a07      	ldr	r2, [pc, #28]	; (800ec64 <startDisplay+0x34>)
 800ec48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec4c:	6013      	str	r3, [r2, #0]
	ILI9341_Init();
 800ec4e:	f7fe f99d 	bl	800cf8c <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 800ec52:	2000      	movs	r0, #0
 800ec54:	f7fe fb6c 	bl	800d330 <ILI9341_FillScreen>
	HAL_Delay(100);
 800ec58:	2064      	movs	r0, #100	; 0x64
 800ec5a:	f002 fab1 	bl	80111c0 <HAL_Delay>
}
 800ec5e:	bf00      	nop
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	40013000 	.word	0x40013000

0800ec68 <printFreeq>:

void printFreeq(void) {                                                                        // пересчет и вывод текущей частоты
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b086      	sub	sp, #24
 800ec6c:	af04      	add	r7, sp, #16
	uint8_t count = 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	71fb      	strb	r3, [r7, #7]
	float freq = 0;
 800ec72:	f04f 0300 	mov.w	r3, #0
 800ec76:	603b      	str	r3, [r7, #0]
	freq = (1 / (((float) ParamDevice.impuls / (float) multiplicationFreq[ParamDevice.unitImpuls]) +
 800ec78:	4b42      	ldr	r3, [pc, #264]	; (800ed84 <printFreeq+0x11c>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	ee07 3a90 	vmov	s15, r3
 800ec80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ec84:	4b3f      	ldr	r3, [pc, #252]	; (800ed84 <printFreeq+0x11c>)
 800ec86:	691b      	ldr	r3, [r3, #16]
 800ec88:	4a3f      	ldr	r2, [pc, #252]	; (800ed88 <printFreeq+0x120>)
 800ec8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec8e:	ee07 3a90 	vmov	s15, r3
 800ec92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			((float) ParamDevice.pause / (float) multiplicationFreq[ParamDevice.unitPause])));
 800ec9a:	4b3a      	ldr	r3, [pc, #232]	; (800ed84 <printFreeq+0x11c>)
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	ee07 3a90 	vmov	s15, r3
 800eca2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800eca6:	4b37      	ldr	r3, [pc, #220]	; (800ed84 <printFreeq+0x11c>)
 800eca8:	695b      	ldr	r3, [r3, #20]
 800ecaa:	4a37      	ldr	r2, [pc, #220]	; (800ed88 <printFreeq+0x120>)
 800ecac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecb0:	ee07 3a90 	vmov	s15, r3
 800ecb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecb8:	eec6 7a26 	vdiv.f32	s15, s12, s13
	freq = (1 / (((float) ParamDevice.impuls / (float) multiplicationFreq[ParamDevice.unitImpuls]) +
 800ecbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ecc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecc8:	edc7 7a00 	vstr	s15, [r7]
	if (freq >= 1000000) {                                                                     // если частоты больше 1000000
 800eccc:	edd7 7a00 	vldr	s15, [r7]
 800ecd0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800ed8c <printFreeq+0x124>
 800ecd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ecd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecdc:	db09      	blt.n	800ecf2 <printFreeq+0x8a>
		count = 2;                                                                             // ставим пометку с какой ячейки читать
 800ecde:	2302      	movs	r3, #2
 800ece0:	71fb      	strb	r3, [r7, #7]
		freq = freq / 1000000;                                                                 // уменьшаем нули
 800ece2:	ed97 7a00 	vldr	s14, [r7]
 800ece6:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ed8c <printFreeq+0x124>
 800ecea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ecee:	edc7 7a00 	vstr	s15, [r7]
	}
	if (freq >= 1000) {
 800ecf2:	edd7 7a00 	vldr	s15, [r7]
 800ecf6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800ed90 <printFreeq+0x128>
 800ecfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ecfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed02:	db09      	blt.n	800ed18 <printFreeq+0xb0>
		count = 1;
 800ed04:	2301      	movs	r3, #1
 800ed06:	71fb      	strb	r3, [r7, #7]
		freq = freq / 1000;
 800ed08:	ed97 7a00 	vldr	s14, [r7]
 800ed0c:	eddf 6a20 	vldr	s13, [pc, #128]	; 800ed90 <printFreeq+0x128>
 800ed10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ed14:	edc7 7a00 	vstr	s15, [r7]
	}
	strcpy(bufSpi, "Freq=");                                                                  // ну и печать
 800ed18:	4b1e      	ldr	r3, [pc, #120]	; (800ed94 <printFreeq+0x12c>)
 800ed1a:	4a1f      	ldr	r2, [pc, #124]	; (800ed98 <printFreeq+0x130>)
 800ed1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed20:	6018      	str	r0, [r3, #0]
 800ed22:	3304      	adds	r3, #4
 800ed24:	8019      	strh	r1, [r3, #0]
	ILI9341_WriteString(10, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
 800ed26:	4b1d      	ldr	r3, [pc, #116]	; (800ed9c <printFreeq+0x134>)
 800ed28:	221f      	movs	r2, #31
 800ed2a:	9202      	str	r2, [sp, #8]
 800ed2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed30:	9201      	str	r2, [sp, #4]
 800ed32:	685a      	ldr	r2, [r3, #4]
 800ed34:	9200      	str	r2, [sp, #0]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4a16      	ldr	r2, [pc, #88]	; (800ed94 <printFreeq+0x12c>)
 800ed3a:	2102      	movs	r1, #2
 800ed3c:	200a      	movs	r0, #10
 800ed3e:	f7fe fcd6 	bl	800d6ee <ILI9341_WriteString>
	sprintf(bufSpi, "%06.2f%s", freq, unitFreq[count]);                                       // помним что 6 это общее количество символов
 800ed42:	6838      	ldr	r0, [r7, #0]
 800ed44:	f7fd fb38 	bl	800c3b8 <__aeabi_f2d>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	79f9      	ldrb	r1, [r7, #7]
 800ed4e:	4814      	ldr	r0, [pc, #80]	; (800eda0 <printFreeq+0x138>)
 800ed50:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800ed54:	9100      	str	r1, [sp, #0]
 800ed56:	4913      	ldr	r1, [pc, #76]	; (800eda4 <printFreeq+0x13c>)
 800ed58:	480e      	ldr	r0, [pc, #56]	; (800ed94 <printFreeq+0x12c>)
 800ed5a:	f005 ff1f 	bl	8014b9c <siprintf>
	ILI9341_WriteString(65, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
 800ed5e:	4b0f      	ldr	r3, [pc, #60]	; (800ed9c <printFreeq+0x134>)
 800ed60:	221f      	movs	r2, #31
 800ed62:	9202      	str	r2, [sp, #8]
 800ed64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed68:	9201      	str	r2, [sp, #4]
 800ed6a:	685a      	ldr	r2, [r3, #4]
 800ed6c:	9200      	str	r2, [sp, #0]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a08      	ldr	r2, [pc, #32]	; (800ed94 <printFreeq+0x12c>)
 800ed72:	2102      	movs	r1, #2
 800ed74:	2041      	movs	r0, #65	; 0x41
 800ed76:	f7fe fcba 	bl	800d6ee <ILI9341_WriteString>
}
 800ed7a:	bf00      	nop
 800ed7c:	3708      	adds	r7, #8
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	bf00      	nop
 800ed84:	20000040 	.word	0x20000040
 800ed88:	20000020 	.word	0x20000020
 800ed8c:	49742400 	.word	0x49742400
 800ed90:	447a0000 	.word	0x447a0000
 800ed94:	20000278 	.word	0x20000278
 800ed98:	08017194 	.word	0x08017194
 800ed9c:	20000000 	.word	0x20000000
 800eda0:	20000014 	.word	0x20000014
 800eda4:	0801719c 	.word	0x0801719c

0800eda8 <printCurrent>:

void printCurrent (float current) {                                                            // принт текущего значения тока
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b086      	sub	sp, #24
 800edac:	af04      	add	r7, sp, #16
 800edae:	ed87 0a01 	vstr	s0, [r7, #4]
	strcpy(bufSpi, "Iout: ");                                                                  // это тупо, можно где то один раз нарисовать
 800edb2:	4b1a      	ldr	r3, [pc, #104]	; (800ee1c <printCurrent+0x74>)
 800edb4:	4a1a      	ldr	r2, [pc, #104]	; (800ee20 <printCurrent+0x78>)
 800edb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800edba:	6018      	str	r0, [r3, #0]
 800edbc:	3304      	adds	r3, #4
 800edbe:	8019      	strh	r1, [r3, #0]
 800edc0:	3302      	adds	r3, #2
 800edc2:	0c0a      	lsrs	r2, r1, #16
 800edc4:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteString(190, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
 800edc6:	4b17      	ldr	r3, [pc, #92]	; (800ee24 <printCurrent+0x7c>)
 800edc8:	221f      	movs	r2, #31
 800edca:	9202      	str	r2, [sp, #8]
 800edcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edd0:	9201      	str	r2, [sp, #4]
 800edd2:	685a      	ldr	r2, [r3, #4]
 800edd4:	9200      	str	r2, [sp, #0]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a10      	ldr	r2, [pc, #64]	; (800ee1c <printCurrent+0x74>)
 800edda:	2102      	movs	r1, #2
 800eddc:	20be      	movs	r0, #190	; 0xbe
 800edde:	f7fe fc86 	bl	800d6ee <ILI9341_WriteString>
	sprintf(bufSpi, "%05.3f%s ", current, "A");
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f7fd fae8 	bl	800c3b8 <__aeabi_f2d>
 800ede8:	4602      	mov	r2, r0
 800edea:	460b      	mov	r3, r1
 800edec:	490e      	ldr	r1, [pc, #56]	; (800ee28 <printCurrent+0x80>)
 800edee:	9100      	str	r1, [sp, #0]
 800edf0:	490e      	ldr	r1, [pc, #56]	; (800ee2c <printCurrent+0x84>)
 800edf2:	480a      	ldr	r0, [pc, #40]	; (800ee1c <printCurrent+0x74>)
 800edf4:	f005 fed2 	bl	8014b9c <siprintf>
	ILI9341_WriteString(245, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
 800edf8:	4b0a      	ldr	r3, [pc, #40]	; (800ee24 <printCurrent+0x7c>)
 800edfa:	221f      	movs	r2, #31
 800edfc:	9202      	str	r2, [sp, #8]
 800edfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee02:	9201      	str	r2, [sp, #4]
 800ee04:	685a      	ldr	r2, [r3, #4]
 800ee06:	9200      	str	r2, [sp, #0]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a04      	ldr	r2, [pc, #16]	; (800ee1c <printCurrent+0x74>)
 800ee0c:	2102      	movs	r1, #2
 800ee0e:	20f5      	movs	r0, #245	; 0xf5
 800ee10:	f7fe fc6d 	bl	800d6ee <ILI9341_WriteString>
}
 800ee14:	bf00      	nop
 800ee16:	3708      	adds	r7, #8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	20000278 	.word	0x20000278
 800ee20:	080171a8 	.word	0x080171a8
 800ee24:	20000000 	.word	0x20000000
 800ee28:	080171bc 	.word	0x080171bc
 800ee2c:	080171b0 	.word	0x080171b0

0800ee30 <printTImpulse>:
		strcpy(bufSpi, "Out:No out");
		ILI9341_WriteString(190, 2, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
	}
}*/

void printTImpulse(void) {                                                                     // переписать длительность импульса
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af02      	add	r7, sp, #8
	strcpy(bufSpi, "T imp:");
 800ee36:	4b16      	ldr	r3, [pc, #88]	; (800ee90 <printTImpulse+0x60>)
 800ee38:	4a16      	ldr	r2, [pc, #88]	; (800ee94 <printTImpulse+0x64>)
 800ee3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee3e:	6018      	str	r0, [r3, #0]
 800ee40:	3304      	adds	r3, #4
 800ee42:	8019      	strh	r1, [r3, #0]
 800ee44:	3302      	adds	r3, #2
 800ee46:	0c0a      	lsrs	r2, r1, #16
 800ee48:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteMyString(12, 30, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800ee52:	4a0f      	ldr	r2, [pc, #60]	; (800ee90 <printTImpulse+0x60>)
 800ee54:	211e      	movs	r1, #30
 800ee56:	200c      	movs	r0, #12
 800ee58:	f7fe fb72 	bl	800d540 <ILI9341_WriteMyString>
	sprintf(bufSpi, "%-3u %s  ", (unsigned int)ParamDevice.impuls, unitTXT[ParamDevice.unitImpuls]);
 800ee5c:	4b0e      	ldr	r3, [pc, #56]	; (800ee98 <printTImpulse+0x68>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4619      	mov	r1, r3
 800ee62:	4b0d      	ldr	r3, [pc, #52]	; (800ee98 <printTImpulse+0x68>)
 800ee64:	691b      	ldr	r3, [r3, #16]
 800ee66:	4a0d      	ldr	r2, [pc, #52]	; (800ee9c <printTImpulse+0x6c>)
 800ee68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee6c:	460a      	mov	r2, r1
 800ee6e:	490c      	ldr	r1, [pc, #48]	; (800eea0 <printTImpulse+0x70>)
 800ee70:	4807      	ldr	r0, [pc, #28]	; (800ee90 <printTImpulse+0x60>)
 800ee72:	f005 fe93 	bl	8014b9c <siprintf>
	ILI9341_WriteMyString(125, 30, bufSpi, ILI9341_GREEN, ILI9341_BLACK);
 800ee76:	2300      	movs	r3, #0
 800ee78:	9300      	str	r3, [sp, #0]
 800ee7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800ee7e:	4a04      	ldr	r2, [pc, #16]	; (800ee90 <printTImpulse+0x60>)
 800ee80:	211e      	movs	r1, #30
 800ee82:	207d      	movs	r0, #125	; 0x7d
 800ee84:	f7fe fb5c 	bl	800d540 <ILI9341_WriteMyString>
}
 800ee88:	bf00      	nop
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	20000278 	.word	0x20000278
 800ee94:	080171c0 	.word	0x080171c0
 800ee98:	20000040 	.word	0x20000040
 800ee9c:	20000008 	.word	0x20000008
 800eea0:	080171c8 	.word	0x080171c8

0800eea4 <printTPause>:

void printTPause(void) {                                                                       // переписать длительность паузы
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af02      	add	r7, sp, #8
	strcpy(bufSpi, "T paus:");
 800eeaa:	4b14      	ldr	r3, [pc, #80]	; (800eefc <printTPause+0x58>)
 800eeac:	4a14      	ldr	r2, [pc, #80]	; (800ef00 <printTPause+0x5c>)
 800eeae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eeb2:	e883 0003 	stmia.w	r3, {r0, r1}
	ILI9341_WriteMyString(12, 78, bufSpi, ILI9341_YELLOW, ILI9341_BLACK);
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	9300      	str	r3, [sp, #0]
 800eeba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800eebe:	4a0f      	ldr	r2, [pc, #60]	; (800eefc <printTPause+0x58>)
 800eec0:	214e      	movs	r1, #78	; 0x4e
 800eec2:	200c      	movs	r0, #12
 800eec4:	f7fe fb3c 	bl	800d540 <ILI9341_WriteMyString>
	sprintf(bufSpi, "%-3u %s  ", (unsigned int)ParamDevice.pause, unitTXT[ParamDevice.unitPause]);
 800eec8:	4b0e      	ldr	r3, [pc, #56]	; (800ef04 <printTPause+0x60>)
 800eeca:	685b      	ldr	r3, [r3, #4]
 800eecc:	4619      	mov	r1, r3
 800eece:	4b0d      	ldr	r3, [pc, #52]	; (800ef04 <printTPause+0x60>)
 800eed0:	695b      	ldr	r3, [r3, #20]
 800eed2:	4a0d      	ldr	r2, [pc, #52]	; (800ef08 <printTPause+0x64>)
 800eed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eed8:	460a      	mov	r2, r1
 800eeda:	490c      	ldr	r1, [pc, #48]	; (800ef0c <printTPause+0x68>)
 800eedc:	4807      	ldr	r0, [pc, #28]	; (800eefc <printTPause+0x58>)
 800eede:	f005 fe5d 	bl	8014b9c <siprintf>
	ILI9341_WriteMyString(125, 78, bufSpi, ILI9341_YELLOW, ILI9341_BLACK);
 800eee2:	2300      	movs	r3, #0
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800eeea:	4a04      	ldr	r2, [pc, #16]	; (800eefc <printTPause+0x58>)
 800eeec:	214e      	movs	r1, #78	; 0x4e
 800eeee:	207d      	movs	r0, #125	; 0x7d
 800eef0:	f7fe fb26 	bl	800d540 <ILI9341_WriteMyString>
}
 800eef4:	bf00      	nop
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	20000278 	.word	0x20000278
 800ef00:	080171d4 	.word	0x080171d4
 800ef04:	20000040 	.word	0x20000040
 800ef08:	20000008 	.word	0x20000008
 800ef0c:	080171c8 	.word	0x080171c8

0800ef10 <printCount>:

void printCount(uint32_t clear) {                                                              // переписать количество повторений
 800ef10:	b5b0      	push	{r4, r5, r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af02      	add	r7, sp, #8
 800ef16:	6078      	str	r0, [r7, #4]
	if (clear) {
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d010      	beq.n	800ef40 <printCount+0x30>
		strcpy(bufSpi, "                 ");
 800ef1e:	4a31      	ldr	r2, [pc, #196]	; (800efe4 <printCount+0xd4>)
 800ef20:	4b31      	ldr	r3, [pc, #196]	; (800efe8 <printCount+0xd8>)
 800ef22:	4614      	mov	r4, r2
 800ef24:	461d      	mov	r5, r3
 800ef26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef2a:	682b      	ldr	r3, [r5, #0]
 800ef2c:	8023      	strh	r3, [r4, #0]
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
 800ef2e:	2300      	movs	r3, #0
 800ef30:	9300      	str	r3, [sp, #0]
 800ef32:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800ef36:	4a2b      	ldr	r2, [pc, #172]	; (800efe4 <printCount+0xd4>)
 800ef38:	217e      	movs	r1, #126	; 0x7e
 800ef3a:	207d      	movs	r0, #125	; 0x7d
 800ef3c:	f7fe fb00 	bl	800d540 <ILI9341_WriteMyString>
	}
	strcpy(bufSpi, "Count:");
 800ef40:	4b28      	ldr	r3, [pc, #160]	; (800efe4 <printCount+0xd4>)
 800ef42:	4a2a      	ldr	r2, [pc, #168]	; (800efec <printCount+0xdc>)
 800ef44:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef48:	6018      	str	r0, [r3, #0]
 800ef4a:	3304      	adds	r3, #4
 800ef4c:	8019      	strh	r1, [r3, #0]
 800ef4e:	3302      	adds	r3, #2
 800ef50:	0c0a      	lsrs	r2, r1, #16
 800ef52:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteMyString(12, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
 800ef54:	2300      	movs	r3, #0
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800ef5c:	4a21      	ldr	r2, [pc, #132]	; (800efe4 <printCount+0xd4>)
 800ef5e:	217e      	movs	r1, #126	; 0x7e
 800ef60:	200c      	movs	r0, #12
 800ef62:	f7fe faed 	bl	800d540 <ILI9341_WriteMyString>
	if (ParamDevice.count) {
 800ef66:	4b22      	ldr	r3, [pc, #136]	; (800eff0 <printCount+0xe0>)
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d027      	beq.n	800efbe <printCount+0xae>
		if (ParamDevice.unitCount) {
 800ef6e:	4b20      	ldr	r3, [pc, #128]	; (800eff0 <printCount+0xe0>)
 800ef70:	699b      	ldr	r3, [r3, #24]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d011      	beq.n	800ef9a <printCount+0x8a>
			sprintf(bufSpi, "%-3u %s", (unsigned int) ParamDevice.count, "kr  ");
 800ef76:	4b1e      	ldr	r3, [pc, #120]	; (800eff0 <printCount+0xe0>)
 800ef78:	689b      	ldr	r3, [r3, #8]
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	4b1d      	ldr	r3, [pc, #116]	; (800eff4 <printCount+0xe4>)
 800ef7e:	491e      	ldr	r1, [pc, #120]	; (800eff8 <printCount+0xe8>)
 800ef80:	4818      	ldr	r0, [pc, #96]	; (800efe4 <printCount+0xd4>)
 800ef82:	f005 fe0b 	bl	8014b9c <siprintf>
			ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
 800ef86:	2300      	movs	r3, #0
 800ef88:	9300      	str	r3, [sp, #0]
 800ef8a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800ef8e:	4a15      	ldr	r2, [pc, #84]	; (800efe4 <printCount+0xd4>)
 800ef90:	217e      	movs	r1, #126	; 0x7e
 800ef92:	207d      	movs	r0, #125	; 0x7d
 800ef94:	f7fe fad4 	bl	800d540 <ILI9341_WriteMyString>
		}
	} else {
		sprintf(bufSpi, "~   %s  ", "rp");                                                     // в символах я заменил ~ знаком бесконечности
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
	}
}
 800ef98:	e01f      	b.n	800efda <printCount+0xca>
			sprintf(bufSpi, "%-3u %s", (unsigned int) ParamDevice.count, " rp  ");
 800ef9a:	4b15      	ldr	r3, [pc, #84]	; (800eff0 <printCount+0xe0>)
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	461a      	mov	r2, r3
 800efa0:	4b16      	ldr	r3, [pc, #88]	; (800effc <printCount+0xec>)
 800efa2:	4915      	ldr	r1, [pc, #84]	; (800eff8 <printCount+0xe8>)
 800efa4:	480f      	ldr	r0, [pc, #60]	; (800efe4 <printCount+0xd4>)
 800efa6:	f005 fdf9 	bl	8014b9c <siprintf>
			ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
 800efaa:	2300      	movs	r3, #0
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800efb2:	4a0c      	ldr	r2, [pc, #48]	; (800efe4 <printCount+0xd4>)
 800efb4:	217e      	movs	r1, #126	; 0x7e
 800efb6:	207d      	movs	r0, #125	; 0x7d
 800efb8:	f7fe fac2 	bl	800d540 <ILI9341_WriteMyString>
}
 800efbc:	e00d      	b.n	800efda <printCount+0xca>
		sprintf(bufSpi, "~   %s  ", "rp");                                                     // в символах я заменил ~ знаком бесконечности
 800efbe:	4a10      	ldr	r2, [pc, #64]	; (800f000 <printCount+0xf0>)
 800efc0:	4910      	ldr	r1, [pc, #64]	; (800f004 <printCount+0xf4>)
 800efc2:	4808      	ldr	r0, [pc, #32]	; (800efe4 <printCount+0xd4>)
 800efc4:	f005 fdea 	bl	8014b9c <siprintf>
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
 800efc8:	2300      	movs	r3, #0
 800efca:	9300      	str	r3, [sp, #0]
 800efcc:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800efd0:	4a04      	ldr	r2, [pc, #16]	; (800efe4 <printCount+0xd4>)
 800efd2:	217e      	movs	r1, #126	; 0x7e
 800efd4:	207d      	movs	r0, #125	; 0x7d
 800efd6:	f7fe fab3 	bl	800d540 <ILI9341_WriteMyString>
}
 800efda:	bf00      	nop
 800efdc:	3708      	adds	r7, #8
 800efde:	46bd      	mov	sp, r7
 800efe0:	bdb0      	pop	{r4, r5, r7, pc}
 800efe2:	bf00      	nop
 800efe4:	20000278 	.word	0x20000278
 800efe8:	080171dc 	.word	0x080171dc
 800efec:	080171f0 	.word	0x080171f0
 800eff0:	20000040 	.word	0x20000040
 800eff4:	080171f8 	.word	0x080171f8
 800eff8:	08017200 	.word	0x08017200
 800effc:	08017208 	.word	0x08017208
 800f000:	08017210 	.word	0x08017210
 800f004:	08017214 	.word	0x08017214

0800f008 <printReversCount>:

void printReversCount(uint32_t count) {                                                       // переписать количество повторений
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af02      	add	r7, sp, #8
 800f00e:	6078      	str	r0, [r7, #4]
	if (ParamDevice.count) {
 800f010:	4b1e      	ldr	r3, [pc, #120]	; (800f08c <printReversCount+0x84>)
 800f012:	689b      	ldr	r3, [r3, #8]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d027      	beq.n	800f068 <printReversCount+0x60>
		if (count >= 1000) {
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f01e:	d313      	bcc.n	800f048 <printReversCount+0x40>
			sprintf(bufSpi, "%-3u %s", (unsigned int) (count / 1000), "kr  ");
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a1b      	ldr	r2, [pc, #108]	; (800f090 <printReversCount+0x88>)
 800f024:	fba2 2303 	umull	r2, r3, r2, r3
 800f028:	099a      	lsrs	r2, r3, #6
 800f02a:	4b1a      	ldr	r3, [pc, #104]	; (800f094 <printReversCount+0x8c>)
 800f02c:	491a      	ldr	r1, [pc, #104]	; (800f098 <printReversCount+0x90>)
 800f02e:	481b      	ldr	r0, [pc, #108]	; (800f09c <printReversCount+0x94>)
 800f030:	f005 fdb4 	bl	8014b9c <siprintf>
			ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
 800f034:	2300      	movs	r3, #0
 800f036:	9300      	str	r3, [sp, #0]
 800f038:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800f03c:	4a17      	ldr	r2, [pc, #92]	; (800f09c <printReversCount+0x94>)
 800f03e:	217e      	movs	r1, #126	; 0x7e
 800f040:	207d      	movs	r0, #125	; 0x7d
 800f042:	f7fe fa7d 	bl	800d540 <ILI9341_WriteMyString>
		}
	} else {
		sprintf(bufSpi, "~   %s  ", "rp");                                                     // в символах я заменил ~ знаком бесконечности
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
	}
}
 800f046:	e01d      	b.n	800f084 <printReversCount+0x7c>
			sprintf(bufSpi, "%-3u %s", (unsigned int) count, " rp  ");
 800f048:	4b15      	ldr	r3, [pc, #84]	; (800f0a0 <printReversCount+0x98>)
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	4912      	ldr	r1, [pc, #72]	; (800f098 <printReversCount+0x90>)
 800f04e:	4813      	ldr	r0, [pc, #76]	; (800f09c <printReversCount+0x94>)
 800f050:	f005 fda4 	bl	8014b9c <siprintf>
			ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
 800f054:	2300      	movs	r3, #0
 800f056:	9300      	str	r3, [sp, #0]
 800f058:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800f05c:	4a0f      	ldr	r2, [pc, #60]	; (800f09c <printReversCount+0x94>)
 800f05e:	217e      	movs	r1, #126	; 0x7e
 800f060:	207d      	movs	r0, #125	; 0x7d
 800f062:	f7fe fa6d 	bl	800d540 <ILI9341_WriteMyString>
}
 800f066:	e00d      	b.n	800f084 <printReversCount+0x7c>
		sprintf(bufSpi, "~   %s  ", "rp");                                                     // в символах я заменил ~ знаком бесконечности
 800f068:	4a0e      	ldr	r2, [pc, #56]	; (800f0a4 <printReversCount+0x9c>)
 800f06a:	490f      	ldr	r1, [pc, #60]	; (800f0a8 <printReversCount+0xa0>)
 800f06c:	480b      	ldr	r0, [pc, #44]	; (800f09c <printReversCount+0x94>)
 800f06e:	f005 fd95 	bl	8014b9c <siprintf>
		ILI9341_WriteMyString(125, 126, bufSpi, ILI9341_PURPLE, ILI9341_BLACK);
 800f072:	2300      	movs	r3, #0
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800f07a:	4a08      	ldr	r2, [pc, #32]	; (800f09c <printReversCount+0x94>)
 800f07c:	217e      	movs	r1, #126	; 0x7e
 800f07e:	207d      	movs	r0, #125	; 0x7d
 800f080:	f7fe fa5e 	bl	800d540 <ILI9341_WriteMyString>
}
 800f084:	bf00      	nop
 800f086:	3708      	adds	r7, #8
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	20000040 	.word	0x20000040
 800f090:	10624dd3 	.word	0x10624dd3
 800f094:	080171f8 	.word	0x080171f8
 800f098:	08017200 	.word	0x08017200
 800f09c:	20000278 	.word	0x20000278
 800f0a0:	08017208 	.word	0x08017208
 800f0a4:	08017210 	.word	0x08017210
 800f0a8:	08017214 	.word	0x08017214

0800f0ac <printColorImage>:

void printColorImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h,                           // печать цветной картинки по координатам + статус нажато
		uint16_t status, const uint16_t *data) {
 800f0ac:	b590      	push	{r4, r7, lr}
 800f0ae:	b085      	sub	sp, #20
 800f0b0:	af02      	add	r7, sp, #8
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	4608      	mov	r0, r1
 800f0b6:	4611      	mov	r1, r2
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	4623      	mov	r3, r4
 800f0bc:	80fb      	strh	r3, [r7, #6]
 800f0be:	4603      	mov	r3, r0
 800f0c0:	80bb      	strh	r3, [r7, #4]
 800f0c2:	460b      	mov	r3, r1
 800f0c4:	807b      	strh	r3, [r7, #2]
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	803b      	strh	r3, [r7, #0]
	if (status == NO_PRESSED) {
 800f0ca:	8b3b      	ldrh	r3, [r7, #24]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d11c      	bne.n	800f10a <printColorImage+0x5e>
		drawRect(x - 1, y - 1, w + 2, h + 2, ILI9341_BLACK);                                   // печатаем со смещением чтоб стереть старое
 800f0d0:	88fb      	ldrh	r3, [r7, #6]
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	b218      	sxth	r0, r3
 800f0d8:	88bb      	ldrh	r3, [r7, #4]
 800f0da:	3b01      	subs	r3, #1
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	b219      	sxth	r1, r3
 800f0e0:	887b      	ldrh	r3, [r7, #2]
 800f0e2:	3302      	adds	r3, #2
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	b21a      	sxth	r2, r3
 800f0e8:	883b      	ldrh	r3, [r7, #0]
 800f0ea:	3302      	adds	r3, #2
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	b21b      	sxth	r3, r3
 800f0f0:	2400      	movs	r4, #0
 800f0f2:	9400      	str	r4, [sp, #0]
 800f0f4:	f7fe fc5e 	bl	800d9b4 <drawRect>
		ILI9341_DrawImage(x, y, w, h, data);
 800f0f8:	883c      	ldrh	r4, [r7, #0]
 800f0fa:	887a      	ldrh	r2, [r7, #2]
 800f0fc:	88b9      	ldrh	r1, [r7, #4]
 800f0fe:	88f8      	ldrh	r0, [r7, #6]
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	9300      	str	r3, [sp, #0]
 800f104:	4623      	mov	r3, r4
 800f106:	f7fe fb3d 	bl	800d784 <ILI9341_DrawImage>
	}
	if (status == PRESSED) {
 800f10a:	8b3b      	ldrh	r3, [r7, #24]
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d11c      	bne.n	800f14a <printColorImage+0x9e>
		drawRect(x, y, w + 2, h + 2, ILI9341_BLACK);
 800f110:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f114:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f118:	887b      	ldrh	r3, [r7, #2]
 800f11a:	3302      	adds	r3, #2
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	b21a      	sxth	r2, r3
 800f120:	883b      	ldrh	r3, [r7, #0]
 800f122:	3302      	adds	r3, #2
 800f124:	b29b      	uxth	r3, r3
 800f126:	b21b      	sxth	r3, r3
 800f128:	2400      	movs	r4, #0
 800f12a:	9400      	str	r4, [sp, #0]
 800f12c:	f7fe fc42 	bl	800d9b4 <drawRect>
		ILI9341_DrawImage(x + 1, y + 1, w, h, data);                                           // печатаем со смещением для эффекта нажатия
 800f130:	88fb      	ldrh	r3, [r7, #6]
 800f132:	3301      	adds	r3, #1
 800f134:	b298      	uxth	r0, r3
 800f136:	88bb      	ldrh	r3, [r7, #4]
 800f138:	3301      	adds	r3, #1
 800f13a:	b299      	uxth	r1, r3
 800f13c:	883c      	ldrh	r4, [r7, #0]
 800f13e:	887a      	ldrh	r2, [r7, #2]
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	9300      	str	r3, [sp, #0]
 800f144:	4623      	mov	r3, r4
 800f146:	f7fe fb1d 	bl	800d784 <ILI9341_DrawImage>
	}
}
 800f14a:	bf00      	nop
 800f14c:	370c      	adds	r7, #12
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd90      	pop	{r4, r7, pc}
	...

0800f154 <mainDisplayPrint>:

void mainDisplayPrint(void) {                                                                  // стартовая печать на экране
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af04      	add	r7, sp, #16
	ILI9341_FillScreen(ILI9341_BLACK);
 800f15a:	2000      	movs	r0, #0
 800f15c:	f7fe f8e8 	bl	800d330 <ILI9341_FillScreen>
	ILI9341_FillRectangle(0, 0, 320, 22, ILI9341_BLUE);
 800f160:	231f      	movs	r3, #31
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	2316      	movs	r3, #22
 800f166:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f16a:	2100      	movs	r1, #0
 800f16c:	2000      	movs	r0, #0
 800f16e:	f7fe f875 	bl	800d25c <ILI9341_FillRectangle>
	//printTypeOutput();
	printFreeq();
 800f172:	f7ff fd79 	bl	800ec68 <printFreeq>
	printTImpulse();
 800f176:	f7ff fe5b 	bl	800ee30 <printTImpulse>
	printTPause();
 800f17a:	f7ff fe93 	bl	800eea4 <printTPause>
	printCount(0);
 800f17e:	2000      	movs	r0, #0
 800f180:	f7ff fec6 	bl	800ef10 <printCount>
	printColorImage(24, 182, 50, 50, NO_PRESSED, image_Plus);
 800f184:	4b1f      	ldr	r3, [pc, #124]	; (800f204 <mainDisplayPrint+0xb0>)
 800f186:	9301      	str	r3, [sp, #4]
 800f188:	2300      	movs	r3, #0
 800f18a:	9300      	str	r3, [sp, #0]
 800f18c:	2332      	movs	r3, #50	; 0x32
 800f18e:	2232      	movs	r2, #50	; 0x32
 800f190:	21b6      	movs	r1, #182	; 0xb6
 800f192:	2018      	movs	r0, #24
 800f194:	f7ff ff8a 	bl	800f0ac <printColorImage>
	printColorImage(98, 182, 50, 50, NO_PRESSED, image_Arrow);
 800f198:	4b1b      	ldr	r3, [pc, #108]	; (800f208 <mainDisplayPrint+0xb4>)
 800f19a:	9301      	str	r3, [sp, #4]
 800f19c:	2300      	movs	r3, #0
 800f19e:	9300      	str	r3, [sp, #0]
 800f1a0:	2332      	movs	r3, #50	; 0x32
 800f1a2:	2232      	movs	r2, #50	; 0x32
 800f1a4:	21b6      	movs	r1, #182	; 0xb6
 800f1a6:	2062      	movs	r0, #98	; 0x62
 800f1a8:	f7ff ff80 	bl	800f0ac <printColorImage>
	printColorImage(172, 182, 50, 50, NO_PRESSED, image_Minus);
 800f1ac:	4b17      	ldr	r3, [pc, #92]	; (800f20c <mainDisplayPrint+0xb8>)
 800f1ae:	9301      	str	r3, [sp, #4]
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	2332      	movs	r3, #50	; 0x32
 800f1b6:	2232      	movs	r2, #50	; 0x32
 800f1b8:	21b6      	movs	r1, #182	; 0xb6
 800f1ba:	20ac      	movs	r0, #172	; 0xac
 800f1bc:	f7ff ff76 	bl	800f0ac <printColorImage>
	printColorImage(246, 182, 50, 50, NO_PRESSED, image_powerGreen);
 800f1c0:	4b13      	ldr	r3, [pc, #76]	; (800f210 <mainDisplayPrint+0xbc>)
 800f1c2:	9301      	str	r3, [sp, #4]
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	9300      	str	r3, [sp, #0]
 800f1c8:	2332      	movs	r3, #50	; 0x32
 800f1ca:	2232      	movs	r2, #50	; 0x32
 800f1cc:	21b6      	movs	r1, #182	; 0xb6
 800f1ce:	20f6      	movs	r0, #246	; 0xf6
 800f1d0:	f7ff ff6c 	bl	800f0ac <printColorImage>
	ILI9341_DrawMonochromeImage(260, 43, ILI9341_YELLOW, ILI9341_BLACK, tranzistor);
 800f1d4:	4a0f      	ldr	r2, [pc, #60]	; (800f214 <mainDisplayPrint+0xc0>)
 800f1d6:	466b      	mov	r3, sp
 800f1d8:	ca07      	ldmia	r2, {r0, r1, r2}
 800f1da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f1de:	2300      	movs	r3, #0
 800f1e0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800f1e4:	212b      	movs	r1, #43	; 0x2b
 800f1e6:	f44f 7082 	mov.w	r0, #260	; 0x104
 800f1ea:	f7fe fb13 	bl	800d814 <ILI9341_DrawMonochromeImage>
	NPN_PNPButton(NPN, PRESSED);
 800f1ee:	2101      	movs	r1, #1
 800f1f0:	2001      	movs	r0, #1
 800f1f2:	f000 fb39 	bl	800f868 <NPN_PNPButton>
	NPN_PNPButton(PNP, NO_PRESSED);
 800f1f6:	2100      	movs	r1, #0
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	f000 fb35 	bl	800f868 <NPN_PNPButton>
    /*if(ILI9341_TouchGetCoordinates(&x, &y)) {                                                // это рисовалка на дисплее)
	 ILI9341_DrawPixel(x, y, ILI9341_WHITE);
	 }*/
}
 800f1fe:	bf00      	nop
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	08019948 	.word	0x08019948
 800f208:	0801c184 	.word	0x0801c184
 800f20c:	0801acd0 	.word	0x0801acd0
 800f210:	080185c0 	.word	0x080185c0
 800f214:	08021944 	.word	0x08021944

0800f218 <checkAreaTouch>:

uint8_t checkAreaTouch(uint16_t xTouch, uint16_t yTouch, uint16_t xScan, uint16_t yScan, uint16_t weight, uint16_t height) { // проверка нажата кнопка или не
 800f218:	b490      	push	{r4, r7}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	4604      	mov	r4, r0
 800f220:	4608      	mov	r0, r1
 800f222:	4611      	mov	r1, r2
 800f224:	461a      	mov	r2, r3
 800f226:	4623      	mov	r3, r4
 800f228:	80fb      	strh	r3, [r7, #6]
 800f22a:	4603      	mov	r3, r0
 800f22c:	80bb      	strh	r3, [r7, #4]
 800f22e:	460b      	mov	r3, r1
 800f230:	807b      	strh	r3, [r7, #2]
 800f232:	4613      	mov	r3, r2
 800f234:	803b      	strh	r3, [r7, #0]
	if (xTouch >= xScan && xTouch <= xScan + weight && yTouch >= yScan && yTouch <= yScan + height) return true;  // если мы на клавише вернуть ок
 800f236:	88fa      	ldrh	r2, [r7, #6]
 800f238:	887b      	ldrh	r3, [r7, #2]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d311      	bcc.n	800f262 <checkAreaTouch+0x4a>
 800f23e:	88fa      	ldrh	r2, [r7, #6]
 800f240:	8879      	ldrh	r1, [r7, #2]
 800f242:	8a3b      	ldrh	r3, [r7, #16]
 800f244:	440b      	add	r3, r1
 800f246:	429a      	cmp	r2, r3
 800f248:	dc0b      	bgt.n	800f262 <checkAreaTouch+0x4a>
 800f24a:	88ba      	ldrh	r2, [r7, #4]
 800f24c:	883b      	ldrh	r3, [r7, #0]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d307      	bcc.n	800f262 <checkAreaTouch+0x4a>
 800f252:	88ba      	ldrh	r2, [r7, #4]
 800f254:	8839      	ldrh	r1, [r7, #0]
 800f256:	8abb      	ldrh	r3, [r7, #20]
 800f258:	440b      	add	r3, r1
 800f25a:	429a      	cmp	r2, r3
 800f25c:	dc01      	bgt.n	800f262 <checkAreaTouch+0x4a>
 800f25e:	2301      	movs	r3, #1
 800f260:	e000      	b.n	800f264 <checkAreaTouch+0x4c>
	return false;
 800f262:	2300      	movs	r3, #0
}
 800f264:	4618      	mov	r0, r3
 800f266:	3708      	adds	r7, #8
 800f268:	46bd      	mov	sp, r7
 800f26a:	bc90      	pop	{r4, r7}
 800f26c:	4770      	bx	lr
	...

0800f270 <checkstrokeArea>:

void checkstrokeArea(void) {                                                                   // проверка нажатия на параметры ( импульс, пауза)
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af04      	add	r7, sp, #16
	if (!READ_FLAG(AREA1_PRESS, globalFlag)) {                                                 // если область активна то рисуем желтый прямоугольник
 800f276:	4b31      	ldr	r3, [pc, #196]	; (800f33c <checkstrokeArea+0xcc>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f003 0308 	and.w	r3, r3, #8
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d10c      	bne.n	800f29c <checkstrokeArea+0x2c>
		drawSomePixelRoundRect(7, 28, 245, 48, 4, 2, ILI9341_BLACK);                           // а если нет то черным закрашиваем
 800f282:	2300      	movs	r3, #0
 800f284:	9302      	str	r3, [sp, #8]
 800f286:	2302      	movs	r3, #2
 800f288:	9301      	str	r3, [sp, #4]
 800f28a:	2304      	movs	r3, #4
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	2330      	movs	r3, #48	; 0x30
 800f290:	22f5      	movs	r2, #245	; 0xf5
 800f292:	211c      	movs	r1, #28
 800f294:	2007      	movs	r0, #7
 800f296:	f7fe fe3a 	bl	800df0e <drawSomePixelRoundRect>
 800f29a:	e00c      	b.n	800f2b6 <checkstrokeArea+0x46>
	} else {
		drawSomePixelRoundRect(7, 28, 245, 48, 4, 2, ILI9341_YELLOW);
 800f29c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f2a0:	9302      	str	r3, [sp, #8]
 800f2a2:	2302      	movs	r3, #2
 800f2a4:	9301      	str	r3, [sp, #4]
 800f2a6:	2304      	movs	r3, #4
 800f2a8:	9300      	str	r3, [sp, #0]
 800f2aa:	2330      	movs	r3, #48	; 0x30
 800f2ac:	22f5      	movs	r2, #245	; 0xf5
 800f2ae:	211c      	movs	r1, #28
 800f2b0:	2007      	movs	r0, #7
 800f2b2:	f7fe fe2c 	bl	800df0e <drawSomePixelRoundRect>
	}
	if (!READ_FLAG(AREA2_PRESS, globalFlag)) {
 800f2b6:	4b21      	ldr	r3, [pc, #132]	; (800f33c <checkstrokeArea+0xcc>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f003 0310 	and.w	r3, r3, #16
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10c      	bne.n	800f2dc <checkstrokeArea+0x6c>
		drawSomePixelRoundRect(7, 76, 245, 48, 4, 2, ILI9341_BLACK);
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	9302      	str	r3, [sp, #8]
 800f2c6:	2302      	movs	r3, #2
 800f2c8:	9301      	str	r3, [sp, #4]
 800f2ca:	2304      	movs	r3, #4
 800f2cc:	9300      	str	r3, [sp, #0]
 800f2ce:	2330      	movs	r3, #48	; 0x30
 800f2d0:	22f5      	movs	r2, #245	; 0xf5
 800f2d2:	214c      	movs	r1, #76	; 0x4c
 800f2d4:	2007      	movs	r0, #7
 800f2d6:	f7fe fe1a 	bl	800df0e <drawSomePixelRoundRect>
 800f2da:	e00c      	b.n	800f2f6 <checkstrokeArea+0x86>
	} else {
		drawSomePixelRoundRect(7, 76, 245, 48, 4, 2, ILI9341_YELLOW);
 800f2dc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f2e0:	9302      	str	r3, [sp, #8]
 800f2e2:	2302      	movs	r3, #2
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	2304      	movs	r3, #4
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	2330      	movs	r3, #48	; 0x30
 800f2ec:	22f5      	movs	r2, #245	; 0xf5
 800f2ee:	214c      	movs	r1, #76	; 0x4c
 800f2f0:	2007      	movs	r0, #7
 800f2f2:	f7fe fe0c 	bl	800df0e <drawSomePixelRoundRect>
	}
	if (!READ_FLAG(AREA3_PRESS, globalFlag)) {
 800f2f6:	4b11      	ldr	r3, [pc, #68]	; (800f33c <checkstrokeArea+0xcc>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f003 0320 	and.w	r3, r3, #32
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d10c      	bne.n	800f31c <checkstrokeArea+0xac>
		drawSomePixelRoundRect(7, 124, 245, 48, 4, 2, ILI9341_BLACK);
 800f302:	2300      	movs	r3, #0
 800f304:	9302      	str	r3, [sp, #8]
 800f306:	2302      	movs	r3, #2
 800f308:	9301      	str	r3, [sp, #4]
 800f30a:	2304      	movs	r3, #4
 800f30c:	9300      	str	r3, [sp, #0]
 800f30e:	2330      	movs	r3, #48	; 0x30
 800f310:	22f5      	movs	r2, #245	; 0xf5
 800f312:	217c      	movs	r1, #124	; 0x7c
 800f314:	2007      	movs	r0, #7
 800f316:	f7fe fdfa 	bl	800df0e <drawSomePixelRoundRect>
	} else {
		drawSomePixelRoundRect(7, 124, 245, 48, 4, 2, ILI9341_YELLOW);
	}
}
 800f31a:	e00c      	b.n	800f336 <checkstrokeArea+0xc6>
		drawSomePixelRoundRect(7, 124, 245, 48, 4, 2, ILI9341_YELLOW);
 800f31c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f320:	9302      	str	r3, [sp, #8]
 800f322:	2302      	movs	r3, #2
 800f324:	9301      	str	r3, [sp, #4]
 800f326:	2304      	movs	r3, #4
 800f328:	9300      	str	r3, [sp, #0]
 800f32a:	2330      	movs	r3, #48	; 0x30
 800f32c:	22f5      	movs	r2, #245	; 0xf5
 800f32e:	217c      	movs	r1, #124	; 0x7c
 800f330:	2007      	movs	r0, #7
 800f332:	f7fe fdec 	bl	800df0e <drawSomePixelRoundRect>
}
 800f336:	bf00      	nop
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	200004d0 	.word	0x200004d0

0800f340 <endOperationWindow>:

void endOperationWindow(uint8_t onOff) {                                                       // табличка генерация завершена
 800f340:	b580      	push	{r7, lr}
 800f342:	b086      	sub	sp, #24
 800f344:	af04      	add	r7, sp, #16
 800f346:	4603      	mov	r3, r0
 800f348:	71fb      	strb	r3, [r7, #7]
	if (onOff) {
 800f34a:	79fb      	ldrb	r3, [r7, #7]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d023      	beq.n	800f398 <endOperationWindow+0x58>
		ILI9341_FillRectangle(40, 60, 180, 60, ILI9341_BLACK);
 800f350:	2300      	movs	r3, #0
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	233c      	movs	r3, #60	; 0x3c
 800f356:	22b4      	movs	r2, #180	; 0xb4
 800f358:	213c      	movs	r1, #60	; 0x3c
 800f35a:	2028      	movs	r0, #40	; 0x28
 800f35c:	f7fd ff7e 	bl	800d25c <ILI9341_FillRectangle>
		drawSomePixelRoundRect(38, 58, 182, 62, 3, 2, ILI9341_YELLOW);
 800f360:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f364:	9302      	str	r3, [sp, #8]
 800f366:	2302      	movs	r3, #2
 800f368:	9301      	str	r3, [sp, #4]
 800f36a:	2303      	movs	r3, #3
 800f36c:	9300      	str	r3, [sp, #0]
 800f36e:	233e      	movs	r3, #62	; 0x3e
 800f370:	22b6      	movs	r2, #182	; 0xb6
 800f372:	213a      	movs	r1, #58	; 0x3a
 800f374:	2026      	movs	r0, #38	; 0x26
 800f376:	f7fe fdca 	bl	800df0e <drawSomePixelRoundRect>
		strcpy(bufSpi, "COMPLETE");
 800f37a:	4b10      	ldr	r3, [pc, #64]	; (800f3bc <endOperationWindow+0x7c>)
 800f37c:	4a10      	ldr	r2, [pc, #64]	; (800f3c0 <endOperationWindow+0x80>)
 800f37e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f380:	c303      	stmia	r3!, {r0, r1}
 800f382:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteMyString(48, 65, bufSpi, ILI9341_RED, ILI9341_BLACK);
 800f384:	2300      	movs	r3, #0
 800f386:	9300      	str	r3, [sp, #0]
 800f388:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800f38c:	4a0b      	ldr	r2, [pc, #44]	; (800f3bc <endOperationWindow+0x7c>)
 800f38e:	2141      	movs	r1, #65	; 0x41
 800f390:	2030      	movs	r0, #48	; 0x30
 800f392:	f7fe f8d5 	bl	800d540 <ILI9341_WriteMyString>
		ILI9341_FillRectangle(38, 58, 182, 62, ILI9341_BLACK);                                 // или же вернуть обратно изображение на дисплее
		printTImpulse();
		printTPause();
		checkstrokeArea();
	}
}
 800f396:	e00d      	b.n	800f3b4 <endOperationWindow+0x74>
		ILI9341_FillRectangle(38, 58, 182, 62, ILI9341_BLACK);                                 // или же вернуть обратно изображение на дисплее
 800f398:	2300      	movs	r3, #0
 800f39a:	9300      	str	r3, [sp, #0]
 800f39c:	233e      	movs	r3, #62	; 0x3e
 800f39e:	22b6      	movs	r2, #182	; 0xb6
 800f3a0:	213a      	movs	r1, #58	; 0x3a
 800f3a2:	2026      	movs	r0, #38	; 0x26
 800f3a4:	f7fd ff5a 	bl	800d25c <ILI9341_FillRectangle>
		printTImpulse();
 800f3a8:	f7ff fd42 	bl	800ee30 <printTImpulse>
		printTPause();
 800f3ac:	f7ff fd7a 	bl	800eea4 <printTPause>
		checkstrokeArea();
 800f3b0:	f7ff ff5e 	bl	800f270 <checkstrokeArea>
}
 800f3b4:	bf00      	nop
 800f3b6:	3708      	adds	r7, #8
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	20000278 	.word	0x20000278
 800f3c0:	08017220 	.word	0x08017220

0800f3c4 <overCurrent>:

void overCurrent (uint8_t onOff) {                                                            // табличка превышение тока!
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b086      	sub	sp, #24
 800f3c8:	af04      	add	r7, sp, #16
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	71fb      	strb	r3, [r7, #7]
	if (onOff) {
 800f3ce:	79fb      	ldrb	r3, [r7, #7]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d023      	beq.n	800f41c <overCurrent+0x58>
		ILI9341_FillRectangle(40, 60, 180, 60, ILI9341_BLACK);
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	9300      	str	r3, [sp, #0]
 800f3d8:	233c      	movs	r3, #60	; 0x3c
 800f3da:	22b4      	movs	r2, #180	; 0xb4
 800f3dc:	213c      	movs	r1, #60	; 0x3c
 800f3de:	2028      	movs	r0, #40	; 0x28
 800f3e0:	f7fd ff3c 	bl	800d25c <ILI9341_FillRectangle>
		drawSomePixelRoundRect(38, 58, 182, 62, 3, 2, ILI9341_YELLOW);
 800f3e4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f3e8:	9302      	str	r3, [sp, #8]
 800f3ea:	2302      	movs	r3, #2
 800f3ec:	9301      	str	r3, [sp, #4]
 800f3ee:	2303      	movs	r3, #3
 800f3f0:	9300      	str	r3, [sp, #0]
 800f3f2:	233e      	movs	r3, #62	; 0x3e
 800f3f4:	22b6      	movs	r2, #182	; 0xb6
 800f3f6:	213a      	movs	r1, #58	; 0x3a
 800f3f8:	2026      	movs	r0, #38	; 0x26
 800f3fa:	f7fe fd88 	bl	800df0e <drawSomePixelRoundRect>
		strcpy(bufSpi, "OVER CUR");
 800f3fe:	4b10      	ldr	r3, [pc, #64]	; (800f440 <overCurrent+0x7c>)
 800f400:	4a10      	ldr	r2, [pc, #64]	; (800f444 <overCurrent+0x80>)
 800f402:	ca07      	ldmia	r2, {r0, r1, r2}
 800f404:	c303      	stmia	r3!, {r0, r1}
 800f406:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteMyString(48, 65, bufSpi, ILI9341_RED, ILI9341_BLACK);
 800f408:	2300      	movs	r3, #0
 800f40a:	9300      	str	r3, [sp, #0]
 800f40c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800f410:	4a0b      	ldr	r2, [pc, #44]	; (800f440 <overCurrent+0x7c>)
 800f412:	2141      	movs	r1, #65	; 0x41
 800f414:	2030      	movs	r0, #48	; 0x30
 800f416:	f7fe f893 	bl	800d540 <ILI9341_WriteMyString>
		ILI9341_FillRectangle(38, 58, 182, 62, ILI9341_BLACK);                                 // или же вернуть обратно изображение на дисплее
		printTImpulse();
		printTPause();
		checkstrokeArea();
	}
}
 800f41a:	e00d      	b.n	800f438 <overCurrent+0x74>
		ILI9341_FillRectangle(38, 58, 182, 62, ILI9341_BLACK);                                 // или же вернуть обратно изображение на дисплее
 800f41c:	2300      	movs	r3, #0
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	233e      	movs	r3, #62	; 0x3e
 800f422:	22b6      	movs	r2, #182	; 0xb6
 800f424:	213a      	movs	r1, #58	; 0x3a
 800f426:	2026      	movs	r0, #38	; 0x26
 800f428:	f7fd ff18 	bl	800d25c <ILI9341_FillRectangle>
		printTImpulse();
 800f42c:	f7ff fd00 	bl	800ee30 <printTImpulse>
		printTPause();
 800f430:	f7ff fd38 	bl	800eea4 <printTPause>
		checkstrokeArea();
 800f434:	f7ff ff1c 	bl	800f270 <checkstrokeArea>
}
 800f438:	bf00      	nop
 800f43a:	3708      	adds	r7, #8
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	20000278 	.word	0x20000278
 800f444:	0801722c 	.word	0x0801722c

0800f448 <powerButton>:

void powerButton(void) {                                                                       // включаем/выключаем кнопку повер
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af02      	add	r7, sp, #8
	if (!READ_FLAG(ONE_TOUCH, globalFlag) && !timToEndOperation && !timToOvercurrent) {        // единичное нажатие + пока показывает комплит не нажимать
 800f44e:	4b23      	ldr	r3, [pc, #140]	; (800f4dc <powerButton+0x94>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	f003 0302 	and.w	r3, r3, #2
 800f456:	2b00      	cmp	r3, #0
 800f458:	d13c      	bne.n	800f4d4 <powerButton+0x8c>
 800f45a:	4b21      	ldr	r3, [pc, #132]	; (800f4e0 <powerButton+0x98>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d138      	bne.n	800f4d4 <powerButton+0x8c>
 800f462:	4b20      	ldr	r3, [pc, #128]	; (800f4e4 <powerButton+0x9c>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d134      	bne.n	800f4d4 <powerButton+0x8c>
		SET_FLAG(ONE_TOUCH, globalFlag);
 800f46a:	4b1c      	ldr	r3, [pc, #112]	; (800f4dc <powerButton+0x94>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f043 0302 	orr.w	r3, r3, #2
 800f472:	4a1a      	ldr	r2, [pc, #104]	; (800f4dc <powerButton+0x94>)
 800f474:	6013      	str	r3, [r2, #0]
		RESET_FLAG(AREA1_PRESS|AREA2_PRESS|AREA3_PRESS, globalFlag);                           // уберем выбор области при пуске
 800f476:	4b19      	ldr	r3, [pc, #100]	; (800f4dc <powerButton+0x94>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800f47e:	4a17      	ldr	r2, [pc, #92]	; (800f4dc <powerButton+0x94>)
 800f480:	6013      	str	r3, [r2, #0]
		checkstrokeArea();
 800f482:	f7ff fef5 	bl	800f270 <checkstrokeArea>
		if (ParamDevice.NPNTranzistor || ParamDevice.PNPTranzistor) {                          // если хоть один из транзисторов включен
 800f486:	4b18      	ldr	r3, [pc, #96]	; (800f4e8 <powerButton+0xa0>)
 800f488:	7f5b      	ldrb	r3, [r3, #29]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d103      	bne.n	800f496 <powerButton+0x4e>
 800f48e:	4b16      	ldr	r3, [pc, #88]	; (800f4e8 <powerButton+0xa0>)
 800f490:	7f9b      	ldrb	r3, [r3, #30]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d01e      	beq.n	800f4d4 <powerButton+0x8c>
			if (ParamDevice.power) {                                                           // если питание включено
 800f496:	4b14      	ldr	r3, [pc, #80]	; (800f4e8 <powerButton+0xa0>)
 800f498:	7fdb      	ldrb	r3, [r3, #31]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d00d      	beq.n	800f4ba <powerButton+0x72>
				ParamDevice.power = false;                                                     // выключим
 800f49e:	4b12      	ldr	r3, [pc, #72]	; (800f4e8 <powerButton+0xa0>)
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	77da      	strb	r2, [r3, #31]
				printColorImage(246, 182, 50, 50, NO_PRESSED, image_powerGreen);
 800f4a4:	4b11      	ldr	r3, [pc, #68]	; (800f4ec <powerButton+0xa4>)
 800f4a6:	9301      	str	r3, [sp, #4]
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	2332      	movs	r3, #50	; 0x32
 800f4ae:	2232      	movs	r2, #50	; 0x32
 800f4b0:	21b6      	movs	r1, #182	; 0xb6
 800f4b2:	20f6      	movs	r0, #246	; 0xf6
 800f4b4:	f7ff fdfa 	bl	800f0ac <printColorImage>
				ParamDevice.power = true;                                                      // а если выключено то включим
				printColorImage(246, 182, 50, 50, PRESSED, image_powerRed);
			}
		}
	}
}
 800f4b8:	e00c      	b.n	800f4d4 <powerButton+0x8c>
				ParamDevice.power = true;                                                      // а если выключено то включим
 800f4ba:	4b0b      	ldr	r3, [pc, #44]	; (800f4e8 <powerButton+0xa0>)
 800f4bc:	2201      	movs	r2, #1
 800f4be:	77da      	strb	r2, [r3, #31]
				printColorImage(246, 182, 50, 50, PRESSED, image_powerRed);
 800f4c0:	4b0b      	ldr	r3, [pc, #44]	; (800f4f0 <powerButton+0xa8>)
 800f4c2:	9301      	str	r3, [sp, #4]
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	9300      	str	r3, [sp, #0]
 800f4c8:	2332      	movs	r3, #50	; 0x32
 800f4ca:	2232      	movs	r2, #50	; 0x32
 800f4cc:	21b6      	movs	r1, #182	; 0xb6
 800f4ce:	20f6      	movs	r0, #246	; 0xf6
 800f4d0:	f7ff fdec 	bl	800f0ac <printColorImage>
}
 800f4d4:	bf00      	nop
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	200004d0 	.word	0x200004d0
 800f4e0:	200004e8 	.word	0x200004e8
 800f4e4:	200004e0 	.word	0x200004e0
 800f4e8:	20000040 	.word	0x20000040
 800f4ec:	080185c0 	.word	0x080185c0
 800f4f0:	08017238 	.word	0x08017238

0800f4f4 <externalPowerOff>:

void externalPowerOff(void) {                                                                 // перерисовать кнопку включения из вне
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af02      	add	r7, sp, #8
	printColorImage(246, 182, 50, 50, NO_PRESSED, image_powerGreen);
 800f4fa:	4b08      	ldr	r3, [pc, #32]	; (800f51c <externalPowerOff+0x28>)
 800f4fc:	9301      	str	r3, [sp, #4]
 800f4fe:	2300      	movs	r3, #0
 800f500:	9300      	str	r3, [sp, #0]
 800f502:	2332      	movs	r3, #50	; 0x32
 800f504:	2232      	movs	r2, #50	; 0x32
 800f506:	21b6      	movs	r1, #182	; 0xb6
 800f508:	20f6      	movs	r0, #246	; 0xf6
 800f50a:	f7ff fdcf 	bl	800f0ac <printColorImage>
	printCount (1);
 800f50e:	2001      	movs	r0, #1
 800f510:	f7ff fcfe 	bl	800ef10 <printCount>
}
 800f514:	bf00      	nop
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	080185c0 	.word	0x080185c0

0800f520 <rangeMinMax>:

void rangeMinMax(int32_t *data, int32_t count, uint32_t plus_minus, int32_t min, int32_t max) {   // ограничить максимальное количество ввода
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
 800f52c:	603b      	str	r3, [r7, #0]
	if (plus_minus == PLUS) {
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2b01      	cmp	r3, #1
 800f532:	d118      	bne.n	800f566 <rangeMinMax+0x46>
		if (*data + count < max) {
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	4413      	add	r3, r2
 800f53c:	69ba      	ldr	r2, [r7, #24]
 800f53e:	429a      	cmp	r2, r3
 800f540:	dd06      	ble.n	800f550 <rangeMinMax+0x30>
			*data += count;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	441a      	add	r2, r3
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	601a      	str	r2, [r3, #0]
		} else {
			if (*data > min)
				*data -= 1;
		}
	}
}
 800f54e:	e022      	b.n	800f596 <rangeMinMax+0x76>
			if (*data < max)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	69ba      	ldr	r2, [r7, #24]
 800f556:	429a      	cmp	r2, r3
 800f558:	dd1d      	ble.n	800f596 <rangeMinMax+0x76>
				*data += 1;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	1c5a      	adds	r2, r3, #1
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	601a      	str	r2, [r3, #0]
}
 800f564:	e017      	b.n	800f596 <rangeMinMax+0x76>
		if (*data - count > min) {
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	1ad3      	subs	r3, r2, r3
 800f56e:	683a      	ldr	r2, [r7, #0]
 800f570:	429a      	cmp	r2, r3
 800f572:	da06      	bge.n	800f582 <rangeMinMax+0x62>
			*data -= count;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	1ad2      	subs	r2, r2, r3
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	601a      	str	r2, [r3, #0]
}
 800f580:	e009      	b.n	800f596 <rangeMinMax+0x76>
			if (*data > min)
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	683a      	ldr	r2, [r7, #0]
 800f588:	429a      	cmp	r2, r3
 800f58a:	da04      	bge.n	800f596 <rangeMinMax+0x76>
				*data -= 1;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	1e5a      	subs	r2, r3, #1
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	601a      	str	r2, [r3, #0]
}
 800f596:	bf00      	nop
 800f598:	3714      	adds	r7, #20
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr
	...

0800f5a4 <changeData>:

void changeData(uint16_t count, uint16_t plus_minus) {                                        // изменить параметры импульса
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af02      	add	r7, sp, #8
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	460a      	mov	r2, r1
 800f5ae:	80fb      	strh	r3, [r7, #6]
 800f5b0:	4613      	mov	r3, r2
 800f5b2:	80bb      	strh	r3, [r7, #4]
	if (READ_FLAG(AREA1_PRESS, globalFlag)) {                                                 // в зависимости от выбранной области
 800f5b4:	4b2a      	ldr	r3, [pc, #168]	; (800f660 <changeData+0xbc>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f003 0308 	and.w	r3, r3, #8
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d019      	beq.n	800f5f4 <changeData+0x50>
		if (ParamDevice.unitImpuls != 2) {                                                    // если мы не на секундах
 800f5c0:	4b28      	ldr	r3, [pc, #160]	; (800f664 <changeData+0xc0>)
 800f5c2:	691b      	ldr	r3, [r3, #16]
 800f5c4:	2b02      	cmp	r3, #2
 800f5c6:	d009      	beq.n	800f5dc <changeData+0x38>
			rangeMinMax(&ParamDevice.impuls, count, plus_minus, 1, 999);                      // то можем изменяться до 999
 800f5c8:	88f9      	ldrh	r1, [r7, #6]
 800f5ca:	88ba      	ldrh	r2, [r7, #4]
 800f5cc:	f240 33e7 	movw	r3, #999	; 0x3e7
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	4823      	ldr	r0, [pc, #140]	; (800f664 <changeData+0xc0>)
 800f5d6:	f7ff ffa3 	bl	800f520 <rangeMinMax>
 800f5da:	e007      	b.n	800f5ec <changeData+0x48>
		} else {
			rangeMinMax(&ParamDevice.impuls, count, plus_minus, 1, 20);                       // а если на секундах то только до 20
 800f5dc:	88f9      	ldrh	r1, [r7, #6]
 800f5de:	88ba      	ldrh	r2, [r7, #4]
 800f5e0:	2314      	movs	r3, #20
 800f5e2:	9300      	str	r3, [sp, #0]
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	481f      	ldr	r0, [pc, #124]	; (800f664 <changeData+0xc0>)
 800f5e8:	f7ff ff9a 	bl	800f520 <rangeMinMax>
		}
		printTImpulse();                                                                      // и перерисуем
 800f5ec:	f7ff fc20 	bl	800ee30 <printTImpulse>
		printFreeq();                                                                         // и перепишем частоту
 800f5f0:	f7ff fb3a 	bl	800ec68 <printFreeq>
	}
	if (READ_FLAG(AREA2_PRESS, globalFlag)) {
 800f5f4:	4b1a      	ldr	r3, [pc, #104]	; (800f660 <changeData+0xbc>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	f003 0310 	and.w	r3, r3, #16
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d019      	beq.n	800f634 <changeData+0x90>
		if (ParamDevice.unitPause != 2) {
 800f600:	4b18      	ldr	r3, [pc, #96]	; (800f664 <changeData+0xc0>)
 800f602:	695b      	ldr	r3, [r3, #20]
 800f604:	2b02      	cmp	r3, #2
 800f606:	d009      	beq.n	800f61c <changeData+0x78>
			rangeMinMax(&ParamDevice.pause, count, plus_minus, 1, 999);
 800f608:	88f9      	ldrh	r1, [r7, #6]
 800f60a:	88ba      	ldrh	r2, [r7, #4]
 800f60c:	f240 33e7 	movw	r3, #999	; 0x3e7
 800f610:	9300      	str	r3, [sp, #0]
 800f612:	2301      	movs	r3, #1
 800f614:	4814      	ldr	r0, [pc, #80]	; (800f668 <changeData+0xc4>)
 800f616:	f7ff ff83 	bl	800f520 <rangeMinMax>
 800f61a:	e007      	b.n	800f62c <changeData+0x88>
		} else {
			rangeMinMax(&ParamDevice.pause, count, plus_minus, 1, 20);
 800f61c:	88f9      	ldrh	r1, [r7, #6]
 800f61e:	88ba      	ldrh	r2, [r7, #4]
 800f620:	2314      	movs	r3, #20
 800f622:	9300      	str	r3, [sp, #0]
 800f624:	2301      	movs	r3, #1
 800f626:	4810      	ldr	r0, [pc, #64]	; (800f668 <changeData+0xc4>)
 800f628:	f7ff ff7a 	bl	800f520 <rangeMinMax>
		}
		printTPause();
 800f62c:	f7ff fc3a 	bl	800eea4 <printTPause>
		printFreeq();
 800f630:	f7ff fb1a 	bl	800ec68 <printFreeq>
	}
	if (READ_FLAG(AREA3_PRESS, globalFlag)) {                                                 // чуть проще для количества повторов
 800f634:	4b0a      	ldr	r3, [pc, #40]	; (800f660 <changeData+0xbc>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f003 0320 	and.w	r3, r3, #32
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d00b      	beq.n	800f658 <changeData+0xb4>
		rangeMinMax(&ParamDevice.count, count, plus_minus, 0, 999);
 800f640:	88f9      	ldrh	r1, [r7, #6]
 800f642:	88ba      	ldrh	r2, [r7, #4]
 800f644:	f240 33e7 	movw	r3, #999	; 0x3e7
 800f648:	9300      	str	r3, [sp, #0]
 800f64a:	2300      	movs	r3, #0
 800f64c:	4807      	ldr	r0, [pc, #28]	; (800f66c <changeData+0xc8>)
 800f64e:	f7ff ff67 	bl	800f520 <rangeMinMax>
		printCount(0);
 800f652:	2000      	movs	r0, #0
 800f654:	f7ff fc5c 	bl	800ef10 <printCount>
	}
}
 800f658:	bf00      	nop
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	200004d0 	.word	0x200004d0
 800f664:	20000040 	.word	0x20000040
 800f668:	20000044 	.word	0x20000044
 800f66c:	20000048 	.word	0x20000048

0800f670 <speedControl>:

void speedControl(void) {                                                                     // инкремент в зависимости от длительности нажатия
 800f670:	b480      	push	{r7}
 800f672:	af00      	add	r7, sp, #0
	if (timHoldButtonPress < SPPED4 && timHoldButtonPress > SPPED3) {
 800f674:	4b1b      	ldr	r3, [pc, #108]	; (800f6e4 <speedControl+0x74>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f241 3287 	movw	r2, #4999	; 0x1387
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d807      	bhi.n	800f690 <speedControl+0x20>
 800f680:	4b18      	ldr	r3, [pc, #96]	; (800f6e4 <speedControl+0x74>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800f688:	d902      	bls.n	800f690 <speedControl+0x20>
		countSpeed = 2;
 800f68a:	4b17      	ldr	r3, [pc, #92]	; (800f6e8 <speedControl+0x78>)
 800f68c:	2202      	movs	r2, #2
 800f68e:	801a      	strh	r2, [r3, #0]
	}
	if (timHoldButtonPress < SPPED3 && timHoldButtonPress > SPPED2) {
 800f690:	4b14      	ldr	r3, [pc, #80]	; (800f6e4 <speedControl+0x74>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800f698:	d208      	bcs.n	800f6ac <speedControl+0x3c>
 800f69a:	4b12      	ldr	r3, [pc, #72]	; (800f6e4 <speedControl+0x74>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d902      	bls.n	800f6ac <speedControl+0x3c>
		countSpeed = 5;
 800f6a6:	4b10      	ldr	r3, [pc, #64]	; (800f6e8 <speedControl+0x78>)
 800f6a8:	2205      	movs	r2, #5
 800f6aa:	801a      	strh	r2, [r3, #0]
	}
	if (timHoldButtonPress < SPPED2 && timHoldButtonPress > SPPED1) {
 800f6ac:	4b0d      	ldr	r3, [pc, #52]	; (800f6e4 <speedControl+0x74>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d807      	bhi.n	800f6c8 <speedControl+0x58>
 800f6b8:	4b0a      	ldr	r3, [pc, #40]	; (800f6e4 <speedControl+0x74>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800f6c0:	d902      	bls.n	800f6c8 <speedControl+0x58>
		countSpeed = 10;
 800f6c2:	4b09      	ldr	r3, [pc, #36]	; (800f6e8 <speedControl+0x78>)
 800f6c4:	220a      	movs	r2, #10
 800f6c6:	801a      	strh	r2, [r3, #0]
	}
	if (timHoldButtonPress < SPPED1) {
 800f6c8:	4b06      	ldr	r3, [pc, #24]	; (800f6e4 <speedControl+0x74>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800f6d0:	d202      	bcs.n	800f6d8 <speedControl+0x68>
		countSpeed = 25;
 800f6d2:	4b05      	ldr	r3, [pc, #20]	; (800f6e8 <speedControl+0x78>)
 800f6d4:	2219      	movs	r2, #25
 800f6d6:	801a      	strh	r2, [r3, #0]
	}
}
 800f6d8:	bf00      	nop
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e0:	4770      	bx	lr
 800f6e2:	bf00      	nop
 800f6e4:	200002ac 	.word	0x200002ac
 800f6e8:	2000002c 	.word	0x2000002c

0800f6ec <changeParamPlusMinus>:

void changeParamPlusMinus(uint16_t plus_minus) {                                             // обработка нажатий плюс минуса
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	80fb      	strh	r3, [r7, #6]
	if (!READ_FLAG(TOUCH_DISPLAY, globalFlag)) {                                             // одно касание одно нажатие
 800f6f6:	4b21      	ldr	r3, [pc, #132]	; (800f77c <changeParamPlusMinus+0x90>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f003 0301 	and.w	r3, r3, #1
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d109      	bne.n	800f716 <changeParamPlusMinus+0x2a>
		SET_FLAG(TOUCH_DISPLAY, globalFlag);
 800f702:	4b1e      	ldr	r3, [pc, #120]	; (800f77c <changeParamPlusMinus+0x90>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f043 0301 	orr.w	r3, r3, #1
 800f70a:	4a1c      	ldr	r2, [pc, #112]	; (800f77c <changeParamPlusMinus+0x90>)
 800f70c:	6013      	str	r3, [r2, #0]
		timHoldButtonPress = SPPED5;                                                         // сбросим время для инкремента
 800f70e:	4b1c      	ldr	r3, [pc, #112]	; (800f780 <changeParamPlusMinus+0x94>)
 800f710:	f241 527c 	movw	r2, #5500	; 0x157c
 800f714:	601a      	str	r2, [r3, #0]
	}
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {                                                 // чтоб можео было нажимать по одному разу
 800f716:	4b19      	ldr	r3, [pc, #100]	; (800f77c <changeParamPlusMinus+0x90>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f003 0302 	and.w	r3, r3, #2
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d105      	bne.n	800f72e <changeParamPlusMinus+0x42>
		changeData(1, plus_minus);
 800f722:	88fb      	ldrh	r3, [r7, #6]
 800f724:	4619      	mov	r1, r3
 800f726:	2001      	movs	r0, #1
 800f728:	f7ff ff3c 	bl	800f5a4 <changeData>
 800f72c:	e013      	b.n	800f756 <changeParamPlusMinus+0x6a>
	} else {
		if (countSpeed >= 2) {                                                               // спустя время когда у нас счетчик отсчитает увеличиваем на большее количество
 800f72e:	4b15      	ldr	r3, [pc, #84]	; (800f784 <changeParamPlusMinus+0x98>)
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	2b01      	cmp	r3, #1
 800f734:	d90f      	bls.n	800f756 <changeParamPlusMinus+0x6a>
			changeData(countSpeed, plus_minus);
 800f736:	4b13      	ldr	r3, [pc, #76]	; (800f784 <changeParamPlusMinus+0x98>)
 800f738:	881b      	ldrh	r3, [r3, #0]
 800f73a:	88fa      	ldrh	r2, [r7, #6]
 800f73c:	4611      	mov	r1, r2
 800f73e:	4618      	mov	r0, r3
 800f740:	f7ff ff30 	bl	800f5a4 <changeData>
			buzzerSet(100 - countSpeed);
 800f744:	4b0f      	ldr	r3, [pc, #60]	; (800f784 <changeParamPlusMinus+0x98>)
 800f746:	881b      	ldrh	r3, [r3, #0]
 800f748:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	b21b      	sxth	r3, r3
 800f750:	4618      	mov	r0, r3
 800f752:	f000 fd9f 	bl	8010294 <buzzerSet>
		}
	}
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {                                                 // поднимем флаг что один раз уже нажали
 800f756:	4b09      	ldr	r3, [pc, #36]	; (800f77c <changeParamPlusMinus+0x90>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f003 0302 	and.w	r3, r3, #2
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d105      	bne.n	800f76e <changeParamPlusMinus+0x82>
		SET_FLAG(ONE_TOUCH, globalFlag);
 800f762:	4b06      	ldr	r3, [pc, #24]	; (800f77c <changeParamPlusMinus+0x90>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f043 0302 	orr.w	r3, r3, #2
 800f76a:	4a04      	ldr	r2, [pc, #16]	; (800f77c <changeParamPlusMinus+0x90>)
 800f76c:	6013      	str	r3, [r2, #0]
	}
	speedControl();
 800f76e:	f7ff ff7f 	bl	800f670 <speedControl>
}
 800f772:	bf00      	nop
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	200004d0 	.word	0x200004d0
 800f780:	200002ac 	.word	0x200002ac
 800f784:	2000002c 	.word	0x2000002c

0800f788 <togleUnits>:

void togleUnits(void) {                                                                      // переключалка единиц
 800f788:	b580      	push	{r7, lr}
 800f78a:	af00      	add	r7, sp, #0
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {                                                 // так же запрещаем множественное нажатие
 800f78c:	4b34      	ldr	r3, [pc, #208]	; (800f860 <togleUnits+0xd8>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f003 0302 	and.w	r3, r3, #2
 800f794:	2b00      	cmp	r3, #0
 800f796:	d161      	bne.n	800f85c <togleUnits+0xd4>
		SET_FLAG(ONE_TOUCH, globalFlag);
 800f798:	4b31      	ldr	r3, [pc, #196]	; (800f860 <togleUnits+0xd8>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f043 0302 	orr.w	r3, r3, #2
 800f7a0:	4a2f      	ldr	r2, [pc, #188]	; (800f860 <togleUnits+0xd8>)
 800f7a2:	6013      	str	r3, [r2, #0]

		if (READ_FLAG(AREA1_PRESS, globalFlag)) {                                            // в зависимости от того в какой мы области
 800f7a4:	4b2e      	ldr	r3, [pc, #184]	; (800f860 <togleUnits+0xd8>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	f003 0308 	and.w	r3, r3, #8
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d01d      	beq.n	800f7ec <togleUnits+0x64>
			if (ParamDevice.unitImpuls < 2)
 800f7b0:	4b2c      	ldr	r3, [pc, #176]	; (800f864 <togleUnits+0xdc>)
 800f7b2:	691b      	ldr	r3, [r3, #16]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d805      	bhi.n	800f7c4 <togleUnits+0x3c>
				ParamDevice.unitImpuls++;                                                    // меняем единицы времени
 800f7b8:	4b2a      	ldr	r3, [pc, #168]	; (800f864 <togleUnits+0xdc>)
 800f7ba:	691b      	ldr	r3, [r3, #16]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	4a29      	ldr	r2, [pc, #164]	; (800f864 <togleUnits+0xdc>)
 800f7c0:	6113      	str	r3, [r2, #16]
 800f7c2:	e002      	b.n	800f7ca <togleUnits+0x42>
			else
				ParamDevice.unitImpuls = 0;
 800f7c4:	4b27      	ldr	r3, [pc, #156]	; (800f864 <togleUnits+0xdc>)
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	611a      	str	r2, [r3, #16]
			printTImpulse();
 800f7ca:	f7ff fb31 	bl	800ee30 <printTImpulse>
			if (ParamDevice.unitImpuls == 2 && ParamDevice.impuls > 20) {
 800f7ce:	4b25      	ldr	r3, [pc, #148]	; (800f864 <togleUnits+0xdc>)
 800f7d0:	691b      	ldr	r3, [r3, #16]
 800f7d2:	2b02      	cmp	r3, #2
 800f7d4:	d106      	bne.n	800f7e4 <togleUnits+0x5c>
 800f7d6:	4b23      	ldr	r3, [pc, #140]	; (800f864 <togleUnits+0xdc>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2b14      	cmp	r3, #20
 800f7dc:	dd02      	ble.n	800f7e4 <togleUnits+0x5c>
				ParamDevice.impuls = 20;
 800f7de:	4b21      	ldr	r3, [pc, #132]	; (800f864 <togleUnits+0xdc>)
 800f7e0:	2214      	movs	r2, #20
 800f7e2:	601a      	str	r2, [r3, #0]
			}
			printTImpulse();                                                                // и обновляем надписи
 800f7e4:	f7ff fb24 	bl	800ee30 <printTImpulse>
			printFreeq();
 800f7e8:	f7ff fa3e 	bl	800ec68 <printFreeq>
		}
		if (READ_FLAG(AREA2_PRESS, globalFlag)) {
 800f7ec:	4b1c      	ldr	r3, [pc, #112]	; (800f860 <togleUnits+0xd8>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f003 0310 	and.w	r3, r3, #16
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d01b      	beq.n	800f830 <togleUnits+0xa8>
			if (ParamDevice.unitPause < 2)
 800f7f8:	4b1a      	ldr	r3, [pc, #104]	; (800f864 <togleUnits+0xdc>)
 800f7fa:	695b      	ldr	r3, [r3, #20]
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d805      	bhi.n	800f80c <togleUnits+0x84>
				ParamDevice.unitPause++;
 800f800:	4b18      	ldr	r3, [pc, #96]	; (800f864 <togleUnits+0xdc>)
 800f802:	695b      	ldr	r3, [r3, #20]
 800f804:	3301      	adds	r3, #1
 800f806:	4a17      	ldr	r2, [pc, #92]	; (800f864 <togleUnits+0xdc>)
 800f808:	6153      	str	r3, [r2, #20]
 800f80a:	e002      	b.n	800f812 <togleUnits+0x8a>
			else
				ParamDevice.unitPause = 0;
 800f80c:	4b15      	ldr	r3, [pc, #84]	; (800f864 <togleUnits+0xdc>)
 800f80e:	2200      	movs	r2, #0
 800f810:	615a      	str	r2, [r3, #20]
			if (ParamDevice.unitPause == 2 && ParamDevice.pause > 20) {
 800f812:	4b14      	ldr	r3, [pc, #80]	; (800f864 <togleUnits+0xdc>)
 800f814:	695b      	ldr	r3, [r3, #20]
 800f816:	2b02      	cmp	r3, #2
 800f818:	d106      	bne.n	800f828 <togleUnits+0xa0>
 800f81a:	4b12      	ldr	r3, [pc, #72]	; (800f864 <togleUnits+0xdc>)
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	2b14      	cmp	r3, #20
 800f820:	dd02      	ble.n	800f828 <togleUnits+0xa0>
				ParamDevice.pause = 20;
 800f822:	4b10      	ldr	r3, [pc, #64]	; (800f864 <togleUnits+0xdc>)
 800f824:	2214      	movs	r2, #20
 800f826:	605a      	str	r2, [r3, #4]
			}
			printTPause();
 800f828:	f7ff fb3c 	bl	800eea4 <printTPause>
			printFreeq();
 800f82c:	f7ff fa1c 	bl	800ec68 <printFreeq>
		}
		if (READ_FLAG(AREA3_PRESS, globalFlag)) {
 800f830:	4b0b      	ldr	r3, [pc, #44]	; (800f860 <togleUnits+0xd8>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f003 0320 	and.w	r3, r3, #32
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d00f      	beq.n	800f85c <togleUnits+0xd4>
			if (ParamDevice.unitCount < 1)
 800f83c:	4b09      	ldr	r3, [pc, #36]	; (800f864 <togleUnits+0xdc>)
 800f83e:	699b      	ldr	r3, [r3, #24]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d105      	bne.n	800f850 <togleUnits+0xc8>
				ParamDevice.unitCount++;
 800f844:	4b07      	ldr	r3, [pc, #28]	; (800f864 <togleUnits+0xdc>)
 800f846:	699b      	ldr	r3, [r3, #24]
 800f848:	3301      	adds	r3, #1
 800f84a:	4a06      	ldr	r2, [pc, #24]	; (800f864 <togleUnits+0xdc>)
 800f84c:	6193      	str	r3, [r2, #24]
 800f84e:	e002      	b.n	800f856 <togleUnits+0xce>
			else
				ParamDevice.unitCount = 0;
 800f850:	4b04      	ldr	r3, [pc, #16]	; (800f864 <togleUnits+0xdc>)
 800f852:	2200      	movs	r2, #0
 800f854:	619a      	str	r2, [r3, #24]
			printCount(0);
 800f856:	2000      	movs	r0, #0
 800f858:	f7ff fb5a 	bl	800ef10 <printCount>
		}
	}
}
 800f85c:	bf00      	nop
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	200004d0 	.word	0x200004d0
 800f864:	20000040 	.word	0x20000040

0800f868 <NPN_PNPButton>:

void NPN_PNPButton(uint8_t type, uint8_t status) {                                               // выбираем каким транзистором подавать импульс
 800f868:	b580      	push	{r7, lr}
 800f86a:	b086      	sub	sp, #24
 800f86c:	af04      	add	r7, sp, #16
 800f86e:	4603      	mov	r3, r0
 800f870:	460a      	mov	r2, r1
 800f872:	71fb      	strb	r3, [r7, #7]
 800f874:	4613      	mov	r3, r2
 800f876:	71bb      	strb	r3, [r7, #6]
	if (type) {
 800f878:	79fb      	ldrb	r3, [r7, #7]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d045      	beq.n	800f90a <NPN_PNPButton+0xa2>
		if (status) {
 800f87e:	79bb      	ldrb	r3, [r7, #6]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d021      	beq.n	800f8c8 <NPN_PNPButton+0x60>
			ParamDevice.NPNTranzistor = true;                                                    // включаем транзистор
 800f884:	4b45      	ldr	r3, [pc, #276]	; (800f99c <NPN_PNPButton+0x134>)
 800f886:	2201      	movs	r2, #1
 800f888:	775a      	strb	r2, [r3, #29]
			strcpy(bufSpi, "NPN");
 800f88a:	4b45      	ldr	r3, [pc, #276]	; (800f9a0 <NPN_PNPButton+0x138>)
 800f88c:	4a45      	ldr	r2, [pc, #276]	; (800f9a4 <NPN_PNPButton+0x13c>)
 800f88e:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 102, 50, 26, 3, ILI9341_YELLOW);                                  // делаем заливку
 800f890:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f894:	9301      	str	r3, [sp, #4]
 800f896:	2303      	movs	r3, #3
 800f898:	9300      	str	r3, [sp, #0]
 800f89a:	231a      	movs	r3, #26
 800f89c:	2232      	movs	r2, #50	; 0x32
 800f89e:	2166      	movs	r1, #102	; 0x66
 800f8a0:	f44f 7082 	mov.w	r0, #260	; 0x104
 800f8a4:	f7fe fbbe 	bl	800e024 <fillRoundRect>
			ILI9341_WriteString(270, 106, bufSpi, Font_11x18, ILI9341_BLACK, ILI9341_YELLOW);    // печатаем тип транзистора
 800f8a8:	4b3f      	ldr	r3, [pc, #252]	; (800f9a8 <NPN_PNPButton+0x140>)
 800f8aa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800f8ae:	9202      	str	r2, [sp, #8]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	9201      	str	r2, [sp, #4]
 800f8b4:	685a      	ldr	r2, [r3, #4]
 800f8b6:	9200      	str	r2, [sp, #0]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	4a39      	ldr	r2, [pc, #228]	; (800f9a0 <NPN_PNPButton+0x138>)
 800f8bc:	216a      	movs	r1, #106	; 0x6a
 800f8be:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800f8c2:	f7fd ff14 	bl	800d6ee <ILI9341_WriteString>
			fillRoundRect(260, 140, 50, 26, 3, ILI9341_BLUE);
			ILI9341_WriteString(270, 144, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
		}
	}
	//printTypeOutput();                                                                           // дополнительно вверху переписываем типы транзисторов
}
 800f8c6:	e065      	b.n	800f994 <NPN_PNPButton+0x12c>
			ParamDevice.NPNTranzistor = false;
 800f8c8:	4b34      	ldr	r3, [pc, #208]	; (800f99c <NPN_PNPButton+0x134>)
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	775a      	strb	r2, [r3, #29]
			strcpy(bufSpi, "NPN");
 800f8ce:	4b34      	ldr	r3, [pc, #208]	; (800f9a0 <NPN_PNPButton+0x138>)
 800f8d0:	4a34      	ldr	r2, [pc, #208]	; (800f9a4 <NPN_PNPButton+0x13c>)
 800f8d2:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 102, 50, 26, 3, ILI9341_BLUE);
 800f8d4:	231f      	movs	r3, #31
 800f8d6:	9301      	str	r3, [sp, #4]
 800f8d8:	2303      	movs	r3, #3
 800f8da:	9300      	str	r3, [sp, #0]
 800f8dc:	231a      	movs	r3, #26
 800f8de:	2232      	movs	r2, #50	; 0x32
 800f8e0:	2166      	movs	r1, #102	; 0x66
 800f8e2:	f44f 7082 	mov.w	r0, #260	; 0x104
 800f8e6:	f7fe fb9d 	bl	800e024 <fillRoundRect>
			ILI9341_WriteString(270, 106, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
 800f8ea:	4b2f      	ldr	r3, [pc, #188]	; (800f9a8 <NPN_PNPButton+0x140>)
 800f8ec:	221f      	movs	r2, #31
 800f8ee:	9202      	str	r2, [sp, #8]
 800f8f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8f4:	9201      	str	r2, [sp, #4]
 800f8f6:	685a      	ldr	r2, [r3, #4]
 800f8f8:	9200      	str	r2, [sp, #0]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	4a28      	ldr	r2, [pc, #160]	; (800f9a0 <NPN_PNPButton+0x138>)
 800f8fe:	216a      	movs	r1, #106	; 0x6a
 800f900:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800f904:	f7fd fef3 	bl	800d6ee <ILI9341_WriteString>
}
 800f908:	e044      	b.n	800f994 <NPN_PNPButton+0x12c>
		if (status) {
 800f90a:	79bb      	ldrb	r3, [r7, #6]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d021      	beq.n	800f954 <NPN_PNPButton+0xec>
			ParamDevice.PNPTranzistor = true;
 800f910:	4b22      	ldr	r3, [pc, #136]	; (800f99c <NPN_PNPButton+0x134>)
 800f912:	2201      	movs	r2, #1
 800f914:	779a      	strb	r2, [r3, #30]
			strcpy(bufSpi, "PNP");
 800f916:	4b22      	ldr	r3, [pc, #136]	; (800f9a0 <NPN_PNPButton+0x138>)
 800f918:	4a24      	ldr	r2, [pc, #144]	; (800f9ac <NPN_PNPButton+0x144>)
 800f91a:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 140, 50, 26, 3, ILI9341_YELLOW);
 800f91c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f920:	9301      	str	r3, [sp, #4]
 800f922:	2303      	movs	r3, #3
 800f924:	9300      	str	r3, [sp, #0]
 800f926:	231a      	movs	r3, #26
 800f928:	2232      	movs	r2, #50	; 0x32
 800f92a:	218c      	movs	r1, #140	; 0x8c
 800f92c:	f44f 7082 	mov.w	r0, #260	; 0x104
 800f930:	f7fe fb78 	bl	800e024 <fillRoundRect>
			ILI9341_WriteString(270, 144, bufSpi, Font_11x18, ILI9341_BLACK, ILI9341_YELLOW);
 800f934:	4b1c      	ldr	r3, [pc, #112]	; (800f9a8 <NPN_PNPButton+0x140>)
 800f936:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800f93a:	9202      	str	r2, [sp, #8]
 800f93c:	2200      	movs	r2, #0
 800f93e:	9201      	str	r2, [sp, #4]
 800f940:	685a      	ldr	r2, [r3, #4]
 800f942:	9200      	str	r2, [sp, #0]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	4a16      	ldr	r2, [pc, #88]	; (800f9a0 <NPN_PNPButton+0x138>)
 800f948:	2190      	movs	r1, #144	; 0x90
 800f94a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800f94e:	f7fd fece 	bl	800d6ee <ILI9341_WriteString>
}
 800f952:	e01f      	b.n	800f994 <NPN_PNPButton+0x12c>
			ParamDevice.PNPTranzistor = false;
 800f954:	4b11      	ldr	r3, [pc, #68]	; (800f99c <NPN_PNPButton+0x134>)
 800f956:	2200      	movs	r2, #0
 800f958:	779a      	strb	r2, [r3, #30]
			strcpy(bufSpi, "PNP");
 800f95a:	4b11      	ldr	r3, [pc, #68]	; (800f9a0 <NPN_PNPButton+0x138>)
 800f95c:	4a13      	ldr	r2, [pc, #76]	; (800f9ac <NPN_PNPButton+0x144>)
 800f95e:	601a      	str	r2, [r3, #0]
			fillRoundRect(260, 140, 50, 26, 3, ILI9341_BLUE);
 800f960:	231f      	movs	r3, #31
 800f962:	9301      	str	r3, [sp, #4]
 800f964:	2303      	movs	r3, #3
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	231a      	movs	r3, #26
 800f96a:	2232      	movs	r2, #50	; 0x32
 800f96c:	218c      	movs	r1, #140	; 0x8c
 800f96e:	f44f 7082 	mov.w	r0, #260	; 0x104
 800f972:	f7fe fb57 	bl	800e024 <fillRoundRect>
			ILI9341_WriteString(270, 144, bufSpi, Font_11x18, ILI9341_WHITE, ILI9341_BLUE);
 800f976:	4b0c      	ldr	r3, [pc, #48]	; (800f9a8 <NPN_PNPButton+0x140>)
 800f978:	221f      	movs	r2, #31
 800f97a:	9202      	str	r2, [sp, #8]
 800f97c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f980:	9201      	str	r2, [sp, #4]
 800f982:	685a      	ldr	r2, [r3, #4]
 800f984:	9200      	str	r2, [sp, #0]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a05      	ldr	r2, [pc, #20]	; (800f9a0 <NPN_PNPButton+0x138>)
 800f98a:	2190      	movs	r1, #144	; 0x90
 800f98c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800f990:	f7fd fead 	bl	800d6ee <ILI9341_WriteString>
}
 800f994:	bf00      	nop
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}
 800f99c:	20000040 	.word	0x20000040
 800f9a0:	20000278 	.word	0x20000278
 800f9a4:	004e504e 	.word	0x004e504e
 800f9a8:	20000000 	.word	0x20000000
 800f9ac:	00504e50 	.word	0x00504e50

0800f9b0 <setParamNPN_PNP>:

void setParamNPN_PNP(uint8_t type) {                                                             // отслеживаем нажатие по кнопкам выбора транзистора
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	71fb      	strb	r3, [r7, #7]
	if (!READ_FLAG(ONE_TOUCH, globalFlag)) {                                                     // единичное нажатие
 800f9ba:	4b18      	ldr	r3, [pc, #96]	; (800fa1c <setParamNPN_PNP+0x6c>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f003 0302 	and.w	r3, r3, #2
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d125      	bne.n	800fa12 <setParamNPN_PNP+0x62>
		SET_FLAG(ONE_TOUCH, globalFlag);
 800f9c6:	4b15      	ldr	r3, [pc, #84]	; (800fa1c <setParamNPN_PNP+0x6c>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f043 0302 	orr.w	r3, r3, #2
 800f9ce:	4a13      	ldr	r2, [pc, #76]	; (800fa1c <setParamNPN_PNP+0x6c>)
 800f9d0:	6013      	str	r3, [r2, #0]
		if (type == NPN) {                                                                       // ну и дергаем вывод
 800f9d2:	79fb      	ldrb	r3, [r7, #7]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d10c      	bne.n	800f9f2 <setParamNPN_PNP+0x42>
			if (ParamDevice.NPNTranzistor) {
 800f9d8:	4b11      	ldr	r3, [pc, #68]	; (800fa20 <setParamNPN_PNP+0x70>)
 800f9da:	7f5b      	ldrb	r3, [r3, #29]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d004      	beq.n	800f9ea <setParamNPN_PNP+0x3a>
				NPN_PNPButton(NPN, NO_PRESSED);
 800f9e0:	2100      	movs	r1, #0
 800f9e2:	2001      	movs	r0, #1
 800f9e4:	f7ff ff40 	bl	800f868 <NPN_PNPButton>
 800f9e8:	e003      	b.n	800f9f2 <setParamNPN_PNP+0x42>
			} else {
				NPN_PNPButton(NPN, PRESSED);
 800f9ea:	2101      	movs	r1, #1
 800f9ec:	2001      	movs	r0, #1
 800f9ee:	f7ff ff3b 	bl	800f868 <NPN_PNPButton>
			}
		}
		if (type == PNP) {
 800f9f2:	79fb      	ldrb	r3, [r7, #7]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d10c      	bne.n	800fa12 <setParamNPN_PNP+0x62>
			if (ParamDevice.PNPTranzistor) {
 800f9f8:	4b09      	ldr	r3, [pc, #36]	; (800fa20 <setParamNPN_PNP+0x70>)
 800f9fa:	7f9b      	ldrb	r3, [r3, #30]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d004      	beq.n	800fa0a <setParamNPN_PNP+0x5a>
				NPN_PNPButton(PNP, NO_PRESSED);
 800fa00:	2100      	movs	r1, #0
 800fa02:	2000      	movs	r0, #0
 800fa04:	f7ff ff30 	bl	800f868 <NPN_PNPButton>
			} else {
				NPN_PNPButton(PNP, PRESSED);
			}
		}
	}
}
 800fa08:	e003      	b.n	800fa12 <setParamNPN_PNP+0x62>
				NPN_PNPButton(PNP, PRESSED);
 800fa0a:	2101      	movs	r1, #1
 800fa0c:	2000      	movs	r0, #0
 800fa0e:	f7ff ff2b 	bl	800f868 <NPN_PNPButton>
}
 800fa12:	bf00      	nop
 800fa14:	3708      	adds	r7, #8
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	200004d0 	.word	0x200004d0
 800fa20:	20000040 	.word	0x20000040

0800fa24 <checkButtonPress>:

void checkButtonPress(void) {                                                                    // отслеживаем нажатие кнопок
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af02      	add	r7, sp, #8
	if (!READ_TOUCH_IRQ) {                                                                       // считываем нажатие
 800fa2a:	4b8b      	ldr	r3, [pc, #556]	; (800fc58 <checkButtonPress+0x234>)
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	f040 8105 	bne.w	800fc42 <checkButtonPress+0x21e>
		if (ILI9341_TouchGetCoordinates(&x, &y)) {                                               // считываем данные из SPI
 800fa38:	4988      	ldr	r1, [pc, #544]	; (800fc5c <checkButtonPress+0x238>)
 800fa3a:	4889      	ldr	r0, [pc, #548]	; (800fc60 <checkButtonPress+0x23c>)
 800fa3c:	f7fe fcbc 	bl	800e3b8 <ILI9341_TouchGetCoordinates>
 800fa40:	4603      	mov	r3, r0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f000 80f5 	beq.w	800fc32 <checkButtonPress+0x20e>

			if (!READ_FLAG(ONE_BUZZER, globalFlag)) {                                            // ставим флаг чтоб один раз пикнуть бузером
 800fa48:	4b86      	ldr	r3, [pc, #536]	; (800fc64 <checkButtonPress+0x240>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f003 0304 	and.w	r3, r3, #4
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d108      	bne.n	800fa66 <checkButtonPress+0x42>
				SET_FLAG(ONE_BUZZER, globalFlag);
 800fa54:	4b83      	ldr	r3, [pc, #524]	; (800fc64 <checkButtonPress+0x240>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f043 0304 	orr.w	r3, r3, #4
 800fa5c:	4a81      	ldr	r2, [pc, #516]	; (800fc64 <checkButtonPress+0x240>)
 800fa5e:	6013      	str	r3, [r2, #0]
				buzzerSet(100);
 800fa60:	2064      	movs	r0, #100	; 0x64
 800fa62:	f000 fc17 	bl	8010294 <buzzerSet>
			}

			if (checkAreaTouch(x, y, 246, 182, 50, 50)) {                                        // считываем не нажата ли кнопка пуск
 800fa66:	4b7e      	ldr	r3, [pc, #504]	; (800fc60 <checkButtonPress+0x23c>)
 800fa68:	8818      	ldrh	r0, [r3, #0]
 800fa6a:	4b7c      	ldr	r3, [pc, #496]	; (800fc5c <checkButtonPress+0x238>)
 800fa6c:	8819      	ldrh	r1, [r3, #0]
 800fa6e:	2332      	movs	r3, #50	; 0x32
 800fa70:	9301      	str	r3, [sp, #4]
 800fa72:	2332      	movs	r3, #50	; 0x32
 800fa74:	9300      	str	r3, [sp, #0]
 800fa76:	23b6      	movs	r3, #182	; 0xb6
 800fa78:	22f6      	movs	r2, #246	; 0xf6
 800fa7a:	f7ff fbcd 	bl	800f218 <checkAreaTouch>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d001      	beq.n	800fa88 <checkButtonPress+0x64>
				powerButton();
 800fa84:	f7ff fce0 	bl	800f448 <powerButton>
			}
			if (!ParamDevice.power) {                                                            // запрещаем что либо менять пока идут импульсы
 800fa88:	4b77      	ldr	r3, [pc, #476]	; (800fc68 <checkButtonPress+0x244>)
 800fa8a:	7fdb      	ldrb	r3, [r3, #31]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f040 80d0 	bne.w	800fc32 <checkButtonPress+0x20e>
				if (checkAreaTouch(x, y, 15, 30, 235, 35)) {                                     // проверка и сброс соседних областей
 800fa92:	4b73      	ldr	r3, [pc, #460]	; (800fc60 <checkButtonPress+0x23c>)
 800fa94:	8818      	ldrh	r0, [r3, #0]
 800fa96:	4b71      	ldr	r3, [pc, #452]	; (800fc5c <checkButtonPress+0x238>)
 800fa98:	8819      	ldrh	r1, [r3, #0]
 800fa9a:	2323      	movs	r3, #35	; 0x23
 800fa9c:	9301      	str	r3, [sp, #4]
 800fa9e:	23eb      	movs	r3, #235	; 0xeb
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	231e      	movs	r3, #30
 800faa4:	220f      	movs	r2, #15
 800faa6:	f7ff fbb7 	bl	800f218 <checkAreaTouch>
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d00d      	beq.n	800facc <checkButtonPress+0xa8>
					RESET_FLAG(AREA2_PRESS|AREA3_PRESS, globalFlag);
 800fab0:	4b6c      	ldr	r3, [pc, #432]	; (800fc64 <checkButtonPress+0x240>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800fab8:	4a6a      	ldr	r2, [pc, #424]	; (800fc64 <checkButtonPress+0x240>)
 800faba:	6013      	str	r3, [r2, #0]
					SET_FLAG(AREA1_PRESS, globalFlag);
 800fabc:	4b69      	ldr	r3, [pc, #420]	; (800fc64 <checkButtonPress+0x240>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f043 0308 	orr.w	r3, r3, #8
 800fac4:	4a67      	ldr	r2, [pc, #412]	; (800fc64 <checkButtonPress+0x240>)
 800fac6:	6013      	str	r3, [r2, #0]
					checkstrokeArea();                                                           // нарисуем какая область нажата
 800fac8:	f7ff fbd2 	bl	800f270 <checkstrokeArea>
				}

				if (checkAreaTouch(x, y, 15, 78, 235, 35)) {
 800facc:	4b64      	ldr	r3, [pc, #400]	; (800fc60 <checkButtonPress+0x23c>)
 800face:	8818      	ldrh	r0, [r3, #0]
 800fad0:	4b62      	ldr	r3, [pc, #392]	; (800fc5c <checkButtonPress+0x238>)
 800fad2:	8819      	ldrh	r1, [r3, #0]
 800fad4:	2323      	movs	r3, #35	; 0x23
 800fad6:	9301      	str	r3, [sp, #4]
 800fad8:	23eb      	movs	r3, #235	; 0xeb
 800fada:	9300      	str	r3, [sp, #0]
 800fadc:	234e      	movs	r3, #78	; 0x4e
 800fade:	220f      	movs	r2, #15
 800fae0:	f7ff fb9a 	bl	800f218 <checkAreaTouch>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d00d      	beq.n	800fb06 <checkButtonPress+0xe2>
					RESET_FLAG(AREA1_PRESS|AREA3_PRESS, globalFlag);
 800faea:	4b5e      	ldr	r3, [pc, #376]	; (800fc64 <checkButtonPress+0x240>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800faf2:	4a5c      	ldr	r2, [pc, #368]	; (800fc64 <checkButtonPress+0x240>)
 800faf4:	6013      	str	r3, [r2, #0]
					SET_FLAG(AREA2_PRESS, globalFlag);
 800faf6:	4b5b      	ldr	r3, [pc, #364]	; (800fc64 <checkButtonPress+0x240>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	f043 0310 	orr.w	r3, r3, #16
 800fafe:	4a59      	ldr	r2, [pc, #356]	; (800fc64 <checkButtonPress+0x240>)
 800fb00:	6013      	str	r3, [r2, #0]
					checkstrokeArea();
 800fb02:	f7ff fbb5 	bl	800f270 <checkstrokeArea>
				}

				if (checkAreaTouch(x, y, 15, 126, 235, 35)) {
 800fb06:	4b56      	ldr	r3, [pc, #344]	; (800fc60 <checkButtonPress+0x23c>)
 800fb08:	8818      	ldrh	r0, [r3, #0]
 800fb0a:	4b54      	ldr	r3, [pc, #336]	; (800fc5c <checkButtonPress+0x238>)
 800fb0c:	8819      	ldrh	r1, [r3, #0]
 800fb0e:	2323      	movs	r3, #35	; 0x23
 800fb10:	9301      	str	r3, [sp, #4]
 800fb12:	23eb      	movs	r3, #235	; 0xeb
 800fb14:	9300      	str	r3, [sp, #0]
 800fb16:	237e      	movs	r3, #126	; 0x7e
 800fb18:	220f      	movs	r2, #15
 800fb1a:	f7ff fb7d 	bl	800f218 <checkAreaTouch>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d00d      	beq.n	800fb40 <checkButtonPress+0x11c>
					RESET_FLAG(AREA1_PRESS|AREA2_PRESS, globalFlag);
 800fb24:	4b4f      	ldr	r3, [pc, #316]	; (800fc64 <checkButtonPress+0x240>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f023 0318 	bic.w	r3, r3, #24
 800fb2c:	4a4d      	ldr	r2, [pc, #308]	; (800fc64 <checkButtonPress+0x240>)
 800fb2e:	6013      	str	r3, [r2, #0]
					SET_FLAG(AREA3_PRESS, globalFlag);
 800fb30:	4b4c      	ldr	r3, [pc, #304]	; (800fc64 <checkButtonPress+0x240>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f043 0320 	orr.w	r3, r3, #32
 800fb38:	4a4a      	ldr	r2, [pc, #296]	; (800fc64 <checkButtonPress+0x240>)
 800fb3a:	6013      	str	r3, [r2, #0]
					checkstrokeArea();
 800fb3c:	f7ff fb98 	bl	800f270 <checkstrokeArea>
				}

				if (checkAreaTouch(x, y, 24, 182, 50, 50)) {
 800fb40:	4b47      	ldr	r3, [pc, #284]	; (800fc60 <checkButtonPress+0x23c>)
 800fb42:	8818      	ldrh	r0, [r3, #0]
 800fb44:	4b45      	ldr	r3, [pc, #276]	; (800fc5c <checkButtonPress+0x238>)
 800fb46:	8819      	ldrh	r1, [r3, #0]
 800fb48:	2332      	movs	r3, #50	; 0x32
 800fb4a:	9301      	str	r3, [sp, #4]
 800fb4c:	2332      	movs	r3, #50	; 0x32
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	23b6      	movs	r3, #182	; 0xb6
 800fb52:	2218      	movs	r2, #24
 800fb54:	f7ff fb60 	bl	800f218 <checkAreaTouch>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d00c      	beq.n	800fb78 <checkButtonPress+0x154>
					printColorImage(24, 182, 50, 50, PRESSED, image_Plus);
 800fb5e:	4b43      	ldr	r3, [pc, #268]	; (800fc6c <checkButtonPress+0x248>)
 800fb60:	9301      	str	r3, [sp, #4]
 800fb62:	2301      	movs	r3, #1
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	2332      	movs	r3, #50	; 0x32
 800fb68:	2232      	movs	r2, #50	; 0x32
 800fb6a:	21b6      	movs	r1, #182	; 0xb6
 800fb6c:	2018      	movs	r0, #24
 800fb6e:	f7ff fa9d 	bl	800f0ac <printColorImage>
					changeParamPlusMinus(PLUS);
 800fb72:	2001      	movs	r0, #1
 800fb74:	f7ff fdba 	bl	800f6ec <changeParamPlusMinus>
				}

				if (checkAreaTouch(x, y, 172, 182, 50, 50)) {
 800fb78:	4b39      	ldr	r3, [pc, #228]	; (800fc60 <checkButtonPress+0x23c>)
 800fb7a:	8818      	ldrh	r0, [r3, #0]
 800fb7c:	4b37      	ldr	r3, [pc, #220]	; (800fc5c <checkButtonPress+0x238>)
 800fb7e:	8819      	ldrh	r1, [r3, #0]
 800fb80:	2332      	movs	r3, #50	; 0x32
 800fb82:	9301      	str	r3, [sp, #4]
 800fb84:	2332      	movs	r3, #50	; 0x32
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	23b6      	movs	r3, #182	; 0xb6
 800fb8a:	22ac      	movs	r2, #172	; 0xac
 800fb8c:	f7ff fb44 	bl	800f218 <checkAreaTouch>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d00c      	beq.n	800fbb0 <checkButtonPress+0x18c>
					printColorImage(172, 182, 50, 50, PRESSED, image_Minus);
 800fb96:	4b36      	ldr	r3, [pc, #216]	; (800fc70 <checkButtonPress+0x24c>)
 800fb98:	9301      	str	r3, [sp, #4]
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	2332      	movs	r3, #50	; 0x32
 800fba0:	2232      	movs	r2, #50	; 0x32
 800fba2:	21b6      	movs	r1, #182	; 0xb6
 800fba4:	20ac      	movs	r0, #172	; 0xac
 800fba6:	f7ff fa81 	bl	800f0ac <printColorImage>
					changeParamPlusMinus(MINUS);
 800fbaa:	2000      	movs	r0, #0
 800fbac:	f7ff fd9e 	bl	800f6ec <changeParamPlusMinus>
				}

				if (checkAreaTouch(x, y, 98, 182, 50, 50)) {
 800fbb0:	4b2b      	ldr	r3, [pc, #172]	; (800fc60 <checkButtonPress+0x23c>)
 800fbb2:	8818      	ldrh	r0, [r3, #0]
 800fbb4:	4b29      	ldr	r3, [pc, #164]	; (800fc5c <checkButtonPress+0x238>)
 800fbb6:	8819      	ldrh	r1, [r3, #0]
 800fbb8:	2332      	movs	r3, #50	; 0x32
 800fbba:	9301      	str	r3, [sp, #4]
 800fbbc:	2332      	movs	r3, #50	; 0x32
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	23b6      	movs	r3, #182	; 0xb6
 800fbc2:	2262      	movs	r2, #98	; 0x62
 800fbc4:	f7ff fb28 	bl	800f218 <checkAreaTouch>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d00b      	beq.n	800fbe6 <checkButtonPress+0x1c2>
					printColorImage(98, 182, 50, 50, PRESSED, image_Arrow);
 800fbce:	4b29      	ldr	r3, [pc, #164]	; (800fc74 <checkButtonPress+0x250>)
 800fbd0:	9301      	str	r3, [sp, #4]
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	9300      	str	r3, [sp, #0]
 800fbd6:	2332      	movs	r3, #50	; 0x32
 800fbd8:	2232      	movs	r2, #50	; 0x32
 800fbda:	21b6      	movs	r1, #182	; 0xb6
 800fbdc:	2062      	movs	r0, #98	; 0x62
 800fbde:	f7ff fa65 	bl	800f0ac <printColorImage>
					togleUnits();
 800fbe2:	f7ff fdd1 	bl	800f788 <togleUnits>
				}

				if (checkAreaTouch(x, y, 260, 102, 50, 26)) {
 800fbe6:	4b1e      	ldr	r3, [pc, #120]	; (800fc60 <checkButtonPress+0x23c>)
 800fbe8:	8818      	ldrh	r0, [r3, #0]
 800fbea:	4b1c      	ldr	r3, [pc, #112]	; (800fc5c <checkButtonPress+0x238>)
 800fbec:	8819      	ldrh	r1, [r3, #0]
 800fbee:	231a      	movs	r3, #26
 800fbf0:	9301      	str	r3, [sp, #4]
 800fbf2:	2332      	movs	r3, #50	; 0x32
 800fbf4:	9300      	str	r3, [sp, #0]
 800fbf6:	2366      	movs	r3, #102	; 0x66
 800fbf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800fbfc:	f7ff fb0c 	bl	800f218 <checkAreaTouch>
 800fc00:	4603      	mov	r3, r0
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d002      	beq.n	800fc0c <checkButtonPress+0x1e8>
					setParamNPN_PNP(NPN);
 800fc06:	2001      	movs	r0, #1
 800fc08:	f7ff fed2 	bl	800f9b0 <setParamNPN_PNP>
				}

				if (checkAreaTouch(x, y, 260, 140, 50, 26)) {
 800fc0c:	4b14      	ldr	r3, [pc, #80]	; (800fc60 <checkButtonPress+0x23c>)
 800fc0e:	8818      	ldrh	r0, [r3, #0]
 800fc10:	4b12      	ldr	r3, [pc, #72]	; (800fc5c <checkButtonPress+0x238>)
 800fc12:	8819      	ldrh	r1, [r3, #0]
 800fc14:	231a      	movs	r3, #26
 800fc16:	9301      	str	r3, [sp, #4]
 800fc18:	2332      	movs	r3, #50	; 0x32
 800fc1a:	9300      	str	r3, [sp, #0]
 800fc1c:	238c      	movs	r3, #140	; 0x8c
 800fc1e:	f44f 7282 	mov.w	r2, #260	; 0x104
 800fc22:	f7ff faf9 	bl	800f218 <checkAreaTouch>
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d002      	beq.n	800fc32 <checkButtonPress+0x20e>
					setParamNPN_PNP(PNP);
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	f7ff febf 	bl	800f9b0 <setParamNPN_PNP>
				}
			}
		}
		timBigArea = 5000;                                                  // задержка на обводку области квадратом
 800fc32:	4b11      	ldr	r3, [pc, #68]	; (800fc78 <checkButtonPress+0x254>)
 800fc34:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc38:	601a      	str	r2, [r3, #0]
		timButtonPress = 50;                                                // задержка для защиты от дребезга
 800fc3a:	4b10      	ldr	r3, [pc, #64]	; (800fc7c <checkButtonPress+0x258>)
 800fc3c:	2232      	movs	r2, #50	; 0x32
 800fc3e:	601a      	str	r2, [r3, #0]
 800fc40:	e005      	b.n	800fc4e <checkButtonPress+0x22a>
	} else {
		RESET_FLAG(ONE_BUZZER, globalFlag);                                 // сбросим пищалку
 800fc42:	4b08      	ldr	r3, [pc, #32]	; (800fc64 <checkButtonPress+0x240>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f023 0304 	bic.w	r3, r3, #4
 800fc4a:	4a06      	ldr	r2, [pc, #24]	; (800fc64 <checkButtonPress+0x240>)
 800fc4c:	6013      	str	r3, [r2, #0]
	}
	GUIPostHandler();                                                       // обработаем сбросы
 800fc4e:	f000 f817 	bl	800fc80 <GUIPostHandler>
}
 800fc52:	bf00      	nop
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	40020000 	.word	0x40020000
 800fc5c:	200002a2 	.word	0x200002a2
 800fc60:	200002a0 	.word	0x200002a0
 800fc64:	200004d0 	.word	0x200004d0
 800fc68:	20000040 	.word	0x20000040
 800fc6c:	08019948 	.word	0x08019948
 800fc70:	0801acd0 	.word	0x0801acd0
 800fc74:	0801c184 	.word	0x0801c184
 800fc78:	200002a4 	.word	0x200002a4
 800fc7c:	200002a8 	.word	0x200002a8

0800fc80 <GUIPostHandler>:

void GUIPostHandler(void) {
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af02      	add	r7, sp, #8
	if (timBigArea == 0 && (globalFlag & 0x38)) {
 800fc86:	4b26      	ldr	r3, [pc, #152]	; (800fd20 <GUIPostHandler+0xa0>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d10d      	bne.n	800fcaa <GUIPostHandler+0x2a>
 800fc8e:	4b25      	ldr	r3, [pc, #148]	; (800fd24 <GUIPostHandler+0xa4>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d007      	beq.n	800fcaa <GUIPostHandler+0x2a>
		RESET_FLAG(AREA1_PRESS|AREA2_PRESS|AREA3_PRESS, globalFlag);
 800fc9a:	4b22      	ldr	r3, [pc, #136]	; (800fd24 <GUIPostHandler+0xa4>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800fca2:	4a20      	ldr	r2, [pc, #128]	; (800fd24 <GUIPostHandler+0xa4>)
 800fca4:	6013      	str	r3, [r2, #0]
		checkstrokeArea();
 800fca6:	f7ff fae3 	bl	800f270 <checkstrokeArea>
	}
	if (timButtonPress == 0 && READ_FLAG(ONE_TOUCH, globalFlag)) {          // сбросим нажатия на кнопки и защиту от множества нажатий и скорость
 800fcaa:	4b1f      	ldr	r3, [pc, #124]	; (800fd28 <GUIPostHandler+0xa8>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d132      	bne.n	800fd18 <GUIPostHandler+0x98>
 800fcb2:	4b1c      	ldr	r3, [pc, #112]	; (800fd24 <GUIPostHandler+0xa4>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f003 0302 	and.w	r3, r3, #2
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d02c      	beq.n	800fd18 <GUIPostHandler+0x98>
		printColorImage(24, 182, 50, 50, NO_PRESSED, image_Plus);
 800fcbe:	4b1b      	ldr	r3, [pc, #108]	; (800fd2c <GUIPostHandler+0xac>)
 800fcc0:	9301      	str	r3, [sp, #4]
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	2332      	movs	r3, #50	; 0x32
 800fcc8:	2232      	movs	r2, #50	; 0x32
 800fcca:	21b6      	movs	r1, #182	; 0xb6
 800fccc:	2018      	movs	r0, #24
 800fcce:	f7ff f9ed 	bl	800f0ac <printColorImage>
		printColorImage(172, 182, 50, 50, NO_PRESSED, image_Minus);
 800fcd2:	4b17      	ldr	r3, [pc, #92]	; (800fd30 <GUIPostHandler+0xb0>)
 800fcd4:	9301      	str	r3, [sp, #4]
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	9300      	str	r3, [sp, #0]
 800fcda:	2332      	movs	r3, #50	; 0x32
 800fcdc:	2232      	movs	r2, #50	; 0x32
 800fcde:	21b6      	movs	r1, #182	; 0xb6
 800fce0:	20ac      	movs	r0, #172	; 0xac
 800fce2:	f7ff f9e3 	bl	800f0ac <printColorImage>
		printColorImage(98, 182, 50, 50, NO_PRESSED, image_Arrow);
 800fce6:	4b13      	ldr	r3, [pc, #76]	; (800fd34 <GUIPostHandler+0xb4>)
 800fce8:	9301      	str	r3, [sp, #4]
 800fcea:	2300      	movs	r3, #0
 800fcec:	9300      	str	r3, [sp, #0]
 800fcee:	2332      	movs	r3, #50	; 0x32
 800fcf0:	2232      	movs	r2, #50	; 0x32
 800fcf2:	21b6      	movs	r1, #182	; 0xb6
 800fcf4:	2062      	movs	r0, #98	; 0x62
 800fcf6:	f7ff f9d9 	bl	800f0ac <printColorImage>
		RESET_FLAG(TOUCH_DISPLAY, globalFlag);
 800fcfa:	4b0a      	ldr	r3, [pc, #40]	; (800fd24 <GUIPostHandler+0xa4>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f023 0301 	bic.w	r3, r3, #1
 800fd02:	4a08      	ldr	r2, [pc, #32]	; (800fd24 <GUIPostHandler+0xa4>)
 800fd04:	6013      	str	r3, [r2, #0]
		RESET_FLAG(ONE_TOUCH, globalFlag);
 800fd06:	4b07      	ldr	r3, [pc, #28]	; (800fd24 <GUIPostHandler+0xa4>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f023 0302 	bic.w	r3, r3, #2
 800fd0e:	4a05      	ldr	r2, [pc, #20]	; (800fd24 <GUIPostHandler+0xa4>)
 800fd10:	6013      	str	r3, [r2, #0]
		countSpeed = 1;
 800fd12:	4b09      	ldr	r3, [pc, #36]	; (800fd38 <GUIPostHandler+0xb8>)
 800fd14:	2201      	movs	r2, #1
 800fd16:	801a      	strh	r2, [r3, #0]
	}
}
 800fd18:	bf00      	nop
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	200002a4 	.word	0x200002a4
 800fd24:	200004d0 	.word	0x200004d0
 800fd28:	200002a8 	.word	0x200002a8
 800fd2c:	08019948 	.word	0x08019948
 800fd30:	0801acd0 	.word	0x0801acd0
 800fd34:	0801c184 	.word	0x0801c184
 800fd38:	2000002c 	.word	0x2000002c

0800fd3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800fd40:	f001 f9cc 	bl	80110dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800fd44:	f000 f840 	bl	800fdc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800fd48:	f000 f9e8 	bl	801011c <MX_GPIO_Init>
  MX_DMA_Init();
 800fd4c:	f000 f9cc 	bl	80100e8 <MX_DMA_Init>
  MX_SPI1_Init();
 800fd50:	f000 f8f4 	bl	800ff3c <MX_SPI1_Init>
  MX_SPI2_Init();
 800fd54:	f000 f928 	bl	800ffa8 <MX_SPI2_Init>
  MX_TIM5_Init();
 800fd58:	f000 f95c 	bl	8010014 <MX_TIM5_Init>
  MX_ADC1_Init();
 800fd5c:	f000 f89c 	bl	800fe98 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SET_BIT(TIM5->CCER, TIM_CCER_CC2E);                     // включим выходы таймера на ноги МК
 800fd60:	4b16      	ldr	r3, [pc, #88]	; (800fdbc <main+0x80>)
 800fd62:	6a1b      	ldr	r3, [r3, #32]
 800fd64:	4a15      	ldr	r2, [pc, #84]	; (800fdbc <main+0x80>)
 800fd66:	f043 0310 	orr.w	r3, r3, #16
 800fd6a:	6213      	str	r3, [r2, #32]
  SET_BIT(TIM5->CCER, TIM_CCER_CC3E);                     // включим выходы таймера на ноги МК
 800fd6c:	4b13      	ldr	r3, [pc, #76]	; (800fdbc <main+0x80>)
 800fd6e:	6a1b      	ldr	r3, [r3, #32]
 800fd70:	4a12      	ldr	r2, [pc, #72]	; (800fdbc <main+0x80>)
 800fd72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd76:	6213      	str	r3, [r2, #32]
  CLEAR_BIT(TIM5->CCMR1, TIM_CCMR1_OC2M);                 // очистим регистр
 800fd78:	4b10      	ldr	r3, [pc, #64]	; (800fdbc <main+0x80>)
 800fd7a:	699b      	ldr	r3, [r3, #24]
 800fd7c:	4a0f      	ldr	r2, [pc, #60]	; (800fdbc <main+0x80>)
 800fd7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd82:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(TIM5->CCMR2, TIM_CCMR2_OC3M);                 // очистим регистр
 800fd84:	4b0d      	ldr	r3, [pc, #52]	; (800fdbc <main+0x80>)
 800fd86:	69db      	ldr	r3, [r3, #28]
 800fd88:	4a0c      	ldr	r2, [pc, #48]	; (800fdbc <main+0x80>)
 800fd8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd8e:	61d3      	str	r3, [r2, #28]
  SET_BIT(TIM5->CCMR1, 0b100 << TIM_CCMR1_OC2M_Pos);      // ноль на выходе Force inactive level
 800fd90:	4b0a      	ldr	r3, [pc, #40]	; (800fdbc <main+0x80>)
 800fd92:	699b      	ldr	r3, [r3, #24]
 800fd94:	4a09      	ldr	r2, [pc, #36]	; (800fdbc <main+0x80>)
 800fd96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fd9a:	6193      	str	r3, [r2, #24]
  SET_BIT(TIM5->CCMR2, 0b100 << TIM_CCMR2_OC3M_Pos);      // ноль на выходе Force inactive level
 800fd9c:	4b07      	ldr	r3, [pc, #28]	; (800fdbc <main+0x80>)
 800fd9e:	69db      	ldr	r3, [r3, #28]
 800fda0:	4a06      	ldr	r2, [pc, #24]	; (800fdbc <main+0x80>)
 800fda2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fda6:	61d3      	str	r3, [r2, #28]
  HAL_ADC_Start_DMA (&hadc1, (uint32_t *)adcBuf, FILTRADC);      // запустим АЦП
 800fda8:	2240      	movs	r2, #64	; 0x40
 800fdaa:	4905      	ldr	r1, [pc, #20]	; (800fdc0 <main+0x84>)
 800fdac:	4805      	ldr	r0, [pc, #20]	; (800fdc4 <main+0x88>)
 800fdae:	f001 fa6f 	bl	8011290 <HAL_ADC_Start_DMA>
  doWork ();
 800fdb2:	f000 febf 	bl	8010b34 <doWork>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Work ();
 800fdb6:	f000 fed5 	bl	8010b64 <Work>
 800fdba:	e7fc      	b.n	800fdb6 <main+0x7a>
 800fdbc:	40000c00 	.word	0x40000c00
 800fdc0:	20000450 	.word	0x20000450
 800fdc4:	200002b0 	.word	0x200002b0

0800fdc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b094      	sub	sp, #80	; 0x50
 800fdcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800fdce:	f107 0320 	add.w	r3, r7, #32
 800fdd2:	2230      	movs	r2, #48	; 0x30
 800fdd4:	2100      	movs	r1, #0
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f004 fa6e 	bl	80142b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800fddc:	f107 030c 	add.w	r3, r7, #12
 800fde0:	2200      	movs	r2, #0
 800fde2:	601a      	str	r2, [r3, #0]
 800fde4:	605a      	str	r2, [r3, #4]
 800fde6:	609a      	str	r2, [r3, #8]
 800fde8:	60da      	str	r2, [r3, #12]
 800fdea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800fdec:	2300      	movs	r3, #0
 800fdee:	60bb      	str	r3, [r7, #8]
 800fdf0:	4b27      	ldr	r3, [pc, #156]	; (800fe90 <SystemClock_Config+0xc8>)
 800fdf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdf4:	4a26      	ldr	r2, [pc, #152]	; (800fe90 <SystemClock_Config+0xc8>)
 800fdf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdfa:	6413      	str	r3, [r2, #64]	; 0x40
 800fdfc:	4b24      	ldr	r3, [pc, #144]	; (800fe90 <SystemClock_Config+0xc8>)
 800fdfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe04:	60bb      	str	r3, [r7, #8]
 800fe06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800fe08:	2300      	movs	r3, #0
 800fe0a:	607b      	str	r3, [r7, #4]
 800fe0c:	4b21      	ldr	r3, [pc, #132]	; (800fe94 <SystemClock_Config+0xcc>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a20      	ldr	r2, [pc, #128]	; (800fe94 <SystemClock_Config+0xcc>)
 800fe12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fe16:	6013      	str	r3, [r2, #0]
 800fe18:	4b1e      	ldr	r3, [pc, #120]	; (800fe94 <SystemClock_Config+0xcc>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fe20:	607b      	str	r3, [r7, #4]
 800fe22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800fe24:	2301      	movs	r3, #1
 800fe26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800fe28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fe2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800fe2e:	2302      	movs	r3, #2
 800fe30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800fe32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fe36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800fe38:	2304      	movs	r3, #4
 800fe3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800fe3c:	2364      	movs	r3, #100	; 0x64
 800fe3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800fe40:	2302      	movs	r3, #2
 800fe42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800fe44:	2304      	movs	r3, #4
 800fe46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800fe48:	f107 0320 	add.w	r3, r7, #32
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f002 fc99 	bl	8012784 <HAL_RCC_OscConfig>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d001      	beq.n	800fe5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800fe58:	f000 f9d6 	bl	8010208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800fe5c:	230f      	movs	r3, #15
 800fe5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800fe60:	2302      	movs	r3, #2
 800fe62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800fe64:	2300      	movs	r3, #0
 800fe66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800fe68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800fe72:	f107 030c 	add.w	r3, r7, #12
 800fe76:	2103      	movs	r1, #3
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f002 fefb 	bl	8012c74 <HAL_RCC_ClockConfig>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d001      	beq.n	800fe88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800fe84:	f000 f9c0 	bl	8010208 <Error_Handler>
  }
}
 800fe88:	bf00      	nop
 800fe8a:	3750      	adds	r7, #80	; 0x50
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	40023800 	.word	0x40023800
 800fe94:	40007000 	.word	0x40007000

0800fe98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800fe9e:	463b      	mov	r3, r7
 800fea0:	2200      	movs	r2, #0
 800fea2:	601a      	str	r2, [r3, #0]
 800fea4:	605a      	str	r2, [r3, #4]
 800fea6:	609a      	str	r2, [r3, #8]
 800fea8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800feaa:	4b21      	ldr	r3, [pc, #132]	; (800ff30 <MX_ADC1_Init+0x98>)
 800feac:	4a21      	ldr	r2, [pc, #132]	; (800ff34 <MX_ADC1_Init+0x9c>)
 800feae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800feb0:	4b1f      	ldr	r3, [pc, #124]	; (800ff30 <MX_ADC1_Init+0x98>)
 800feb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800feb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800feb8:	4b1d      	ldr	r3, [pc, #116]	; (800ff30 <MX_ADC1_Init+0x98>)
 800feba:	2200      	movs	r2, #0
 800febc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800febe:	4b1c      	ldr	r3, [pc, #112]	; (800ff30 <MX_ADC1_Init+0x98>)
 800fec0:	2200      	movs	r2, #0
 800fec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800fec4:	4b1a      	ldr	r3, [pc, #104]	; (800ff30 <MX_ADC1_Init+0x98>)
 800fec6:	2201      	movs	r2, #1
 800fec8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800feca:	4b19      	ldr	r3, [pc, #100]	; (800ff30 <MX_ADC1_Init+0x98>)
 800fecc:	2200      	movs	r2, #0
 800fece:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800fed2:	4b17      	ldr	r3, [pc, #92]	; (800ff30 <MX_ADC1_Init+0x98>)
 800fed4:	2200      	movs	r2, #0
 800fed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800fed8:	4b15      	ldr	r3, [pc, #84]	; (800ff30 <MX_ADC1_Init+0x98>)
 800feda:	4a17      	ldr	r2, [pc, #92]	; (800ff38 <MX_ADC1_Init+0xa0>)
 800fedc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800fede:	4b14      	ldr	r3, [pc, #80]	; (800ff30 <MX_ADC1_Init+0x98>)
 800fee0:	2200      	movs	r2, #0
 800fee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800fee4:	4b12      	ldr	r3, [pc, #72]	; (800ff30 <MX_ADC1_Init+0x98>)
 800fee6:	2201      	movs	r2, #1
 800fee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800feea:	4b11      	ldr	r3, [pc, #68]	; (800ff30 <MX_ADC1_Init+0x98>)
 800feec:	2201      	movs	r2, #1
 800feee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800fef2:	4b0f      	ldr	r3, [pc, #60]	; (800ff30 <MX_ADC1_Init+0x98>)
 800fef4:	2201      	movs	r2, #1
 800fef6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800fef8:	480d      	ldr	r0, [pc, #52]	; (800ff30 <MX_ADC1_Init+0x98>)
 800fefa:	f001 f985 	bl	8011208 <HAL_ADC_Init>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d001      	beq.n	800ff08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800ff04:	f000 f980 	bl	8010208 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800ff08:	2303      	movs	r3, #3
 800ff0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800ff10:	2307      	movs	r3, #7
 800ff12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ff14:	463b      	mov	r3, r7
 800ff16:	4619      	mov	r1, r3
 800ff18:	4805      	ldr	r0, [pc, #20]	; (800ff30 <MX_ADC1_Init+0x98>)
 800ff1a:	f001 fac7 	bl	80114ac <HAL_ADC_ConfigChannel>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d001      	beq.n	800ff28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800ff24:	f000 f970 	bl	8010208 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800ff28:	bf00      	nop
 800ff2a:	3710      	adds	r7, #16
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	200002b0 	.word	0x200002b0
 800ff34:	40012000 	.word	0x40012000
 800ff38:	0f000001 	.word	0x0f000001

0800ff3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800ff40:	4b17      	ldr	r3, [pc, #92]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff42:	4a18      	ldr	r2, [pc, #96]	; (800ffa4 <MX_SPI1_Init+0x68>)
 800ff44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ff46:	4b16      	ldr	r3, [pc, #88]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff48:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ff4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ff4e:	4b14      	ldr	r3, [pc, #80]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff50:	2200      	movs	r2, #0
 800ff52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ff54:	4b12      	ldr	r3, [pc, #72]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ff5a:	4b11      	ldr	r3, [pc, #68]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ff60:	4b0f      	ldr	r3, [pc, #60]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff62:	2200      	movs	r2, #0
 800ff64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ff66:	4b0e      	ldr	r3, [pc, #56]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ff6e:	4b0c      	ldr	r3, [pc, #48]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff70:	2200      	movs	r2, #0
 800ff72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ff74:	4b0a      	ldr	r3, [pc, #40]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff76:	2200      	movs	r2, #0
 800ff78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ff7a:	4b09      	ldr	r3, [pc, #36]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ff80:	4b07      	ldr	r3, [pc, #28]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff82:	2200      	movs	r2, #0
 800ff84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800ff86:	4b06      	ldr	r3, [pc, #24]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff88:	220a      	movs	r2, #10
 800ff8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ff8c:	4804      	ldr	r0, [pc, #16]	; (800ffa0 <MX_SPI1_Init+0x64>)
 800ff8e:	f003 f85d 	bl	801304c <HAL_SPI_Init>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d001      	beq.n	800ff9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800ff98:	f000 f936 	bl	8010208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800ff9c:	bf00      	nop
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	20000358 	.word	0x20000358
 800ffa4:	40013000 	.word	0x40013000

0800ffa8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800ffac:	4b17      	ldr	r3, [pc, #92]	; (801000c <MX_SPI2_Init+0x64>)
 800ffae:	4a18      	ldr	r2, [pc, #96]	; (8010010 <MX_SPI2_Init+0x68>)
 800ffb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800ffb2:	4b16      	ldr	r3, [pc, #88]	; (801000c <MX_SPI2_Init+0x64>)
 800ffb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ffb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800ffba:	4b14      	ldr	r3, [pc, #80]	; (801000c <MX_SPI2_Init+0x64>)
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800ffc0:	4b12      	ldr	r3, [pc, #72]	; (801000c <MX_SPI2_Init+0x64>)
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ffc6:	4b11      	ldr	r3, [pc, #68]	; (801000c <MX_SPI2_Init+0x64>)
 800ffc8:	2200      	movs	r2, #0
 800ffca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ffcc:	4b0f      	ldr	r3, [pc, #60]	; (801000c <MX_SPI2_Init+0x64>)
 800ffce:	2200      	movs	r2, #0
 800ffd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800ffd2:	4b0e      	ldr	r3, [pc, #56]	; (801000c <MX_SPI2_Init+0x64>)
 800ffd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800ffda:	4b0c      	ldr	r3, [pc, #48]	; (801000c <MX_SPI2_Init+0x64>)
 800ffdc:	2238      	movs	r2, #56	; 0x38
 800ffde:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ffe0:	4b0a      	ldr	r3, [pc, #40]	; (801000c <MX_SPI2_Init+0x64>)
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800ffe6:	4b09      	ldr	r3, [pc, #36]	; (801000c <MX_SPI2_Init+0x64>)
 800ffe8:	2200      	movs	r2, #0
 800ffea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ffec:	4b07      	ldr	r3, [pc, #28]	; (801000c <MX_SPI2_Init+0x64>)
 800ffee:	2200      	movs	r2, #0
 800fff0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800fff2:	4b06      	ldr	r3, [pc, #24]	; (801000c <MX_SPI2_Init+0x64>)
 800fff4:	220a      	movs	r2, #10
 800fff6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800fff8:	4804      	ldr	r0, [pc, #16]	; (801000c <MX_SPI2_Init+0x64>)
 800fffa:	f003 f827 	bl	801304c <HAL_SPI_Init>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d001      	beq.n	8010008 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8010004:	f000 f900 	bl	8010208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8010008:	bf00      	nop
 801000a:	bd80      	pop	{r7, pc}
 801000c:	200003b0 	.word	0x200003b0
 8010010:	40003800 	.word	0x40003800

08010014 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b08a      	sub	sp, #40	; 0x28
 8010018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801001a:	f107 0320 	add.w	r3, r7, #32
 801001e:	2200      	movs	r2, #0
 8010020:	601a      	str	r2, [r3, #0]
 8010022:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010024:	1d3b      	adds	r3, r7, #4
 8010026:	2200      	movs	r2, #0
 8010028:	601a      	str	r2, [r3, #0]
 801002a:	605a      	str	r2, [r3, #4]
 801002c:	609a      	str	r2, [r3, #8]
 801002e:	60da      	str	r2, [r3, #12]
 8010030:	611a      	str	r2, [r3, #16]
 8010032:	615a      	str	r2, [r3, #20]
 8010034:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8010036:	4b29      	ldr	r3, [pc, #164]	; (80100dc <MX_TIM5_Init+0xc8>)
 8010038:	4a29      	ldr	r2, [pc, #164]	; (80100e0 <MX_TIM5_Init+0xcc>)
 801003a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 801003c:	4b27      	ldr	r3, [pc, #156]	; (80100dc <MX_TIM5_Init+0xc8>)
 801003e:	2200      	movs	r2, #0
 8010040:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010042:	4b26      	ldr	r3, [pc, #152]	; (80100dc <MX_TIM5_Init+0xc8>)
 8010044:	2200      	movs	r2, #0
 8010046:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000;
 8010048:	4b24      	ldr	r3, [pc, #144]	; (80100dc <MX_TIM5_Init+0xc8>)
 801004a:	4a26      	ldr	r2, [pc, #152]	; (80100e4 <MX_TIM5_Init+0xd0>)
 801004c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801004e:	4b23      	ldr	r3, [pc, #140]	; (80100dc <MX_TIM5_Init+0xc8>)
 8010050:	2200      	movs	r2, #0
 8010052:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8010054:	4b21      	ldr	r3, [pc, #132]	; (80100dc <MX_TIM5_Init+0xc8>)
 8010056:	2280      	movs	r2, #128	; 0x80
 8010058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 801005a:	4820      	ldr	r0, [pc, #128]	; (80100dc <MX_TIM5_Init+0xc8>)
 801005c:	f003 fc28 	bl	80138b0 <HAL_TIM_PWM_Init>
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8010066:	f000 f8cf 	bl	8010208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801006a:	2300      	movs	r3, #0
 801006c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801006e:	2300      	movs	r3, #0
 8010070:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8010072:	f107 0320 	add.w	r3, r7, #32
 8010076:	4619      	mov	r1, r3
 8010078:	4818      	ldr	r0, [pc, #96]	; (80100dc <MX_TIM5_Init+0xc8>)
 801007a:	f004 f871 	bl	8014160 <HAL_TIMEx_MasterConfigSynchronization>
 801007e:	4603      	mov	r3, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d001      	beq.n	8010088 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8010084:	f000 f8c0 	bl	8010208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010088:	2360      	movs	r3, #96	; 0x60
 801008a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000;
 801008c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8010090:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010092:	2300      	movs	r3, #0
 8010094:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010096:	2300      	movs	r3, #0
 8010098:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801009a:	1d3b      	adds	r3, r7, #4
 801009c:	2204      	movs	r2, #4
 801009e:	4619      	mov	r1, r3
 80100a0:	480e      	ldr	r0, [pc, #56]	; (80100dc <MX_TIM5_Init+0xc8>)
 80100a2:	f003 fd5d 	bl	8013b60 <HAL_TIM_PWM_ConfigChannel>
 80100a6:	4603      	mov	r3, r0
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d001      	beq.n	80100b0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80100ac:	f000 f8ac 	bl	8010208 <Error_Handler>
  }
  sConfigOC.Pulse = 2100;
 80100b0:	f640 0334 	movw	r3, #2100	; 0x834
 80100b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80100b6:	1d3b      	adds	r3, r7, #4
 80100b8:	2208      	movs	r2, #8
 80100ba:	4619      	mov	r1, r3
 80100bc:	4807      	ldr	r0, [pc, #28]	; (80100dc <MX_TIM5_Init+0xc8>)
 80100be:	f003 fd4f 	bl	8013b60 <HAL_TIM_PWM_ConfigChannel>
 80100c2:	4603      	mov	r3, r0
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d001      	beq.n	80100cc <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 80100c8:	f000 f89e 	bl	8010208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80100cc:	4803      	ldr	r0, [pc, #12]	; (80100dc <MX_TIM5_Init+0xc8>)
 80100ce:	f000 fa61 	bl	8010594 <HAL_TIM_MspPostInit>

}
 80100d2:	bf00      	nop
 80100d4:	3728      	adds	r7, #40	; 0x28
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	20000408 	.word	0x20000408
 80100e0:	40000c00 	.word	0x40000c00
 80100e4:	000186a0 	.word	0x000186a0

080100e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b083      	sub	sp, #12
 80100ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80100ee:	2300      	movs	r3, #0
 80100f0:	607b      	str	r3, [r7, #4]
 80100f2:	4b09      	ldr	r3, [pc, #36]	; (8010118 <MX_DMA_Init+0x30>)
 80100f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100f6:	4a08      	ldr	r2, [pc, #32]	; (8010118 <MX_DMA_Init+0x30>)
 80100f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80100fc:	6313      	str	r3, [r2, #48]	; 0x30
 80100fe:	4b06      	ldr	r3, [pc, #24]	; (8010118 <MX_DMA_Init+0x30>)
 8010100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010106:	607b      	str	r3, [r7, #4]
 8010108:	687b      	ldr	r3, [r7, #4]

}
 801010a:	bf00      	nop
 801010c:	370c      	adds	r7, #12
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	40023800 	.word	0x40023800

0801011c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b088      	sub	sp, #32
 8010120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010122:	f107 030c 	add.w	r3, r7, #12
 8010126:	2200      	movs	r2, #0
 8010128:	601a      	str	r2, [r3, #0]
 801012a:	605a      	str	r2, [r3, #4]
 801012c:	609a      	str	r2, [r3, #8]
 801012e:	60da      	str	r2, [r3, #12]
 8010130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010132:	2300      	movs	r3, #0
 8010134:	60bb      	str	r3, [r7, #8]
 8010136:	4b31      	ldr	r3, [pc, #196]	; (80101fc <MX_GPIO_Init+0xe0>)
 8010138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801013a:	4a30      	ldr	r2, [pc, #192]	; (80101fc <MX_GPIO_Init+0xe0>)
 801013c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010140:	6313      	str	r3, [r2, #48]	; 0x30
 8010142:	4b2e      	ldr	r3, [pc, #184]	; (80101fc <MX_GPIO_Init+0xe0>)
 8010144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801014a:	60bb      	str	r3, [r7, #8]
 801014c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801014e:	2300      	movs	r3, #0
 8010150:	607b      	str	r3, [r7, #4]
 8010152:	4b2a      	ldr	r3, [pc, #168]	; (80101fc <MX_GPIO_Init+0xe0>)
 8010154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010156:	4a29      	ldr	r2, [pc, #164]	; (80101fc <MX_GPIO_Init+0xe0>)
 8010158:	f043 0301 	orr.w	r3, r3, #1
 801015c:	6313      	str	r3, [r2, #48]	; 0x30
 801015e:	4b27      	ldr	r3, [pc, #156]	; (80101fc <MX_GPIO_Init+0xe0>)
 8010160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010162:	f003 0301 	and.w	r3, r3, #1
 8010166:	607b      	str	r3, [r7, #4]
 8010168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801016a:	2300      	movs	r3, #0
 801016c:	603b      	str	r3, [r7, #0]
 801016e:	4b23      	ldr	r3, [pc, #140]	; (80101fc <MX_GPIO_Init+0xe0>)
 8010170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010172:	4a22      	ldr	r2, [pc, #136]	; (80101fc <MX_GPIO_Init+0xe0>)
 8010174:	f043 0302 	orr.w	r3, r3, #2
 8010178:	6313      	str	r3, [r2, #48]	; 0x30
 801017a:	4b20      	ldr	r3, [pc, #128]	; (80101fc <MX_GPIO_Init+0xe0>)
 801017c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801017e:	f003 0302 	and.w	r3, r3, #2
 8010182:	603b      	str	r3, [r7, #0]
 8010184:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Data_Comand_Pin|Reset_Display_Pin|CS_Display_Pin|Led_Display_Pin
 8010186:	2200      	movs	r2, #0
 8010188:	f241 2107 	movw	r1, #4615	; 0x1207
 801018c:	481c      	ldr	r0, [pc, #112]	; (8010200 <MX_GPIO_Init+0xe4>)
 801018e:	f002 fadf 	bl	8012750 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Touch_Pin|LEDS_Pin, GPIO_PIN_RESET);
 8010192:	2200      	movs	r2, #0
 8010194:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8010198:	481a      	ldr	r0, [pc, #104]	; (8010204 <MX_GPIO_Init+0xe8>)
 801019a:	f002 fad9 	bl	8012750 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Data_Comand_Pin Reset_Display_Pin CS_Display_Pin Led_Display_Pin
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = Data_Comand_Pin|Reset_Display_Pin|CS_Display_Pin|Led_Display_Pin
 801019e:	f241 2307 	movw	r3, #4615	; 0x1207
 80101a2:	60fb      	str	r3, [r7, #12]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80101a4:	2301      	movs	r3, #1
 80101a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101a8:	2300      	movs	r3, #0
 80101aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101ac:	2300      	movs	r3, #0
 80101ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80101b0:	f107 030c 	add.w	r3, r7, #12
 80101b4:	4619      	mov	r1, r3
 80101b6:	4812      	ldr	r0, [pc, #72]	; (8010200 <MX_GPIO_Init+0xe4>)
 80101b8:	f002 f92e 	bl	8012418 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Touch_Pin LEDS_Pin */
  GPIO_InitStruct.Pin = CS_Touch_Pin|LEDS_Pin;
 80101bc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80101c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80101c2:	2301      	movs	r3, #1
 80101c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101c6:	2300      	movs	r3, #0
 80101c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101ca:	2300      	movs	r3, #0
 80101cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101ce:	f107 030c 	add.w	r3, r7, #12
 80101d2:	4619      	mov	r1, r3
 80101d4:	480b      	ldr	r0, [pc, #44]	; (8010204 <MX_GPIO_Init+0xe8>)
 80101d6:	f002 f91f 	bl	8012418 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Touch_Pin */
  GPIO_InitStruct.Pin = IRQ_Touch_Pin;
 80101da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80101e0:	2300      	movs	r3, #0
 80101e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101e4:	2300      	movs	r3, #0
 80101e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_Touch_GPIO_Port, &GPIO_InitStruct);
 80101e8:	f107 030c 	add.w	r3, r7, #12
 80101ec:	4619      	mov	r1, r3
 80101ee:	4805      	ldr	r0, [pc, #20]	; (8010204 <MX_GPIO_Init+0xe8>)
 80101f0:	f002 f912 	bl	8012418 <HAL_GPIO_Init>

}
 80101f4:	bf00      	nop
 80101f6:	3720      	adds	r7, #32
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	40023800 	.word	0x40023800
 8010200:	40020400 	.word	0x40020400
 8010204:	40020000 	.word	0x40020000

08010208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010208:	b480      	push	{r7}
 801020a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801020c:	b672      	cpsid	i
}
 801020e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010210:	e7fe      	b.n	8010210 <Error_Handler+0x8>

08010212 <wholeDevider>:
/**************************************************************************
   @brief     swaps values in variables
    @param    a  num first
    @param    a  num two
**************************************************************************/
int16_t wholeDevider (int16_t data, int16_t devider) {
 8010212:	b480      	push	{r7}
 8010214:	b087      	sub	sp, #28
 8010216:	af00      	add	r7, sp, #0
 8010218:	4603      	mov	r3, r0
 801021a:	460a      	mov	r2, r1
 801021c:	80fb      	strh	r3, [r7, #6]
 801021e:	4613      	mov	r3, r2
 8010220:	80bb      	strh	r3, [r7, #4]
	int16_t result = 0;
 8010222:	2300      	movs	r3, #0
 8010224:	82fb      	strh	r3, [r7, #22]
	int16_t max = (data / devider) + 1;
 8010226:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801022a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801022e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010232:	b29b      	uxth	r3, r3
 8010234:	3301      	adds	r3, #1
 8010236:	b29b      	uxth	r3, r3
 8010238:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < max; i ++) {
 801023a:	2300      	movs	r3, #0
 801023c:	613b      	str	r3, [r7, #16]
 801023e:	e013      	b.n	8010268 <wholeDevider+0x56>
		if (data <= devider) break;
 8010240:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010244:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010248:	429a      	cmp	r2, r3
 801024a:	dd13      	ble.n	8010274 <wholeDevider+0x62>
		data -= devider;
 801024c:	88fa      	ldrh	r2, [r7, #6]
 801024e:	88bb      	ldrh	r3, [r7, #4]
 8010250:	1ad3      	subs	r3, r2, r3
 8010252:	b29b      	uxth	r3, r3
 8010254:	80fb      	strh	r3, [r7, #6]
		result ++;
 8010256:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801025a:	b29b      	uxth	r3, r3
 801025c:	3301      	adds	r3, #1
 801025e:	b29b      	uxth	r3, r3
 8010260:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < max; i ++) {
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	3301      	adds	r3, #1
 8010266:	613b      	str	r3, [r7, #16]
 8010268:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801026c:	693a      	ldr	r2, [r7, #16]
 801026e:	429a      	cmp	r2, r3
 8010270:	dbe6      	blt.n	8010240 <wholeDevider+0x2e>
 8010272:	e000      	b.n	8010276 <wholeDevider+0x64>
		if (data <= devider) break;
 8010274:	bf00      	nop
	}
	result ++;
 8010276:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801027a:	b29b      	uxth	r3, r3
 801027c:	3301      	adds	r3, #1
 801027e:	b29b      	uxth	r3, r3
 8010280:	82fb      	strh	r3, [r7, #22]
	return result;
 8010282:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8010286:	4618      	mov	r0, r3
 8010288:	371c      	adds	r7, #28
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr
	...

08010294 <buzzerSet>:

void buzzerSet (int16_t time) {
 8010294:	b480      	push	{r7}
 8010296:	b083      	sub	sp, #12
 8010298:	af00      	add	r7, sp, #0
 801029a:	4603      	mov	r3, r0
 801029c:	80fb      	strh	r3, [r7, #6]
	if (!timBuzzer){
 801029e:	4b0a      	ldr	r3, [pc, #40]	; (80102c8 <buzzerSet+0x34>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d109      	bne.n	80102ba <buzzerSet+0x26>
		timBuzzer = time;
 80102a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80102aa:	4a07      	ldr	r2, [pc, #28]	; (80102c8 <buzzerSet+0x34>)
 80102ac:	6013      	str	r3, [r2, #0]
		BUZER_SET;
 80102ae:	4b07      	ldr	r3, [pc, #28]	; (80102cc <buzzerSet+0x38>)
 80102b0:	699b      	ldr	r3, [r3, #24]
 80102b2:	4a06      	ldr	r2, [pc, #24]	; (80102cc <buzzerSet+0x38>)
 80102b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80102b8:	6193      	str	r3, [r2, #24]
	}
}
 80102ba:	bf00      	nop
 80102bc:	370c      	adds	r7, #12
 80102be:	46bd      	mov	sp, r7
 80102c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c4:	4770      	bx	lr
 80102c6:	bf00      	nop
 80102c8:	200004d4 	.word	0x200004d4
 80102cc:	40020400 	.word	0x40020400

080102d0 <writeDataToMemory>:

void writeDataToMemory(uint32_t address, uint32_t data) {
 80102d0:	b5b0      	push	{r4, r5, r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80102da:	f001 fee3 	bl	80120a4 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80102de:	4b09      	ldr	r3, [pc, #36]	; (8010304 <writeDataToMemory+0x34>)
 80102e0:	22f3      	movs	r2, #243	; 0xf3
 80102e2:	60da      	str	r2, [r3, #12]
	  //FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	2200      	movs	r2, #0
 80102e8:	461c      	mov	r4, r3
 80102ea:	4615      	mov	r5, r2
 80102ec:	4622      	mov	r2, r4
 80102ee:	462b      	mov	r3, r5
 80102f0:	6879      	ldr	r1, [r7, #4]
 80102f2:	2002      	movs	r0, #2
 80102f4:	f001 fe82 	bl	8011ffc <HAL_FLASH_Program>
	  HAL_FLASH_Lock();
 80102f8:	f001 fef6 	bl	80120e8 <HAL_FLASH_Lock>
}
 80102fc:	bf00      	nop
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bdb0      	pop	{r4, r5, r7, pc}
 8010304:	40023c00 	.word	0x40023c00

08010308 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801030e:	2300      	movs	r3, #0
 8010310:	607b      	str	r3, [r7, #4]
 8010312:	4b10      	ldr	r3, [pc, #64]	; (8010354 <HAL_MspInit+0x4c>)
 8010314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010316:	4a0f      	ldr	r2, [pc, #60]	; (8010354 <HAL_MspInit+0x4c>)
 8010318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801031c:	6453      	str	r3, [r2, #68]	; 0x44
 801031e:	4b0d      	ldr	r3, [pc, #52]	; (8010354 <HAL_MspInit+0x4c>)
 8010320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010326:	607b      	str	r3, [r7, #4]
 8010328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801032a:	2300      	movs	r3, #0
 801032c:	603b      	str	r3, [r7, #0]
 801032e:	4b09      	ldr	r3, [pc, #36]	; (8010354 <HAL_MspInit+0x4c>)
 8010330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010332:	4a08      	ldr	r2, [pc, #32]	; (8010354 <HAL_MspInit+0x4c>)
 8010334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010338:	6413      	str	r3, [r2, #64]	; 0x40
 801033a:	4b06      	ldr	r3, [pc, #24]	; (8010354 <HAL_MspInit+0x4c>)
 801033c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801033e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010342:	603b      	str	r3, [r7, #0]
 8010344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010346:	bf00      	nop
 8010348:	370c      	adds	r7, #12
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop
 8010354:	40023800 	.word	0x40023800

08010358 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b08a      	sub	sp, #40	; 0x28
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010360:	f107 0314 	add.w	r3, r7, #20
 8010364:	2200      	movs	r2, #0
 8010366:	601a      	str	r2, [r3, #0]
 8010368:	605a      	str	r2, [r3, #4]
 801036a:	609a      	str	r2, [r3, #8]
 801036c:	60da      	str	r2, [r3, #12]
 801036e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4a2f      	ldr	r2, [pc, #188]	; (8010434 <HAL_ADC_MspInit+0xdc>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d157      	bne.n	801042a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 801037a:	2300      	movs	r3, #0
 801037c:	613b      	str	r3, [r7, #16]
 801037e:	4b2e      	ldr	r3, [pc, #184]	; (8010438 <HAL_ADC_MspInit+0xe0>)
 8010380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010382:	4a2d      	ldr	r2, [pc, #180]	; (8010438 <HAL_ADC_MspInit+0xe0>)
 8010384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010388:	6453      	str	r3, [r2, #68]	; 0x44
 801038a:	4b2b      	ldr	r3, [pc, #172]	; (8010438 <HAL_ADC_MspInit+0xe0>)
 801038c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801038e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010392:	613b      	str	r3, [r7, #16]
 8010394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010396:	2300      	movs	r3, #0
 8010398:	60fb      	str	r3, [r7, #12]
 801039a:	4b27      	ldr	r3, [pc, #156]	; (8010438 <HAL_ADC_MspInit+0xe0>)
 801039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801039e:	4a26      	ldr	r2, [pc, #152]	; (8010438 <HAL_ADC_MspInit+0xe0>)
 80103a0:	f043 0301 	orr.w	r3, r3, #1
 80103a4:	6313      	str	r3, [r2, #48]	; 0x30
 80103a6:	4b24      	ldr	r3, [pc, #144]	; (8010438 <HAL_ADC_MspInit+0xe0>)
 80103a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103aa:	f003 0301 	and.w	r3, r3, #1
 80103ae:	60fb      	str	r3, [r7, #12]
 80103b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80103b2:	2308      	movs	r3, #8
 80103b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80103b6:	2303      	movs	r3, #3
 80103b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103ba:	2300      	movs	r3, #0
 80103bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103be:	f107 0314 	add.w	r3, r7, #20
 80103c2:	4619      	mov	r1, r3
 80103c4:	481d      	ldr	r0, [pc, #116]	; (801043c <HAL_ADC_MspInit+0xe4>)
 80103c6:	f002 f827 	bl	8012418 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80103ca:	4b1d      	ldr	r3, [pc, #116]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 80103cc:	4a1d      	ldr	r2, [pc, #116]	; (8010444 <HAL_ADC_MspInit+0xec>)
 80103ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80103d0:	4b1b      	ldr	r3, [pc, #108]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 80103d2:	2200      	movs	r2, #0
 80103d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80103d6:	4b1a      	ldr	r3, [pc, #104]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 80103d8:	2200      	movs	r2, #0
 80103da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80103dc:	4b18      	ldr	r3, [pc, #96]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 80103de:	2200      	movs	r2, #0
 80103e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80103e2:	4b17      	ldr	r3, [pc, #92]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 80103e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80103e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80103ea:	4b15      	ldr	r3, [pc, #84]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 80103ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80103f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80103f2:	4b13      	ldr	r3, [pc, #76]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 80103f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80103f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80103fa:	4b11      	ldr	r3, [pc, #68]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 80103fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010400:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8010402:	4b0f      	ldr	r3, [pc, #60]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 8010404:	2200      	movs	r2, #0
 8010406:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010408:	4b0d      	ldr	r3, [pc, #52]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 801040a:	2200      	movs	r2, #0
 801040c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 801040e:	480c      	ldr	r0, [pc, #48]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 8010410:	f001 fc0e 	bl	8011c30 <HAL_DMA_Init>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 801041a:	f7ff fef5 	bl	8010208 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	4a07      	ldr	r2, [pc, #28]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 8010422:	639a      	str	r2, [r3, #56]	; 0x38
 8010424:	4a06      	ldr	r2, [pc, #24]	; (8010440 <HAL_ADC_MspInit+0xe8>)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801042a:	bf00      	nop
 801042c:	3728      	adds	r7, #40	; 0x28
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	40012000 	.word	0x40012000
 8010438:	40023800 	.word	0x40023800
 801043c:	40020000 	.word	0x40020000
 8010440:	200002f8 	.word	0x200002f8
 8010444:	40026410 	.word	0x40026410

08010448 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b08c      	sub	sp, #48	; 0x30
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010450:	f107 031c 	add.w	r3, r7, #28
 8010454:	2200      	movs	r2, #0
 8010456:	601a      	str	r2, [r3, #0]
 8010458:	605a      	str	r2, [r3, #4]
 801045a:	609a      	str	r2, [r3, #8]
 801045c:	60da      	str	r2, [r3, #12]
 801045e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4a32      	ldr	r2, [pc, #200]	; (8010530 <HAL_SPI_MspInit+0xe8>)
 8010466:	4293      	cmp	r3, r2
 8010468:	d12c      	bne.n	80104c4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801046a:	2300      	movs	r3, #0
 801046c:	61bb      	str	r3, [r7, #24]
 801046e:	4b31      	ldr	r3, [pc, #196]	; (8010534 <HAL_SPI_MspInit+0xec>)
 8010470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010472:	4a30      	ldr	r2, [pc, #192]	; (8010534 <HAL_SPI_MspInit+0xec>)
 8010474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010478:	6453      	str	r3, [r2, #68]	; 0x44
 801047a:	4b2e      	ldr	r3, [pc, #184]	; (8010534 <HAL_SPI_MspInit+0xec>)
 801047c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801047e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010482:	61bb      	str	r3, [r7, #24]
 8010484:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010486:	2300      	movs	r3, #0
 8010488:	617b      	str	r3, [r7, #20]
 801048a:	4b2a      	ldr	r3, [pc, #168]	; (8010534 <HAL_SPI_MspInit+0xec>)
 801048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801048e:	4a29      	ldr	r2, [pc, #164]	; (8010534 <HAL_SPI_MspInit+0xec>)
 8010490:	f043 0301 	orr.w	r3, r3, #1
 8010494:	6313      	str	r3, [r2, #48]	; 0x30
 8010496:	4b27      	ldr	r3, [pc, #156]	; (8010534 <HAL_SPI_MspInit+0xec>)
 8010498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801049a:	f003 0301 	and.w	r3, r3, #1
 801049e:	617b      	str	r3, [r7, #20]
 80104a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80104a2:	23e0      	movs	r3, #224	; 0xe0
 80104a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104a6:	2302      	movs	r3, #2
 80104a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104aa:	2300      	movs	r3, #0
 80104ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104ae:	2303      	movs	r3, #3
 80104b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80104b2:	2305      	movs	r3, #5
 80104b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104b6:	f107 031c 	add.w	r3, r7, #28
 80104ba:	4619      	mov	r1, r3
 80104bc:	481e      	ldr	r0, [pc, #120]	; (8010538 <HAL_SPI_MspInit+0xf0>)
 80104be:	f001 ffab 	bl	8012418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80104c2:	e031      	b.n	8010528 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	4a1c      	ldr	r2, [pc, #112]	; (801053c <HAL_SPI_MspInit+0xf4>)
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d12c      	bne.n	8010528 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80104ce:	2300      	movs	r3, #0
 80104d0:	613b      	str	r3, [r7, #16]
 80104d2:	4b18      	ldr	r3, [pc, #96]	; (8010534 <HAL_SPI_MspInit+0xec>)
 80104d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104d6:	4a17      	ldr	r2, [pc, #92]	; (8010534 <HAL_SPI_MspInit+0xec>)
 80104d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80104dc:	6413      	str	r3, [r2, #64]	; 0x40
 80104de:	4b15      	ldr	r3, [pc, #84]	; (8010534 <HAL_SPI_MspInit+0xec>)
 80104e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80104e6:	613b      	str	r3, [r7, #16]
 80104e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80104ea:	2300      	movs	r3, #0
 80104ec:	60fb      	str	r3, [r7, #12]
 80104ee:	4b11      	ldr	r3, [pc, #68]	; (8010534 <HAL_SPI_MspInit+0xec>)
 80104f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104f2:	4a10      	ldr	r2, [pc, #64]	; (8010534 <HAL_SPI_MspInit+0xec>)
 80104f4:	f043 0302 	orr.w	r3, r3, #2
 80104f8:	6313      	str	r3, [r2, #48]	; 0x30
 80104fa:	4b0e      	ldr	r3, [pc, #56]	; (8010534 <HAL_SPI_MspInit+0xec>)
 80104fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104fe:	f003 0302 	and.w	r3, r3, #2
 8010502:	60fb      	str	r3, [r7, #12]
 8010504:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8010506:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 801050a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801050c:	2302      	movs	r3, #2
 801050e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010510:	2300      	movs	r3, #0
 8010512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010514:	2303      	movs	r3, #3
 8010516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010518:	2305      	movs	r3, #5
 801051a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801051c:	f107 031c 	add.w	r3, r7, #28
 8010520:	4619      	mov	r1, r3
 8010522:	4807      	ldr	r0, [pc, #28]	; (8010540 <HAL_SPI_MspInit+0xf8>)
 8010524:	f001 ff78 	bl	8012418 <HAL_GPIO_Init>
}
 8010528:	bf00      	nop
 801052a:	3730      	adds	r7, #48	; 0x30
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	40013000 	.word	0x40013000
 8010534:	40023800 	.word	0x40023800
 8010538:	40020000 	.word	0x40020000
 801053c:	40003800 	.word	0x40003800
 8010540:	40020400 	.word	0x40020400

08010544 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b084      	sub	sp, #16
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4a0e      	ldr	r2, [pc, #56]	; (801058c <HAL_TIM_PWM_MspInit+0x48>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d115      	bne.n	8010582 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8010556:	2300      	movs	r3, #0
 8010558:	60fb      	str	r3, [r7, #12]
 801055a:	4b0d      	ldr	r3, [pc, #52]	; (8010590 <HAL_TIM_PWM_MspInit+0x4c>)
 801055c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801055e:	4a0c      	ldr	r2, [pc, #48]	; (8010590 <HAL_TIM_PWM_MspInit+0x4c>)
 8010560:	f043 0308 	orr.w	r3, r3, #8
 8010564:	6413      	str	r3, [r2, #64]	; 0x40
 8010566:	4b0a      	ldr	r3, [pc, #40]	; (8010590 <HAL_TIM_PWM_MspInit+0x4c>)
 8010568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801056a:	f003 0308 	and.w	r3, r3, #8
 801056e:	60fb      	str	r3, [r7, #12]
 8010570:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8010572:	2200      	movs	r2, #0
 8010574:	2100      	movs	r1, #0
 8010576:	2032      	movs	r0, #50	; 0x32
 8010578:	f001 fb23 	bl	8011bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 801057c:	2032      	movs	r0, #50	; 0x32
 801057e:	f001 fb3c 	bl	8011bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8010582:	bf00      	nop
 8010584:	3710      	adds	r7, #16
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	40000c00 	.word	0x40000c00
 8010590:	40023800 	.word	0x40023800

08010594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b088      	sub	sp, #32
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801059c:	f107 030c 	add.w	r3, r7, #12
 80105a0:	2200      	movs	r2, #0
 80105a2:	601a      	str	r2, [r3, #0]
 80105a4:	605a      	str	r2, [r3, #4]
 80105a6:	609a      	str	r2, [r3, #8]
 80105a8:	60da      	str	r2, [r3, #12]
 80105aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	4a12      	ldr	r2, [pc, #72]	; (80105fc <HAL_TIM_MspPostInit+0x68>)
 80105b2:	4293      	cmp	r3, r2
 80105b4:	d11d      	bne.n	80105f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80105b6:	2300      	movs	r3, #0
 80105b8:	60bb      	str	r3, [r7, #8]
 80105ba:	4b11      	ldr	r3, [pc, #68]	; (8010600 <HAL_TIM_MspPostInit+0x6c>)
 80105bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105be:	4a10      	ldr	r2, [pc, #64]	; (8010600 <HAL_TIM_MspPostInit+0x6c>)
 80105c0:	f043 0301 	orr.w	r3, r3, #1
 80105c4:	6313      	str	r3, [r2, #48]	; 0x30
 80105c6:	4b0e      	ldr	r3, [pc, #56]	; (8010600 <HAL_TIM_MspPostInit+0x6c>)
 80105c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ca:	f003 0301 	and.w	r3, r3, #1
 80105ce:	60bb      	str	r3, [r7, #8]
 80105d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80105d2:	2306      	movs	r3, #6
 80105d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105d6:	2302      	movs	r3, #2
 80105d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105da:	2300      	movs	r3, #0
 80105dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105de:	2300      	movs	r3, #0
 80105e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80105e2:	2302      	movs	r3, #2
 80105e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105e6:	f107 030c 	add.w	r3, r7, #12
 80105ea:	4619      	mov	r1, r3
 80105ec:	4805      	ldr	r0, [pc, #20]	; (8010604 <HAL_TIM_MspPostInit+0x70>)
 80105ee:	f001 ff13 	bl	8012418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80105f2:	bf00      	nop
 80105f4:	3720      	adds	r7, #32
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	40000c00 	.word	0x40000c00
 8010600:	40023800 	.word	0x40023800
 8010604:	40020000 	.word	0x40020000

08010608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010608:	b480      	push	{r7}
 801060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801060c:	e7fe      	b.n	801060c <NMI_Handler+0x4>

0801060e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801060e:	b480      	push	{r7}
 8010610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010612:	e7fe      	b.n	8010612 <HardFault_Handler+0x4>

08010614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010614:	b480      	push	{r7}
 8010616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010618:	e7fe      	b.n	8010618 <MemManage_Handler+0x4>

0801061a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801061a:	b480      	push	{r7}
 801061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801061e:	e7fe      	b.n	801061e <BusFault_Handler+0x4>

08010620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010620:	b480      	push	{r7}
 8010622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010624:	e7fe      	b.n	8010624 <UsageFault_Handler+0x4>

08010626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010626:	b480      	push	{r7}
 8010628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801062a:	bf00      	nop
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010634:	b480      	push	{r7}
 8010636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010638:	bf00      	nop
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr

08010642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010642:	b480      	push	{r7}
 8010644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010646:	bf00      	nop
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (timBigArea) timBigArea --;
 8010654:	4b26      	ldr	r3, [pc, #152]	; (80106f0 <SysTick_Handler+0xa0>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d004      	beq.n	8010666 <SysTick_Handler+0x16>
 801065c:	4b24      	ldr	r3, [pc, #144]	; (80106f0 <SysTick_Handler+0xa0>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	3b01      	subs	r3, #1
 8010662:	4a23      	ldr	r2, [pc, #140]	; (80106f0 <SysTick_Handler+0xa0>)
 8010664:	6013      	str	r3, [r2, #0]
	if (timButtonPress) timButtonPress --;
 8010666:	4b23      	ldr	r3, [pc, #140]	; (80106f4 <SysTick_Handler+0xa4>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d004      	beq.n	8010678 <SysTick_Handler+0x28>
 801066e:	4b21      	ldr	r3, [pc, #132]	; (80106f4 <SysTick_Handler+0xa4>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	3b01      	subs	r3, #1
 8010674:	4a1f      	ldr	r2, [pc, #124]	; (80106f4 <SysTick_Handler+0xa4>)
 8010676:	6013      	str	r3, [r2, #0]
	if (timHoldButtonPress) timHoldButtonPress --;
 8010678:	4b1f      	ldr	r3, [pc, #124]	; (80106f8 <SysTick_Handler+0xa8>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d004      	beq.n	801068a <SysTick_Handler+0x3a>
 8010680:	4b1d      	ldr	r3, [pc, #116]	; (80106f8 <SysTick_Handler+0xa8>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	3b01      	subs	r3, #1
 8010686:	4a1c      	ldr	r2, [pc, #112]	; (80106f8 <SysTick_Handler+0xa8>)
 8010688:	6013      	str	r3, [r2, #0]
	if (timToOvercurrent > 1) timToOvercurrent --;
 801068a:	4b1c      	ldr	r3, [pc, #112]	; (80106fc <SysTick_Handler+0xac>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	2b01      	cmp	r3, #1
 8010690:	d904      	bls.n	801069c <SysTick_Handler+0x4c>
 8010692:	4b1a      	ldr	r3, [pc, #104]	; (80106fc <SysTick_Handler+0xac>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	3b01      	subs	r3, #1
 8010698:	4a18      	ldr	r2, [pc, #96]	; (80106fc <SysTick_Handler+0xac>)
 801069a:	6013      	str	r3, [r2, #0]
	if (timToEndOperation > 1) timToEndOperation --;
 801069c:	4b18      	ldr	r3, [pc, #96]	; (8010700 <SysTick_Handler+0xb0>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b01      	cmp	r3, #1
 80106a2:	d904      	bls.n	80106ae <SysTick_Handler+0x5e>
 80106a4:	4b16      	ldr	r3, [pc, #88]	; (8010700 <SysTick_Handler+0xb0>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	3b01      	subs	r3, #1
 80106aa:	4a15      	ldr	r2, [pc, #84]	; (8010700 <SysTick_Handler+0xb0>)
 80106ac:	6013      	str	r3, [r2, #0]
	if (timToCurrent) timToCurrent --;
 80106ae:	4b15      	ldr	r3, [pc, #84]	; (8010704 <SysTick_Handler+0xb4>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d004      	beq.n	80106c0 <SysTick_Handler+0x70>
 80106b6:	4b13      	ldr	r3, [pc, #76]	; (8010704 <SysTick_Handler+0xb4>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	3b01      	subs	r3, #1
 80106bc:	4a11      	ldr	r2, [pc, #68]	; (8010704 <SysTick_Handler+0xb4>)
 80106be:	6013      	str	r3, [r2, #0]
	if (timBuzzer) timBuzzer --;
 80106c0:	4b11      	ldr	r3, [pc, #68]	; (8010708 <SysTick_Handler+0xb8>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d004      	beq.n	80106d2 <SysTick_Handler+0x82>
 80106c8:	4b0f      	ldr	r3, [pc, #60]	; (8010708 <SysTick_Handler+0xb8>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	3b01      	subs	r3, #1
 80106ce:	4a0e      	ldr	r2, [pc, #56]	; (8010708 <SysTick_Handler+0xb8>)
 80106d0:	6013      	str	r3, [r2, #0]
	if (timBuzzer == 10) SET_BIT(GPIOB->BSRR, GPIO_BSRR_BR_9);
 80106d2:	4b0d      	ldr	r3, [pc, #52]	; (8010708 <SysTick_Handler+0xb8>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	2b0a      	cmp	r3, #10
 80106d8:	d105      	bne.n	80106e6 <SysTick_Handler+0x96>
 80106da:	4b0c      	ldr	r3, [pc, #48]	; (801070c <SysTick_Handler+0xbc>)
 80106dc:	699b      	ldr	r3, [r3, #24]
 80106de:	4a0b      	ldr	r2, [pc, #44]	; (801070c <SysTick_Handler+0xbc>)
 80106e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80106e4:	6193      	str	r3, [r2, #24]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80106e6:	f000 fd4b 	bl	8011180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80106ea:	bf00      	nop
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	200002a4 	.word	0x200002a4
 80106f4:	200002a8 	.word	0x200002a8
 80106f8:	200002ac 	.word	0x200002ac
 80106fc:	200004e0 	.word	0x200004e0
 8010700:	200004e8 	.word	0x200004e8
 8010704:	200004e4 	.word	0x200004e4
 8010708:	200004d4 	.word	0x200004d4
 801070c:	40020400 	.word	0x40020400

08010710 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8010714:	4825      	ldr	r0, [pc, #148]	; (80107ac <TIM5_IRQHandler+0x9c>)
 8010716:	f003 f91a 	bl	801394e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  CLEAR_BIT(TIM5->SR, TIM_SR_CC2IF|TIM_SR_CC3IF);                                                        // сбросими руками флаг прерывания
 801071a:	4b25      	ldr	r3, [pc, #148]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 801071c:	691b      	ldr	r3, [r3, #16]
 801071e:	4a24      	ldr	r2, [pc, #144]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 8010720:	f023 030c 	bic.w	r3, r3, #12
 8010724:	6113      	str	r3, [r2, #16]
  if (ParamDevice.changeCount) ParamDevice.changeCount --;                                               // отнимаем количество отработаных импульсов
 8010726:	4b23      	ldr	r3, [pc, #140]	; (80107b4 <TIM5_IRQHandler+0xa4>)
 8010728:	68db      	ldr	r3, [r3, #12]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d004      	beq.n	8010738 <TIM5_IRQHandler+0x28>
 801072e:	4b21      	ldr	r3, [pc, #132]	; (80107b4 <TIM5_IRQHandler+0xa4>)
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	3b01      	subs	r3, #1
 8010734:	4a1f      	ldr	r2, [pc, #124]	; (80107b4 <TIM5_IRQHandler+0xa4>)
 8010736:	60d3      	str	r3, [r2, #12]
  if(!ParamDevice.changeCount && !ParamDevice.flagInfinity && !READ_FLAG(END_OPERATION, globalFlag)){    // заходим только если у нас не бесконечность и досчитали до конца один раз
 8010738:	4b1e      	ldr	r3, [pc, #120]	; (80107b4 <TIM5_IRQHandler+0xa4>)
 801073a:	68db      	ldr	r3, [r3, #12]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d133      	bne.n	80107a8 <TIM5_IRQHandler+0x98>
 8010740:	4b1c      	ldr	r3, [pc, #112]	; (80107b4 <TIM5_IRQHandler+0xa4>)
 8010742:	7f1b      	ldrb	r3, [r3, #28]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d12f      	bne.n	80107a8 <TIM5_IRQHandler+0x98>
 8010748:	4b1b      	ldr	r3, [pc, #108]	; (80107b8 <TIM5_IRQHandler+0xa8>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010750:	2b00      	cmp	r3, #0
 8010752:	d129      	bne.n	80107a8 <TIM5_IRQHandler+0x98>
	  //HAL_TIM_PWM_Stop_IT(&htim5, TIM_CHANNEL_2);
	  //HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);  гавно хал
	  //HAL_TIM_Base_Stop(&htim5);
	  CLEAR_BIT(TIM5->CCMR1, TIM_CCMR1_OC2M);                                                            // очистим регистр
 8010754:	4b16      	ldr	r3, [pc, #88]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 8010756:	699b      	ldr	r3, [r3, #24]
 8010758:	4a15      	ldr	r2, [pc, #84]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 801075a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801075e:	6193      	str	r3, [r2, #24]
	  CLEAR_BIT(TIM5->CCMR2, TIM_CCMR2_OC3M);                                                            // очистим регистр
 8010760:	4b13      	ldr	r3, [pc, #76]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 8010762:	69db      	ldr	r3, [r3, #28]
 8010764:	4a12      	ldr	r2, [pc, #72]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 8010766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801076a:	61d3      	str	r3, [r2, #28]
	  SET_BIT(TIM5->CCMR1, 0b100 << TIM_CCMR1_OC2M_Pos);                                                 // ноль на выходе Force inactive level
 801076c:	4b10      	ldr	r3, [pc, #64]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 801076e:	699b      	ldr	r3, [r3, #24]
 8010770:	4a0f      	ldr	r2, [pc, #60]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 8010772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010776:	6193      	str	r3, [r2, #24]
      SET_BIT(TIM5->CCMR2, 0b100 << TIM_CCMR2_OC3M_Pos);                                                 // ноль на выходе Force inactive level
 8010778:	4b0d      	ldr	r3, [pc, #52]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 801077a:	69db      	ldr	r3, [r3, #28]
 801077c:	4a0c      	ldr	r2, [pc, #48]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 801077e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010782:	61d3      	str	r3, [r2, #28]
	  CLEAR_BIT(TIM5->DIER, TIM_DIER_CC2IE|TIM_DIER_CC3IE);                                              // выключим прерывания
 8010784:	4b0a      	ldr	r3, [pc, #40]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	4a09      	ldr	r2, [pc, #36]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 801078a:	f023 030c 	bic.w	r3, r3, #12
 801078e:	60d3      	str	r3, [r2, #12]
	  CLEAR_BIT(TIM5->CR1, TIM_CR1_CEN);                                                                 // выключим таймер в место хала
 8010790:	4b07      	ldr	r3, [pc, #28]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4a06      	ldr	r2, [pc, #24]	; (80107b0 <TIM5_IRQHandler+0xa0>)
 8010796:	f023 0301 	bic.w	r3, r3, #1
 801079a:	6013      	str	r3, [r2, #0]
	  SET_FLAG (END_OPERATION, globalFlag);                                                              // поднимем флаг окончания
 801079c:	4b06      	ldr	r3, [pc, #24]	; (80107b8 <TIM5_IRQHandler+0xa8>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107a4:	4a04      	ldr	r2, [pc, #16]	; (80107b8 <TIM5_IRQHandler+0xa8>)
 80107a6:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END TIM5_IRQn 1 */
}
 80107a8:	bf00      	nop
 80107aa:	bd80      	pop	{r7, pc}
 80107ac:	20000408 	.word	0x20000408
 80107b0:	40000c00 	.word	0x40000c00
 80107b4:	20000040 	.word	0x20000040
 80107b8:	200004d0 	.word	0x200004d0

080107bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80107bc:	b480      	push	{r7}
 80107be:	af00      	add	r7, sp, #0
  return 1;
 80107c0:	2301      	movs	r3, #1
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <_kill>:

int _kill(int pid, int sig)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80107d6:	f003 fd45 	bl	8014264 <__errno>
 80107da:	4603      	mov	r3, r0
 80107dc:	2216      	movs	r2, #22
 80107de:	601a      	str	r2, [r3, #0]
  return -1;
 80107e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <_exit>:

void _exit (int status)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80107f4:	f04f 31ff 	mov.w	r1, #4294967295
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f7ff ffe7 	bl	80107cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80107fe:	e7fe      	b.n	80107fe <_exit+0x12>

08010800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b086      	sub	sp, #24
 8010804:	af00      	add	r7, sp, #0
 8010806:	60f8      	str	r0, [r7, #12]
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801080c:	2300      	movs	r3, #0
 801080e:	617b      	str	r3, [r7, #20]
 8010810:	e00a      	b.n	8010828 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8010812:	f3af 8000 	nop.w
 8010816:	4601      	mov	r1, r0
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	1c5a      	adds	r2, r3, #1
 801081c:	60ba      	str	r2, [r7, #8]
 801081e:	b2ca      	uxtb	r2, r1
 8010820:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	3301      	adds	r3, #1
 8010826:	617b      	str	r3, [r7, #20]
 8010828:	697a      	ldr	r2, [r7, #20]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	429a      	cmp	r2, r3
 801082e:	dbf0      	blt.n	8010812 <_read+0x12>
  }

  return len;
 8010830:	687b      	ldr	r3, [r7, #4]
}
 8010832:	4618      	mov	r0, r3
 8010834:	3718      	adds	r7, #24
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801083a:	b580      	push	{r7, lr}
 801083c:	b086      	sub	sp, #24
 801083e:	af00      	add	r7, sp, #0
 8010840:	60f8      	str	r0, [r7, #12]
 8010842:	60b9      	str	r1, [r7, #8]
 8010844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010846:	2300      	movs	r3, #0
 8010848:	617b      	str	r3, [r7, #20]
 801084a:	e009      	b.n	8010860 <_write+0x26>
  {
    __io_putchar(*ptr++);
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	1c5a      	adds	r2, r3, #1
 8010850:	60ba      	str	r2, [r7, #8]
 8010852:	781b      	ldrb	r3, [r3, #0]
 8010854:	4618      	mov	r0, r3
 8010856:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	3301      	adds	r3, #1
 801085e:	617b      	str	r3, [r7, #20]
 8010860:	697a      	ldr	r2, [r7, #20]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	429a      	cmp	r2, r3
 8010866:	dbf1      	blt.n	801084c <_write+0x12>
  }
  return len;
 8010868:	687b      	ldr	r3, [r7, #4]
}
 801086a:	4618      	mov	r0, r3
 801086c:	3718      	adds	r7, #24
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}

08010872 <_close>:

int _close(int file)
{
 8010872:	b480      	push	{r7}
 8010874:	b083      	sub	sp, #12
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801087a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801087e:	4618      	mov	r0, r3
 8010880:	370c      	adds	r7, #12
 8010882:	46bd      	mov	sp, r7
 8010884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010888:	4770      	bx	lr

0801088a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801088a:	b480      	push	{r7}
 801088c:	b083      	sub	sp, #12
 801088e:	af00      	add	r7, sp, #0
 8010890:	6078      	str	r0, [r7, #4]
 8010892:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801089a:	605a      	str	r2, [r3, #4]
  return 0;
 801089c:	2300      	movs	r3, #0
}
 801089e:	4618      	mov	r0, r3
 80108a0:	370c      	adds	r7, #12
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr

080108aa <_isatty>:

int _isatty(int file)
{
 80108aa:	b480      	push	{r7}
 80108ac:	b083      	sub	sp, #12
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80108b2:	2301      	movs	r3, #1
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	370c      	adds	r7, #12
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr

080108c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b085      	sub	sp, #20
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80108cc:	2300      	movs	r3, #0
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3714      	adds	r7, #20
 80108d2:	46bd      	mov	sp, r7
 80108d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d8:	4770      	bx	lr
	...

080108dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b086      	sub	sp, #24
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80108e4:	4a14      	ldr	r2, [pc, #80]	; (8010938 <_sbrk+0x5c>)
 80108e6:	4b15      	ldr	r3, [pc, #84]	; (801093c <_sbrk+0x60>)
 80108e8:	1ad3      	subs	r3, r2, r3
 80108ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80108f0:	4b13      	ldr	r3, [pc, #76]	; (8010940 <_sbrk+0x64>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d102      	bne.n	80108fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80108f8:	4b11      	ldr	r3, [pc, #68]	; (8010940 <_sbrk+0x64>)
 80108fa:	4a12      	ldr	r2, [pc, #72]	; (8010944 <_sbrk+0x68>)
 80108fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80108fe:	4b10      	ldr	r3, [pc, #64]	; (8010940 <_sbrk+0x64>)
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	4413      	add	r3, r2
 8010906:	693a      	ldr	r2, [r7, #16]
 8010908:	429a      	cmp	r2, r3
 801090a:	d207      	bcs.n	801091c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801090c:	f003 fcaa 	bl	8014264 <__errno>
 8010910:	4603      	mov	r3, r0
 8010912:	220c      	movs	r2, #12
 8010914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8010916:	f04f 33ff 	mov.w	r3, #4294967295
 801091a:	e009      	b.n	8010930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801091c:	4b08      	ldr	r3, [pc, #32]	; (8010940 <_sbrk+0x64>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010922:	4b07      	ldr	r3, [pc, #28]	; (8010940 <_sbrk+0x64>)
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	4413      	add	r3, r2
 801092a:	4a05      	ldr	r2, [pc, #20]	; (8010940 <_sbrk+0x64>)
 801092c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801092e:	68fb      	ldr	r3, [r7, #12]
}
 8010930:	4618      	mov	r0, r3
 8010932:	3718      	adds	r7, #24
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	20020000 	.word	0x20020000
 801093c:	00000400 	.word	0x00000400
 8010940:	200004d8 	.word	0x200004d8
 8010944:	20000520 	.word	0x20000520

08010948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010948:	b480      	push	{r7}
 801094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801094c:	4b06      	ldr	r3, [pc, #24]	; (8010968 <SystemInit+0x20>)
 801094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010952:	4a05      	ldr	r2, [pc, #20]	; (8010968 <SystemInit+0x20>)
 8010954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801095c:	bf00      	nop
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr
 8010966:	bf00      	nop
 8010968:	e000ed00 	.word	0xe000ed00

0801096c <setTimAndStart>:
extern struct ChangParamDevice ParamDevice;
extern TIM_HandleTypeDef htim5;
//----------------------- переменные из этого файла ----------------------------------//
uint32_t multiplicationFactor[3] = { 100, 100000, 100000000 };   //множитель
//------------------------------ функции ---------------------------------------------//
void setTimAndStart(void) {
 801096c:	b480      	push	{r7}
 801096e:	af00      	add	r7, sp, #0
	ParamDevice.changeCount = ParamDevice.count * ((ParamDevice.unitCount * 1000) + 1);       // копируем из статических счетчиков в динамические и умножаем чтоб получить 1к
 8010970:	4b54      	ldr	r3, [pc, #336]	; (8010ac4 <setTimAndStart+0x158>)
 8010972:	689b      	ldr	r3, [r3, #8]
 8010974:	4619      	mov	r1, r3
 8010976:	4b53      	ldr	r3, [pc, #332]	; (8010ac4 <setTimAndStart+0x158>)
 8010978:	699b      	ldr	r3, [r3, #24]
 801097a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801097e:	fb02 f303 	mul.w	r3, r2, r3
 8010982:	3301      	adds	r3, #1
 8010984:	fb01 f303 	mul.w	r3, r1, r3
 8010988:	4a4e      	ldr	r2, [pc, #312]	; (8010ac4 <setTimAndStart+0x158>)
 801098a:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(TIM5->CCMR1, TIM_CCMR1_OC2M);                 // очистим регистр
 801098c:	4b4e      	ldr	r3, [pc, #312]	; (8010ac8 <setTimAndStart+0x15c>)
 801098e:	699b      	ldr	r3, [r3, #24]
 8010990:	4a4d      	ldr	r2, [pc, #308]	; (8010ac8 <setTimAndStart+0x15c>)
 8010992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010996:	6193      	str	r3, [r2, #24]
	CLEAR_BIT(TIM5->CCMR2, TIM_CCMR2_OC3M);                 // очистим регистр
 8010998:	4b4b      	ldr	r3, [pc, #300]	; (8010ac8 <setTimAndStart+0x15c>)
 801099a:	69db      	ldr	r3, [r3, #28]
 801099c:	4a4a      	ldr	r2, [pc, #296]	; (8010ac8 <setTimAndStart+0x15c>)
 801099e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109a2:	61d3      	str	r3, [r2, #28]
	CLEAR_BIT(TIM5->SR, TIM_SR_CC2IF|TIM_SR_CC3IF);         // очищаем флаг
 80109a4:	4b48      	ldr	r3, [pc, #288]	; (8010ac8 <setTimAndStart+0x15c>)
 80109a6:	691b      	ldr	r3, [r3, #16]
 80109a8:	4a47      	ldr	r2, [pc, #284]	; (8010ac8 <setTimAndStart+0x15c>)
 80109aa:	f023 030c 	bic.w	r3, r3, #12
 80109ae:	6113      	str	r3, [r2, #16]
	//__HAL_TIM_CLEAR_FLAG(&htim5, TIM_SR_UIF);             // очищаем флаг
	TIM5->ARR = (ParamDevice.impuls * multiplicationFactor[ParamDevice.unitImpuls]) + (ParamDevice.pause * multiplicationFactor[ParamDevice.unitPause]);
 80109b0:	4b44      	ldr	r3, [pc, #272]	; (8010ac4 <setTimAndStart+0x158>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4619      	mov	r1, r3
 80109b6:	4b43      	ldr	r3, [pc, #268]	; (8010ac4 <setTimAndStart+0x158>)
 80109b8:	691b      	ldr	r3, [r3, #16]
 80109ba:	4a44      	ldr	r2, [pc, #272]	; (8010acc <setTimAndStart+0x160>)
 80109bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109c0:	fb03 f201 	mul.w	r2, r3, r1
 80109c4:	4b3f      	ldr	r3, [pc, #252]	; (8010ac4 <setTimAndStart+0x158>)
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	4618      	mov	r0, r3
 80109ca:	4b3e      	ldr	r3, [pc, #248]	; (8010ac4 <setTimAndStart+0x158>)
 80109cc:	695b      	ldr	r3, [r3, #20]
 80109ce:	493f      	ldr	r1, [pc, #252]	; (8010acc <setTimAndStart+0x160>)
 80109d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80109d4:	fb00 f303 	mul.w	r3, r0, r3
 80109d8:	493b      	ldr	r1, [pc, #236]	; (8010ac8 <setTimAndStart+0x15c>)
 80109da:	4413      	add	r3, r2
 80109dc:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM5->CCR2 = (ParamDevice.impuls * multiplicationFactor[ParamDevice.unitImpuls]);
 80109de:	4b39      	ldr	r3, [pc, #228]	; (8010ac4 <setTimAndStart+0x158>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4619      	mov	r1, r3
 80109e4:	4b37      	ldr	r3, [pc, #220]	; (8010ac4 <setTimAndStart+0x158>)
 80109e6:	691b      	ldr	r3, [r3, #16]
 80109e8:	4a38      	ldr	r2, [pc, #224]	; (8010acc <setTimAndStart+0x160>)
 80109ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109ee:	4a36      	ldr	r2, [pc, #216]	; (8010ac8 <setTimAndStart+0x15c>)
 80109f0:	fb01 f303 	mul.w	r3, r1, r3
 80109f4:	6393      	str	r3, [r2, #56]	; 0x38
	TIM5->CCR3 = (ParamDevice.impuls * multiplicationFactor[ParamDevice.unitImpuls]);
 80109f6:	4b33      	ldr	r3, [pc, #204]	; (8010ac4 <setTimAndStart+0x158>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	4619      	mov	r1, r3
 80109fc:	4b31      	ldr	r3, [pc, #196]	; (8010ac4 <setTimAndStart+0x158>)
 80109fe:	691b      	ldr	r3, [r3, #16]
 8010a00:	4a32      	ldr	r2, [pc, #200]	; (8010acc <setTimAndStart+0x160>)
 8010a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a06:	4a30      	ldr	r2, [pc, #192]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a08:	fb01 f303 	mul.w	r3, r1, r3
 8010a0c:	63d3      	str	r3, [r2, #60]	; 0x3c
	// пересчитываем время паузы и время импульса исходя из того что частота 100МГц
	//TIM5->CNT = TIM5->ARR;
	TIM5->CNT = 0;
 8010a0e:	4b2e      	ldr	r3, [pc, #184]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a10:	2200      	movs	r2, #0
 8010a12:	625a      	str	r2, [r3, #36]	; 0x24
	//HAL_TIM_GenerateEvent(&htim5, TIM_EVENTSOURCE_UPDATE);
	SET_BIT(TIM5->EGR, TIM_EGR_UG);  // применим данные
 8010a14:	4b2c      	ldr	r3, [pc, #176]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a16:	695b      	ldr	r3, [r3, #20]
 8010a18:	4a2b      	ldr	r2, [pc, #172]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a1a:	f043 0301 	orr.w	r3, r3, #1
 8010a1e:	6153      	str	r3, [r2, #20]
	if (!ParamDevice.changeCount) {  // тут если ноль то ставим бесконечный импульс
 8010a20:	4b28      	ldr	r3, [pc, #160]	; (8010ac4 <setTimAndStart+0x158>)
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d102      	bne.n	8010a2e <setTimAndStart+0xc2>
		ParamDevice.flagInfinity = true;
 8010a28:	4b26      	ldr	r3, [pc, #152]	; (8010ac4 <setTimAndStart+0x158>)
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	771a      	strb	r2, [r3, #28]
	}
	if (ParamDevice.PNPTranzistor && !ParamDevice.NPNTranzistor) {            // смотрим какой транзистор включен и какой канал запускать
 8010a2e:	4b25      	ldr	r3, [pc, #148]	; (8010ac4 <setTimAndStart+0x158>)
 8010a30:	7f9b      	ldrb	r3, [r3, #30]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d013      	beq.n	8010a5e <setTimAndStart+0xf2>
 8010a36:	4b23      	ldr	r3, [pc, #140]	; (8010ac4 <setTimAndStart+0x158>)
 8010a38:	7f5b      	ldrb	r3, [r3, #29]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d10f      	bne.n	8010a5e <setTimAndStart+0xf2>
		if (!ParamDevice.flagInfinity) SET_BIT(TIM5->DIER, TIM_DIER_CC3IE);   // если не бесконечное количество запустим прерывания
 8010a3e:	4b21      	ldr	r3, [pc, #132]	; (8010ac4 <setTimAndStart+0x158>)
 8010a40:	7f1b      	ldrb	r3, [r3, #28]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d105      	bne.n	8010a52 <setTimAndStart+0xe6>
 8010a46:	4b20      	ldr	r3, [pc, #128]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a48:	68db      	ldr	r3, [r3, #12]
 8010a4a:	4a1f      	ldr	r2, [pc, #124]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a4c:	f043 0308 	orr.w	r3, r3, #8
 8010a50:	60d3      	str	r3, [r2, #12]
		SET_BIT(TIM5->CCMR1, 0b110 << TIM_CCMR1_OC2M_Pos);                    // PWM mode 1
 8010a52:	4b1d      	ldr	r3, [pc, #116]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a54:	699b      	ldr	r3, [r3, #24]
 8010a56:	4a1c      	ldr	r2, [pc, #112]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a58:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8010a5c:	6193      	str	r3, [r2, #24]
		//HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_3);
	}
	if (ParamDevice.NPNTranzistor) {
 8010a5e:	4b19      	ldr	r3, [pc, #100]	; (8010ac4 <setTimAndStart+0x158>)
 8010a60:	7f5b      	ldrb	r3, [r3, #29]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00f      	beq.n	8010a86 <setTimAndStart+0x11a>
		if (!ParamDevice.flagInfinity) SET_BIT(TIM5->DIER, TIM_DIER_CC2IE);   // если не бесконечное количество запустим прерывания
 8010a66:	4b17      	ldr	r3, [pc, #92]	; (8010ac4 <setTimAndStart+0x158>)
 8010a68:	7f1b      	ldrb	r3, [r3, #28]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d105      	bne.n	8010a7a <setTimAndStart+0x10e>
 8010a6e:	4b16      	ldr	r3, [pc, #88]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a70:	68db      	ldr	r3, [r3, #12]
 8010a72:	4a15      	ldr	r2, [pc, #84]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a74:	f043 0304 	orr.w	r3, r3, #4
 8010a78:	60d3      	str	r3, [r2, #12]
		SET_BIT(TIM5->CCMR2, 0b110 << TIM_CCMR2_OC3M_Pos);                    // PWM mode 1
 8010a7a:	4b13      	ldr	r3, [pc, #76]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a7c:	69db      	ldr	r3, [r3, #28]
 8010a7e:	4a12      	ldr	r2, [pc, #72]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010a84:	61d3      	str	r3, [r2, #28]
		//HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_2);
	}
	if (ParamDevice.PNPTranzistor && ParamDevice.NPNTranzistor) {
 8010a86:	4b0f      	ldr	r3, [pc, #60]	; (8010ac4 <setTimAndStart+0x158>)
 8010a88:	7f9b      	ldrb	r3, [r3, #30]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d00f      	beq.n	8010aae <setTimAndStart+0x142>
 8010a8e:	4b0d      	ldr	r3, [pc, #52]	; (8010ac4 <setTimAndStart+0x158>)
 8010a90:	7f5b      	ldrb	r3, [r3, #29]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d00b      	beq.n	8010aae <setTimAndStart+0x142>
		SET_BIT(TIM5->CCMR1, 0b110 << TIM_CCMR1_OC2M_Pos);                    // PWM mode 1
 8010a96:	4b0c      	ldr	r3, [pc, #48]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a98:	699b      	ldr	r3, [r3, #24]
 8010a9a:	4a0b      	ldr	r2, [pc, #44]	; (8010ac8 <setTimAndStart+0x15c>)
 8010a9c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8010aa0:	6193      	str	r3, [r2, #24]
		SET_BIT(TIM5->CCMR2, 0b110 << TIM_CCMR2_OC3M_Pos);                    // PWM mode 1
 8010aa2:	4b09      	ldr	r3, [pc, #36]	; (8010ac8 <setTimAndStart+0x15c>)
 8010aa4:	69db      	ldr	r3, [r3, #28]
 8010aa6:	4a08      	ldr	r2, [pc, #32]	; (8010ac8 <setTimAndStart+0x15c>)
 8010aa8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010aac:	61d3      	str	r3, [r2, #28]
		//HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
	}
	// тут сложная логика, задача включить только одно прерывание от сравнения. и мы проверяем какой транзистор активный и от этого включаем прерывание
	SET_BIT(TIM5->CR1, TIM_CR1_CEN);  // запустим таймер
 8010aae:	4b06      	ldr	r3, [pc, #24]	; (8010ac8 <setTimAndStart+0x15c>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4a05      	ldr	r2, [pc, #20]	; (8010ac8 <setTimAndStart+0x15c>)
 8010ab4:	f043 0301 	orr.w	r3, r3, #1
 8010ab8:	6013      	str	r3, [r2, #0]
	//HAL_TIM_Base_Start(&htim5); гавно хал
}
 8010aba:	bf00      	nop
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr
 8010ac4:	20000040 	.word	0x20000040
 8010ac8:	40000c00 	.word	0x40000c00
 8010acc:	20000034 	.word	0x20000034

08010ad0 <timerOff>:

void timerOff(void) {                                       // для вызова из программы
 8010ad0:	b480      	push	{r7}
 8010ad2:	af00      	add	r7, sp, #0
	CLEAR_BIT(TIM5->CCMR1, TIM_CCMR1_OC2M);                 // очистим регистр
 8010ad4:	4b15      	ldr	r3, [pc, #84]	; (8010b2c <timerOff+0x5c>)
 8010ad6:	699b      	ldr	r3, [r3, #24]
 8010ad8:	4a14      	ldr	r2, [pc, #80]	; (8010b2c <timerOff+0x5c>)
 8010ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ade:	6193      	str	r3, [r2, #24]
	CLEAR_BIT(TIM5->CCMR2, TIM_CCMR2_OC3M);                 // очистим регистр
 8010ae0:	4b12      	ldr	r3, [pc, #72]	; (8010b2c <timerOff+0x5c>)
 8010ae2:	69db      	ldr	r3, [r3, #28]
 8010ae4:	4a11      	ldr	r2, [pc, #68]	; (8010b2c <timerOff+0x5c>)
 8010ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010aea:	61d3      	str	r3, [r2, #28]
	SET_BIT(TIM5->CCMR1, 0b100 << TIM_CCMR1_OC2M_Pos);      // ноль на выходе Force inactive level
 8010aec:	4b0f      	ldr	r3, [pc, #60]	; (8010b2c <timerOff+0x5c>)
 8010aee:	699b      	ldr	r3, [r3, #24]
 8010af0:	4a0e      	ldr	r2, [pc, #56]	; (8010b2c <timerOff+0x5c>)
 8010af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010af6:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM5->CCMR2, 0b100 << TIM_CCMR2_OC3M_Pos);      // ноль на выходе Force inactive level
 8010af8:	4b0c      	ldr	r3, [pc, #48]	; (8010b2c <timerOff+0x5c>)
 8010afa:	69db      	ldr	r3, [r3, #28]
 8010afc:	4a0b      	ldr	r2, [pc, #44]	; (8010b2c <timerOff+0x5c>)
 8010afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b02:	61d3      	str	r3, [r2, #28]
	CLEAR_BIT(TIM5->DIER, TIM_DIER_CC2IE|TIM_DIER_CC3IE);
 8010b04:	4b09      	ldr	r3, [pc, #36]	; (8010b2c <timerOff+0x5c>)
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	4a08      	ldr	r2, [pc, #32]	; (8010b2c <timerOff+0x5c>)
 8010b0a:	f023 030c 	bic.w	r3, r3, #12
 8010b0e:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(TIM5->CR1, TIM_CR1_CEN);
 8010b10:	4b06      	ldr	r3, [pc, #24]	; (8010b2c <timerOff+0x5c>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4a05      	ldr	r2, [pc, #20]	; (8010b2c <timerOff+0x5c>)
 8010b16:	f023 0301 	bic.w	r3, r3, #1
 8010b1a:	6013      	str	r3, [r2, #0]
	ParamDevice.flagInfinity = false;
 8010b1c:	4b04      	ldr	r3, [pc, #16]	; (8010b30 <timerOff+0x60>)
 8010b1e:	2200      	movs	r2, #0
 8010b20:	771a      	strb	r2, [r3, #28]
}
 8010b22:	bf00      	nop
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr
 8010b2c:	40000c00 	.word	0x40000c00
 8010b30:	20000040 	.word	0x20000040

08010b34 <doWork>:
uint32_t timToCurrent = 0;
uint32_t timToEndOperation = 0;
uint32_t* memADR = (uint32_t*)ADR_DATA_MIN_X;
//------------------------------ функции ---------------------------------------------//

void doWork (void){
 8010b34:	b580      	push	{r7, lr}
 8010b36:	af00      	add	r7, sp, #0
	startDisplay ();                                        // старт дисплея
 8010b38:	f7fe f87a 	bl	800ec30 <startDisplay>
	calibration();                                          // проверим нужна калибровка или нет
 8010b3c:	f000 f936 	bl	8010dac <calibration>
	ILI9341_ToucInit();                                     // инициализация после калибровки
 8010b40:	f7fd fbc4 	bl	800e2cc <ILI9341_ToucInit>
	readEEPROM();
 8010b44:	f000 f998 	bl	8010e78 <readEEPROM>
	screenSaver();                                          // заставка
 8010b48:	f7fd fed4 	bl	800e8f4 <screenSaver>
	mainDisplayPrint();                                     // первоначальный принт
 8010b4c:	f7fe fb02 	bl	800f154 <mainDisplayPrint>
	zeroCurrent = adcBuf [0];                               // получим точку нуля АЦП
 8010b50:	4b02      	ldr	r3, [pc, #8]	; (8010b5c <doWork+0x28>)
 8010b52:	881a      	ldrh	r2, [r3, #0]
 8010b54:	4b02      	ldr	r3, [pc, #8]	; (8010b60 <doWork+0x2c>)
 8010b56:	801a      	strh	r2, [r3, #0]
}
 8010b58:	bf00      	nop
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	20000450 	.word	0x20000450
 8010b60:	200004dc 	.word	0x200004dc

08010b64 <Work>:

void Work (void){                                                                       // меин
 8010b64:	b580      	push	{r7, lr}
 8010b66:	af00      	add	r7, sp, #0
	checkButtonPress();                                                                 // проверим нажатие кнопок
 8010b68:	f7fe ff5c 	bl	800fa24 <checkButtonPress>
	if (ParamDevice.power && !READ_FLAG(WORKING, globalFlag)){                          // проверим включен выход или нет
 8010b6c:	4b37      	ldr	r3, [pc, #220]	; (8010c4c <Work+0xe8>)
 8010b6e:	7fdb      	ldrb	r3, [r3, #31]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d00f      	beq.n	8010b94 <Work+0x30>
 8010b74:	4b36      	ldr	r3, [pc, #216]	; (8010c50 <Work+0xec>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d109      	bne.n	8010b94 <Work+0x30>
		saveEEPROM ();
 8010b80:	f000 f9e8 	bl	8010f54 <saveEEPROM>
		SET_FLAG(WORKING, globalFlag);                                                  // если включен запретим повторный вход
 8010b84:	4b32      	ldr	r3, [pc, #200]	; (8010c50 <Work+0xec>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b8c:	4a30      	ldr	r2, [pc, #192]	; (8010c50 <Work+0xec>)
 8010b8e:	6013      	str	r3, [r2, #0]
		setTimAndStart ();                                                              // запустим выход
 8010b90:	f7ff feec 	bl	801096c <setTimAndStart>
	}
	if (READ_FLAG(END_OPERATION, globalFlag) && READ_FLAG(WORKING, globalFlag)){        // если поднялся флаг окончания
 8010b94:	4b2e      	ldr	r3, [pc, #184]	; (8010c50 <Work+0xec>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d015      	beq.n	8010bcc <Work+0x68>
 8010ba0:	4b2b      	ldr	r3, [pc, #172]	; (8010c50 <Work+0xec>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00f      	beq.n	8010bcc <Work+0x68>
		RESET_FLAG(END_OPERATION, globalFlag);                                          // сбросим конец операции
 8010bac:	4b28      	ldr	r3, [pc, #160]	; (8010c50 <Work+0xec>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010bb4:	4a26      	ldr	r2, [pc, #152]	; (8010c50 <Work+0xec>)
 8010bb6:	6013      	str	r3, [r2, #0]
		endOperationWindow (true);                                                      // покажем окно комплит
 8010bb8:	2001      	movs	r0, #1
 8010bba:	f7fe fbc1 	bl	800f340 <endOperationWindow>
		timToEndOperation = 1000;                                                       // взведем таймер показа окна
 8010bbe:	4b25      	ldr	r3, [pc, #148]	; (8010c54 <Work+0xf0>)
 8010bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010bc4:	601a      	str	r2, [r3, #0]
		buzzerSet(100);
 8010bc6:	2064      	movs	r0, #100	; 0x64
 8010bc8:	f7ff fb64 	bl	8010294 <buzzerSet>
	}
	if (READ_FLAG(WORKING, globalFlag) && timToEndOperation == 1){                      // когда отсчитали время
 8010bcc:	4b20      	ldr	r3, [pc, #128]	; (8010c50 <Work+0xec>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d014      	beq.n	8010c02 <Work+0x9e>
 8010bd8:	4b1e      	ldr	r3, [pc, #120]	; (8010c54 <Work+0xf0>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	2b01      	cmp	r3, #1
 8010bde:	d110      	bne.n	8010c02 <Work+0x9e>
		timToEndOperation = 0;                                                          // сбросим полностью
 8010be0:	4b1c      	ldr	r3, [pc, #112]	; (8010c54 <Work+0xf0>)
 8010be2:	2200      	movs	r2, #0
 8010be4:	601a      	str	r2, [r3, #0]
		RESET_FLAG(WORKING, globalFlag);                                                // выключим флаг работы
 8010be6:	4b1a      	ldr	r3, [pc, #104]	; (8010c50 <Work+0xec>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010bee:	4a18      	ldr	r2, [pc, #96]	; (8010c50 <Work+0xec>)
 8010bf0:	6013      	str	r3, [r2, #0]
		externalPowerOff ();                                                            // погасим клавишу повер
 8010bf2:	f7fe fc7f 	bl	800f4f4 <externalPowerOff>
		ParamDevice.power = false;                                                      // и снимем флаг работы
 8010bf6:	4b15      	ldr	r3, [pc, #84]	; (8010c4c <Work+0xe8>)
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	77da      	strb	r2, [r3, #31]
		endOperationWindow (false);                                                     // уберем показ комплит
 8010bfc:	2000      	movs	r0, #0
 8010bfe:	f7fe fb9f 	bl	800f340 <endOperationWindow>
	}
	if (!ParamDevice.power && READ_FLAG(WORKING, globalFlag) ){                         // если мы нажали кнопку повер при выполнении
 8010c02:	4b12      	ldr	r3, [pc, #72]	; (8010c4c <Work+0xe8>)
 8010c04:	7fdb      	ldrb	r3, [r3, #31]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d110      	bne.n	8010c2c <Work+0xc8>
 8010c0a:	4b11      	ldr	r3, [pc, #68]	; (8010c50 <Work+0xec>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d00a      	beq.n	8010c2c <Work+0xc8>
		timerOff ();                                                                    // остановить
 8010c16:	f7ff ff5b 	bl	8010ad0 <timerOff>
		RESET_FLAG(WORKING, globalFlag);                                                // сбросить
 8010c1a:	4b0d      	ldr	r3, [pc, #52]	; (8010c50 <Work+0xec>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c22:	4a0b      	ldr	r2, [pc, #44]	; (8010c50 <Work+0xec>)
 8010c24:	6013      	str	r3, [r2, #0]
		printCount (1);                                                                 // перерисовать количество повторений
 8010c26:	2001      	movs	r0, #1
 8010c28:	f7fe f972 	bl	800ef10 <printCount>
	}
	filtrADC ();
 8010c2c:	f000 f814 	bl	8010c58 <filtrADC>
	if (READ_FLAG(WORKING, globalFlag)) {
 8010c30:	4b07      	ldr	r3, [pc, #28]	; (8010c50 <Work+0xec>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d004      	beq.n	8010c46 <Work+0xe2>
		printReversCount (ParamDevice.changeCount);
 8010c3c:	4b03      	ldr	r3, [pc, #12]	; (8010c4c <Work+0xe8>)
 8010c3e:	68db      	ldr	r3, [r3, #12]
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7fe f9e1 	bl	800f008 <printReversCount>
	}
}
 8010c46:	bf00      	nop
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	20000040 	.word	0x20000040
 8010c50:	200004d0 	.word	0x200004d0
 8010c54:	200004e8 	.word	0x200004e8

08010c58 <filtrADC>:

void filtrADC (void) {
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
	int32_t filtrAdc = 0;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	60fb      	str	r3, [r7, #12]
	float current = 0;
 8010c62:	f04f 0300 	mov.w	r3, #0
 8010c66:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < FILTRADC; i ++) {
 8010c68:	2300      	movs	r3, #0
 8010c6a:	60bb      	str	r3, [r7, #8]
 8010c6c:	e00a      	b.n	8010c84 <filtrADC+0x2c>
		filtrAdc += adcBuf [i];
 8010c6e:	4a48      	ldr	r2, [pc, #288]	; (8010d90 <filtrADC+0x138>)
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c76:	461a      	mov	r2, r3
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	4413      	add	r3, r2
 8010c7c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTRADC; i ++) {
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	3301      	adds	r3, #1
 8010c82:	60bb      	str	r3, [r7, #8]
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	2b3f      	cmp	r3, #63	; 0x3f
 8010c88:	ddf1      	ble.n	8010c6e <filtrADC+0x16>
	}
	filtrAdc = filtrAdc / FILTRADC;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	da00      	bge.n	8010c92 <filtrADC+0x3a>
 8010c90:	333f      	adds	r3, #63	; 0x3f
 8010c92:	119b      	asrs	r3, r3, #6
 8010c94:	60fb      	str	r3, [r7, #12]
	if ((filtrAdc - zeroCurrent) <= 0) filtrAdc = 0;
 8010c96:	4b3f      	ldr	r3, [pc, #252]	; (8010d94 <filtrADC+0x13c>)
 8010c98:	881b      	ldrh	r3, [r3, #0]
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	1a9b      	subs	r3, r3, r2
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	dc02      	bgt.n	8010caa <filtrADC+0x52>
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	60fb      	str	r3, [r7, #12]
 8010ca8:	e005      	b.n	8010cb6 <filtrADC+0x5e>
	else filtrAdc = filtrAdc - zeroCurrent;
 8010caa:	4b3a      	ldr	r3, [pc, #232]	; (8010d94 <filtrADC+0x13c>)
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	461a      	mov	r2, r3
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	1a9b      	subs	r3, r3, r2
 8010cb4:	60fb      	str	r3, [r7, #12]
	current = (((float)filtrAdc * 0.0008)*1.52)*11 ;      // 1.52 k , 0.0008 LSB ADC, 1 вольт = 10А +-
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	ee07 3a90 	vmov	s15, r3
 8010cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010cc0:	ee17 0a90 	vmov	r0, s15
 8010cc4:	f7fb fb78 	bl	800c3b8 <__aeabi_f2d>
 8010cc8:	a32d      	add	r3, pc, #180	; (adr r3, 8010d80 <filtrADC+0x128>)
 8010cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cce:	f7fb fbcb 	bl	800c468 <__aeabi_dmul>
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	460b      	mov	r3, r1
 8010cd6:	4610      	mov	r0, r2
 8010cd8:	4619      	mov	r1, r3
 8010cda:	a32b      	add	r3, pc, #172	; (adr r3, 8010d88 <filtrADC+0x130>)
 8010cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce0:	f7fb fbc2 	bl	800c468 <__aeabi_dmul>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	460b      	mov	r3, r1
 8010ce8:	4610      	mov	r0, r2
 8010cea:	4619      	mov	r1, r3
 8010cec:	f04f 0200 	mov.w	r2, #0
 8010cf0:	4b29      	ldr	r3, [pc, #164]	; (8010d98 <filtrADC+0x140>)
 8010cf2:	f7fb fbb9 	bl	800c468 <__aeabi_dmul>
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	4610      	mov	r0, r2
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	f7fb fe8b 	bl	800ca18 <__aeabi_d2f>
 8010d02:	4603      	mov	r3, r0
 8010d04:	607b      	str	r3, [r7, #4]
	if (!timToCurrent){
 8010d06:	4b25      	ldr	r3, [pc, #148]	; (8010d9c <filtrADC+0x144>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d107      	bne.n	8010d1e <filtrADC+0xc6>
		timToCurrent = 500;
 8010d0e:	4b23      	ldr	r3, [pc, #140]	; (8010d9c <filtrADC+0x144>)
 8010d10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010d14:	601a      	str	r2, [r3, #0]
		printCurrent (current);
 8010d16:	ed97 0a01 	vldr	s0, [r7, #4]
 8010d1a:	f7fe f845 	bl	800eda8 <printCurrent>
	}
	if (current > MAX_CURRENT) {                                                        // если перегруз по току
 8010d1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8010d22:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8010d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d2e:	dd0b      	ble.n	8010d48 <filtrADC+0xf0>
		timerOff ();                                                                    // остановим таймер
 8010d30:	f7ff fece 	bl	8010ad0 <timerOff>
		overCurrent (true);                                                             // покажем табличку
 8010d34:	2001      	movs	r0, #1
 8010d36:	f7fe fb45 	bl	800f3c4 <overCurrent>
		timToOvercurrent = 1000;
 8010d3a:	4b19      	ldr	r3, [pc, #100]	; (8010da0 <filtrADC+0x148>)
 8010d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d40:	601a      	str	r2, [r3, #0]
		buzzerSet(100);                                                                 // пик
 8010d42:	2064      	movs	r0, #100	; 0x64
 8010d44:	f7ff faa6 	bl	8010294 <buzzerSet>
	}
	if (timToOvercurrent == 1) {
 8010d48:	4b15      	ldr	r3, [pc, #84]	; (8010da0 <filtrADC+0x148>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d110      	bne.n	8010d72 <filtrADC+0x11a>
		timToOvercurrent = 0;
 8010d50:	4b13      	ldr	r3, [pc, #76]	; (8010da0 <filtrADC+0x148>)
 8010d52:	2200      	movs	r2, #0
 8010d54:	601a      	str	r2, [r3, #0]
		overCurrent (false);
 8010d56:	2000      	movs	r0, #0
 8010d58:	f7fe fb34 	bl	800f3c4 <overCurrent>
		RESET_FLAG(WORKING, globalFlag);                                                // выключим флаг работы
 8010d5c:	4b11      	ldr	r3, [pc, #68]	; (8010da4 <filtrADC+0x14c>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d64:	4a0f      	ldr	r2, [pc, #60]	; (8010da4 <filtrADC+0x14c>)
 8010d66:	6013      	str	r3, [r2, #0]
		externalPowerOff ();                                                            // погасим клавишу повер
 8010d68:	f7fe fbc4 	bl	800f4f4 <externalPowerOff>
		ParamDevice.power = false;                                                      // и снимем флаг работы
 8010d6c:	4b0e      	ldr	r3, [pc, #56]	; (8010da8 <filtrADC+0x150>)
 8010d6e:	2200      	movs	r2, #0
 8010d70:	77da      	strb	r2, [r3, #31]
	}
}
 8010d72:	bf00      	nop
 8010d74:	3710      	adds	r7, #16
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
 8010d7a:	bf00      	nop
 8010d7c:	f3af 8000 	nop.w
 8010d80:	eb1c432d 	.word	0xeb1c432d
 8010d84:	3f4a36e2 	.word	0x3f4a36e2
 8010d88:	851eb852 	.word	0x851eb852
 8010d8c:	3ff851eb 	.word	0x3ff851eb
 8010d90:	20000450 	.word	0x20000450
 8010d94:	200004dc 	.word	0x200004dc
 8010d98:	40260000 	.word	0x40260000
 8010d9c:	200004e4 	.word	0x200004e4
 8010da0:	200004e0 	.word	0x200004e0
 8010da4:	200004d0 	.word	0x200004d0
 8010da8:	20000040 	.word	0x20000040

08010dac <calibration>:

void calibration (void){                     // калибровка
 8010dac:	b580      	push	{r7, lr}
 8010dae:	af00      	add	r7, sp, #0
	if (*memADR == 0xFFFFFFFF) {             // если в ячейке калибровки начальное значение значит нужно калибровать
 8010db0:	4b30      	ldr	r3, [pc, #192]	; (8010e74 <calibration+0xc8>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dba:	d159      	bne.n	8010e70 <calibration+0xc4>
		reset:                               // при неудаче вернуться в начало
 8010dbc:	bf00      	nop
		GUICalibration (LEFTUP);
 8010dbe:	2000      	movs	r0, #0
 8010dc0:	f7fd fdec 	bl	800e99c <GUICalibration>
		setOK (false);
 8010dc4:	2000      	movs	r0, #0
 8010dc6:	f7fd ff03 	bl	800ebd0 <setOK>
		calibTouch(LEFTUP);
 8010dca:	2000      	movs	r0, #0
 8010dcc:	f7fd fc34 	bl	800e638 <calibTouch>
		setOK (true);
 8010dd0:	2001      	movs	r0, #1
 8010dd2:	f7fd fefd 	bl	800ebd0 <setOK>
		HAL_Delay(1000);
 8010dd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010dda:	f000 f9f1 	bl	80111c0 <HAL_Delay>

		GUICalibration (RIGHTUP);
 8010dde:	2001      	movs	r0, #1
 8010de0:	f7fd fddc 	bl	800e99c <GUICalibration>
		setOK (false);
 8010de4:	2000      	movs	r0, #0
 8010de6:	f7fd fef3 	bl	800ebd0 <setOK>
		calibTouch(RIGHTUP);
 8010dea:	2001      	movs	r0, #1
 8010dec:	f7fd fc24 	bl	800e638 <calibTouch>
		setOK (true);
 8010df0:	2001      	movs	r0, #1
 8010df2:	f7fd feed 	bl	800ebd0 <setOK>
		HAL_Delay(1000);
 8010df6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010dfa:	f000 f9e1 	bl	80111c0 <HAL_Delay>

		GUICalibration (LEFTDOWN);
 8010dfe:	2002      	movs	r0, #2
 8010e00:	f7fd fdcc 	bl	800e99c <GUICalibration>
		setOK (false);
 8010e04:	2000      	movs	r0, #0
 8010e06:	f7fd fee3 	bl	800ebd0 <setOK>
		calibTouch(LEFTDOWN);
 8010e0a:	2002      	movs	r0, #2
 8010e0c:	f7fd fc14 	bl	800e638 <calibTouch>
		setOK (true);
 8010e10:	2001      	movs	r0, #1
 8010e12:	f7fd fedd 	bl	800ebd0 <setOK>
		HAL_Delay(1000);
 8010e16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010e1a:	f000 f9d1 	bl	80111c0 <HAL_Delay>

		GUICalibration (RIGHTDOWN);
 8010e1e:	2003      	movs	r0, #3
 8010e20:	f7fd fdbc 	bl	800e99c <GUICalibration>
		setOK (false);
 8010e24:	2000      	movs	r0, #0
 8010e26:	f7fd fed3 	bl	800ebd0 <setOK>
		calibTouch(RIGHTDOWN);
 8010e2a:	2003      	movs	r0, #3
 8010e2c:	f7fd fc04 	bl	800e638 <calibTouch>
		setOK (true);
 8010e30:	2001      	movs	r0, #1
 8010e32:	f7fd fecd 	bl	800ebd0 <setOK>
		HAL_Delay(1000);
 8010e36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010e3a:	f000 f9c1 	bl	80111c0 <HAL_Delay>

		GUICalibration (CHECKCALIB);
 8010e3e:	2004      	movs	r0, #4
 8010e40:	f7fd fdac 	bl	800e99c <GUICalibration>
		if (calibTouch(CHECKCALIB)) {
 8010e44:	2004      	movs	r0, #4
 8010e46:	f7fd fbf7 	bl	800e638 <calibTouch>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d007      	beq.n	8010e60 <calibration+0xb4>
			GUICalibration(CALIBOK);
 8010e50:	2005      	movs	r0, #5
 8010e52:	f7fd fda3 	bl	800e99c <GUICalibration>
			HAL_Delay(1000);
 8010e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010e5a:	f000 f9b1 	bl	80111c0 <HAL_Delay>
			GUICalibration(ERRCALIB);
			HAL_Delay(1000);
			goto reset;
		}
	}
}
 8010e5e:	e007      	b.n	8010e70 <calibration+0xc4>
			GUICalibration(ERRCALIB);
 8010e60:	2006      	movs	r0, #6
 8010e62:	f7fd fd9b 	bl	800e99c <GUICalibration>
			HAL_Delay(1000);
 8010e66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010e6a:	f000 f9a9 	bl	80111c0 <HAL_Delay>
			goto reset;
 8010e6e:	e7a6      	b.n	8010dbe <calibration+0x12>
}
 8010e70:	bf00      	nop
 8010e72:	bd80      	pop	{r7, pc}
 8010e74:	20000060 	.word	0x20000060

08010e78 <readEEPROM>:

void readEEPROM (void) {
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
	uint32_t count = 0;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	607b      	str	r3, [r7, #4]
	uint32_t* pozAdr = (uint32_t*)ADR_START_MEM;
 8010e82:	4b32      	ldr	r3, [pc, #200]	; (8010f4c <readEEPROM+0xd4>)
 8010e84:	603b      	str	r3, [r7, #0]
	if (SAVE_EEPROM) {
		for (;count < MAX_RANGE; count ++) {
 8010e86:	e00a      	b.n	8010e9e <readEEPROM+0x26>
			if (*pozAdr == 0xFFFFFFFF) break;
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e90:	d00a      	beq.n	8010ea8 <readEEPROM+0x30>
			pozAdr += QUANTITY_SAVE;             //
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	3318      	adds	r3, #24
 8010e96:	603b      	str	r3, [r7, #0]
		for (;count < MAX_RANGE; count ++) {
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	607b      	str	r3, [r7, #4]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8010ea4:	d3f0      	bcc.n	8010e88 <readEEPROM+0x10>
 8010ea6:	e000      	b.n	8010eaa <readEEPROM+0x32>
			if (*pozAdr == 0xFFFFFFFF) break;
 8010ea8:	bf00      	nop
		}
		if (count == 0) {                        // если память чистая взять по умолчанию
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d112      	bne.n	8010ed6 <readEEPROM+0x5e>
			ParamDevice.impuls = 100;
 8010eb0:	4b27      	ldr	r3, [pc, #156]	; (8010f50 <readEEPROM+0xd8>)
 8010eb2:	2264      	movs	r2, #100	; 0x64
 8010eb4:	601a      	str	r2, [r3, #0]
			ParamDevice.pause = 100;
 8010eb6:	4b26      	ldr	r3, [pc, #152]	; (8010f50 <readEEPROM+0xd8>)
 8010eb8:	2264      	movs	r2, #100	; 0x64
 8010eba:	605a      	str	r2, [r3, #4]
			ParamDevice.count = 0;
 8010ebc:	4b24      	ldr	r3, [pc, #144]	; (8010f50 <readEEPROM+0xd8>)
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	609a      	str	r2, [r3, #8]
			ParamDevice.unitImpuls = 0;
 8010ec2:	4b23      	ldr	r3, [pc, #140]	; (8010f50 <readEEPROM+0xd8>)
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	611a      	str	r2, [r3, #16]
			ParamDevice.unitPause = 0;
 8010ec8:	4b21      	ldr	r3, [pc, #132]	; (8010f50 <readEEPROM+0xd8>)
 8010eca:	2200      	movs	r2, #0
 8010ecc:	615a      	str	r2, [r3, #20]
			ParamDevice.unitCount = 0;
 8010ece:	4b20      	ldr	r3, [pc, #128]	; (8010f50 <readEEPROM+0xd8>)
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	619a      	str	r2, [r3, #24]
			ParamDevice.unitPause = (int32_t) *pozAdr;
			pozAdr ++;
			ParamDevice.unitCount = (int32_t) *pozAdr;
		}
	}
}
 8010ed4:	e034      	b.n	8010f40 <readEEPROM+0xc8>
			pozAdr = (uint32_t*) ADR_START_MEM + ((count - 1) * QUANTITY_SAVE );
 8010ed6:	687a      	ldr	r2, [r7, #4]
 8010ed8:	4613      	mov	r3, r2
 8010eda:	005b      	lsls	r3, r3, #1
 8010edc:	4413      	add	r3, r2
 8010ede:	00db      	lsls	r3, r3, #3
 8010ee0:	3b18      	subs	r3, #24
 8010ee2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8010ee6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010eea:	603b      	str	r3, [r7, #0]
			ParamDevice.impuls = (int32_t) *pozAdr;
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	4b17      	ldr	r3, [pc, #92]	; (8010f50 <readEEPROM+0xd8>)
 8010ef4:	601a      	str	r2, [r3, #0]
			pozAdr ++;
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	3304      	adds	r3, #4
 8010efa:	603b      	str	r3, [r7, #0]
			ParamDevice.pause = (int32_t) *pozAdr;
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	461a      	mov	r2, r3
 8010f02:	4b13      	ldr	r3, [pc, #76]	; (8010f50 <readEEPROM+0xd8>)
 8010f04:	605a      	str	r2, [r3, #4]
			pozAdr ++;
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	3304      	adds	r3, #4
 8010f0a:	603b      	str	r3, [r7, #0]
			ParamDevice.count = (int32_t) *pozAdr;
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	461a      	mov	r2, r3
 8010f12:	4b0f      	ldr	r3, [pc, #60]	; (8010f50 <readEEPROM+0xd8>)
 8010f14:	609a      	str	r2, [r3, #8]
			pozAdr ++;
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	3304      	adds	r3, #4
 8010f1a:	603b      	str	r3, [r7, #0]
			ParamDevice.unitImpuls = (int32_t) *pozAdr;
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	4a0b      	ldr	r2, [pc, #44]	; (8010f50 <readEEPROM+0xd8>)
 8010f22:	6113      	str	r3, [r2, #16]
			pozAdr ++;
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	3304      	adds	r3, #4
 8010f28:	603b      	str	r3, [r7, #0]
			ParamDevice.unitPause = (int32_t) *pozAdr;
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	4a08      	ldr	r2, [pc, #32]	; (8010f50 <readEEPROM+0xd8>)
 8010f30:	6153      	str	r3, [r2, #20]
			pozAdr ++;
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	3304      	adds	r3, #4
 8010f36:	603b      	str	r3, [r7, #0]
			ParamDevice.unitCount = (int32_t) *pozAdr;
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	4a04      	ldr	r2, [pc, #16]	; (8010f50 <readEEPROM+0xd8>)
 8010f3e:	6193      	str	r3, [r2, #24]
}
 8010f40:	bf00      	nop
 8010f42:	370c      	adds	r7, #12
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr
 8010f4c:	08008000 	.word	0x08008000
 8010f50:	20000040 	.word	0x20000040

08010f54 <saveEEPROM>:

void saveEEPROM (void) {
 8010f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f58:	b08a      	sub	sp, #40	; 0x28
 8010f5a:	af00      	add	r7, sp, #0
	uint32_t count = 0;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t memSet = 0;
 8010f60:	2300      	movs	r3, #0
 8010f62:	61fb      	str	r3, [r7, #28]
	uint32_t* pozAdr = (uint32_t*)ADR_START_MEM;
 8010f64:	4b45      	ldr	r3, [pc, #276]	; (801107c <saveEEPROM+0x128>)
 8010f66:	623b      	str	r3, [r7, #32]
	if (SAVE_EEPROM) {
		for (;count < MAX_RANGE; count ++) {
 8010f68:	e00a      	b.n	8010f80 <saveEEPROM+0x2c>
			if (*pozAdr == 0xFFFFFFFF) break;
 8010f6a:	6a3b      	ldr	r3, [r7, #32]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f72:	d00a      	beq.n	8010f8a <saveEEPROM+0x36>
			pozAdr += QUANTITY_SAVE;             //
 8010f74:	6a3b      	ldr	r3, [r7, #32]
 8010f76:	3318      	adds	r3, #24
 8010f78:	623b      	str	r3, [r7, #32]
		for (;count < MAX_RANGE; count ++) {
 8010f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8010f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f82:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8010f86:	d3f0      	bcc.n	8010f6a <saveEEPROM+0x16>
 8010f88:	e000      	b.n	8010f8c <saveEEPROM+0x38>
			if (*pozAdr == 0xFFFFFFFF) break;
 8010f8a:	bf00      	nop
		}
		if (count == MAX_RANGE) {
 8010f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8e:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8010f92:	d10c      	bne.n	8010fae <saveEEPROM+0x5a>
			HAL_FLASH_Unlock();
 8010f94:	f001 f886 	bl	80120a4 <HAL_FLASH_Unlock>
			__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8010f98:	4b39      	ldr	r3, [pc, #228]	; (8011080 <saveEEPROM+0x12c>)
 8010f9a:	22f3      	movs	r2, #243	; 0xf3
 8010f9c:	60da      	str	r2, [r3, #12]
			FLASH_Erase_Sector(FLASH_SECTOR_2, VOLTAGE_RANGE_3);
 8010f9e:	2102      	movs	r1, #2
 8010fa0:	2002      	movs	r0, #2
 8010fa2:	f001 f9f1 	bl	8012388 <FLASH_Erase_Sector>
			HAL_FLASH_Lock();
 8010fa6:	f001 f89f 	bl	80120e8 <HAL_FLASH_Lock>
			count = 0;
 8010faa:	2300      	movs	r3, #0
 8010fac:	627b      	str	r3, [r7, #36]	; 0x24
		}
		memSet = ADR_START_MEM + (count * (QUANTITY_SAVE * 4) );
 8010fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fb0:	4613      	mov	r3, r2
 8010fb2:	005b      	lsls	r3, r3, #1
 8010fb4:	4413      	add	r3, r2
 8010fb6:	00db      	lsls	r3, r3, #3
 8010fb8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8010fbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010fc0:	61fb      	str	r3, [r7, #28]
		HAL_FLASH_Unlock();
 8010fc2:	f001 f86f 	bl	80120a4 <HAL_FLASH_Unlock>
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8010fc6:	4b2e      	ldr	r3, [pc, #184]	; (8011080 <saveEEPROM+0x12c>)
 8010fc8:	22f3      	movs	r2, #243	; 0xf3
 8010fca:	60da      	str	r2, [r3, #12]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, memSet, ParamDevice.impuls);
 8010fcc:	4b2d      	ldr	r3, [pc, #180]	; (8011084 <saveEEPROM+0x130>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	17da      	asrs	r2, r3, #31
 8010fd2:	461c      	mov	r4, r3
 8010fd4:	4615      	mov	r5, r2
 8010fd6:	4622      	mov	r2, r4
 8010fd8:	462b      	mov	r3, r5
 8010fda:	69f9      	ldr	r1, [r7, #28]
 8010fdc:	2002      	movs	r0, #2
 8010fde:	f001 f80d 	bl	8011ffc <HAL_FLASH_Program>
		memSet += 4;
 8010fe2:	69fb      	ldr	r3, [r7, #28]
 8010fe4:	3304      	adds	r3, #4
 8010fe6:	61fb      	str	r3, [r7, #28]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, memSet, ParamDevice.pause);
 8010fe8:	4b26      	ldr	r3, [pc, #152]	; (8011084 <saveEEPROM+0x130>)
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	17da      	asrs	r2, r3, #31
 8010fee:	4698      	mov	r8, r3
 8010ff0:	4691      	mov	r9, r2
 8010ff2:	4642      	mov	r2, r8
 8010ff4:	464b      	mov	r3, r9
 8010ff6:	69f9      	ldr	r1, [r7, #28]
 8010ff8:	2002      	movs	r0, #2
 8010ffa:	f000 ffff 	bl	8011ffc <HAL_FLASH_Program>
		memSet += 4;
 8010ffe:	69fb      	ldr	r3, [r7, #28]
 8011000:	3304      	adds	r3, #4
 8011002:	61fb      	str	r3, [r7, #28]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, memSet, ParamDevice.count);
 8011004:	4b1f      	ldr	r3, [pc, #124]	; (8011084 <saveEEPROM+0x130>)
 8011006:	689b      	ldr	r3, [r3, #8]
 8011008:	17da      	asrs	r2, r3, #31
 801100a:	613b      	str	r3, [r7, #16]
 801100c:	617a      	str	r2, [r7, #20]
 801100e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011012:	69f9      	ldr	r1, [r7, #28]
 8011014:	2002      	movs	r0, #2
 8011016:	f000 fff1 	bl	8011ffc <HAL_FLASH_Program>
		memSet += 4;
 801101a:	69fb      	ldr	r3, [r7, #28]
 801101c:	3304      	adds	r3, #4
 801101e:	61fb      	str	r3, [r7, #28]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, memSet, ParamDevice.unitImpuls);
 8011020:	4b18      	ldr	r3, [pc, #96]	; (8011084 <saveEEPROM+0x130>)
 8011022:	691b      	ldr	r3, [r3, #16]
 8011024:	2200      	movs	r2, #0
 8011026:	60bb      	str	r3, [r7, #8]
 8011028:	60fa      	str	r2, [r7, #12]
 801102a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801102e:	69f9      	ldr	r1, [r7, #28]
 8011030:	2002      	movs	r0, #2
 8011032:	f000 ffe3 	bl	8011ffc <HAL_FLASH_Program>
		memSet += 4;
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	3304      	adds	r3, #4
 801103a:	61fb      	str	r3, [r7, #28]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, memSet, ParamDevice.unitPause);
 801103c:	4b11      	ldr	r3, [pc, #68]	; (8011084 <saveEEPROM+0x130>)
 801103e:	695b      	ldr	r3, [r3, #20]
 8011040:	2200      	movs	r2, #0
 8011042:	603b      	str	r3, [r7, #0]
 8011044:	607a      	str	r2, [r7, #4]
 8011046:	e9d7 2300 	ldrd	r2, r3, [r7]
 801104a:	69f9      	ldr	r1, [r7, #28]
 801104c:	2002      	movs	r0, #2
 801104e:	f000 ffd5 	bl	8011ffc <HAL_FLASH_Program>
		memSet += 4;
 8011052:	69fb      	ldr	r3, [r7, #28]
 8011054:	3304      	adds	r3, #4
 8011056:	61fb      	str	r3, [r7, #28]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, memSet, ParamDevice.unitCount);
 8011058:	4b0a      	ldr	r3, [pc, #40]	; (8011084 <saveEEPROM+0x130>)
 801105a:	699b      	ldr	r3, [r3, #24]
 801105c:	2200      	movs	r2, #0
 801105e:	469a      	mov	sl, r3
 8011060:	4693      	mov	fp, r2
 8011062:	4652      	mov	r2, sl
 8011064:	465b      	mov	r3, fp
 8011066:	69f9      	ldr	r1, [r7, #28]
 8011068:	2002      	movs	r0, #2
 801106a:	f000 ffc7 	bl	8011ffc <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 801106e:	f001 f83b 	bl	80120e8 <HAL_FLASH_Lock>
	}
}
 8011072:	bf00      	nop
 8011074:	3728      	adds	r7, #40	; 0x28
 8011076:	46bd      	mov	sp, r7
 8011078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801107c:	08008000 	.word	0x08008000
 8011080:	40023c00 	.word	0x40023c00
 8011084:	20000040 	.word	0x20000040

08011088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8011088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80110c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801108c:	480d      	ldr	r0, [pc, #52]	; (80110c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801108e:	490e      	ldr	r1, [pc, #56]	; (80110c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8011090:	4a0e      	ldr	r2, [pc, #56]	; (80110cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8011092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011094:	e002      	b.n	801109c <LoopCopyDataInit>

08011096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801109a:	3304      	adds	r3, #4

0801109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80110a0:	d3f9      	bcc.n	8011096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80110a2:	4a0b      	ldr	r2, [pc, #44]	; (80110d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80110a4:	4c0b      	ldr	r4, [pc, #44]	; (80110d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80110a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80110a8:	e001      	b.n	80110ae <LoopFillZerobss>

080110aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80110aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80110ac:	3204      	adds	r2, #4

080110ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80110ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80110b0:	d3fb      	bcc.n	80110aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80110b2:	f7ff fc49 	bl	8010948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80110b6:	f003 f8db 	bl	8014270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80110ba:	f7fe fe3f 	bl	800fd3c <main>
  bx  lr    
 80110be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80110c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80110c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80110c8:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 80110cc:	08021d54 	.word	0x08021d54
  ldr r2, =_sbss
 80110d0:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 80110d4:	20000520 	.word	0x20000520

080110d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80110d8:	e7fe      	b.n	80110d8 <ADC_IRQHandler>
	...

080110dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80110e0:	4b0e      	ldr	r3, [pc, #56]	; (801111c <HAL_Init+0x40>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	4a0d      	ldr	r2, [pc, #52]	; (801111c <HAL_Init+0x40>)
 80110e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80110ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80110ec:	4b0b      	ldr	r3, [pc, #44]	; (801111c <HAL_Init+0x40>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	4a0a      	ldr	r2, [pc, #40]	; (801111c <HAL_Init+0x40>)
 80110f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80110f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80110f8:	4b08      	ldr	r3, [pc, #32]	; (801111c <HAL_Init+0x40>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	4a07      	ldr	r2, [pc, #28]	; (801111c <HAL_Init+0x40>)
 80110fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011104:	2003      	movs	r0, #3
 8011106:	f000 fd51 	bl	8011bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801110a:	200f      	movs	r0, #15
 801110c:	f000 f808 	bl	8011120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011110:	f7ff f8fa 	bl	8010308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011114:	2300      	movs	r3, #0
}
 8011116:	4618      	mov	r0, r3
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	40023c00 	.word	0x40023c00

08011120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011128:	4b12      	ldr	r3, [pc, #72]	; (8011174 <HAL_InitTick+0x54>)
 801112a:	681a      	ldr	r2, [r3, #0]
 801112c:	4b12      	ldr	r3, [pc, #72]	; (8011178 <HAL_InitTick+0x58>)
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	4619      	mov	r1, r3
 8011132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011136:	fbb3 f3f1 	udiv	r3, r3, r1
 801113a:	fbb2 f3f3 	udiv	r3, r2, r3
 801113e:	4618      	mov	r0, r3
 8011140:	f000 fd69 	bl	8011c16 <HAL_SYSTICK_Config>
 8011144:	4603      	mov	r3, r0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d001      	beq.n	801114e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801114a:	2301      	movs	r3, #1
 801114c:	e00e      	b.n	801116c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2b0f      	cmp	r3, #15
 8011152:	d80a      	bhi.n	801116a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011154:	2200      	movs	r2, #0
 8011156:	6879      	ldr	r1, [r7, #4]
 8011158:	f04f 30ff 	mov.w	r0, #4294967295
 801115c:	f000 fd31 	bl	8011bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011160:	4a06      	ldr	r2, [pc, #24]	; (801117c <HAL_InitTick+0x5c>)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8011166:	2300      	movs	r3, #0
 8011168:	e000      	b.n	801116c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801116a:	2301      	movs	r3, #1
}
 801116c:	4618      	mov	r0, r3
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	20000030 	.word	0x20000030
 8011178:	20000068 	.word	0x20000068
 801117c:	20000064 	.word	0x20000064

08011180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011180:	b480      	push	{r7}
 8011182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011184:	4b06      	ldr	r3, [pc, #24]	; (80111a0 <HAL_IncTick+0x20>)
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	461a      	mov	r2, r3
 801118a:	4b06      	ldr	r3, [pc, #24]	; (80111a4 <HAL_IncTick+0x24>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	4413      	add	r3, r2
 8011190:	4a04      	ldr	r2, [pc, #16]	; (80111a4 <HAL_IncTick+0x24>)
 8011192:	6013      	str	r3, [r2, #0]
}
 8011194:	bf00      	nop
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop
 80111a0:	20000068 	.word	0x20000068
 80111a4:	200004ec 	.word	0x200004ec

080111a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80111a8:	b480      	push	{r7}
 80111aa:	af00      	add	r7, sp, #0
  return uwTick;
 80111ac:	4b03      	ldr	r3, [pc, #12]	; (80111bc <HAL_GetTick+0x14>)
 80111ae:	681b      	ldr	r3, [r3, #0]
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr
 80111ba:	bf00      	nop
 80111bc:	200004ec 	.word	0x200004ec

080111c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b084      	sub	sp, #16
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80111c8:	f7ff ffee 	bl	80111a8 <HAL_GetTick>
 80111cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d8:	d005      	beq.n	80111e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80111da:	4b0a      	ldr	r3, [pc, #40]	; (8011204 <HAL_Delay+0x44>)
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	461a      	mov	r2, r3
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	4413      	add	r3, r2
 80111e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80111e6:	bf00      	nop
 80111e8:	f7ff ffde 	bl	80111a8 <HAL_GetTick>
 80111ec:	4602      	mov	r2, r0
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	1ad3      	subs	r3, r2, r3
 80111f2:	68fa      	ldr	r2, [r7, #12]
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d8f7      	bhi.n	80111e8 <HAL_Delay+0x28>
  {
  }
}
 80111f8:	bf00      	nop
 80111fa:	bf00      	nop
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
 8011202:	bf00      	nop
 8011204:	20000068 	.word	0x20000068

08011208 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011210:	2300      	movs	r3, #0
 8011212:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d101      	bne.n	801121e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801121a:	2301      	movs	r3, #1
 801121c:	e033      	b.n	8011286 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011222:	2b00      	cmp	r3, #0
 8011224:	d109      	bne.n	801123a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f7ff f896 	bl	8010358 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2200      	movs	r2, #0
 8011230:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2200      	movs	r2, #0
 8011236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801123e:	f003 0310 	and.w	r3, r3, #16
 8011242:	2b00      	cmp	r3, #0
 8011244:	d118      	bne.n	8011278 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801124a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801124e:	f023 0302 	bic.w	r3, r3, #2
 8011252:	f043 0202 	orr.w	r2, r3, #2
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f000 fa58 	bl	8011710 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2200      	movs	r2, #0
 8011264:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801126a:	f023 0303 	bic.w	r3, r3, #3
 801126e:	f043 0201 	orr.w	r2, r3, #1
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	641a      	str	r2, [r3, #64]	; 0x40
 8011276:	e001      	b.n	801127c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8011278:	2301      	movs	r3, #1
 801127a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2200      	movs	r2, #0
 8011280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8011284:	7bfb      	ldrb	r3, [r7, #15]
}
 8011286:	4618      	mov	r0, r3
 8011288:	3710      	adds	r7, #16
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
	...

08011290 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af00      	add	r7, sp, #0
 8011296:	60f8      	str	r0, [r7, #12]
 8011298:	60b9      	str	r1, [r7, #8]
 801129a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801129c:	2300      	movs	r3, #0
 801129e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112a6:	2b01      	cmp	r3, #1
 80112a8:	d101      	bne.n	80112ae <HAL_ADC_Start_DMA+0x1e>
 80112aa:	2302      	movs	r3, #2
 80112ac:	e0ce      	b.n	801144c <HAL_ADC_Start_DMA+0x1bc>
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2201      	movs	r2, #1
 80112b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	689b      	ldr	r3, [r3, #8]
 80112bc:	f003 0301 	and.w	r3, r3, #1
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	d018      	beq.n	80112f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	689a      	ldr	r2, [r3, #8]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f042 0201 	orr.w	r2, r2, #1
 80112d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80112d4:	4b5f      	ldr	r3, [pc, #380]	; (8011454 <HAL_ADC_Start_DMA+0x1c4>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a5f      	ldr	r2, [pc, #380]	; (8011458 <HAL_ADC_Start_DMA+0x1c8>)
 80112da:	fba2 2303 	umull	r2, r3, r2, r3
 80112de:	0c9a      	lsrs	r2, r3, #18
 80112e0:	4613      	mov	r3, r2
 80112e2:	005b      	lsls	r3, r3, #1
 80112e4:	4413      	add	r3, r2
 80112e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80112e8:	e002      	b.n	80112f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	3b01      	subs	r3, #1
 80112ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d1f9      	bne.n	80112ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	689b      	ldr	r3, [r3, #8]
 80112fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011304:	d107      	bne.n	8011316 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	689a      	ldr	r2, [r3, #8]
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011314:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	689b      	ldr	r3, [r3, #8]
 801131c:	f003 0301 	and.w	r3, r3, #1
 8011320:	2b01      	cmp	r3, #1
 8011322:	f040 8086 	bne.w	8011432 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801132a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801132e:	f023 0301 	bic.w	r3, r3, #1
 8011332:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011344:	2b00      	cmp	r3, #0
 8011346:	d007      	beq.n	8011358 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801134c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8011350:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801135c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011364:	d106      	bne.n	8011374 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801136a:	f023 0206 	bic.w	r2, r3, #6
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	645a      	str	r2, [r3, #68]	; 0x44
 8011372:	e002      	b.n	801137a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2200      	movs	r2, #0
 8011378:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	2200      	movs	r2, #0
 801137e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011382:	4b36      	ldr	r3, [pc, #216]	; (801145c <HAL_ADC_Start_DMA+0x1cc>)
 8011384:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801138a:	4a35      	ldr	r2, [pc, #212]	; (8011460 <HAL_ADC_Start_DMA+0x1d0>)
 801138c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011392:	4a34      	ldr	r2, [pc, #208]	; (8011464 <HAL_ADC_Start_DMA+0x1d4>)
 8011394:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801139a:	4a33      	ldr	r2, [pc, #204]	; (8011468 <HAL_ADC_Start_DMA+0x1d8>)
 801139c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80113a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	685a      	ldr	r2, [r3, #4]
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80113b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	689a      	ldr	r2, [r3, #8]
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80113c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	334c      	adds	r3, #76	; 0x4c
 80113d2:	4619      	mov	r1, r3
 80113d4:	68ba      	ldr	r2, [r7, #8]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f000 fcd8 	bl	8011d8c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	685b      	ldr	r3, [r3, #4]
 80113e0:	f003 031f 	and.w	r3, r3, #31
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d10f      	bne.n	8011408 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	689b      	ldr	r3, [r3, #8]
 80113ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d129      	bne.n	801144a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	689a      	ldr	r2, [r3, #8]
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011404:	609a      	str	r2, [r3, #8]
 8011406:	e020      	b.n	801144a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	4a17      	ldr	r2, [pc, #92]	; (801146c <HAL_ADC_Start_DMA+0x1dc>)
 801140e:	4293      	cmp	r3, r2
 8011410:	d11b      	bne.n	801144a <HAL_ADC_Start_DMA+0x1ba>
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	689b      	ldr	r3, [r3, #8]
 8011418:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801141c:	2b00      	cmp	r3, #0
 801141e:	d114      	bne.n	801144a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	689a      	ldr	r2, [r3, #8]
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801142e:	609a      	str	r2, [r3, #8]
 8011430:	e00b      	b.n	801144a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011436:	f043 0210 	orr.w	r2, r3, #16
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011442:	f043 0201 	orr.w	r2, r3, #1
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 801144a:	2300      	movs	r3, #0
}
 801144c:	4618      	mov	r0, r3
 801144e:	3718      	adds	r7, #24
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	20000030 	.word	0x20000030
 8011458:	431bde83 	.word	0x431bde83
 801145c:	40012300 	.word	0x40012300
 8011460:	08011909 	.word	0x08011909
 8011464:	080119c3 	.word	0x080119c3
 8011468:	080119df 	.word	0x080119df
 801146c:	40012000 	.word	0x40012000

08011470 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8011478:	bf00      	nop
 801147a:	370c      	adds	r7, #12
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr

08011484 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801148c:	bf00      	nop
 801148e:	370c      	adds	r7, #12
 8011490:	46bd      	mov	sp, r7
 8011492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011496:	4770      	bx	lr

08011498 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8011498:	b480      	push	{r7}
 801149a:	b083      	sub	sp, #12
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80114a0:	bf00      	nop
 80114a2:	370c      	adds	r7, #12
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr

080114ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b085      	sub	sp, #20
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80114b6:	2300      	movs	r3, #0
 80114b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d101      	bne.n	80114c8 <HAL_ADC_ConfigChannel+0x1c>
 80114c4:	2302      	movs	r3, #2
 80114c6:	e113      	b.n	80116f0 <HAL_ADC_ConfigChannel+0x244>
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2201      	movs	r2, #1
 80114cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	2b09      	cmp	r3, #9
 80114d6:	d925      	bls.n	8011524 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	68d9      	ldr	r1, [r3, #12]
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	461a      	mov	r2, r3
 80114e6:	4613      	mov	r3, r2
 80114e8:	005b      	lsls	r3, r3, #1
 80114ea:	4413      	add	r3, r2
 80114ec:	3b1e      	subs	r3, #30
 80114ee:	2207      	movs	r2, #7
 80114f0:	fa02 f303 	lsl.w	r3, r2, r3
 80114f4:	43da      	mvns	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	400a      	ands	r2, r1
 80114fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	68d9      	ldr	r1, [r3, #12]
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	689a      	ldr	r2, [r3, #8]
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	b29b      	uxth	r3, r3
 801150e:	4618      	mov	r0, r3
 8011510:	4603      	mov	r3, r0
 8011512:	005b      	lsls	r3, r3, #1
 8011514:	4403      	add	r3, r0
 8011516:	3b1e      	subs	r3, #30
 8011518:	409a      	lsls	r2, r3
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	430a      	orrs	r2, r1
 8011520:	60da      	str	r2, [r3, #12]
 8011522:	e022      	b.n	801156a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	6919      	ldr	r1, [r3, #16]
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	b29b      	uxth	r3, r3
 8011530:	461a      	mov	r2, r3
 8011532:	4613      	mov	r3, r2
 8011534:	005b      	lsls	r3, r3, #1
 8011536:	4413      	add	r3, r2
 8011538:	2207      	movs	r2, #7
 801153a:	fa02 f303 	lsl.w	r3, r2, r3
 801153e:	43da      	mvns	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	400a      	ands	r2, r1
 8011546:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	6919      	ldr	r1, [r3, #16]
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	689a      	ldr	r2, [r3, #8]
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	b29b      	uxth	r3, r3
 8011558:	4618      	mov	r0, r3
 801155a:	4603      	mov	r3, r0
 801155c:	005b      	lsls	r3, r3, #1
 801155e:	4403      	add	r3, r0
 8011560:	409a      	lsls	r2, r3
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	430a      	orrs	r2, r1
 8011568:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	2b06      	cmp	r3, #6
 8011570:	d824      	bhi.n	80115bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	685a      	ldr	r2, [r3, #4]
 801157c:	4613      	mov	r3, r2
 801157e:	009b      	lsls	r3, r3, #2
 8011580:	4413      	add	r3, r2
 8011582:	3b05      	subs	r3, #5
 8011584:	221f      	movs	r2, #31
 8011586:	fa02 f303 	lsl.w	r3, r2, r3
 801158a:	43da      	mvns	r2, r3
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	400a      	ands	r2, r1
 8011592:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	b29b      	uxth	r3, r3
 80115a0:	4618      	mov	r0, r3
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	685a      	ldr	r2, [r3, #4]
 80115a6:	4613      	mov	r3, r2
 80115a8:	009b      	lsls	r3, r3, #2
 80115aa:	4413      	add	r3, r2
 80115ac:	3b05      	subs	r3, #5
 80115ae:	fa00 f203 	lsl.w	r2, r0, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	430a      	orrs	r2, r1
 80115b8:	635a      	str	r2, [r3, #52]	; 0x34
 80115ba:	e04c      	b.n	8011656 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	2b0c      	cmp	r3, #12
 80115c2:	d824      	bhi.n	801160e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	685a      	ldr	r2, [r3, #4]
 80115ce:	4613      	mov	r3, r2
 80115d0:	009b      	lsls	r3, r3, #2
 80115d2:	4413      	add	r3, r2
 80115d4:	3b23      	subs	r3, #35	; 0x23
 80115d6:	221f      	movs	r2, #31
 80115d8:	fa02 f303 	lsl.w	r3, r2, r3
 80115dc:	43da      	mvns	r2, r3
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	400a      	ands	r2, r1
 80115e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	4618      	mov	r0, r3
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	685a      	ldr	r2, [r3, #4]
 80115f8:	4613      	mov	r3, r2
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	4413      	add	r3, r2
 80115fe:	3b23      	subs	r3, #35	; 0x23
 8011600:	fa00 f203 	lsl.w	r2, r0, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	430a      	orrs	r2, r1
 801160a:	631a      	str	r2, [r3, #48]	; 0x30
 801160c:	e023      	b.n	8011656 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	685a      	ldr	r2, [r3, #4]
 8011618:	4613      	mov	r3, r2
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	4413      	add	r3, r2
 801161e:	3b41      	subs	r3, #65	; 0x41
 8011620:	221f      	movs	r2, #31
 8011622:	fa02 f303 	lsl.w	r3, r2, r3
 8011626:	43da      	mvns	r2, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	400a      	ands	r2, r1
 801162e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	b29b      	uxth	r3, r3
 801163c:	4618      	mov	r0, r3
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	685a      	ldr	r2, [r3, #4]
 8011642:	4613      	mov	r3, r2
 8011644:	009b      	lsls	r3, r3, #2
 8011646:	4413      	add	r3, r2
 8011648:	3b41      	subs	r3, #65	; 0x41
 801164a:	fa00 f203 	lsl.w	r2, r0, r3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	430a      	orrs	r2, r1
 8011654:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011656:	4b29      	ldr	r3, [pc, #164]	; (80116fc <HAL_ADC_ConfigChannel+0x250>)
 8011658:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	4a28      	ldr	r2, [pc, #160]	; (8011700 <HAL_ADC_ConfigChannel+0x254>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d10f      	bne.n	8011684 <HAL_ADC_ConfigChannel+0x1d8>
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2b12      	cmp	r3, #18
 801166a:	d10b      	bne.n	8011684 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	685b      	ldr	r3, [r3, #4]
 8011670:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4a1d      	ldr	r2, [pc, #116]	; (8011700 <HAL_ADC_ConfigChannel+0x254>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d12b      	bne.n	80116e6 <HAL_ADC_ConfigChannel+0x23a>
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	4a1c      	ldr	r2, [pc, #112]	; (8011704 <HAL_ADC_ConfigChannel+0x258>)
 8011694:	4293      	cmp	r3, r2
 8011696:	d003      	beq.n	80116a0 <HAL_ADC_ConfigChannel+0x1f4>
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	2b11      	cmp	r3, #17
 801169e:	d122      	bne.n	80116e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	4a11      	ldr	r2, [pc, #68]	; (8011704 <HAL_ADC_ConfigChannel+0x258>)
 80116be:	4293      	cmp	r3, r2
 80116c0:	d111      	bne.n	80116e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80116c2:	4b11      	ldr	r3, [pc, #68]	; (8011708 <HAL_ADC_ConfigChannel+0x25c>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	4a11      	ldr	r2, [pc, #68]	; (801170c <HAL_ADC_ConfigChannel+0x260>)
 80116c8:	fba2 2303 	umull	r2, r3, r2, r3
 80116cc:	0c9a      	lsrs	r2, r3, #18
 80116ce:	4613      	mov	r3, r2
 80116d0:	009b      	lsls	r3, r3, #2
 80116d2:	4413      	add	r3, r2
 80116d4:	005b      	lsls	r3, r3, #1
 80116d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80116d8:	e002      	b.n	80116e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	3b01      	subs	r3, #1
 80116de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d1f9      	bne.n	80116da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2200      	movs	r2, #0
 80116ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3714      	adds	r7, #20
 80116f4:	46bd      	mov	sp, r7
 80116f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fa:	4770      	bx	lr
 80116fc:	40012300 	.word	0x40012300
 8011700:	40012000 	.word	0x40012000
 8011704:	10000012 	.word	0x10000012
 8011708:	20000030 	.word	0x20000030
 801170c:	431bde83 	.word	0x431bde83

08011710 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8011710:	b480      	push	{r7}
 8011712:	b085      	sub	sp, #20
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011718:	4b79      	ldr	r3, [pc, #484]	; (8011900 <ADC_Init+0x1f0>)
 801171a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	685a      	ldr	r2, [r3, #4]
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	431a      	orrs	r2, r3
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	685a      	ldr	r2, [r3, #4]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	6859      	ldr	r1, [r3, #4]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	691b      	ldr	r3, [r3, #16]
 8011750:	021a      	lsls	r2, r3, #8
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	430a      	orrs	r2, r1
 8011758:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	685a      	ldr	r2, [r3, #4]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8011768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	6859      	ldr	r1, [r3, #4]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	689a      	ldr	r2, [r3, #8]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	430a      	orrs	r2, r1
 801177a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	689a      	ldr	r2, [r3, #8]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801178a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	6899      	ldr	r1, [r3, #8]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	68da      	ldr	r2, [r3, #12]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	430a      	orrs	r2, r1
 801179c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117a2:	4a58      	ldr	r2, [pc, #352]	; (8011904 <ADC_Init+0x1f4>)
 80117a4:	4293      	cmp	r3, r2
 80117a6:	d022      	beq.n	80117ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	689a      	ldr	r2, [r3, #8]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80117b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	6899      	ldr	r1, [r3, #8]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	430a      	orrs	r2, r1
 80117c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	689a      	ldr	r2, [r3, #8]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80117d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	6899      	ldr	r1, [r3, #8]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	430a      	orrs	r2, r1
 80117ea:	609a      	str	r2, [r3, #8]
 80117ec:	e00f      	b.n	801180e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	689a      	ldr	r2, [r3, #8]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80117fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	689a      	ldr	r2, [r3, #8]
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801180c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	689a      	ldr	r2, [r3, #8]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	f022 0202 	bic.w	r2, r2, #2
 801181c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	6899      	ldr	r1, [r3, #8]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	7e1b      	ldrb	r3, [r3, #24]
 8011828:	005a      	lsls	r2, r3, #1
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	430a      	orrs	r2, r1
 8011830:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d01b      	beq.n	8011874 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	685a      	ldr	r2, [r3, #4]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801184a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	685a      	ldr	r2, [r3, #4]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801185a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	6859      	ldr	r1, [r3, #4]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011866:	3b01      	subs	r3, #1
 8011868:	035a      	lsls	r2, r3, #13
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	430a      	orrs	r2, r1
 8011870:	605a      	str	r2, [r3, #4]
 8011872:	e007      	b.n	8011884 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	685a      	ldr	r2, [r3, #4]
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011882:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8011892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	69db      	ldr	r3, [r3, #28]
 801189e:	3b01      	subs	r3, #1
 80118a0:	051a      	lsls	r2, r3, #20
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	430a      	orrs	r2, r1
 80118a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	689a      	ldr	r2, [r3, #8]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80118b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	6899      	ldr	r1, [r3, #8]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80118c6:	025a      	lsls	r2, r3, #9
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	430a      	orrs	r2, r1
 80118ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	689a      	ldr	r2, [r3, #8]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80118de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	6899      	ldr	r1, [r3, #8]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	695b      	ldr	r3, [r3, #20]
 80118ea:	029a      	lsls	r2, r3, #10
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	430a      	orrs	r2, r1
 80118f2:	609a      	str	r2, [r3, #8]
}
 80118f4:	bf00      	nop
 80118f6:	3714      	adds	r7, #20
 80118f8:	46bd      	mov	sp, r7
 80118fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fe:	4770      	bx	lr
 8011900:	40012300 	.word	0x40012300
 8011904:	0f000001 	.word	0x0f000001

08011908 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011914:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801191a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801191e:	2b00      	cmp	r3, #0
 8011920:	d13c      	bne.n	801199c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011926:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	689b      	ldr	r3, [r3, #8]
 8011934:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011938:	2b00      	cmp	r3, #0
 801193a:	d12b      	bne.n	8011994 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011940:	2b00      	cmp	r3, #0
 8011942:	d127      	bne.n	8011994 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801194a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801194e:	2b00      	cmp	r3, #0
 8011950:	d006      	beq.n	8011960 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	689b      	ldr	r3, [r3, #8]
 8011958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801195c:	2b00      	cmp	r3, #0
 801195e:	d119      	bne.n	8011994 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	685a      	ldr	r2, [r3, #4]
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	f022 0220 	bic.w	r2, r2, #32
 801196e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011974:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011984:	2b00      	cmp	r3, #0
 8011986:	d105      	bne.n	8011994 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801198c:	f043 0201 	orr.w	r2, r3, #1
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8011994:	68f8      	ldr	r0, [r7, #12]
 8011996:	f7ff fd6b 	bl	8011470 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801199a:	e00e      	b.n	80119ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119a0:	f003 0310 	and.w	r3, r3, #16
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d003      	beq.n	80119b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80119a8:	68f8      	ldr	r0, [r7, #12]
 80119aa:	f7ff fd75 	bl	8011498 <HAL_ADC_ErrorCallback>
}
 80119ae:	e004      	b.n	80119ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	4798      	blx	r3
}
 80119ba:	bf00      	nop
 80119bc:	3710      	adds	r7, #16
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}

080119c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80119c2:	b580      	push	{r7, lr}
 80119c4:	b084      	sub	sp, #16
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80119d0:	68f8      	ldr	r0, [r7, #12]
 80119d2:	f7ff fd57 	bl	8011484 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80119d6:	bf00      	nop
 80119d8:	3710      	adds	r7, #16
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}

080119de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80119de:	b580      	push	{r7, lr}
 80119e0:	b084      	sub	sp, #16
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2240      	movs	r2, #64	; 0x40
 80119f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119f6:	f043 0204 	orr.w	r2, r3, #4
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80119fe:	68f8      	ldr	r0, [r7, #12]
 8011a00:	f7ff fd4a 	bl	8011498 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8011a04:	bf00      	nop
 8011a06:	3710      	adds	r7, #16
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}

08011a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b085      	sub	sp, #20
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f003 0307 	and.w	r3, r3, #7
 8011a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011a1c:	4b0c      	ldr	r3, [pc, #48]	; (8011a50 <__NVIC_SetPriorityGrouping+0x44>)
 8011a1e:	68db      	ldr	r3, [r3, #12]
 8011a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011a22:	68ba      	ldr	r2, [r7, #8]
 8011a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011a28:	4013      	ands	r3, r2
 8011a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011a3e:	4a04      	ldr	r2, [pc, #16]	; (8011a50 <__NVIC_SetPriorityGrouping+0x44>)
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	60d3      	str	r3, [r2, #12]
}
 8011a44:	bf00      	nop
 8011a46:	3714      	adds	r7, #20
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr
 8011a50:	e000ed00 	.word	0xe000ed00

08011a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011a54:	b480      	push	{r7}
 8011a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011a58:	4b04      	ldr	r3, [pc, #16]	; (8011a6c <__NVIC_GetPriorityGrouping+0x18>)
 8011a5a:	68db      	ldr	r3, [r3, #12]
 8011a5c:	0a1b      	lsrs	r3, r3, #8
 8011a5e:	f003 0307 	and.w	r3, r3, #7
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr
 8011a6c:	e000ed00 	.word	0xe000ed00

08011a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b083      	sub	sp, #12
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	4603      	mov	r3, r0
 8011a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	db0b      	blt.n	8011a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011a82:	79fb      	ldrb	r3, [r7, #7]
 8011a84:	f003 021f 	and.w	r2, r3, #31
 8011a88:	4907      	ldr	r1, [pc, #28]	; (8011aa8 <__NVIC_EnableIRQ+0x38>)
 8011a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a8e:	095b      	lsrs	r3, r3, #5
 8011a90:	2001      	movs	r0, #1
 8011a92:	fa00 f202 	lsl.w	r2, r0, r2
 8011a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011a9a:	bf00      	nop
 8011a9c:	370c      	adds	r7, #12
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa4:	4770      	bx	lr
 8011aa6:	bf00      	nop
 8011aa8:	e000e100 	.word	0xe000e100

08011aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b083      	sub	sp, #12
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	6039      	str	r1, [r7, #0]
 8011ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	db0a      	blt.n	8011ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	b2da      	uxtb	r2, r3
 8011ac4:	490c      	ldr	r1, [pc, #48]	; (8011af8 <__NVIC_SetPriority+0x4c>)
 8011ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011aca:	0112      	lsls	r2, r2, #4
 8011acc:	b2d2      	uxtb	r2, r2
 8011ace:	440b      	add	r3, r1
 8011ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011ad4:	e00a      	b.n	8011aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	b2da      	uxtb	r2, r3
 8011ada:	4908      	ldr	r1, [pc, #32]	; (8011afc <__NVIC_SetPriority+0x50>)
 8011adc:	79fb      	ldrb	r3, [r7, #7]
 8011ade:	f003 030f 	and.w	r3, r3, #15
 8011ae2:	3b04      	subs	r3, #4
 8011ae4:	0112      	lsls	r2, r2, #4
 8011ae6:	b2d2      	uxtb	r2, r2
 8011ae8:	440b      	add	r3, r1
 8011aea:	761a      	strb	r2, [r3, #24]
}
 8011aec:	bf00      	nop
 8011aee:	370c      	adds	r7, #12
 8011af0:	46bd      	mov	sp, r7
 8011af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af6:	4770      	bx	lr
 8011af8:	e000e100 	.word	0xe000e100
 8011afc:	e000ed00 	.word	0xe000ed00

08011b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011b00:	b480      	push	{r7}
 8011b02:	b089      	sub	sp, #36	; 0x24
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	f003 0307 	and.w	r3, r3, #7
 8011b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	f1c3 0307 	rsb	r3, r3, #7
 8011b1a:	2b04      	cmp	r3, #4
 8011b1c:	bf28      	it	cs
 8011b1e:	2304      	movcs	r3, #4
 8011b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011b22:	69fb      	ldr	r3, [r7, #28]
 8011b24:	3304      	adds	r3, #4
 8011b26:	2b06      	cmp	r3, #6
 8011b28:	d902      	bls.n	8011b30 <NVIC_EncodePriority+0x30>
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	3b03      	subs	r3, #3
 8011b2e:	e000      	b.n	8011b32 <NVIC_EncodePriority+0x32>
 8011b30:	2300      	movs	r3, #0
 8011b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011b34:	f04f 32ff 	mov.w	r2, #4294967295
 8011b38:	69bb      	ldr	r3, [r7, #24]
 8011b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8011b3e:	43da      	mvns	r2, r3
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	401a      	ands	r2, r3
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011b48:	f04f 31ff 	mov.w	r1, #4294967295
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8011b52:	43d9      	mvns	r1, r3
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011b58:	4313      	orrs	r3, r2
         );
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3724      	adds	r7, #36	; 0x24
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b64:	4770      	bx	lr
	...

08011b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	3b01      	subs	r3, #1
 8011b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011b78:	d301      	bcc.n	8011b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e00f      	b.n	8011b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011b7e:	4a0a      	ldr	r2, [pc, #40]	; (8011ba8 <SysTick_Config+0x40>)
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	3b01      	subs	r3, #1
 8011b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011b86:	210f      	movs	r1, #15
 8011b88:	f04f 30ff 	mov.w	r0, #4294967295
 8011b8c:	f7ff ff8e 	bl	8011aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011b90:	4b05      	ldr	r3, [pc, #20]	; (8011ba8 <SysTick_Config+0x40>)
 8011b92:	2200      	movs	r2, #0
 8011b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011b96:	4b04      	ldr	r3, [pc, #16]	; (8011ba8 <SysTick_Config+0x40>)
 8011b98:	2207      	movs	r2, #7
 8011b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011b9c:	2300      	movs	r3, #0
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3708      	adds	r7, #8
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	e000e010 	.word	0xe000e010

08011bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f7ff ff29 	bl	8011a0c <__NVIC_SetPriorityGrouping>
}
 8011bba:	bf00      	nop
 8011bbc:	3708      	adds	r7, #8
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}

08011bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011bc2:	b580      	push	{r7, lr}
 8011bc4:	b086      	sub	sp, #24
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	4603      	mov	r3, r0
 8011bca:	60b9      	str	r1, [r7, #8]
 8011bcc:	607a      	str	r2, [r7, #4]
 8011bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011bd4:	f7ff ff3e 	bl	8011a54 <__NVIC_GetPriorityGrouping>
 8011bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011bda:	687a      	ldr	r2, [r7, #4]
 8011bdc:	68b9      	ldr	r1, [r7, #8]
 8011bde:	6978      	ldr	r0, [r7, #20]
 8011be0:	f7ff ff8e 	bl	8011b00 <NVIC_EncodePriority>
 8011be4:	4602      	mov	r2, r0
 8011be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bea:	4611      	mov	r1, r2
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7ff ff5d 	bl	8011aac <__NVIC_SetPriority>
}
 8011bf2:	bf00      	nop
 8011bf4:	3718      	adds	r7, #24
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}

08011bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011bfa:	b580      	push	{r7, lr}
 8011bfc:	b082      	sub	sp, #8
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	4603      	mov	r3, r0
 8011c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7ff ff31 	bl	8011a70 <__NVIC_EnableIRQ>
}
 8011c0e:	bf00      	nop
 8011c10:	3708      	adds	r7, #8
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}

08011c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011c16:	b580      	push	{r7, lr}
 8011c18:	b082      	sub	sp, #8
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7ff ffa2 	bl	8011b68 <SysTick_Config>
 8011c24:	4603      	mov	r3, r0
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3708      	adds	r7, #8
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
	...

08011c30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b086      	sub	sp, #24
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011c3c:	f7ff fab4 	bl	80111a8 <HAL_GetTick>
 8011c40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d101      	bne.n	8011c4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011c48:	2301      	movs	r3, #1
 8011c4a:	e099      	b.n	8011d80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2202      	movs	r2, #2
 8011c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2200      	movs	r2, #0
 8011c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	681a      	ldr	r2, [r3, #0]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	f022 0201 	bic.w	r2, r2, #1
 8011c6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011c6c:	e00f      	b.n	8011c8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011c6e:	f7ff fa9b 	bl	80111a8 <HAL_GetTick>
 8011c72:	4602      	mov	r2, r0
 8011c74:	693b      	ldr	r3, [r7, #16]
 8011c76:	1ad3      	subs	r3, r2, r3
 8011c78:	2b05      	cmp	r3, #5
 8011c7a:	d908      	bls.n	8011c8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2220      	movs	r2, #32
 8011c80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2203      	movs	r2, #3
 8011c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8011c8a:	2303      	movs	r3, #3
 8011c8c:	e078      	b.n	8011d80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	f003 0301 	and.w	r3, r3, #1
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d1e8      	bne.n	8011c6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011ca4:	697a      	ldr	r2, [r7, #20]
 8011ca6:	4b38      	ldr	r3, [pc, #224]	; (8011d88 <HAL_DMA_Init+0x158>)
 8011ca8:	4013      	ands	r3, r2
 8011caa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	685a      	ldr	r2, [r3, #4]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	689b      	ldr	r3, [r3, #8]
 8011cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	691b      	ldr	r3, [r3, #16]
 8011cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	699b      	ldr	r3, [r3, #24]
 8011ccc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6a1b      	ldr	r3, [r3, #32]
 8011cd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011cda:	697a      	ldr	r2, [r7, #20]
 8011cdc:	4313      	orrs	r3, r2
 8011cde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ce4:	2b04      	cmp	r3, #4
 8011ce6:	d107      	bne.n	8011cf8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cf0:	4313      	orrs	r3, r2
 8011cf2:	697a      	ldr	r2, [r7, #20]
 8011cf4:	4313      	orrs	r3, r2
 8011cf6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	697a      	ldr	r2, [r7, #20]
 8011cfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	695b      	ldr	r3, [r3, #20]
 8011d06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011d08:	697b      	ldr	r3, [r7, #20]
 8011d0a:	f023 0307 	bic.w	r3, r3, #7
 8011d0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d14:	697a      	ldr	r2, [r7, #20]
 8011d16:	4313      	orrs	r3, r2
 8011d18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d1e:	2b04      	cmp	r3, #4
 8011d20:	d117      	bne.n	8011d52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d26:	697a      	ldr	r2, [r7, #20]
 8011d28:	4313      	orrs	r3, r2
 8011d2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d00e      	beq.n	8011d52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f000 f8e5 	bl	8011f04 <DMA_CheckFifoParam>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d008      	beq.n	8011d52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2240      	movs	r2, #64	; 0x40
 8011d44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2201      	movs	r2, #1
 8011d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011d4e:	2301      	movs	r3, #1
 8011d50:	e016      	b.n	8011d80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	697a      	ldr	r2, [r7, #20]
 8011d58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f000 f89c 	bl	8011e98 <DMA_CalcBaseAndBitshift>
 8011d60:	4603      	mov	r3, r0
 8011d62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d68:	223f      	movs	r2, #63	; 0x3f
 8011d6a:	409a      	lsls	r2, r3
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2200      	movs	r2, #0
 8011d74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2201      	movs	r2, #1
 8011d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011d7e:	2300      	movs	r3, #0
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3718      	adds	r7, #24
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	f010803f 	.word	0xf010803f

08011d8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b086      	sub	sp, #24
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	60b9      	str	r1, [r7, #8]
 8011d96:	607a      	str	r2, [r7, #4]
 8011d98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011da2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011daa:	2b01      	cmp	r3, #1
 8011dac:	d101      	bne.n	8011db2 <HAL_DMA_Start_IT+0x26>
 8011dae:	2302      	movs	r3, #2
 8011db0:	e040      	b.n	8011e34 <HAL_DMA_Start_IT+0xa8>
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2201      	movs	r2, #1
 8011db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011dc0:	b2db      	uxtb	r3, r3
 8011dc2:	2b01      	cmp	r3, #1
 8011dc4:	d12f      	bne.n	8011e26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2202      	movs	r2, #2
 8011dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	687a      	ldr	r2, [r7, #4]
 8011dd8:	68b9      	ldr	r1, [r7, #8]
 8011dda:	68f8      	ldr	r0, [r7, #12]
 8011ddc:	f000 f82e 	bl	8011e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011de4:	223f      	movs	r2, #63	; 0x3f
 8011de6:	409a      	lsls	r2, r3
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	681a      	ldr	r2, [r3, #0]
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	f042 0216 	orr.w	r2, r2, #22
 8011dfa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d007      	beq.n	8011e14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f042 0208 	orr.w	r2, r2, #8
 8011e12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	681a      	ldr	r2, [r3, #0]
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f042 0201 	orr.w	r2, r2, #1
 8011e22:	601a      	str	r2, [r3, #0]
 8011e24:	e005      	b.n	8011e32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8011e2e:	2302      	movs	r3, #2
 8011e30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8011e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3718      	adds	r7, #24
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b085      	sub	sp, #20
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]
 8011e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	683a      	ldr	r2, [r7, #0]
 8011e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	689b      	ldr	r3, [r3, #8]
 8011e66:	2b40      	cmp	r3, #64	; 0x40
 8011e68:	d108      	bne.n	8011e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	687a      	ldr	r2, [r7, #4]
 8011e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	68ba      	ldr	r2, [r7, #8]
 8011e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8011e7a:	e007      	b.n	8011e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	68ba      	ldr	r2, [r7, #8]
 8011e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	687a      	ldr	r2, [r7, #4]
 8011e8a:	60da      	str	r2, [r3, #12]
}
 8011e8c:	bf00      	nop
 8011e8e:	3714      	adds	r7, #20
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b085      	sub	sp, #20
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	b2db      	uxtb	r3, r3
 8011ea6:	3b10      	subs	r3, #16
 8011ea8:	4a14      	ldr	r2, [pc, #80]	; (8011efc <DMA_CalcBaseAndBitshift+0x64>)
 8011eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8011eae:	091b      	lsrs	r3, r3, #4
 8011eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8011eb2:	4a13      	ldr	r2, [pc, #76]	; (8011f00 <DMA_CalcBaseAndBitshift+0x68>)
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	4413      	add	r3, r2
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	461a      	mov	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	2b03      	cmp	r3, #3
 8011ec4:	d909      	bls.n	8011eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011ece:	f023 0303 	bic.w	r3, r3, #3
 8011ed2:	1d1a      	adds	r2, r3, #4
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8011ed8:	e007      	b.n	8011eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011ee2:	f023 0303 	bic.w	r3, r3, #3
 8011ee6:	687a      	ldr	r2, [r7, #4]
 8011ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3714      	adds	r7, #20
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef8:	4770      	bx	lr
 8011efa:	bf00      	nop
 8011efc:	aaaaaaab 	.word	0xaaaaaaab
 8011f00:	08021960 	.word	0x08021960

08011f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8011f04:	b480      	push	{r7}
 8011f06:	b085      	sub	sp, #20
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	699b      	ldr	r3, [r3, #24]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d11f      	bne.n	8011f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	2b03      	cmp	r3, #3
 8011f22:	d856      	bhi.n	8011fd2 <DMA_CheckFifoParam+0xce>
 8011f24:	a201      	add	r2, pc, #4	; (adr r2, 8011f2c <DMA_CheckFifoParam+0x28>)
 8011f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f2a:	bf00      	nop
 8011f2c:	08011f3d 	.word	0x08011f3d
 8011f30:	08011f4f 	.word	0x08011f4f
 8011f34:	08011f3d 	.word	0x08011f3d
 8011f38:	08011fd3 	.word	0x08011fd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d046      	beq.n	8011fd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8011f48:	2301      	movs	r3, #1
 8011f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011f4c:	e043      	b.n	8011fd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011f56:	d140      	bne.n	8011fda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8011f58:	2301      	movs	r3, #1
 8011f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011f5c:	e03d      	b.n	8011fda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	699b      	ldr	r3, [r3, #24]
 8011f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f66:	d121      	bne.n	8011fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	2b03      	cmp	r3, #3
 8011f6c:	d837      	bhi.n	8011fde <DMA_CheckFifoParam+0xda>
 8011f6e:	a201      	add	r2, pc, #4	; (adr r2, 8011f74 <DMA_CheckFifoParam+0x70>)
 8011f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f74:	08011f85 	.word	0x08011f85
 8011f78:	08011f8b 	.word	0x08011f8b
 8011f7c:	08011f85 	.word	0x08011f85
 8011f80:	08011f9d 	.word	0x08011f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8011f84:	2301      	movs	r3, #1
 8011f86:	73fb      	strb	r3, [r7, #15]
      break;
 8011f88:	e030      	b.n	8011fec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d025      	beq.n	8011fe2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8011f96:	2301      	movs	r3, #1
 8011f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011f9a:	e022      	b.n	8011fe2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011fa4:	d11f      	bne.n	8011fe6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8011faa:	e01c      	b.n	8011fe6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	2b02      	cmp	r3, #2
 8011fb0:	d903      	bls.n	8011fba <DMA_CheckFifoParam+0xb6>
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	2b03      	cmp	r3, #3
 8011fb6:	d003      	beq.n	8011fc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8011fb8:	e018      	b.n	8011fec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8011fba:	2301      	movs	r3, #1
 8011fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8011fbe:	e015      	b.n	8011fec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d00e      	beq.n	8011fea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8011fcc:	2301      	movs	r3, #1
 8011fce:	73fb      	strb	r3, [r7, #15]
      break;
 8011fd0:	e00b      	b.n	8011fea <DMA_CheckFifoParam+0xe6>
      break;
 8011fd2:	bf00      	nop
 8011fd4:	e00a      	b.n	8011fec <DMA_CheckFifoParam+0xe8>
      break;
 8011fd6:	bf00      	nop
 8011fd8:	e008      	b.n	8011fec <DMA_CheckFifoParam+0xe8>
      break;
 8011fda:	bf00      	nop
 8011fdc:	e006      	b.n	8011fec <DMA_CheckFifoParam+0xe8>
      break;
 8011fde:	bf00      	nop
 8011fe0:	e004      	b.n	8011fec <DMA_CheckFifoParam+0xe8>
      break;
 8011fe2:	bf00      	nop
 8011fe4:	e002      	b.n	8011fec <DMA_CheckFifoParam+0xe8>
      break;   
 8011fe6:	bf00      	nop
 8011fe8:	e000      	b.n	8011fec <DMA_CheckFifoParam+0xe8>
      break;
 8011fea:	bf00      	nop
    }
  } 
  
  return status; 
 8011fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	3714      	adds	r7, #20
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff8:	4770      	bx	lr
 8011ffa:	bf00      	nop

08011ffc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b086      	sub	sp, #24
 8012000:	af00      	add	r7, sp, #0
 8012002:	60f8      	str	r0, [r7, #12]
 8012004:	60b9      	str	r1, [r7, #8]
 8012006:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 801200a:	2301      	movs	r3, #1
 801200c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801200e:	4b23      	ldr	r3, [pc, #140]	; (801209c <HAL_FLASH_Program+0xa0>)
 8012010:	7e1b      	ldrb	r3, [r3, #24]
 8012012:	2b01      	cmp	r3, #1
 8012014:	d101      	bne.n	801201a <HAL_FLASH_Program+0x1e>
 8012016:	2302      	movs	r3, #2
 8012018:	e03b      	b.n	8012092 <HAL_FLASH_Program+0x96>
 801201a:	4b20      	ldr	r3, [pc, #128]	; (801209c <HAL_FLASH_Program+0xa0>)
 801201c:	2201      	movs	r2, #1
 801201e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012020:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012024:	f000 f870 	bl	8012108 <FLASH_WaitForLastOperation>
 8012028:	4603      	mov	r3, r0
 801202a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 801202c:	7dfb      	ldrb	r3, [r7, #23]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d12b      	bne.n	801208a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d105      	bne.n	8012044 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8012038:	783b      	ldrb	r3, [r7, #0]
 801203a:	4619      	mov	r1, r3
 801203c:	68b8      	ldr	r0, [r7, #8]
 801203e:	f000 f91b 	bl	8012278 <FLASH_Program_Byte>
 8012042:	e016      	b.n	8012072 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	2b01      	cmp	r3, #1
 8012048:	d105      	bne.n	8012056 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 801204a:	883b      	ldrh	r3, [r7, #0]
 801204c:	4619      	mov	r1, r3
 801204e:	68b8      	ldr	r0, [r7, #8]
 8012050:	f000 f8ee 	bl	8012230 <FLASH_Program_HalfWord>
 8012054:	e00d      	b.n	8012072 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	2b02      	cmp	r3, #2
 801205a:	d105      	bne.n	8012068 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	4619      	mov	r1, r3
 8012060:	68b8      	ldr	r0, [r7, #8]
 8012062:	f000 f8c3 	bl	80121ec <FLASH_Program_Word>
 8012066:	e004      	b.n	8012072 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8012068:	e9d7 2300 	ldrd	r2, r3, [r7]
 801206c:	68b8      	ldr	r0, [r7, #8]
 801206e:	f000 f88b 	bl	8012188 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012072:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012076:	f000 f847 	bl	8012108 <FLASH_WaitForLastOperation>
 801207a:	4603      	mov	r3, r0
 801207c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801207e:	4b08      	ldr	r3, [pc, #32]	; (80120a0 <HAL_FLASH_Program+0xa4>)
 8012080:	691b      	ldr	r3, [r3, #16]
 8012082:	4a07      	ldr	r2, [pc, #28]	; (80120a0 <HAL_FLASH_Program+0xa4>)
 8012084:	f023 0301 	bic.w	r3, r3, #1
 8012088:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801208a:	4b04      	ldr	r3, [pc, #16]	; (801209c <HAL_FLASH_Program+0xa0>)
 801208c:	2200      	movs	r2, #0
 801208e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8012090:	7dfb      	ldrb	r3, [r7, #23]
}
 8012092:	4618      	mov	r0, r3
 8012094:	3718      	adds	r7, #24
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}
 801209a:	bf00      	nop
 801209c:	200004f0 	.word	0x200004f0
 80120a0:	40023c00 	.word	0x40023c00

080120a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80120aa:	2300      	movs	r3, #0
 80120ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80120ae:	4b0b      	ldr	r3, [pc, #44]	; (80120dc <HAL_FLASH_Unlock+0x38>)
 80120b0:	691b      	ldr	r3, [r3, #16]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	da0b      	bge.n	80120ce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80120b6:	4b09      	ldr	r3, [pc, #36]	; (80120dc <HAL_FLASH_Unlock+0x38>)
 80120b8:	4a09      	ldr	r2, [pc, #36]	; (80120e0 <HAL_FLASH_Unlock+0x3c>)
 80120ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80120bc:	4b07      	ldr	r3, [pc, #28]	; (80120dc <HAL_FLASH_Unlock+0x38>)
 80120be:	4a09      	ldr	r2, [pc, #36]	; (80120e4 <HAL_FLASH_Unlock+0x40>)
 80120c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80120c2:	4b06      	ldr	r3, [pc, #24]	; (80120dc <HAL_FLASH_Unlock+0x38>)
 80120c4:	691b      	ldr	r3, [r3, #16]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	da01      	bge.n	80120ce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80120ca:	2301      	movs	r3, #1
 80120cc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80120ce:	79fb      	ldrb	r3, [r7, #7]
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	370c      	adds	r7, #12
 80120d4:	46bd      	mov	sp, r7
 80120d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120da:	4770      	bx	lr
 80120dc:	40023c00 	.word	0x40023c00
 80120e0:	45670123 	.word	0x45670123
 80120e4:	cdef89ab 	.word	0xcdef89ab

080120e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80120e8:	b480      	push	{r7}
 80120ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80120ec:	4b05      	ldr	r3, [pc, #20]	; (8012104 <HAL_FLASH_Lock+0x1c>)
 80120ee:	691b      	ldr	r3, [r3, #16]
 80120f0:	4a04      	ldr	r2, [pc, #16]	; (8012104 <HAL_FLASH_Lock+0x1c>)
 80120f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80120f6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80120f8:	2300      	movs	r3, #0
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr
 8012104:	40023c00 	.word	0x40023c00

08012108 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8012108:	b580      	push	{r7, lr}
 801210a:	b084      	sub	sp, #16
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012110:	2300      	movs	r3, #0
 8012112:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012114:	4b1a      	ldr	r3, [pc, #104]	; (8012180 <FLASH_WaitForLastOperation+0x78>)
 8012116:	2200      	movs	r2, #0
 8012118:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801211a:	f7ff f845 	bl	80111a8 <HAL_GetTick>
 801211e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012120:	e010      	b.n	8012144 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012128:	d00c      	beq.n	8012144 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d007      	beq.n	8012140 <FLASH_WaitForLastOperation+0x38>
 8012130:	f7ff f83a 	bl	80111a8 <HAL_GetTick>
 8012134:	4602      	mov	r2, r0
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	1ad3      	subs	r3, r2, r3
 801213a:	687a      	ldr	r2, [r7, #4]
 801213c:	429a      	cmp	r2, r3
 801213e:	d201      	bcs.n	8012144 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8012140:	2303      	movs	r3, #3
 8012142:	e019      	b.n	8012178 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012144:	4b0f      	ldr	r3, [pc, #60]	; (8012184 <FLASH_WaitForLastOperation+0x7c>)
 8012146:	68db      	ldr	r3, [r3, #12]
 8012148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801214c:	2b00      	cmp	r3, #0
 801214e:	d1e8      	bne.n	8012122 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8012150:	4b0c      	ldr	r3, [pc, #48]	; (8012184 <FLASH_WaitForLastOperation+0x7c>)
 8012152:	68db      	ldr	r3, [r3, #12]
 8012154:	f003 0301 	and.w	r3, r3, #1
 8012158:	2b00      	cmp	r3, #0
 801215a:	d002      	beq.n	8012162 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801215c:	4b09      	ldr	r3, [pc, #36]	; (8012184 <FLASH_WaitForLastOperation+0x7c>)
 801215e:	2201      	movs	r2, #1
 8012160:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8012162:	4b08      	ldr	r3, [pc, #32]	; (8012184 <FLASH_WaitForLastOperation+0x7c>)
 8012164:	68db      	ldr	r3, [r3, #12]
 8012166:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 801216a:	2b00      	cmp	r3, #0
 801216c:	d003      	beq.n	8012176 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801216e:	f000 f8a5 	bl	80122bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8012172:	2301      	movs	r3, #1
 8012174:	e000      	b.n	8012178 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8012176:	2300      	movs	r3, #0
  
}  
 8012178:	4618      	mov	r0, r3
 801217a:	3710      	adds	r7, #16
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}
 8012180:	200004f0 	.word	0x200004f0
 8012184:	40023c00 	.word	0x40023c00

08012188 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8012188:	b480      	push	{r7}
 801218a:	b085      	sub	sp, #20
 801218c:	af00      	add	r7, sp, #0
 801218e:	60f8      	str	r0, [r7, #12]
 8012190:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012194:	4b14      	ldr	r3, [pc, #80]	; (80121e8 <FLASH_Program_DoubleWord+0x60>)
 8012196:	691b      	ldr	r3, [r3, #16]
 8012198:	4a13      	ldr	r2, [pc, #76]	; (80121e8 <FLASH_Program_DoubleWord+0x60>)
 801219a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801219e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80121a0:	4b11      	ldr	r3, [pc, #68]	; (80121e8 <FLASH_Program_DoubleWord+0x60>)
 80121a2:	691b      	ldr	r3, [r3, #16]
 80121a4:	4a10      	ldr	r2, [pc, #64]	; (80121e8 <FLASH_Program_DoubleWord+0x60>)
 80121a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80121aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80121ac:	4b0e      	ldr	r3, [pc, #56]	; (80121e8 <FLASH_Program_DoubleWord+0x60>)
 80121ae:	691b      	ldr	r3, [r3, #16]
 80121b0:	4a0d      	ldr	r2, [pc, #52]	; (80121e8 <FLASH_Program_DoubleWord+0x60>)
 80121b2:	f043 0301 	orr.w	r3, r3, #1
 80121b6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	683a      	ldr	r2, [r7, #0]
 80121bc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80121be:	f3bf 8f6f 	isb	sy
}
 80121c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80121c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80121c8:	f04f 0200 	mov.w	r2, #0
 80121cc:	f04f 0300 	mov.w	r3, #0
 80121d0:	000a      	movs	r2, r1
 80121d2:	2300      	movs	r3, #0
 80121d4:	68f9      	ldr	r1, [r7, #12]
 80121d6:	3104      	adds	r1, #4
 80121d8:	4613      	mov	r3, r2
 80121da:	600b      	str	r3, [r1, #0]
}
 80121dc:	bf00      	nop
 80121de:	3714      	adds	r7, #20
 80121e0:	46bd      	mov	sp, r7
 80121e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e6:	4770      	bx	lr
 80121e8:	40023c00 	.word	0x40023c00

080121ec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80121ec:	b480      	push	{r7}
 80121ee:	b083      	sub	sp, #12
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80121f6:	4b0d      	ldr	r3, [pc, #52]	; (801222c <FLASH_Program_Word+0x40>)
 80121f8:	691b      	ldr	r3, [r3, #16]
 80121fa:	4a0c      	ldr	r2, [pc, #48]	; (801222c <FLASH_Program_Word+0x40>)
 80121fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012200:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8012202:	4b0a      	ldr	r3, [pc, #40]	; (801222c <FLASH_Program_Word+0x40>)
 8012204:	691b      	ldr	r3, [r3, #16]
 8012206:	4a09      	ldr	r2, [pc, #36]	; (801222c <FLASH_Program_Word+0x40>)
 8012208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801220c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801220e:	4b07      	ldr	r3, [pc, #28]	; (801222c <FLASH_Program_Word+0x40>)
 8012210:	691b      	ldr	r3, [r3, #16]
 8012212:	4a06      	ldr	r2, [pc, #24]	; (801222c <FLASH_Program_Word+0x40>)
 8012214:	f043 0301 	orr.w	r3, r3, #1
 8012218:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	683a      	ldr	r2, [r7, #0]
 801221e:	601a      	str	r2, [r3, #0]
}
 8012220:	bf00      	nop
 8012222:	370c      	adds	r7, #12
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr
 801222c:	40023c00 	.word	0x40023c00

08012230 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8012230:	b480      	push	{r7}
 8012232:	b083      	sub	sp, #12
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	460b      	mov	r3, r1
 801223a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801223c:	4b0d      	ldr	r3, [pc, #52]	; (8012274 <FLASH_Program_HalfWord+0x44>)
 801223e:	691b      	ldr	r3, [r3, #16]
 8012240:	4a0c      	ldr	r2, [pc, #48]	; (8012274 <FLASH_Program_HalfWord+0x44>)
 8012242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012246:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8012248:	4b0a      	ldr	r3, [pc, #40]	; (8012274 <FLASH_Program_HalfWord+0x44>)
 801224a:	691b      	ldr	r3, [r3, #16]
 801224c:	4a09      	ldr	r2, [pc, #36]	; (8012274 <FLASH_Program_HalfWord+0x44>)
 801224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012252:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012254:	4b07      	ldr	r3, [pc, #28]	; (8012274 <FLASH_Program_HalfWord+0x44>)
 8012256:	691b      	ldr	r3, [r3, #16]
 8012258:	4a06      	ldr	r2, [pc, #24]	; (8012274 <FLASH_Program_HalfWord+0x44>)
 801225a:	f043 0301 	orr.w	r3, r3, #1
 801225e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	887a      	ldrh	r2, [r7, #2]
 8012264:	801a      	strh	r2, [r3, #0]
}
 8012266:	bf00      	nop
 8012268:	370c      	adds	r7, #12
 801226a:	46bd      	mov	sp, r7
 801226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012270:	4770      	bx	lr
 8012272:	bf00      	nop
 8012274:	40023c00 	.word	0x40023c00

08012278 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8012278:	b480      	push	{r7}
 801227a:	b083      	sub	sp, #12
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	460b      	mov	r3, r1
 8012282:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012284:	4b0c      	ldr	r3, [pc, #48]	; (80122b8 <FLASH_Program_Byte+0x40>)
 8012286:	691b      	ldr	r3, [r3, #16]
 8012288:	4a0b      	ldr	r2, [pc, #44]	; (80122b8 <FLASH_Program_Byte+0x40>)
 801228a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801228e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8012290:	4b09      	ldr	r3, [pc, #36]	; (80122b8 <FLASH_Program_Byte+0x40>)
 8012292:	4a09      	ldr	r2, [pc, #36]	; (80122b8 <FLASH_Program_Byte+0x40>)
 8012294:	691b      	ldr	r3, [r3, #16]
 8012296:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012298:	4b07      	ldr	r3, [pc, #28]	; (80122b8 <FLASH_Program_Byte+0x40>)
 801229a:	691b      	ldr	r3, [r3, #16]
 801229c:	4a06      	ldr	r2, [pc, #24]	; (80122b8 <FLASH_Program_Byte+0x40>)
 801229e:	f043 0301 	orr.w	r3, r3, #1
 80122a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	78fa      	ldrb	r2, [r7, #3]
 80122a8:	701a      	strb	r2, [r3, #0]
}
 80122aa:	bf00      	nop
 80122ac:	370c      	adds	r7, #12
 80122ae:	46bd      	mov	sp, r7
 80122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b4:	4770      	bx	lr
 80122b6:	bf00      	nop
 80122b8:	40023c00 	.word	0x40023c00

080122bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80122bc:	b480      	push	{r7}
 80122be:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80122c0:	4b2f      	ldr	r3, [pc, #188]	; (8012380 <FLASH_SetErrorCode+0xc4>)
 80122c2:	68db      	ldr	r3, [r3, #12]
 80122c4:	f003 0310 	and.w	r3, r3, #16
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d008      	beq.n	80122de <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80122cc:	4b2d      	ldr	r3, [pc, #180]	; (8012384 <FLASH_SetErrorCode+0xc8>)
 80122ce:	69db      	ldr	r3, [r3, #28]
 80122d0:	f043 0310 	orr.w	r3, r3, #16
 80122d4:	4a2b      	ldr	r2, [pc, #172]	; (8012384 <FLASH_SetErrorCode+0xc8>)
 80122d6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80122d8:	4b29      	ldr	r3, [pc, #164]	; (8012380 <FLASH_SetErrorCode+0xc4>)
 80122da:	2210      	movs	r2, #16
 80122dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80122de:	4b28      	ldr	r3, [pc, #160]	; (8012380 <FLASH_SetErrorCode+0xc4>)
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	f003 0320 	and.w	r3, r3, #32
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d008      	beq.n	80122fc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80122ea:	4b26      	ldr	r3, [pc, #152]	; (8012384 <FLASH_SetErrorCode+0xc8>)
 80122ec:	69db      	ldr	r3, [r3, #28]
 80122ee:	f043 0308 	orr.w	r3, r3, #8
 80122f2:	4a24      	ldr	r2, [pc, #144]	; (8012384 <FLASH_SetErrorCode+0xc8>)
 80122f4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80122f6:	4b22      	ldr	r3, [pc, #136]	; (8012380 <FLASH_SetErrorCode+0xc4>)
 80122f8:	2220      	movs	r2, #32
 80122fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80122fc:	4b20      	ldr	r3, [pc, #128]	; (8012380 <FLASH_SetErrorCode+0xc4>)
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012304:	2b00      	cmp	r3, #0
 8012306:	d008      	beq.n	801231a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8012308:	4b1e      	ldr	r3, [pc, #120]	; (8012384 <FLASH_SetErrorCode+0xc8>)
 801230a:	69db      	ldr	r3, [r3, #28]
 801230c:	f043 0304 	orr.w	r3, r3, #4
 8012310:	4a1c      	ldr	r2, [pc, #112]	; (8012384 <FLASH_SetErrorCode+0xc8>)
 8012312:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8012314:	4b1a      	ldr	r3, [pc, #104]	; (8012380 <FLASH_SetErrorCode+0xc4>)
 8012316:	2240      	movs	r2, #64	; 0x40
 8012318:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801231a:	4b19      	ldr	r3, [pc, #100]	; (8012380 <FLASH_SetErrorCode+0xc4>)
 801231c:	68db      	ldr	r3, [r3, #12]
 801231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012322:	2b00      	cmp	r3, #0
 8012324:	d008      	beq.n	8012338 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8012326:	4b17      	ldr	r3, [pc, #92]	; (8012384 <FLASH_SetErrorCode+0xc8>)
 8012328:	69db      	ldr	r3, [r3, #28]
 801232a:	f043 0302 	orr.w	r3, r3, #2
 801232e:	4a15      	ldr	r2, [pc, #84]	; (8012384 <FLASH_SetErrorCode+0xc8>)
 8012330:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8012332:	4b13      	ldr	r3, [pc, #76]	; (8012380 <FLASH_SetErrorCode+0xc4>)
 8012334:	2280      	movs	r2, #128	; 0x80
 8012336:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8012338:	4b11      	ldr	r3, [pc, #68]	; (8012380 <FLASH_SetErrorCode+0xc4>)
 801233a:	68db      	ldr	r3, [r3, #12]
 801233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012340:	2b00      	cmp	r3, #0
 8012342:	d009      	beq.n	8012358 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8012344:	4b0f      	ldr	r3, [pc, #60]	; (8012384 <FLASH_SetErrorCode+0xc8>)
 8012346:	69db      	ldr	r3, [r3, #28]
 8012348:	f043 0301 	orr.w	r3, r3, #1
 801234c:	4a0d      	ldr	r2, [pc, #52]	; (8012384 <FLASH_SetErrorCode+0xc8>)
 801234e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8012350:	4b0b      	ldr	r3, [pc, #44]	; (8012380 <FLASH_SetErrorCode+0xc4>)
 8012352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012356:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8012358:	4b09      	ldr	r3, [pc, #36]	; (8012380 <FLASH_SetErrorCode+0xc4>)
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	f003 0302 	and.w	r3, r3, #2
 8012360:	2b00      	cmp	r3, #0
 8012362:	d008      	beq.n	8012376 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8012364:	4b07      	ldr	r3, [pc, #28]	; (8012384 <FLASH_SetErrorCode+0xc8>)
 8012366:	69db      	ldr	r3, [r3, #28]
 8012368:	f043 0320 	orr.w	r3, r3, #32
 801236c:	4a05      	ldr	r2, [pc, #20]	; (8012384 <FLASH_SetErrorCode+0xc8>)
 801236e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012370:	4b03      	ldr	r3, [pc, #12]	; (8012380 <FLASH_SetErrorCode+0xc4>)
 8012372:	2202      	movs	r2, #2
 8012374:	60da      	str	r2, [r3, #12]
  }
}
 8012376:	bf00      	nop
 8012378:	46bd      	mov	sp, r7
 801237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237e:	4770      	bx	lr
 8012380:	40023c00 	.word	0x40023c00
 8012384:	200004f0 	.word	0x200004f0

08012388 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8012388:	b480      	push	{r7}
 801238a:	b085      	sub	sp, #20
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
 8012390:	460b      	mov	r3, r1
 8012392:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8012394:	2300      	movs	r3, #0
 8012396:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8012398:	78fb      	ldrb	r3, [r7, #3]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d102      	bne.n	80123a4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 801239e:	2300      	movs	r3, #0
 80123a0:	60fb      	str	r3, [r7, #12]
 80123a2:	e010      	b.n	80123c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80123a4:	78fb      	ldrb	r3, [r7, #3]
 80123a6:	2b01      	cmp	r3, #1
 80123a8:	d103      	bne.n	80123b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80123aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123ae:	60fb      	str	r3, [r7, #12]
 80123b0:	e009      	b.n	80123c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80123b2:	78fb      	ldrb	r3, [r7, #3]
 80123b4:	2b02      	cmp	r3, #2
 80123b6:	d103      	bne.n	80123c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80123b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80123bc:	60fb      	str	r3, [r7, #12]
 80123be:	e002      	b.n	80123c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80123c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80123c4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80123c6:	4b13      	ldr	r3, [pc, #76]	; (8012414 <FLASH_Erase_Sector+0x8c>)
 80123c8:	691b      	ldr	r3, [r3, #16]
 80123ca:	4a12      	ldr	r2, [pc, #72]	; (8012414 <FLASH_Erase_Sector+0x8c>)
 80123cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80123d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80123d2:	4b10      	ldr	r3, [pc, #64]	; (8012414 <FLASH_Erase_Sector+0x8c>)
 80123d4:	691a      	ldr	r2, [r3, #16]
 80123d6:	490f      	ldr	r1, [pc, #60]	; (8012414 <FLASH_Erase_Sector+0x8c>)
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	4313      	orrs	r3, r2
 80123dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80123de:	4b0d      	ldr	r3, [pc, #52]	; (8012414 <FLASH_Erase_Sector+0x8c>)
 80123e0:	691b      	ldr	r3, [r3, #16]
 80123e2:	4a0c      	ldr	r2, [pc, #48]	; (8012414 <FLASH_Erase_Sector+0x8c>)
 80123e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80123e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80123ea:	4b0a      	ldr	r3, [pc, #40]	; (8012414 <FLASH_Erase_Sector+0x8c>)
 80123ec:	691a      	ldr	r2, [r3, #16]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	00db      	lsls	r3, r3, #3
 80123f2:	4313      	orrs	r3, r2
 80123f4:	4a07      	ldr	r2, [pc, #28]	; (8012414 <FLASH_Erase_Sector+0x8c>)
 80123f6:	f043 0302 	orr.w	r3, r3, #2
 80123fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80123fc:	4b05      	ldr	r3, [pc, #20]	; (8012414 <FLASH_Erase_Sector+0x8c>)
 80123fe:	691b      	ldr	r3, [r3, #16]
 8012400:	4a04      	ldr	r2, [pc, #16]	; (8012414 <FLASH_Erase_Sector+0x8c>)
 8012402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012406:	6113      	str	r3, [r2, #16]
}
 8012408:	bf00      	nop
 801240a:	3714      	adds	r7, #20
 801240c:	46bd      	mov	sp, r7
 801240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012412:	4770      	bx	lr
 8012414:	40023c00 	.word	0x40023c00

08012418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012418:	b480      	push	{r7}
 801241a:	b089      	sub	sp, #36	; 0x24
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012422:	2300      	movs	r3, #0
 8012424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012426:	2300      	movs	r3, #0
 8012428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801242a:	2300      	movs	r3, #0
 801242c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801242e:	2300      	movs	r3, #0
 8012430:	61fb      	str	r3, [r7, #28]
 8012432:	e159      	b.n	80126e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012434:	2201      	movs	r2, #1
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	fa02 f303 	lsl.w	r3, r2, r3
 801243c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	697a      	ldr	r2, [r7, #20]
 8012444:	4013      	ands	r3, r2
 8012446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012448:	693a      	ldr	r2, [r7, #16]
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	429a      	cmp	r2, r3
 801244e:	f040 8148 	bne.w	80126e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	685b      	ldr	r3, [r3, #4]
 8012456:	f003 0303 	and.w	r3, r3, #3
 801245a:	2b01      	cmp	r3, #1
 801245c:	d005      	beq.n	801246a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	685b      	ldr	r3, [r3, #4]
 8012462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012466:	2b02      	cmp	r3, #2
 8012468:	d130      	bne.n	80124cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	689b      	ldr	r3, [r3, #8]
 801246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	005b      	lsls	r3, r3, #1
 8012474:	2203      	movs	r2, #3
 8012476:	fa02 f303 	lsl.w	r3, r2, r3
 801247a:	43db      	mvns	r3, r3
 801247c:	69ba      	ldr	r2, [r7, #24]
 801247e:	4013      	ands	r3, r2
 8012480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	68da      	ldr	r2, [r3, #12]
 8012486:	69fb      	ldr	r3, [r7, #28]
 8012488:	005b      	lsls	r3, r3, #1
 801248a:	fa02 f303 	lsl.w	r3, r2, r3
 801248e:	69ba      	ldr	r2, [r7, #24]
 8012490:	4313      	orrs	r3, r2
 8012492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	69ba      	ldr	r2, [r7, #24]
 8012498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	685b      	ldr	r3, [r3, #4]
 801249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80124a0:	2201      	movs	r2, #1
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	fa02 f303 	lsl.w	r3, r2, r3
 80124a8:	43db      	mvns	r3, r3
 80124aa:	69ba      	ldr	r2, [r7, #24]
 80124ac:	4013      	ands	r3, r2
 80124ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	091b      	lsrs	r3, r3, #4
 80124b6:	f003 0201 	and.w	r2, r3, #1
 80124ba:	69fb      	ldr	r3, [r7, #28]
 80124bc:	fa02 f303 	lsl.w	r3, r2, r3
 80124c0:	69ba      	ldr	r2, [r7, #24]
 80124c2:	4313      	orrs	r3, r2
 80124c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	69ba      	ldr	r2, [r7, #24]
 80124ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	f003 0303 	and.w	r3, r3, #3
 80124d4:	2b03      	cmp	r3, #3
 80124d6:	d017      	beq.n	8012508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	68db      	ldr	r3, [r3, #12]
 80124dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80124de:	69fb      	ldr	r3, [r7, #28]
 80124e0:	005b      	lsls	r3, r3, #1
 80124e2:	2203      	movs	r2, #3
 80124e4:	fa02 f303 	lsl.w	r3, r2, r3
 80124e8:	43db      	mvns	r3, r3
 80124ea:	69ba      	ldr	r2, [r7, #24]
 80124ec:	4013      	ands	r3, r2
 80124ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	689a      	ldr	r2, [r3, #8]
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	005b      	lsls	r3, r3, #1
 80124f8:	fa02 f303 	lsl.w	r3, r2, r3
 80124fc:	69ba      	ldr	r2, [r7, #24]
 80124fe:	4313      	orrs	r3, r2
 8012500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	69ba      	ldr	r2, [r7, #24]
 8012506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	685b      	ldr	r3, [r3, #4]
 801250c:	f003 0303 	and.w	r3, r3, #3
 8012510:	2b02      	cmp	r3, #2
 8012512:	d123      	bne.n	801255c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	08da      	lsrs	r2, r3, #3
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	3208      	adds	r2, #8
 801251c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	f003 0307 	and.w	r3, r3, #7
 8012528:	009b      	lsls	r3, r3, #2
 801252a:	220f      	movs	r2, #15
 801252c:	fa02 f303 	lsl.w	r3, r2, r3
 8012530:	43db      	mvns	r3, r3
 8012532:	69ba      	ldr	r2, [r7, #24]
 8012534:	4013      	ands	r3, r2
 8012536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	691a      	ldr	r2, [r3, #16]
 801253c:	69fb      	ldr	r3, [r7, #28]
 801253e:	f003 0307 	and.w	r3, r3, #7
 8012542:	009b      	lsls	r3, r3, #2
 8012544:	fa02 f303 	lsl.w	r3, r2, r3
 8012548:	69ba      	ldr	r2, [r7, #24]
 801254a:	4313      	orrs	r3, r2
 801254c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801254e:	69fb      	ldr	r3, [r7, #28]
 8012550:	08da      	lsrs	r2, r3, #3
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	3208      	adds	r2, #8
 8012556:	69b9      	ldr	r1, [r7, #24]
 8012558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012562:	69fb      	ldr	r3, [r7, #28]
 8012564:	005b      	lsls	r3, r3, #1
 8012566:	2203      	movs	r2, #3
 8012568:	fa02 f303 	lsl.w	r3, r2, r3
 801256c:	43db      	mvns	r3, r3
 801256e:	69ba      	ldr	r2, [r7, #24]
 8012570:	4013      	ands	r3, r2
 8012572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	685b      	ldr	r3, [r3, #4]
 8012578:	f003 0203 	and.w	r2, r3, #3
 801257c:	69fb      	ldr	r3, [r7, #28]
 801257e:	005b      	lsls	r3, r3, #1
 8012580:	fa02 f303 	lsl.w	r3, r2, r3
 8012584:	69ba      	ldr	r2, [r7, #24]
 8012586:	4313      	orrs	r3, r2
 8012588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	69ba      	ldr	r2, [r7, #24]
 801258e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012598:	2b00      	cmp	r3, #0
 801259a:	f000 80a2 	beq.w	80126e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801259e:	2300      	movs	r3, #0
 80125a0:	60fb      	str	r3, [r7, #12]
 80125a2:	4b57      	ldr	r3, [pc, #348]	; (8012700 <HAL_GPIO_Init+0x2e8>)
 80125a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125a6:	4a56      	ldr	r2, [pc, #344]	; (8012700 <HAL_GPIO_Init+0x2e8>)
 80125a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80125ac:	6453      	str	r3, [r2, #68]	; 0x44
 80125ae:	4b54      	ldr	r3, [pc, #336]	; (8012700 <HAL_GPIO_Init+0x2e8>)
 80125b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80125b6:	60fb      	str	r3, [r7, #12]
 80125b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80125ba:	4a52      	ldr	r2, [pc, #328]	; (8012704 <HAL_GPIO_Init+0x2ec>)
 80125bc:	69fb      	ldr	r3, [r7, #28]
 80125be:	089b      	lsrs	r3, r3, #2
 80125c0:	3302      	adds	r3, #2
 80125c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	f003 0303 	and.w	r3, r3, #3
 80125ce:	009b      	lsls	r3, r3, #2
 80125d0:	220f      	movs	r2, #15
 80125d2:	fa02 f303 	lsl.w	r3, r2, r3
 80125d6:	43db      	mvns	r3, r3
 80125d8:	69ba      	ldr	r2, [r7, #24]
 80125da:	4013      	ands	r3, r2
 80125dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4a49      	ldr	r2, [pc, #292]	; (8012708 <HAL_GPIO_Init+0x2f0>)
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d019      	beq.n	801261a <HAL_GPIO_Init+0x202>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	4a48      	ldr	r2, [pc, #288]	; (801270c <HAL_GPIO_Init+0x2f4>)
 80125ea:	4293      	cmp	r3, r2
 80125ec:	d013      	beq.n	8012616 <HAL_GPIO_Init+0x1fe>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	4a47      	ldr	r2, [pc, #284]	; (8012710 <HAL_GPIO_Init+0x2f8>)
 80125f2:	4293      	cmp	r3, r2
 80125f4:	d00d      	beq.n	8012612 <HAL_GPIO_Init+0x1fa>
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	4a46      	ldr	r2, [pc, #280]	; (8012714 <HAL_GPIO_Init+0x2fc>)
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d007      	beq.n	801260e <HAL_GPIO_Init+0x1f6>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	4a45      	ldr	r2, [pc, #276]	; (8012718 <HAL_GPIO_Init+0x300>)
 8012602:	4293      	cmp	r3, r2
 8012604:	d101      	bne.n	801260a <HAL_GPIO_Init+0x1f2>
 8012606:	2304      	movs	r3, #4
 8012608:	e008      	b.n	801261c <HAL_GPIO_Init+0x204>
 801260a:	2307      	movs	r3, #7
 801260c:	e006      	b.n	801261c <HAL_GPIO_Init+0x204>
 801260e:	2303      	movs	r3, #3
 8012610:	e004      	b.n	801261c <HAL_GPIO_Init+0x204>
 8012612:	2302      	movs	r3, #2
 8012614:	e002      	b.n	801261c <HAL_GPIO_Init+0x204>
 8012616:	2301      	movs	r3, #1
 8012618:	e000      	b.n	801261c <HAL_GPIO_Init+0x204>
 801261a:	2300      	movs	r3, #0
 801261c:	69fa      	ldr	r2, [r7, #28]
 801261e:	f002 0203 	and.w	r2, r2, #3
 8012622:	0092      	lsls	r2, r2, #2
 8012624:	4093      	lsls	r3, r2
 8012626:	69ba      	ldr	r2, [r7, #24]
 8012628:	4313      	orrs	r3, r2
 801262a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801262c:	4935      	ldr	r1, [pc, #212]	; (8012704 <HAL_GPIO_Init+0x2ec>)
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	089b      	lsrs	r3, r3, #2
 8012632:	3302      	adds	r3, #2
 8012634:	69ba      	ldr	r2, [r7, #24]
 8012636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801263a:	4b38      	ldr	r3, [pc, #224]	; (801271c <HAL_GPIO_Init+0x304>)
 801263c:	689b      	ldr	r3, [r3, #8]
 801263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	43db      	mvns	r3, r3
 8012644:	69ba      	ldr	r2, [r7, #24]
 8012646:	4013      	ands	r3, r2
 8012648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012652:	2b00      	cmp	r3, #0
 8012654:	d003      	beq.n	801265e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8012656:	69ba      	ldr	r2, [r7, #24]
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	4313      	orrs	r3, r2
 801265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801265e:	4a2f      	ldr	r2, [pc, #188]	; (801271c <HAL_GPIO_Init+0x304>)
 8012660:	69bb      	ldr	r3, [r7, #24]
 8012662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012664:	4b2d      	ldr	r3, [pc, #180]	; (801271c <HAL_GPIO_Init+0x304>)
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	43db      	mvns	r3, r3
 801266e:	69ba      	ldr	r2, [r7, #24]
 8012670:	4013      	ands	r3, r2
 8012672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801267c:	2b00      	cmp	r3, #0
 801267e:	d003      	beq.n	8012688 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8012680:	69ba      	ldr	r2, [r7, #24]
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	4313      	orrs	r3, r2
 8012686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012688:	4a24      	ldr	r2, [pc, #144]	; (801271c <HAL_GPIO_Init+0x304>)
 801268a:	69bb      	ldr	r3, [r7, #24]
 801268c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801268e:	4b23      	ldr	r3, [pc, #140]	; (801271c <HAL_GPIO_Init+0x304>)
 8012690:	685b      	ldr	r3, [r3, #4]
 8012692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	43db      	mvns	r3, r3
 8012698:	69ba      	ldr	r2, [r7, #24]
 801269a:	4013      	ands	r3, r2
 801269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	685b      	ldr	r3, [r3, #4]
 80126a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d003      	beq.n	80126b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80126aa:	69ba      	ldr	r2, [r7, #24]
 80126ac:	693b      	ldr	r3, [r7, #16]
 80126ae:	4313      	orrs	r3, r2
 80126b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80126b2:	4a1a      	ldr	r2, [pc, #104]	; (801271c <HAL_GPIO_Init+0x304>)
 80126b4:	69bb      	ldr	r3, [r7, #24]
 80126b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80126b8:	4b18      	ldr	r3, [pc, #96]	; (801271c <HAL_GPIO_Init+0x304>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	43db      	mvns	r3, r3
 80126c2:	69ba      	ldr	r2, [r7, #24]
 80126c4:	4013      	ands	r3, r2
 80126c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d003      	beq.n	80126dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80126d4:	69ba      	ldr	r2, [r7, #24]
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	4313      	orrs	r3, r2
 80126da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80126dc:	4a0f      	ldr	r2, [pc, #60]	; (801271c <HAL_GPIO_Init+0x304>)
 80126de:	69bb      	ldr	r3, [r7, #24]
 80126e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	3301      	adds	r3, #1
 80126e6:	61fb      	str	r3, [r7, #28]
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	2b0f      	cmp	r3, #15
 80126ec:	f67f aea2 	bls.w	8012434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80126f0:	bf00      	nop
 80126f2:	bf00      	nop
 80126f4:	3724      	adds	r7, #36	; 0x24
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr
 80126fe:	bf00      	nop
 8012700:	40023800 	.word	0x40023800
 8012704:	40013800 	.word	0x40013800
 8012708:	40020000 	.word	0x40020000
 801270c:	40020400 	.word	0x40020400
 8012710:	40020800 	.word	0x40020800
 8012714:	40020c00 	.word	0x40020c00
 8012718:	40021000 	.word	0x40021000
 801271c:	40013c00 	.word	0x40013c00

08012720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012720:	b480      	push	{r7}
 8012722:	b085      	sub	sp, #20
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
 8012728:	460b      	mov	r3, r1
 801272a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	691a      	ldr	r2, [r3, #16]
 8012730:	887b      	ldrh	r3, [r7, #2]
 8012732:	4013      	ands	r3, r2
 8012734:	2b00      	cmp	r3, #0
 8012736:	d002      	beq.n	801273e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012738:	2301      	movs	r3, #1
 801273a:	73fb      	strb	r3, [r7, #15]
 801273c:	e001      	b.n	8012742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801273e:	2300      	movs	r3, #0
 8012740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012742:	7bfb      	ldrb	r3, [r7, #15]
}
 8012744:	4618      	mov	r0, r3
 8012746:	3714      	adds	r7, #20
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr

08012750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	460b      	mov	r3, r1
 801275a:	807b      	strh	r3, [r7, #2]
 801275c:	4613      	mov	r3, r2
 801275e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012760:	787b      	ldrb	r3, [r7, #1]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d003      	beq.n	801276e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012766:	887a      	ldrh	r2, [r7, #2]
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801276c:	e003      	b.n	8012776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801276e:	887b      	ldrh	r3, [r7, #2]
 8012770:	041a      	lsls	r2, r3, #16
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	619a      	str	r2, [r3, #24]
}
 8012776:	bf00      	nop
 8012778:	370c      	adds	r7, #12
 801277a:	46bd      	mov	sp, r7
 801277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012780:	4770      	bx	lr
	...

08012784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b086      	sub	sp, #24
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d101      	bne.n	8012796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012792:	2301      	movs	r3, #1
 8012794:	e267      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f003 0301 	and.w	r3, r3, #1
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d075      	beq.n	801288e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80127a2:	4b88      	ldr	r3, [pc, #544]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 80127a4:	689b      	ldr	r3, [r3, #8]
 80127a6:	f003 030c 	and.w	r3, r3, #12
 80127aa:	2b04      	cmp	r3, #4
 80127ac:	d00c      	beq.n	80127c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80127ae:	4b85      	ldr	r3, [pc, #532]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 80127b0:	689b      	ldr	r3, [r3, #8]
 80127b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80127b6:	2b08      	cmp	r3, #8
 80127b8:	d112      	bne.n	80127e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80127ba:	4b82      	ldr	r3, [pc, #520]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80127c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80127c6:	d10b      	bne.n	80127e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80127c8:	4b7e      	ldr	r3, [pc, #504]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d05b      	beq.n	801288c <HAL_RCC_OscConfig+0x108>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	685b      	ldr	r3, [r3, #4]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d157      	bne.n	801288c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80127dc:	2301      	movs	r3, #1
 80127de:	e242      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127e8:	d106      	bne.n	80127f8 <HAL_RCC_OscConfig+0x74>
 80127ea:	4b76      	ldr	r3, [pc, #472]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	4a75      	ldr	r2, [pc, #468]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 80127f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80127f4:	6013      	str	r3, [r2, #0]
 80127f6:	e01d      	b.n	8012834 <HAL_RCC_OscConfig+0xb0>
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	685b      	ldr	r3, [r3, #4]
 80127fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012800:	d10c      	bne.n	801281c <HAL_RCC_OscConfig+0x98>
 8012802:	4b70      	ldr	r3, [pc, #448]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	4a6f      	ldr	r2, [pc, #444]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 8012808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801280c:	6013      	str	r3, [r2, #0]
 801280e:	4b6d      	ldr	r3, [pc, #436]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	4a6c      	ldr	r2, [pc, #432]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 8012814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012818:	6013      	str	r3, [r2, #0]
 801281a:	e00b      	b.n	8012834 <HAL_RCC_OscConfig+0xb0>
 801281c:	4b69      	ldr	r3, [pc, #420]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	4a68      	ldr	r2, [pc, #416]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 8012822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012826:	6013      	str	r3, [r2, #0]
 8012828:	4b66      	ldr	r3, [pc, #408]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	4a65      	ldr	r2, [pc, #404]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 801282e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d013      	beq.n	8012864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801283c:	f7fe fcb4 	bl	80111a8 <HAL_GetTick>
 8012840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012842:	e008      	b.n	8012856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012844:	f7fe fcb0 	bl	80111a8 <HAL_GetTick>
 8012848:	4602      	mov	r2, r0
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	1ad3      	subs	r3, r2, r3
 801284e:	2b64      	cmp	r3, #100	; 0x64
 8012850:	d901      	bls.n	8012856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012852:	2303      	movs	r3, #3
 8012854:	e207      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012856:	4b5b      	ldr	r3, [pc, #364]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801285e:	2b00      	cmp	r3, #0
 8012860:	d0f0      	beq.n	8012844 <HAL_RCC_OscConfig+0xc0>
 8012862:	e014      	b.n	801288e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012864:	f7fe fca0 	bl	80111a8 <HAL_GetTick>
 8012868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801286a:	e008      	b.n	801287e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801286c:	f7fe fc9c 	bl	80111a8 <HAL_GetTick>
 8012870:	4602      	mov	r2, r0
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	1ad3      	subs	r3, r2, r3
 8012876:	2b64      	cmp	r3, #100	; 0x64
 8012878:	d901      	bls.n	801287e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801287a:	2303      	movs	r3, #3
 801287c:	e1f3      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801287e:	4b51      	ldr	r3, [pc, #324]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012886:	2b00      	cmp	r3, #0
 8012888:	d1f0      	bne.n	801286c <HAL_RCC_OscConfig+0xe8>
 801288a:	e000      	b.n	801288e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801288c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	f003 0302 	and.w	r3, r3, #2
 8012896:	2b00      	cmp	r3, #0
 8012898:	d063      	beq.n	8012962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801289a:	4b4a      	ldr	r3, [pc, #296]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 801289c:	689b      	ldr	r3, [r3, #8]
 801289e:	f003 030c 	and.w	r3, r3, #12
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d00b      	beq.n	80128be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80128a6:	4b47      	ldr	r3, [pc, #284]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 80128a8:	689b      	ldr	r3, [r3, #8]
 80128aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80128ae:	2b08      	cmp	r3, #8
 80128b0:	d11c      	bne.n	80128ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80128b2:	4b44      	ldr	r3, [pc, #272]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d116      	bne.n	80128ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80128be:	4b41      	ldr	r3, [pc, #260]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	f003 0302 	and.w	r3, r3, #2
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d005      	beq.n	80128d6 <HAL_RCC_OscConfig+0x152>
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	68db      	ldr	r3, [r3, #12]
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d001      	beq.n	80128d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80128d2:	2301      	movs	r3, #1
 80128d4:	e1c7      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80128d6:	4b3b      	ldr	r3, [pc, #236]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	691b      	ldr	r3, [r3, #16]
 80128e2:	00db      	lsls	r3, r3, #3
 80128e4:	4937      	ldr	r1, [pc, #220]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 80128e6:	4313      	orrs	r3, r2
 80128e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80128ea:	e03a      	b.n	8012962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	68db      	ldr	r3, [r3, #12]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d020      	beq.n	8012936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80128f4:	4b34      	ldr	r3, [pc, #208]	; (80129c8 <HAL_RCC_OscConfig+0x244>)
 80128f6:	2201      	movs	r2, #1
 80128f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80128fa:	f7fe fc55 	bl	80111a8 <HAL_GetTick>
 80128fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012900:	e008      	b.n	8012914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012902:	f7fe fc51 	bl	80111a8 <HAL_GetTick>
 8012906:	4602      	mov	r2, r0
 8012908:	693b      	ldr	r3, [r7, #16]
 801290a:	1ad3      	subs	r3, r2, r3
 801290c:	2b02      	cmp	r3, #2
 801290e:	d901      	bls.n	8012914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012910:	2303      	movs	r3, #3
 8012912:	e1a8      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012914:	4b2b      	ldr	r3, [pc, #172]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	f003 0302 	and.w	r3, r3, #2
 801291c:	2b00      	cmp	r3, #0
 801291e:	d0f0      	beq.n	8012902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012920:	4b28      	ldr	r3, [pc, #160]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	691b      	ldr	r3, [r3, #16]
 801292c:	00db      	lsls	r3, r3, #3
 801292e:	4925      	ldr	r1, [pc, #148]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 8012930:	4313      	orrs	r3, r2
 8012932:	600b      	str	r3, [r1, #0]
 8012934:	e015      	b.n	8012962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012936:	4b24      	ldr	r3, [pc, #144]	; (80129c8 <HAL_RCC_OscConfig+0x244>)
 8012938:	2200      	movs	r2, #0
 801293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801293c:	f7fe fc34 	bl	80111a8 <HAL_GetTick>
 8012940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012942:	e008      	b.n	8012956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012944:	f7fe fc30 	bl	80111a8 <HAL_GetTick>
 8012948:	4602      	mov	r2, r0
 801294a:	693b      	ldr	r3, [r7, #16]
 801294c:	1ad3      	subs	r3, r2, r3
 801294e:	2b02      	cmp	r3, #2
 8012950:	d901      	bls.n	8012956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012952:	2303      	movs	r3, #3
 8012954:	e187      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012956:	4b1b      	ldr	r3, [pc, #108]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	f003 0302 	and.w	r3, r3, #2
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1f0      	bne.n	8012944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f003 0308 	and.w	r3, r3, #8
 801296a:	2b00      	cmp	r3, #0
 801296c:	d036      	beq.n	80129dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	695b      	ldr	r3, [r3, #20]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d016      	beq.n	80129a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012976:	4b15      	ldr	r3, [pc, #84]	; (80129cc <HAL_RCC_OscConfig+0x248>)
 8012978:	2201      	movs	r2, #1
 801297a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801297c:	f7fe fc14 	bl	80111a8 <HAL_GetTick>
 8012980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012982:	e008      	b.n	8012996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012984:	f7fe fc10 	bl	80111a8 <HAL_GetTick>
 8012988:	4602      	mov	r2, r0
 801298a:	693b      	ldr	r3, [r7, #16]
 801298c:	1ad3      	subs	r3, r2, r3
 801298e:	2b02      	cmp	r3, #2
 8012990:	d901      	bls.n	8012996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012992:	2303      	movs	r3, #3
 8012994:	e167      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012996:	4b0b      	ldr	r3, [pc, #44]	; (80129c4 <HAL_RCC_OscConfig+0x240>)
 8012998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801299a:	f003 0302 	and.w	r3, r3, #2
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d0f0      	beq.n	8012984 <HAL_RCC_OscConfig+0x200>
 80129a2:	e01b      	b.n	80129dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80129a4:	4b09      	ldr	r3, [pc, #36]	; (80129cc <HAL_RCC_OscConfig+0x248>)
 80129a6:	2200      	movs	r2, #0
 80129a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80129aa:	f7fe fbfd 	bl	80111a8 <HAL_GetTick>
 80129ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80129b0:	e00e      	b.n	80129d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80129b2:	f7fe fbf9 	bl	80111a8 <HAL_GetTick>
 80129b6:	4602      	mov	r2, r0
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	1ad3      	subs	r3, r2, r3
 80129bc:	2b02      	cmp	r3, #2
 80129be:	d907      	bls.n	80129d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80129c0:	2303      	movs	r3, #3
 80129c2:	e150      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
 80129c4:	40023800 	.word	0x40023800
 80129c8:	42470000 	.word	0x42470000
 80129cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80129d0:	4b88      	ldr	r3, [pc, #544]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 80129d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129d4:	f003 0302 	and.w	r3, r3, #2
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d1ea      	bne.n	80129b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	f003 0304 	and.w	r3, r3, #4
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f000 8097 	beq.w	8012b18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80129ea:	2300      	movs	r3, #0
 80129ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80129ee:	4b81      	ldr	r3, [pc, #516]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 80129f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d10f      	bne.n	8012a1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80129fa:	2300      	movs	r3, #0
 80129fc:	60bb      	str	r3, [r7, #8]
 80129fe:	4b7d      	ldr	r3, [pc, #500]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a02:	4a7c      	ldr	r2, [pc, #496]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012a08:	6413      	str	r3, [r2, #64]	; 0x40
 8012a0a:	4b7a      	ldr	r3, [pc, #488]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012a12:	60bb      	str	r3, [r7, #8]
 8012a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012a16:	2301      	movs	r3, #1
 8012a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012a1a:	4b77      	ldr	r3, [pc, #476]	; (8012bf8 <HAL_RCC_OscConfig+0x474>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d118      	bne.n	8012a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012a26:	4b74      	ldr	r3, [pc, #464]	; (8012bf8 <HAL_RCC_OscConfig+0x474>)
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	4a73      	ldr	r2, [pc, #460]	; (8012bf8 <HAL_RCC_OscConfig+0x474>)
 8012a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012a32:	f7fe fbb9 	bl	80111a8 <HAL_GetTick>
 8012a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012a38:	e008      	b.n	8012a4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012a3a:	f7fe fbb5 	bl	80111a8 <HAL_GetTick>
 8012a3e:	4602      	mov	r2, r0
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	1ad3      	subs	r3, r2, r3
 8012a44:	2b02      	cmp	r3, #2
 8012a46:	d901      	bls.n	8012a4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8012a48:	2303      	movs	r3, #3
 8012a4a:	e10c      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012a4c:	4b6a      	ldr	r3, [pc, #424]	; (8012bf8 <HAL_RCC_OscConfig+0x474>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d0f0      	beq.n	8012a3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	689b      	ldr	r3, [r3, #8]
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d106      	bne.n	8012a6e <HAL_RCC_OscConfig+0x2ea>
 8012a60:	4b64      	ldr	r3, [pc, #400]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a64:	4a63      	ldr	r2, [pc, #396]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012a66:	f043 0301 	orr.w	r3, r3, #1
 8012a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8012a6c:	e01c      	b.n	8012aa8 <HAL_RCC_OscConfig+0x324>
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	689b      	ldr	r3, [r3, #8]
 8012a72:	2b05      	cmp	r3, #5
 8012a74:	d10c      	bne.n	8012a90 <HAL_RCC_OscConfig+0x30c>
 8012a76:	4b5f      	ldr	r3, [pc, #380]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a7a:	4a5e      	ldr	r2, [pc, #376]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012a7c:	f043 0304 	orr.w	r3, r3, #4
 8012a80:	6713      	str	r3, [r2, #112]	; 0x70
 8012a82:	4b5c      	ldr	r3, [pc, #368]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a86:	4a5b      	ldr	r2, [pc, #364]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012a88:	f043 0301 	orr.w	r3, r3, #1
 8012a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8012a8e:	e00b      	b.n	8012aa8 <HAL_RCC_OscConfig+0x324>
 8012a90:	4b58      	ldr	r3, [pc, #352]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a94:	4a57      	ldr	r2, [pc, #348]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012a96:	f023 0301 	bic.w	r3, r3, #1
 8012a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8012a9c:	4b55      	ldr	r3, [pc, #340]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012aa0:	4a54      	ldr	r2, [pc, #336]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012aa2:	f023 0304 	bic.w	r3, r3, #4
 8012aa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	689b      	ldr	r3, [r3, #8]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d015      	beq.n	8012adc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012ab0:	f7fe fb7a 	bl	80111a8 <HAL_GetTick>
 8012ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012ab6:	e00a      	b.n	8012ace <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012ab8:	f7fe fb76 	bl	80111a8 <HAL_GetTick>
 8012abc:	4602      	mov	r2, r0
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ac6:	4293      	cmp	r3, r2
 8012ac8:	d901      	bls.n	8012ace <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8012aca:	2303      	movs	r3, #3
 8012acc:	e0cb      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012ace:	4b49      	ldr	r3, [pc, #292]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ad2:	f003 0302 	and.w	r3, r3, #2
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d0ee      	beq.n	8012ab8 <HAL_RCC_OscConfig+0x334>
 8012ada:	e014      	b.n	8012b06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012adc:	f7fe fb64 	bl	80111a8 <HAL_GetTick>
 8012ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012ae2:	e00a      	b.n	8012afa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012ae4:	f7fe fb60 	bl	80111a8 <HAL_GetTick>
 8012ae8:	4602      	mov	r2, r0
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	1ad3      	subs	r3, r2, r3
 8012aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8012af2:	4293      	cmp	r3, r2
 8012af4:	d901      	bls.n	8012afa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8012af6:	2303      	movs	r3, #3
 8012af8:	e0b5      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012afa:	4b3e      	ldr	r3, [pc, #248]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012afe:	f003 0302 	and.w	r3, r3, #2
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d1ee      	bne.n	8012ae4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012b06:	7dfb      	ldrb	r3, [r7, #23]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d105      	bne.n	8012b18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012b0c:	4b39      	ldr	r3, [pc, #228]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b10:	4a38      	ldr	r2, [pc, #224]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012b16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	699b      	ldr	r3, [r3, #24]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	f000 80a1 	beq.w	8012c64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012b22:	4b34      	ldr	r3, [pc, #208]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012b24:	689b      	ldr	r3, [r3, #8]
 8012b26:	f003 030c 	and.w	r3, r3, #12
 8012b2a:	2b08      	cmp	r3, #8
 8012b2c:	d05c      	beq.n	8012be8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	699b      	ldr	r3, [r3, #24]
 8012b32:	2b02      	cmp	r3, #2
 8012b34:	d141      	bne.n	8012bba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012b36:	4b31      	ldr	r3, [pc, #196]	; (8012bfc <HAL_RCC_OscConfig+0x478>)
 8012b38:	2200      	movs	r2, #0
 8012b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012b3c:	f7fe fb34 	bl	80111a8 <HAL_GetTick>
 8012b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012b42:	e008      	b.n	8012b56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012b44:	f7fe fb30 	bl	80111a8 <HAL_GetTick>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	1ad3      	subs	r3, r2, r3
 8012b4e:	2b02      	cmp	r3, #2
 8012b50:	d901      	bls.n	8012b56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8012b52:	2303      	movs	r3, #3
 8012b54:	e087      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012b56:	4b27      	ldr	r3, [pc, #156]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d1f0      	bne.n	8012b44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	69da      	ldr	r2, [r3, #28]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	6a1b      	ldr	r3, [r3, #32]
 8012b6a:	431a      	orrs	r2, r3
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b70:	019b      	lsls	r3, r3, #6
 8012b72:	431a      	orrs	r2, r3
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b78:	085b      	lsrs	r3, r3, #1
 8012b7a:	3b01      	subs	r3, #1
 8012b7c:	041b      	lsls	r3, r3, #16
 8012b7e:	431a      	orrs	r2, r3
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b84:	061b      	lsls	r3, r3, #24
 8012b86:	491b      	ldr	r1, [pc, #108]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012b88:	4313      	orrs	r3, r2
 8012b8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012b8c:	4b1b      	ldr	r3, [pc, #108]	; (8012bfc <HAL_RCC_OscConfig+0x478>)
 8012b8e:	2201      	movs	r2, #1
 8012b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012b92:	f7fe fb09 	bl	80111a8 <HAL_GetTick>
 8012b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012b98:	e008      	b.n	8012bac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012b9a:	f7fe fb05 	bl	80111a8 <HAL_GetTick>
 8012b9e:	4602      	mov	r2, r0
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	1ad3      	subs	r3, r2, r3
 8012ba4:	2b02      	cmp	r3, #2
 8012ba6:	d901      	bls.n	8012bac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8012ba8:	2303      	movs	r3, #3
 8012baa:	e05c      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012bac:	4b11      	ldr	r3, [pc, #68]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d0f0      	beq.n	8012b9a <HAL_RCC_OscConfig+0x416>
 8012bb8:	e054      	b.n	8012c64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012bba:	4b10      	ldr	r3, [pc, #64]	; (8012bfc <HAL_RCC_OscConfig+0x478>)
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012bc0:	f7fe faf2 	bl	80111a8 <HAL_GetTick>
 8012bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012bc6:	e008      	b.n	8012bda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012bc8:	f7fe faee 	bl	80111a8 <HAL_GetTick>
 8012bcc:	4602      	mov	r2, r0
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	1ad3      	subs	r3, r2, r3
 8012bd2:	2b02      	cmp	r3, #2
 8012bd4:	d901      	bls.n	8012bda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8012bd6:	2303      	movs	r3, #3
 8012bd8:	e045      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012bda:	4b06      	ldr	r3, [pc, #24]	; (8012bf4 <HAL_RCC_OscConfig+0x470>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d1f0      	bne.n	8012bc8 <HAL_RCC_OscConfig+0x444>
 8012be6:	e03d      	b.n	8012c64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	699b      	ldr	r3, [r3, #24]
 8012bec:	2b01      	cmp	r3, #1
 8012bee:	d107      	bne.n	8012c00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	e038      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
 8012bf4:	40023800 	.word	0x40023800
 8012bf8:	40007000 	.word	0x40007000
 8012bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012c00:	4b1b      	ldr	r3, [pc, #108]	; (8012c70 <HAL_RCC_OscConfig+0x4ec>)
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	699b      	ldr	r3, [r3, #24]
 8012c0a:	2b01      	cmp	r3, #1
 8012c0c:	d028      	beq.n	8012c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d121      	bne.n	8012c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d11a      	bne.n	8012c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012c2a:	68fa      	ldr	r2, [r7, #12]
 8012c2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012c30:	4013      	ands	r3, r2
 8012c32:	687a      	ldr	r2, [r7, #4]
 8012c34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012c38:	4293      	cmp	r3, r2
 8012c3a:	d111      	bne.n	8012c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c46:	085b      	lsrs	r3, r3, #1
 8012c48:	3b01      	subs	r3, #1
 8012c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d107      	bne.n	8012c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d001      	beq.n	8012c64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8012c60:	2301      	movs	r3, #1
 8012c62:	e000      	b.n	8012c66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8012c64:	2300      	movs	r3, #0
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	3718      	adds	r7, #24
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}
 8012c6e:	bf00      	nop
 8012c70:	40023800 	.word	0x40023800

08012c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b084      	sub	sp, #16
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d101      	bne.n	8012c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012c84:	2301      	movs	r3, #1
 8012c86:	e0cc      	b.n	8012e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012c88:	4b68      	ldr	r3, [pc, #416]	; (8012e2c <HAL_RCC_ClockConfig+0x1b8>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	f003 0307 	and.w	r3, r3, #7
 8012c90:	683a      	ldr	r2, [r7, #0]
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d90c      	bls.n	8012cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012c96:	4b65      	ldr	r3, [pc, #404]	; (8012e2c <HAL_RCC_ClockConfig+0x1b8>)
 8012c98:	683a      	ldr	r2, [r7, #0]
 8012c9a:	b2d2      	uxtb	r2, r2
 8012c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012c9e:	4b63      	ldr	r3, [pc, #396]	; (8012e2c <HAL_RCC_ClockConfig+0x1b8>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	f003 0307 	and.w	r3, r3, #7
 8012ca6:	683a      	ldr	r2, [r7, #0]
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	d001      	beq.n	8012cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012cac:	2301      	movs	r3, #1
 8012cae:	e0b8      	b.n	8012e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f003 0302 	and.w	r3, r3, #2
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d020      	beq.n	8012cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	f003 0304 	and.w	r3, r3, #4
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d005      	beq.n	8012cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012cc8:	4b59      	ldr	r3, [pc, #356]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012cca:	689b      	ldr	r3, [r3, #8]
 8012ccc:	4a58      	ldr	r2, [pc, #352]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	f003 0308 	and.w	r3, r3, #8
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d005      	beq.n	8012cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012ce0:	4b53      	ldr	r3, [pc, #332]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012ce2:	689b      	ldr	r3, [r3, #8]
 8012ce4:	4a52      	ldr	r2, [pc, #328]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012cec:	4b50      	ldr	r3, [pc, #320]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012cee:	689b      	ldr	r3, [r3, #8]
 8012cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	689b      	ldr	r3, [r3, #8]
 8012cf8:	494d      	ldr	r1, [pc, #308]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012cfa:	4313      	orrs	r3, r2
 8012cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	f003 0301 	and.w	r3, r3, #1
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d044      	beq.n	8012d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	685b      	ldr	r3, [r3, #4]
 8012d0e:	2b01      	cmp	r3, #1
 8012d10:	d107      	bne.n	8012d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012d12:	4b47      	ldr	r3, [pc, #284]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d119      	bne.n	8012d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e07f      	b.n	8012e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	685b      	ldr	r3, [r3, #4]
 8012d26:	2b02      	cmp	r3, #2
 8012d28:	d003      	beq.n	8012d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012d2e:	2b03      	cmp	r3, #3
 8012d30:	d107      	bne.n	8012d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012d32:	4b3f      	ldr	r3, [pc, #252]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d109      	bne.n	8012d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012d3e:	2301      	movs	r3, #1
 8012d40:	e06f      	b.n	8012e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012d42:	4b3b      	ldr	r3, [pc, #236]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f003 0302 	and.w	r3, r3, #2
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d101      	bne.n	8012d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012d4e:	2301      	movs	r3, #1
 8012d50:	e067      	b.n	8012e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012d52:	4b37      	ldr	r3, [pc, #220]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012d54:	689b      	ldr	r3, [r3, #8]
 8012d56:	f023 0203 	bic.w	r2, r3, #3
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	4934      	ldr	r1, [pc, #208]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012d60:	4313      	orrs	r3, r2
 8012d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012d64:	f7fe fa20 	bl	80111a8 <HAL_GetTick>
 8012d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012d6a:	e00a      	b.n	8012d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012d6c:	f7fe fa1c 	bl	80111a8 <HAL_GetTick>
 8012d70:	4602      	mov	r2, r0
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	1ad3      	subs	r3, r2, r3
 8012d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d901      	bls.n	8012d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012d7e:	2303      	movs	r3, #3
 8012d80:	e04f      	b.n	8012e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012d82:	4b2b      	ldr	r3, [pc, #172]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012d84:	689b      	ldr	r3, [r3, #8]
 8012d86:	f003 020c 	and.w	r2, r3, #12
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	685b      	ldr	r3, [r3, #4]
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d1eb      	bne.n	8012d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012d94:	4b25      	ldr	r3, [pc, #148]	; (8012e2c <HAL_RCC_ClockConfig+0x1b8>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	f003 0307 	and.w	r3, r3, #7
 8012d9c:	683a      	ldr	r2, [r7, #0]
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	d20c      	bcs.n	8012dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012da2:	4b22      	ldr	r3, [pc, #136]	; (8012e2c <HAL_RCC_ClockConfig+0x1b8>)
 8012da4:	683a      	ldr	r2, [r7, #0]
 8012da6:	b2d2      	uxtb	r2, r2
 8012da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012daa:	4b20      	ldr	r3, [pc, #128]	; (8012e2c <HAL_RCC_ClockConfig+0x1b8>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	f003 0307 	and.w	r3, r3, #7
 8012db2:	683a      	ldr	r2, [r7, #0]
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d001      	beq.n	8012dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012db8:	2301      	movs	r3, #1
 8012dba:	e032      	b.n	8012e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f003 0304 	and.w	r3, r3, #4
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d008      	beq.n	8012dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012dc8:	4b19      	ldr	r3, [pc, #100]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012dca:	689b      	ldr	r3, [r3, #8]
 8012dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	4916      	ldr	r1, [pc, #88]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012dd6:	4313      	orrs	r3, r2
 8012dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	f003 0308 	and.w	r3, r3, #8
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d009      	beq.n	8012dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012de6:	4b12      	ldr	r3, [pc, #72]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012de8:	689b      	ldr	r3, [r3, #8]
 8012dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	691b      	ldr	r3, [r3, #16]
 8012df2:	00db      	lsls	r3, r3, #3
 8012df4:	490e      	ldr	r1, [pc, #56]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012df6:	4313      	orrs	r3, r2
 8012df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012dfa:	f000 f821 	bl	8012e40 <HAL_RCC_GetSysClockFreq>
 8012dfe:	4602      	mov	r2, r0
 8012e00:	4b0b      	ldr	r3, [pc, #44]	; (8012e30 <HAL_RCC_ClockConfig+0x1bc>)
 8012e02:	689b      	ldr	r3, [r3, #8]
 8012e04:	091b      	lsrs	r3, r3, #4
 8012e06:	f003 030f 	and.w	r3, r3, #15
 8012e0a:	490a      	ldr	r1, [pc, #40]	; (8012e34 <HAL_RCC_ClockConfig+0x1c0>)
 8012e0c:	5ccb      	ldrb	r3, [r1, r3]
 8012e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8012e12:	4a09      	ldr	r2, [pc, #36]	; (8012e38 <HAL_RCC_ClockConfig+0x1c4>)
 8012e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012e16:	4b09      	ldr	r3, [pc, #36]	; (8012e3c <HAL_RCC_ClockConfig+0x1c8>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7fe f980 	bl	8011120 <HAL_InitTick>

  return HAL_OK;
 8012e20:	2300      	movs	r3, #0
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3710      	adds	r7, #16
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	40023c00 	.word	0x40023c00
 8012e30:	40023800 	.word	0x40023800
 8012e34:	08021950 	.word	0x08021950
 8012e38:	20000030 	.word	0x20000030
 8012e3c:	20000064 	.word	0x20000064

08012e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012e44:	b094      	sub	sp, #80	; 0x50
 8012e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e50:	2300      	movs	r3, #0
 8012e52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8012e54:	2300      	movs	r3, #0
 8012e56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012e58:	4b79      	ldr	r3, [pc, #484]	; (8013040 <HAL_RCC_GetSysClockFreq+0x200>)
 8012e5a:	689b      	ldr	r3, [r3, #8]
 8012e5c:	f003 030c 	and.w	r3, r3, #12
 8012e60:	2b08      	cmp	r3, #8
 8012e62:	d00d      	beq.n	8012e80 <HAL_RCC_GetSysClockFreq+0x40>
 8012e64:	2b08      	cmp	r3, #8
 8012e66:	f200 80e1 	bhi.w	801302c <HAL_RCC_GetSysClockFreq+0x1ec>
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d002      	beq.n	8012e74 <HAL_RCC_GetSysClockFreq+0x34>
 8012e6e:	2b04      	cmp	r3, #4
 8012e70:	d003      	beq.n	8012e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8012e72:	e0db      	b.n	801302c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012e74:	4b73      	ldr	r3, [pc, #460]	; (8013044 <HAL_RCC_GetSysClockFreq+0x204>)
 8012e76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8012e78:	e0db      	b.n	8013032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012e7a:	4b73      	ldr	r3, [pc, #460]	; (8013048 <HAL_RCC_GetSysClockFreq+0x208>)
 8012e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8012e7e:	e0d8      	b.n	8013032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012e80:	4b6f      	ldr	r3, [pc, #444]	; (8013040 <HAL_RCC_GetSysClockFreq+0x200>)
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012e8a:	4b6d      	ldr	r3, [pc, #436]	; (8013040 <HAL_RCC_GetSysClockFreq+0x200>)
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d063      	beq.n	8012f5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012e96:	4b6a      	ldr	r3, [pc, #424]	; (8013040 <HAL_RCC_GetSysClockFreq+0x200>)
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	099b      	lsrs	r3, r3, #6
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8012ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8012eaa:	2300      	movs	r3, #0
 8012eac:	637b      	str	r3, [r7, #52]	; 0x34
 8012eae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8012eb2:	4622      	mov	r2, r4
 8012eb4:	462b      	mov	r3, r5
 8012eb6:	f04f 0000 	mov.w	r0, #0
 8012eba:	f04f 0100 	mov.w	r1, #0
 8012ebe:	0159      	lsls	r1, r3, #5
 8012ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8012ec4:	0150      	lsls	r0, r2, #5
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	460b      	mov	r3, r1
 8012eca:	4621      	mov	r1, r4
 8012ecc:	1a51      	subs	r1, r2, r1
 8012ece:	6139      	str	r1, [r7, #16]
 8012ed0:	4629      	mov	r1, r5
 8012ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8012ed6:	617b      	str	r3, [r7, #20]
 8012ed8:	f04f 0200 	mov.w	r2, #0
 8012edc:	f04f 0300 	mov.w	r3, #0
 8012ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012ee4:	4659      	mov	r1, fp
 8012ee6:	018b      	lsls	r3, r1, #6
 8012ee8:	4651      	mov	r1, sl
 8012eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8012eee:	4651      	mov	r1, sl
 8012ef0:	018a      	lsls	r2, r1, #6
 8012ef2:	4651      	mov	r1, sl
 8012ef4:	ebb2 0801 	subs.w	r8, r2, r1
 8012ef8:	4659      	mov	r1, fp
 8012efa:	eb63 0901 	sbc.w	r9, r3, r1
 8012efe:	f04f 0200 	mov.w	r2, #0
 8012f02:	f04f 0300 	mov.w	r3, #0
 8012f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012f12:	4690      	mov	r8, r2
 8012f14:	4699      	mov	r9, r3
 8012f16:	4623      	mov	r3, r4
 8012f18:	eb18 0303 	adds.w	r3, r8, r3
 8012f1c:	60bb      	str	r3, [r7, #8]
 8012f1e:	462b      	mov	r3, r5
 8012f20:	eb49 0303 	adc.w	r3, r9, r3
 8012f24:	60fb      	str	r3, [r7, #12]
 8012f26:	f04f 0200 	mov.w	r2, #0
 8012f2a:	f04f 0300 	mov.w	r3, #0
 8012f2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012f32:	4629      	mov	r1, r5
 8012f34:	024b      	lsls	r3, r1, #9
 8012f36:	4621      	mov	r1, r4
 8012f38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8012f3c:	4621      	mov	r1, r4
 8012f3e:	024a      	lsls	r2, r1, #9
 8012f40:	4610      	mov	r0, r2
 8012f42:	4619      	mov	r1, r3
 8012f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f46:	2200      	movs	r2, #0
 8012f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012f4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012f50:	f7f9 fdb2 	bl	800cab8 <__aeabi_uldivmod>
 8012f54:	4602      	mov	r2, r0
 8012f56:	460b      	mov	r3, r1
 8012f58:	4613      	mov	r3, r2
 8012f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012f5c:	e058      	b.n	8013010 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012f5e:	4b38      	ldr	r3, [pc, #224]	; (8013040 <HAL_RCC_GetSysClockFreq+0x200>)
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	099b      	lsrs	r3, r3, #6
 8012f64:	2200      	movs	r2, #0
 8012f66:	4618      	mov	r0, r3
 8012f68:	4611      	mov	r1, r2
 8012f6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8012f6e:	623b      	str	r3, [r7, #32]
 8012f70:	2300      	movs	r3, #0
 8012f72:	627b      	str	r3, [r7, #36]	; 0x24
 8012f74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012f78:	4642      	mov	r2, r8
 8012f7a:	464b      	mov	r3, r9
 8012f7c:	f04f 0000 	mov.w	r0, #0
 8012f80:	f04f 0100 	mov.w	r1, #0
 8012f84:	0159      	lsls	r1, r3, #5
 8012f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8012f8a:	0150      	lsls	r0, r2, #5
 8012f8c:	4602      	mov	r2, r0
 8012f8e:	460b      	mov	r3, r1
 8012f90:	4641      	mov	r1, r8
 8012f92:	ebb2 0a01 	subs.w	sl, r2, r1
 8012f96:	4649      	mov	r1, r9
 8012f98:	eb63 0b01 	sbc.w	fp, r3, r1
 8012f9c:	f04f 0200 	mov.w	r2, #0
 8012fa0:	f04f 0300 	mov.w	r3, #0
 8012fa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8012fa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8012fac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8012fb0:	ebb2 040a 	subs.w	r4, r2, sl
 8012fb4:	eb63 050b 	sbc.w	r5, r3, fp
 8012fb8:	f04f 0200 	mov.w	r2, #0
 8012fbc:	f04f 0300 	mov.w	r3, #0
 8012fc0:	00eb      	lsls	r3, r5, #3
 8012fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012fc6:	00e2      	lsls	r2, r4, #3
 8012fc8:	4614      	mov	r4, r2
 8012fca:	461d      	mov	r5, r3
 8012fcc:	4643      	mov	r3, r8
 8012fce:	18e3      	adds	r3, r4, r3
 8012fd0:	603b      	str	r3, [r7, #0]
 8012fd2:	464b      	mov	r3, r9
 8012fd4:	eb45 0303 	adc.w	r3, r5, r3
 8012fd8:	607b      	str	r3, [r7, #4]
 8012fda:	f04f 0200 	mov.w	r2, #0
 8012fde:	f04f 0300 	mov.w	r3, #0
 8012fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8012fe6:	4629      	mov	r1, r5
 8012fe8:	028b      	lsls	r3, r1, #10
 8012fea:	4621      	mov	r1, r4
 8012fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8012ff0:	4621      	mov	r1, r4
 8012ff2:	028a      	lsls	r2, r1, #10
 8012ff4:	4610      	mov	r0, r2
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	61bb      	str	r3, [r7, #24]
 8012ffe:	61fa      	str	r2, [r7, #28]
 8013000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013004:	f7f9 fd58 	bl	800cab8 <__aeabi_uldivmod>
 8013008:	4602      	mov	r2, r0
 801300a:	460b      	mov	r3, r1
 801300c:	4613      	mov	r3, r2
 801300e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013010:	4b0b      	ldr	r3, [pc, #44]	; (8013040 <HAL_RCC_GetSysClockFreq+0x200>)
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	0c1b      	lsrs	r3, r3, #16
 8013016:	f003 0303 	and.w	r3, r3, #3
 801301a:	3301      	adds	r3, #1
 801301c:	005b      	lsls	r3, r3, #1
 801301e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8013020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013024:	fbb2 f3f3 	udiv	r3, r2, r3
 8013028:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801302a:	e002      	b.n	8013032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801302c:	4b05      	ldr	r3, [pc, #20]	; (8013044 <HAL_RCC_GetSysClockFreq+0x204>)
 801302e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8013030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8013034:	4618      	mov	r0, r3
 8013036:	3750      	adds	r7, #80	; 0x50
 8013038:	46bd      	mov	sp, r7
 801303a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801303e:	bf00      	nop
 8013040:	40023800 	.word	0x40023800
 8013044:	00f42400 	.word	0x00f42400
 8013048:	007a1200 	.word	0x007a1200

0801304c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d101      	bne.n	801305e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801305a:	2301      	movs	r3, #1
 801305c:	e07b      	b.n	8013156 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013062:	2b00      	cmp	r3, #0
 8013064:	d108      	bne.n	8013078 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801306e:	d009      	beq.n	8013084 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2200      	movs	r2, #0
 8013074:	61da      	str	r2, [r3, #28]
 8013076:	e005      	b.n	8013084 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2200      	movs	r2, #0
 801307c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	2200      	movs	r2, #0
 8013082:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2200      	movs	r2, #0
 8013088:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013090:	b2db      	uxtb	r3, r3
 8013092:	2b00      	cmp	r3, #0
 8013094:	d106      	bne.n	80130a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2200      	movs	r2, #0
 801309a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801309e:	6878      	ldr	r0, [r7, #4]
 80130a0:	f7fd f9d2 	bl	8010448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2202      	movs	r2, #2
 80130a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	681a      	ldr	r2, [r3, #0]
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80130ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	685b      	ldr	r3, [r3, #4]
 80130c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	689b      	ldr	r3, [r3, #8]
 80130c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80130cc:	431a      	orrs	r2, r3
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	68db      	ldr	r3, [r3, #12]
 80130d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80130d6:	431a      	orrs	r2, r3
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	691b      	ldr	r3, [r3, #16]
 80130dc:	f003 0302 	and.w	r3, r3, #2
 80130e0:	431a      	orrs	r2, r3
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	695b      	ldr	r3, [r3, #20]
 80130e6:	f003 0301 	and.w	r3, r3, #1
 80130ea:	431a      	orrs	r2, r3
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	699b      	ldr	r3, [r3, #24]
 80130f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80130f4:	431a      	orrs	r2, r3
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	69db      	ldr	r3, [r3, #28]
 80130fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80130fe:	431a      	orrs	r2, r3
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6a1b      	ldr	r3, [r3, #32]
 8013104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013108:	ea42 0103 	orr.w	r1, r2, r3
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013110:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	430a      	orrs	r2, r1
 801311a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	699b      	ldr	r3, [r3, #24]
 8013120:	0c1b      	lsrs	r3, r3, #16
 8013122:	f003 0104 	and.w	r1, r3, #4
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801312a:	f003 0210 	and.w	r2, r3, #16
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	430a      	orrs	r2, r1
 8013134:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	69da      	ldr	r2, [r3, #28]
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013144:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2200      	movs	r2, #0
 801314a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2201      	movs	r2, #1
 8013150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8013154:	2300      	movs	r3, #0
}
 8013156:	4618      	mov	r0, r3
 8013158:	3708      	adds	r7, #8
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}

0801315e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801315e:	b580      	push	{r7, lr}
 8013160:	b088      	sub	sp, #32
 8013162:	af00      	add	r7, sp, #0
 8013164:	60f8      	str	r0, [r7, #12]
 8013166:	60b9      	str	r1, [r7, #8]
 8013168:	603b      	str	r3, [r7, #0]
 801316a:	4613      	mov	r3, r2
 801316c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801316e:	2300      	movs	r3, #0
 8013170:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013178:	2b01      	cmp	r3, #1
 801317a:	d101      	bne.n	8013180 <HAL_SPI_Transmit+0x22>
 801317c:	2302      	movs	r3, #2
 801317e:	e126      	b.n	80133ce <HAL_SPI_Transmit+0x270>
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	2201      	movs	r2, #1
 8013184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013188:	f7fe f80e 	bl	80111a8 <HAL_GetTick>
 801318c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801318e:	88fb      	ldrh	r3, [r7, #6]
 8013190:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013198:	b2db      	uxtb	r3, r3
 801319a:	2b01      	cmp	r3, #1
 801319c:	d002      	beq.n	80131a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801319e:	2302      	movs	r3, #2
 80131a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80131a2:	e10b      	b.n	80133bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d002      	beq.n	80131b0 <HAL_SPI_Transmit+0x52>
 80131aa:	88fb      	ldrh	r3, [r7, #6]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d102      	bne.n	80131b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80131b0:	2301      	movs	r3, #1
 80131b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80131b4:	e102      	b.n	80133bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	2203      	movs	r2, #3
 80131ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	2200      	movs	r2, #0
 80131c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	68ba      	ldr	r2, [r7, #8]
 80131c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	88fa      	ldrh	r2, [r7, #6]
 80131ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	88fa      	ldrh	r2, [r7, #6]
 80131d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	2200      	movs	r2, #0
 80131da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	2200      	movs	r2, #0
 80131e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	2200      	movs	r2, #0
 80131e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2200      	movs	r2, #0
 80131ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	2200      	movs	r2, #0
 80131f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	689b      	ldr	r3, [r3, #8]
 80131f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80131fc:	d10f      	bne.n	801321e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	681a      	ldr	r2, [r3, #0]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801320c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	681a      	ldr	r2, [r3, #0]
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801321c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013228:	2b40      	cmp	r3, #64	; 0x40
 801322a:	d007      	beq.n	801323c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	681a      	ldr	r2, [r3, #0]
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801323a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	68db      	ldr	r3, [r3, #12]
 8013240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013244:	d14b      	bne.n	80132de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d002      	beq.n	8013254 <HAL_SPI_Transmit+0xf6>
 801324e:	8afb      	ldrh	r3, [r7, #22]
 8013250:	2b01      	cmp	r3, #1
 8013252:	d13e      	bne.n	80132d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013258:	881a      	ldrh	r2, [r3, #0]
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013264:	1c9a      	adds	r2, r3, #2
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801326e:	b29b      	uxth	r3, r3
 8013270:	3b01      	subs	r3, #1
 8013272:	b29a      	uxth	r2, r3
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013278:	e02b      	b.n	80132d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	689b      	ldr	r3, [r3, #8]
 8013280:	f003 0302 	and.w	r3, r3, #2
 8013284:	2b02      	cmp	r3, #2
 8013286:	d112      	bne.n	80132ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801328c:	881a      	ldrh	r2, [r3, #0]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013298:	1c9a      	adds	r2, r3, #2
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80132a2:	b29b      	uxth	r3, r3
 80132a4:	3b01      	subs	r3, #1
 80132a6:	b29a      	uxth	r2, r3
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80132ac:	e011      	b.n	80132d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80132ae:	f7fd ff7b 	bl	80111a8 <HAL_GetTick>
 80132b2:	4602      	mov	r2, r0
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	1ad3      	subs	r3, r2, r3
 80132b8:	683a      	ldr	r2, [r7, #0]
 80132ba:	429a      	cmp	r2, r3
 80132bc:	d803      	bhi.n	80132c6 <HAL_SPI_Transmit+0x168>
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132c4:	d102      	bne.n	80132cc <HAL_SPI_Transmit+0x16e>
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d102      	bne.n	80132d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80132cc:	2303      	movs	r3, #3
 80132ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80132d0:	e074      	b.n	80133bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80132d6:	b29b      	uxth	r3, r3
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d1ce      	bne.n	801327a <HAL_SPI_Transmit+0x11c>
 80132dc:	e04c      	b.n	8013378 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d002      	beq.n	80132ec <HAL_SPI_Transmit+0x18e>
 80132e6:	8afb      	ldrh	r3, [r7, #22]
 80132e8:	2b01      	cmp	r3, #1
 80132ea:	d140      	bne.n	801336e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	330c      	adds	r3, #12
 80132f6:	7812      	ldrb	r2, [r2, #0]
 80132f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132fe:	1c5a      	adds	r2, r3, #1
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013308:	b29b      	uxth	r3, r3
 801330a:	3b01      	subs	r3, #1
 801330c:	b29a      	uxth	r2, r3
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8013312:	e02c      	b.n	801336e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	689b      	ldr	r3, [r3, #8]
 801331a:	f003 0302 	and.w	r3, r3, #2
 801331e:	2b02      	cmp	r3, #2
 8013320:	d113      	bne.n	801334a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	330c      	adds	r3, #12
 801332c:	7812      	ldrb	r2, [r2, #0]
 801332e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013334:	1c5a      	adds	r2, r3, #1
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801333e:	b29b      	uxth	r3, r3
 8013340:	3b01      	subs	r3, #1
 8013342:	b29a      	uxth	r2, r3
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	86da      	strh	r2, [r3, #54]	; 0x36
 8013348:	e011      	b.n	801336e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801334a:	f7fd ff2d 	bl	80111a8 <HAL_GetTick>
 801334e:	4602      	mov	r2, r0
 8013350:	69bb      	ldr	r3, [r7, #24]
 8013352:	1ad3      	subs	r3, r2, r3
 8013354:	683a      	ldr	r2, [r7, #0]
 8013356:	429a      	cmp	r2, r3
 8013358:	d803      	bhi.n	8013362 <HAL_SPI_Transmit+0x204>
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013360:	d102      	bne.n	8013368 <HAL_SPI_Transmit+0x20a>
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d102      	bne.n	801336e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8013368:	2303      	movs	r3, #3
 801336a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801336c:	e026      	b.n	80133bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013372:	b29b      	uxth	r3, r3
 8013374:	2b00      	cmp	r3, #0
 8013376:	d1cd      	bne.n	8013314 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013378:	69ba      	ldr	r2, [r7, #24]
 801337a:	6839      	ldr	r1, [r7, #0]
 801337c:	68f8      	ldr	r0, [r7, #12]
 801337e:	f000 fa55 	bl	801382c <SPI_EndRxTxTransaction>
 8013382:	4603      	mov	r3, r0
 8013384:	2b00      	cmp	r3, #0
 8013386:	d002      	beq.n	801338e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	2220      	movs	r2, #32
 801338c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	689b      	ldr	r3, [r3, #8]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d10a      	bne.n	80133ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013396:	2300      	movs	r3, #0
 8013398:	613b      	str	r3, [r7, #16]
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	613b      	str	r3, [r7, #16]
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	689b      	ldr	r3, [r3, #8]
 80133a8:	613b      	str	r3, [r7, #16]
 80133aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d002      	beq.n	80133ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80133b4:	2301      	movs	r3, #1
 80133b6:	77fb      	strb	r3, [r7, #31]
 80133b8:	e000      	b.n	80133bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80133ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	2201      	movs	r2, #1
 80133c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	2200      	movs	r2, #0
 80133c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80133cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3720      	adds	r7, #32
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}

080133d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80133d6:	b580      	push	{r7, lr}
 80133d8:	b08c      	sub	sp, #48	; 0x30
 80133da:	af00      	add	r7, sp, #0
 80133dc:	60f8      	str	r0, [r7, #12]
 80133de:	60b9      	str	r1, [r7, #8]
 80133e0:	607a      	str	r2, [r7, #4]
 80133e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80133e4:	2301      	movs	r3, #1
 80133e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80133e8:	2300      	movs	r3, #0
 80133ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	d101      	bne.n	80133fc <HAL_SPI_TransmitReceive+0x26>
 80133f8:	2302      	movs	r3, #2
 80133fa:	e18a      	b.n	8013712 <HAL_SPI_TransmitReceive+0x33c>
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2201      	movs	r2, #1
 8013400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013404:	f7fd fed0 	bl	80111a8 <HAL_GetTick>
 8013408:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	685b      	ldr	r3, [r3, #4]
 8013418:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801341a:	887b      	ldrh	r3, [r7, #2]
 801341c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801341e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013422:	2b01      	cmp	r3, #1
 8013424:	d00f      	beq.n	8013446 <HAL_SPI_TransmitReceive+0x70>
 8013426:	69fb      	ldr	r3, [r7, #28]
 8013428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801342c:	d107      	bne.n	801343e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	689b      	ldr	r3, [r3, #8]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d103      	bne.n	801343e <HAL_SPI_TransmitReceive+0x68>
 8013436:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801343a:	2b04      	cmp	r3, #4
 801343c:	d003      	beq.n	8013446 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801343e:	2302      	movs	r3, #2
 8013440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013444:	e15b      	b.n	80136fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d005      	beq.n	8013458 <HAL_SPI_TransmitReceive+0x82>
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d002      	beq.n	8013458 <HAL_SPI_TransmitReceive+0x82>
 8013452:	887b      	ldrh	r3, [r7, #2]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d103      	bne.n	8013460 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013458:	2301      	movs	r3, #1
 801345a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801345e:	e14e      	b.n	80136fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013466:	b2db      	uxtb	r3, r3
 8013468:	2b04      	cmp	r3, #4
 801346a:	d003      	beq.n	8013474 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2205      	movs	r2, #5
 8013470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	2200      	movs	r2, #0
 8013478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	687a      	ldr	r2, [r7, #4]
 801347e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	887a      	ldrh	r2, [r7, #2]
 8013484:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	887a      	ldrh	r2, [r7, #2]
 801348a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	68ba      	ldr	r2, [r7, #8]
 8013490:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	887a      	ldrh	r2, [r7, #2]
 8013496:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	887a      	ldrh	r2, [r7, #2]
 801349c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	2200      	movs	r2, #0
 80134a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2200      	movs	r2, #0
 80134a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134b4:	2b40      	cmp	r3, #64	; 0x40
 80134b6:	d007      	beq.n	80134c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	681a      	ldr	r2, [r3, #0]
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80134c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	68db      	ldr	r3, [r3, #12]
 80134cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80134d0:	d178      	bne.n	80135c4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	685b      	ldr	r3, [r3, #4]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d002      	beq.n	80134e0 <HAL_SPI_TransmitReceive+0x10a>
 80134da:	8b7b      	ldrh	r3, [r7, #26]
 80134dc:	2b01      	cmp	r3, #1
 80134de:	d166      	bne.n	80135ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134e4:	881a      	ldrh	r2, [r3, #0]
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134f0:	1c9a      	adds	r2, r3, #2
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80134fa:	b29b      	uxth	r3, r3
 80134fc:	3b01      	subs	r3, #1
 80134fe:	b29a      	uxth	r2, r3
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013504:	e053      	b.n	80135ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	689b      	ldr	r3, [r3, #8]
 801350c:	f003 0302 	and.w	r3, r3, #2
 8013510:	2b02      	cmp	r3, #2
 8013512:	d11b      	bne.n	801354c <HAL_SPI_TransmitReceive+0x176>
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013518:	b29b      	uxth	r3, r3
 801351a:	2b00      	cmp	r3, #0
 801351c:	d016      	beq.n	801354c <HAL_SPI_TransmitReceive+0x176>
 801351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013520:	2b01      	cmp	r3, #1
 8013522:	d113      	bne.n	801354c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013528:	881a      	ldrh	r2, [r3, #0]
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013534:	1c9a      	adds	r2, r3, #2
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801353e:	b29b      	uxth	r3, r3
 8013540:	3b01      	subs	r3, #1
 8013542:	b29a      	uxth	r2, r3
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013548:	2300      	movs	r3, #0
 801354a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	689b      	ldr	r3, [r3, #8]
 8013552:	f003 0301 	and.w	r3, r3, #1
 8013556:	2b01      	cmp	r3, #1
 8013558:	d119      	bne.n	801358e <HAL_SPI_TransmitReceive+0x1b8>
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801355e:	b29b      	uxth	r3, r3
 8013560:	2b00      	cmp	r3, #0
 8013562:	d014      	beq.n	801358e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	68da      	ldr	r2, [r3, #12]
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801356e:	b292      	uxth	r2, r2
 8013570:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013576:	1c9a      	adds	r2, r3, #2
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013580:	b29b      	uxth	r3, r3
 8013582:	3b01      	subs	r3, #1
 8013584:	b29a      	uxth	r2, r3
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801358a:	2301      	movs	r3, #1
 801358c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801358e:	f7fd fe0b 	bl	80111a8 <HAL_GetTick>
 8013592:	4602      	mov	r2, r0
 8013594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013596:	1ad3      	subs	r3, r2, r3
 8013598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801359a:	429a      	cmp	r2, r3
 801359c:	d807      	bhi.n	80135ae <HAL_SPI_TransmitReceive+0x1d8>
 801359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135a4:	d003      	beq.n	80135ae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80135a6:	2303      	movs	r3, #3
 80135a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80135ac:	e0a7      	b.n	80136fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d1a6      	bne.n	8013506 <HAL_SPI_TransmitReceive+0x130>
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135bc:	b29b      	uxth	r3, r3
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d1a1      	bne.n	8013506 <HAL_SPI_TransmitReceive+0x130>
 80135c2:	e07c      	b.n	80136be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d002      	beq.n	80135d2 <HAL_SPI_TransmitReceive+0x1fc>
 80135cc:	8b7b      	ldrh	r3, [r7, #26]
 80135ce:	2b01      	cmp	r3, #1
 80135d0:	d16b      	bne.n	80136aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	330c      	adds	r3, #12
 80135dc:	7812      	ldrb	r2, [r2, #0]
 80135de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135e4:	1c5a      	adds	r2, r3, #1
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	3b01      	subs	r3, #1
 80135f2:	b29a      	uxth	r2, r3
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80135f8:	e057      	b.n	80136aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	689b      	ldr	r3, [r3, #8]
 8013600:	f003 0302 	and.w	r3, r3, #2
 8013604:	2b02      	cmp	r3, #2
 8013606:	d11c      	bne.n	8013642 <HAL_SPI_TransmitReceive+0x26c>
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801360c:	b29b      	uxth	r3, r3
 801360e:	2b00      	cmp	r3, #0
 8013610:	d017      	beq.n	8013642 <HAL_SPI_TransmitReceive+0x26c>
 8013612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013614:	2b01      	cmp	r3, #1
 8013616:	d114      	bne.n	8013642 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	330c      	adds	r3, #12
 8013622:	7812      	ldrb	r2, [r2, #0]
 8013624:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801362a:	1c5a      	adds	r2, r3, #1
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013634:	b29b      	uxth	r3, r3
 8013636:	3b01      	subs	r3, #1
 8013638:	b29a      	uxth	r2, r3
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801363e:	2300      	movs	r3, #0
 8013640:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	689b      	ldr	r3, [r3, #8]
 8013648:	f003 0301 	and.w	r3, r3, #1
 801364c:	2b01      	cmp	r3, #1
 801364e:	d119      	bne.n	8013684 <HAL_SPI_TransmitReceive+0x2ae>
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013654:	b29b      	uxth	r3, r3
 8013656:	2b00      	cmp	r3, #0
 8013658:	d014      	beq.n	8013684 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	68da      	ldr	r2, [r3, #12]
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013664:	b2d2      	uxtb	r2, r2
 8013666:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801366c:	1c5a      	adds	r2, r3, #1
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013676:	b29b      	uxth	r3, r3
 8013678:	3b01      	subs	r3, #1
 801367a:	b29a      	uxth	r2, r3
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013680:	2301      	movs	r3, #1
 8013682:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013684:	f7fd fd90 	bl	80111a8 <HAL_GetTick>
 8013688:	4602      	mov	r2, r0
 801368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801368c:	1ad3      	subs	r3, r2, r3
 801368e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013690:	429a      	cmp	r2, r3
 8013692:	d803      	bhi.n	801369c <HAL_SPI_TransmitReceive+0x2c6>
 8013694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013696:	f1b3 3fff 	cmp.w	r3, #4294967295
 801369a:	d102      	bne.n	80136a2 <HAL_SPI_TransmitReceive+0x2cc>
 801369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d103      	bne.n	80136aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80136a2:	2303      	movs	r3, #3
 80136a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80136a8:	e029      	b.n	80136fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d1a2      	bne.n	80135fa <HAL_SPI_TransmitReceive+0x224>
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80136b8:	b29b      	uxth	r3, r3
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d19d      	bne.n	80135fa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80136be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80136c2:	68f8      	ldr	r0, [r7, #12]
 80136c4:	f000 f8b2 	bl	801382c <SPI_EndRxTxTransaction>
 80136c8:	4603      	mov	r3, r0
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d006      	beq.n	80136dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80136ce:	2301      	movs	r3, #1
 80136d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	2220      	movs	r2, #32
 80136d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80136da:	e010      	b.n	80136fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	689b      	ldr	r3, [r3, #8]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d10b      	bne.n	80136fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80136e4:	2300      	movs	r3, #0
 80136e6:	617b      	str	r3, [r7, #20]
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	68db      	ldr	r3, [r3, #12]
 80136ee:	617b      	str	r3, [r7, #20]
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	689b      	ldr	r3, [r3, #8]
 80136f6:	617b      	str	r3, [r7, #20]
 80136f8:	697b      	ldr	r3, [r7, #20]
 80136fa:	e000      	b.n	80136fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80136fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	2201      	movs	r2, #1
 8013702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	2200      	movs	r2, #0
 801370a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801370e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013712:	4618      	mov	r0, r3
 8013714:	3730      	adds	r7, #48	; 0x30
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
	...

0801371c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b088      	sub	sp, #32
 8013720:	af00      	add	r7, sp, #0
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	60b9      	str	r1, [r7, #8]
 8013726:	603b      	str	r3, [r7, #0]
 8013728:	4613      	mov	r3, r2
 801372a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801372c:	f7fd fd3c 	bl	80111a8 <HAL_GetTick>
 8013730:	4602      	mov	r2, r0
 8013732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013734:	1a9b      	subs	r3, r3, r2
 8013736:	683a      	ldr	r2, [r7, #0]
 8013738:	4413      	add	r3, r2
 801373a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801373c:	f7fd fd34 	bl	80111a8 <HAL_GetTick>
 8013740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8013742:	4b39      	ldr	r3, [pc, #228]	; (8013828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	015b      	lsls	r3, r3, #5
 8013748:	0d1b      	lsrs	r3, r3, #20
 801374a:	69fa      	ldr	r2, [r7, #28]
 801374c:	fb02 f303 	mul.w	r3, r2, r3
 8013750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013752:	e054      	b.n	80137fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801375a:	d050      	beq.n	80137fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801375c:	f7fd fd24 	bl	80111a8 <HAL_GetTick>
 8013760:	4602      	mov	r2, r0
 8013762:	69bb      	ldr	r3, [r7, #24]
 8013764:	1ad3      	subs	r3, r2, r3
 8013766:	69fa      	ldr	r2, [r7, #28]
 8013768:	429a      	cmp	r2, r3
 801376a:	d902      	bls.n	8013772 <SPI_WaitFlagStateUntilTimeout+0x56>
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d13d      	bne.n	80137ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	685a      	ldr	r2, [r3, #4]
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801378a:	d111      	bne.n	80137b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	689b      	ldr	r3, [r3, #8]
 8013790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013794:	d004      	beq.n	80137a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	689b      	ldr	r3, [r3, #8]
 801379a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801379e:	d107      	bne.n	80137b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80137ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80137b8:	d10f      	bne.n	80137da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	681a      	ldr	r2, [r3, #0]
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80137c8:	601a      	str	r2, [r3, #0]
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	681a      	ldr	r2, [r3, #0]
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80137d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2201      	movs	r2, #1
 80137de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	2200      	movs	r2, #0
 80137e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80137ea:	2303      	movs	r3, #3
 80137ec:	e017      	b.n	801381e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80137ee:	697b      	ldr	r3, [r7, #20]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d101      	bne.n	80137f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80137f4:	2300      	movs	r3, #0
 80137f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	3b01      	subs	r3, #1
 80137fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	689a      	ldr	r2, [r3, #8]
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	4013      	ands	r3, r2
 8013808:	68ba      	ldr	r2, [r7, #8]
 801380a:	429a      	cmp	r2, r3
 801380c:	bf0c      	ite	eq
 801380e:	2301      	moveq	r3, #1
 8013810:	2300      	movne	r3, #0
 8013812:	b2db      	uxtb	r3, r3
 8013814:	461a      	mov	r2, r3
 8013816:	79fb      	ldrb	r3, [r7, #7]
 8013818:	429a      	cmp	r2, r3
 801381a:	d19b      	bne.n	8013754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801381c:	2300      	movs	r3, #0
}
 801381e:	4618      	mov	r0, r3
 8013820:	3720      	adds	r7, #32
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}
 8013826:	bf00      	nop
 8013828:	20000030 	.word	0x20000030

0801382c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b088      	sub	sp, #32
 8013830:	af02      	add	r7, sp, #8
 8013832:	60f8      	str	r0, [r7, #12]
 8013834:	60b9      	str	r1, [r7, #8]
 8013836:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013838:	4b1b      	ldr	r3, [pc, #108]	; (80138a8 <SPI_EndRxTxTransaction+0x7c>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	4a1b      	ldr	r2, [pc, #108]	; (80138ac <SPI_EndRxTxTransaction+0x80>)
 801383e:	fba2 2303 	umull	r2, r3, r2, r3
 8013842:	0d5b      	lsrs	r3, r3, #21
 8013844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013848:	fb02 f303 	mul.w	r3, r2, r3
 801384c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013856:	d112      	bne.n	801387e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	9300      	str	r3, [sp, #0]
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	2200      	movs	r2, #0
 8013860:	2180      	movs	r1, #128	; 0x80
 8013862:	68f8      	ldr	r0, [r7, #12]
 8013864:	f7ff ff5a 	bl	801371c <SPI_WaitFlagStateUntilTimeout>
 8013868:	4603      	mov	r3, r0
 801386a:	2b00      	cmp	r3, #0
 801386c:	d016      	beq.n	801389c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013872:	f043 0220 	orr.w	r2, r3, #32
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801387a:	2303      	movs	r3, #3
 801387c:	e00f      	b.n	801389e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d00a      	beq.n	801389a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	3b01      	subs	r3, #1
 8013888:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	689b      	ldr	r3, [r3, #8]
 8013890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013894:	2b80      	cmp	r3, #128	; 0x80
 8013896:	d0f2      	beq.n	801387e <SPI_EndRxTxTransaction+0x52>
 8013898:	e000      	b.n	801389c <SPI_EndRxTxTransaction+0x70>
        break;
 801389a:	bf00      	nop
  }

  return HAL_OK;
 801389c:	2300      	movs	r3, #0
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3718      	adds	r7, #24
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
 80138a6:	bf00      	nop
 80138a8:	20000030 	.word	0x20000030
 80138ac:	165e9f81 	.word	0x165e9f81

080138b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b082      	sub	sp, #8
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d101      	bne.n	80138c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80138be:	2301      	movs	r3, #1
 80138c0:	e041      	b.n	8013946 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80138c8:	b2db      	uxtb	r3, r3
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d106      	bne.n	80138dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	2200      	movs	r2, #0
 80138d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f7fc fe34 	bl	8010544 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2202      	movs	r2, #2
 80138e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	681a      	ldr	r2, [r3, #0]
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	3304      	adds	r3, #4
 80138ec:	4619      	mov	r1, r3
 80138ee:	4610      	mov	r0, r2
 80138f0:	f000 fa2a 	bl	8013d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2201      	movs	r2, #1
 80138f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2201      	movs	r2, #1
 8013900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2201      	movs	r2, #1
 8013908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	2201      	movs	r2, #1
 8013910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2201      	movs	r2, #1
 8013918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2201      	movs	r2, #1
 8013920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2201      	movs	r2, #1
 8013928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2201      	movs	r2, #1
 8013930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2201      	movs	r2, #1
 8013938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2201      	movs	r2, #1
 8013940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013944:	2300      	movs	r3, #0
}
 8013946:	4618      	mov	r0, r3
 8013948:	3708      	adds	r7, #8
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}

0801394e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801394e:	b580      	push	{r7, lr}
 8013950:	b082      	sub	sp, #8
 8013952:	af00      	add	r7, sp, #0
 8013954:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	691b      	ldr	r3, [r3, #16]
 801395c:	f003 0302 	and.w	r3, r3, #2
 8013960:	2b02      	cmp	r3, #2
 8013962:	d122      	bne.n	80139aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	68db      	ldr	r3, [r3, #12]
 801396a:	f003 0302 	and.w	r3, r3, #2
 801396e:	2b02      	cmp	r3, #2
 8013970:	d11b      	bne.n	80139aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	f06f 0202 	mvn.w	r2, #2
 801397a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2201      	movs	r2, #1
 8013980:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	699b      	ldr	r3, [r3, #24]
 8013988:	f003 0303 	and.w	r3, r3, #3
 801398c:	2b00      	cmp	r3, #0
 801398e:	d003      	beq.n	8013998 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f000 f9bb 	bl	8013d0c <HAL_TIM_IC_CaptureCallback>
 8013996:	e005      	b.n	80139a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013998:	6878      	ldr	r0, [r7, #4]
 801399a:	f000 f9ad 	bl	8013cf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f000 f9be 	bl	8013d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2200      	movs	r2, #0
 80139a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	691b      	ldr	r3, [r3, #16]
 80139b0:	f003 0304 	and.w	r3, r3, #4
 80139b4:	2b04      	cmp	r3, #4
 80139b6:	d122      	bne.n	80139fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	68db      	ldr	r3, [r3, #12]
 80139be:	f003 0304 	and.w	r3, r3, #4
 80139c2:	2b04      	cmp	r3, #4
 80139c4:	d11b      	bne.n	80139fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f06f 0204 	mvn.w	r2, #4
 80139ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2202      	movs	r2, #2
 80139d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	699b      	ldr	r3, [r3, #24]
 80139dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d003      	beq.n	80139ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f000 f991 	bl	8013d0c <HAL_TIM_IC_CaptureCallback>
 80139ea:	e005      	b.n	80139f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f000 f983 	bl	8013cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80139f2:	6878      	ldr	r0, [r7, #4]
 80139f4:	f000 f994 	bl	8013d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2200      	movs	r2, #0
 80139fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	691b      	ldr	r3, [r3, #16]
 8013a04:	f003 0308 	and.w	r3, r3, #8
 8013a08:	2b08      	cmp	r3, #8
 8013a0a:	d122      	bne.n	8013a52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	68db      	ldr	r3, [r3, #12]
 8013a12:	f003 0308 	and.w	r3, r3, #8
 8013a16:	2b08      	cmp	r3, #8
 8013a18:	d11b      	bne.n	8013a52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	f06f 0208 	mvn.w	r2, #8
 8013a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2204      	movs	r2, #4
 8013a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	69db      	ldr	r3, [r3, #28]
 8013a30:	f003 0303 	and.w	r3, r3, #3
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d003      	beq.n	8013a40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f000 f967 	bl	8013d0c <HAL_TIM_IC_CaptureCallback>
 8013a3e:	e005      	b.n	8013a4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f000 f959 	bl	8013cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f000 f96a 	bl	8013d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2200      	movs	r2, #0
 8013a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	691b      	ldr	r3, [r3, #16]
 8013a58:	f003 0310 	and.w	r3, r3, #16
 8013a5c:	2b10      	cmp	r3, #16
 8013a5e:	d122      	bne.n	8013aa6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	68db      	ldr	r3, [r3, #12]
 8013a66:	f003 0310 	and.w	r3, r3, #16
 8013a6a:	2b10      	cmp	r3, #16
 8013a6c:	d11b      	bne.n	8013aa6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	f06f 0210 	mvn.w	r2, #16
 8013a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2208      	movs	r2, #8
 8013a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	69db      	ldr	r3, [r3, #28]
 8013a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d003      	beq.n	8013a94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f000 f93d 	bl	8013d0c <HAL_TIM_IC_CaptureCallback>
 8013a92:	e005      	b.n	8013aa0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f000 f92f 	bl	8013cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f000 f940 	bl	8013d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	691b      	ldr	r3, [r3, #16]
 8013aac:	f003 0301 	and.w	r3, r3, #1
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d10e      	bne.n	8013ad2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	68db      	ldr	r3, [r3, #12]
 8013aba:	f003 0301 	and.w	r3, r3, #1
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	d107      	bne.n	8013ad2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	f06f 0201 	mvn.w	r2, #1
 8013aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f000 f909 	bl	8013ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	691b      	ldr	r3, [r3, #16]
 8013ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013adc:	2b80      	cmp	r3, #128	; 0x80
 8013ade:	d10e      	bne.n	8013afe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	68db      	ldr	r3, [r3, #12]
 8013ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013aea:	2b80      	cmp	r3, #128	; 0x80
 8013aec:	d107      	bne.n	8013afe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8013af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f000 fba9 	bl	8014250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	691b      	ldr	r3, [r3, #16]
 8013b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b08:	2b40      	cmp	r3, #64	; 0x40
 8013b0a:	d10e      	bne.n	8013b2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b16:	2b40      	cmp	r3, #64	; 0x40
 8013b18:	d107      	bne.n	8013b2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013b24:	6878      	ldr	r0, [r7, #4]
 8013b26:	f000 f905 	bl	8013d34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	691b      	ldr	r3, [r3, #16]
 8013b30:	f003 0320 	and.w	r3, r3, #32
 8013b34:	2b20      	cmp	r3, #32
 8013b36:	d10e      	bne.n	8013b56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	68db      	ldr	r3, [r3, #12]
 8013b3e:	f003 0320 	and.w	r3, r3, #32
 8013b42:	2b20      	cmp	r3, #32
 8013b44:	d107      	bne.n	8013b56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	f06f 0220 	mvn.w	r2, #32
 8013b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f000 fb73 	bl	801423c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013b56:	bf00      	nop
 8013b58:	3708      	adds	r7, #8
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}
	...

08013b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b086      	sub	sp, #24
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	60f8      	str	r0, [r7, #12]
 8013b68:	60b9      	str	r1, [r7, #8]
 8013b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013b76:	2b01      	cmp	r3, #1
 8013b78:	d101      	bne.n	8013b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8013b7a:	2302      	movs	r3, #2
 8013b7c:	e0ae      	b.n	8013cdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2201      	movs	r2, #1
 8013b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2b0c      	cmp	r3, #12
 8013b8a:	f200 809f 	bhi.w	8013ccc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8013b8e:	a201      	add	r2, pc, #4	; (adr r2, 8013b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b94:	08013bc9 	.word	0x08013bc9
 8013b98:	08013ccd 	.word	0x08013ccd
 8013b9c:	08013ccd 	.word	0x08013ccd
 8013ba0:	08013ccd 	.word	0x08013ccd
 8013ba4:	08013c09 	.word	0x08013c09
 8013ba8:	08013ccd 	.word	0x08013ccd
 8013bac:	08013ccd 	.word	0x08013ccd
 8013bb0:	08013ccd 	.word	0x08013ccd
 8013bb4:	08013c4b 	.word	0x08013c4b
 8013bb8:	08013ccd 	.word	0x08013ccd
 8013bbc:	08013ccd 	.word	0x08013ccd
 8013bc0:	08013ccd 	.word	0x08013ccd
 8013bc4:	08013c8b 	.word	0x08013c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	68b9      	ldr	r1, [r7, #8]
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f000 f93a 	bl	8013e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	699a      	ldr	r2, [r3, #24]
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	f042 0208 	orr.w	r2, r2, #8
 8013be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	699a      	ldr	r2, [r3, #24]
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	f022 0204 	bic.w	r2, r2, #4
 8013bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	6999      	ldr	r1, [r3, #24]
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	691a      	ldr	r2, [r3, #16]
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	430a      	orrs	r2, r1
 8013c04:	619a      	str	r2, [r3, #24]
      break;
 8013c06:	e064      	b.n	8013cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	68b9      	ldr	r1, [r7, #8]
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f000 f980 	bl	8013f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	699a      	ldr	r2, [r3, #24]
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	699a      	ldr	r2, [r3, #24]
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	6999      	ldr	r1, [r3, #24]
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	691b      	ldr	r3, [r3, #16]
 8013c3e:	021a      	lsls	r2, r3, #8
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	430a      	orrs	r2, r1
 8013c46:	619a      	str	r2, [r3, #24]
      break;
 8013c48:	e043      	b.n	8013cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	68b9      	ldr	r1, [r7, #8]
 8013c50:	4618      	mov	r0, r3
 8013c52:	f000 f9cb 	bl	8013fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	69da      	ldr	r2, [r3, #28]
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f042 0208 	orr.w	r2, r2, #8
 8013c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	69da      	ldr	r2, [r3, #28]
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	f022 0204 	bic.w	r2, r2, #4
 8013c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	69d9      	ldr	r1, [r3, #28]
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	691a      	ldr	r2, [r3, #16]
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	430a      	orrs	r2, r1
 8013c86:	61da      	str	r2, [r3, #28]
      break;
 8013c88:	e023      	b.n	8013cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	68b9      	ldr	r1, [r7, #8]
 8013c90:	4618      	mov	r0, r3
 8013c92:	f000 fa15 	bl	80140c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	69da      	ldr	r2, [r3, #28]
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	69da      	ldr	r2, [r3, #28]
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	69d9      	ldr	r1, [r3, #28]
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	691b      	ldr	r3, [r3, #16]
 8013cc0:	021a      	lsls	r2, r3, #8
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	430a      	orrs	r2, r1
 8013cc8:	61da      	str	r2, [r3, #28]
      break;
 8013cca:	e002      	b.n	8013cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8013ccc:	2301      	movs	r3, #1
 8013cce:	75fb      	strb	r3, [r7, #23]
      break;
 8013cd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3718      	adds	r7, #24
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}

08013ce4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b083      	sub	sp, #12
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8013cec:	bf00      	nop
 8013cee:	370c      	adds	r7, #12
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr

08013cf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013cf8:	b480      	push	{r7}
 8013cfa:	b083      	sub	sp, #12
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013d00:	bf00      	nop
 8013d02:	370c      	adds	r7, #12
 8013d04:	46bd      	mov	sp, r7
 8013d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0a:	4770      	bx	lr

08013d0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	b083      	sub	sp, #12
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013d14:	bf00      	nop
 8013d16:	370c      	adds	r7, #12
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr

08013d20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b083      	sub	sp, #12
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013d28:	bf00      	nop
 8013d2a:	370c      	adds	r7, #12
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d32:	4770      	bx	lr

08013d34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013d34:	b480      	push	{r7}
 8013d36:	b083      	sub	sp, #12
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013d3c:	bf00      	nop
 8013d3e:	370c      	adds	r7, #12
 8013d40:	46bd      	mov	sp, r7
 8013d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d46:	4770      	bx	lr

08013d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013d48:	b480      	push	{r7}
 8013d4a:	b085      	sub	sp, #20
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
 8013d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	4a34      	ldr	r2, [pc, #208]	; (8013e2c <TIM_Base_SetConfig+0xe4>)
 8013d5c:	4293      	cmp	r3, r2
 8013d5e:	d00f      	beq.n	8013d80 <TIM_Base_SetConfig+0x38>
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d66:	d00b      	beq.n	8013d80 <TIM_Base_SetConfig+0x38>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	4a31      	ldr	r2, [pc, #196]	; (8013e30 <TIM_Base_SetConfig+0xe8>)
 8013d6c:	4293      	cmp	r3, r2
 8013d6e:	d007      	beq.n	8013d80 <TIM_Base_SetConfig+0x38>
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	4a30      	ldr	r2, [pc, #192]	; (8013e34 <TIM_Base_SetConfig+0xec>)
 8013d74:	4293      	cmp	r3, r2
 8013d76:	d003      	beq.n	8013d80 <TIM_Base_SetConfig+0x38>
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	4a2f      	ldr	r2, [pc, #188]	; (8013e38 <TIM_Base_SetConfig+0xf0>)
 8013d7c:	4293      	cmp	r3, r2
 8013d7e:	d108      	bne.n	8013d92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	68fa      	ldr	r2, [r7, #12]
 8013d8e:	4313      	orrs	r3, r2
 8013d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	4a25      	ldr	r2, [pc, #148]	; (8013e2c <TIM_Base_SetConfig+0xe4>)
 8013d96:	4293      	cmp	r3, r2
 8013d98:	d01b      	beq.n	8013dd2 <TIM_Base_SetConfig+0x8a>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013da0:	d017      	beq.n	8013dd2 <TIM_Base_SetConfig+0x8a>
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	4a22      	ldr	r2, [pc, #136]	; (8013e30 <TIM_Base_SetConfig+0xe8>)
 8013da6:	4293      	cmp	r3, r2
 8013da8:	d013      	beq.n	8013dd2 <TIM_Base_SetConfig+0x8a>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	4a21      	ldr	r2, [pc, #132]	; (8013e34 <TIM_Base_SetConfig+0xec>)
 8013dae:	4293      	cmp	r3, r2
 8013db0:	d00f      	beq.n	8013dd2 <TIM_Base_SetConfig+0x8a>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	4a20      	ldr	r2, [pc, #128]	; (8013e38 <TIM_Base_SetConfig+0xf0>)
 8013db6:	4293      	cmp	r3, r2
 8013db8:	d00b      	beq.n	8013dd2 <TIM_Base_SetConfig+0x8a>
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	4a1f      	ldr	r2, [pc, #124]	; (8013e3c <TIM_Base_SetConfig+0xf4>)
 8013dbe:	4293      	cmp	r3, r2
 8013dc0:	d007      	beq.n	8013dd2 <TIM_Base_SetConfig+0x8a>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	4a1e      	ldr	r2, [pc, #120]	; (8013e40 <TIM_Base_SetConfig+0xf8>)
 8013dc6:	4293      	cmp	r3, r2
 8013dc8:	d003      	beq.n	8013dd2 <TIM_Base_SetConfig+0x8a>
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	4a1d      	ldr	r2, [pc, #116]	; (8013e44 <TIM_Base_SetConfig+0xfc>)
 8013dce:	4293      	cmp	r3, r2
 8013dd0:	d108      	bne.n	8013de4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013dda:	683b      	ldr	r3, [r7, #0]
 8013ddc:	68db      	ldr	r3, [r3, #12]
 8013dde:	68fa      	ldr	r2, [r7, #12]
 8013de0:	4313      	orrs	r3, r2
 8013de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	695b      	ldr	r3, [r3, #20]
 8013dee:	4313      	orrs	r3, r2
 8013df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	68fa      	ldr	r2, [r7, #12]
 8013df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	689a      	ldr	r2, [r3, #8]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	681a      	ldr	r2, [r3, #0]
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	4a08      	ldr	r2, [pc, #32]	; (8013e2c <TIM_Base_SetConfig+0xe4>)
 8013e0c:	4293      	cmp	r3, r2
 8013e0e:	d103      	bne.n	8013e18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	691a      	ldr	r2, [r3, #16]
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	615a      	str	r2, [r3, #20]
}
 8013e1e:	bf00      	nop
 8013e20:	3714      	adds	r7, #20
 8013e22:	46bd      	mov	sp, r7
 8013e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e28:	4770      	bx	lr
 8013e2a:	bf00      	nop
 8013e2c:	40010000 	.word	0x40010000
 8013e30:	40000400 	.word	0x40000400
 8013e34:	40000800 	.word	0x40000800
 8013e38:	40000c00 	.word	0x40000c00
 8013e3c:	40014000 	.word	0x40014000
 8013e40:	40014400 	.word	0x40014400
 8013e44:	40014800 	.word	0x40014800

08013e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b087      	sub	sp, #28
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
 8013e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	6a1b      	ldr	r3, [r3, #32]
 8013e56:	f023 0201 	bic.w	r2, r3, #1
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	6a1b      	ldr	r3, [r3, #32]
 8013e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	699b      	ldr	r3, [r3, #24]
 8013e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f023 0303 	bic.w	r3, r3, #3
 8013e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	68fa      	ldr	r2, [r7, #12]
 8013e86:	4313      	orrs	r3, r2
 8013e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013e8a:	697b      	ldr	r3, [r7, #20]
 8013e8c:	f023 0302 	bic.w	r3, r3, #2
 8013e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013e92:	683b      	ldr	r3, [r7, #0]
 8013e94:	689b      	ldr	r3, [r3, #8]
 8013e96:	697a      	ldr	r2, [r7, #20]
 8013e98:	4313      	orrs	r3, r2
 8013e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	4a1c      	ldr	r2, [pc, #112]	; (8013f10 <TIM_OC1_SetConfig+0xc8>)
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	d10c      	bne.n	8013ebe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	f023 0308 	bic.w	r3, r3, #8
 8013eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013eac:	683b      	ldr	r3, [r7, #0]
 8013eae:	68db      	ldr	r3, [r3, #12]
 8013eb0:	697a      	ldr	r2, [r7, #20]
 8013eb2:	4313      	orrs	r3, r2
 8013eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	f023 0304 	bic.w	r3, r3, #4
 8013ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	4a13      	ldr	r2, [pc, #76]	; (8013f10 <TIM_OC1_SetConfig+0xc8>)
 8013ec2:	4293      	cmp	r3, r2
 8013ec4:	d111      	bne.n	8013eea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013ed6:	683b      	ldr	r3, [r7, #0]
 8013ed8:	695b      	ldr	r3, [r3, #20]
 8013eda:	693a      	ldr	r2, [r7, #16]
 8013edc:	4313      	orrs	r3, r2
 8013ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	699b      	ldr	r3, [r3, #24]
 8013ee4:	693a      	ldr	r2, [r7, #16]
 8013ee6:	4313      	orrs	r3, r2
 8013ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	693a      	ldr	r2, [r7, #16]
 8013eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	68fa      	ldr	r2, [r7, #12]
 8013ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	685a      	ldr	r2, [r3, #4]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	697a      	ldr	r2, [r7, #20]
 8013f02:	621a      	str	r2, [r3, #32]
}
 8013f04:	bf00      	nop
 8013f06:	371c      	adds	r7, #28
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0e:	4770      	bx	lr
 8013f10:	40010000 	.word	0x40010000

08013f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013f14:	b480      	push	{r7}
 8013f16:	b087      	sub	sp, #28
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	6a1b      	ldr	r3, [r3, #32]
 8013f22:	f023 0210 	bic.w	r2, r3, #16
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6a1b      	ldr	r3, [r3, #32]
 8013f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	685b      	ldr	r3, [r3, #4]
 8013f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	699b      	ldr	r3, [r3, #24]
 8013f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	021b      	lsls	r3, r3, #8
 8013f52:	68fa      	ldr	r2, [r7, #12]
 8013f54:	4313      	orrs	r3, r2
 8013f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013f58:	697b      	ldr	r3, [r7, #20]
 8013f5a:	f023 0320 	bic.w	r3, r3, #32
 8013f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	689b      	ldr	r3, [r3, #8]
 8013f64:	011b      	lsls	r3, r3, #4
 8013f66:	697a      	ldr	r2, [r7, #20]
 8013f68:	4313      	orrs	r3, r2
 8013f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	4a1e      	ldr	r2, [pc, #120]	; (8013fe8 <TIM_OC2_SetConfig+0xd4>)
 8013f70:	4293      	cmp	r3, r2
 8013f72:	d10d      	bne.n	8013f90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013f74:	697b      	ldr	r3, [r7, #20]
 8013f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	68db      	ldr	r3, [r3, #12]
 8013f80:	011b      	lsls	r3, r3, #4
 8013f82:	697a      	ldr	r2, [r7, #20]
 8013f84:	4313      	orrs	r3, r2
 8013f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013f8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	4a15      	ldr	r2, [pc, #84]	; (8013fe8 <TIM_OC2_SetConfig+0xd4>)
 8013f94:	4293      	cmp	r3, r2
 8013f96:	d113      	bne.n	8013fc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	695b      	ldr	r3, [r3, #20]
 8013fac:	009b      	lsls	r3, r3, #2
 8013fae:	693a      	ldr	r2, [r7, #16]
 8013fb0:	4313      	orrs	r3, r2
 8013fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	699b      	ldr	r3, [r3, #24]
 8013fb8:	009b      	lsls	r3, r3, #2
 8013fba:	693a      	ldr	r2, [r7, #16]
 8013fbc:	4313      	orrs	r3, r2
 8013fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	693a      	ldr	r2, [r7, #16]
 8013fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	68fa      	ldr	r2, [r7, #12]
 8013fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	685a      	ldr	r2, [r3, #4]
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	697a      	ldr	r2, [r7, #20]
 8013fd8:	621a      	str	r2, [r3, #32]
}
 8013fda:	bf00      	nop
 8013fdc:	371c      	adds	r7, #28
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe4:	4770      	bx	lr
 8013fe6:	bf00      	nop
 8013fe8:	40010000 	.word	0x40010000

08013fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013fec:	b480      	push	{r7}
 8013fee:	b087      	sub	sp, #28
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6a1b      	ldr	r3, [r3, #32]
 8013ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	6a1b      	ldr	r3, [r3, #32]
 8014006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	685b      	ldr	r3, [r3, #4]
 801400c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	69db      	ldr	r3, [r3, #28]
 8014012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	f023 0303 	bic.w	r3, r3, #3
 8014022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	68fa      	ldr	r2, [r7, #12]
 801402a:	4313      	orrs	r3, r2
 801402c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	689b      	ldr	r3, [r3, #8]
 801403a:	021b      	lsls	r3, r3, #8
 801403c:	697a      	ldr	r2, [r7, #20]
 801403e:	4313      	orrs	r3, r2
 8014040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	4a1d      	ldr	r2, [pc, #116]	; (80140bc <TIM_OC3_SetConfig+0xd0>)
 8014046:	4293      	cmp	r3, r2
 8014048:	d10d      	bne.n	8014066 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	68db      	ldr	r3, [r3, #12]
 8014056:	021b      	lsls	r3, r3, #8
 8014058:	697a      	ldr	r2, [r7, #20]
 801405a:	4313      	orrs	r3, r2
 801405c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	4a14      	ldr	r2, [pc, #80]	; (80140bc <TIM_OC3_SetConfig+0xd0>)
 801406a:	4293      	cmp	r3, r2
 801406c:	d113      	bne.n	8014096 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801407c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	695b      	ldr	r3, [r3, #20]
 8014082:	011b      	lsls	r3, r3, #4
 8014084:	693a      	ldr	r2, [r7, #16]
 8014086:	4313      	orrs	r3, r2
 8014088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	699b      	ldr	r3, [r3, #24]
 801408e:	011b      	lsls	r3, r3, #4
 8014090:	693a      	ldr	r2, [r7, #16]
 8014092:	4313      	orrs	r3, r2
 8014094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	693a      	ldr	r2, [r7, #16]
 801409a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	68fa      	ldr	r2, [r7, #12]
 80140a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80140a2:	683b      	ldr	r3, [r7, #0]
 80140a4:	685a      	ldr	r2, [r3, #4]
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	697a      	ldr	r2, [r7, #20]
 80140ae:	621a      	str	r2, [r3, #32]
}
 80140b0:	bf00      	nop
 80140b2:	371c      	adds	r7, #28
 80140b4:	46bd      	mov	sp, r7
 80140b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ba:	4770      	bx	lr
 80140bc:	40010000 	.word	0x40010000

080140c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80140c0:	b480      	push	{r7}
 80140c2:	b087      	sub	sp, #28
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
 80140c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	6a1b      	ldr	r3, [r3, #32]
 80140ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	6a1b      	ldr	r3, [r3, #32]
 80140da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	685b      	ldr	r3, [r3, #4]
 80140e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	69db      	ldr	r3, [r3, #28]
 80140e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80140ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80140f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	021b      	lsls	r3, r3, #8
 80140fe:	68fa      	ldr	r2, [r7, #12]
 8014100:	4313      	orrs	r3, r2
 8014102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014104:	693b      	ldr	r3, [r7, #16]
 8014106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801410a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	689b      	ldr	r3, [r3, #8]
 8014110:	031b      	lsls	r3, r3, #12
 8014112:	693a      	ldr	r2, [r7, #16]
 8014114:	4313      	orrs	r3, r2
 8014116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	4a10      	ldr	r2, [pc, #64]	; (801415c <TIM_OC4_SetConfig+0x9c>)
 801411c:	4293      	cmp	r3, r2
 801411e:	d109      	bne.n	8014134 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014120:	697b      	ldr	r3, [r7, #20]
 8014122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	695b      	ldr	r3, [r3, #20]
 801412c:	019b      	lsls	r3, r3, #6
 801412e:	697a      	ldr	r2, [r7, #20]
 8014130:	4313      	orrs	r3, r2
 8014132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	697a      	ldr	r2, [r7, #20]
 8014138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	68fa      	ldr	r2, [r7, #12]
 801413e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	685a      	ldr	r2, [r3, #4]
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	693a      	ldr	r2, [r7, #16]
 801414c:	621a      	str	r2, [r3, #32]
}
 801414e:	bf00      	nop
 8014150:	371c      	adds	r7, #28
 8014152:	46bd      	mov	sp, r7
 8014154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014158:	4770      	bx	lr
 801415a:	bf00      	nop
 801415c:	40010000 	.word	0x40010000

08014160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014160:	b480      	push	{r7}
 8014162:	b085      	sub	sp, #20
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
 8014168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014170:	2b01      	cmp	r3, #1
 8014172:	d101      	bne.n	8014178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014174:	2302      	movs	r3, #2
 8014176:	e050      	b.n	801421a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	2201      	movs	r2, #1
 801417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2202      	movs	r2, #2
 8014184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	689b      	ldr	r3, [r3, #8]
 8014196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801419e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	68fa      	ldr	r2, [r7, #12]
 80141a6:	4313      	orrs	r3, r2
 80141a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	68fa      	ldr	r2, [r7, #12]
 80141b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	4a1c      	ldr	r2, [pc, #112]	; (8014228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80141b8:	4293      	cmp	r3, r2
 80141ba:	d018      	beq.n	80141ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80141c4:	d013      	beq.n	80141ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	4a18      	ldr	r2, [pc, #96]	; (801422c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80141cc:	4293      	cmp	r3, r2
 80141ce:	d00e      	beq.n	80141ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	4a16      	ldr	r2, [pc, #88]	; (8014230 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80141d6:	4293      	cmp	r3, r2
 80141d8:	d009      	beq.n	80141ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	4a15      	ldr	r2, [pc, #84]	; (8014234 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80141e0:	4293      	cmp	r3, r2
 80141e2:	d004      	beq.n	80141ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	4a13      	ldr	r2, [pc, #76]	; (8014238 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80141ea:	4293      	cmp	r3, r2
 80141ec:	d10c      	bne.n	8014208 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80141f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	68ba      	ldr	r2, [r7, #8]
 80141fc:	4313      	orrs	r3, r2
 80141fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	68ba      	ldr	r2, [r7, #8]
 8014206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2201      	movs	r2, #1
 801420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2200      	movs	r2, #0
 8014214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014218:	2300      	movs	r3, #0
}
 801421a:	4618      	mov	r0, r3
 801421c:	3714      	adds	r7, #20
 801421e:	46bd      	mov	sp, r7
 8014220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014224:	4770      	bx	lr
 8014226:	bf00      	nop
 8014228:	40010000 	.word	0x40010000
 801422c:	40000400 	.word	0x40000400
 8014230:	40000800 	.word	0x40000800
 8014234:	40000c00 	.word	0x40000c00
 8014238:	40014000 	.word	0x40014000

0801423c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801423c:	b480      	push	{r7}
 801423e:	b083      	sub	sp, #12
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014244:	bf00      	nop
 8014246:	370c      	adds	r7, #12
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr

08014250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014250:	b480      	push	{r7}
 8014252:	b083      	sub	sp, #12
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014258:	bf00      	nop
 801425a:	370c      	adds	r7, #12
 801425c:	46bd      	mov	sp, r7
 801425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014262:	4770      	bx	lr

08014264 <__errno>:
 8014264:	4b01      	ldr	r3, [pc, #4]	; (801426c <__errno+0x8>)
 8014266:	6818      	ldr	r0, [r3, #0]
 8014268:	4770      	bx	lr
 801426a:	bf00      	nop
 801426c:	2000006c 	.word	0x2000006c

08014270 <__libc_init_array>:
 8014270:	b570      	push	{r4, r5, r6, lr}
 8014272:	4d0d      	ldr	r5, [pc, #52]	; (80142a8 <__libc_init_array+0x38>)
 8014274:	4c0d      	ldr	r4, [pc, #52]	; (80142ac <__libc_init_array+0x3c>)
 8014276:	1b64      	subs	r4, r4, r5
 8014278:	10a4      	asrs	r4, r4, #2
 801427a:	2600      	movs	r6, #0
 801427c:	42a6      	cmp	r6, r4
 801427e:	d109      	bne.n	8014294 <__libc_init_array+0x24>
 8014280:	4d0b      	ldr	r5, [pc, #44]	; (80142b0 <__libc_init_array+0x40>)
 8014282:	4c0c      	ldr	r4, [pc, #48]	; (80142b4 <__libc_init_array+0x44>)
 8014284:	f002 ff04 	bl	8017090 <_init>
 8014288:	1b64      	subs	r4, r4, r5
 801428a:	10a4      	asrs	r4, r4, #2
 801428c:	2600      	movs	r6, #0
 801428e:	42a6      	cmp	r6, r4
 8014290:	d105      	bne.n	801429e <__libc_init_array+0x2e>
 8014292:	bd70      	pop	{r4, r5, r6, pc}
 8014294:	f855 3b04 	ldr.w	r3, [r5], #4
 8014298:	4798      	blx	r3
 801429a:	3601      	adds	r6, #1
 801429c:	e7ee      	b.n	801427c <__libc_init_array+0xc>
 801429e:	f855 3b04 	ldr.w	r3, [r5], #4
 80142a2:	4798      	blx	r3
 80142a4:	3601      	adds	r6, #1
 80142a6:	e7f2      	b.n	801428e <__libc_init_array+0x1e>
 80142a8:	08021d4c 	.word	0x08021d4c
 80142ac:	08021d4c 	.word	0x08021d4c
 80142b0:	08021d4c 	.word	0x08021d4c
 80142b4:	08021d50 	.word	0x08021d50

080142b8 <memset>:
 80142b8:	4402      	add	r2, r0
 80142ba:	4603      	mov	r3, r0
 80142bc:	4293      	cmp	r3, r2
 80142be:	d100      	bne.n	80142c2 <memset+0xa>
 80142c0:	4770      	bx	lr
 80142c2:	f803 1b01 	strb.w	r1, [r3], #1
 80142c6:	e7f9      	b.n	80142bc <memset+0x4>

080142c8 <__cvt>:
 80142c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80142cc:	ec55 4b10 	vmov	r4, r5, d0
 80142d0:	2d00      	cmp	r5, #0
 80142d2:	460e      	mov	r6, r1
 80142d4:	4619      	mov	r1, r3
 80142d6:	462b      	mov	r3, r5
 80142d8:	bfbb      	ittet	lt
 80142da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80142de:	461d      	movlt	r5, r3
 80142e0:	2300      	movge	r3, #0
 80142e2:	232d      	movlt	r3, #45	; 0x2d
 80142e4:	700b      	strb	r3, [r1, #0]
 80142e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80142ec:	4691      	mov	r9, r2
 80142ee:	f023 0820 	bic.w	r8, r3, #32
 80142f2:	bfbc      	itt	lt
 80142f4:	4622      	movlt	r2, r4
 80142f6:	4614      	movlt	r4, r2
 80142f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80142fc:	d005      	beq.n	801430a <__cvt+0x42>
 80142fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014302:	d100      	bne.n	8014306 <__cvt+0x3e>
 8014304:	3601      	adds	r6, #1
 8014306:	2102      	movs	r1, #2
 8014308:	e000      	b.n	801430c <__cvt+0x44>
 801430a:	2103      	movs	r1, #3
 801430c:	ab03      	add	r3, sp, #12
 801430e:	9301      	str	r3, [sp, #4]
 8014310:	ab02      	add	r3, sp, #8
 8014312:	9300      	str	r3, [sp, #0]
 8014314:	ec45 4b10 	vmov	d0, r4, r5
 8014318:	4653      	mov	r3, sl
 801431a:	4632      	mov	r2, r6
 801431c:	f000 fcec 	bl	8014cf8 <_dtoa_r>
 8014320:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014324:	4607      	mov	r7, r0
 8014326:	d102      	bne.n	801432e <__cvt+0x66>
 8014328:	f019 0f01 	tst.w	r9, #1
 801432c:	d022      	beq.n	8014374 <__cvt+0xac>
 801432e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014332:	eb07 0906 	add.w	r9, r7, r6
 8014336:	d110      	bne.n	801435a <__cvt+0x92>
 8014338:	783b      	ldrb	r3, [r7, #0]
 801433a:	2b30      	cmp	r3, #48	; 0x30
 801433c:	d10a      	bne.n	8014354 <__cvt+0x8c>
 801433e:	2200      	movs	r2, #0
 8014340:	2300      	movs	r3, #0
 8014342:	4620      	mov	r0, r4
 8014344:	4629      	mov	r1, r5
 8014346:	f7f8 faf7 	bl	800c938 <__aeabi_dcmpeq>
 801434a:	b918      	cbnz	r0, 8014354 <__cvt+0x8c>
 801434c:	f1c6 0601 	rsb	r6, r6, #1
 8014350:	f8ca 6000 	str.w	r6, [sl]
 8014354:	f8da 3000 	ldr.w	r3, [sl]
 8014358:	4499      	add	r9, r3
 801435a:	2200      	movs	r2, #0
 801435c:	2300      	movs	r3, #0
 801435e:	4620      	mov	r0, r4
 8014360:	4629      	mov	r1, r5
 8014362:	f7f8 fae9 	bl	800c938 <__aeabi_dcmpeq>
 8014366:	b108      	cbz	r0, 801436c <__cvt+0xa4>
 8014368:	f8cd 900c 	str.w	r9, [sp, #12]
 801436c:	2230      	movs	r2, #48	; 0x30
 801436e:	9b03      	ldr	r3, [sp, #12]
 8014370:	454b      	cmp	r3, r9
 8014372:	d307      	bcc.n	8014384 <__cvt+0xbc>
 8014374:	9b03      	ldr	r3, [sp, #12]
 8014376:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014378:	1bdb      	subs	r3, r3, r7
 801437a:	4638      	mov	r0, r7
 801437c:	6013      	str	r3, [r2, #0]
 801437e:	b004      	add	sp, #16
 8014380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014384:	1c59      	adds	r1, r3, #1
 8014386:	9103      	str	r1, [sp, #12]
 8014388:	701a      	strb	r2, [r3, #0]
 801438a:	e7f0      	b.n	801436e <__cvt+0xa6>

0801438c <__exponent>:
 801438c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801438e:	4603      	mov	r3, r0
 8014390:	2900      	cmp	r1, #0
 8014392:	bfb8      	it	lt
 8014394:	4249      	neglt	r1, r1
 8014396:	f803 2b02 	strb.w	r2, [r3], #2
 801439a:	bfb4      	ite	lt
 801439c:	222d      	movlt	r2, #45	; 0x2d
 801439e:	222b      	movge	r2, #43	; 0x2b
 80143a0:	2909      	cmp	r1, #9
 80143a2:	7042      	strb	r2, [r0, #1]
 80143a4:	dd2a      	ble.n	80143fc <__exponent+0x70>
 80143a6:	f10d 0407 	add.w	r4, sp, #7
 80143aa:	46a4      	mov	ip, r4
 80143ac:	270a      	movs	r7, #10
 80143ae:	46a6      	mov	lr, r4
 80143b0:	460a      	mov	r2, r1
 80143b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80143b6:	fb07 1516 	mls	r5, r7, r6, r1
 80143ba:	3530      	adds	r5, #48	; 0x30
 80143bc:	2a63      	cmp	r2, #99	; 0x63
 80143be:	f104 34ff 	add.w	r4, r4, #4294967295
 80143c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80143c6:	4631      	mov	r1, r6
 80143c8:	dcf1      	bgt.n	80143ae <__exponent+0x22>
 80143ca:	3130      	adds	r1, #48	; 0x30
 80143cc:	f1ae 0502 	sub.w	r5, lr, #2
 80143d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80143d4:	1c44      	adds	r4, r0, #1
 80143d6:	4629      	mov	r1, r5
 80143d8:	4561      	cmp	r1, ip
 80143da:	d30a      	bcc.n	80143f2 <__exponent+0x66>
 80143dc:	f10d 0209 	add.w	r2, sp, #9
 80143e0:	eba2 020e 	sub.w	r2, r2, lr
 80143e4:	4565      	cmp	r5, ip
 80143e6:	bf88      	it	hi
 80143e8:	2200      	movhi	r2, #0
 80143ea:	4413      	add	r3, r2
 80143ec:	1a18      	subs	r0, r3, r0
 80143ee:	b003      	add	sp, #12
 80143f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80143f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80143fa:	e7ed      	b.n	80143d8 <__exponent+0x4c>
 80143fc:	2330      	movs	r3, #48	; 0x30
 80143fe:	3130      	adds	r1, #48	; 0x30
 8014400:	7083      	strb	r3, [r0, #2]
 8014402:	70c1      	strb	r1, [r0, #3]
 8014404:	1d03      	adds	r3, r0, #4
 8014406:	e7f1      	b.n	80143ec <__exponent+0x60>

08014408 <_printf_float>:
 8014408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801440c:	ed2d 8b02 	vpush	{d8}
 8014410:	b08d      	sub	sp, #52	; 0x34
 8014412:	460c      	mov	r4, r1
 8014414:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014418:	4616      	mov	r6, r2
 801441a:	461f      	mov	r7, r3
 801441c:	4605      	mov	r5, r0
 801441e:	f001 fa59 	bl	80158d4 <_localeconv_r>
 8014422:	f8d0 a000 	ldr.w	sl, [r0]
 8014426:	4650      	mov	r0, sl
 8014428:	f7f7 fe0a 	bl	800c040 <strlen>
 801442c:	2300      	movs	r3, #0
 801442e:	930a      	str	r3, [sp, #40]	; 0x28
 8014430:	6823      	ldr	r3, [r4, #0]
 8014432:	9305      	str	r3, [sp, #20]
 8014434:	f8d8 3000 	ldr.w	r3, [r8]
 8014438:	f894 b018 	ldrb.w	fp, [r4, #24]
 801443c:	3307      	adds	r3, #7
 801443e:	f023 0307 	bic.w	r3, r3, #7
 8014442:	f103 0208 	add.w	r2, r3, #8
 8014446:	f8c8 2000 	str.w	r2, [r8]
 801444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801444e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014452:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014456:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801445a:	9307      	str	r3, [sp, #28]
 801445c:	f8cd 8018 	str.w	r8, [sp, #24]
 8014460:	ee08 0a10 	vmov	s16, r0
 8014464:	4b9f      	ldr	r3, [pc, #636]	; (80146e4 <_printf_float+0x2dc>)
 8014466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801446a:	f04f 32ff 	mov.w	r2, #4294967295
 801446e:	f7f8 fa95 	bl	800c99c <__aeabi_dcmpun>
 8014472:	bb88      	cbnz	r0, 80144d8 <_printf_float+0xd0>
 8014474:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014478:	4b9a      	ldr	r3, [pc, #616]	; (80146e4 <_printf_float+0x2dc>)
 801447a:	f04f 32ff 	mov.w	r2, #4294967295
 801447e:	f7f8 fa6f 	bl	800c960 <__aeabi_dcmple>
 8014482:	bb48      	cbnz	r0, 80144d8 <_printf_float+0xd0>
 8014484:	2200      	movs	r2, #0
 8014486:	2300      	movs	r3, #0
 8014488:	4640      	mov	r0, r8
 801448a:	4649      	mov	r1, r9
 801448c:	f7f8 fa5e 	bl	800c94c <__aeabi_dcmplt>
 8014490:	b110      	cbz	r0, 8014498 <_printf_float+0x90>
 8014492:	232d      	movs	r3, #45	; 0x2d
 8014494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014498:	4b93      	ldr	r3, [pc, #588]	; (80146e8 <_printf_float+0x2e0>)
 801449a:	4894      	ldr	r0, [pc, #592]	; (80146ec <_printf_float+0x2e4>)
 801449c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80144a0:	bf94      	ite	ls
 80144a2:	4698      	movls	r8, r3
 80144a4:	4680      	movhi	r8, r0
 80144a6:	2303      	movs	r3, #3
 80144a8:	6123      	str	r3, [r4, #16]
 80144aa:	9b05      	ldr	r3, [sp, #20]
 80144ac:	f023 0204 	bic.w	r2, r3, #4
 80144b0:	6022      	str	r2, [r4, #0]
 80144b2:	f04f 0900 	mov.w	r9, #0
 80144b6:	9700      	str	r7, [sp, #0]
 80144b8:	4633      	mov	r3, r6
 80144ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80144bc:	4621      	mov	r1, r4
 80144be:	4628      	mov	r0, r5
 80144c0:	f000 f9d8 	bl	8014874 <_printf_common>
 80144c4:	3001      	adds	r0, #1
 80144c6:	f040 8090 	bne.w	80145ea <_printf_float+0x1e2>
 80144ca:	f04f 30ff 	mov.w	r0, #4294967295
 80144ce:	b00d      	add	sp, #52	; 0x34
 80144d0:	ecbd 8b02 	vpop	{d8}
 80144d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144d8:	4642      	mov	r2, r8
 80144da:	464b      	mov	r3, r9
 80144dc:	4640      	mov	r0, r8
 80144de:	4649      	mov	r1, r9
 80144e0:	f7f8 fa5c 	bl	800c99c <__aeabi_dcmpun>
 80144e4:	b140      	cbz	r0, 80144f8 <_printf_float+0xf0>
 80144e6:	464b      	mov	r3, r9
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	bfbc      	itt	lt
 80144ec:	232d      	movlt	r3, #45	; 0x2d
 80144ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80144f2:	487f      	ldr	r0, [pc, #508]	; (80146f0 <_printf_float+0x2e8>)
 80144f4:	4b7f      	ldr	r3, [pc, #508]	; (80146f4 <_printf_float+0x2ec>)
 80144f6:	e7d1      	b.n	801449c <_printf_float+0x94>
 80144f8:	6863      	ldr	r3, [r4, #4]
 80144fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80144fe:	9206      	str	r2, [sp, #24]
 8014500:	1c5a      	adds	r2, r3, #1
 8014502:	d13f      	bne.n	8014584 <_printf_float+0x17c>
 8014504:	2306      	movs	r3, #6
 8014506:	6063      	str	r3, [r4, #4]
 8014508:	9b05      	ldr	r3, [sp, #20]
 801450a:	6861      	ldr	r1, [r4, #4]
 801450c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014510:	2300      	movs	r3, #0
 8014512:	9303      	str	r3, [sp, #12]
 8014514:	ab0a      	add	r3, sp, #40	; 0x28
 8014516:	e9cd b301 	strd	fp, r3, [sp, #4]
 801451a:	ab09      	add	r3, sp, #36	; 0x24
 801451c:	ec49 8b10 	vmov	d0, r8, r9
 8014520:	9300      	str	r3, [sp, #0]
 8014522:	6022      	str	r2, [r4, #0]
 8014524:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014528:	4628      	mov	r0, r5
 801452a:	f7ff fecd 	bl	80142c8 <__cvt>
 801452e:	9b06      	ldr	r3, [sp, #24]
 8014530:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014532:	2b47      	cmp	r3, #71	; 0x47
 8014534:	4680      	mov	r8, r0
 8014536:	d108      	bne.n	801454a <_printf_float+0x142>
 8014538:	1cc8      	adds	r0, r1, #3
 801453a:	db02      	blt.n	8014542 <_printf_float+0x13a>
 801453c:	6863      	ldr	r3, [r4, #4]
 801453e:	4299      	cmp	r1, r3
 8014540:	dd41      	ble.n	80145c6 <_printf_float+0x1be>
 8014542:	f1ab 0b02 	sub.w	fp, fp, #2
 8014546:	fa5f fb8b 	uxtb.w	fp, fp
 801454a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801454e:	d820      	bhi.n	8014592 <_printf_float+0x18a>
 8014550:	3901      	subs	r1, #1
 8014552:	465a      	mov	r2, fp
 8014554:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014558:	9109      	str	r1, [sp, #36]	; 0x24
 801455a:	f7ff ff17 	bl	801438c <__exponent>
 801455e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014560:	1813      	adds	r3, r2, r0
 8014562:	2a01      	cmp	r2, #1
 8014564:	4681      	mov	r9, r0
 8014566:	6123      	str	r3, [r4, #16]
 8014568:	dc02      	bgt.n	8014570 <_printf_float+0x168>
 801456a:	6822      	ldr	r2, [r4, #0]
 801456c:	07d2      	lsls	r2, r2, #31
 801456e:	d501      	bpl.n	8014574 <_printf_float+0x16c>
 8014570:	3301      	adds	r3, #1
 8014572:	6123      	str	r3, [r4, #16]
 8014574:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014578:	2b00      	cmp	r3, #0
 801457a:	d09c      	beq.n	80144b6 <_printf_float+0xae>
 801457c:	232d      	movs	r3, #45	; 0x2d
 801457e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014582:	e798      	b.n	80144b6 <_printf_float+0xae>
 8014584:	9a06      	ldr	r2, [sp, #24]
 8014586:	2a47      	cmp	r2, #71	; 0x47
 8014588:	d1be      	bne.n	8014508 <_printf_float+0x100>
 801458a:	2b00      	cmp	r3, #0
 801458c:	d1bc      	bne.n	8014508 <_printf_float+0x100>
 801458e:	2301      	movs	r3, #1
 8014590:	e7b9      	b.n	8014506 <_printf_float+0xfe>
 8014592:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014596:	d118      	bne.n	80145ca <_printf_float+0x1c2>
 8014598:	2900      	cmp	r1, #0
 801459a:	6863      	ldr	r3, [r4, #4]
 801459c:	dd0b      	ble.n	80145b6 <_printf_float+0x1ae>
 801459e:	6121      	str	r1, [r4, #16]
 80145a0:	b913      	cbnz	r3, 80145a8 <_printf_float+0x1a0>
 80145a2:	6822      	ldr	r2, [r4, #0]
 80145a4:	07d0      	lsls	r0, r2, #31
 80145a6:	d502      	bpl.n	80145ae <_printf_float+0x1a6>
 80145a8:	3301      	adds	r3, #1
 80145aa:	440b      	add	r3, r1
 80145ac:	6123      	str	r3, [r4, #16]
 80145ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80145b0:	f04f 0900 	mov.w	r9, #0
 80145b4:	e7de      	b.n	8014574 <_printf_float+0x16c>
 80145b6:	b913      	cbnz	r3, 80145be <_printf_float+0x1b6>
 80145b8:	6822      	ldr	r2, [r4, #0]
 80145ba:	07d2      	lsls	r2, r2, #31
 80145bc:	d501      	bpl.n	80145c2 <_printf_float+0x1ba>
 80145be:	3302      	adds	r3, #2
 80145c0:	e7f4      	b.n	80145ac <_printf_float+0x1a4>
 80145c2:	2301      	movs	r3, #1
 80145c4:	e7f2      	b.n	80145ac <_printf_float+0x1a4>
 80145c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80145ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145cc:	4299      	cmp	r1, r3
 80145ce:	db05      	blt.n	80145dc <_printf_float+0x1d4>
 80145d0:	6823      	ldr	r3, [r4, #0]
 80145d2:	6121      	str	r1, [r4, #16]
 80145d4:	07d8      	lsls	r0, r3, #31
 80145d6:	d5ea      	bpl.n	80145ae <_printf_float+0x1a6>
 80145d8:	1c4b      	adds	r3, r1, #1
 80145da:	e7e7      	b.n	80145ac <_printf_float+0x1a4>
 80145dc:	2900      	cmp	r1, #0
 80145de:	bfd4      	ite	le
 80145e0:	f1c1 0202 	rsble	r2, r1, #2
 80145e4:	2201      	movgt	r2, #1
 80145e6:	4413      	add	r3, r2
 80145e8:	e7e0      	b.n	80145ac <_printf_float+0x1a4>
 80145ea:	6823      	ldr	r3, [r4, #0]
 80145ec:	055a      	lsls	r2, r3, #21
 80145ee:	d407      	bmi.n	8014600 <_printf_float+0x1f8>
 80145f0:	6923      	ldr	r3, [r4, #16]
 80145f2:	4642      	mov	r2, r8
 80145f4:	4631      	mov	r1, r6
 80145f6:	4628      	mov	r0, r5
 80145f8:	47b8      	blx	r7
 80145fa:	3001      	adds	r0, #1
 80145fc:	d12c      	bne.n	8014658 <_printf_float+0x250>
 80145fe:	e764      	b.n	80144ca <_printf_float+0xc2>
 8014600:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014604:	f240 80e0 	bls.w	80147c8 <_printf_float+0x3c0>
 8014608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801460c:	2200      	movs	r2, #0
 801460e:	2300      	movs	r3, #0
 8014610:	f7f8 f992 	bl	800c938 <__aeabi_dcmpeq>
 8014614:	2800      	cmp	r0, #0
 8014616:	d034      	beq.n	8014682 <_printf_float+0x27a>
 8014618:	4a37      	ldr	r2, [pc, #220]	; (80146f8 <_printf_float+0x2f0>)
 801461a:	2301      	movs	r3, #1
 801461c:	4631      	mov	r1, r6
 801461e:	4628      	mov	r0, r5
 8014620:	47b8      	blx	r7
 8014622:	3001      	adds	r0, #1
 8014624:	f43f af51 	beq.w	80144ca <_printf_float+0xc2>
 8014628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801462c:	429a      	cmp	r2, r3
 801462e:	db02      	blt.n	8014636 <_printf_float+0x22e>
 8014630:	6823      	ldr	r3, [r4, #0]
 8014632:	07d8      	lsls	r0, r3, #31
 8014634:	d510      	bpl.n	8014658 <_printf_float+0x250>
 8014636:	ee18 3a10 	vmov	r3, s16
 801463a:	4652      	mov	r2, sl
 801463c:	4631      	mov	r1, r6
 801463e:	4628      	mov	r0, r5
 8014640:	47b8      	blx	r7
 8014642:	3001      	adds	r0, #1
 8014644:	f43f af41 	beq.w	80144ca <_printf_float+0xc2>
 8014648:	f04f 0800 	mov.w	r8, #0
 801464c:	f104 091a 	add.w	r9, r4, #26
 8014650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014652:	3b01      	subs	r3, #1
 8014654:	4543      	cmp	r3, r8
 8014656:	dc09      	bgt.n	801466c <_printf_float+0x264>
 8014658:	6823      	ldr	r3, [r4, #0]
 801465a:	079b      	lsls	r3, r3, #30
 801465c:	f100 8105 	bmi.w	801486a <_printf_float+0x462>
 8014660:	68e0      	ldr	r0, [r4, #12]
 8014662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014664:	4298      	cmp	r0, r3
 8014666:	bfb8      	it	lt
 8014668:	4618      	movlt	r0, r3
 801466a:	e730      	b.n	80144ce <_printf_float+0xc6>
 801466c:	2301      	movs	r3, #1
 801466e:	464a      	mov	r2, r9
 8014670:	4631      	mov	r1, r6
 8014672:	4628      	mov	r0, r5
 8014674:	47b8      	blx	r7
 8014676:	3001      	adds	r0, #1
 8014678:	f43f af27 	beq.w	80144ca <_printf_float+0xc2>
 801467c:	f108 0801 	add.w	r8, r8, #1
 8014680:	e7e6      	b.n	8014650 <_printf_float+0x248>
 8014682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014684:	2b00      	cmp	r3, #0
 8014686:	dc39      	bgt.n	80146fc <_printf_float+0x2f4>
 8014688:	4a1b      	ldr	r2, [pc, #108]	; (80146f8 <_printf_float+0x2f0>)
 801468a:	2301      	movs	r3, #1
 801468c:	4631      	mov	r1, r6
 801468e:	4628      	mov	r0, r5
 8014690:	47b8      	blx	r7
 8014692:	3001      	adds	r0, #1
 8014694:	f43f af19 	beq.w	80144ca <_printf_float+0xc2>
 8014698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801469c:	4313      	orrs	r3, r2
 801469e:	d102      	bne.n	80146a6 <_printf_float+0x29e>
 80146a0:	6823      	ldr	r3, [r4, #0]
 80146a2:	07d9      	lsls	r1, r3, #31
 80146a4:	d5d8      	bpl.n	8014658 <_printf_float+0x250>
 80146a6:	ee18 3a10 	vmov	r3, s16
 80146aa:	4652      	mov	r2, sl
 80146ac:	4631      	mov	r1, r6
 80146ae:	4628      	mov	r0, r5
 80146b0:	47b8      	blx	r7
 80146b2:	3001      	adds	r0, #1
 80146b4:	f43f af09 	beq.w	80144ca <_printf_float+0xc2>
 80146b8:	f04f 0900 	mov.w	r9, #0
 80146bc:	f104 0a1a 	add.w	sl, r4, #26
 80146c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146c2:	425b      	negs	r3, r3
 80146c4:	454b      	cmp	r3, r9
 80146c6:	dc01      	bgt.n	80146cc <_printf_float+0x2c4>
 80146c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146ca:	e792      	b.n	80145f2 <_printf_float+0x1ea>
 80146cc:	2301      	movs	r3, #1
 80146ce:	4652      	mov	r2, sl
 80146d0:	4631      	mov	r1, r6
 80146d2:	4628      	mov	r0, r5
 80146d4:	47b8      	blx	r7
 80146d6:	3001      	adds	r0, #1
 80146d8:	f43f aef7 	beq.w	80144ca <_printf_float+0xc2>
 80146dc:	f109 0901 	add.w	r9, r9, #1
 80146e0:	e7ee      	b.n	80146c0 <_printf_float+0x2b8>
 80146e2:	bf00      	nop
 80146e4:	7fefffff 	.word	0x7fefffff
 80146e8:	0802196c 	.word	0x0802196c
 80146ec:	08021970 	.word	0x08021970
 80146f0:	08021978 	.word	0x08021978
 80146f4:	08021974 	.word	0x08021974
 80146f8:	0802197c 	.word	0x0802197c
 80146fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014700:	429a      	cmp	r2, r3
 8014702:	bfa8      	it	ge
 8014704:	461a      	movge	r2, r3
 8014706:	2a00      	cmp	r2, #0
 8014708:	4691      	mov	r9, r2
 801470a:	dc37      	bgt.n	801477c <_printf_float+0x374>
 801470c:	f04f 0b00 	mov.w	fp, #0
 8014710:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014714:	f104 021a 	add.w	r2, r4, #26
 8014718:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801471a:	9305      	str	r3, [sp, #20]
 801471c:	eba3 0309 	sub.w	r3, r3, r9
 8014720:	455b      	cmp	r3, fp
 8014722:	dc33      	bgt.n	801478c <_printf_float+0x384>
 8014724:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014728:	429a      	cmp	r2, r3
 801472a:	db3b      	blt.n	80147a4 <_printf_float+0x39c>
 801472c:	6823      	ldr	r3, [r4, #0]
 801472e:	07da      	lsls	r2, r3, #31
 8014730:	d438      	bmi.n	80147a4 <_printf_float+0x39c>
 8014732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014734:	9a05      	ldr	r2, [sp, #20]
 8014736:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014738:	1a9a      	subs	r2, r3, r2
 801473a:	eba3 0901 	sub.w	r9, r3, r1
 801473e:	4591      	cmp	r9, r2
 8014740:	bfa8      	it	ge
 8014742:	4691      	movge	r9, r2
 8014744:	f1b9 0f00 	cmp.w	r9, #0
 8014748:	dc35      	bgt.n	80147b6 <_printf_float+0x3ae>
 801474a:	f04f 0800 	mov.w	r8, #0
 801474e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014752:	f104 0a1a 	add.w	sl, r4, #26
 8014756:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801475a:	1a9b      	subs	r3, r3, r2
 801475c:	eba3 0309 	sub.w	r3, r3, r9
 8014760:	4543      	cmp	r3, r8
 8014762:	f77f af79 	ble.w	8014658 <_printf_float+0x250>
 8014766:	2301      	movs	r3, #1
 8014768:	4652      	mov	r2, sl
 801476a:	4631      	mov	r1, r6
 801476c:	4628      	mov	r0, r5
 801476e:	47b8      	blx	r7
 8014770:	3001      	adds	r0, #1
 8014772:	f43f aeaa 	beq.w	80144ca <_printf_float+0xc2>
 8014776:	f108 0801 	add.w	r8, r8, #1
 801477a:	e7ec      	b.n	8014756 <_printf_float+0x34e>
 801477c:	4613      	mov	r3, r2
 801477e:	4631      	mov	r1, r6
 8014780:	4642      	mov	r2, r8
 8014782:	4628      	mov	r0, r5
 8014784:	47b8      	blx	r7
 8014786:	3001      	adds	r0, #1
 8014788:	d1c0      	bne.n	801470c <_printf_float+0x304>
 801478a:	e69e      	b.n	80144ca <_printf_float+0xc2>
 801478c:	2301      	movs	r3, #1
 801478e:	4631      	mov	r1, r6
 8014790:	4628      	mov	r0, r5
 8014792:	9205      	str	r2, [sp, #20]
 8014794:	47b8      	blx	r7
 8014796:	3001      	adds	r0, #1
 8014798:	f43f ae97 	beq.w	80144ca <_printf_float+0xc2>
 801479c:	9a05      	ldr	r2, [sp, #20]
 801479e:	f10b 0b01 	add.w	fp, fp, #1
 80147a2:	e7b9      	b.n	8014718 <_printf_float+0x310>
 80147a4:	ee18 3a10 	vmov	r3, s16
 80147a8:	4652      	mov	r2, sl
 80147aa:	4631      	mov	r1, r6
 80147ac:	4628      	mov	r0, r5
 80147ae:	47b8      	blx	r7
 80147b0:	3001      	adds	r0, #1
 80147b2:	d1be      	bne.n	8014732 <_printf_float+0x32a>
 80147b4:	e689      	b.n	80144ca <_printf_float+0xc2>
 80147b6:	9a05      	ldr	r2, [sp, #20]
 80147b8:	464b      	mov	r3, r9
 80147ba:	4442      	add	r2, r8
 80147bc:	4631      	mov	r1, r6
 80147be:	4628      	mov	r0, r5
 80147c0:	47b8      	blx	r7
 80147c2:	3001      	adds	r0, #1
 80147c4:	d1c1      	bne.n	801474a <_printf_float+0x342>
 80147c6:	e680      	b.n	80144ca <_printf_float+0xc2>
 80147c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147ca:	2a01      	cmp	r2, #1
 80147cc:	dc01      	bgt.n	80147d2 <_printf_float+0x3ca>
 80147ce:	07db      	lsls	r3, r3, #31
 80147d0:	d538      	bpl.n	8014844 <_printf_float+0x43c>
 80147d2:	2301      	movs	r3, #1
 80147d4:	4642      	mov	r2, r8
 80147d6:	4631      	mov	r1, r6
 80147d8:	4628      	mov	r0, r5
 80147da:	47b8      	blx	r7
 80147dc:	3001      	adds	r0, #1
 80147de:	f43f ae74 	beq.w	80144ca <_printf_float+0xc2>
 80147e2:	ee18 3a10 	vmov	r3, s16
 80147e6:	4652      	mov	r2, sl
 80147e8:	4631      	mov	r1, r6
 80147ea:	4628      	mov	r0, r5
 80147ec:	47b8      	blx	r7
 80147ee:	3001      	adds	r0, #1
 80147f0:	f43f ae6b 	beq.w	80144ca <_printf_float+0xc2>
 80147f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80147f8:	2200      	movs	r2, #0
 80147fa:	2300      	movs	r3, #0
 80147fc:	f7f8 f89c 	bl	800c938 <__aeabi_dcmpeq>
 8014800:	b9d8      	cbnz	r0, 801483a <_printf_float+0x432>
 8014802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014804:	f108 0201 	add.w	r2, r8, #1
 8014808:	3b01      	subs	r3, #1
 801480a:	4631      	mov	r1, r6
 801480c:	4628      	mov	r0, r5
 801480e:	47b8      	blx	r7
 8014810:	3001      	adds	r0, #1
 8014812:	d10e      	bne.n	8014832 <_printf_float+0x42a>
 8014814:	e659      	b.n	80144ca <_printf_float+0xc2>
 8014816:	2301      	movs	r3, #1
 8014818:	4652      	mov	r2, sl
 801481a:	4631      	mov	r1, r6
 801481c:	4628      	mov	r0, r5
 801481e:	47b8      	blx	r7
 8014820:	3001      	adds	r0, #1
 8014822:	f43f ae52 	beq.w	80144ca <_printf_float+0xc2>
 8014826:	f108 0801 	add.w	r8, r8, #1
 801482a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801482c:	3b01      	subs	r3, #1
 801482e:	4543      	cmp	r3, r8
 8014830:	dcf1      	bgt.n	8014816 <_printf_float+0x40e>
 8014832:	464b      	mov	r3, r9
 8014834:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014838:	e6dc      	b.n	80145f4 <_printf_float+0x1ec>
 801483a:	f04f 0800 	mov.w	r8, #0
 801483e:	f104 0a1a 	add.w	sl, r4, #26
 8014842:	e7f2      	b.n	801482a <_printf_float+0x422>
 8014844:	2301      	movs	r3, #1
 8014846:	4642      	mov	r2, r8
 8014848:	e7df      	b.n	801480a <_printf_float+0x402>
 801484a:	2301      	movs	r3, #1
 801484c:	464a      	mov	r2, r9
 801484e:	4631      	mov	r1, r6
 8014850:	4628      	mov	r0, r5
 8014852:	47b8      	blx	r7
 8014854:	3001      	adds	r0, #1
 8014856:	f43f ae38 	beq.w	80144ca <_printf_float+0xc2>
 801485a:	f108 0801 	add.w	r8, r8, #1
 801485e:	68e3      	ldr	r3, [r4, #12]
 8014860:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014862:	1a5b      	subs	r3, r3, r1
 8014864:	4543      	cmp	r3, r8
 8014866:	dcf0      	bgt.n	801484a <_printf_float+0x442>
 8014868:	e6fa      	b.n	8014660 <_printf_float+0x258>
 801486a:	f04f 0800 	mov.w	r8, #0
 801486e:	f104 0919 	add.w	r9, r4, #25
 8014872:	e7f4      	b.n	801485e <_printf_float+0x456>

08014874 <_printf_common>:
 8014874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014878:	4616      	mov	r6, r2
 801487a:	4699      	mov	r9, r3
 801487c:	688a      	ldr	r2, [r1, #8]
 801487e:	690b      	ldr	r3, [r1, #16]
 8014880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014884:	4293      	cmp	r3, r2
 8014886:	bfb8      	it	lt
 8014888:	4613      	movlt	r3, r2
 801488a:	6033      	str	r3, [r6, #0]
 801488c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014890:	4607      	mov	r7, r0
 8014892:	460c      	mov	r4, r1
 8014894:	b10a      	cbz	r2, 801489a <_printf_common+0x26>
 8014896:	3301      	adds	r3, #1
 8014898:	6033      	str	r3, [r6, #0]
 801489a:	6823      	ldr	r3, [r4, #0]
 801489c:	0699      	lsls	r1, r3, #26
 801489e:	bf42      	ittt	mi
 80148a0:	6833      	ldrmi	r3, [r6, #0]
 80148a2:	3302      	addmi	r3, #2
 80148a4:	6033      	strmi	r3, [r6, #0]
 80148a6:	6825      	ldr	r5, [r4, #0]
 80148a8:	f015 0506 	ands.w	r5, r5, #6
 80148ac:	d106      	bne.n	80148bc <_printf_common+0x48>
 80148ae:	f104 0a19 	add.w	sl, r4, #25
 80148b2:	68e3      	ldr	r3, [r4, #12]
 80148b4:	6832      	ldr	r2, [r6, #0]
 80148b6:	1a9b      	subs	r3, r3, r2
 80148b8:	42ab      	cmp	r3, r5
 80148ba:	dc26      	bgt.n	801490a <_printf_common+0x96>
 80148bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80148c0:	1e13      	subs	r3, r2, #0
 80148c2:	6822      	ldr	r2, [r4, #0]
 80148c4:	bf18      	it	ne
 80148c6:	2301      	movne	r3, #1
 80148c8:	0692      	lsls	r2, r2, #26
 80148ca:	d42b      	bmi.n	8014924 <_printf_common+0xb0>
 80148cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80148d0:	4649      	mov	r1, r9
 80148d2:	4638      	mov	r0, r7
 80148d4:	47c0      	blx	r8
 80148d6:	3001      	adds	r0, #1
 80148d8:	d01e      	beq.n	8014918 <_printf_common+0xa4>
 80148da:	6823      	ldr	r3, [r4, #0]
 80148dc:	68e5      	ldr	r5, [r4, #12]
 80148de:	6832      	ldr	r2, [r6, #0]
 80148e0:	f003 0306 	and.w	r3, r3, #6
 80148e4:	2b04      	cmp	r3, #4
 80148e6:	bf08      	it	eq
 80148e8:	1aad      	subeq	r5, r5, r2
 80148ea:	68a3      	ldr	r3, [r4, #8]
 80148ec:	6922      	ldr	r2, [r4, #16]
 80148ee:	bf0c      	ite	eq
 80148f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80148f4:	2500      	movne	r5, #0
 80148f6:	4293      	cmp	r3, r2
 80148f8:	bfc4      	itt	gt
 80148fa:	1a9b      	subgt	r3, r3, r2
 80148fc:	18ed      	addgt	r5, r5, r3
 80148fe:	2600      	movs	r6, #0
 8014900:	341a      	adds	r4, #26
 8014902:	42b5      	cmp	r5, r6
 8014904:	d11a      	bne.n	801493c <_printf_common+0xc8>
 8014906:	2000      	movs	r0, #0
 8014908:	e008      	b.n	801491c <_printf_common+0xa8>
 801490a:	2301      	movs	r3, #1
 801490c:	4652      	mov	r2, sl
 801490e:	4649      	mov	r1, r9
 8014910:	4638      	mov	r0, r7
 8014912:	47c0      	blx	r8
 8014914:	3001      	adds	r0, #1
 8014916:	d103      	bne.n	8014920 <_printf_common+0xac>
 8014918:	f04f 30ff 	mov.w	r0, #4294967295
 801491c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014920:	3501      	adds	r5, #1
 8014922:	e7c6      	b.n	80148b2 <_printf_common+0x3e>
 8014924:	18e1      	adds	r1, r4, r3
 8014926:	1c5a      	adds	r2, r3, #1
 8014928:	2030      	movs	r0, #48	; 0x30
 801492a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801492e:	4422      	add	r2, r4
 8014930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014938:	3302      	adds	r3, #2
 801493a:	e7c7      	b.n	80148cc <_printf_common+0x58>
 801493c:	2301      	movs	r3, #1
 801493e:	4622      	mov	r2, r4
 8014940:	4649      	mov	r1, r9
 8014942:	4638      	mov	r0, r7
 8014944:	47c0      	blx	r8
 8014946:	3001      	adds	r0, #1
 8014948:	d0e6      	beq.n	8014918 <_printf_common+0xa4>
 801494a:	3601      	adds	r6, #1
 801494c:	e7d9      	b.n	8014902 <_printf_common+0x8e>
	...

08014950 <_printf_i>:
 8014950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014954:	7e0f      	ldrb	r7, [r1, #24]
 8014956:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014958:	2f78      	cmp	r7, #120	; 0x78
 801495a:	4691      	mov	r9, r2
 801495c:	4680      	mov	r8, r0
 801495e:	460c      	mov	r4, r1
 8014960:	469a      	mov	sl, r3
 8014962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014966:	d807      	bhi.n	8014978 <_printf_i+0x28>
 8014968:	2f62      	cmp	r7, #98	; 0x62
 801496a:	d80a      	bhi.n	8014982 <_printf_i+0x32>
 801496c:	2f00      	cmp	r7, #0
 801496e:	f000 80d8 	beq.w	8014b22 <_printf_i+0x1d2>
 8014972:	2f58      	cmp	r7, #88	; 0x58
 8014974:	f000 80a3 	beq.w	8014abe <_printf_i+0x16e>
 8014978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801497c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014980:	e03a      	b.n	80149f8 <_printf_i+0xa8>
 8014982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014986:	2b15      	cmp	r3, #21
 8014988:	d8f6      	bhi.n	8014978 <_printf_i+0x28>
 801498a:	a101      	add	r1, pc, #4	; (adr r1, 8014990 <_printf_i+0x40>)
 801498c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014990:	080149e9 	.word	0x080149e9
 8014994:	080149fd 	.word	0x080149fd
 8014998:	08014979 	.word	0x08014979
 801499c:	08014979 	.word	0x08014979
 80149a0:	08014979 	.word	0x08014979
 80149a4:	08014979 	.word	0x08014979
 80149a8:	080149fd 	.word	0x080149fd
 80149ac:	08014979 	.word	0x08014979
 80149b0:	08014979 	.word	0x08014979
 80149b4:	08014979 	.word	0x08014979
 80149b8:	08014979 	.word	0x08014979
 80149bc:	08014b09 	.word	0x08014b09
 80149c0:	08014a2d 	.word	0x08014a2d
 80149c4:	08014aeb 	.word	0x08014aeb
 80149c8:	08014979 	.word	0x08014979
 80149cc:	08014979 	.word	0x08014979
 80149d0:	08014b2b 	.word	0x08014b2b
 80149d4:	08014979 	.word	0x08014979
 80149d8:	08014a2d 	.word	0x08014a2d
 80149dc:	08014979 	.word	0x08014979
 80149e0:	08014979 	.word	0x08014979
 80149e4:	08014af3 	.word	0x08014af3
 80149e8:	682b      	ldr	r3, [r5, #0]
 80149ea:	1d1a      	adds	r2, r3, #4
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	602a      	str	r2, [r5, #0]
 80149f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80149f8:	2301      	movs	r3, #1
 80149fa:	e0a3      	b.n	8014b44 <_printf_i+0x1f4>
 80149fc:	6820      	ldr	r0, [r4, #0]
 80149fe:	6829      	ldr	r1, [r5, #0]
 8014a00:	0606      	lsls	r6, r0, #24
 8014a02:	f101 0304 	add.w	r3, r1, #4
 8014a06:	d50a      	bpl.n	8014a1e <_printf_i+0xce>
 8014a08:	680e      	ldr	r6, [r1, #0]
 8014a0a:	602b      	str	r3, [r5, #0]
 8014a0c:	2e00      	cmp	r6, #0
 8014a0e:	da03      	bge.n	8014a18 <_printf_i+0xc8>
 8014a10:	232d      	movs	r3, #45	; 0x2d
 8014a12:	4276      	negs	r6, r6
 8014a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a18:	485e      	ldr	r0, [pc, #376]	; (8014b94 <_printf_i+0x244>)
 8014a1a:	230a      	movs	r3, #10
 8014a1c:	e019      	b.n	8014a52 <_printf_i+0x102>
 8014a1e:	680e      	ldr	r6, [r1, #0]
 8014a20:	602b      	str	r3, [r5, #0]
 8014a22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014a26:	bf18      	it	ne
 8014a28:	b236      	sxthne	r6, r6
 8014a2a:	e7ef      	b.n	8014a0c <_printf_i+0xbc>
 8014a2c:	682b      	ldr	r3, [r5, #0]
 8014a2e:	6820      	ldr	r0, [r4, #0]
 8014a30:	1d19      	adds	r1, r3, #4
 8014a32:	6029      	str	r1, [r5, #0]
 8014a34:	0601      	lsls	r1, r0, #24
 8014a36:	d501      	bpl.n	8014a3c <_printf_i+0xec>
 8014a38:	681e      	ldr	r6, [r3, #0]
 8014a3a:	e002      	b.n	8014a42 <_printf_i+0xf2>
 8014a3c:	0646      	lsls	r6, r0, #25
 8014a3e:	d5fb      	bpl.n	8014a38 <_printf_i+0xe8>
 8014a40:	881e      	ldrh	r6, [r3, #0]
 8014a42:	4854      	ldr	r0, [pc, #336]	; (8014b94 <_printf_i+0x244>)
 8014a44:	2f6f      	cmp	r7, #111	; 0x6f
 8014a46:	bf0c      	ite	eq
 8014a48:	2308      	moveq	r3, #8
 8014a4a:	230a      	movne	r3, #10
 8014a4c:	2100      	movs	r1, #0
 8014a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014a52:	6865      	ldr	r5, [r4, #4]
 8014a54:	60a5      	str	r5, [r4, #8]
 8014a56:	2d00      	cmp	r5, #0
 8014a58:	bfa2      	ittt	ge
 8014a5a:	6821      	ldrge	r1, [r4, #0]
 8014a5c:	f021 0104 	bicge.w	r1, r1, #4
 8014a60:	6021      	strge	r1, [r4, #0]
 8014a62:	b90e      	cbnz	r6, 8014a68 <_printf_i+0x118>
 8014a64:	2d00      	cmp	r5, #0
 8014a66:	d04d      	beq.n	8014b04 <_printf_i+0x1b4>
 8014a68:	4615      	mov	r5, r2
 8014a6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8014a6e:	fb03 6711 	mls	r7, r3, r1, r6
 8014a72:	5dc7      	ldrb	r7, [r0, r7]
 8014a74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014a78:	4637      	mov	r7, r6
 8014a7a:	42bb      	cmp	r3, r7
 8014a7c:	460e      	mov	r6, r1
 8014a7e:	d9f4      	bls.n	8014a6a <_printf_i+0x11a>
 8014a80:	2b08      	cmp	r3, #8
 8014a82:	d10b      	bne.n	8014a9c <_printf_i+0x14c>
 8014a84:	6823      	ldr	r3, [r4, #0]
 8014a86:	07de      	lsls	r6, r3, #31
 8014a88:	d508      	bpl.n	8014a9c <_printf_i+0x14c>
 8014a8a:	6923      	ldr	r3, [r4, #16]
 8014a8c:	6861      	ldr	r1, [r4, #4]
 8014a8e:	4299      	cmp	r1, r3
 8014a90:	bfde      	ittt	le
 8014a92:	2330      	movle	r3, #48	; 0x30
 8014a94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014a98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014a9c:	1b52      	subs	r2, r2, r5
 8014a9e:	6122      	str	r2, [r4, #16]
 8014aa0:	f8cd a000 	str.w	sl, [sp]
 8014aa4:	464b      	mov	r3, r9
 8014aa6:	aa03      	add	r2, sp, #12
 8014aa8:	4621      	mov	r1, r4
 8014aaa:	4640      	mov	r0, r8
 8014aac:	f7ff fee2 	bl	8014874 <_printf_common>
 8014ab0:	3001      	adds	r0, #1
 8014ab2:	d14c      	bne.n	8014b4e <_printf_i+0x1fe>
 8014ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ab8:	b004      	add	sp, #16
 8014aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014abe:	4835      	ldr	r0, [pc, #212]	; (8014b94 <_printf_i+0x244>)
 8014ac0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014ac4:	6829      	ldr	r1, [r5, #0]
 8014ac6:	6823      	ldr	r3, [r4, #0]
 8014ac8:	f851 6b04 	ldr.w	r6, [r1], #4
 8014acc:	6029      	str	r1, [r5, #0]
 8014ace:	061d      	lsls	r5, r3, #24
 8014ad0:	d514      	bpl.n	8014afc <_printf_i+0x1ac>
 8014ad2:	07df      	lsls	r7, r3, #31
 8014ad4:	bf44      	itt	mi
 8014ad6:	f043 0320 	orrmi.w	r3, r3, #32
 8014ada:	6023      	strmi	r3, [r4, #0]
 8014adc:	b91e      	cbnz	r6, 8014ae6 <_printf_i+0x196>
 8014ade:	6823      	ldr	r3, [r4, #0]
 8014ae0:	f023 0320 	bic.w	r3, r3, #32
 8014ae4:	6023      	str	r3, [r4, #0]
 8014ae6:	2310      	movs	r3, #16
 8014ae8:	e7b0      	b.n	8014a4c <_printf_i+0xfc>
 8014aea:	6823      	ldr	r3, [r4, #0]
 8014aec:	f043 0320 	orr.w	r3, r3, #32
 8014af0:	6023      	str	r3, [r4, #0]
 8014af2:	2378      	movs	r3, #120	; 0x78
 8014af4:	4828      	ldr	r0, [pc, #160]	; (8014b98 <_printf_i+0x248>)
 8014af6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014afa:	e7e3      	b.n	8014ac4 <_printf_i+0x174>
 8014afc:	0659      	lsls	r1, r3, #25
 8014afe:	bf48      	it	mi
 8014b00:	b2b6      	uxthmi	r6, r6
 8014b02:	e7e6      	b.n	8014ad2 <_printf_i+0x182>
 8014b04:	4615      	mov	r5, r2
 8014b06:	e7bb      	b.n	8014a80 <_printf_i+0x130>
 8014b08:	682b      	ldr	r3, [r5, #0]
 8014b0a:	6826      	ldr	r6, [r4, #0]
 8014b0c:	6961      	ldr	r1, [r4, #20]
 8014b0e:	1d18      	adds	r0, r3, #4
 8014b10:	6028      	str	r0, [r5, #0]
 8014b12:	0635      	lsls	r5, r6, #24
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	d501      	bpl.n	8014b1c <_printf_i+0x1cc>
 8014b18:	6019      	str	r1, [r3, #0]
 8014b1a:	e002      	b.n	8014b22 <_printf_i+0x1d2>
 8014b1c:	0670      	lsls	r0, r6, #25
 8014b1e:	d5fb      	bpl.n	8014b18 <_printf_i+0x1c8>
 8014b20:	8019      	strh	r1, [r3, #0]
 8014b22:	2300      	movs	r3, #0
 8014b24:	6123      	str	r3, [r4, #16]
 8014b26:	4615      	mov	r5, r2
 8014b28:	e7ba      	b.n	8014aa0 <_printf_i+0x150>
 8014b2a:	682b      	ldr	r3, [r5, #0]
 8014b2c:	1d1a      	adds	r2, r3, #4
 8014b2e:	602a      	str	r2, [r5, #0]
 8014b30:	681d      	ldr	r5, [r3, #0]
 8014b32:	6862      	ldr	r2, [r4, #4]
 8014b34:	2100      	movs	r1, #0
 8014b36:	4628      	mov	r0, r5
 8014b38:	f7f7 fa8a 	bl	800c050 <memchr>
 8014b3c:	b108      	cbz	r0, 8014b42 <_printf_i+0x1f2>
 8014b3e:	1b40      	subs	r0, r0, r5
 8014b40:	6060      	str	r0, [r4, #4]
 8014b42:	6863      	ldr	r3, [r4, #4]
 8014b44:	6123      	str	r3, [r4, #16]
 8014b46:	2300      	movs	r3, #0
 8014b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b4c:	e7a8      	b.n	8014aa0 <_printf_i+0x150>
 8014b4e:	6923      	ldr	r3, [r4, #16]
 8014b50:	462a      	mov	r2, r5
 8014b52:	4649      	mov	r1, r9
 8014b54:	4640      	mov	r0, r8
 8014b56:	47d0      	blx	sl
 8014b58:	3001      	adds	r0, #1
 8014b5a:	d0ab      	beq.n	8014ab4 <_printf_i+0x164>
 8014b5c:	6823      	ldr	r3, [r4, #0]
 8014b5e:	079b      	lsls	r3, r3, #30
 8014b60:	d413      	bmi.n	8014b8a <_printf_i+0x23a>
 8014b62:	68e0      	ldr	r0, [r4, #12]
 8014b64:	9b03      	ldr	r3, [sp, #12]
 8014b66:	4298      	cmp	r0, r3
 8014b68:	bfb8      	it	lt
 8014b6a:	4618      	movlt	r0, r3
 8014b6c:	e7a4      	b.n	8014ab8 <_printf_i+0x168>
 8014b6e:	2301      	movs	r3, #1
 8014b70:	4632      	mov	r2, r6
 8014b72:	4649      	mov	r1, r9
 8014b74:	4640      	mov	r0, r8
 8014b76:	47d0      	blx	sl
 8014b78:	3001      	adds	r0, #1
 8014b7a:	d09b      	beq.n	8014ab4 <_printf_i+0x164>
 8014b7c:	3501      	adds	r5, #1
 8014b7e:	68e3      	ldr	r3, [r4, #12]
 8014b80:	9903      	ldr	r1, [sp, #12]
 8014b82:	1a5b      	subs	r3, r3, r1
 8014b84:	42ab      	cmp	r3, r5
 8014b86:	dcf2      	bgt.n	8014b6e <_printf_i+0x21e>
 8014b88:	e7eb      	b.n	8014b62 <_printf_i+0x212>
 8014b8a:	2500      	movs	r5, #0
 8014b8c:	f104 0619 	add.w	r6, r4, #25
 8014b90:	e7f5      	b.n	8014b7e <_printf_i+0x22e>
 8014b92:	bf00      	nop
 8014b94:	0802197e 	.word	0x0802197e
 8014b98:	0802198f 	.word	0x0802198f

08014b9c <siprintf>:
 8014b9c:	b40e      	push	{r1, r2, r3}
 8014b9e:	b500      	push	{lr}
 8014ba0:	b09c      	sub	sp, #112	; 0x70
 8014ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8014ba4:	9002      	str	r0, [sp, #8]
 8014ba6:	9006      	str	r0, [sp, #24]
 8014ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014bac:	4809      	ldr	r0, [pc, #36]	; (8014bd4 <siprintf+0x38>)
 8014bae:	9107      	str	r1, [sp, #28]
 8014bb0:	9104      	str	r1, [sp, #16]
 8014bb2:	4909      	ldr	r1, [pc, #36]	; (8014bd8 <siprintf+0x3c>)
 8014bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bb8:	9105      	str	r1, [sp, #20]
 8014bba:	6800      	ldr	r0, [r0, #0]
 8014bbc:	9301      	str	r3, [sp, #4]
 8014bbe:	a902      	add	r1, sp, #8
 8014bc0:	f001 fb78 	bl	80162b4 <_svfiprintf_r>
 8014bc4:	9b02      	ldr	r3, [sp, #8]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	701a      	strb	r2, [r3, #0]
 8014bca:	b01c      	add	sp, #112	; 0x70
 8014bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014bd0:	b003      	add	sp, #12
 8014bd2:	4770      	bx	lr
 8014bd4:	2000006c 	.word	0x2000006c
 8014bd8:	ffff0208 	.word	0xffff0208

08014bdc <quorem>:
 8014bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be0:	6903      	ldr	r3, [r0, #16]
 8014be2:	690c      	ldr	r4, [r1, #16]
 8014be4:	42a3      	cmp	r3, r4
 8014be6:	4607      	mov	r7, r0
 8014be8:	f2c0 8081 	blt.w	8014cee <quorem+0x112>
 8014bec:	3c01      	subs	r4, #1
 8014bee:	f101 0814 	add.w	r8, r1, #20
 8014bf2:	f100 0514 	add.w	r5, r0, #20
 8014bf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014bfa:	9301      	str	r3, [sp, #4]
 8014bfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014c00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c04:	3301      	adds	r3, #1
 8014c06:	429a      	cmp	r2, r3
 8014c08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014c0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014c10:	fbb2 f6f3 	udiv	r6, r2, r3
 8014c14:	d331      	bcc.n	8014c7a <quorem+0x9e>
 8014c16:	f04f 0e00 	mov.w	lr, #0
 8014c1a:	4640      	mov	r0, r8
 8014c1c:	46ac      	mov	ip, r5
 8014c1e:	46f2      	mov	sl, lr
 8014c20:	f850 2b04 	ldr.w	r2, [r0], #4
 8014c24:	b293      	uxth	r3, r2
 8014c26:	fb06 e303 	mla	r3, r6, r3, lr
 8014c2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	ebaa 0303 	sub.w	r3, sl, r3
 8014c34:	f8dc a000 	ldr.w	sl, [ip]
 8014c38:	0c12      	lsrs	r2, r2, #16
 8014c3a:	fa13 f38a 	uxtah	r3, r3, sl
 8014c3e:	fb06 e202 	mla	r2, r6, r2, lr
 8014c42:	9300      	str	r3, [sp, #0]
 8014c44:	9b00      	ldr	r3, [sp, #0]
 8014c46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014c4a:	b292      	uxth	r2, r2
 8014c4c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014c50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014c54:	f8bd 3000 	ldrh.w	r3, [sp]
 8014c58:	4581      	cmp	r9, r0
 8014c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c5e:	f84c 3b04 	str.w	r3, [ip], #4
 8014c62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014c66:	d2db      	bcs.n	8014c20 <quorem+0x44>
 8014c68:	f855 300b 	ldr.w	r3, [r5, fp]
 8014c6c:	b92b      	cbnz	r3, 8014c7a <quorem+0x9e>
 8014c6e:	9b01      	ldr	r3, [sp, #4]
 8014c70:	3b04      	subs	r3, #4
 8014c72:	429d      	cmp	r5, r3
 8014c74:	461a      	mov	r2, r3
 8014c76:	d32e      	bcc.n	8014cd6 <quorem+0xfa>
 8014c78:	613c      	str	r4, [r7, #16]
 8014c7a:	4638      	mov	r0, r7
 8014c7c:	f001 f8c6 	bl	8015e0c <__mcmp>
 8014c80:	2800      	cmp	r0, #0
 8014c82:	db24      	blt.n	8014cce <quorem+0xf2>
 8014c84:	3601      	adds	r6, #1
 8014c86:	4628      	mov	r0, r5
 8014c88:	f04f 0c00 	mov.w	ip, #0
 8014c8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014c90:	f8d0 e000 	ldr.w	lr, [r0]
 8014c94:	b293      	uxth	r3, r2
 8014c96:	ebac 0303 	sub.w	r3, ip, r3
 8014c9a:	0c12      	lsrs	r2, r2, #16
 8014c9c:	fa13 f38e 	uxtah	r3, r3, lr
 8014ca0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014ca4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ca8:	b29b      	uxth	r3, r3
 8014caa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cae:	45c1      	cmp	r9, r8
 8014cb0:	f840 3b04 	str.w	r3, [r0], #4
 8014cb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014cb8:	d2e8      	bcs.n	8014c8c <quorem+0xb0>
 8014cba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014cbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014cc2:	b922      	cbnz	r2, 8014cce <quorem+0xf2>
 8014cc4:	3b04      	subs	r3, #4
 8014cc6:	429d      	cmp	r5, r3
 8014cc8:	461a      	mov	r2, r3
 8014cca:	d30a      	bcc.n	8014ce2 <quorem+0x106>
 8014ccc:	613c      	str	r4, [r7, #16]
 8014cce:	4630      	mov	r0, r6
 8014cd0:	b003      	add	sp, #12
 8014cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cd6:	6812      	ldr	r2, [r2, #0]
 8014cd8:	3b04      	subs	r3, #4
 8014cda:	2a00      	cmp	r2, #0
 8014cdc:	d1cc      	bne.n	8014c78 <quorem+0x9c>
 8014cde:	3c01      	subs	r4, #1
 8014ce0:	e7c7      	b.n	8014c72 <quorem+0x96>
 8014ce2:	6812      	ldr	r2, [r2, #0]
 8014ce4:	3b04      	subs	r3, #4
 8014ce6:	2a00      	cmp	r2, #0
 8014ce8:	d1f0      	bne.n	8014ccc <quorem+0xf0>
 8014cea:	3c01      	subs	r4, #1
 8014cec:	e7eb      	b.n	8014cc6 <quorem+0xea>
 8014cee:	2000      	movs	r0, #0
 8014cf0:	e7ee      	b.n	8014cd0 <quorem+0xf4>
 8014cf2:	0000      	movs	r0, r0
 8014cf4:	0000      	movs	r0, r0
	...

08014cf8 <_dtoa_r>:
 8014cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cfc:	ed2d 8b04 	vpush	{d8-d9}
 8014d00:	ec57 6b10 	vmov	r6, r7, d0
 8014d04:	b093      	sub	sp, #76	; 0x4c
 8014d06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014d08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014d0c:	9106      	str	r1, [sp, #24]
 8014d0e:	ee10 aa10 	vmov	sl, s0
 8014d12:	4604      	mov	r4, r0
 8014d14:	9209      	str	r2, [sp, #36]	; 0x24
 8014d16:	930c      	str	r3, [sp, #48]	; 0x30
 8014d18:	46bb      	mov	fp, r7
 8014d1a:	b975      	cbnz	r5, 8014d3a <_dtoa_r+0x42>
 8014d1c:	2010      	movs	r0, #16
 8014d1e:	f000 fddd 	bl	80158dc <malloc>
 8014d22:	4602      	mov	r2, r0
 8014d24:	6260      	str	r0, [r4, #36]	; 0x24
 8014d26:	b920      	cbnz	r0, 8014d32 <_dtoa_r+0x3a>
 8014d28:	4ba7      	ldr	r3, [pc, #668]	; (8014fc8 <_dtoa_r+0x2d0>)
 8014d2a:	21ea      	movs	r1, #234	; 0xea
 8014d2c:	48a7      	ldr	r0, [pc, #668]	; (8014fcc <_dtoa_r+0x2d4>)
 8014d2e:	f001 fbd1 	bl	80164d4 <__assert_func>
 8014d32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014d36:	6005      	str	r5, [r0, #0]
 8014d38:	60c5      	str	r5, [r0, #12]
 8014d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d3c:	6819      	ldr	r1, [r3, #0]
 8014d3e:	b151      	cbz	r1, 8014d56 <_dtoa_r+0x5e>
 8014d40:	685a      	ldr	r2, [r3, #4]
 8014d42:	604a      	str	r2, [r1, #4]
 8014d44:	2301      	movs	r3, #1
 8014d46:	4093      	lsls	r3, r2
 8014d48:	608b      	str	r3, [r1, #8]
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	f000 fe1c 	bl	8015988 <_Bfree>
 8014d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d52:	2200      	movs	r2, #0
 8014d54:	601a      	str	r2, [r3, #0]
 8014d56:	1e3b      	subs	r3, r7, #0
 8014d58:	bfaa      	itet	ge
 8014d5a:	2300      	movge	r3, #0
 8014d5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014d60:	f8c8 3000 	strge.w	r3, [r8]
 8014d64:	4b9a      	ldr	r3, [pc, #616]	; (8014fd0 <_dtoa_r+0x2d8>)
 8014d66:	bfbc      	itt	lt
 8014d68:	2201      	movlt	r2, #1
 8014d6a:	f8c8 2000 	strlt.w	r2, [r8]
 8014d6e:	ea33 030b 	bics.w	r3, r3, fp
 8014d72:	d11b      	bne.n	8014dac <_dtoa_r+0xb4>
 8014d74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d76:	f242 730f 	movw	r3, #9999	; 0x270f
 8014d7a:	6013      	str	r3, [r2, #0]
 8014d7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014d80:	4333      	orrs	r3, r6
 8014d82:	f000 8592 	beq.w	80158aa <_dtoa_r+0xbb2>
 8014d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d88:	b963      	cbnz	r3, 8014da4 <_dtoa_r+0xac>
 8014d8a:	4b92      	ldr	r3, [pc, #584]	; (8014fd4 <_dtoa_r+0x2dc>)
 8014d8c:	e022      	b.n	8014dd4 <_dtoa_r+0xdc>
 8014d8e:	4b92      	ldr	r3, [pc, #584]	; (8014fd8 <_dtoa_r+0x2e0>)
 8014d90:	9301      	str	r3, [sp, #4]
 8014d92:	3308      	adds	r3, #8
 8014d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014d96:	6013      	str	r3, [r2, #0]
 8014d98:	9801      	ldr	r0, [sp, #4]
 8014d9a:	b013      	add	sp, #76	; 0x4c
 8014d9c:	ecbd 8b04 	vpop	{d8-d9}
 8014da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da4:	4b8b      	ldr	r3, [pc, #556]	; (8014fd4 <_dtoa_r+0x2dc>)
 8014da6:	9301      	str	r3, [sp, #4]
 8014da8:	3303      	adds	r3, #3
 8014daa:	e7f3      	b.n	8014d94 <_dtoa_r+0x9c>
 8014dac:	2200      	movs	r2, #0
 8014dae:	2300      	movs	r3, #0
 8014db0:	4650      	mov	r0, sl
 8014db2:	4659      	mov	r1, fp
 8014db4:	f7f7 fdc0 	bl	800c938 <__aeabi_dcmpeq>
 8014db8:	ec4b ab19 	vmov	d9, sl, fp
 8014dbc:	4680      	mov	r8, r0
 8014dbe:	b158      	cbz	r0, 8014dd8 <_dtoa_r+0xe0>
 8014dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	6013      	str	r3, [r2, #0]
 8014dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	f000 856b 	beq.w	80158a4 <_dtoa_r+0xbac>
 8014dce:	4883      	ldr	r0, [pc, #524]	; (8014fdc <_dtoa_r+0x2e4>)
 8014dd0:	6018      	str	r0, [r3, #0]
 8014dd2:	1e43      	subs	r3, r0, #1
 8014dd4:	9301      	str	r3, [sp, #4]
 8014dd6:	e7df      	b.n	8014d98 <_dtoa_r+0xa0>
 8014dd8:	ec4b ab10 	vmov	d0, sl, fp
 8014ddc:	aa10      	add	r2, sp, #64	; 0x40
 8014dde:	a911      	add	r1, sp, #68	; 0x44
 8014de0:	4620      	mov	r0, r4
 8014de2:	f001 f8b9 	bl	8015f58 <__d2b>
 8014de6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014dea:	ee08 0a10 	vmov	s16, r0
 8014dee:	2d00      	cmp	r5, #0
 8014df0:	f000 8084 	beq.w	8014efc <_dtoa_r+0x204>
 8014df4:	ee19 3a90 	vmov	r3, s19
 8014df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014dfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014e00:	4656      	mov	r6, sl
 8014e02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014e06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014e0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014e0e:	4b74      	ldr	r3, [pc, #464]	; (8014fe0 <_dtoa_r+0x2e8>)
 8014e10:	2200      	movs	r2, #0
 8014e12:	4630      	mov	r0, r6
 8014e14:	4639      	mov	r1, r7
 8014e16:	f7f7 f96f 	bl	800c0f8 <__aeabi_dsub>
 8014e1a:	a365      	add	r3, pc, #404	; (adr r3, 8014fb0 <_dtoa_r+0x2b8>)
 8014e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e20:	f7f7 fb22 	bl	800c468 <__aeabi_dmul>
 8014e24:	a364      	add	r3, pc, #400	; (adr r3, 8014fb8 <_dtoa_r+0x2c0>)
 8014e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2a:	f7f7 f967 	bl	800c0fc <__adddf3>
 8014e2e:	4606      	mov	r6, r0
 8014e30:	4628      	mov	r0, r5
 8014e32:	460f      	mov	r7, r1
 8014e34:	f7f7 faae 	bl	800c394 <__aeabi_i2d>
 8014e38:	a361      	add	r3, pc, #388	; (adr r3, 8014fc0 <_dtoa_r+0x2c8>)
 8014e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e3e:	f7f7 fb13 	bl	800c468 <__aeabi_dmul>
 8014e42:	4602      	mov	r2, r0
 8014e44:	460b      	mov	r3, r1
 8014e46:	4630      	mov	r0, r6
 8014e48:	4639      	mov	r1, r7
 8014e4a:	f7f7 f957 	bl	800c0fc <__adddf3>
 8014e4e:	4606      	mov	r6, r0
 8014e50:	460f      	mov	r7, r1
 8014e52:	f7f7 fdb9 	bl	800c9c8 <__aeabi_d2iz>
 8014e56:	2200      	movs	r2, #0
 8014e58:	9000      	str	r0, [sp, #0]
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	4630      	mov	r0, r6
 8014e5e:	4639      	mov	r1, r7
 8014e60:	f7f7 fd74 	bl	800c94c <__aeabi_dcmplt>
 8014e64:	b150      	cbz	r0, 8014e7c <_dtoa_r+0x184>
 8014e66:	9800      	ldr	r0, [sp, #0]
 8014e68:	f7f7 fa94 	bl	800c394 <__aeabi_i2d>
 8014e6c:	4632      	mov	r2, r6
 8014e6e:	463b      	mov	r3, r7
 8014e70:	f7f7 fd62 	bl	800c938 <__aeabi_dcmpeq>
 8014e74:	b910      	cbnz	r0, 8014e7c <_dtoa_r+0x184>
 8014e76:	9b00      	ldr	r3, [sp, #0]
 8014e78:	3b01      	subs	r3, #1
 8014e7a:	9300      	str	r3, [sp, #0]
 8014e7c:	9b00      	ldr	r3, [sp, #0]
 8014e7e:	2b16      	cmp	r3, #22
 8014e80:	d85a      	bhi.n	8014f38 <_dtoa_r+0x240>
 8014e82:	9a00      	ldr	r2, [sp, #0]
 8014e84:	4b57      	ldr	r3, [pc, #348]	; (8014fe4 <_dtoa_r+0x2ec>)
 8014e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e8e:	ec51 0b19 	vmov	r0, r1, d9
 8014e92:	f7f7 fd5b 	bl	800c94c <__aeabi_dcmplt>
 8014e96:	2800      	cmp	r0, #0
 8014e98:	d050      	beq.n	8014f3c <_dtoa_r+0x244>
 8014e9a:	9b00      	ldr	r3, [sp, #0]
 8014e9c:	3b01      	subs	r3, #1
 8014e9e:	9300      	str	r3, [sp, #0]
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ea6:	1b5d      	subs	r5, r3, r5
 8014ea8:	1e6b      	subs	r3, r5, #1
 8014eaa:	9305      	str	r3, [sp, #20]
 8014eac:	bf45      	ittet	mi
 8014eae:	f1c5 0301 	rsbmi	r3, r5, #1
 8014eb2:	9304      	strmi	r3, [sp, #16]
 8014eb4:	2300      	movpl	r3, #0
 8014eb6:	2300      	movmi	r3, #0
 8014eb8:	bf4c      	ite	mi
 8014eba:	9305      	strmi	r3, [sp, #20]
 8014ebc:	9304      	strpl	r3, [sp, #16]
 8014ebe:	9b00      	ldr	r3, [sp, #0]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	db3d      	blt.n	8014f40 <_dtoa_r+0x248>
 8014ec4:	9b05      	ldr	r3, [sp, #20]
 8014ec6:	9a00      	ldr	r2, [sp, #0]
 8014ec8:	920a      	str	r2, [sp, #40]	; 0x28
 8014eca:	4413      	add	r3, r2
 8014ecc:	9305      	str	r3, [sp, #20]
 8014ece:	2300      	movs	r3, #0
 8014ed0:	9307      	str	r3, [sp, #28]
 8014ed2:	9b06      	ldr	r3, [sp, #24]
 8014ed4:	2b09      	cmp	r3, #9
 8014ed6:	f200 8089 	bhi.w	8014fec <_dtoa_r+0x2f4>
 8014eda:	2b05      	cmp	r3, #5
 8014edc:	bfc4      	itt	gt
 8014ede:	3b04      	subgt	r3, #4
 8014ee0:	9306      	strgt	r3, [sp, #24]
 8014ee2:	9b06      	ldr	r3, [sp, #24]
 8014ee4:	f1a3 0302 	sub.w	r3, r3, #2
 8014ee8:	bfcc      	ite	gt
 8014eea:	2500      	movgt	r5, #0
 8014eec:	2501      	movle	r5, #1
 8014eee:	2b03      	cmp	r3, #3
 8014ef0:	f200 8087 	bhi.w	8015002 <_dtoa_r+0x30a>
 8014ef4:	e8df f003 	tbb	[pc, r3]
 8014ef8:	59383a2d 	.word	0x59383a2d
 8014efc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014f00:	441d      	add	r5, r3
 8014f02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014f06:	2b20      	cmp	r3, #32
 8014f08:	bfc1      	itttt	gt
 8014f0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014f0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014f12:	fa0b f303 	lslgt.w	r3, fp, r3
 8014f16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014f1a:	bfda      	itte	le
 8014f1c:	f1c3 0320 	rsble	r3, r3, #32
 8014f20:	fa06 f003 	lslle.w	r0, r6, r3
 8014f24:	4318      	orrgt	r0, r3
 8014f26:	f7f7 fa25 	bl	800c374 <__aeabi_ui2d>
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	4606      	mov	r6, r0
 8014f2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014f32:	3d01      	subs	r5, #1
 8014f34:	930e      	str	r3, [sp, #56]	; 0x38
 8014f36:	e76a      	b.n	8014e0e <_dtoa_r+0x116>
 8014f38:	2301      	movs	r3, #1
 8014f3a:	e7b2      	b.n	8014ea2 <_dtoa_r+0x1aa>
 8014f3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8014f3e:	e7b1      	b.n	8014ea4 <_dtoa_r+0x1ac>
 8014f40:	9b04      	ldr	r3, [sp, #16]
 8014f42:	9a00      	ldr	r2, [sp, #0]
 8014f44:	1a9b      	subs	r3, r3, r2
 8014f46:	9304      	str	r3, [sp, #16]
 8014f48:	4253      	negs	r3, r2
 8014f4a:	9307      	str	r3, [sp, #28]
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8014f50:	e7bf      	b.n	8014ed2 <_dtoa_r+0x1da>
 8014f52:	2300      	movs	r3, #0
 8014f54:	9308      	str	r3, [sp, #32]
 8014f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	dc55      	bgt.n	8015008 <_dtoa_r+0x310>
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014f62:	461a      	mov	r2, r3
 8014f64:	9209      	str	r2, [sp, #36]	; 0x24
 8014f66:	e00c      	b.n	8014f82 <_dtoa_r+0x28a>
 8014f68:	2301      	movs	r3, #1
 8014f6a:	e7f3      	b.n	8014f54 <_dtoa_r+0x25c>
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f70:	9308      	str	r3, [sp, #32]
 8014f72:	9b00      	ldr	r3, [sp, #0]
 8014f74:	4413      	add	r3, r2
 8014f76:	9302      	str	r3, [sp, #8]
 8014f78:	3301      	adds	r3, #1
 8014f7a:	2b01      	cmp	r3, #1
 8014f7c:	9303      	str	r3, [sp, #12]
 8014f7e:	bfb8      	it	lt
 8014f80:	2301      	movlt	r3, #1
 8014f82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014f84:	2200      	movs	r2, #0
 8014f86:	6042      	str	r2, [r0, #4]
 8014f88:	2204      	movs	r2, #4
 8014f8a:	f102 0614 	add.w	r6, r2, #20
 8014f8e:	429e      	cmp	r6, r3
 8014f90:	6841      	ldr	r1, [r0, #4]
 8014f92:	d93d      	bls.n	8015010 <_dtoa_r+0x318>
 8014f94:	4620      	mov	r0, r4
 8014f96:	f000 fcb7 	bl	8015908 <_Balloc>
 8014f9a:	9001      	str	r0, [sp, #4]
 8014f9c:	2800      	cmp	r0, #0
 8014f9e:	d13b      	bne.n	8015018 <_dtoa_r+0x320>
 8014fa0:	4b11      	ldr	r3, [pc, #68]	; (8014fe8 <_dtoa_r+0x2f0>)
 8014fa2:	4602      	mov	r2, r0
 8014fa4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014fa8:	e6c0      	b.n	8014d2c <_dtoa_r+0x34>
 8014faa:	2301      	movs	r3, #1
 8014fac:	e7df      	b.n	8014f6e <_dtoa_r+0x276>
 8014fae:	bf00      	nop
 8014fb0:	636f4361 	.word	0x636f4361
 8014fb4:	3fd287a7 	.word	0x3fd287a7
 8014fb8:	8b60c8b3 	.word	0x8b60c8b3
 8014fbc:	3fc68a28 	.word	0x3fc68a28
 8014fc0:	509f79fb 	.word	0x509f79fb
 8014fc4:	3fd34413 	.word	0x3fd34413
 8014fc8:	080219ad 	.word	0x080219ad
 8014fcc:	080219c4 	.word	0x080219c4
 8014fd0:	7ff00000 	.word	0x7ff00000
 8014fd4:	080219a9 	.word	0x080219a9
 8014fd8:	080219a0 	.word	0x080219a0
 8014fdc:	0802197d 	.word	0x0802197d
 8014fe0:	3ff80000 	.word	0x3ff80000
 8014fe4:	08021ab8 	.word	0x08021ab8
 8014fe8:	08021a1f 	.word	0x08021a1f
 8014fec:	2501      	movs	r5, #1
 8014fee:	2300      	movs	r3, #0
 8014ff0:	9306      	str	r3, [sp, #24]
 8014ff2:	9508      	str	r5, [sp, #32]
 8014ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ff8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	2312      	movs	r3, #18
 8015000:	e7b0      	b.n	8014f64 <_dtoa_r+0x26c>
 8015002:	2301      	movs	r3, #1
 8015004:	9308      	str	r3, [sp, #32]
 8015006:	e7f5      	b.n	8014ff4 <_dtoa_r+0x2fc>
 8015008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801500a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801500e:	e7b8      	b.n	8014f82 <_dtoa_r+0x28a>
 8015010:	3101      	adds	r1, #1
 8015012:	6041      	str	r1, [r0, #4]
 8015014:	0052      	lsls	r2, r2, #1
 8015016:	e7b8      	b.n	8014f8a <_dtoa_r+0x292>
 8015018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801501a:	9a01      	ldr	r2, [sp, #4]
 801501c:	601a      	str	r2, [r3, #0]
 801501e:	9b03      	ldr	r3, [sp, #12]
 8015020:	2b0e      	cmp	r3, #14
 8015022:	f200 809d 	bhi.w	8015160 <_dtoa_r+0x468>
 8015026:	2d00      	cmp	r5, #0
 8015028:	f000 809a 	beq.w	8015160 <_dtoa_r+0x468>
 801502c:	9b00      	ldr	r3, [sp, #0]
 801502e:	2b00      	cmp	r3, #0
 8015030:	dd32      	ble.n	8015098 <_dtoa_r+0x3a0>
 8015032:	4ab7      	ldr	r2, [pc, #732]	; (8015310 <_dtoa_r+0x618>)
 8015034:	f003 030f 	and.w	r3, r3, #15
 8015038:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801503c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015040:	9b00      	ldr	r3, [sp, #0]
 8015042:	05d8      	lsls	r0, r3, #23
 8015044:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015048:	d516      	bpl.n	8015078 <_dtoa_r+0x380>
 801504a:	4bb2      	ldr	r3, [pc, #712]	; (8015314 <_dtoa_r+0x61c>)
 801504c:	ec51 0b19 	vmov	r0, r1, d9
 8015050:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015054:	f7f7 fb32 	bl	800c6bc <__aeabi_ddiv>
 8015058:	f007 070f 	and.w	r7, r7, #15
 801505c:	4682      	mov	sl, r0
 801505e:	468b      	mov	fp, r1
 8015060:	2503      	movs	r5, #3
 8015062:	4eac      	ldr	r6, [pc, #688]	; (8015314 <_dtoa_r+0x61c>)
 8015064:	b957      	cbnz	r7, 801507c <_dtoa_r+0x384>
 8015066:	4642      	mov	r2, r8
 8015068:	464b      	mov	r3, r9
 801506a:	4650      	mov	r0, sl
 801506c:	4659      	mov	r1, fp
 801506e:	f7f7 fb25 	bl	800c6bc <__aeabi_ddiv>
 8015072:	4682      	mov	sl, r0
 8015074:	468b      	mov	fp, r1
 8015076:	e028      	b.n	80150ca <_dtoa_r+0x3d2>
 8015078:	2502      	movs	r5, #2
 801507a:	e7f2      	b.n	8015062 <_dtoa_r+0x36a>
 801507c:	07f9      	lsls	r1, r7, #31
 801507e:	d508      	bpl.n	8015092 <_dtoa_r+0x39a>
 8015080:	4640      	mov	r0, r8
 8015082:	4649      	mov	r1, r9
 8015084:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015088:	f7f7 f9ee 	bl	800c468 <__aeabi_dmul>
 801508c:	3501      	adds	r5, #1
 801508e:	4680      	mov	r8, r0
 8015090:	4689      	mov	r9, r1
 8015092:	107f      	asrs	r7, r7, #1
 8015094:	3608      	adds	r6, #8
 8015096:	e7e5      	b.n	8015064 <_dtoa_r+0x36c>
 8015098:	f000 809b 	beq.w	80151d2 <_dtoa_r+0x4da>
 801509c:	9b00      	ldr	r3, [sp, #0]
 801509e:	4f9d      	ldr	r7, [pc, #628]	; (8015314 <_dtoa_r+0x61c>)
 80150a0:	425e      	negs	r6, r3
 80150a2:	4b9b      	ldr	r3, [pc, #620]	; (8015310 <_dtoa_r+0x618>)
 80150a4:	f006 020f 	and.w	r2, r6, #15
 80150a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80150ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b0:	ec51 0b19 	vmov	r0, r1, d9
 80150b4:	f7f7 f9d8 	bl	800c468 <__aeabi_dmul>
 80150b8:	1136      	asrs	r6, r6, #4
 80150ba:	4682      	mov	sl, r0
 80150bc:	468b      	mov	fp, r1
 80150be:	2300      	movs	r3, #0
 80150c0:	2502      	movs	r5, #2
 80150c2:	2e00      	cmp	r6, #0
 80150c4:	d17a      	bne.n	80151bc <_dtoa_r+0x4c4>
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d1d3      	bne.n	8015072 <_dtoa_r+0x37a>
 80150ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	f000 8082 	beq.w	80151d6 <_dtoa_r+0x4de>
 80150d2:	4b91      	ldr	r3, [pc, #580]	; (8015318 <_dtoa_r+0x620>)
 80150d4:	2200      	movs	r2, #0
 80150d6:	4650      	mov	r0, sl
 80150d8:	4659      	mov	r1, fp
 80150da:	f7f7 fc37 	bl	800c94c <__aeabi_dcmplt>
 80150de:	2800      	cmp	r0, #0
 80150e0:	d079      	beq.n	80151d6 <_dtoa_r+0x4de>
 80150e2:	9b03      	ldr	r3, [sp, #12]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d076      	beq.n	80151d6 <_dtoa_r+0x4de>
 80150e8:	9b02      	ldr	r3, [sp, #8]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	dd36      	ble.n	801515c <_dtoa_r+0x464>
 80150ee:	9b00      	ldr	r3, [sp, #0]
 80150f0:	4650      	mov	r0, sl
 80150f2:	4659      	mov	r1, fp
 80150f4:	1e5f      	subs	r7, r3, #1
 80150f6:	2200      	movs	r2, #0
 80150f8:	4b88      	ldr	r3, [pc, #544]	; (801531c <_dtoa_r+0x624>)
 80150fa:	f7f7 f9b5 	bl	800c468 <__aeabi_dmul>
 80150fe:	9e02      	ldr	r6, [sp, #8]
 8015100:	4682      	mov	sl, r0
 8015102:	468b      	mov	fp, r1
 8015104:	3501      	adds	r5, #1
 8015106:	4628      	mov	r0, r5
 8015108:	f7f7 f944 	bl	800c394 <__aeabi_i2d>
 801510c:	4652      	mov	r2, sl
 801510e:	465b      	mov	r3, fp
 8015110:	f7f7 f9aa 	bl	800c468 <__aeabi_dmul>
 8015114:	4b82      	ldr	r3, [pc, #520]	; (8015320 <_dtoa_r+0x628>)
 8015116:	2200      	movs	r2, #0
 8015118:	f7f6 fff0 	bl	800c0fc <__adddf3>
 801511c:	46d0      	mov	r8, sl
 801511e:	46d9      	mov	r9, fp
 8015120:	4682      	mov	sl, r0
 8015122:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015126:	2e00      	cmp	r6, #0
 8015128:	d158      	bne.n	80151dc <_dtoa_r+0x4e4>
 801512a:	4b7e      	ldr	r3, [pc, #504]	; (8015324 <_dtoa_r+0x62c>)
 801512c:	2200      	movs	r2, #0
 801512e:	4640      	mov	r0, r8
 8015130:	4649      	mov	r1, r9
 8015132:	f7f6 ffe1 	bl	800c0f8 <__aeabi_dsub>
 8015136:	4652      	mov	r2, sl
 8015138:	465b      	mov	r3, fp
 801513a:	4680      	mov	r8, r0
 801513c:	4689      	mov	r9, r1
 801513e:	f7f7 fc23 	bl	800c988 <__aeabi_dcmpgt>
 8015142:	2800      	cmp	r0, #0
 8015144:	f040 8295 	bne.w	8015672 <_dtoa_r+0x97a>
 8015148:	4652      	mov	r2, sl
 801514a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801514e:	4640      	mov	r0, r8
 8015150:	4649      	mov	r1, r9
 8015152:	f7f7 fbfb 	bl	800c94c <__aeabi_dcmplt>
 8015156:	2800      	cmp	r0, #0
 8015158:	f040 8289 	bne.w	801566e <_dtoa_r+0x976>
 801515c:	ec5b ab19 	vmov	sl, fp, d9
 8015160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015162:	2b00      	cmp	r3, #0
 8015164:	f2c0 8148 	blt.w	80153f8 <_dtoa_r+0x700>
 8015168:	9a00      	ldr	r2, [sp, #0]
 801516a:	2a0e      	cmp	r2, #14
 801516c:	f300 8144 	bgt.w	80153f8 <_dtoa_r+0x700>
 8015170:	4b67      	ldr	r3, [pc, #412]	; (8015310 <_dtoa_r+0x618>)
 8015172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015176:	e9d3 8900 	ldrd	r8, r9, [r3]
 801517a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801517c:	2b00      	cmp	r3, #0
 801517e:	f280 80d5 	bge.w	801532c <_dtoa_r+0x634>
 8015182:	9b03      	ldr	r3, [sp, #12]
 8015184:	2b00      	cmp	r3, #0
 8015186:	f300 80d1 	bgt.w	801532c <_dtoa_r+0x634>
 801518a:	f040 826f 	bne.w	801566c <_dtoa_r+0x974>
 801518e:	4b65      	ldr	r3, [pc, #404]	; (8015324 <_dtoa_r+0x62c>)
 8015190:	2200      	movs	r2, #0
 8015192:	4640      	mov	r0, r8
 8015194:	4649      	mov	r1, r9
 8015196:	f7f7 f967 	bl	800c468 <__aeabi_dmul>
 801519a:	4652      	mov	r2, sl
 801519c:	465b      	mov	r3, fp
 801519e:	f7f7 fbe9 	bl	800c974 <__aeabi_dcmpge>
 80151a2:	9e03      	ldr	r6, [sp, #12]
 80151a4:	4637      	mov	r7, r6
 80151a6:	2800      	cmp	r0, #0
 80151a8:	f040 8245 	bne.w	8015636 <_dtoa_r+0x93e>
 80151ac:	9d01      	ldr	r5, [sp, #4]
 80151ae:	2331      	movs	r3, #49	; 0x31
 80151b0:	f805 3b01 	strb.w	r3, [r5], #1
 80151b4:	9b00      	ldr	r3, [sp, #0]
 80151b6:	3301      	adds	r3, #1
 80151b8:	9300      	str	r3, [sp, #0]
 80151ba:	e240      	b.n	801563e <_dtoa_r+0x946>
 80151bc:	07f2      	lsls	r2, r6, #31
 80151be:	d505      	bpl.n	80151cc <_dtoa_r+0x4d4>
 80151c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80151c4:	f7f7 f950 	bl	800c468 <__aeabi_dmul>
 80151c8:	3501      	adds	r5, #1
 80151ca:	2301      	movs	r3, #1
 80151cc:	1076      	asrs	r6, r6, #1
 80151ce:	3708      	adds	r7, #8
 80151d0:	e777      	b.n	80150c2 <_dtoa_r+0x3ca>
 80151d2:	2502      	movs	r5, #2
 80151d4:	e779      	b.n	80150ca <_dtoa_r+0x3d2>
 80151d6:	9f00      	ldr	r7, [sp, #0]
 80151d8:	9e03      	ldr	r6, [sp, #12]
 80151da:	e794      	b.n	8015106 <_dtoa_r+0x40e>
 80151dc:	9901      	ldr	r1, [sp, #4]
 80151de:	4b4c      	ldr	r3, [pc, #304]	; (8015310 <_dtoa_r+0x618>)
 80151e0:	4431      	add	r1, r6
 80151e2:	910d      	str	r1, [sp, #52]	; 0x34
 80151e4:	9908      	ldr	r1, [sp, #32]
 80151e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80151ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80151ee:	2900      	cmp	r1, #0
 80151f0:	d043      	beq.n	801527a <_dtoa_r+0x582>
 80151f2:	494d      	ldr	r1, [pc, #308]	; (8015328 <_dtoa_r+0x630>)
 80151f4:	2000      	movs	r0, #0
 80151f6:	f7f7 fa61 	bl	800c6bc <__aeabi_ddiv>
 80151fa:	4652      	mov	r2, sl
 80151fc:	465b      	mov	r3, fp
 80151fe:	f7f6 ff7b 	bl	800c0f8 <__aeabi_dsub>
 8015202:	9d01      	ldr	r5, [sp, #4]
 8015204:	4682      	mov	sl, r0
 8015206:	468b      	mov	fp, r1
 8015208:	4649      	mov	r1, r9
 801520a:	4640      	mov	r0, r8
 801520c:	f7f7 fbdc 	bl	800c9c8 <__aeabi_d2iz>
 8015210:	4606      	mov	r6, r0
 8015212:	f7f7 f8bf 	bl	800c394 <__aeabi_i2d>
 8015216:	4602      	mov	r2, r0
 8015218:	460b      	mov	r3, r1
 801521a:	4640      	mov	r0, r8
 801521c:	4649      	mov	r1, r9
 801521e:	f7f6 ff6b 	bl	800c0f8 <__aeabi_dsub>
 8015222:	3630      	adds	r6, #48	; 0x30
 8015224:	f805 6b01 	strb.w	r6, [r5], #1
 8015228:	4652      	mov	r2, sl
 801522a:	465b      	mov	r3, fp
 801522c:	4680      	mov	r8, r0
 801522e:	4689      	mov	r9, r1
 8015230:	f7f7 fb8c 	bl	800c94c <__aeabi_dcmplt>
 8015234:	2800      	cmp	r0, #0
 8015236:	d163      	bne.n	8015300 <_dtoa_r+0x608>
 8015238:	4642      	mov	r2, r8
 801523a:	464b      	mov	r3, r9
 801523c:	4936      	ldr	r1, [pc, #216]	; (8015318 <_dtoa_r+0x620>)
 801523e:	2000      	movs	r0, #0
 8015240:	f7f6 ff5a 	bl	800c0f8 <__aeabi_dsub>
 8015244:	4652      	mov	r2, sl
 8015246:	465b      	mov	r3, fp
 8015248:	f7f7 fb80 	bl	800c94c <__aeabi_dcmplt>
 801524c:	2800      	cmp	r0, #0
 801524e:	f040 80b5 	bne.w	80153bc <_dtoa_r+0x6c4>
 8015252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015254:	429d      	cmp	r5, r3
 8015256:	d081      	beq.n	801515c <_dtoa_r+0x464>
 8015258:	4b30      	ldr	r3, [pc, #192]	; (801531c <_dtoa_r+0x624>)
 801525a:	2200      	movs	r2, #0
 801525c:	4650      	mov	r0, sl
 801525e:	4659      	mov	r1, fp
 8015260:	f7f7 f902 	bl	800c468 <__aeabi_dmul>
 8015264:	4b2d      	ldr	r3, [pc, #180]	; (801531c <_dtoa_r+0x624>)
 8015266:	4682      	mov	sl, r0
 8015268:	468b      	mov	fp, r1
 801526a:	4640      	mov	r0, r8
 801526c:	4649      	mov	r1, r9
 801526e:	2200      	movs	r2, #0
 8015270:	f7f7 f8fa 	bl	800c468 <__aeabi_dmul>
 8015274:	4680      	mov	r8, r0
 8015276:	4689      	mov	r9, r1
 8015278:	e7c6      	b.n	8015208 <_dtoa_r+0x510>
 801527a:	4650      	mov	r0, sl
 801527c:	4659      	mov	r1, fp
 801527e:	f7f7 f8f3 	bl	800c468 <__aeabi_dmul>
 8015282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015284:	9d01      	ldr	r5, [sp, #4]
 8015286:	930f      	str	r3, [sp, #60]	; 0x3c
 8015288:	4682      	mov	sl, r0
 801528a:	468b      	mov	fp, r1
 801528c:	4649      	mov	r1, r9
 801528e:	4640      	mov	r0, r8
 8015290:	f7f7 fb9a 	bl	800c9c8 <__aeabi_d2iz>
 8015294:	4606      	mov	r6, r0
 8015296:	f7f7 f87d 	bl	800c394 <__aeabi_i2d>
 801529a:	3630      	adds	r6, #48	; 0x30
 801529c:	4602      	mov	r2, r0
 801529e:	460b      	mov	r3, r1
 80152a0:	4640      	mov	r0, r8
 80152a2:	4649      	mov	r1, r9
 80152a4:	f7f6 ff28 	bl	800c0f8 <__aeabi_dsub>
 80152a8:	f805 6b01 	strb.w	r6, [r5], #1
 80152ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152ae:	429d      	cmp	r5, r3
 80152b0:	4680      	mov	r8, r0
 80152b2:	4689      	mov	r9, r1
 80152b4:	f04f 0200 	mov.w	r2, #0
 80152b8:	d124      	bne.n	8015304 <_dtoa_r+0x60c>
 80152ba:	4b1b      	ldr	r3, [pc, #108]	; (8015328 <_dtoa_r+0x630>)
 80152bc:	4650      	mov	r0, sl
 80152be:	4659      	mov	r1, fp
 80152c0:	f7f6 ff1c 	bl	800c0fc <__adddf3>
 80152c4:	4602      	mov	r2, r0
 80152c6:	460b      	mov	r3, r1
 80152c8:	4640      	mov	r0, r8
 80152ca:	4649      	mov	r1, r9
 80152cc:	f7f7 fb5c 	bl	800c988 <__aeabi_dcmpgt>
 80152d0:	2800      	cmp	r0, #0
 80152d2:	d173      	bne.n	80153bc <_dtoa_r+0x6c4>
 80152d4:	4652      	mov	r2, sl
 80152d6:	465b      	mov	r3, fp
 80152d8:	4913      	ldr	r1, [pc, #76]	; (8015328 <_dtoa_r+0x630>)
 80152da:	2000      	movs	r0, #0
 80152dc:	f7f6 ff0c 	bl	800c0f8 <__aeabi_dsub>
 80152e0:	4602      	mov	r2, r0
 80152e2:	460b      	mov	r3, r1
 80152e4:	4640      	mov	r0, r8
 80152e6:	4649      	mov	r1, r9
 80152e8:	f7f7 fb30 	bl	800c94c <__aeabi_dcmplt>
 80152ec:	2800      	cmp	r0, #0
 80152ee:	f43f af35 	beq.w	801515c <_dtoa_r+0x464>
 80152f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80152f4:	1e6b      	subs	r3, r5, #1
 80152f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80152f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80152fc:	2b30      	cmp	r3, #48	; 0x30
 80152fe:	d0f8      	beq.n	80152f2 <_dtoa_r+0x5fa>
 8015300:	9700      	str	r7, [sp, #0]
 8015302:	e049      	b.n	8015398 <_dtoa_r+0x6a0>
 8015304:	4b05      	ldr	r3, [pc, #20]	; (801531c <_dtoa_r+0x624>)
 8015306:	f7f7 f8af 	bl	800c468 <__aeabi_dmul>
 801530a:	4680      	mov	r8, r0
 801530c:	4689      	mov	r9, r1
 801530e:	e7bd      	b.n	801528c <_dtoa_r+0x594>
 8015310:	08021ab8 	.word	0x08021ab8
 8015314:	08021a90 	.word	0x08021a90
 8015318:	3ff00000 	.word	0x3ff00000
 801531c:	40240000 	.word	0x40240000
 8015320:	401c0000 	.word	0x401c0000
 8015324:	40140000 	.word	0x40140000
 8015328:	3fe00000 	.word	0x3fe00000
 801532c:	9d01      	ldr	r5, [sp, #4]
 801532e:	4656      	mov	r6, sl
 8015330:	465f      	mov	r7, fp
 8015332:	4642      	mov	r2, r8
 8015334:	464b      	mov	r3, r9
 8015336:	4630      	mov	r0, r6
 8015338:	4639      	mov	r1, r7
 801533a:	f7f7 f9bf 	bl	800c6bc <__aeabi_ddiv>
 801533e:	f7f7 fb43 	bl	800c9c8 <__aeabi_d2iz>
 8015342:	4682      	mov	sl, r0
 8015344:	f7f7 f826 	bl	800c394 <__aeabi_i2d>
 8015348:	4642      	mov	r2, r8
 801534a:	464b      	mov	r3, r9
 801534c:	f7f7 f88c 	bl	800c468 <__aeabi_dmul>
 8015350:	4602      	mov	r2, r0
 8015352:	460b      	mov	r3, r1
 8015354:	4630      	mov	r0, r6
 8015356:	4639      	mov	r1, r7
 8015358:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801535c:	f7f6 fecc 	bl	800c0f8 <__aeabi_dsub>
 8015360:	f805 6b01 	strb.w	r6, [r5], #1
 8015364:	9e01      	ldr	r6, [sp, #4]
 8015366:	9f03      	ldr	r7, [sp, #12]
 8015368:	1bae      	subs	r6, r5, r6
 801536a:	42b7      	cmp	r7, r6
 801536c:	4602      	mov	r2, r0
 801536e:	460b      	mov	r3, r1
 8015370:	d135      	bne.n	80153de <_dtoa_r+0x6e6>
 8015372:	f7f6 fec3 	bl	800c0fc <__adddf3>
 8015376:	4642      	mov	r2, r8
 8015378:	464b      	mov	r3, r9
 801537a:	4606      	mov	r6, r0
 801537c:	460f      	mov	r7, r1
 801537e:	f7f7 fb03 	bl	800c988 <__aeabi_dcmpgt>
 8015382:	b9d0      	cbnz	r0, 80153ba <_dtoa_r+0x6c2>
 8015384:	4642      	mov	r2, r8
 8015386:	464b      	mov	r3, r9
 8015388:	4630      	mov	r0, r6
 801538a:	4639      	mov	r1, r7
 801538c:	f7f7 fad4 	bl	800c938 <__aeabi_dcmpeq>
 8015390:	b110      	cbz	r0, 8015398 <_dtoa_r+0x6a0>
 8015392:	f01a 0f01 	tst.w	sl, #1
 8015396:	d110      	bne.n	80153ba <_dtoa_r+0x6c2>
 8015398:	4620      	mov	r0, r4
 801539a:	ee18 1a10 	vmov	r1, s16
 801539e:	f000 faf3 	bl	8015988 <_Bfree>
 80153a2:	2300      	movs	r3, #0
 80153a4:	9800      	ldr	r0, [sp, #0]
 80153a6:	702b      	strb	r3, [r5, #0]
 80153a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153aa:	3001      	adds	r0, #1
 80153ac:	6018      	str	r0, [r3, #0]
 80153ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	f43f acf1 	beq.w	8014d98 <_dtoa_r+0xa0>
 80153b6:	601d      	str	r5, [r3, #0]
 80153b8:	e4ee      	b.n	8014d98 <_dtoa_r+0xa0>
 80153ba:	9f00      	ldr	r7, [sp, #0]
 80153bc:	462b      	mov	r3, r5
 80153be:	461d      	mov	r5, r3
 80153c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80153c4:	2a39      	cmp	r2, #57	; 0x39
 80153c6:	d106      	bne.n	80153d6 <_dtoa_r+0x6de>
 80153c8:	9a01      	ldr	r2, [sp, #4]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d1f7      	bne.n	80153be <_dtoa_r+0x6c6>
 80153ce:	9901      	ldr	r1, [sp, #4]
 80153d0:	2230      	movs	r2, #48	; 0x30
 80153d2:	3701      	adds	r7, #1
 80153d4:	700a      	strb	r2, [r1, #0]
 80153d6:	781a      	ldrb	r2, [r3, #0]
 80153d8:	3201      	adds	r2, #1
 80153da:	701a      	strb	r2, [r3, #0]
 80153dc:	e790      	b.n	8015300 <_dtoa_r+0x608>
 80153de:	4ba6      	ldr	r3, [pc, #664]	; (8015678 <_dtoa_r+0x980>)
 80153e0:	2200      	movs	r2, #0
 80153e2:	f7f7 f841 	bl	800c468 <__aeabi_dmul>
 80153e6:	2200      	movs	r2, #0
 80153e8:	2300      	movs	r3, #0
 80153ea:	4606      	mov	r6, r0
 80153ec:	460f      	mov	r7, r1
 80153ee:	f7f7 faa3 	bl	800c938 <__aeabi_dcmpeq>
 80153f2:	2800      	cmp	r0, #0
 80153f4:	d09d      	beq.n	8015332 <_dtoa_r+0x63a>
 80153f6:	e7cf      	b.n	8015398 <_dtoa_r+0x6a0>
 80153f8:	9a08      	ldr	r2, [sp, #32]
 80153fa:	2a00      	cmp	r2, #0
 80153fc:	f000 80d7 	beq.w	80155ae <_dtoa_r+0x8b6>
 8015400:	9a06      	ldr	r2, [sp, #24]
 8015402:	2a01      	cmp	r2, #1
 8015404:	f300 80ba 	bgt.w	801557c <_dtoa_r+0x884>
 8015408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801540a:	2a00      	cmp	r2, #0
 801540c:	f000 80b2 	beq.w	8015574 <_dtoa_r+0x87c>
 8015410:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015414:	9e07      	ldr	r6, [sp, #28]
 8015416:	9d04      	ldr	r5, [sp, #16]
 8015418:	9a04      	ldr	r2, [sp, #16]
 801541a:	441a      	add	r2, r3
 801541c:	9204      	str	r2, [sp, #16]
 801541e:	9a05      	ldr	r2, [sp, #20]
 8015420:	2101      	movs	r1, #1
 8015422:	441a      	add	r2, r3
 8015424:	4620      	mov	r0, r4
 8015426:	9205      	str	r2, [sp, #20]
 8015428:	f000 fb66 	bl	8015af8 <__i2b>
 801542c:	4607      	mov	r7, r0
 801542e:	2d00      	cmp	r5, #0
 8015430:	dd0c      	ble.n	801544c <_dtoa_r+0x754>
 8015432:	9b05      	ldr	r3, [sp, #20]
 8015434:	2b00      	cmp	r3, #0
 8015436:	dd09      	ble.n	801544c <_dtoa_r+0x754>
 8015438:	42ab      	cmp	r3, r5
 801543a:	9a04      	ldr	r2, [sp, #16]
 801543c:	bfa8      	it	ge
 801543e:	462b      	movge	r3, r5
 8015440:	1ad2      	subs	r2, r2, r3
 8015442:	9204      	str	r2, [sp, #16]
 8015444:	9a05      	ldr	r2, [sp, #20]
 8015446:	1aed      	subs	r5, r5, r3
 8015448:	1ad3      	subs	r3, r2, r3
 801544a:	9305      	str	r3, [sp, #20]
 801544c:	9b07      	ldr	r3, [sp, #28]
 801544e:	b31b      	cbz	r3, 8015498 <_dtoa_r+0x7a0>
 8015450:	9b08      	ldr	r3, [sp, #32]
 8015452:	2b00      	cmp	r3, #0
 8015454:	f000 80af 	beq.w	80155b6 <_dtoa_r+0x8be>
 8015458:	2e00      	cmp	r6, #0
 801545a:	dd13      	ble.n	8015484 <_dtoa_r+0x78c>
 801545c:	4639      	mov	r1, r7
 801545e:	4632      	mov	r2, r6
 8015460:	4620      	mov	r0, r4
 8015462:	f000 fc09 	bl	8015c78 <__pow5mult>
 8015466:	ee18 2a10 	vmov	r2, s16
 801546a:	4601      	mov	r1, r0
 801546c:	4607      	mov	r7, r0
 801546e:	4620      	mov	r0, r4
 8015470:	f000 fb58 	bl	8015b24 <__multiply>
 8015474:	ee18 1a10 	vmov	r1, s16
 8015478:	4680      	mov	r8, r0
 801547a:	4620      	mov	r0, r4
 801547c:	f000 fa84 	bl	8015988 <_Bfree>
 8015480:	ee08 8a10 	vmov	s16, r8
 8015484:	9b07      	ldr	r3, [sp, #28]
 8015486:	1b9a      	subs	r2, r3, r6
 8015488:	d006      	beq.n	8015498 <_dtoa_r+0x7a0>
 801548a:	ee18 1a10 	vmov	r1, s16
 801548e:	4620      	mov	r0, r4
 8015490:	f000 fbf2 	bl	8015c78 <__pow5mult>
 8015494:	ee08 0a10 	vmov	s16, r0
 8015498:	2101      	movs	r1, #1
 801549a:	4620      	mov	r0, r4
 801549c:	f000 fb2c 	bl	8015af8 <__i2b>
 80154a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	4606      	mov	r6, r0
 80154a6:	f340 8088 	ble.w	80155ba <_dtoa_r+0x8c2>
 80154aa:	461a      	mov	r2, r3
 80154ac:	4601      	mov	r1, r0
 80154ae:	4620      	mov	r0, r4
 80154b0:	f000 fbe2 	bl	8015c78 <__pow5mult>
 80154b4:	9b06      	ldr	r3, [sp, #24]
 80154b6:	2b01      	cmp	r3, #1
 80154b8:	4606      	mov	r6, r0
 80154ba:	f340 8081 	ble.w	80155c0 <_dtoa_r+0x8c8>
 80154be:	f04f 0800 	mov.w	r8, #0
 80154c2:	6933      	ldr	r3, [r6, #16]
 80154c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80154c8:	6918      	ldr	r0, [r3, #16]
 80154ca:	f000 fac5 	bl	8015a58 <__hi0bits>
 80154ce:	f1c0 0020 	rsb	r0, r0, #32
 80154d2:	9b05      	ldr	r3, [sp, #20]
 80154d4:	4418      	add	r0, r3
 80154d6:	f010 001f 	ands.w	r0, r0, #31
 80154da:	f000 8092 	beq.w	8015602 <_dtoa_r+0x90a>
 80154de:	f1c0 0320 	rsb	r3, r0, #32
 80154e2:	2b04      	cmp	r3, #4
 80154e4:	f340 808a 	ble.w	80155fc <_dtoa_r+0x904>
 80154e8:	f1c0 001c 	rsb	r0, r0, #28
 80154ec:	9b04      	ldr	r3, [sp, #16]
 80154ee:	4403      	add	r3, r0
 80154f0:	9304      	str	r3, [sp, #16]
 80154f2:	9b05      	ldr	r3, [sp, #20]
 80154f4:	4403      	add	r3, r0
 80154f6:	4405      	add	r5, r0
 80154f8:	9305      	str	r3, [sp, #20]
 80154fa:	9b04      	ldr	r3, [sp, #16]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	dd07      	ble.n	8015510 <_dtoa_r+0x818>
 8015500:	ee18 1a10 	vmov	r1, s16
 8015504:	461a      	mov	r2, r3
 8015506:	4620      	mov	r0, r4
 8015508:	f000 fc10 	bl	8015d2c <__lshift>
 801550c:	ee08 0a10 	vmov	s16, r0
 8015510:	9b05      	ldr	r3, [sp, #20]
 8015512:	2b00      	cmp	r3, #0
 8015514:	dd05      	ble.n	8015522 <_dtoa_r+0x82a>
 8015516:	4631      	mov	r1, r6
 8015518:	461a      	mov	r2, r3
 801551a:	4620      	mov	r0, r4
 801551c:	f000 fc06 	bl	8015d2c <__lshift>
 8015520:	4606      	mov	r6, r0
 8015522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015524:	2b00      	cmp	r3, #0
 8015526:	d06e      	beq.n	8015606 <_dtoa_r+0x90e>
 8015528:	ee18 0a10 	vmov	r0, s16
 801552c:	4631      	mov	r1, r6
 801552e:	f000 fc6d 	bl	8015e0c <__mcmp>
 8015532:	2800      	cmp	r0, #0
 8015534:	da67      	bge.n	8015606 <_dtoa_r+0x90e>
 8015536:	9b00      	ldr	r3, [sp, #0]
 8015538:	3b01      	subs	r3, #1
 801553a:	ee18 1a10 	vmov	r1, s16
 801553e:	9300      	str	r3, [sp, #0]
 8015540:	220a      	movs	r2, #10
 8015542:	2300      	movs	r3, #0
 8015544:	4620      	mov	r0, r4
 8015546:	f000 fa41 	bl	80159cc <__multadd>
 801554a:	9b08      	ldr	r3, [sp, #32]
 801554c:	ee08 0a10 	vmov	s16, r0
 8015550:	2b00      	cmp	r3, #0
 8015552:	f000 81b1 	beq.w	80158b8 <_dtoa_r+0xbc0>
 8015556:	2300      	movs	r3, #0
 8015558:	4639      	mov	r1, r7
 801555a:	220a      	movs	r2, #10
 801555c:	4620      	mov	r0, r4
 801555e:	f000 fa35 	bl	80159cc <__multadd>
 8015562:	9b02      	ldr	r3, [sp, #8]
 8015564:	2b00      	cmp	r3, #0
 8015566:	4607      	mov	r7, r0
 8015568:	f300 808e 	bgt.w	8015688 <_dtoa_r+0x990>
 801556c:	9b06      	ldr	r3, [sp, #24]
 801556e:	2b02      	cmp	r3, #2
 8015570:	dc51      	bgt.n	8015616 <_dtoa_r+0x91e>
 8015572:	e089      	b.n	8015688 <_dtoa_r+0x990>
 8015574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015576:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801557a:	e74b      	b.n	8015414 <_dtoa_r+0x71c>
 801557c:	9b03      	ldr	r3, [sp, #12]
 801557e:	1e5e      	subs	r6, r3, #1
 8015580:	9b07      	ldr	r3, [sp, #28]
 8015582:	42b3      	cmp	r3, r6
 8015584:	bfbf      	itttt	lt
 8015586:	9b07      	ldrlt	r3, [sp, #28]
 8015588:	9607      	strlt	r6, [sp, #28]
 801558a:	1af2      	sublt	r2, r6, r3
 801558c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801558e:	bfb6      	itet	lt
 8015590:	189b      	addlt	r3, r3, r2
 8015592:	1b9e      	subge	r6, r3, r6
 8015594:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015596:	9b03      	ldr	r3, [sp, #12]
 8015598:	bfb8      	it	lt
 801559a:	2600      	movlt	r6, #0
 801559c:	2b00      	cmp	r3, #0
 801559e:	bfb7      	itett	lt
 80155a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80155a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80155a8:	1a9d      	sublt	r5, r3, r2
 80155aa:	2300      	movlt	r3, #0
 80155ac:	e734      	b.n	8015418 <_dtoa_r+0x720>
 80155ae:	9e07      	ldr	r6, [sp, #28]
 80155b0:	9d04      	ldr	r5, [sp, #16]
 80155b2:	9f08      	ldr	r7, [sp, #32]
 80155b4:	e73b      	b.n	801542e <_dtoa_r+0x736>
 80155b6:	9a07      	ldr	r2, [sp, #28]
 80155b8:	e767      	b.n	801548a <_dtoa_r+0x792>
 80155ba:	9b06      	ldr	r3, [sp, #24]
 80155bc:	2b01      	cmp	r3, #1
 80155be:	dc18      	bgt.n	80155f2 <_dtoa_r+0x8fa>
 80155c0:	f1ba 0f00 	cmp.w	sl, #0
 80155c4:	d115      	bne.n	80155f2 <_dtoa_r+0x8fa>
 80155c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80155ca:	b993      	cbnz	r3, 80155f2 <_dtoa_r+0x8fa>
 80155cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80155d0:	0d1b      	lsrs	r3, r3, #20
 80155d2:	051b      	lsls	r3, r3, #20
 80155d4:	b183      	cbz	r3, 80155f8 <_dtoa_r+0x900>
 80155d6:	9b04      	ldr	r3, [sp, #16]
 80155d8:	3301      	adds	r3, #1
 80155da:	9304      	str	r3, [sp, #16]
 80155dc:	9b05      	ldr	r3, [sp, #20]
 80155de:	3301      	adds	r3, #1
 80155e0:	9305      	str	r3, [sp, #20]
 80155e2:	f04f 0801 	mov.w	r8, #1
 80155e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	f47f af6a 	bne.w	80154c2 <_dtoa_r+0x7ca>
 80155ee:	2001      	movs	r0, #1
 80155f0:	e76f      	b.n	80154d2 <_dtoa_r+0x7da>
 80155f2:	f04f 0800 	mov.w	r8, #0
 80155f6:	e7f6      	b.n	80155e6 <_dtoa_r+0x8ee>
 80155f8:	4698      	mov	r8, r3
 80155fa:	e7f4      	b.n	80155e6 <_dtoa_r+0x8ee>
 80155fc:	f43f af7d 	beq.w	80154fa <_dtoa_r+0x802>
 8015600:	4618      	mov	r0, r3
 8015602:	301c      	adds	r0, #28
 8015604:	e772      	b.n	80154ec <_dtoa_r+0x7f4>
 8015606:	9b03      	ldr	r3, [sp, #12]
 8015608:	2b00      	cmp	r3, #0
 801560a:	dc37      	bgt.n	801567c <_dtoa_r+0x984>
 801560c:	9b06      	ldr	r3, [sp, #24]
 801560e:	2b02      	cmp	r3, #2
 8015610:	dd34      	ble.n	801567c <_dtoa_r+0x984>
 8015612:	9b03      	ldr	r3, [sp, #12]
 8015614:	9302      	str	r3, [sp, #8]
 8015616:	9b02      	ldr	r3, [sp, #8]
 8015618:	b96b      	cbnz	r3, 8015636 <_dtoa_r+0x93e>
 801561a:	4631      	mov	r1, r6
 801561c:	2205      	movs	r2, #5
 801561e:	4620      	mov	r0, r4
 8015620:	f000 f9d4 	bl	80159cc <__multadd>
 8015624:	4601      	mov	r1, r0
 8015626:	4606      	mov	r6, r0
 8015628:	ee18 0a10 	vmov	r0, s16
 801562c:	f000 fbee 	bl	8015e0c <__mcmp>
 8015630:	2800      	cmp	r0, #0
 8015632:	f73f adbb 	bgt.w	80151ac <_dtoa_r+0x4b4>
 8015636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015638:	9d01      	ldr	r5, [sp, #4]
 801563a:	43db      	mvns	r3, r3
 801563c:	9300      	str	r3, [sp, #0]
 801563e:	f04f 0800 	mov.w	r8, #0
 8015642:	4631      	mov	r1, r6
 8015644:	4620      	mov	r0, r4
 8015646:	f000 f99f 	bl	8015988 <_Bfree>
 801564a:	2f00      	cmp	r7, #0
 801564c:	f43f aea4 	beq.w	8015398 <_dtoa_r+0x6a0>
 8015650:	f1b8 0f00 	cmp.w	r8, #0
 8015654:	d005      	beq.n	8015662 <_dtoa_r+0x96a>
 8015656:	45b8      	cmp	r8, r7
 8015658:	d003      	beq.n	8015662 <_dtoa_r+0x96a>
 801565a:	4641      	mov	r1, r8
 801565c:	4620      	mov	r0, r4
 801565e:	f000 f993 	bl	8015988 <_Bfree>
 8015662:	4639      	mov	r1, r7
 8015664:	4620      	mov	r0, r4
 8015666:	f000 f98f 	bl	8015988 <_Bfree>
 801566a:	e695      	b.n	8015398 <_dtoa_r+0x6a0>
 801566c:	2600      	movs	r6, #0
 801566e:	4637      	mov	r7, r6
 8015670:	e7e1      	b.n	8015636 <_dtoa_r+0x93e>
 8015672:	9700      	str	r7, [sp, #0]
 8015674:	4637      	mov	r7, r6
 8015676:	e599      	b.n	80151ac <_dtoa_r+0x4b4>
 8015678:	40240000 	.word	0x40240000
 801567c:	9b08      	ldr	r3, [sp, #32]
 801567e:	2b00      	cmp	r3, #0
 8015680:	f000 80ca 	beq.w	8015818 <_dtoa_r+0xb20>
 8015684:	9b03      	ldr	r3, [sp, #12]
 8015686:	9302      	str	r3, [sp, #8]
 8015688:	2d00      	cmp	r5, #0
 801568a:	dd05      	ble.n	8015698 <_dtoa_r+0x9a0>
 801568c:	4639      	mov	r1, r7
 801568e:	462a      	mov	r2, r5
 8015690:	4620      	mov	r0, r4
 8015692:	f000 fb4b 	bl	8015d2c <__lshift>
 8015696:	4607      	mov	r7, r0
 8015698:	f1b8 0f00 	cmp.w	r8, #0
 801569c:	d05b      	beq.n	8015756 <_dtoa_r+0xa5e>
 801569e:	6879      	ldr	r1, [r7, #4]
 80156a0:	4620      	mov	r0, r4
 80156a2:	f000 f931 	bl	8015908 <_Balloc>
 80156a6:	4605      	mov	r5, r0
 80156a8:	b928      	cbnz	r0, 80156b6 <_dtoa_r+0x9be>
 80156aa:	4b87      	ldr	r3, [pc, #540]	; (80158c8 <_dtoa_r+0xbd0>)
 80156ac:	4602      	mov	r2, r0
 80156ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80156b2:	f7ff bb3b 	b.w	8014d2c <_dtoa_r+0x34>
 80156b6:	693a      	ldr	r2, [r7, #16]
 80156b8:	3202      	adds	r2, #2
 80156ba:	0092      	lsls	r2, r2, #2
 80156bc:	f107 010c 	add.w	r1, r7, #12
 80156c0:	300c      	adds	r0, #12
 80156c2:	f000 f913 	bl	80158ec <memcpy>
 80156c6:	2201      	movs	r2, #1
 80156c8:	4629      	mov	r1, r5
 80156ca:	4620      	mov	r0, r4
 80156cc:	f000 fb2e 	bl	8015d2c <__lshift>
 80156d0:	9b01      	ldr	r3, [sp, #4]
 80156d2:	f103 0901 	add.w	r9, r3, #1
 80156d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80156da:	4413      	add	r3, r2
 80156dc:	9305      	str	r3, [sp, #20]
 80156de:	f00a 0301 	and.w	r3, sl, #1
 80156e2:	46b8      	mov	r8, r7
 80156e4:	9304      	str	r3, [sp, #16]
 80156e6:	4607      	mov	r7, r0
 80156e8:	4631      	mov	r1, r6
 80156ea:	ee18 0a10 	vmov	r0, s16
 80156ee:	f7ff fa75 	bl	8014bdc <quorem>
 80156f2:	4641      	mov	r1, r8
 80156f4:	9002      	str	r0, [sp, #8]
 80156f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80156fa:	ee18 0a10 	vmov	r0, s16
 80156fe:	f000 fb85 	bl	8015e0c <__mcmp>
 8015702:	463a      	mov	r2, r7
 8015704:	9003      	str	r0, [sp, #12]
 8015706:	4631      	mov	r1, r6
 8015708:	4620      	mov	r0, r4
 801570a:	f000 fb9b 	bl	8015e44 <__mdiff>
 801570e:	68c2      	ldr	r2, [r0, #12]
 8015710:	f109 3bff 	add.w	fp, r9, #4294967295
 8015714:	4605      	mov	r5, r0
 8015716:	bb02      	cbnz	r2, 801575a <_dtoa_r+0xa62>
 8015718:	4601      	mov	r1, r0
 801571a:	ee18 0a10 	vmov	r0, s16
 801571e:	f000 fb75 	bl	8015e0c <__mcmp>
 8015722:	4602      	mov	r2, r0
 8015724:	4629      	mov	r1, r5
 8015726:	4620      	mov	r0, r4
 8015728:	9207      	str	r2, [sp, #28]
 801572a:	f000 f92d 	bl	8015988 <_Bfree>
 801572e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015732:	ea43 0102 	orr.w	r1, r3, r2
 8015736:	9b04      	ldr	r3, [sp, #16]
 8015738:	430b      	orrs	r3, r1
 801573a:	464d      	mov	r5, r9
 801573c:	d10f      	bne.n	801575e <_dtoa_r+0xa66>
 801573e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015742:	d02a      	beq.n	801579a <_dtoa_r+0xaa2>
 8015744:	9b03      	ldr	r3, [sp, #12]
 8015746:	2b00      	cmp	r3, #0
 8015748:	dd02      	ble.n	8015750 <_dtoa_r+0xa58>
 801574a:	9b02      	ldr	r3, [sp, #8]
 801574c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015750:	f88b a000 	strb.w	sl, [fp]
 8015754:	e775      	b.n	8015642 <_dtoa_r+0x94a>
 8015756:	4638      	mov	r0, r7
 8015758:	e7ba      	b.n	80156d0 <_dtoa_r+0x9d8>
 801575a:	2201      	movs	r2, #1
 801575c:	e7e2      	b.n	8015724 <_dtoa_r+0xa2c>
 801575e:	9b03      	ldr	r3, [sp, #12]
 8015760:	2b00      	cmp	r3, #0
 8015762:	db04      	blt.n	801576e <_dtoa_r+0xa76>
 8015764:	9906      	ldr	r1, [sp, #24]
 8015766:	430b      	orrs	r3, r1
 8015768:	9904      	ldr	r1, [sp, #16]
 801576a:	430b      	orrs	r3, r1
 801576c:	d122      	bne.n	80157b4 <_dtoa_r+0xabc>
 801576e:	2a00      	cmp	r2, #0
 8015770:	ddee      	ble.n	8015750 <_dtoa_r+0xa58>
 8015772:	ee18 1a10 	vmov	r1, s16
 8015776:	2201      	movs	r2, #1
 8015778:	4620      	mov	r0, r4
 801577a:	f000 fad7 	bl	8015d2c <__lshift>
 801577e:	4631      	mov	r1, r6
 8015780:	ee08 0a10 	vmov	s16, r0
 8015784:	f000 fb42 	bl	8015e0c <__mcmp>
 8015788:	2800      	cmp	r0, #0
 801578a:	dc03      	bgt.n	8015794 <_dtoa_r+0xa9c>
 801578c:	d1e0      	bne.n	8015750 <_dtoa_r+0xa58>
 801578e:	f01a 0f01 	tst.w	sl, #1
 8015792:	d0dd      	beq.n	8015750 <_dtoa_r+0xa58>
 8015794:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015798:	d1d7      	bne.n	801574a <_dtoa_r+0xa52>
 801579a:	2339      	movs	r3, #57	; 0x39
 801579c:	f88b 3000 	strb.w	r3, [fp]
 80157a0:	462b      	mov	r3, r5
 80157a2:	461d      	mov	r5, r3
 80157a4:	3b01      	subs	r3, #1
 80157a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80157aa:	2a39      	cmp	r2, #57	; 0x39
 80157ac:	d071      	beq.n	8015892 <_dtoa_r+0xb9a>
 80157ae:	3201      	adds	r2, #1
 80157b0:	701a      	strb	r2, [r3, #0]
 80157b2:	e746      	b.n	8015642 <_dtoa_r+0x94a>
 80157b4:	2a00      	cmp	r2, #0
 80157b6:	dd07      	ble.n	80157c8 <_dtoa_r+0xad0>
 80157b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80157bc:	d0ed      	beq.n	801579a <_dtoa_r+0xaa2>
 80157be:	f10a 0301 	add.w	r3, sl, #1
 80157c2:	f88b 3000 	strb.w	r3, [fp]
 80157c6:	e73c      	b.n	8015642 <_dtoa_r+0x94a>
 80157c8:	9b05      	ldr	r3, [sp, #20]
 80157ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80157ce:	4599      	cmp	r9, r3
 80157d0:	d047      	beq.n	8015862 <_dtoa_r+0xb6a>
 80157d2:	ee18 1a10 	vmov	r1, s16
 80157d6:	2300      	movs	r3, #0
 80157d8:	220a      	movs	r2, #10
 80157da:	4620      	mov	r0, r4
 80157dc:	f000 f8f6 	bl	80159cc <__multadd>
 80157e0:	45b8      	cmp	r8, r7
 80157e2:	ee08 0a10 	vmov	s16, r0
 80157e6:	f04f 0300 	mov.w	r3, #0
 80157ea:	f04f 020a 	mov.w	r2, #10
 80157ee:	4641      	mov	r1, r8
 80157f0:	4620      	mov	r0, r4
 80157f2:	d106      	bne.n	8015802 <_dtoa_r+0xb0a>
 80157f4:	f000 f8ea 	bl	80159cc <__multadd>
 80157f8:	4680      	mov	r8, r0
 80157fa:	4607      	mov	r7, r0
 80157fc:	f109 0901 	add.w	r9, r9, #1
 8015800:	e772      	b.n	80156e8 <_dtoa_r+0x9f0>
 8015802:	f000 f8e3 	bl	80159cc <__multadd>
 8015806:	4639      	mov	r1, r7
 8015808:	4680      	mov	r8, r0
 801580a:	2300      	movs	r3, #0
 801580c:	220a      	movs	r2, #10
 801580e:	4620      	mov	r0, r4
 8015810:	f000 f8dc 	bl	80159cc <__multadd>
 8015814:	4607      	mov	r7, r0
 8015816:	e7f1      	b.n	80157fc <_dtoa_r+0xb04>
 8015818:	9b03      	ldr	r3, [sp, #12]
 801581a:	9302      	str	r3, [sp, #8]
 801581c:	9d01      	ldr	r5, [sp, #4]
 801581e:	ee18 0a10 	vmov	r0, s16
 8015822:	4631      	mov	r1, r6
 8015824:	f7ff f9da 	bl	8014bdc <quorem>
 8015828:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801582c:	9b01      	ldr	r3, [sp, #4]
 801582e:	f805 ab01 	strb.w	sl, [r5], #1
 8015832:	1aea      	subs	r2, r5, r3
 8015834:	9b02      	ldr	r3, [sp, #8]
 8015836:	4293      	cmp	r3, r2
 8015838:	dd09      	ble.n	801584e <_dtoa_r+0xb56>
 801583a:	ee18 1a10 	vmov	r1, s16
 801583e:	2300      	movs	r3, #0
 8015840:	220a      	movs	r2, #10
 8015842:	4620      	mov	r0, r4
 8015844:	f000 f8c2 	bl	80159cc <__multadd>
 8015848:	ee08 0a10 	vmov	s16, r0
 801584c:	e7e7      	b.n	801581e <_dtoa_r+0xb26>
 801584e:	9b02      	ldr	r3, [sp, #8]
 8015850:	2b00      	cmp	r3, #0
 8015852:	bfc8      	it	gt
 8015854:	461d      	movgt	r5, r3
 8015856:	9b01      	ldr	r3, [sp, #4]
 8015858:	bfd8      	it	le
 801585a:	2501      	movle	r5, #1
 801585c:	441d      	add	r5, r3
 801585e:	f04f 0800 	mov.w	r8, #0
 8015862:	ee18 1a10 	vmov	r1, s16
 8015866:	2201      	movs	r2, #1
 8015868:	4620      	mov	r0, r4
 801586a:	f000 fa5f 	bl	8015d2c <__lshift>
 801586e:	4631      	mov	r1, r6
 8015870:	ee08 0a10 	vmov	s16, r0
 8015874:	f000 faca 	bl	8015e0c <__mcmp>
 8015878:	2800      	cmp	r0, #0
 801587a:	dc91      	bgt.n	80157a0 <_dtoa_r+0xaa8>
 801587c:	d102      	bne.n	8015884 <_dtoa_r+0xb8c>
 801587e:	f01a 0f01 	tst.w	sl, #1
 8015882:	d18d      	bne.n	80157a0 <_dtoa_r+0xaa8>
 8015884:	462b      	mov	r3, r5
 8015886:	461d      	mov	r5, r3
 8015888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801588c:	2a30      	cmp	r2, #48	; 0x30
 801588e:	d0fa      	beq.n	8015886 <_dtoa_r+0xb8e>
 8015890:	e6d7      	b.n	8015642 <_dtoa_r+0x94a>
 8015892:	9a01      	ldr	r2, [sp, #4]
 8015894:	429a      	cmp	r2, r3
 8015896:	d184      	bne.n	80157a2 <_dtoa_r+0xaaa>
 8015898:	9b00      	ldr	r3, [sp, #0]
 801589a:	3301      	adds	r3, #1
 801589c:	9300      	str	r3, [sp, #0]
 801589e:	2331      	movs	r3, #49	; 0x31
 80158a0:	7013      	strb	r3, [r2, #0]
 80158a2:	e6ce      	b.n	8015642 <_dtoa_r+0x94a>
 80158a4:	4b09      	ldr	r3, [pc, #36]	; (80158cc <_dtoa_r+0xbd4>)
 80158a6:	f7ff ba95 	b.w	8014dd4 <_dtoa_r+0xdc>
 80158aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	f47f aa6e 	bne.w	8014d8e <_dtoa_r+0x96>
 80158b2:	4b07      	ldr	r3, [pc, #28]	; (80158d0 <_dtoa_r+0xbd8>)
 80158b4:	f7ff ba8e 	b.w	8014dd4 <_dtoa_r+0xdc>
 80158b8:	9b02      	ldr	r3, [sp, #8]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	dcae      	bgt.n	801581c <_dtoa_r+0xb24>
 80158be:	9b06      	ldr	r3, [sp, #24]
 80158c0:	2b02      	cmp	r3, #2
 80158c2:	f73f aea8 	bgt.w	8015616 <_dtoa_r+0x91e>
 80158c6:	e7a9      	b.n	801581c <_dtoa_r+0xb24>
 80158c8:	08021a1f 	.word	0x08021a1f
 80158cc:	0802197c 	.word	0x0802197c
 80158d0:	080219a0 	.word	0x080219a0

080158d4 <_localeconv_r>:
 80158d4:	4800      	ldr	r0, [pc, #0]	; (80158d8 <_localeconv_r+0x4>)
 80158d6:	4770      	bx	lr
 80158d8:	200001c0 	.word	0x200001c0

080158dc <malloc>:
 80158dc:	4b02      	ldr	r3, [pc, #8]	; (80158e8 <malloc+0xc>)
 80158de:	4601      	mov	r1, r0
 80158e0:	6818      	ldr	r0, [r3, #0]
 80158e2:	f000 bc17 	b.w	8016114 <_malloc_r>
 80158e6:	bf00      	nop
 80158e8:	2000006c 	.word	0x2000006c

080158ec <memcpy>:
 80158ec:	440a      	add	r2, r1
 80158ee:	4291      	cmp	r1, r2
 80158f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80158f4:	d100      	bne.n	80158f8 <memcpy+0xc>
 80158f6:	4770      	bx	lr
 80158f8:	b510      	push	{r4, lr}
 80158fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015902:	4291      	cmp	r1, r2
 8015904:	d1f9      	bne.n	80158fa <memcpy+0xe>
 8015906:	bd10      	pop	{r4, pc}

08015908 <_Balloc>:
 8015908:	b570      	push	{r4, r5, r6, lr}
 801590a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801590c:	4604      	mov	r4, r0
 801590e:	460d      	mov	r5, r1
 8015910:	b976      	cbnz	r6, 8015930 <_Balloc+0x28>
 8015912:	2010      	movs	r0, #16
 8015914:	f7ff ffe2 	bl	80158dc <malloc>
 8015918:	4602      	mov	r2, r0
 801591a:	6260      	str	r0, [r4, #36]	; 0x24
 801591c:	b920      	cbnz	r0, 8015928 <_Balloc+0x20>
 801591e:	4b18      	ldr	r3, [pc, #96]	; (8015980 <_Balloc+0x78>)
 8015920:	4818      	ldr	r0, [pc, #96]	; (8015984 <_Balloc+0x7c>)
 8015922:	2166      	movs	r1, #102	; 0x66
 8015924:	f000 fdd6 	bl	80164d4 <__assert_func>
 8015928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801592c:	6006      	str	r6, [r0, #0]
 801592e:	60c6      	str	r6, [r0, #12]
 8015930:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015932:	68f3      	ldr	r3, [r6, #12]
 8015934:	b183      	cbz	r3, 8015958 <_Balloc+0x50>
 8015936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015938:	68db      	ldr	r3, [r3, #12]
 801593a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801593e:	b9b8      	cbnz	r0, 8015970 <_Balloc+0x68>
 8015940:	2101      	movs	r1, #1
 8015942:	fa01 f605 	lsl.w	r6, r1, r5
 8015946:	1d72      	adds	r2, r6, #5
 8015948:	0092      	lsls	r2, r2, #2
 801594a:	4620      	mov	r0, r4
 801594c:	f000 fb60 	bl	8016010 <_calloc_r>
 8015950:	b160      	cbz	r0, 801596c <_Balloc+0x64>
 8015952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015956:	e00e      	b.n	8015976 <_Balloc+0x6e>
 8015958:	2221      	movs	r2, #33	; 0x21
 801595a:	2104      	movs	r1, #4
 801595c:	4620      	mov	r0, r4
 801595e:	f000 fb57 	bl	8016010 <_calloc_r>
 8015962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015964:	60f0      	str	r0, [r6, #12]
 8015966:	68db      	ldr	r3, [r3, #12]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d1e4      	bne.n	8015936 <_Balloc+0x2e>
 801596c:	2000      	movs	r0, #0
 801596e:	bd70      	pop	{r4, r5, r6, pc}
 8015970:	6802      	ldr	r2, [r0, #0]
 8015972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015976:	2300      	movs	r3, #0
 8015978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801597c:	e7f7      	b.n	801596e <_Balloc+0x66>
 801597e:	bf00      	nop
 8015980:	080219ad 	.word	0x080219ad
 8015984:	08021a30 	.word	0x08021a30

08015988 <_Bfree>:
 8015988:	b570      	push	{r4, r5, r6, lr}
 801598a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801598c:	4605      	mov	r5, r0
 801598e:	460c      	mov	r4, r1
 8015990:	b976      	cbnz	r6, 80159b0 <_Bfree+0x28>
 8015992:	2010      	movs	r0, #16
 8015994:	f7ff ffa2 	bl	80158dc <malloc>
 8015998:	4602      	mov	r2, r0
 801599a:	6268      	str	r0, [r5, #36]	; 0x24
 801599c:	b920      	cbnz	r0, 80159a8 <_Bfree+0x20>
 801599e:	4b09      	ldr	r3, [pc, #36]	; (80159c4 <_Bfree+0x3c>)
 80159a0:	4809      	ldr	r0, [pc, #36]	; (80159c8 <_Bfree+0x40>)
 80159a2:	218a      	movs	r1, #138	; 0x8a
 80159a4:	f000 fd96 	bl	80164d4 <__assert_func>
 80159a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80159ac:	6006      	str	r6, [r0, #0]
 80159ae:	60c6      	str	r6, [r0, #12]
 80159b0:	b13c      	cbz	r4, 80159c2 <_Bfree+0x3a>
 80159b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80159b4:	6862      	ldr	r2, [r4, #4]
 80159b6:	68db      	ldr	r3, [r3, #12]
 80159b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80159bc:	6021      	str	r1, [r4, #0]
 80159be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80159c2:	bd70      	pop	{r4, r5, r6, pc}
 80159c4:	080219ad 	.word	0x080219ad
 80159c8:	08021a30 	.word	0x08021a30

080159cc <__multadd>:
 80159cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159d0:	690d      	ldr	r5, [r1, #16]
 80159d2:	4607      	mov	r7, r0
 80159d4:	460c      	mov	r4, r1
 80159d6:	461e      	mov	r6, r3
 80159d8:	f101 0c14 	add.w	ip, r1, #20
 80159dc:	2000      	movs	r0, #0
 80159de:	f8dc 3000 	ldr.w	r3, [ip]
 80159e2:	b299      	uxth	r1, r3
 80159e4:	fb02 6101 	mla	r1, r2, r1, r6
 80159e8:	0c1e      	lsrs	r6, r3, #16
 80159ea:	0c0b      	lsrs	r3, r1, #16
 80159ec:	fb02 3306 	mla	r3, r2, r6, r3
 80159f0:	b289      	uxth	r1, r1
 80159f2:	3001      	adds	r0, #1
 80159f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80159f8:	4285      	cmp	r5, r0
 80159fa:	f84c 1b04 	str.w	r1, [ip], #4
 80159fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015a02:	dcec      	bgt.n	80159de <__multadd+0x12>
 8015a04:	b30e      	cbz	r6, 8015a4a <__multadd+0x7e>
 8015a06:	68a3      	ldr	r3, [r4, #8]
 8015a08:	42ab      	cmp	r3, r5
 8015a0a:	dc19      	bgt.n	8015a40 <__multadd+0x74>
 8015a0c:	6861      	ldr	r1, [r4, #4]
 8015a0e:	4638      	mov	r0, r7
 8015a10:	3101      	adds	r1, #1
 8015a12:	f7ff ff79 	bl	8015908 <_Balloc>
 8015a16:	4680      	mov	r8, r0
 8015a18:	b928      	cbnz	r0, 8015a26 <__multadd+0x5a>
 8015a1a:	4602      	mov	r2, r0
 8015a1c:	4b0c      	ldr	r3, [pc, #48]	; (8015a50 <__multadd+0x84>)
 8015a1e:	480d      	ldr	r0, [pc, #52]	; (8015a54 <__multadd+0x88>)
 8015a20:	21b5      	movs	r1, #181	; 0xb5
 8015a22:	f000 fd57 	bl	80164d4 <__assert_func>
 8015a26:	6922      	ldr	r2, [r4, #16]
 8015a28:	3202      	adds	r2, #2
 8015a2a:	f104 010c 	add.w	r1, r4, #12
 8015a2e:	0092      	lsls	r2, r2, #2
 8015a30:	300c      	adds	r0, #12
 8015a32:	f7ff ff5b 	bl	80158ec <memcpy>
 8015a36:	4621      	mov	r1, r4
 8015a38:	4638      	mov	r0, r7
 8015a3a:	f7ff ffa5 	bl	8015988 <_Bfree>
 8015a3e:	4644      	mov	r4, r8
 8015a40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015a44:	3501      	adds	r5, #1
 8015a46:	615e      	str	r6, [r3, #20]
 8015a48:	6125      	str	r5, [r4, #16]
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a50:	08021a1f 	.word	0x08021a1f
 8015a54:	08021a30 	.word	0x08021a30

08015a58 <__hi0bits>:
 8015a58:	0c03      	lsrs	r3, r0, #16
 8015a5a:	041b      	lsls	r3, r3, #16
 8015a5c:	b9d3      	cbnz	r3, 8015a94 <__hi0bits+0x3c>
 8015a5e:	0400      	lsls	r0, r0, #16
 8015a60:	2310      	movs	r3, #16
 8015a62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015a66:	bf04      	itt	eq
 8015a68:	0200      	lsleq	r0, r0, #8
 8015a6a:	3308      	addeq	r3, #8
 8015a6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015a70:	bf04      	itt	eq
 8015a72:	0100      	lsleq	r0, r0, #4
 8015a74:	3304      	addeq	r3, #4
 8015a76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015a7a:	bf04      	itt	eq
 8015a7c:	0080      	lsleq	r0, r0, #2
 8015a7e:	3302      	addeq	r3, #2
 8015a80:	2800      	cmp	r0, #0
 8015a82:	db05      	blt.n	8015a90 <__hi0bits+0x38>
 8015a84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015a88:	f103 0301 	add.w	r3, r3, #1
 8015a8c:	bf08      	it	eq
 8015a8e:	2320      	moveq	r3, #32
 8015a90:	4618      	mov	r0, r3
 8015a92:	4770      	bx	lr
 8015a94:	2300      	movs	r3, #0
 8015a96:	e7e4      	b.n	8015a62 <__hi0bits+0xa>

08015a98 <__lo0bits>:
 8015a98:	6803      	ldr	r3, [r0, #0]
 8015a9a:	f013 0207 	ands.w	r2, r3, #7
 8015a9e:	4601      	mov	r1, r0
 8015aa0:	d00b      	beq.n	8015aba <__lo0bits+0x22>
 8015aa2:	07da      	lsls	r2, r3, #31
 8015aa4:	d423      	bmi.n	8015aee <__lo0bits+0x56>
 8015aa6:	0798      	lsls	r0, r3, #30
 8015aa8:	bf49      	itett	mi
 8015aaa:	085b      	lsrmi	r3, r3, #1
 8015aac:	089b      	lsrpl	r3, r3, #2
 8015aae:	2001      	movmi	r0, #1
 8015ab0:	600b      	strmi	r3, [r1, #0]
 8015ab2:	bf5c      	itt	pl
 8015ab4:	600b      	strpl	r3, [r1, #0]
 8015ab6:	2002      	movpl	r0, #2
 8015ab8:	4770      	bx	lr
 8015aba:	b298      	uxth	r0, r3
 8015abc:	b9a8      	cbnz	r0, 8015aea <__lo0bits+0x52>
 8015abe:	0c1b      	lsrs	r3, r3, #16
 8015ac0:	2010      	movs	r0, #16
 8015ac2:	b2da      	uxtb	r2, r3
 8015ac4:	b90a      	cbnz	r2, 8015aca <__lo0bits+0x32>
 8015ac6:	3008      	adds	r0, #8
 8015ac8:	0a1b      	lsrs	r3, r3, #8
 8015aca:	071a      	lsls	r2, r3, #28
 8015acc:	bf04      	itt	eq
 8015ace:	091b      	lsreq	r3, r3, #4
 8015ad0:	3004      	addeq	r0, #4
 8015ad2:	079a      	lsls	r2, r3, #30
 8015ad4:	bf04      	itt	eq
 8015ad6:	089b      	lsreq	r3, r3, #2
 8015ad8:	3002      	addeq	r0, #2
 8015ada:	07da      	lsls	r2, r3, #31
 8015adc:	d403      	bmi.n	8015ae6 <__lo0bits+0x4e>
 8015ade:	085b      	lsrs	r3, r3, #1
 8015ae0:	f100 0001 	add.w	r0, r0, #1
 8015ae4:	d005      	beq.n	8015af2 <__lo0bits+0x5a>
 8015ae6:	600b      	str	r3, [r1, #0]
 8015ae8:	4770      	bx	lr
 8015aea:	4610      	mov	r0, r2
 8015aec:	e7e9      	b.n	8015ac2 <__lo0bits+0x2a>
 8015aee:	2000      	movs	r0, #0
 8015af0:	4770      	bx	lr
 8015af2:	2020      	movs	r0, #32
 8015af4:	4770      	bx	lr
	...

08015af8 <__i2b>:
 8015af8:	b510      	push	{r4, lr}
 8015afa:	460c      	mov	r4, r1
 8015afc:	2101      	movs	r1, #1
 8015afe:	f7ff ff03 	bl	8015908 <_Balloc>
 8015b02:	4602      	mov	r2, r0
 8015b04:	b928      	cbnz	r0, 8015b12 <__i2b+0x1a>
 8015b06:	4b05      	ldr	r3, [pc, #20]	; (8015b1c <__i2b+0x24>)
 8015b08:	4805      	ldr	r0, [pc, #20]	; (8015b20 <__i2b+0x28>)
 8015b0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015b0e:	f000 fce1 	bl	80164d4 <__assert_func>
 8015b12:	2301      	movs	r3, #1
 8015b14:	6144      	str	r4, [r0, #20]
 8015b16:	6103      	str	r3, [r0, #16]
 8015b18:	bd10      	pop	{r4, pc}
 8015b1a:	bf00      	nop
 8015b1c:	08021a1f 	.word	0x08021a1f
 8015b20:	08021a30 	.word	0x08021a30

08015b24 <__multiply>:
 8015b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b28:	4691      	mov	r9, r2
 8015b2a:	690a      	ldr	r2, [r1, #16]
 8015b2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015b30:	429a      	cmp	r2, r3
 8015b32:	bfb8      	it	lt
 8015b34:	460b      	movlt	r3, r1
 8015b36:	460c      	mov	r4, r1
 8015b38:	bfbc      	itt	lt
 8015b3a:	464c      	movlt	r4, r9
 8015b3c:	4699      	movlt	r9, r3
 8015b3e:	6927      	ldr	r7, [r4, #16]
 8015b40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015b44:	68a3      	ldr	r3, [r4, #8]
 8015b46:	6861      	ldr	r1, [r4, #4]
 8015b48:	eb07 060a 	add.w	r6, r7, sl
 8015b4c:	42b3      	cmp	r3, r6
 8015b4e:	b085      	sub	sp, #20
 8015b50:	bfb8      	it	lt
 8015b52:	3101      	addlt	r1, #1
 8015b54:	f7ff fed8 	bl	8015908 <_Balloc>
 8015b58:	b930      	cbnz	r0, 8015b68 <__multiply+0x44>
 8015b5a:	4602      	mov	r2, r0
 8015b5c:	4b44      	ldr	r3, [pc, #272]	; (8015c70 <__multiply+0x14c>)
 8015b5e:	4845      	ldr	r0, [pc, #276]	; (8015c74 <__multiply+0x150>)
 8015b60:	f240 115d 	movw	r1, #349	; 0x15d
 8015b64:	f000 fcb6 	bl	80164d4 <__assert_func>
 8015b68:	f100 0514 	add.w	r5, r0, #20
 8015b6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015b70:	462b      	mov	r3, r5
 8015b72:	2200      	movs	r2, #0
 8015b74:	4543      	cmp	r3, r8
 8015b76:	d321      	bcc.n	8015bbc <__multiply+0x98>
 8015b78:	f104 0314 	add.w	r3, r4, #20
 8015b7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015b80:	f109 0314 	add.w	r3, r9, #20
 8015b84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015b88:	9202      	str	r2, [sp, #8]
 8015b8a:	1b3a      	subs	r2, r7, r4
 8015b8c:	3a15      	subs	r2, #21
 8015b8e:	f022 0203 	bic.w	r2, r2, #3
 8015b92:	3204      	adds	r2, #4
 8015b94:	f104 0115 	add.w	r1, r4, #21
 8015b98:	428f      	cmp	r7, r1
 8015b9a:	bf38      	it	cc
 8015b9c:	2204      	movcc	r2, #4
 8015b9e:	9201      	str	r2, [sp, #4]
 8015ba0:	9a02      	ldr	r2, [sp, #8]
 8015ba2:	9303      	str	r3, [sp, #12]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d80c      	bhi.n	8015bc2 <__multiply+0x9e>
 8015ba8:	2e00      	cmp	r6, #0
 8015baa:	dd03      	ble.n	8015bb4 <__multiply+0x90>
 8015bac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d05a      	beq.n	8015c6a <__multiply+0x146>
 8015bb4:	6106      	str	r6, [r0, #16]
 8015bb6:	b005      	add	sp, #20
 8015bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bbc:	f843 2b04 	str.w	r2, [r3], #4
 8015bc0:	e7d8      	b.n	8015b74 <__multiply+0x50>
 8015bc2:	f8b3 a000 	ldrh.w	sl, [r3]
 8015bc6:	f1ba 0f00 	cmp.w	sl, #0
 8015bca:	d024      	beq.n	8015c16 <__multiply+0xf2>
 8015bcc:	f104 0e14 	add.w	lr, r4, #20
 8015bd0:	46a9      	mov	r9, r5
 8015bd2:	f04f 0c00 	mov.w	ip, #0
 8015bd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015bda:	f8d9 1000 	ldr.w	r1, [r9]
 8015bde:	fa1f fb82 	uxth.w	fp, r2
 8015be2:	b289      	uxth	r1, r1
 8015be4:	fb0a 110b 	mla	r1, sl, fp, r1
 8015be8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015bec:	f8d9 2000 	ldr.w	r2, [r9]
 8015bf0:	4461      	add	r1, ip
 8015bf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015bf6:	fb0a c20b 	mla	r2, sl, fp, ip
 8015bfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015bfe:	b289      	uxth	r1, r1
 8015c00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015c04:	4577      	cmp	r7, lr
 8015c06:	f849 1b04 	str.w	r1, [r9], #4
 8015c0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015c0e:	d8e2      	bhi.n	8015bd6 <__multiply+0xb2>
 8015c10:	9a01      	ldr	r2, [sp, #4]
 8015c12:	f845 c002 	str.w	ip, [r5, r2]
 8015c16:	9a03      	ldr	r2, [sp, #12]
 8015c18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015c1c:	3304      	adds	r3, #4
 8015c1e:	f1b9 0f00 	cmp.w	r9, #0
 8015c22:	d020      	beq.n	8015c66 <__multiply+0x142>
 8015c24:	6829      	ldr	r1, [r5, #0]
 8015c26:	f104 0c14 	add.w	ip, r4, #20
 8015c2a:	46ae      	mov	lr, r5
 8015c2c:	f04f 0a00 	mov.w	sl, #0
 8015c30:	f8bc b000 	ldrh.w	fp, [ip]
 8015c34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015c38:	fb09 220b 	mla	r2, r9, fp, r2
 8015c3c:	4492      	add	sl, r2
 8015c3e:	b289      	uxth	r1, r1
 8015c40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015c44:	f84e 1b04 	str.w	r1, [lr], #4
 8015c48:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015c4c:	f8be 1000 	ldrh.w	r1, [lr]
 8015c50:	0c12      	lsrs	r2, r2, #16
 8015c52:	fb09 1102 	mla	r1, r9, r2, r1
 8015c56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015c5a:	4567      	cmp	r7, ip
 8015c5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015c60:	d8e6      	bhi.n	8015c30 <__multiply+0x10c>
 8015c62:	9a01      	ldr	r2, [sp, #4]
 8015c64:	50a9      	str	r1, [r5, r2]
 8015c66:	3504      	adds	r5, #4
 8015c68:	e79a      	b.n	8015ba0 <__multiply+0x7c>
 8015c6a:	3e01      	subs	r6, #1
 8015c6c:	e79c      	b.n	8015ba8 <__multiply+0x84>
 8015c6e:	bf00      	nop
 8015c70:	08021a1f 	.word	0x08021a1f
 8015c74:	08021a30 	.word	0x08021a30

08015c78 <__pow5mult>:
 8015c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c7c:	4615      	mov	r5, r2
 8015c7e:	f012 0203 	ands.w	r2, r2, #3
 8015c82:	4606      	mov	r6, r0
 8015c84:	460f      	mov	r7, r1
 8015c86:	d007      	beq.n	8015c98 <__pow5mult+0x20>
 8015c88:	4c25      	ldr	r4, [pc, #148]	; (8015d20 <__pow5mult+0xa8>)
 8015c8a:	3a01      	subs	r2, #1
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015c92:	f7ff fe9b 	bl	80159cc <__multadd>
 8015c96:	4607      	mov	r7, r0
 8015c98:	10ad      	asrs	r5, r5, #2
 8015c9a:	d03d      	beq.n	8015d18 <__pow5mult+0xa0>
 8015c9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015c9e:	b97c      	cbnz	r4, 8015cc0 <__pow5mult+0x48>
 8015ca0:	2010      	movs	r0, #16
 8015ca2:	f7ff fe1b 	bl	80158dc <malloc>
 8015ca6:	4602      	mov	r2, r0
 8015ca8:	6270      	str	r0, [r6, #36]	; 0x24
 8015caa:	b928      	cbnz	r0, 8015cb8 <__pow5mult+0x40>
 8015cac:	4b1d      	ldr	r3, [pc, #116]	; (8015d24 <__pow5mult+0xac>)
 8015cae:	481e      	ldr	r0, [pc, #120]	; (8015d28 <__pow5mult+0xb0>)
 8015cb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015cb4:	f000 fc0e 	bl	80164d4 <__assert_func>
 8015cb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015cbc:	6004      	str	r4, [r0, #0]
 8015cbe:	60c4      	str	r4, [r0, #12]
 8015cc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015cc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015cc8:	b94c      	cbnz	r4, 8015cde <__pow5mult+0x66>
 8015cca:	f240 2171 	movw	r1, #625	; 0x271
 8015cce:	4630      	mov	r0, r6
 8015cd0:	f7ff ff12 	bl	8015af8 <__i2b>
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8015cda:	4604      	mov	r4, r0
 8015cdc:	6003      	str	r3, [r0, #0]
 8015cde:	f04f 0900 	mov.w	r9, #0
 8015ce2:	07eb      	lsls	r3, r5, #31
 8015ce4:	d50a      	bpl.n	8015cfc <__pow5mult+0x84>
 8015ce6:	4639      	mov	r1, r7
 8015ce8:	4622      	mov	r2, r4
 8015cea:	4630      	mov	r0, r6
 8015cec:	f7ff ff1a 	bl	8015b24 <__multiply>
 8015cf0:	4639      	mov	r1, r7
 8015cf2:	4680      	mov	r8, r0
 8015cf4:	4630      	mov	r0, r6
 8015cf6:	f7ff fe47 	bl	8015988 <_Bfree>
 8015cfa:	4647      	mov	r7, r8
 8015cfc:	106d      	asrs	r5, r5, #1
 8015cfe:	d00b      	beq.n	8015d18 <__pow5mult+0xa0>
 8015d00:	6820      	ldr	r0, [r4, #0]
 8015d02:	b938      	cbnz	r0, 8015d14 <__pow5mult+0x9c>
 8015d04:	4622      	mov	r2, r4
 8015d06:	4621      	mov	r1, r4
 8015d08:	4630      	mov	r0, r6
 8015d0a:	f7ff ff0b 	bl	8015b24 <__multiply>
 8015d0e:	6020      	str	r0, [r4, #0]
 8015d10:	f8c0 9000 	str.w	r9, [r0]
 8015d14:	4604      	mov	r4, r0
 8015d16:	e7e4      	b.n	8015ce2 <__pow5mult+0x6a>
 8015d18:	4638      	mov	r0, r7
 8015d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d1e:	bf00      	nop
 8015d20:	08021b80 	.word	0x08021b80
 8015d24:	080219ad 	.word	0x080219ad
 8015d28:	08021a30 	.word	0x08021a30

08015d2c <__lshift>:
 8015d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d30:	460c      	mov	r4, r1
 8015d32:	6849      	ldr	r1, [r1, #4]
 8015d34:	6923      	ldr	r3, [r4, #16]
 8015d36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015d3a:	68a3      	ldr	r3, [r4, #8]
 8015d3c:	4607      	mov	r7, r0
 8015d3e:	4691      	mov	r9, r2
 8015d40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015d44:	f108 0601 	add.w	r6, r8, #1
 8015d48:	42b3      	cmp	r3, r6
 8015d4a:	db0b      	blt.n	8015d64 <__lshift+0x38>
 8015d4c:	4638      	mov	r0, r7
 8015d4e:	f7ff fddb 	bl	8015908 <_Balloc>
 8015d52:	4605      	mov	r5, r0
 8015d54:	b948      	cbnz	r0, 8015d6a <__lshift+0x3e>
 8015d56:	4602      	mov	r2, r0
 8015d58:	4b2a      	ldr	r3, [pc, #168]	; (8015e04 <__lshift+0xd8>)
 8015d5a:	482b      	ldr	r0, [pc, #172]	; (8015e08 <__lshift+0xdc>)
 8015d5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015d60:	f000 fbb8 	bl	80164d4 <__assert_func>
 8015d64:	3101      	adds	r1, #1
 8015d66:	005b      	lsls	r3, r3, #1
 8015d68:	e7ee      	b.n	8015d48 <__lshift+0x1c>
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	f100 0114 	add.w	r1, r0, #20
 8015d70:	f100 0210 	add.w	r2, r0, #16
 8015d74:	4618      	mov	r0, r3
 8015d76:	4553      	cmp	r3, sl
 8015d78:	db37      	blt.n	8015dea <__lshift+0xbe>
 8015d7a:	6920      	ldr	r0, [r4, #16]
 8015d7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d80:	f104 0314 	add.w	r3, r4, #20
 8015d84:	f019 091f 	ands.w	r9, r9, #31
 8015d88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015d8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015d90:	d02f      	beq.n	8015df2 <__lshift+0xc6>
 8015d92:	f1c9 0e20 	rsb	lr, r9, #32
 8015d96:	468a      	mov	sl, r1
 8015d98:	f04f 0c00 	mov.w	ip, #0
 8015d9c:	681a      	ldr	r2, [r3, #0]
 8015d9e:	fa02 f209 	lsl.w	r2, r2, r9
 8015da2:	ea42 020c 	orr.w	r2, r2, ip
 8015da6:	f84a 2b04 	str.w	r2, [sl], #4
 8015daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dae:	4298      	cmp	r0, r3
 8015db0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015db4:	d8f2      	bhi.n	8015d9c <__lshift+0x70>
 8015db6:	1b03      	subs	r3, r0, r4
 8015db8:	3b15      	subs	r3, #21
 8015dba:	f023 0303 	bic.w	r3, r3, #3
 8015dbe:	3304      	adds	r3, #4
 8015dc0:	f104 0215 	add.w	r2, r4, #21
 8015dc4:	4290      	cmp	r0, r2
 8015dc6:	bf38      	it	cc
 8015dc8:	2304      	movcc	r3, #4
 8015dca:	f841 c003 	str.w	ip, [r1, r3]
 8015dce:	f1bc 0f00 	cmp.w	ip, #0
 8015dd2:	d001      	beq.n	8015dd8 <__lshift+0xac>
 8015dd4:	f108 0602 	add.w	r6, r8, #2
 8015dd8:	3e01      	subs	r6, #1
 8015dda:	4638      	mov	r0, r7
 8015ddc:	612e      	str	r6, [r5, #16]
 8015dde:	4621      	mov	r1, r4
 8015de0:	f7ff fdd2 	bl	8015988 <_Bfree>
 8015de4:	4628      	mov	r0, r5
 8015de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dea:	f842 0f04 	str.w	r0, [r2, #4]!
 8015dee:	3301      	adds	r3, #1
 8015df0:	e7c1      	b.n	8015d76 <__lshift+0x4a>
 8015df2:	3904      	subs	r1, #4
 8015df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015df8:	f841 2f04 	str.w	r2, [r1, #4]!
 8015dfc:	4298      	cmp	r0, r3
 8015dfe:	d8f9      	bhi.n	8015df4 <__lshift+0xc8>
 8015e00:	e7ea      	b.n	8015dd8 <__lshift+0xac>
 8015e02:	bf00      	nop
 8015e04:	08021a1f 	.word	0x08021a1f
 8015e08:	08021a30 	.word	0x08021a30

08015e0c <__mcmp>:
 8015e0c:	b530      	push	{r4, r5, lr}
 8015e0e:	6902      	ldr	r2, [r0, #16]
 8015e10:	690c      	ldr	r4, [r1, #16]
 8015e12:	1b12      	subs	r2, r2, r4
 8015e14:	d10e      	bne.n	8015e34 <__mcmp+0x28>
 8015e16:	f100 0314 	add.w	r3, r0, #20
 8015e1a:	3114      	adds	r1, #20
 8015e1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015e20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015e24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015e28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015e2c:	42a5      	cmp	r5, r4
 8015e2e:	d003      	beq.n	8015e38 <__mcmp+0x2c>
 8015e30:	d305      	bcc.n	8015e3e <__mcmp+0x32>
 8015e32:	2201      	movs	r2, #1
 8015e34:	4610      	mov	r0, r2
 8015e36:	bd30      	pop	{r4, r5, pc}
 8015e38:	4283      	cmp	r3, r0
 8015e3a:	d3f3      	bcc.n	8015e24 <__mcmp+0x18>
 8015e3c:	e7fa      	b.n	8015e34 <__mcmp+0x28>
 8015e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8015e42:	e7f7      	b.n	8015e34 <__mcmp+0x28>

08015e44 <__mdiff>:
 8015e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e48:	460c      	mov	r4, r1
 8015e4a:	4606      	mov	r6, r0
 8015e4c:	4611      	mov	r1, r2
 8015e4e:	4620      	mov	r0, r4
 8015e50:	4690      	mov	r8, r2
 8015e52:	f7ff ffdb 	bl	8015e0c <__mcmp>
 8015e56:	1e05      	subs	r5, r0, #0
 8015e58:	d110      	bne.n	8015e7c <__mdiff+0x38>
 8015e5a:	4629      	mov	r1, r5
 8015e5c:	4630      	mov	r0, r6
 8015e5e:	f7ff fd53 	bl	8015908 <_Balloc>
 8015e62:	b930      	cbnz	r0, 8015e72 <__mdiff+0x2e>
 8015e64:	4b3a      	ldr	r3, [pc, #232]	; (8015f50 <__mdiff+0x10c>)
 8015e66:	4602      	mov	r2, r0
 8015e68:	f240 2132 	movw	r1, #562	; 0x232
 8015e6c:	4839      	ldr	r0, [pc, #228]	; (8015f54 <__mdiff+0x110>)
 8015e6e:	f000 fb31 	bl	80164d4 <__assert_func>
 8015e72:	2301      	movs	r3, #1
 8015e74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e7c:	bfa4      	itt	ge
 8015e7e:	4643      	movge	r3, r8
 8015e80:	46a0      	movge	r8, r4
 8015e82:	4630      	mov	r0, r6
 8015e84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015e88:	bfa6      	itte	ge
 8015e8a:	461c      	movge	r4, r3
 8015e8c:	2500      	movge	r5, #0
 8015e8e:	2501      	movlt	r5, #1
 8015e90:	f7ff fd3a 	bl	8015908 <_Balloc>
 8015e94:	b920      	cbnz	r0, 8015ea0 <__mdiff+0x5c>
 8015e96:	4b2e      	ldr	r3, [pc, #184]	; (8015f50 <__mdiff+0x10c>)
 8015e98:	4602      	mov	r2, r0
 8015e9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015e9e:	e7e5      	b.n	8015e6c <__mdiff+0x28>
 8015ea0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015ea4:	6926      	ldr	r6, [r4, #16]
 8015ea6:	60c5      	str	r5, [r0, #12]
 8015ea8:	f104 0914 	add.w	r9, r4, #20
 8015eac:	f108 0514 	add.w	r5, r8, #20
 8015eb0:	f100 0e14 	add.w	lr, r0, #20
 8015eb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015eb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015ebc:	f108 0210 	add.w	r2, r8, #16
 8015ec0:	46f2      	mov	sl, lr
 8015ec2:	2100      	movs	r1, #0
 8015ec4:	f859 3b04 	ldr.w	r3, [r9], #4
 8015ec8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015ecc:	fa1f f883 	uxth.w	r8, r3
 8015ed0:	fa11 f18b 	uxtah	r1, r1, fp
 8015ed4:	0c1b      	lsrs	r3, r3, #16
 8015ed6:	eba1 0808 	sub.w	r8, r1, r8
 8015eda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015ede:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015ee2:	fa1f f888 	uxth.w	r8, r8
 8015ee6:	1419      	asrs	r1, r3, #16
 8015ee8:	454e      	cmp	r6, r9
 8015eea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015eee:	f84a 3b04 	str.w	r3, [sl], #4
 8015ef2:	d8e7      	bhi.n	8015ec4 <__mdiff+0x80>
 8015ef4:	1b33      	subs	r3, r6, r4
 8015ef6:	3b15      	subs	r3, #21
 8015ef8:	f023 0303 	bic.w	r3, r3, #3
 8015efc:	3304      	adds	r3, #4
 8015efe:	3415      	adds	r4, #21
 8015f00:	42a6      	cmp	r6, r4
 8015f02:	bf38      	it	cc
 8015f04:	2304      	movcc	r3, #4
 8015f06:	441d      	add	r5, r3
 8015f08:	4473      	add	r3, lr
 8015f0a:	469e      	mov	lr, r3
 8015f0c:	462e      	mov	r6, r5
 8015f0e:	4566      	cmp	r6, ip
 8015f10:	d30e      	bcc.n	8015f30 <__mdiff+0xec>
 8015f12:	f10c 0203 	add.w	r2, ip, #3
 8015f16:	1b52      	subs	r2, r2, r5
 8015f18:	f022 0203 	bic.w	r2, r2, #3
 8015f1c:	3d03      	subs	r5, #3
 8015f1e:	45ac      	cmp	ip, r5
 8015f20:	bf38      	it	cc
 8015f22:	2200      	movcc	r2, #0
 8015f24:	441a      	add	r2, r3
 8015f26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015f2a:	b17b      	cbz	r3, 8015f4c <__mdiff+0x108>
 8015f2c:	6107      	str	r7, [r0, #16]
 8015f2e:	e7a3      	b.n	8015e78 <__mdiff+0x34>
 8015f30:	f856 8b04 	ldr.w	r8, [r6], #4
 8015f34:	fa11 f288 	uxtah	r2, r1, r8
 8015f38:	1414      	asrs	r4, r2, #16
 8015f3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015f3e:	b292      	uxth	r2, r2
 8015f40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015f44:	f84e 2b04 	str.w	r2, [lr], #4
 8015f48:	1421      	asrs	r1, r4, #16
 8015f4a:	e7e0      	b.n	8015f0e <__mdiff+0xca>
 8015f4c:	3f01      	subs	r7, #1
 8015f4e:	e7ea      	b.n	8015f26 <__mdiff+0xe2>
 8015f50:	08021a1f 	.word	0x08021a1f
 8015f54:	08021a30 	.word	0x08021a30

08015f58 <__d2b>:
 8015f58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f5c:	4689      	mov	r9, r1
 8015f5e:	2101      	movs	r1, #1
 8015f60:	ec57 6b10 	vmov	r6, r7, d0
 8015f64:	4690      	mov	r8, r2
 8015f66:	f7ff fccf 	bl	8015908 <_Balloc>
 8015f6a:	4604      	mov	r4, r0
 8015f6c:	b930      	cbnz	r0, 8015f7c <__d2b+0x24>
 8015f6e:	4602      	mov	r2, r0
 8015f70:	4b25      	ldr	r3, [pc, #148]	; (8016008 <__d2b+0xb0>)
 8015f72:	4826      	ldr	r0, [pc, #152]	; (801600c <__d2b+0xb4>)
 8015f74:	f240 310a 	movw	r1, #778	; 0x30a
 8015f78:	f000 faac 	bl	80164d4 <__assert_func>
 8015f7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015f80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015f84:	bb35      	cbnz	r5, 8015fd4 <__d2b+0x7c>
 8015f86:	2e00      	cmp	r6, #0
 8015f88:	9301      	str	r3, [sp, #4]
 8015f8a:	d028      	beq.n	8015fde <__d2b+0x86>
 8015f8c:	4668      	mov	r0, sp
 8015f8e:	9600      	str	r6, [sp, #0]
 8015f90:	f7ff fd82 	bl	8015a98 <__lo0bits>
 8015f94:	9900      	ldr	r1, [sp, #0]
 8015f96:	b300      	cbz	r0, 8015fda <__d2b+0x82>
 8015f98:	9a01      	ldr	r2, [sp, #4]
 8015f9a:	f1c0 0320 	rsb	r3, r0, #32
 8015f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8015fa2:	430b      	orrs	r3, r1
 8015fa4:	40c2      	lsrs	r2, r0
 8015fa6:	6163      	str	r3, [r4, #20]
 8015fa8:	9201      	str	r2, [sp, #4]
 8015faa:	9b01      	ldr	r3, [sp, #4]
 8015fac:	61a3      	str	r3, [r4, #24]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	bf14      	ite	ne
 8015fb2:	2202      	movne	r2, #2
 8015fb4:	2201      	moveq	r2, #1
 8015fb6:	6122      	str	r2, [r4, #16]
 8015fb8:	b1d5      	cbz	r5, 8015ff0 <__d2b+0x98>
 8015fba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015fbe:	4405      	add	r5, r0
 8015fc0:	f8c9 5000 	str.w	r5, [r9]
 8015fc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015fc8:	f8c8 0000 	str.w	r0, [r8]
 8015fcc:	4620      	mov	r0, r4
 8015fce:	b003      	add	sp, #12
 8015fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015fd8:	e7d5      	b.n	8015f86 <__d2b+0x2e>
 8015fda:	6161      	str	r1, [r4, #20]
 8015fdc:	e7e5      	b.n	8015faa <__d2b+0x52>
 8015fde:	a801      	add	r0, sp, #4
 8015fe0:	f7ff fd5a 	bl	8015a98 <__lo0bits>
 8015fe4:	9b01      	ldr	r3, [sp, #4]
 8015fe6:	6163      	str	r3, [r4, #20]
 8015fe8:	2201      	movs	r2, #1
 8015fea:	6122      	str	r2, [r4, #16]
 8015fec:	3020      	adds	r0, #32
 8015fee:	e7e3      	b.n	8015fb8 <__d2b+0x60>
 8015ff0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015ff4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015ff8:	f8c9 0000 	str.w	r0, [r9]
 8015ffc:	6918      	ldr	r0, [r3, #16]
 8015ffe:	f7ff fd2b 	bl	8015a58 <__hi0bits>
 8016002:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016006:	e7df      	b.n	8015fc8 <__d2b+0x70>
 8016008:	08021a1f 	.word	0x08021a1f
 801600c:	08021a30 	.word	0x08021a30

08016010 <_calloc_r>:
 8016010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016012:	fba1 2402 	umull	r2, r4, r1, r2
 8016016:	b94c      	cbnz	r4, 801602c <_calloc_r+0x1c>
 8016018:	4611      	mov	r1, r2
 801601a:	9201      	str	r2, [sp, #4]
 801601c:	f000 f87a 	bl	8016114 <_malloc_r>
 8016020:	9a01      	ldr	r2, [sp, #4]
 8016022:	4605      	mov	r5, r0
 8016024:	b930      	cbnz	r0, 8016034 <_calloc_r+0x24>
 8016026:	4628      	mov	r0, r5
 8016028:	b003      	add	sp, #12
 801602a:	bd30      	pop	{r4, r5, pc}
 801602c:	220c      	movs	r2, #12
 801602e:	6002      	str	r2, [r0, #0]
 8016030:	2500      	movs	r5, #0
 8016032:	e7f8      	b.n	8016026 <_calloc_r+0x16>
 8016034:	4621      	mov	r1, r4
 8016036:	f7fe f93f 	bl	80142b8 <memset>
 801603a:	e7f4      	b.n	8016026 <_calloc_r+0x16>

0801603c <_free_r>:
 801603c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801603e:	2900      	cmp	r1, #0
 8016040:	d044      	beq.n	80160cc <_free_r+0x90>
 8016042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016046:	9001      	str	r0, [sp, #4]
 8016048:	2b00      	cmp	r3, #0
 801604a:	f1a1 0404 	sub.w	r4, r1, #4
 801604e:	bfb8      	it	lt
 8016050:	18e4      	addlt	r4, r4, r3
 8016052:	f000 fa9b 	bl	801658c <__malloc_lock>
 8016056:	4a1e      	ldr	r2, [pc, #120]	; (80160d0 <_free_r+0x94>)
 8016058:	9801      	ldr	r0, [sp, #4]
 801605a:	6813      	ldr	r3, [r2, #0]
 801605c:	b933      	cbnz	r3, 801606c <_free_r+0x30>
 801605e:	6063      	str	r3, [r4, #4]
 8016060:	6014      	str	r4, [r2, #0]
 8016062:	b003      	add	sp, #12
 8016064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016068:	f000 ba96 	b.w	8016598 <__malloc_unlock>
 801606c:	42a3      	cmp	r3, r4
 801606e:	d908      	bls.n	8016082 <_free_r+0x46>
 8016070:	6825      	ldr	r5, [r4, #0]
 8016072:	1961      	adds	r1, r4, r5
 8016074:	428b      	cmp	r3, r1
 8016076:	bf01      	itttt	eq
 8016078:	6819      	ldreq	r1, [r3, #0]
 801607a:	685b      	ldreq	r3, [r3, #4]
 801607c:	1949      	addeq	r1, r1, r5
 801607e:	6021      	streq	r1, [r4, #0]
 8016080:	e7ed      	b.n	801605e <_free_r+0x22>
 8016082:	461a      	mov	r2, r3
 8016084:	685b      	ldr	r3, [r3, #4]
 8016086:	b10b      	cbz	r3, 801608c <_free_r+0x50>
 8016088:	42a3      	cmp	r3, r4
 801608a:	d9fa      	bls.n	8016082 <_free_r+0x46>
 801608c:	6811      	ldr	r1, [r2, #0]
 801608e:	1855      	adds	r5, r2, r1
 8016090:	42a5      	cmp	r5, r4
 8016092:	d10b      	bne.n	80160ac <_free_r+0x70>
 8016094:	6824      	ldr	r4, [r4, #0]
 8016096:	4421      	add	r1, r4
 8016098:	1854      	adds	r4, r2, r1
 801609a:	42a3      	cmp	r3, r4
 801609c:	6011      	str	r1, [r2, #0]
 801609e:	d1e0      	bne.n	8016062 <_free_r+0x26>
 80160a0:	681c      	ldr	r4, [r3, #0]
 80160a2:	685b      	ldr	r3, [r3, #4]
 80160a4:	6053      	str	r3, [r2, #4]
 80160a6:	4421      	add	r1, r4
 80160a8:	6011      	str	r1, [r2, #0]
 80160aa:	e7da      	b.n	8016062 <_free_r+0x26>
 80160ac:	d902      	bls.n	80160b4 <_free_r+0x78>
 80160ae:	230c      	movs	r3, #12
 80160b0:	6003      	str	r3, [r0, #0]
 80160b2:	e7d6      	b.n	8016062 <_free_r+0x26>
 80160b4:	6825      	ldr	r5, [r4, #0]
 80160b6:	1961      	adds	r1, r4, r5
 80160b8:	428b      	cmp	r3, r1
 80160ba:	bf04      	itt	eq
 80160bc:	6819      	ldreq	r1, [r3, #0]
 80160be:	685b      	ldreq	r3, [r3, #4]
 80160c0:	6063      	str	r3, [r4, #4]
 80160c2:	bf04      	itt	eq
 80160c4:	1949      	addeq	r1, r1, r5
 80160c6:	6021      	streq	r1, [r4, #0]
 80160c8:	6054      	str	r4, [r2, #4]
 80160ca:	e7ca      	b.n	8016062 <_free_r+0x26>
 80160cc:	b003      	add	sp, #12
 80160ce:	bd30      	pop	{r4, r5, pc}
 80160d0:	20000510 	.word	0x20000510

080160d4 <sbrk_aligned>:
 80160d4:	b570      	push	{r4, r5, r6, lr}
 80160d6:	4e0e      	ldr	r6, [pc, #56]	; (8016110 <sbrk_aligned+0x3c>)
 80160d8:	460c      	mov	r4, r1
 80160da:	6831      	ldr	r1, [r6, #0]
 80160dc:	4605      	mov	r5, r0
 80160de:	b911      	cbnz	r1, 80160e6 <sbrk_aligned+0x12>
 80160e0:	f000 f9e8 	bl	80164b4 <_sbrk_r>
 80160e4:	6030      	str	r0, [r6, #0]
 80160e6:	4621      	mov	r1, r4
 80160e8:	4628      	mov	r0, r5
 80160ea:	f000 f9e3 	bl	80164b4 <_sbrk_r>
 80160ee:	1c43      	adds	r3, r0, #1
 80160f0:	d00a      	beq.n	8016108 <sbrk_aligned+0x34>
 80160f2:	1cc4      	adds	r4, r0, #3
 80160f4:	f024 0403 	bic.w	r4, r4, #3
 80160f8:	42a0      	cmp	r0, r4
 80160fa:	d007      	beq.n	801610c <sbrk_aligned+0x38>
 80160fc:	1a21      	subs	r1, r4, r0
 80160fe:	4628      	mov	r0, r5
 8016100:	f000 f9d8 	bl	80164b4 <_sbrk_r>
 8016104:	3001      	adds	r0, #1
 8016106:	d101      	bne.n	801610c <sbrk_aligned+0x38>
 8016108:	f04f 34ff 	mov.w	r4, #4294967295
 801610c:	4620      	mov	r0, r4
 801610e:	bd70      	pop	{r4, r5, r6, pc}
 8016110:	20000514 	.word	0x20000514

08016114 <_malloc_r>:
 8016114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016118:	1ccd      	adds	r5, r1, #3
 801611a:	f025 0503 	bic.w	r5, r5, #3
 801611e:	3508      	adds	r5, #8
 8016120:	2d0c      	cmp	r5, #12
 8016122:	bf38      	it	cc
 8016124:	250c      	movcc	r5, #12
 8016126:	2d00      	cmp	r5, #0
 8016128:	4607      	mov	r7, r0
 801612a:	db01      	blt.n	8016130 <_malloc_r+0x1c>
 801612c:	42a9      	cmp	r1, r5
 801612e:	d905      	bls.n	801613c <_malloc_r+0x28>
 8016130:	230c      	movs	r3, #12
 8016132:	603b      	str	r3, [r7, #0]
 8016134:	2600      	movs	r6, #0
 8016136:	4630      	mov	r0, r6
 8016138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801613c:	4e2e      	ldr	r6, [pc, #184]	; (80161f8 <_malloc_r+0xe4>)
 801613e:	f000 fa25 	bl	801658c <__malloc_lock>
 8016142:	6833      	ldr	r3, [r6, #0]
 8016144:	461c      	mov	r4, r3
 8016146:	bb34      	cbnz	r4, 8016196 <_malloc_r+0x82>
 8016148:	4629      	mov	r1, r5
 801614a:	4638      	mov	r0, r7
 801614c:	f7ff ffc2 	bl	80160d4 <sbrk_aligned>
 8016150:	1c43      	adds	r3, r0, #1
 8016152:	4604      	mov	r4, r0
 8016154:	d14d      	bne.n	80161f2 <_malloc_r+0xde>
 8016156:	6834      	ldr	r4, [r6, #0]
 8016158:	4626      	mov	r6, r4
 801615a:	2e00      	cmp	r6, #0
 801615c:	d140      	bne.n	80161e0 <_malloc_r+0xcc>
 801615e:	6823      	ldr	r3, [r4, #0]
 8016160:	4631      	mov	r1, r6
 8016162:	4638      	mov	r0, r7
 8016164:	eb04 0803 	add.w	r8, r4, r3
 8016168:	f000 f9a4 	bl	80164b4 <_sbrk_r>
 801616c:	4580      	cmp	r8, r0
 801616e:	d13a      	bne.n	80161e6 <_malloc_r+0xd2>
 8016170:	6821      	ldr	r1, [r4, #0]
 8016172:	3503      	adds	r5, #3
 8016174:	1a6d      	subs	r5, r5, r1
 8016176:	f025 0503 	bic.w	r5, r5, #3
 801617a:	3508      	adds	r5, #8
 801617c:	2d0c      	cmp	r5, #12
 801617e:	bf38      	it	cc
 8016180:	250c      	movcc	r5, #12
 8016182:	4629      	mov	r1, r5
 8016184:	4638      	mov	r0, r7
 8016186:	f7ff ffa5 	bl	80160d4 <sbrk_aligned>
 801618a:	3001      	adds	r0, #1
 801618c:	d02b      	beq.n	80161e6 <_malloc_r+0xd2>
 801618e:	6823      	ldr	r3, [r4, #0]
 8016190:	442b      	add	r3, r5
 8016192:	6023      	str	r3, [r4, #0]
 8016194:	e00e      	b.n	80161b4 <_malloc_r+0xa0>
 8016196:	6822      	ldr	r2, [r4, #0]
 8016198:	1b52      	subs	r2, r2, r5
 801619a:	d41e      	bmi.n	80161da <_malloc_r+0xc6>
 801619c:	2a0b      	cmp	r2, #11
 801619e:	d916      	bls.n	80161ce <_malloc_r+0xba>
 80161a0:	1961      	adds	r1, r4, r5
 80161a2:	42a3      	cmp	r3, r4
 80161a4:	6025      	str	r5, [r4, #0]
 80161a6:	bf18      	it	ne
 80161a8:	6059      	strne	r1, [r3, #4]
 80161aa:	6863      	ldr	r3, [r4, #4]
 80161ac:	bf08      	it	eq
 80161ae:	6031      	streq	r1, [r6, #0]
 80161b0:	5162      	str	r2, [r4, r5]
 80161b2:	604b      	str	r3, [r1, #4]
 80161b4:	4638      	mov	r0, r7
 80161b6:	f104 060b 	add.w	r6, r4, #11
 80161ba:	f000 f9ed 	bl	8016598 <__malloc_unlock>
 80161be:	f026 0607 	bic.w	r6, r6, #7
 80161c2:	1d23      	adds	r3, r4, #4
 80161c4:	1af2      	subs	r2, r6, r3
 80161c6:	d0b6      	beq.n	8016136 <_malloc_r+0x22>
 80161c8:	1b9b      	subs	r3, r3, r6
 80161ca:	50a3      	str	r3, [r4, r2]
 80161cc:	e7b3      	b.n	8016136 <_malloc_r+0x22>
 80161ce:	6862      	ldr	r2, [r4, #4]
 80161d0:	42a3      	cmp	r3, r4
 80161d2:	bf0c      	ite	eq
 80161d4:	6032      	streq	r2, [r6, #0]
 80161d6:	605a      	strne	r2, [r3, #4]
 80161d8:	e7ec      	b.n	80161b4 <_malloc_r+0xa0>
 80161da:	4623      	mov	r3, r4
 80161dc:	6864      	ldr	r4, [r4, #4]
 80161de:	e7b2      	b.n	8016146 <_malloc_r+0x32>
 80161e0:	4634      	mov	r4, r6
 80161e2:	6876      	ldr	r6, [r6, #4]
 80161e4:	e7b9      	b.n	801615a <_malloc_r+0x46>
 80161e6:	230c      	movs	r3, #12
 80161e8:	603b      	str	r3, [r7, #0]
 80161ea:	4638      	mov	r0, r7
 80161ec:	f000 f9d4 	bl	8016598 <__malloc_unlock>
 80161f0:	e7a1      	b.n	8016136 <_malloc_r+0x22>
 80161f2:	6025      	str	r5, [r4, #0]
 80161f4:	e7de      	b.n	80161b4 <_malloc_r+0xa0>
 80161f6:	bf00      	nop
 80161f8:	20000510 	.word	0x20000510

080161fc <__ssputs_r>:
 80161fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016200:	688e      	ldr	r6, [r1, #8]
 8016202:	429e      	cmp	r6, r3
 8016204:	4682      	mov	sl, r0
 8016206:	460c      	mov	r4, r1
 8016208:	4690      	mov	r8, r2
 801620a:	461f      	mov	r7, r3
 801620c:	d838      	bhi.n	8016280 <__ssputs_r+0x84>
 801620e:	898a      	ldrh	r2, [r1, #12]
 8016210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016214:	d032      	beq.n	801627c <__ssputs_r+0x80>
 8016216:	6825      	ldr	r5, [r4, #0]
 8016218:	6909      	ldr	r1, [r1, #16]
 801621a:	eba5 0901 	sub.w	r9, r5, r1
 801621e:	6965      	ldr	r5, [r4, #20]
 8016220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016228:	3301      	adds	r3, #1
 801622a:	444b      	add	r3, r9
 801622c:	106d      	asrs	r5, r5, #1
 801622e:	429d      	cmp	r5, r3
 8016230:	bf38      	it	cc
 8016232:	461d      	movcc	r5, r3
 8016234:	0553      	lsls	r3, r2, #21
 8016236:	d531      	bpl.n	801629c <__ssputs_r+0xa0>
 8016238:	4629      	mov	r1, r5
 801623a:	f7ff ff6b 	bl	8016114 <_malloc_r>
 801623e:	4606      	mov	r6, r0
 8016240:	b950      	cbnz	r0, 8016258 <__ssputs_r+0x5c>
 8016242:	230c      	movs	r3, #12
 8016244:	f8ca 3000 	str.w	r3, [sl]
 8016248:	89a3      	ldrh	r3, [r4, #12]
 801624a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801624e:	81a3      	strh	r3, [r4, #12]
 8016250:	f04f 30ff 	mov.w	r0, #4294967295
 8016254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016258:	6921      	ldr	r1, [r4, #16]
 801625a:	464a      	mov	r2, r9
 801625c:	f7ff fb46 	bl	80158ec <memcpy>
 8016260:	89a3      	ldrh	r3, [r4, #12]
 8016262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801626a:	81a3      	strh	r3, [r4, #12]
 801626c:	6126      	str	r6, [r4, #16]
 801626e:	6165      	str	r5, [r4, #20]
 8016270:	444e      	add	r6, r9
 8016272:	eba5 0509 	sub.w	r5, r5, r9
 8016276:	6026      	str	r6, [r4, #0]
 8016278:	60a5      	str	r5, [r4, #8]
 801627a:	463e      	mov	r6, r7
 801627c:	42be      	cmp	r6, r7
 801627e:	d900      	bls.n	8016282 <__ssputs_r+0x86>
 8016280:	463e      	mov	r6, r7
 8016282:	6820      	ldr	r0, [r4, #0]
 8016284:	4632      	mov	r2, r6
 8016286:	4641      	mov	r1, r8
 8016288:	f000 f966 	bl	8016558 <memmove>
 801628c:	68a3      	ldr	r3, [r4, #8]
 801628e:	1b9b      	subs	r3, r3, r6
 8016290:	60a3      	str	r3, [r4, #8]
 8016292:	6823      	ldr	r3, [r4, #0]
 8016294:	4433      	add	r3, r6
 8016296:	6023      	str	r3, [r4, #0]
 8016298:	2000      	movs	r0, #0
 801629a:	e7db      	b.n	8016254 <__ssputs_r+0x58>
 801629c:	462a      	mov	r2, r5
 801629e:	f000 f981 	bl	80165a4 <_realloc_r>
 80162a2:	4606      	mov	r6, r0
 80162a4:	2800      	cmp	r0, #0
 80162a6:	d1e1      	bne.n	801626c <__ssputs_r+0x70>
 80162a8:	6921      	ldr	r1, [r4, #16]
 80162aa:	4650      	mov	r0, sl
 80162ac:	f7ff fec6 	bl	801603c <_free_r>
 80162b0:	e7c7      	b.n	8016242 <__ssputs_r+0x46>
	...

080162b4 <_svfiprintf_r>:
 80162b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b8:	4698      	mov	r8, r3
 80162ba:	898b      	ldrh	r3, [r1, #12]
 80162bc:	061b      	lsls	r3, r3, #24
 80162be:	b09d      	sub	sp, #116	; 0x74
 80162c0:	4607      	mov	r7, r0
 80162c2:	460d      	mov	r5, r1
 80162c4:	4614      	mov	r4, r2
 80162c6:	d50e      	bpl.n	80162e6 <_svfiprintf_r+0x32>
 80162c8:	690b      	ldr	r3, [r1, #16]
 80162ca:	b963      	cbnz	r3, 80162e6 <_svfiprintf_r+0x32>
 80162cc:	2140      	movs	r1, #64	; 0x40
 80162ce:	f7ff ff21 	bl	8016114 <_malloc_r>
 80162d2:	6028      	str	r0, [r5, #0]
 80162d4:	6128      	str	r0, [r5, #16]
 80162d6:	b920      	cbnz	r0, 80162e2 <_svfiprintf_r+0x2e>
 80162d8:	230c      	movs	r3, #12
 80162da:	603b      	str	r3, [r7, #0]
 80162dc:	f04f 30ff 	mov.w	r0, #4294967295
 80162e0:	e0d1      	b.n	8016486 <_svfiprintf_r+0x1d2>
 80162e2:	2340      	movs	r3, #64	; 0x40
 80162e4:	616b      	str	r3, [r5, #20]
 80162e6:	2300      	movs	r3, #0
 80162e8:	9309      	str	r3, [sp, #36]	; 0x24
 80162ea:	2320      	movs	r3, #32
 80162ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80162f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80162f4:	2330      	movs	r3, #48	; 0x30
 80162f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80164a0 <_svfiprintf_r+0x1ec>
 80162fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80162fe:	f04f 0901 	mov.w	r9, #1
 8016302:	4623      	mov	r3, r4
 8016304:	469a      	mov	sl, r3
 8016306:	f813 2b01 	ldrb.w	r2, [r3], #1
 801630a:	b10a      	cbz	r2, 8016310 <_svfiprintf_r+0x5c>
 801630c:	2a25      	cmp	r2, #37	; 0x25
 801630e:	d1f9      	bne.n	8016304 <_svfiprintf_r+0x50>
 8016310:	ebba 0b04 	subs.w	fp, sl, r4
 8016314:	d00b      	beq.n	801632e <_svfiprintf_r+0x7a>
 8016316:	465b      	mov	r3, fp
 8016318:	4622      	mov	r2, r4
 801631a:	4629      	mov	r1, r5
 801631c:	4638      	mov	r0, r7
 801631e:	f7ff ff6d 	bl	80161fc <__ssputs_r>
 8016322:	3001      	adds	r0, #1
 8016324:	f000 80aa 	beq.w	801647c <_svfiprintf_r+0x1c8>
 8016328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801632a:	445a      	add	r2, fp
 801632c:	9209      	str	r2, [sp, #36]	; 0x24
 801632e:	f89a 3000 	ldrb.w	r3, [sl]
 8016332:	2b00      	cmp	r3, #0
 8016334:	f000 80a2 	beq.w	801647c <_svfiprintf_r+0x1c8>
 8016338:	2300      	movs	r3, #0
 801633a:	f04f 32ff 	mov.w	r2, #4294967295
 801633e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016342:	f10a 0a01 	add.w	sl, sl, #1
 8016346:	9304      	str	r3, [sp, #16]
 8016348:	9307      	str	r3, [sp, #28]
 801634a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801634e:	931a      	str	r3, [sp, #104]	; 0x68
 8016350:	4654      	mov	r4, sl
 8016352:	2205      	movs	r2, #5
 8016354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016358:	4851      	ldr	r0, [pc, #324]	; (80164a0 <_svfiprintf_r+0x1ec>)
 801635a:	f7f5 fe79 	bl	800c050 <memchr>
 801635e:	9a04      	ldr	r2, [sp, #16]
 8016360:	b9d8      	cbnz	r0, 801639a <_svfiprintf_r+0xe6>
 8016362:	06d0      	lsls	r0, r2, #27
 8016364:	bf44      	itt	mi
 8016366:	2320      	movmi	r3, #32
 8016368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801636c:	0711      	lsls	r1, r2, #28
 801636e:	bf44      	itt	mi
 8016370:	232b      	movmi	r3, #43	; 0x2b
 8016372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016376:	f89a 3000 	ldrb.w	r3, [sl]
 801637a:	2b2a      	cmp	r3, #42	; 0x2a
 801637c:	d015      	beq.n	80163aa <_svfiprintf_r+0xf6>
 801637e:	9a07      	ldr	r2, [sp, #28]
 8016380:	4654      	mov	r4, sl
 8016382:	2000      	movs	r0, #0
 8016384:	f04f 0c0a 	mov.w	ip, #10
 8016388:	4621      	mov	r1, r4
 801638a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801638e:	3b30      	subs	r3, #48	; 0x30
 8016390:	2b09      	cmp	r3, #9
 8016392:	d94e      	bls.n	8016432 <_svfiprintf_r+0x17e>
 8016394:	b1b0      	cbz	r0, 80163c4 <_svfiprintf_r+0x110>
 8016396:	9207      	str	r2, [sp, #28]
 8016398:	e014      	b.n	80163c4 <_svfiprintf_r+0x110>
 801639a:	eba0 0308 	sub.w	r3, r0, r8
 801639e:	fa09 f303 	lsl.w	r3, r9, r3
 80163a2:	4313      	orrs	r3, r2
 80163a4:	9304      	str	r3, [sp, #16]
 80163a6:	46a2      	mov	sl, r4
 80163a8:	e7d2      	b.n	8016350 <_svfiprintf_r+0x9c>
 80163aa:	9b03      	ldr	r3, [sp, #12]
 80163ac:	1d19      	adds	r1, r3, #4
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	9103      	str	r1, [sp, #12]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	bfbb      	ittet	lt
 80163b6:	425b      	neglt	r3, r3
 80163b8:	f042 0202 	orrlt.w	r2, r2, #2
 80163bc:	9307      	strge	r3, [sp, #28]
 80163be:	9307      	strlt	r3, [sp, #28]
 80163c0:	bfb8      	it	lt
 80163c2:	9204      	strlt	r2, [sp, #16]
 80163c4:	7823      	ldrb	r3, [r4, #0]
 80163c6:	2b2e      	cmp	r3, #46	; 0x2e
 80163c8:	d10c      	bne.n	80163e4 <_svfiprintf_r+0x130>
 80163ca:	7863      	ldrb	r3, [r4, #1]
 80163cc:	2b2a      	cmp	r3, #42	; 0x2a
 80163ce:	d135      	bne.n	801643c <_svfiprintf_r+0x188>
 80163d0:	9b03      	ldr	r3, [sp, #12]
 80163d2:	1d1a      	adds	r2, r3, #4
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	9203      	str	r2, [sp, #12]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	bfb8      	it	lt
 80163dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80163e0:	3402      	adds	r4, #2
 80163e2:	9305      	str	r3, [sp, #20]
 80163e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80164b0 <_svfiprintf_r+0x1fc>
 80163e8:	7821      	ldrb	r1, [r4, #0]
 80163ea:	2203      	movs	r2, #3
 80163ec:	4650      	mov	r0, sl
 80163ee:	f7f5 fe2f 	bl	800c050 <memchr>
 80163f2:	b140      	cbz	r0, 8016406 <_svfiprintf_r+0x152>
 80163f4:	2340      	movs	r3, #64	; 0x40
 80163f6:	eba0 000a 	sub.w	r0, r0, sl
 80163fa:	fa03 f000 	lsl.w	r0, r3, r0
 80163fe:	9b04      	ldr	r3, [sp, #16]
 8016400:	4303      	orrs	r3, r0
 8016402:	3401      	adds	r4, #1
 8016404:	9304      	str	r3, [sp, #16]
 8016406:	f814 1b01 	ldrb.w	r1, [r4], #1
 801640a:	4826      	ldr	r0, [pc, #152]	; (80164a4 <_svfiprintf_r+0x1f0>)
 801640c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016410:	2206      	movs	r2, #6
 8016412:	f7f5 fe1d 	bl	800c050 <memchr>
 8016416:	2800      	cmp	r0, #0
 8016418:	d038      	beq.n	801648c <_svfiprintf_r+0x1d8>
 801641a:	4b23      	ldr	r3, [pc, #140]	; (80164a8 <_svfiprintf_r+0x1f4>)
 801641c:	bb1b      	cbnz	r3, 8016466 <_svfiprintf_r+0x1b2>
 801641e:	9b03      	ldr	r3, [sp, #12]
 8016420:	3307      	adds	r3, #7
 8016422:	f023 0307 	bic.w	r3, r3, #7
 8016426:	3308      	adds	r3, #8
 8016428:	9303      	str	r3, [sp, #12]
 801642a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801642c:	4433      	add	r3, r6
 801642e:	9309      	str	r3, [sp, #36]	; 0x24
 8016430:	e767      	b.n	8016302 <_svfiprintf_r+0x4e>
 8016432:	fb0c 3202 	mla	r2, ip, r2, r3
 8016436:	460c      	mov	r4, r1
 8016438:	2001      	movs	r0, #1
 801643a:	e7a5      	b.n	8016388 <_svfiprintf_r+0xd4>
 801643c:	2300      	movs	r3, #0
 801643e:	3401      	adds	r4, #1
 8016440:	9305      	str	r3, [sp, #20]
 8016442:	4619      	mov	r1, r3
 8016444:	f04f 0c0a 	mov.w	ip, #10
 8016448:	4620      	mov	r0, r4
 801644a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801644e:	3a30      	subs	r2, #48	; 0x30
 8016450:	2a09      	cmp	r2, #9
 8016452:	d903      	bls.n	801645c <_svfiprintf_r+0x1a8>
 8016454:	2b00      	cmp	r3, #0
 8016456:	d0c5      	beq.n	80163e4 <_svfiprintf_r+0x130>
 8016458:	9105      	str	r1, [sp, #20]
 801645a:	e7c3      	b.n	80163e4 <_svfiprintf_r+0x130>
 801645c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016460:	4604      	mov	r4, r0
 8016462:	2301      	movs	r3, #1
 8016464:	e7f0      	b.n	8016448 <_svfiprintf_r+0x194>
 8016466:	ab03      	add	r3, sp, #12
 8016468:	9300      	str	r3, [sp, #0]
 801646a:	462a      	mov	r2, r5
 801646c:	4b0f      	ldr	r3, [pc, #60]	; (80164ac <_svfiprintf_r+0x1f8>)
 801646e:	a904      	add	r1, sp, #16
 8016470:	4638      	mov	r0, r7
 8016472:	f7fd ffc9 	bl	8014408 <_printf_float>
 8016476:	1c42      	adds	r2, r0, #1
 8016478:	4606      	mov	r6, r0
 801647a:	d1d6      	bne.n	801642a <_svfiprintf_r+0x176>
 801647c:	89ab      	ldrh	r3, [r5, #12]
 801647e:	065b      	lsls	r3, r3, #25
 8016480:	f53f af2c 	bmi.w	80162dc <_svfiprintf_r+0x28>
 8016484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016486:	b01d      	add	sp, #116	; 0x74
 8016488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801648c:	ab03      	add	r3, sp, #12
 801648e:	9300      	str	r3, [sp, #0]
 8016490:	462a      	mov	r2, r5
 8016492:	4b06      	ldr	r3, [pc, #24]	; (80164ac <_svfiprintf_r+0x1f8>)
 8016494:	a904      	add	r1, sp, #16
 8016496:	4638      	mov	r0, r7
 8016498:	f7fe fa5a 	bl	8014950 <_printf_i>
 801649c:	e7eb      	b.n	8016476 <_svfiprintf_r+0x1c2>
 801649e:	bf00      	nop
 80164a0:	08021b8c 	.word	0x08021b8c
 80164a4:	08021b96 	.word	0x08021b96
 80164a8:	08014409 	.word	0x08014409
 80164ac:	080161fd 	.word	0x080161fd
 80164b0:	08021b92 	.word	0x08021b92

080164b4 <_sbrk_r>:
 80164b4:	b538      	push	{r3, r4, r5, lr}
 80164b6:	4d06      	ldr	r5, [pc, #24]	; (80164d0 <_sbrk_r+0x1c>)
 80164b8:	2300      	movs	r3, #0
 80164ba:	4604      	mov	r4, r0
 80164bc:	4608      	mov	r0, r1
 80164be:	602b      	str	r3, [r5, #0]
 80164c0:	f7fa fa0c 	bl	80108dc <_sbrk>
 80164c4:	1c43      	adds	r3, r0, #1
 80164c6:	d102      	bne.n	80164ce <_sbrk_r+0x1a>
 80164c8:	682b      	ldr	r3, [r5, #0]
 80164ca:	b103      	cbz	r3, 80164ce <_sbrk_r+0x1a>
 80164cc:	6023      	str	r3, [r4, #0]
 80164ce:	bd38      	pop	{r3, r4, r5, pc}
 80164d0:	20000518 	.word	0x20000518

080164d4 <__assert_func>:
 80164d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80164d6:	4614      	mov	r4, r2
 80164d8:	461a      	mov	r2, r3
 80164da:	4b09      	ldr	r3, [pc, #36]	; (8016500 <__assert_func+0x2c>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	4605      	mov	r5, r0
 80164e0:	68d8      	ldr	r0, [r3, #12]
 80164e2:	b14c      	cbz	r4, 80164f8 <__assert_func+0x24>
 80164e4:	4b07      	ldr	r3, [pc, #28]	; (8016504 <__assert_func+0x30>)
 80164e6:	9100      	str	r1, [sp, #0]
 80164e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80164ec:	4906      	ldr	r1, [pc, #24]	; (8016508 <__assert_func+0x34>)
 80164ee:	462b      	mov	r3, r5
 80164f0:	f000 f80e 	bl	8016510 <fiprintf>
 80164f4:	f000 faac 	bl	8016a50 <abort>
 80164f8:	4b04      	ldr	r3, [pc, #16]	; (801650c <__assert_func+0x38>)
 80164fa:	461c      	mov	r4, r3
 80164fc:	e7f3      	b.n	80164e6 <__assert_func+0x12>
 80164fe:	bf00      	nop
 8016500:	2000006c 	.word	0x2000006c
 8016504:	08021b9d 	.word	0x08021b9d
 8016508:	08021baa 	.word	0x08021baa
 801650c:	08021bd8 	.word	0x08021bd8

08016510 <fiprintf>:
 8016510:	b40e      	push	{r1, r2, r3}
 8016512:	b503      	push	{r0, r1, lr}
 8016514:	4601      	mov	r1, r0
 8016516:	ab03      	add	r3, sp, #12
 8016518:	4805      	ldr	r0, [pc, #20]	; (8016530 <fiprintf+0x20>)
 801651a:	f853 2b04 	ldr.w	r2, [r3], #4
 801651e:	6800      	ldr	r0, [r0, #0]
 8016520:	9301      	str	r3, [sp, #4]
 8016522:	f000 f897 	bl	8016654 <_vfiprintf_r>
 8016526:	b002      	add	sp, #8
 8016528:	f85d eb04 	ldr.w	lr, [sp], #4
 801652c:	b003      	add	sp, #12
 801652e:	4770      	bx	lr
 8016530:	2000006c 	.word	0x2000006c

08016534 <__ascii_mbtowc>:
 8016534:	b082      	sub	sp, #8
 8016536:	b901      	cbnz	r1, 801653a <__ascii_mbtowc+0x6>
 8016538:	a901      	add	r1, sp, #4
 801653a:	b142      	cbz	r2, 801654e <__ascii_mbtowc+0x1a>
 801653c:	b14b      	cbz	r3, 8016552 <__ascii_mbtowc+0x1e>
 801653e:	7813      	ldrb	r3, [r2, #0]
 8016540:	600b      	str	r3, [r1, #0]
 8016542:	7812      	ldrb	r2, [r2, #0]
 8016544:	1e10      	subs	r0, r2, #0
 8016546:	bf18      	it	ne
 8016548:	2001      	movne	r0, #1
 801654a:	b002      	add	sp, #8
 801654c:	4770      	bx	lr
 801654e:	4610      	mov	r0, r2
 8016550:	e7fb      	b.n	801654a <__ascii_mbtowc+0x16>
 8016552:	f06f 0001 	mvn.w	r0, #1
 8016556:	e7f8      	b.n	801654a <__ascii_mbtowc+0x16>

08016558 <memmove>:
 8016558:	4288      	cmp	r0, r1
 801655a:	b510      	push	{r4, lr}
 801655c:	eb01 0402 	add.w	r4, r1, r2
 8016560:	d902      	bls.n	8016568 <memmove+0x10>
 8016562:	4284      	cmp	r4, r0
 8016564:	4623      	mov	r3, r4
 8016566:	d807      	bhi.n	8016578 <memmove+0x20>
 8016568:	1e43      	subs	r3, r0, #1
 801656a:	42a1      	cmp	r1, r4
 801656c:	d008      	beq.n	8016580 <memmove+0x28>
 801656e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016576:	e7f8      	b.n	801656a <memmove+0x12>
 8016578:	4402      	add	r2, r0
 801657a:	4601      	mov	r1, r0
 801657c:	428a      	cmp	r2, r1
 801657e:	d100      	bne.n	8016582 <memmove+0x2a>
 8016580:	bd10      	pop	{r4, pc}
 8016582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801658a:	e7f7      	b.n	801657c <memmove+0x24>

0801658c <__malloc_lock>:
 801658c:	4801      	ldr	r0, [pc, #4]	; (8016594 <__malloc_lock+0x8>)
 801658e:	f000 bc1f 	b.w	8016dd0 <__retarget_lock_acquire_recursive>
 8016592:	bf00      	nop
 8016594:	2000051c 	.word	0x2000051c

08016598 <__malloc_unlock>:
 8016598:	4801      	ldr	r0, [pc, #4]	; (80165a0 <__malloc_unlock+0x8>)
 801659a:	f000 bc1a 	b.w	8016dd2 <__retarget_lock_release_recursive>
 801659e:	bf00      	nop
 80165a0:	2000051c 	.word	0x2000051c

080165a4 <_realloc_r>:
 80165a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165a8:	4680      	mov	r8, r0
 80165aa:	4614      	mov	r4, r2
 80165ac:	460e      	mov	r6, r1
 80165ae:	b921      	cbnz	r1, 80165ba <_realloc_r+0x16>
 80165b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165b4:	4611      	mov	r1, r2
 80165b6:	f7ff bdad 	b.w	8016114 <_malloc_r>
 80165ba:	b92a      	cbnz	r2, 80165c8 <_realloc_r+0x24>
 80165bc:	f7ff fd3e 	bl	801603c <_free_r>
 80165c0:	4625      	mov	r5, r4
 80165c2:	4628      	mov	r0, r5
 80165c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165c8:	f000 fc6a 	bl	8016ea0 <_malloc_usable_size_r>
 80165cc:	4284      	cmp	r4, r0
 80165ce:	4607      	mov	r7, r0
 80165d0:	d802      	bhi.n	80165d8 <_realloc_r+0x34>
 80165d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80165d6:	d812      	bhi.n	80165fe <_realloc_r+0x5a>
 80165d8:	4621      	mov	r1, r4
 80165da:	4640      	mov	r0, r8
 80165dc:	f7ff fd9a 	bl	8016114 <_malloc_r>
 80165e0:	4605      	mov	r5, r0
 80165e2:	2800      	cmp	r0, #0
 80165e4:	d0ed      	beq.n	80165c2 <_realloc_r+0x1e>
 80165e6:	42bc      	cmp	r4, r7
 80165e8:	4622      	mov	r2, r4
 80165ea:	4631      	mov	r1, r6
 80165ec:	bf28      	it	cs
 80165ee:	463a      	movcs	r2, r7
 80165f0:	f7ff f97c 	bl	80158ec <memcpy>
 80165f4:	4631      	mov	r1, r6
 80165f6:	4640      	mov	r0, r8
 80165f8:	f7ff fd20 	bl	801603c <_free_r>
 80165fc:	e7e1      	b.n	80165c2 <_realloc_r+0x1e>
 80165fe:	4635      	mov	r5, r6
 8016600:	e7df      	b.n	80165c2 <_realloc_r+0x1e>

08016602 <__sfputc_r>:
 8016602:	6893      	ldr	r3, [r2, #8]
 8016604:	3b01      	subs	r3, #1
 8016606:	2b00      	cmp	r3, #0
 8016608:	b410      	push	{r4}
 801660a:	6093      	str	r3, [r2, #8]
 801660c:	da08      	bge.n	8016620 <__sfputc_r+0x1e>
 801660e:	6994      	ldr	r4, [r2, #24]
 8016610:	42a3      	cmp	r3, r4
 8016612:	db01      	blt.n	8016618 <__sfputc_r+0x16>
 8016614:	290a      	cmp	r1, #10
 8016616:	d103      	bne.n	8016620 <__sfputc_r+0x1e>
 8016618:	f85d 4b04 	ldr.w	r4, [sp], #4
 801661c:	f000 b94a 	b.w	80168b4 <__swbuf_r>
 8016620:	6813      	ldr	r3, [r2, #0]
 8016622:	1c58      	adds	r0, r3, #1
 8016624:	6010      	str	r0, [r2, #0]
 8016626:	7019      	strb	r1, [r3, #0]
 8016628:	4608      	mov	r0, r1
 801662a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801662e:	4770      	bx	lr

08016630 <__sfputs_r>:
 8016630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016632:	4606      	mov	r6, r0
 8016634:	460f      	mov	r7, r1
 8016636:	4614      	mov	r4, r2
 8016638:	18d5      	adds	r5, r2, r3
 801663a:	42ac      	cmp	r4, r5
 801663c:	d101      	bne.n	8016642 <__sfputs_r+0x12>
 801663e:	2000      	movs	r0, #0
 8016640:	e007      	b.n	8016652 <__sfputs_r+0x22>
 8016642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016646:	463a      	mov	r2, r7
 8016648:	4630      	mov	r0, r6
 801664a:	f7ff ffda 	bl	8016602 <__sfputc_r>
 801664e:	1c43      	adds	r3, r0, #1
 8016650:	d1f3      	bne.n	801663a <__sfputs_r+0xa>
 8016652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016654 <_vfiprintf_r>:
 8016654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016658:	460d      	mov	r5, r1
 801665a:	b09d      	sub	sp, #116	; 0x74
 801665c:	4614      	mov	r4, r2
 801665e:	4698      	mov	r8, r3
 8016660:	4606      	mov	r6, r0
 8016662:	b118      	cbz	r0, 801666c <_vfiprintf_r+0x18>
 8016664:	6983      	ldr	r3, [r0, #24]
 8016666:	b90b      	cbnz	r3, 801666c <_vfiprintf_r+0x18>
 8016668:	f000 fb14 	bl	8016c94 <__sinit>
 801666c:	4b89      	ldr	r3, [pc, #548]	; (8016894 <_vfiprintf_r+0x240>)
 801666e:	429d      	cmp	r5, r3
 8016670:	d11b      	bne.n	80166aa <_vfiprintf_r+0x56>
 8016672:	6875      	ldr	r5, [r6, #4]
 8016674:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016676:	07d9      	lsls	r1, r3, #31
 8016678:	d405      	bmi.n	8016686 <_vfiprintf_r+0x32>
 801667a:	89ab      	ldrh	r3, [r5, #12]
 801667c:	059a      	lsls	r2, r3, #22
 801667e:	d402      	bmi.n	8016686 <_vfiprintf_r+0x32>
 8016680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016682:	f000 fba5 	bl	8016dd0 <__retarget_lock_acquire_recursive>
 8016686:	89ab      	ldrh	r3, [r5, #12]
 8016688:	071b      	lsls	r3, r3, #28
 801668a:	d501      	bpl.n	8016690 <_vfiprintf_r+0x3c>
 801668c:	692b      	ldr	r3, [r5, #16]
 801668e:	b9eb      	cbnz	r3, 80166cc <_vfiprintf_r+0x78>
 8016690:	4629      	mov	r1, r5
 8016692:	4630      	mov	r0, r6
 8016694:	f000 f96e 	bl	8016974 <__swsetup_r>
 8016698:	b1c0      	cbz	r0, 80166cc <_vfiprintf_r+0x78>
 801669a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801669c:	07dc      	lsls	r4, r3, #31
 801669e:	d50e      	bpl.n	80166be <_vfiprintf_r+0x6a>
 80166a0:	f04f 30ff 	mov.w	r0, #4294967295
 80166a4:	b01d      	add	sp, #116	; 0x74
 80166a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166aa:	4b7b      	ldr	r3, [pc, #492]	; (8016898 <_vfiprintf_r+0x244>)
 80166ac:	429d      	cmp	r5, r3
 80166ae:	d101      	bne.n	80166b4 <_vfiprintf_r+0x60>
 80166b0:	68b5      	ldr	r5, [r6, #8]
 80166b2:	e7df      	b.n	8016674 <_vfiprintf_r+0x20>
 80166b4:	4b79      	ldr	r3, [pc, #484]	; (801689c <_vfiprintf_r+0x248>)
 80166b6:	429d      	cmp	r5, r3
 80166b8:	bf08      	it	eq
 80166ba:	68f5      	ldreq	r5, [r6, #12]
 80166bc:	e7da      	b.n	8016674 <_vfiprintf_r+0x20>
 80166be:	89ab      	ldrh	r3, [r5, #12]
 80166c0:	0598      	lsls	r0, r3, #22
 80166c2:	d4ed      	bmi.n	80166a0 <_vfiprintf_r+0x4c>
 80166c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80166c6:	f000 fb84 	bl	8016dd2 <__retarget_lock_release_recursive>
 80166ca:	e7e9      	b.n	80166a0 <_vfiprintf_r+0x4c>
 80166cc:	2300      	movs	r3, #0
 80166ce:	9309      	str	r3, [sp, #36]	; 0x24
 80166d0:	2320      	movs	r3, #32
 80166d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80166d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80166da:	2330      	movs	r3, #48	; 0x30
 80166dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80168a0 <_vfiprintf_r+0x24c>
 80166e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80166e4:	f04f 0901 	mov.w	r9, #1
 80166e8:	4623      	mov	r3, r4
 80166ea:	469a      	mov	sl, r3
 80166ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80166f0:	b10a      	cbz	r2, 80166f6 <_vfiprintf_r+0xa2>
 80166f2:	2a25      	cmp	r2, #37	; 0x25
 80166f4:	d1f9      	bne.n	80166ea <_vfiprintf_r+0x96>
 80166f6:	ebba 0b04 	subs.w	fp, sl, r4
 80166fa:	d00b      	beq.n	8016714 <_vfiprintf_r+0xc0>
 80166fc:	465b      	mov	r3, fp
 80166fe:	4622      	mov	r2, r4
 8016700:	4629      	mov	r1, r5
 8016702:	4630      	mov	r0, r6
 8016704:	f7ff ff94 	bl	8016630 <__sfputs_r>
 8016708:	3001      	adds	r0, #1
 801670a:	f000 80aa 	beq.w	8016862 <_vfiprintf_r+0x20e>
 801670e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016710:	445a      	add	r2, fp
 8016712:	9209      	str	r2, [sp, #36]	; 0x24
 8016714:	f89a 3000 	ldrb.w	r3, [sl]
 8016718:	2b00      	cmp	r3, #0
 801671a:	f000 80a2 	beq.w	8016862 <_vfiprintf_r+0x20e>
 801671e:	2300      	movs	r3, #0
 8016720:	f04f 32ff 	mov.w	r2, #4294967295
 8016724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016728:	f10a 0a01 	add.w	sl, sl, #1
 801672c:	9304      	str	r3, [sp, #16]
 801672e:	9307      	str	r3, [sp, #28]
 8016730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016734:	931a      	str	r3, [sp, #104]	; 0x68
 8016736:	4654      	mov	r4, sl
 8016738:	2205      	movs	r2, #5
 801673a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801673e:	4858      	ldr	r0, [pc, #352]	; (80168a0 <_vfiprintf_r+0x24c>)
 8016740:	f7f5 fc86 	bl	800c050 <memchr>
 8016744:	9a04      	ldr	r2, [sp, #16]
 8016746:	b9d8      	cbnz	r0, 8016780 <_vfiprintf_r+0x12c>
 8016748:	06d1      	lsls	r1, r2, #27
 801674a:	bf44      	itt	mi
 801674c:	2320      	movmi	r3, #32
 801674e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016752:	0713      	lsls	r3, r2, #28
 8016754:	bf44      	itt	mi
 8016756:	232b      	movmi	r3, #43	; 0x2b
 8016758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801675c:	f89a 3000 	ldrb.w	r3, [sl]
 8016760:	2b2a      	cmp	r3, #42	; 0x2a
 8016762:	d015      	beq.n	8016790 <_vfiprintf_r+0x13c>
 8016764:	9a07      	ldr	r2, [sp, #28]
 8016766:	4654      	mov	r4, sl
 8016768:	2000      	movs	r0, #0
 801676a:	f04f 0c0a 	mov.w	ip, #10
 801676e:	4621      	mov	r1, r4
 8016770:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016774:	3b30      	subs	r3, #48	; 0x30
 8016776:	2b09      	cmp	r3, #9
 8016778:	d94e      	bls.n	8016818 <_vfiprintf_r+0x1c4>
 801677a:	b1b0      	cbz	r0, 80167aa <_vfiprintf_r+0x156>
 801677c:	9207      	str	r2, [sp, #28]
 801677e:	e014      	b.n	80167aa <_vfiprintf_r+0x156>
 8016780:	eba0 0308 	sub.w	r3, r0, r8
 8016784:	fa09 f303 	lsl.w	r3, r9, r3
 8016788:	4313      	orrs	r3, r2
 801678a:	9304      	str	r3, [sp, #16]
 801678c:	46a2      	mov	sl, r4
 801678e:	e7d2      	b.n	8016736 <_vfiprintf_r+0xe2>
 8016790:	9b03      	ldr	r3, [sp, #12]
 8016792:	1d19      	adds	r1, r3, #4
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	9103      	str	r1, [sp, #12]
 8016798:	2b00      	cmp	r3, #0
 801679a:	bfbb      	ittet	lt
 801679c:	425b      	neglt	r3, r3
 801679e:	f042 0202 	orrlt.w	r2, r2, #2
 80167a2:	9307      	strge	r3, [sp, #28]
 80167a4:	9307      	strlt	r3, [sp, #28]
 80167a6:	bfb8      	it	lt
 80167a8:	9204      	strlt	r2, [sp, #16]
 80167aa:	7823      	ldrb	r3, [r4, #0]
 80167ac:	2b2e      	cmp	r3, #46	; 0x2e
 80167ae:	d10c      	bne.n	80167ca <_vfiprintf_r+0x176>
 80167b0:	7863      	ldrb	r3, [r4, #1]
 80167b2:	2b2a      	cmp	r3, #42	; 0x2a
 80167b4:	d135      	bne.n	8016822 <_vfiprintf_r+0x1ce>
 80167b6:	9b03      	ldr	r3, [sp, #12]
 80167b8:	1d1a      	adds	r2, r3, #4
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	9203      	str	r2, [sp, #12]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	bfb8      	it	lt
 80167c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80167c6:	3402      	adds	r4, #2
 80167c8:	9305      	str	r3, [sp, #20]
 80167ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80168b0 <_vfiprintf_r+0x25c>
 80167ce:	7821      	ldrb	r1, [r4, #0]
 80167d0:	2203      	movs	r2, #3
 80167d2:	4650      	mov	r0, sl
 80167d4:	f7f5 fc3c 	bl	800c050 <memchr>
 80167d8:	b140      	cbz	r0, 80167ec <_vfiprintf_r+0x198>
 80167da:	2340      	movs	r3, #64	; 0x40
 80167dc:	eba0 000a 	sub.w	r0, r0, sl
 80167e0:	fa03 f000 	lsl.w	r0, r3, r0
 80167e4:	9b04      	ldr	r3, [sp, #16]
 80167e6:	4303      	orrs	r3, r0
 80167e8:	3401      	adds	r4, #1
 80167ea:	9304      	str	r3, [sp, #16]
 80167ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167f0:	482c      	ldr	r0, [pc, #176]	; (80168a4 <_vfiprintf_r+0x250>)
 80167f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80167f6:	2206      	movs	r2, #6
 80167f8:	f7f5 fc2a 	bl	800c050 <memchr>
 80167fc:	2800      	cmp	r0, #0
 80167fe:	d03f      	beq.n	8016880 <_vfiprintf_r+0x22c>
 8016800:	4b29      	ldr	r3, [pc, #164]	; (80168a8 <_vfiprintf_r+0x254>)
 8016802:	bb1b      	cbnz	r3, 801684c <_vfiprintf_r+0x1f8>
 8016804:	9b03      	ldr	r3, [sp, #12]
 8016806:	3307      	adds	r3, #7
 8016808:	f023 0307 	bic.w	r3, r3, #7
 801680c:	3308      	adds	r3, #8
 801680e:	9303      	str	r3, [sp, #12]
 8016810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016812:	443b      	add	r3, r7
 8016814:	9309      	str	r3, [sp, #36]	; 0x24
 8016816:	e767      	b.n	80166e8 <_vfiprintf_r+0x94>
 8016818:	fb0c 3202 	mla	r2, ip, r2, r3
 801681c:	460c      	mov	r4, r1
 801681e:	2001      	movs	r0, #1
 8016820:	e7a5      	b.n	801676e <_vfiprintf_r+0x11a>
 8016822:	2300      	movs	r3, #0
 8016824:	3401      	adds	r4, #1
 8016826:	9305      	str	r3, [sp, #20]
 8016828:	4619      	mov	r1, r3
 801682a:	f04f 0c0a 	mov.w	ip, #10
 801682e:	4620      	mov	r0, r4
 8016830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016834:	3a30      	subs	r2, #48	; 0x30
 8016836:	2a09      	cmp	r2, #9
 8016838:	d903      	bls.n	8016842 <_vfiprintf_r+0x1ee>
 801683a:	2b00      	cmp	r3, #0
 801683c:	d0c5      	beq.n	80167ca <_vfiprintf_r+0x176>
 801683e:	9105      	str	r1, [sp, #20]
 8016840:	e7c3      	b.n	80167ca <_vfiprintf_r+0x176>
 8016842:	fb0c 2101 	mla	r1, ip, r1, r2
 8016846:	4604      	mov	r4, r0
 8016848:	2301      	movs	r3, #1
 801684a:	e7f0      	b.n	801682e <_vfiprintf_r+0x1da>
 801684c:	ab03      	add	r3, sp, #12
 801684e:	9300      	str	r3, [sp, #0]
 8016850:	462a      	mov	r2, r5
 8016852:	4b16      	ldr	r3, [pc, #88]	; (80168ac <_vfiprintf_r+0x258>)
 8016854:	a904      	add	r1, sp, #16
 8016856:	4630      	mov	r0, r6
 8016858:	f7fd fdd6 	bl	8014408 <_printf_float>
 801685c:	4607      	mov	r7, r0
 801685e:	1c78      	adds	r0, r7, #1
 8016860:	d1d6      	bne.n	8016810 <_vfiprintf_r+0x1bc>
 8016862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016864:	07d9      	lsls	r1, r3, #31
 8016866:	d405      	bmi.n	8016874 <_vfiprintf_r+0x220>
 8016868:	89ab      	ldrh	r3, [r5, #12]
 801686a:	059a      	lsls	r2, r3, #22
 801686c:	d402      	bmi.n	8016874 <_vfiprintf_r+0x220>
 801686e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016870:	f000 faaf 	bl	8016dd2 <__retarget_lock_release_recursive>
 8016874:	89ab      	ldrh	r3, [r5, #12]
 8016876:	065b      	lsls	r3, r3, #25
 8016878:	f53f af12 	bmi.w	80166a0 <_vfiprintf_r+0x4c>
 801687c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801687e:	e711      	b.n	80166a4 <_vfiprintf_r+0x50>
 8016880:	ab03      	add	r3, sp, #12
 8016882:	9300      	str	r3, [sp, #0]
 8016884:	462a      	mov	r2, r5
 8016886:	4b09      	ldr	r3, [pc, #36]	; (80168ac <_vfiprintf_r+0x258>)
 8016888:	a904      	add	r1, sp, #16
 801688a:	4630      	mov	r0, r6
 801688c:	f7fe f860 	bl	8014950 <_printf_i>
 8016890:	e7e4      	b.n	801685c <_vfiprintf_r+0x208>
 8016892:	bf00      	nop
 8016894:	08021d04 	.word	0x08021d04
 8016898:	08021d24 	.word	0x08021d24
 801689c:	08021ce4 	.word	0x08021ce4
 80168a0:	08021b8c 	.word	0x08021b8c
 80168a4:	08021b96 	.word	0x08021b96
 80168a8:	08014409 	.word	0x08014409
 80168ac:	08016631 	.word	0x08016631
 80168b0:	08021b92 	.word	0x08021b92

080168b4 <__swbuf_r>:
 80168b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168b6:	460e      	mov	r6, r1
 80168b8:	4614      	mov	r4, r2
 80168ba:	4605      	mov	r5, r0
 80168bc:	b118      	cbz	r0, 80168c6 <__swbuf_r+0x12>
 80168be:	6983      	ldr	r3, [r0, #24]
 80168c0:	b90b      	cbnz	r3, 80168c6 <__swbuf_r+0x12>
 80168c2:	f000 f9e7 	bl	8016c94 <__sinit>
 80168c6:	4b21      	ldr	r3, [pc, #132]	; (801694c <__swbuf_r+0x98>)
 80168c8:	429c      	cmp	r4, r3
 80168ca:	d12b      	bne.n	8016924 <__swbuf_r+0x70>
 80168cc:	686c      	ldr	r4, [r5, #4]
 80168ce:	69a3      	ldr	r3, [r4, #24]
 80168d0:	60a3      	str	r3, [r4, #8]
 80168d2:	89a3      	ldrh	r3, [r4, #12]
 80168d4:	071a      	lsls	r2, r3, #28
 80168d6:	d52f      	bpl.n	8016938 <__swbuf_r+0x84>
 80168d8:	6923      	ldr	r3, [r4, #16]
 80168da:	b36b      	cbz	r3, 8016938 <__swbuf_r+0x84>
 80168dc:	6923      	ldr	r3, [r4, #16]
 80168de:	6820      	ldr	r0, [r4, #0]
 80168e0:	1ac0      	subs	r0, r0, r3
 80168e2:	6963      	ldr	r3, [r4, #20]
 80168e4:	b2f6      	uxtb	r6, r6
 80168e6:	4283      	cmp	r3, r0
 80168e8:	4637      	mov	r7, r6
 80168ea:	dc04      	bgt.n	80168f6 <__swbuf_r+0x42>
 80168ec:	4621      	mov	r1, r4
 80168ee:	4628      	mov	r0, r5
 80168f0:	f000 f93c 	bl	8016b6c <_fflush_r>
 80168f4:	bb30      	cbnz	r0, 8016944 <__swbuf_r+0x90>
 80168f6:	68a3      	ldr	r3, [r4, #8]
 80168f8:	3b01      	subs	r3, #1
 80168fa:	60a3      	str	r3, [r4, #8]
 80168fc:	6823      	ldr	r3, [r4, #0]
 80168fe:	1c5a      	adds	r2, r3, #1
 8016900:	6022      	str	r2, [r4, #0]
 8016902:	701e      	strb	r6, [r3, #0]
 8016904:	6963      	ldr	r3, [r4, #20]
 8016906:	3001      	adds	r0, #1
 8016908:	4283      	cmp	r3, r0
 801690a:	d004      	beq.n	8016916 <__swbuf_r+0x62>
 801690c:	89a3      	ldrh	r3, [r4, #12]
 801690e:	07db      	lsls	r3, r3, #31
 8016910:	d506      	bpl.n	8016920 <__swbuf_r+0x6c>
 8016912:	2e0a      	cmp	r6, #10
 8016914:	d104      	bne.n	8016920 <__swbuf_r+0x6c>
 8016916:	4621      	mov	r1, r4
 8016918:	4628      	mov	r0, r5
 801691a:	f000 f927 	bl	8016b6c <_fflush_r>
 801691e:	b988      	cbnz	r0, 8016944 <__swbuf_r+0x90>
 8016920:	4638      	mov	r0, r7
 8016922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016924:	4b0a      	ldr	r3, [pc, #40]	; (8016950 <__swbuf_r+0x9c>)
 8016926:	429c      	cmp	r4, r3
 8016928:	d101      	bne.n	801692e <__swbuf_r+0x7a>
 801692a:	68ac      	ldr	r4, [r5, #8]
 801692c:	e7cf      	b.n	80168ce <__swbuf_r+0x1a>
 801692e:	4b09      	ldr	r3, [pc, #36]	; (8016954 <__swbuf_r+0xa0>)
 8016930:	429c      	cmp	r4, r3
 8016932:	bf08      	it	eq
 8016934:	68ec      	ldreq	r4, [r5, #12]
 8016936:	e7ca      	b.n	80168ce <__swbuf_r+0x1a>
 8016938:	4621      	mov	r1, r4
 801693a:	4628      	mov	r0, r5
 801693c:	f000 f81a 	bl	8016974 <__swsetup_r>
 8016940:	2800      	cmp	r0, #0
 8016942:	d0cb      	beq.n	80168dc <__swbuf_r+0x28>
 8016944:	f04f 37ff 	mov.w	r7, #4294967295
 8016948:	e7ea      	b.n	8016920 <__swbuf_r+0x6c>
 801694a:	bf00      	nop
 801694c:	08021d04 	.word	0x08021d04
 8016950:	08021d24 	.word	0x08021d24
 8016954:	08021ce4 	.word	0x08021ce4

08016958 <__ascii_wctomb>:
 8016958:	b149      	cbz	r1, 801696e <__ascii_wctomb+0x16>
 801695a:	2aff      	cmp	r2, #255	; 0xff
 801695c:	bf85      	ittet	hi
 801695e:	238a      	movhi	r3, #138	; 0x8a
 8016960:	6003      	strhi	r3, [r0, #0]
 8016962:	700a      	strbls	r2, [r1, #0]
 8016964:	f04f 30ff 	movhi.w	r0, #4294967295
 8016968:	bf98      	it	ls
 801696a:	2001      	movls	r0, #1
 801696c:	4770      	bx	lr
 801696e:	4608      	mov	r0, r1
 8016970:	4770      	bx	lr
	...

08016974 <__swsetup_r>:
 8016974:	4b32      	ldr	r3, [pc, #200]	; (8016a40 <__swsetup_r+0xcc>)
 8016976:	b570      	push	{r4, r5, r6, lr}
 8016978:	681d      	ldr	r5, [r3, #0]
 801697a:	4606      	mov	r6, r0
 801697c:	460c      	mov	r4, r1
 801697e:	b125      	cbz	r5, 801698a <__swsetup_r+0x16>
 8016980:	69ab      	ldr	r3, [r5, #24]
 8016982:	b913      	cbnz	r3, 801698a <__swsetup_r+0x16>
 8016984:	4628      	mov	r0, r5
 8016986:	f000 f985 	bl	8016c94 <__sinit>
 801698a:	4b2e      	ldr	r3, [pc, #184]	; (8016a44 <__swsetup_r+0xd0>)
 801698c:	429c      	cmp	r4, r3
 801698e:	d10f      	bne.n	80169b0 <__swsetup_r+0x3c>
 8016990:	686c      	ldr	r4, [r5, #4]
 8016992:	89a3      	ldrh	r3, [r4, #12]
 8016994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016998:	0719      	lsls	r1, r3, #28
 801699a:	d42c      	bmi.n	80169f6 <__swsetup_r+0x82>
 801699c:	06dd      	lsls	r5, r3, #27
 801699e:	d411      	bmi.n	80169c4 <__swsetup_r+0x50>
 80169a0:	2309      	movs	r3, #9
 80169a2:	6033      	str	r3, [r6, #0]
 80169a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80169a8:	81a3      	strh	r3, [r4, #12]
 80169aa:	f04f 30ff 	mov.w	r0, #4294967295
 80169ae:	e03e      	b.n	8016a2e <__swsetup_r+0xba>
 80169b0:	4b25      	ldr	r3, [pc, #148]	; (8016a48 <__swsetup_r+0xd4>)
 80169b2:	429c      	cmp	r4, r3
 80169b4:	d101      	bne.n	80169ba <__swsetup_r+0x46>
 80169b6:	68ac      	ldr	r4, [r5, #8]
 80169b8:	e7eb      	b.n	8016992 <__swsetup_r+0x1e>
 80169ba:	4b24      	ldr	r3, [pc, #144]	; (8016a4c <__swsetup_r+0xd8>)
 80169bc:	429c      	cmp	r4, r3
 80169be:	bf08      	it	eq
 80169c0:	68ec      	ldreq	r4, [r5, #12]
 80169c2:	e7e6      	b.n	8016992 <__swsetup_r+0x1e>
 80169c4:	0758      	lsls	r0, r3, #29
 80169c6:	d512      	bpl.n	80169ee <__swsetup_r+0x7a>
 80169c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80169ca:	b141      	cbz	r1, 80169de <__swsetup_r+0x6a>
 80169cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80169d0:	4299      	cmp	r1, r3
 80169d2:	d002      	beq.n	80169da <__swsetup_r+0x66>
 80169d4:	4630      	mov	r0, r6
 80169d6:	f7ff fb31 	bl	801603c <_free_r>
 80169da:	2300      	movs	r3, #0
 80169dc:	6363      	str	r3, [r4, #52]	; 0x34
 80169de:	89a3      	ldrh	r3, [r4, #12]
 80169e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80169e4:	81a3      	strh	r3, [r4, #12]
 80169e6:	2300      	movs	r3, #0
 80169e8:	6063      	str	r3, [r4, #4]
 80169ea:	6923      	ldr	r3, [r4, #16]
 80169ec:	6023      	str	r3, [r4, #0]
 80169ee:	89a3      	ldrh	r3, [r4, #12]
 80169f0:	f043 0308 	orr.w	r3, r3, #8
 80169f4:	81a3      	strh	r3, [r4, #12]
 80169f6:	6923      	ldr	r3, [r4, #16]
 80169f8:	b94b      	cbnz	r3, 8016a0e <__swsetup_r+0x9a>
 80169fa:	89a3      	ldrh	r3, [r4, #12]
 80169fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016a04:	d003      	beq.n	8016a0e <__swsetup_r+0x9a>
 8016a06:	4621      	mov	r1, r4
 8016a08:	4630      	mov	r0, r6
 8016a0a:	f000 fa09 	bl	8016e20 <__smakebuf_r>
 8016a0e:	89a0      	ldrh	r0, [r4, #12]
 8016a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016a14:	f010 0301 	ands.w	r3, r0, #1
 8016a18:	d00a      	beq.n	8016a30 <__swsetup_r+0xbc>
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	60a3      	str	r3, [r4, #8]
 8016a1e:	6963      	ldr	r3, [r4, #20]
 8016a20:	425b      	negs	r3, r3
 8016a22:	61a3      	str	r3, [r4, #24]
 8016a24:	6923      	ldr	r3, [r4, #16]
 8016a26:	b943      	cbnz	r3, 8016a3a <__swsetup_r+0xc6>
 8016a28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016a2c:	d1ba      	bne.n	80169a4 <__swsetup_r+0x30>
 8016a2e:	bd70      	pop	{r4, r5, r6, pc}
 8016a30:	0781      	lsls	r1, r0, #30
 8016a32:	bf58      	it	pl
 8016a34:	6963      	ldrpl	r3, [r4, #20]
 8016a36:	60a3      	str	r3, [r4, #8]
 8016a38:	e7f4      	b.n	8016a24 <__swsetup_r+0xb0>
 8016a3a:	2000      	movs	r0, #0
 8016a3c:	e7f7      	b.n	8016a2e <__swsetup_r+0xba>
 8016a3e:	bf00      	nop
 8016a40:	2000006c 	.word	0x2000006c
 8016a44:	08021d04 	.word	0x08021d04
 8016a48:	08021d24 	.word	0x08021d24
 8016a4c:	08021ce4 	.word	0x08021ce4

08016a50 <abort>:
 8016a50:	b508      	push	{r3, lr}
 8016a52:	2006      	movs	r0, #6
 8016a54:	f000 fa54 	bl	8016f00 <raise>
 8016a58:	2001      	movs	r0, #1
 8016a5a:	f7f9 fec7 	bl	80107ec <_exit>
	...

08016a60 <__sflush_r>:
 8016a60:	898a      	ldrh	r2, [r1, #12]
 8016a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a66:	4605      	mov	r5, r0
 8016a68:	0710      	lsls	r0, r2, #28
 8016a6a:	460c      	mov	r4, r1
 8016a6c:	d458      	bmi.n	8016b20 <__sflush_r+0xc0>
 8016a6e:	684b      	ldr	r3, [r1, #4]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	dc05      	bgt.n	8016a80 <__sflush_r+0x20>
 8016a74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	dc02      	bgt.n	8016a80 <__sflush_r+0x20>
 8016a7a:	2000      	movs	r0, #0
 8016a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016a82:	2e00      	cmp	r6, #0
 8016a84:	d0f9      	beq.n	8016a7a <__sflush_r+0x1a>
 8016a86:	2300      	movs	r3, #0
 8016a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016a8c:	682f      	ldr	r7, [r5, #0]
 8016a8e:	602b      	str	r3, [r5, #0]
 8016a90:	d032      	beq.n	8016af8 <__sflush_r+0x98>
 8016a92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016a94:	89a3      	ldrh	r3, [r4, #12]
 8016a96:	075a      	lsls	r2, r3, #29
 8016a98:	d505      	bpl.n	8016aa6 <__sflush_r+0x46>
 8016a9a:	6863      	ldr	r3, [r4, #4]
 8016a9c:	1ac0      	subs	r0, r0, r3
 8016a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016aa0:	b10b      	cbz	r3, 8016aa6 <__sflush_r+0x46>
 8016aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016aa4:	1ac0      	subs	r0, r0, r3
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	4602      	mov	r2, r0
 8016aaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016aac:	6a21      	ldr	r1, [r4, #32]
 8016aae:	4628      	mov	r0, r5
 8016ab0:	47b0      	blx	r6
 8016ab2:	1c43      	adds	r3, r0, #1
 8016ab4:	89a3      	ldrh	r3, [r4, #12]
 8016ab6:	d106      	bne.n	8016ac6 <__sflush_r+0x66>
 8016ab8:	6829      	ldr	r1, [r5, #0]
 8016aba:	291d      	cmp	r1, #29
 8016abc:	d82c      	bhi.n	8016b18 <__sflush_r+0xb8>
 8016abe:	4a2a      	ldr	r2, [pc, #168]	; (8016b68 <__sflush_r+0x108>)
 8016ac0:	40ca      	lsrs	r2, r1
 8016ac2:	07d6      	lsls	r6, r2, #31
 8016ac4:	d528      	bpl.n	8016b18 <__sflush_r+0xb8>
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	6062      	str	r2, [r4, #4]
 8016aca:	04d9      	lsls	r1, r3, #19
 8016acc:	6922      	ldr	r2, [r4, #16]
 8016ace:	6022      	str	r2, [r4, #0]
 8016ad0:	d504      	bpl.n	8016adc <__sflush_r+0x7c>
 8016ad2:	1c42      	adds	r2, r0, #1
 8016ad4:	d101      	bne.n	8016ada <__sflush_r+0x7a>
 8016ad6:	682b      	ldr	r3, [r5, #0]
 8016ad8:	b903      	cbnz	r3, 8016adc <__sflush_r+0x7c>
 8016ada:	6560      	str	r0, [r4, #84]	; 0x54
 8016adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ade:	602f      	str	r7, [r5, #0]
 8016ae0:	2900      	cmp	r1, #0
 8016ae2:	d0ca      	beq.n	8016a7a <__sflush_r+0x1a>
 8016ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ae8:	4299      	cmp	r1, r3
 8016aea:	d002      	beq.n	8016af2 <__sflush_r+0x92>
 8016aec:	4628      	mov	r0, r5
 8016aee:	f7ff faa5 	bl	801603c <_free_r>
 8016af2:	2000      	movs	r0, #0
 8016af4:	6360      	str	r0, [r4, #52]	; 0x34
 8016af6:	e7c1      	b.n	8016a7c <__sflush_r+0x1c>
 8016af8:	6a21      	ldr	r1, [r4, #32]
 8016afa:	2301      	movs	r3, #1
 8016afc:	4628      	mov	r0, r5
 8016afe:	47b0      	blx	r6
 8016b00:	1c41      	adds	r1, r0, #1
 8016b02:	d1c7      	bne.n	8016a94 <__sflush_r+0x34>
 8016b04:	682b      	ldr	r3, [r5, #0]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d0c4      	beq.n	8016a94 <__sflush_r+0x34>
 8016b0a:	2b1d      	cmp	r3, #29
 8016b0c:	d001      	beq.n	8016b12 <__sflush_r+0xb2>
 8016b0e:	2b16      	cmp	r3, #22
 8016b10:	d101      	bne.n	8016b16 <__sflush_r+0xb6>
 8016b12:	602f      	str	r7, [r5, #0]
 8016b14:	e7b1      	b.n	8016a7a <__sflush_r+0x1a>
 8016b16:	89a3      	ldrh	r3, [r4, #12]
 8016b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b1c:	81a3      	strh	r3, [r4, #12]
 8016b1e:	e7ad      	b.n	8016a7c <__sflush_r+0x1c>
 8016b20:	690f      	ldr	r7, [r1, #16]
 8016b22:	2f00      	cmp	r7, #0
 8016b24:	d0a9      	beq.n	8016a7a <__sflush_r+0x1a>
 8016b26:	0793      	lsls	r3, r2, #30
 8016b28:	680e      	ldr	r6, [r1, #0]
 8016b2a:	bf08      	it	eq
 8016b2c:	694b      	ldreq	r3, [r1, #20]
 8016b2e:	600f      	str	r7, [r1, #0]
 8016b30:	bf18      	it	ne
 8016b32:	2300      	movne	r3, #0
 8016b34:	eba6 0807 	sub.w	r8, r6, r7
 8016b38:	608b      	str	r3, [r1, #8]
 8016b3a:	f1b8 0f00 	cmp.w	r8, #0
 8016b3e:	dd9c      	ble.n	8016a7a <__sflush_r+0x1a>
 8016b40:	6a21      	ldr	r1, [r4, #32]
 8016b42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016b44:	4643      	mov	r3, r8
 8016b46:	463a      	mov	r2, r7
 8016b48:	4628      	mov	r0, r5
 8016b4a:	47b0      	blx	r6
 8016b4c:	2800      	cmp	r0, #0
 8016b4e:	dc06      	bgt.n	8016b5e <__sflush_r+0xfe>
 8016b50:	89a3      	ldrh	r3, [r4, #12]
 8016b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b56:	81a3      	strh	r3, [r4, #12]
 8016b58:	f04f 30ff 	mov.w	r0, #4294967295
 8016b5c:	e78e      	b.n	8016a7c <__sflush_r+0x1c>
 8016b5e:	4407      	add	r7, r0
 8016b60:	eba8 0800 	sub.w	r8, r8, r0
 8016b64:	e7e9      	b.n	8016b3a <__sflush_r+0xda>
 8016b66:	bf00      	nop
 8016b68:	20400001 	.word	0x20400001

08016b6c <_fflush_r>:
 8016b6c:	b538      	push	{r3, r4, r5, lr}
 8016b6e:	690b      	ldr	r3, [r1, #16]
 8016b70:	4605      	mov	r5, r0
 8016b72:	460c      	mov	r4, r1
 8016b74:	b913      	cbnz	r3, 8016b7c <_fflush_r+0x10>
 8016b76:	2500      	movs	r5, #0
 8016b78:	4628      	mov	r0, r5
 8016b7a:	bd38      	pop	{r3, r4, r5, pc}
 8016b7c:	b118      	cbz	r0, 8016b86 <_fflush_r+0x1a>
 8016b7e:	6983      	ldr	r3, [r0, #24]
 8016b80:	b90b      	cbnz	r3, 8016b86 <_fflush_r+0x1a>
 8016b82:	f000 f887 	bl	8016c94 <__sinit>
 8016b86:	4b14      	ldr	r3, [pc, #80]	; (8016bd8 <_fflush_r+0x6c>)
 8016b88:	429c      	cmp	r4, r3
 8016b8a:	d11b      	bne.n	8016bc4 <_fflush_r+0x58>
 8016b8c:	686c      	ldr	r4, [r5, #4]
 8016b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d0ef      	beq.n	8016b76 <_fflush_r+0xa>
 8016b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016b98:	07d0      	lsls	r0, r2, #31
 8016b9a:	d404      	bmi.n	8016ba6 <_fflush_r+0x3a>
 8016b9c:	0599      	lsls	r1, r3, #22
 8016b9e:	d402      	bmi.n	8016ba6 <_fflush_r+0x3a>
 8016ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ba2:	f000 f915 	bl	8016dd0 <__retarget_lock_acquire_recursive>
 8016ba6:	4628      	mov	r0, r5
 8016ba8:	4621      	mov	r1, r4
 8016baa:	f7ff ff59 	bl	8016a60 <__sflush_r>
 8016bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bb0:	07da      	lsls	r2, r3, #31
 8016bb2:	4605      	mov	r5, r0
 8016bb4:	d4e0      	bmi.n	8016b78 <_fflush_r+0xc>
 8016bb6:	89a3      	ldrh	r3, [r4, #12]
 8016bb8:	059b      	lsls	r3, r3, #22
 8016bba:	d4dd      	bmi.n	8016b78 <_fflush_r+0xc>
 8016bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bbe:	f000 f908 	bl	8016dd2 <__retarget_lock_release_recursive>
 8016bc2:	e7d9      	b.n	8016b78 <_fflush_r+0xc>
 8016bc4:	4b05      	ldr	r3, [pc, #20]	; (8016bdc <_fflush_r+0x70>)
 8016bc6:	429c      	cmp	r4, r3
 8016bc8:	d101      	bne.n	8016bce <_fflush_r+0x62>
 8016bca:	68ac      	ldr	r4, [r5, #8]
 8016bcc:	e7df      	b.n	8016b8e <_fflush_r+0x22>
 8016bce:	4b04      	ldr	r3, [pc, #16]	; (8016be0 <_fflush_r+0x74>)
 8016bd0:	429c      	cmp	r4, r3
 8016bd2:	bf08      	it	eq
 8016bd4:	68ec      	ldreq	r4, [r5, #12]
 8016bd6:	e7da      	b.n	8016b8e <_fflush_r+0x22>
 8016bd8:	08021d04 	.word	0x08021d04
 8016bdc:	08021d24 	.word	0x08021d24
 8016be0:	08021ce4 	.word	0x08021ce4

08016be4 <std>:
 8016be4:	2300      	movs	r3, #0
 8016be6:	b510      	push	{r4, lr}
 8016be8:	4604      	mov	r4, r0
 8016bea:	e9c0 3300 	strd	r3, r3, [r0]
 8016bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016bf2:	6083      	str	r3, [r0, #8]
 8016bf4:	8181      	strh	r1, [r0, #12]
 8016bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8016bf8:	81c2      	strh	r2, [r0, #14]
 8016bfa:	6183      	str	r3, [r0, #24]
 8016bfc:	4619      	mov	r1, r3
 8016bfe:	2208      	movs	r2, #8
 8016c00:	305c      	adds	r0, #92	; 0x5c
 8016c02:	f7fd fb59 	bl	80142b8 <memset>
 8016c06:	4b05      	ldr	r3, [pc, #20]	; (8016c1c <std+0x38>)
 8016c08:	6263      	str	r3, [r4, #36]	; 0x24
 8016c0a:	4b05      	ldr	r3, [pc, #20]	; (8016c20 <std+0x3c>)
 8016c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016c0e:	4b05      	ldr	r3, [pc, #20]	; (8016c24 <std+0x40>)
 8016c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016c12:	4b05      	ldr	r3, [pc, #20]	; (8016c28 <std+0x44>)
 8016c14:	6224      	str	r4, [r4, #32]
 8016c16:	6323      	str	r3, [r4, #48]	; 0x30
 8016c18:	bd10      	pop	{r4, pc}
 8016c1a:	bf00      	nop
 8016c1c:	08016f39 	.word	0x08016f39
 8016c20:	08016f5b 	.word	0x08016f5b
 8016c24:	08016f93 	.word	0x08016f93
 8016c28:	08016fb7 	.word	0x08016fb7

08016c2c <_cleanup_r>:
 8016c2c:	4901      	ldr	r1, [pc, #4]	; (8016c34 <_cleanup_r+0x8>)
 8016c2e:	f000 b8af 	b.w	8016d90 <_fwalk_reent>
 8016c32:	bf00      	nop
 8016c34:	08016b6d 	.word	0x08016b6d

08016c38 <__sfmoreglue>:
 8016c38:	b570      	push	{r4, r5, r6, lr}
 8016c3a:	2268      	movs	r2, #104	; 0x68
 8016c3c:	1e4d      	subs	r5, r1, #1
 8016c3e:	4355      	muls	r5, r2
 8016c40:	460e      	mov	r6, r1
 8016c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016c46:	f7ff fa65 	bl	8016114 <_malloc_r>
 8016c4a:	4604      	mov	r4, r0
 8016c4c:	b140      	cbz	r0, 8016c60 <__sfmoreglue+0x28>
 8016c4e:	2100      	movs	r1, #0
 8016c50:	e9c0 1600 	strd	r1, r6, [r0]
 8016c54:	300c      	adds	r0, #12
 8016c56:	60a0      	str	r0, [r4, #8]
 8016c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016c5c:	f7fd fb2c 	bl	80142b8 <memset>
 8016c60:	4620      	mov	r0, r4
 8016c62:	bd70      	pop	{r4, r5, r6, pc}

08016c64 <__sfp_lock_acquire>:
 8016c64:	4801      	ldr	r0, [pc, #4]	; (8016c6c <__sfp_lock_acquire+0x8>)
 8016c66:	f000 b8b3 	b.w	8016dd0 <__retarget_lock_acquire_recursive>
 8016c6a:	bf00      	nop
 8016c6c:	2000051d 	.word	0x2000051d

08016c70 <__sfp_lock_release>:
 8016c70:	4801      	ldr	r0, [pc, #4]	; (8016c78 <__sfp_lock_release+0x8>)
 8016c72:	f000 b8ae 	b.w	8016dd2 <__retarget_lock_release_recursive>
 8016c76:	bf00      	nop
 8016c78:	2000051d 	.word	0x2000051d

08016c7c <__sinit_lock_acquire>:
 8016c7c:	4801      	ldr	r0, [pc, #4]	; (8016c84 <__sinit_lock_acquire+0x8>)
 8016c7e:	f000 b8a7 	b.w	8016dd0 <__retarget_lock_acquire_recursive>
 8016c82:	bf00      	nop
 8016c84:	2000051e 	.word	0x2000051e

08016c88 <__sinit_lock_release>:
 8016c88:	4801      	ldr	r0, [pc, #4]	; (8016c90 <__sinit_lock_release+0x8>)
 8016c8a:	f000 b8a2 	b.w	8016dd2 <__retarget_lock_release_recursive>
 8016c8e:	bf00      	nop
 8016c90:	2000051e 	.word	0x2000051e

08016c94 <__sinit>:
 8016c94:	b510      	push	{r4, lr}
 8016c96:	4604      	mov	r4, r0
 8016c98:	f7ff fff0 	bl	8016c7c <__sinit_lock_acquire>
 8016c9c:	69a3      	ldr	r3, [r4, #24]
 8016c9e:	b11b      	cbz	r3, 8016ca8 <__sinit+0x14>
 8016ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ca4:	f7ff bff0 	b.w	8016c88 <__sinit_lock_release>
 8016ca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016cac:	6523      	str	r3, [r4, #80]	; 0x50
 8016cae:	4b13      	ldr	r3, [pc, #76]	; (8016cfc <__sinit+0x68>)
 8016cb0:	4a13      	ldr	r2, [pc, #76]	; (8016d00 <__sinit+0x6c>)
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8016cb6:	42a3      	cmp	r3, r4
 8016cb8:	bf04      	itt	eq
 8016cba:	2301      	moveq	r3, #1
 8016cbc:	61a3      	streq	r3, [r4, #24]
 8016cbe:	4620      	mov	r0, r4
 8016cc0:	f000 f820 	bl	8016d04 <__sfp>
 8016cc4:	6060      	str	r0, [r4, #4]
 8016cc6:	4620      	mov	r0, r4
 8016cc8:	f000 f81c 	bl	8016d04 <__sfp>
 8016ccc:	60a0      	str	r0, [r4, #8]
 8016cce:	4620      	mov	r0, r4
 8016cd0:	f000 f818 	bl	8016d04 <__sfp>
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	60e0      	str	r0, [r4, #12]
 8016cd8:	2104      	movs	r1, #4
 8016cda:	6860      	ldr	r0, [r4, #4]
 8016cdc:	f7ff ff82 	bl	8016be4 <std>
 8016ce0:	68a0      	ldr	r0, [r4, #8]
 8016ce2:	2201      	movs	r2, #1
 8016ce4:	2109      	movs	r1, #9
 8016ce6:	f7ff ff7d 	bl	8016be4 <std>
 8016cea:	68e0      	ldr	r0, [r4, #12]
 8016cec:	2202      	movs	r2, #2
 8016cee:	2112      	movs	r1, #18
 8016cf0:	f7ff ff78 	bl	8016be4 <std>
 8016cf4:	2301      	movs	r3, #1
 8016cf6:	61a3      	str	r3, [r4, #24]
 8016cf8:	e7d2      	b.n	8016ca0 <__sinit+0xc>
 8016cfa:	bf00      	nop
 8016cfc:	08021968 	.word	0x08021968
 8016d00:	08016c2d 	.word	0x08016c2d

08016d04 <__sfp>:
 8016d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d06:	4607      	mov	r7, r0
 8016d08:	f7ff ffac 	bl	8016c64 <__sfp_lock_acquire>
 8016d0c:	4b1e      	ldr	r3, [pc, #120]	; (8016d88 <__sfp+0x84>)
 8016d0e:	681e      	ldr	r6, [r3, #0]
 8016d10:	69b3      	ldr	r3, [r6, #24]
 8016d12:	b913      	cbnz	r3, 8016d1a <__sfp+0x16>
 8016d14:	4630      	mov	r0, r6
 8016d16:	f7ff ffbd 	bl	8016c94 <__sinit>
 8016d1a:	3648      	adds	r6, #72	; 0x48
 8016d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016d20:	3b01      	subs	r3, #1
 8016d22:	d503      	bpl.n	8016d2c <__sfp+0x28>
 8016d24:	6833      	ldr	r3, [r6, #0]
 8016d26:	b30b      	cbz	r3, 8016d6c <__sfp+0x68>
 8016d28:	6836      	ldr	r6, [r6, #0]
 8016d2a:	e7f7      	b.n	8016d1c <__sfp+0x18>
 8016d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016d30:	b9d5      	cbnz	r5, 8016d68 <__sfp+0x64>
 8016d32:	4b16      	ldr	r3, [pc, #88]	; (8016d8c <__sfp+0x88>)
 8016d34:	60e3      	str	r3, [r4, #12]
 8016d36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016d3a:	6665      	str	r5, [r4, #100]	; 0x64
 8016d3c:	f000 f847 	bl	8016dce <__retarget_lock_init_recursive>
 8016d40:	f7ff ff96 	bl	8016c70 <__sfp_lock_release>
 8016d44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016d48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016d4c:	6025      	str	r5, [r4, #0]
 8016d4e:	61a5      	str	r5, [r4, #24]
 8016d50:	2208      	movs	r2, #8
 8016d52:	4629      	mov	r1, r5
 8016d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016d58:	f7fd faae 	bl	80142b8 <memset>
 8016d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016d64:	4620      	mov	r0, r4
 8016d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d68:	3468      	adds	r4, #104	; 0x68
 8016d6a:	e7d9      	b.n	8016d20 <__sfp+0x1c>
 8016d6c:	2104      	movs	r1, #4
 8016d6e:	4638      	mov	r0, r7
 8016d70:	f7ff ff62 	bl	8016c38 <__sfmoreglue>
 8016d74:	4604      	mov	r4, r0
 8016d76:	6030      	str	r0, [r6, #0]
 8016d78:	2800      	cmp	r0, #0
 8016d7a:	d1d5      	bne.n	8016d28 <__sfp+0x24>
 8016d7c:	f7ff ff78 	bl	8016c70 <__sfp_lock_release>
 8016d80:	230c      	movs	r3, #12
 8016d82:	603b      	str	r3, [r7, #0]
 8016d84:	e7ee      	b.n	8016d64 <__sfp+0x60>
 8016d86:	bf00      	nop
 8016d88:	08021968 	.word	0x08021968
 8016d8c:	ffff0001 	.word	0xffff0001

08016d90 <_fwalk_reent>:
 8016d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d94:	4606      	mov	r6, r0
 8016d96:	4688      	mov	r8, r1
 8016d98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016d9c:	2700      	movs	r7, #0
 8016d9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016da2:	f1b9 0901 	subs.w	r9, r9, #1
 8016da6:	d505      	bpl.n	8016db4 <_fwalk_reent+0x24>
 8016da8:	6824      	ldr	r4, [r4, #0]
 8016daa:	2c00      	cmp	r4, #0
 8016dac:	d1f7      	bne.n	8016d9e <_fwalk_reent+0xe>
 8016dae:	4638      	mov	r0, r7
 8016db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016db4:	89ab      	ldrh	r3, [r5, #12]
 8016db6:	2b01      	cmp	r3, #1
 8016db8:	d907      	bls.n	8016dca <_fwalk_reent+0x3a>
 8016dba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016dbe:	3301      	adds	r3, #1
 8016dc0:	d003      	beq.n	8016dca <_fwalk_reent+0x3a>
 8016dc2:	4629      	mov	r1, r5
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	47c0      	blx	r8
 8016dc8:	4307      	orrs	r7, r0
 8016dca:	3568      	adds	r5, #104	; 0x68
 8016dcc:	e7e9      	b.n	8016da2 <_fwalk_reent+0x12>

08016dce <__retarget_lock_init_recursive>:
 8016dce:	4770      	bx	lr

08016dd0 <__retarget_lock_acquire_recursive>:
 8016dd0:	4770      	bx	lr

08016dd2 <__retarget_lock_release_recursive>:
 8016dd2:	4770      	bx	lr

08016dd4 <__swhatbuf_r>:
 8016dd4:	b570      	push	{r4, r5, r6, lr}
 8016dd6:	460e      	mov	r6, r1
 8016dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ddc:	2900      	cmp	r1, #0
 8016dde:	b096      	sub	sp, #88	; 0x58
 8016de0:	4614      	mov	r4, r2
 8016de2:	461d      	mov	r5, r3
 8016de4:	da08      	bge.n	8016df8 <__swhatbuf_r+0x24>
 8016de6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016dea:	2200      	movs	r2, #0
 8016dec:	602a      	str	r2, [r5, #0]
 8016dee:	061a      	lsls	r2, r3, #24
 8016df0:	d410      	bmi.n	8016e14 <__swhatbuf_r+0x40>
 8016df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016df6:	e00e      	b.n	8016e16 <__swhatbuf_r+0x42>
 8016df8:	466a      	mov	r2, sp
 8016dfa:	f000 f903 	bl	8017004 <_fstat_r>
 8016dfe:	2800      	cmp	r0, #0
 8016e00:	dbf1      	blt.n	8016de6 <__swhatbuf_r+0x12>
 8016e02:	9a01      	ldr	r2, [sp, #4]
 8016e04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016e08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016e0c:	425a      	negs	r2, r3
 8016e0e:	415a      	adcs	r2, r3
 8016e10:	602a      	str	r2, [r5, #0]
 8016e12:	e7ee      	b.n	8016df2 <__swhatbuf_r+0x1e>
 8016e14:	2340      	movs	r3, #64	; 0x40
 8016e16:	2000      	movs	r0, #0
 8016e18:	6023      	str	r3, [r4, #0]
 8016e1a:	b016      	add	sp, #88	; 0x58
 8016e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016e20 <__smakebuf_r>:
 8016e20:	898b      	ldrh	r3, [r1, #12]
 8016e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016e24:	079d      	lsls	r5, r3, #30
 8016e26:	4606      	mov	r6, r0
 8016e28:	460c      	mov	r4, r1
 8016e2a:	d507      	bpl.n	8016e3c <__smakebuf_r+0x1c>
 8016e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016e30:	6023      	str	r3, [r4, #0]
 8016e32:	6123      	str	r3, [r4, #16]
 8016e34:	2301      	movs	r3, #1
 8016e36:	6163      	str	r3, [r4, #20]
 8016e38:	b002      	add	sp, #8
 8016e3a:	bd70      	pop	{r4, r5, r6, pc}
 8016e3c:	ab01      	add	r3, sp, #4
 8016e3e:	466a      	mov	r2, sp
 8016e40:	f7ff ffc8 	bl	8016dd4 <__swhatbuf_r>
 8016e44:	9900      	ldr	r1, [sp, #0]
 8016e46:	4605      	mov	r5, r0
 8016e48:	4630      	mov	r0, r6
 8016e4a:	f7ff f963 	bl	8016114 <_malloc_r>
 8016e4e:	b948      	cbnz	r0, 8016e64 <__smakebuf_r+0x44>
 8016e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e54:	059a      	lsls	r2, r3, #22
 8016e56:	d4ef      	bmi.n	8016e38 <__smakebuf_r+0x18>
 8016e58:	f023 0303 	bic.w	r3, r3, #3
 8016e5c:	f043 0302 	orr.w	r3, r3, #2
 8016e60:	81a3      	strh	r3, [r4, #12]
 8016e62:	e7e3      	b.n	8016e2c <__smakebuf_r+0xc>
 8016e64:	4b0d      	ldr	r3, [pc, #52]	; (8016e9c <__smakebuf_r+0x7c>)
 8016e66:	62b3      	str	r3, [r6, #40]	; 0x28
 8016e68:	89a3      	ldrh	r3, [r4, #12]
 8016e6a:	6020      	str	r0, [r4, #0]
 8016e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e70:	81a3      	strh	r3, [r4, #12]
 8016e72:	9b00      	ldr	r3, [sp, #0]
 8016e74:	6163      	str	r3, [r4, #20]
 8016e76:	9b01      	ldr	r3, [sp, #4]
 8016e78:	6120      	str	r0, [r4, #16]
 8016e7a:	b15b      	cbz	r3, 8016e94 <__smakebuf_r+0x74>
 8016e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e80:	4630      	mov	r0, r6
 8016e82:	f000 f8d1 	bl	8017028 <_isatty_r>
 8016e86:	b128      	cbz	r0, 8016e94 <__smakebuf_r+0x74>
 8016e88:	89a3      	ldrh	r3, [r4, #12]
 8016e8a:	f023 0303 	bic.w	r3, r3, #3
 8016e8e:	f043 0301 	orr.w	r3, r3, #1
 8016e92:	81a3      	strh	r3, [r4, #12]
 8016e94:	89a0      	ldrh	r0, [r4, #12]
 8016e96:	4305      	orrs	r5, r0
 8016e98:	81a5      	strh	r5, [r4, #12]
 8016e9a:	e7cd      	b.n	8016e38 <__smakebuf_r+0x18>
 8016e9c:	08016c2d 	.word	0x08016c2d

08016ea0 <_malloc_usable_size_r>:
 8016ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ea4:	1f18      	subs	r0, r3, #4
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	bfbc      	itt	lt
 8016eaa:	580b      	ldrlt	r3, [r1, r0]
 8016eac:	18c0      	addlt	r0, r0, r3
 8016eae:	4770      	bx	lr

08016eb0 <_raise_r>:
 8016eb0:	291f      	cmp	r1, #31
 8016eb2:	b538      	push	{r3, r4, r5, lr}
 8016eb4:	4604      	mov	r4, r0
 8016eb6:	460d      	mov	r5, r1
 8016eb8:	d904      	bls.n	8016ec4 <_raise_r+0x14>
 8016eba:	2316      	movs	r3, #22
 8016ebc:	6003      	str	r3, [r0, #0]
 8016ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8016ec2:	bd38      	pop	{r3, r4, r5, pc}
 8016ec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016ec6:	b112      	cbz	r2, 8016ece <_raise_r+0x1e>
 8016ec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016ecc:	b94b      	cbnz	r3, 8016ee2 <_raise_r+0x32>
 8016ece:	4620      	mov	r0, r4
 8016ed0:	f000 f830 	bl	8016f34 <_getpid_r>
 8016ed4:	462a      	mov	r2, r5
 8016ed6:	4601      	mov	r1, r0
 8016ed8:	4620      	mov	r0, r4
 8016eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ede:	f000 b817 	b.w	8016f10 <_kill_r>
 8016ee2:	2b01      	cmp	r3, #1
 8016ee4:	d00a      	beq.n	8016efc <_raise_r+0x4c>
 8016ee6:	1c59      	adds	r1, r3, #1
 8016ee8:	d103      	bne.n	8016ef2 <_raise_r+0x42>
 8016eea:	2316      	movs	r3, #22
 8016eec:	6003      	str	r3, [r0, #0]
 8016eee:	2001      	movs	r0, #1
 8016ef0:	e7e7      	b.n	8016ec2 <_raise_r+0x12>
 8016ef2:	2400      	movs	r4, #0
 8016ef4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016ef8:	4628      	mov	r0, r5
 8016efa:	4798      	blx	r3
 8016efc:	2000      	movs	r0, #0
 8016efe:	e7e0      	b.n	8016ec2 <_raise_r+0x12>

08016f00 <raise>:
 8016f00:	4b02      	ldr	r3, [pc, #8]	; (8016f0c <raise+0xc>)
 8016f02:	4601      	mov	r1, r0
 8016f04:	6818      	ldr	r0, [r3, #0]
 8016f06:	f7ff bfd3 	b.w	8016eb0 <_raise_r>
 8016f0a:	bf00      	nop
 8016f0c:	2000006c 	.word	0x2000006c

08016f10 <_kill_r>:
 8016f10:	b538      	push	{r3, r4, r5, lr}
 8016f12:	4d07      	ldr	r5, [pc, #28]	; (8016f30 <_kill_r+0x20>)
 8016f14:	2300      	movs	r3, #0
 8016f16:	4604      	mov	r4, r0
 8016f18:	4608      	mov	r0, r1
 8016f1a:	4611      	mov	r1, r2
 8016f1c:	602b      	str	r3, [r5, #0]
 8016f1e:	f7f9 fc55 	bl	80107cc <_kill>
 8016f22:	1c43      	adds	r3, r0, #1
 8016f24:	d102      	bne.n	8016f2c <_kill_r+0x1c>
 8016f26:	682b      	ldr	r3, [r5, #0]
 8016f28:	b103      	cbz	r3, 8016f2c <_kill_r+0x1c>
 8016f2a:	6023      	str	r3, [r4, #0]
 8016f2c:	bd38      	pop	{r3, r4, r5, pc}
 8016f2e:	bf00      	nop
 8016f30:	20000518 	.word	0x20000518

08016f34 <_getpid_r>:
 8016f34:	f7f9 bc42 	b.w	80107bc <_getpid>

08016f38 <__sread>:
 8016f38:	b510      	push	{r4, lr}
 8016f3a:	460c      	mov	r4, r1
 8016f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f40:	f000 f894 	bl	801706c <_read_r>
 8016f44:	2800      	cmp	r0, #0
 8016f46:	bfab      	itete	ge
 8016f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8016f4c:	181b      	addge	r3, r3, r0
 8016f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016f52:	bfac      	ite	ge
 8016f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8016f56:	81a3      	strhlt	r3, [r4, #12]
 8016f58:	bd10      	pop	{r4, pc}

08016f5a <__swrite>:
 8016f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f5e:	461f      	mov	r7, r3
 8016f60:	898b      	ldrh	r3, [r1, #12]
 8016f62:	05db      	lsls	r3, r3, #23
 8016f64:	4605      	mov	r5, r0
 8016f66:	460c      	mov	r4, r1
 8016f68:	4616      	mov	r6, r2
 8016f6a:	d505      	bpl.n	8016f78 <__swrite+0x1e>
 8016f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f70:	2302      	movs	r3, #2
 8016f72:	2200      	movs	r2, #0
 8016f74:	f000 f868 	bl	8017048 <_lseek_r>
 8016f78:	89a3      	ldrh	r3, [r4, #12]
 8016f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016f82:	81a3      	strh	r3, [r4, #12]
 8016f84:	4632      	mov	r2, r6
 8016f86:	463b      	mov	r3, r7
 8016f88:	4628      	mov	r0, r5
 8016f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f8e:	f000 b817 	b.w	8016fc0 <_write_r>

08016f92 <__sseek>:
 8016f92:	b510      	push	{r4, lr}
 8016f94:	460c      	mov	r4, r1
 8016f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f9a:	f000 f855 	bl	8017048 <_lseek_r>
 8016f9e:	1c43      	adds	r3, r0, #1
 8016fa0:	89a3      	ldrh	r3, [r4, #12]
 8016fa2:	bf15      	itete	ne
 8016fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8016fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016fae:	81a3      	strheq	r3, [r4, #12]
 8016fb0:	bf18      	it	ne
 8016fb2:	81a3      	strhne	r3, [r4, #12]
 8016fb4:	bd10      	pop	{r4, pc}

08016fb6 <__sclose>:
 8016fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fba:	f000 b813 	b.w	8016fe4 <_close_r>
	...

08016fc0 <_write_r>:
 8016fc0:	b538      	push	{r3, r4, r5, lr}
 8016fc2:	4d07      	ldr	r5, [pc, #28]	; (8016fe0 <_write_r+0x20>)
 8016fc4:	4604      	mov	r4, r0
 8016fc6:	4608      	mov	r0, r1
 8016fc8:	4611      	mov	r1, r2
 8016fca:	2200      	movs	r2, #0
 8016fcc:	602a      	str	r2, [r5, #0]
 8016fce:	461a      	mov	r2, r3
 8016fd0:	f7f9 fc33 	bl	801083a <_write>
 8016fd4:	1c43      	adds	r3, r0, #1
 8016fd6:	d102      	bne.n	8016fde <_write_r+0x1e>
 8016fd8:	682b      	ldr	r3, [r5, #0]
 8016fda:	b103      	cbz	r3, 8016fde <_write_r+0x1e>
 8016fdc:	6023      	str	r3, [r4, #0]
 8016fde:	bd38      	pop	{r3, r4, r5, pc}
 8016fe0:	20000518 	.word	0x20000518

08016fe4 <_close_r>:
 8016fe4:	b538      	push	{r3, r4, r5, lr}
 8016fe6:	4d06      	ldr	r5, [pc, #24]	; (8017000 <_close_r+0x1c>)
 8016fe8:	2300      	movs	r3, #0
 8016fea:	4604      	mov	r4, r0
 8016fec:	4608      	mov	r0, r1
 8016fee:	602b      	str	r3, [r5, #0]
 8016ff0:	f7f9 fc3f 	bl	8010872 <_close>
 8016ff4:	1c43      	adds	r3, r0, #1
 8016ff6:	d102      	bne.n	8016ffe <_close_r+0x1a>
 8016ff8:	682b      	ldr	r3, [r5, #0]
 8016ffa:	b103      	cbz	r3, 8016ffe <_close_r+0x1a>
 8016ffc:	6023      	str	r3, [r4, #0]
 8016ffe:	bd38      	pop	{r3, r4, r5, pc}
 8017000:	20000518 	.word	0x20000518

08017004 <_fstat_r>:
 8017004:	b538      	push	{r3, r4, r5, lr}
 8017006:	4d07      	ldr	r5, [pc, #28]	; (8017024 <_fstat_r+0x20>)
 8017008:	2300      	movs	r3, #0
 801700a:	4604      	mov	r4, r0
 801700c:	4608      	mov	r0, r1
 801700e:	4611      	mov	r1, r2
 8017010:	602b      	str	r3, [r5, #0]
 8017012:	f7f9 fc3a 	bl	801088a <_fstat>
 8017016:	1c43      	adds	r3, r0, #1
 8017018:	d102      	bne.n	8017020 <_fstat_r+0x1c>
 801701a:	682b      	ldr	r3, [r5, #0]
 801701c:	b103      	cbz	r3, 8017020 <_fstat_r+0x1c>
 801701e:	6023      	str	r3, [r4, #0]
 8017020:	bd38      	pop	{r3, r4, r5, pc}
 8017022:	bf00      	nop
 8017024:	20000518 	.word	0x20000518

08017028 <_isatty_r>:
 8017028:	b538      	push	{r3, r4, r5, lr}
 801702a:	4d06      	ldr	r5, [pc, #24]	; (8017044 <_isatty_r+0x1c>)
 801702c:	2300      	movs	r3, #0
 801702e:	4604      	mov	r4, r0
 8017030:	4608      	mov	r0, r1
 8017032:	602b      	str	r3, [r5, #0]
 8017034:	f7f9 fc39 	bl	80108aa <_isatty>
 8017038:	1c43      	adds	r3, r0, #1
 801703a:	d102      	bne.n	8017042 <_isatty_r+0x1a>
 801703c:	682b      	ldr	r3, [r5, #0]
 801703e:	b103      	cbz	r3, 8017042 <_isatty_r+0x1a>
 8017040:	6023      	str	r3, [r4, #0]
 8017042:	bd38      	pop	{r3, r4, r5, pc}
 8017044:	20000518 	.word	0x20000518

08017048 <_lseek_r>:
 8017048:	b538      	push	{r3, r4, r5, lr}
 801704a:	4d07      	ldr	r5, [pc, #28]	; (8017068 <_lseek_r+0x20>)
 801704c:	4604      	mov	r4, r0
 801704e:	4608      	mov	r0, r1
 8017050:	4611      	mov	r1, r2
 8017052:	2200      	movs	r2, #0
 8017054:	602a      	str	r2, [r5, #0]
 8017056:	461a      	mov	r2, r3
 8017058:	f7f9 fc32 	bl	80108c0 <_lseek>
 801705c:	1c43      	adds	r3, r0, #1
 801705e:	d102      	bne.n	8017066 <_lseek_r+0x1e>
 8017060:	682b      	ldr	r3, [r5, #0]
 8017062:	b103      	cbz	r3, 8017066 <_lseek_r+0x1e>
 8017064:	6023      	str	r3, [r4, #0]
 8017066:	bd38      	pop	{r3, r4, r5, pc}
 8017068:	20000518 	.word	0x20000518

0801706c <_read_r>:
 801706c:	b538      	push	{r3, r4, r5, lr}
 801706e:	4d07      	ldr	r5, [pc, #28]	; (801708c <_read_r+0x20>)
 8017070:	4604      	mov	r4, r0
 8017072:	4608      	mov	r0, r1
 8017074:	4611      	mov	r1, r2
 8017076:	2200      	movs	r2, #0
 8017078:	602a      	str	r2, [r5, #0]
 801707a:	461a      	mov	r2, r3
 801707c:	f7f9 fbc0 	bl	8010800 <_read>
 8017080:	1c43      	adds	r3, r0, #1
 8017082:	d102      	bne.n	801708a <_read_r+0x1e>
 8017084:	682b      	ldr	r3, [r5, #0]
 8017086:	b103      	cbz	r3, 801708a <_read_r+0x1e>
 8017088:	6023      	str	r3, [r4, #0]
 801708a:	bd38      	pop	{r3, r4, r5, pc}
 801708c:	20000518 	.word	0x20000518

08017090 <_init>:
 8017090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017092:	bf00      	nop
 8017094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017096:	bc08      	pop	{r3}
 8017098:	469e      	mov	lr, r3
 801709a:	4770      	bx	lr

0801709c <_fini>:
 801709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801709e:	bf00      	nop
 80170a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170a2:	bc08      	pop	{r3}
 80170a4:	469e      	mov	lr, r3
 80170a6:	4770      	bx	lr
