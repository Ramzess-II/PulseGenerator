
PulseGeneratorILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  20000000  20000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c68  20000198  20000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005714  20003e00  20003e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20009514  20009514  00019544  2**0
                  CONTENTS
  4 .ARM          00000008  20009514  20009514  00019514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  2000951c  20009544  00019544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2000951c  2000951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  20009520  20009520  00019520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20009524  20009524  00019524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20009544  20009544  00019544  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009694  20009694  00019544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019544  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e939  00000000  00000000  00019574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002341  00000000  00000000  00027ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  0002a1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00003817  00000000  00000000  0002afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001090b  00000000  00000000  0002e7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008ee15  00000000  00000000  0003f102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000cdf17  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ce8  00000000  00000000  000cdf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003930  00000000  00000000  000cec50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

20000198 <__do_global_dtors_aux>:
20000198:	b510      	push	{r4, lr}
2000019a:	4c05      	ldr	r4, [pc, #20]	; (200001b0 <__do_global_dtors_aux+0x18>)
2000019c:	7823      	ldrb	r3, [r4, #0]
2000019e:	b933      	cbnz	r3, 200001ae <__do_global_dtors_aux+0x16>
200001a0:	4b04      	ldr	r3, [pc, #16]	; (200001b4 <__do_global_dtors_aux+0x1c>)
200001a2:	b113      	cbz	r3, 200001aa <__do_global_dtors_aux+0x12>
200001a4:	4804      	ldr	r0, [pc, #16]	; (200001b8 <__do_global_dtors_aux+0x20>)
200001a6:	f3af 8000 	nop.w
200001aa:	2301      	movs	r3, #1
200001ac:	7023      	strb	r3, [r4, #0]
200001ae:	bd10      	pop	{r4, pc}
200001b0:	20009544 	.word	0x20009544
200001b4:	00000000 	.word	0x00000000
200001b8:	20003de8 	.word	0x20003de8

200001bc <frame_dummy>:
200001bc:	b508      	push	{r3, lr}
200001be:	4b03      	ldr	r3, [pc, #12]	; (200001cc <frame_dummy+0x10>)
200001c0:	b11b      	cbz	r3, 200001ca <frame_dummy+0xe>
200001c2:	4903      	ldr	r1, [pc, #12]	; (200001d0 <frame_dummy+0x14>)
200001c4:	4803      	ldr	r0, [pc, #12]	; (200001d4 <frame_dummy+0x18>)
200001c6:	f3af 8000 	nop.w
200001ca:	bd08      	pop	{r3, pc}
200001cc:	00000000 	.word	0x00000000
200001d0:	20009548 	.word	0x20009548
200001d4:	20003de8 	.word	0x20003de8

200001d8 <__aeabi_uldivmod>:
200001d8:	b953      	cbnz	r3, 200001f0 <__aeabi_uldivmod+0x18>
200001da:	b94a      	cbnz	r2, 200001f0 <__aeabi_uldivmod+0x18>
200001dc:	2900      	cmp	r1, #0
200001de:	bf08      	it	eq
200001e0:	2800      	cmpeq	r0, #0
200001e2:	bf1c      	itt	ne
200001e4:	f04f 31ff 	movne.w	r1, #4294967295
200001e8:	f04f 30ff 	movne.w	r0, #4294967295
200001ec:	f000 b974 	b.w	200004d8 <__aeabi_idiv0>
200001f0:	f1ad 0c08 	sub.w	ip, sp, #8
200001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
200001f8:	f000 f806 	bl	20000208 <__udivmoddi4>
200001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
20000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000204:	b004      	add	sp, #16
20000206:	4770      	bx	lr

20000208 <__udivmoddi4>:
20000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000020c:	9d08      	ldr	r5, [sp, #32]
2000020e:	4604      	mov	r4, r0
20000210:	468e      	mov	lr, r1
20000212:	2b00      	cmp	r3, #0
20000214:	d14d      	bne.n	200002b2 <__udivmoddi4+0xaa>
20000216:	428a      	cmp	r2, r1
20000218:	4694      	mov	ip, r2
2000021a:	d969      	bls.n	200002f0 <__udivmoddi4+0xe8>
2000021c:	fab2 f282 	clz	r2, r2
20000220:	b152      	cbz	r2, 20000238 <__udivmoddi4+0x30>
20000222:	fa01 f302 	lsl.w	r3, r1, r2
20000226:	f1c2 0120 	rsb	r1, r2, #32
2000022a:	fa20 f101 	lsr.w	r1, r0, r1
2000022e:	fa0c fc02 	lsl.w	ip, ip, r2
20000232:	ea41 0e03 	orr.w	lr, r1, r3
20000236:	4094      	lsls	r4, r2
20000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
2000023c:	0c21      	lsrs	r1, r4, #16
2000023e:	fbbe f6f8 	udiv	r6, lr, r8
20000242:	fa1f f78c 	uxth.w	r7, ip
20000246:	fb08 e316 	mls	r3, r8, r6, lr
2000024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
2000024e:	fb06 f107 	mul.w	r1, r6, r7
20000252:	4299      	cmp	r1, r3
20000254:	d90a      	bls.n	2000026c <__udivmoddi4+0x64>
20000256:	eb1c 0303 	adds.w	r3, ip, r3
2000025a:	f106 30ff 	add.w	r0, r6, #4294967295
2000025e:	f080 811f 	bcs.w	200004a0 <__udivmoddi4+0x298>
20000262:	4299      	cmp	r1, r3
20000264:	f240 811c 	bls.w	200004a0 <__udivmoddi4+0x298>
20000268:	3e02      	subs	r6, #2
2000026a:	4463      	add	r3, ip
2000026c:	1a5b      	subs	r3, r3, r1
2000026e:	b2a4      	uxth	r4, r4
20000270:	fbb3 f0f8 	udiv	r0, r3, r8
20000274:	fb08 3310 	mls	r3, r8, r0, r3
20000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
2000027c:	fb00 f707 	mul.w	r7, r0, r7
20000280:	42a7      	cmp	r7, r4
20000282:	d90a      	bls.n	2000029a <__udivmoddi4+0x92>
20000284:	eb1c 0404 	adds.w	r4, ip, r4
20000288:	f100 33ff 	add.w	r3, r0, #4294967295
2000028c:	f080 810a 	bcs.w	200004a4 <__udivmoddi4+0x29c>
20000290:	42a7      	cmp	r7, r4
20000292:	f240 8107 	bls.w	200004a4 <__udivmoddi4+0x29c>
20000296:	4464      	add	r4, ip
20000298:	3802      	subs	r0, #2
2000029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
2000029e:	1be4      	subs	r4, r4, r7
200002a0:	2600      	movs	r6, #0
200002a2:	b11d      	cbz	r5, 200002ac <__udivmoddi4+0xa4>
200002a4:	40d4      	lsrs	r4, r2
200002a6:	2300      	movs	r3, #0
200002a8:	e9c5 4300 	strd	r4, r3, [r5]
200002ac:	4631      	mov	r1, r6
200002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200002b2:	428b      	cmp	r3, r1
200002b4:	d909      	bls.n	200002ca <__udivmoddi4+0xc2>
200002b6:	2d00      	cmp	r5, #0
200002b8:	f000 80ef 	beq.w	2000049a <__udivmoddi4+0x292>
200002bc:	2600      	movs	r6, #0
200002be:	e9c5 0100 	strd	r0, r1, [r5]
200002c2:	4630      	mov	r0, r6
200002c4:	4631      	mov	r1, r6
200002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200002ca:	fab3 f683 	clz	r6, r3
200002ce:	2e00      	cmp	r6, #0
200002d0:	d14a      	bne.n	20000368 <__udivmoddi4+0x160>
200002d2:	428b      	cmp	r3, r1
200002d4:	d302      	bcc.n	200002dc <__udivmoddi4+0xd4>
200002d6:	4282      	cmp	r2, r0
200002d8:	f200 80f9 	bhi.w	200004ce <__udivmoddi4+0x2c6>
200002dc:	1a84      	subs	r4, r0, r2
200002de:	eb61 0303 	sbc.w	r3, r1, r3
200002e2:	2001      	movs	r0, #1
200002e4:	469e      	mov	lr, r3
200002e6:	2d00      	cmp	r5, #0
200002e8:	d0e0      	beq.n	200002ac <__udivmoddi4+0xa4>
200002ea:	e9c5 4e00 	strd	r4, lr, [r5]
200002ee:	e7dd      	b.n	200002ac <__udivmoddi4+0xa4>
200002f0:	b902      	cbnz	r2, 200002f4 <__udivmoddi4+0xec>
200002f2:	deff      	udf	#255	; 0xff
200002f4:	fab2 f282 	clz	r2, r2
200002f8:	2a00      	cmp	r2, #0
200002fa:	f040 8092 	bne.w	20000422 <__udivmoddi4+0x21a>
200002fe:	eba1 010c 	sub.w	r1, r1, ip
20000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
20000306:	fa1f fe8c 	uxth.w	lr, ip
2000030a:	2601      	movs	r6, #1
2000030c:	0c20      	lsrs	r0, r4, #16
2000030e:	fbb1 f3f7 	udiv	r3, r1, r7
20000312:	fb07 1113 	mls	r1, r7, r3, r1
20000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
2000031a:	fb0e f003 	mul.w	r0, lr, r3
2000031e:	4288      	cmp	r0, r1
20000320:	d908      	bls.n	20000334 <__udivmoddi4+0x12c>
20000322:	eb1c 0101 	adds.w	r1, ip, r1
20000326:	f103 38ff 	add.w	r8, r3, #4294967295
2000032a:	d202      	bcs.n	20000332 <__udivmoddi4+0x12a>
2000032c:	4288      	cmp	r0, r1
2000032e:	f200 80cb 	bhi.w	200004c8 <__udivmoddi4+0x2c0>
20000332:	4643      	mov	r3, r8
20000334:	1a09      	subs	r1, r1, r0
20000336:	b2a4      	uxth	r4, r4
20000338:	fbb1 f0f7 	udiv	r0, r1, r7
2000033c:	fb07 1110 	mls	r1, r7, r0, r1
20000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
20000344:	fb0e fe00 	mul.w	lr, lr, r0
20000348:	45a6      	cmp	lr, r4
2000034a:	d908      	bls.n	2000035e <__udivmoddi4+0x156>
2000034c:	eb1c 0404 	adds.w	r4, ip, r4
20000350:	f100 31ff 	add.w	r1, r0, #4294967295
20000354:	d202      	bcs.n	2000035c <__udivmoddi4+0x154>
20000356:	45a6      	cmp	lr, r4
20000358:	f200 80bb 	bhi.w	200004d2 <__udivmoddi4+0x2ca>
2000035c:	4608      	mov	r0, r1
2000035e:	eba4 040e 	sub.w	r4, r4, lr
20000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
20000366:	e79c      	b.n	200002a2 <__udivmoddi4+0x9a>
20000368:	f1c6 0720 	rsb	r7, r6, #32
2000036c:	40b3      	lsls	r3, r6
2000036e:	fa22 fc07 	lsr.w	ip, r2, r7
20000372:	ea4c 0c03 	orr.w	ip, ip, r3
20000376:	fa20 f407 	lsr.w	r4, r0, r7
2000037a:	fa01 f306 	lsl.w	r3, r1, r6
2000037e:	431c      	orrs	r4, r3
20000380:	40f9      	lsrs	r1, r7
20000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
20000386:	fa00 f306 	lsl.w	r3, r0, r6
2000038a:	fbb1 f8f9 	udiv	r8, r1, r9
2000038e:	0c20      	lsrs	r0, r4, #16
20000390:	fa1f fe8c 	uxth.w	lr, ip
20000394:	fb09 1118 	mls	r1, r9, r8, r1
20000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
2000039c:	fb08 f00e 	mul.w	r0, r8, lr
200003a0:	4288      	cmp	r0, r1
200003a2:	fa02 f206 	lsl.w	r2, r2, r6
200003a6:	d90b      	bls.n	200003c0 <__udivmoddi4+0x1b8>
200003a8:	eb1c 0101 	adds.w	r1, ip, r1
200003ac:	f108 3aff 	add.w	sl, r8, #4294967295
200003b0:	f080 8088 	bcs.w	200004c4 <__udivmoddi4+0x2bc>
200003b4:	4288      	cmp	r0, r1
200003b6:	f240 8085 	bls.w	200004c4 <__udivmoddi4+0x2bc>
200003ba:	f1a8 0802 	sub.w	r8, r8, #2
200003be:	4461      	add	r1, ip
200003c0:	1a09      	subs	r1, r1, r0
200003c2:	b2a4      	uxth	r4, r4
200003c4:	fbb1 f0f9 	udiv	r0, r1, r9
200003c8:	fb09 1110 	mls	r1, r9, r0, r1
200003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
200003d0:	fb00 fe0e 	mul.w	lr, r0, lr
200003d4:	458e      	cmp	lr, r1
200003d6:	d908      	bls.n	200003ea <__udivmoddi4+0x1e2>
200003d8:	eb1c 0101 	adds.w	r1, ip, r1
200003dc:	f100 34ff 	add.w	r4, r0, #4294967295
200003e0:	d26c      	bcs.n	200004bc <__udivmoddi4+0x2b4>
200003e2:	458e      	cmp	lr, r1
200003e4:	d96a      	bls.n	200004bc <__udivmoddi4+0x2b4>
200003e6:	3802      	subs	r0, #2
200003e8:	4461      	add	r1, ip
200003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
200003ee:	fba0 9402 	umull	r9, r4, r0, r2
200003f2:	eba1 010e 	sub.w	r1, r1, lr
200003f6:	42a1      	cmp	r1, r4
200003f8:	46c8      	mov	r8, r9
200003fa:	46a6      	mov	lr, r4
200003fc:	d356      	bcc.n	200004ac <__udivmoddi4+0x2a4>
200003fe:	d053      	beq.n	200004a8 <__udivmoddi4+0x2a0>
20000400:	b15d      	cbz	r5, 2000041a <__udivmoddi4+0x212>
20000402:	ebb3 0208 	subs.w	r2, r3, r8
20000406:	eb61 010e 	sbc.w	r1, r1, lr
2000040a:	fa01 f707 	lsl.w	r7, r1, r7
2000040e:	fa22 f306 	lsr.w	r3, r2, r6
20000412:	40f1      	lsrs	r1, r6
20000414:	431f      	orrs	r7, r3
20000416:	e9c5 7100 	strd	r7, r1, [r5]
2000041a:	2600      	movs	r6, #0
2000041c:	4631      	mov	r1, r6
2000041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000422:	f1c2 0320 	rsb	r3, r2, #32
20000426:	40d8      	lsrs	r0, r3
20000428:	fa0c fc02 	lsl.w	ip, ip, r2
2000042c:	fa21 f303 	lsr.w	r3, r1, r3
20000430:	4091      	lsls	r1, r2
20000432:	4301      	orrs	r1, r0
20000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
20000438:	fa1f fe8c 	uxth.w	lr, ip
2000043c:	fbb3 f0f7 	udiv	r0, r3, r7
20000440:	fb07 3610 	mls	r6, r7, r0, r3
20000444:	0c0b      	lsrs	r3, r1, #16
20000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
2000044a:	fb00 f60e 	mul.w	r6, r0, lr
2000044e:	429e      	cmp	r6, r3
20000450:	fa04 f402 	lsl.w	r4, r4, r2
20000454:	d908      	bls.n	20000468 <__udivmoddi4+0x260>
20000456:	eb1c 0303 	adds.w	r3, ip, r3
2000045a:	f100 38ff 	add.w	r8, r0, #4294967295
2000045e:	d22f      	bcs.n	200004c0 <__udivmoddi4+0x2b8>
20000460:	429e      	cmp	r6, r3
20000462:	d92d      	bls.n	200004c0 <__udivmoddi4+0x2b8>
20000464:	3802      	subs	r0, #2
20000466:	4463      	add	r3, ip
20000468:	1b9b      	subs	r3, r3, r6
2000046a:	b289      	uxth	r1, r1
2000046c:	fbb3 f6f7 	udiv	r6, r3, r7
20000470:	fb07 3316 	mls	r3, r7, r6, r3
20000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
20000478:	fb06 f30e 	mul.w	r3, r6, lr
2000047c:	428b      	cmp	r3, r1
2000047e:	d908      	bls.n	20000492 <__udivmoddi4+0x28a>
20000480:	eb1c 0101 	adds.w	r1, ip, r1
20000484:	f106 38ff 	add.w	r8, r6, #4294967295
20000488:	d216      	bcs.n	200004b8 <__udivmoddi4+0x2b0>
2000048a:	428b      	cmp	r3, r1
2000048c:	d914      	bls.n	200004b8 <__udivmoddi4+0x2b0>
2000048e:	3e02      	subs	r6, #2
20000490:	4461      	add	r1, ip
20000492:	1ac9      	subs	r1, r1, r3
20000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
20000498:	e738      	b.n	2000030c <__udivmoddi4+0x104>
2000049a:	462e      	mov	r6, r5
2000049c:	4628      	mov	r0, r5
2000049e:	e705      	b.n	200002ac <__udivmoddi4+0xa4>
200004a0:	4606      	mov	r6, r0
200004a2:	e6e3      	b.n	2000026c <__udivmoddi4+0x64>
200004a4:	4618      	mov	r0, r3
200004a6:	e6f8      	b.n	2000029a <__udivmoddi4+0x92>
200004a8:	454b      	cmp	r3, r9
200004aa:	d2a9      	bcs.n	20000400 <__udivmoddi4+0x1f8>
200004ac:	ebb9 0802 	subs.w	r8, r9, r2
200004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
200004b4:	3801      	subs	r0, #1
200004b6:	e7a3      	b.n	20000400 <__udivmoddi4+0x1f8>
200004b8:	4646      	mov	r6, r8
200004ba:	e7ea      	b.n	20000492 <__udivmoddi4+0x28a>
200004bc:	4620      	mov	r0, r4
200004be:	e794      	b.n	200003ea <__udivmoddi4+0x1e2>
200004c0:	4640      	mov	r0, r8
200004c2:	e7d1      	b.n	20000468 <__udivmoddi4+0x260>
200004c4:	46d0      	mov	r8, sl
200004c6:	e77b      	b.n	200003c0 <__udivmoddi4+0x1b8>
200004c8:	3b02      	subs	r3, #2
200004ca:	4461      	add	r1, ip
200004cc:	e732      	b.n	20000334 <__udivmoddi4+0x12c>
200004ce:	4630      	mov	r0, r6
200004d0:	e709      	b.n	200002e6 <__udivmoddi4+0xde>
200004d2:	4464      	add	r4, ip
200004d4:	3802      	subs	r0, #2
200004d6:	e742      	b.n	2000035e <__udivmoddi4+0x156>

200004d8 <__aeabi_idiv0>:
200004d8:	4770      	bx	lr
200004da:	bf00      	nop

200004dc <mySPISend>:
/**************************************************************************
 @brief     функция для отправки в SPI. + ожидание окончания передачи.
 @param    buff указатель на буфер отправки
 @param    buff_size размер буфера
 **************************************************************************/
void mySPISend(uint8_t *buff, uint16_t buff_size) {
200004dc:	b480      	push	{r7}
200004de:	b083      	sub	sp, #12
200004e0:	af00      	add	r7, sp, #0
200004e2:	6078      	str	r0, [r7, #4]
200004e4:	460b      	mov	r3, r1
200004e6:	807b      	strh	r3, [r7, #2]
	while (buff_size > 0) {
200004e8:	e010      	b.n	2000050c <mySPISend+0x30>
		SPI1->DR = *buff;
200004ea:	687b      	ldr	r3, [r7, #4]
200004ec:	781a      	ldrb	r2, [r3, #0]
200004ee:	4b10      	ldr	r3, [pc, #64]	; (20000530 <mySPISend+0x54>)
200004f0:	60da      	str	r2, [r3, #12]
		while (!READ_BIT(SPI1->SR, SPI_SR_TXE))
200004f2:	bf00      	nop
200004f4:	4b0e      	ldr	r3, [pc, #56]	; (20000530 <mySPISend+0x54>)
200004f6:	689b      	ldr	r3, [r3, #8]
200004f8:	f003 0302 	and.w	r3, r3, #2
200004fc:	2b00      	cmp	r3, #0
200004fe:	d0f9      	beq.n	200004f4 <mySPISend+0x18>
			;
		buff++;
20000500:	687b      	ldr	r3, [r7, #4]
20000502:	3301      	adds	r3, #1
20000504:	607b      	str	r3, [r7, #4]
		buff_size--;
20000506:	887b      	ldrh	r3, [r7, #2]
20000508:	3b01      	subs	r3, #1
2000050a:	807b      	strh	r3, [r7, #2]
	while (buff_size > 0) {
2000050c:	887b      	ldrh	r3, [r7, #2]
2000050e:	2b00      	cmp	r3, #0
20000510:	d1eb      	bne.n	200004ea <mySPISend+0xe>
	}
	while (READ_BIT(SPI1->SR, SPI_SR_BSY))
20000512:	bf00      	nop
20000514:	4b06      	ldr	r3, [pc, #24]	; (20000530 <mySPISend+0x54>)
20000516:	689b      	ldr	r3, [r3, #8]
20000518:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000051c:	2b00      	cmp	r3, #0
2000051e:	d1f9      	bne.n	20000514 <mySPISend+0x38>
		;
}
20000520:	bf00      	nop
20000522:	bf00      	nop
20000524:	370c      	adds	r7, #12
20000526:	46bd      	mov	sp, r7
20000528:	f85d 7b04 	ldr.w	r7, [sp], #4
2000052c:	4770      	bx	lr
2000052e:	bf00      	nop
20000530:	40013000 	.word	0x40013000

20000534 <ILI9341_Select>:

/**************************************************************************
 @brief     drive pin CS to GND
 **************************************************************************/
void ILI9341_Select() {
20000534:	b480      	push	{r7}
20000536:	af00      	add	r7, sp, #0
	CS_RESET;
20000538:	4b05      	ldr	r3, [pc, #20]	; (20000550 <ILI9341_Select+0x1c>)
2000053a:	699b      	ldr	r3, [r3, #24]
2000053c:	4a04      	ldr	r2, [pc, #16]	; (20000550 <ILI9341_Select+0x1c>)
2000053e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20000542:	6193      	str	r3, [r2, #24]
	//HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
}
20000544:	bf00      	nop
20000546:	46bd      	mov	sp, r7
20000548:	f85d 7b04 	ldr.w	r7, [sp], #4
2000054c:	4770      	bx	lr
2000054e:	bf00      	nop
20000550:	40020400 	.word	0x40020400

20000554 <ILI9341_Unselect>:

/**************************************************************************
 @brief     drive pin CS to UP
 **************************************************************************/
void ILI9341_Unselect() {
20000554:	b480      	push	{r7}
20000556:	af00      	add	r7, sp, #0
	CS_SET;
20000558:	4b05      	ldr	r3, [pc, #20]	; (20000570 <ILI9341_Unselect+0x1c>)
2000055a:	699b      	ldr	r3, [r3, #24]
2000055c:	4a04      	ldr	r2, [pc, #16]	; (20000570 <ILI9341_Unselect+0x1c>)
2000055e:	f043 0304 	orr.w	r3, r3, #4
20000562:	6193      	str	r3, [r2, #24]
	//HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
}
20000564:	bf00      	nop
20000566:	46bd      	mov	sp, r7
20000568:	f85d 7b04 	ldr.w	r7, [sp], #4
2000056c:	4770      	bx	lr
2000056e:	bf00      	nop
20000570:	40020400 	.word	0x40020400

20000574 <ILI9341_Reset>:

/**************************************************************************
 @brief     drive pin Reset
 **************************************************************************/
static void ILI9341_Reset() {
20000574:	b580      	push	{r7, lr}
20000576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
20000578:	2200      	movs	r2, #0
2000057a:	2102      	movs	r1, #2
2000057c:	4806      	ldr	r0, [pc, #24]	; (20000598 <ILI9341_Reset+0x24>)
2000057e:	f002 f81f 	bl	200025c0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
20000582:	2005      	movs	r0, #5
20000584:	f001 fd76 	bl	20002074 <HAL_Delay>
	HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
20000588:	2201      	movs	r2, #1
2000058a:	2102      	movs	r1, #2
2000058c:	4802      	ldr	r0, [pc, #8]	; (20000598 <ILI9341_Reset+0x24>)
2000058e:	f002 f817 	bl	200025c0 <HAL_GPIO_WritePin>
}
20000592:	bf00      	nop
20000594:	bd80      	pop	{r7, pc}
20000596:	bf00      	nop
20000598:	40020400 	.word	0x40020400

2000059c <ILI9341_WriteCommand>:

/**************************************************************************
 @brief     write comand to display
 @param    cmd number comand
 **************************************************************************/
static void ILI9341_WriteCommand(uint8_t cmd) {
2000059c:	b580      	push	{r7, lr}
2000059e:	b082      	sub	sp, #8
200005a0:	af00      	add	r7, sp, #0
200005a2:	4603      	mov	r3, r0
200005a4:	71fb      	strb	r3, [r7, #7]
	DC_RESET;                      // данные или команда
200005a6:	4b07      	ldr	r3, [pc, #28]	; (200005c4 <ILI9341_WriteCommand+0x28>)
200005a8:	699b      	ldr	r3, [r3, #24]
200005aa:	4a06      	ldr	r2, [pc, #24]	; (200005c4 <ILI9341_WriteCommand+0x28>)
200005ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200005b0:	6193      	str	r3, [r2, #24]
	mySPISend(&cmd, 1);
200005b2:	1dfb      	adds	r3, r7, #7
200005b4:	2101      	movs	r1, #1
200005b6:	4618      	mov	r0, r3
200005b8:	f7ff ff90 	bl	200004dc <mySPISend>
}
200005bc:	bf00      	nop
200005be:	3708      	adds	r7, #8
200005c0:	46bd      	mov	sp, r7
200005c2:	bd80      	pop	{r7, pc}
200005c4:	40020400 	.word	0x40020400

200005c8 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t *buff, size_t buff_size) {
200005c8:	b580      	push	{r7, lr}
200005ca:	b084      	sub	sp, #16
200005cc:	af00      	add	r7, sp, #0
200005ce:	6078      	str	r0, [r7, #4]
200005d0:	6039      	str	r1, [r7, #0]
	DC_SET;                        // данные или команда
200005d2:	4b11      	ldr	r3, [pc, #68]	; (20000618 <ILI9341_WriteData+0x50>)
200005d4:	699b      	ldr	r3, [r3, #24]
200005d6:	4a10      	ldr	r2, [pc, #64]	; (20000618 <ILI9341_WriteData+0x50>)
200005d8:	f043 0301 	orr.w	r3, r3, #1
200005dc:	6193      	str	r3, [r2, #24]
	// split data in small chunks because HAL can't send more then 64K at once
	while (buff_size > 0) {
200005de:	e013      	b.n	20000608 <ILI9341_WriteData+0x40>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
200005e0:	683b      	ldr	r3, [r7, #0]
200005e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200005e6:	bf28      	it	cs
200005e8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
200005ec:	81fb      	strh	r3, [r7, #14]
		mySPISend(buff, chunk_size);
200005ee:	89fb      	ldrh	r3, [r7, #14]
200005f0:	4619      	mov	r1, r3
200005f2:	6878      	ldr	r0, [r7, #4]
200005f4:	f7ff ff72 	bl	200004dc <mySPISend>
		buff += chunk_size;
200005f8:	89fb      	ldrh	r3, [r7, #14]
200005fa:	687a      	ldr	r2, [r7, #4]
200005fc:	4413      	add	r3, r2
200005fe:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
20000600:	89fb      	ldrh	r3, [r7, #14]
20000602:	683a      	ldr	r2, [r7, #0]
20000604:	1ad3      	subs	r3, r2, r3
20000606:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
20000608:	683b      	ldr	r3, [r7, #0]
2000060a:	2b00      	cmp	r3, #0
2000060c:	d1e8      	bne.n	200005e0 <ILI9341_WriteData+0x18>
	}
}
2000060e:	bf00      	nop
20000610:	bf00      	nop
20000612:	3710      	adds	r7, #16
20000614:	46bd      	mov	sp, r7
20000616:	bd80      	pop	{r7, pc}
20000618:	40020400 	.word	0x40020400

2000061c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1,
		uint16_t y1) {
2000061c:	b590      	push	{r4, r7, lr}
2000061e:	b085      	sub	sp, #20
20000620:	af00      	add	r7, sp, #0
20000622:	4604      	mov	r4, r0
20000624:	4608      	mov	r0, r1
20000626:	4611      	mov	r1, r2
20000628:	461a      	mov	r2, r3
2000062a:	4623      	mov	r3, r4
2000062c:	80fb      	strh	r3, [r7, #6]
2000062e:	4603      	mov	r3, r0
20000630:	80bb      	strh	r3, [r7, #4]
20000632:	460b      	mov	r3, r1
20000634:	807b      	strh	r3, [r7, #2]
20000636:	4613      	mov	r3, r2
20000638:	803b      	strh	r3, [r7, #0]
	// column address set
	ILI9341_WriteCommand(0x2A); // CASET
2000063a:	202a      	movs	r0, #42	; 0x2a
2000063c:	f7ff ffae 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1
20000640:	88fb      	ldrh	r3, [r7, #6]
20000642:	0a1b      	lsrs	r3, r3, #8
20000644:	b29b      	uxth	r3, r3
20000646:	b2db      	uxtb	r3, r3
20000648:	733b      	strb	r3, [r7, #12]
2000064a:	88fb      	ldrh	r3, [r7, #6]
2000064c:	b2db      	uxtb	r3, r3
2000064e:	737b      	strb	r3, [r7, #13]
20000650:	887b      	ldrh	r3, [r7, #2]
20000652:	0a1b      	lsrs	r3, r3, #8
20000654:	b29b      	uxth	r3, r3
20000656:	b2db      	uxtb	r3, r3
20000658:	73bb      	strb	r3, [r7, #14]
2000065a:	887b      	ldrh	r3, [r7, #2]
2000065c:	b2db      	uxtb	r3, r3
2000065e:	73fb      	strb	r3, [r7, #15]
				& 0xFF };
		ILI9341_WriteData(data, sizeof(data));
20000660:	f107 030c 	add.w	r3, r7, #12
20000664:	2104      	movs	r1, #4
20000666:	4618      	mov	r0, r3
20000668:	f7ff ffae 	bl	200005c8 <ILI9341_WriteData>
	}
	// row address set
	ILI9341_WriteCommand(0x2B); // RASET
2000066c:	202b      	movs	r0, #43	; 0x2b
2000066e:	f7ff ff95 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1
20000672:	88bb      	ldrh	r3, [r7, #4]
20000674:	0a1b      	lsrs	r3, r3, #8
20000676:	b29b      	uxth	r3, r3
20000678:	b2db      	uxtb	r3, r3
2000067a:	723b      	strb	r3, [r7, #8]
2000067c:	88bb      	ldrh	r3, [r7, #4]
2000067e:	b2db      	uxtb	r3, r3
20000680:	727b      	strb	r3, [r7, #9]
20000682:	883b      	ldrh	r3, [r7, #0]
20000684:	0a1b      	lsrs	r3, r3, #8
20000686:	b29b      	uxth	r3, r3
20000688:	b2db      	uxtb	r3, r3
2000068a:	72bb      	strb	r3, [r7, #10]
2000068c:	883b      	ldrh	r3, [r7, #0]
2000068e:	b2db      	uxtb	r3, r3
20000690:	72fb      	strb	r3, [r7, #11]
				& 0xFF };
		ILI9341_WriteData(data, sizeof(data));
20000692:	f107 0308 	add.w	r3, r7, #8
20000696:	2104      	movs	r1, #4
20000698:	4618      	mov	r0, r3
2000069a:	f7ff ff95 	bl	200005c8 <ILI9341_WriteData>
	}
	// write to RAM
	ILI9341_WriteCommand(0x2C); // RAMWR
2000069e:	202c      	movs	r0, #44	; 0x2c
200006a0:	f7ff ff7c 	bl	2000059c <ILI9341_WriteCommand>
}
200006a4:	bf00      	nop
200006a6:	3714      	adds	r7, #20
200006a8:	46bd      	mov	sp, r7
200006aa:	bd90      	pop	{r4, r7, pc}

200006ac <ILI9341_Init>:

void ILI9341_Init() {
200006ac:	b590      	push	{r4, r7, lr}
200006ae:	b09b      	sub	sp, #108	; 0x6c
200006b0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Led_Display_GPIO_Port, Led_Display_Pin, GPIO_PIN_SET);
200006b2:	2201      	movs	r2, #1
200006b4:	2110      	movs	r1, #16
200006b6:	4890      	ldr	r0, [pc, #576]	; (200008f8 <ILI9341_Init+0x24c>)
200006b8:	f001 ff82 	bl	200025c0 <HAL_GPIO_WritePin>
	ILI9341_Select();
200006bc:	f7ff ff3a 	bl	20000534 <ILI9341_Select>
	ILI9341_Reset();
200006c0:	f7ff ff58 	bl	20000574 <ILI9341_Reset>
	// command list is based on https://github.com/martnak/STM32-ILI9341
	ILI9341_WriteCommand(0x01); // SOFTWARE RESET
200006c4:	2001      	movs	r0, #1
200006c6:	f7ff ff69 	bl	2000059c <ILI9341_WriteCommand>
	HAL_Delay(1000);
200006ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
200006ce:	f001 fcd1 	bl	20002074 <HAL_Delay>
	ILI9341_WriteCommand(0xCB); // POWER CONTROL A
200006d2:	20cb      	movs	r0, #203	; 0xcb
200006d4:	f7ff ff62 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
200006d8:	4a88      	ldr	r2, [pc, #544]	; (200008fc <ILI9341_Init+0x250>)
200006da:	f107 0360 	add.w	r3, r7, #96	; 0x60
200006de:	e892 0003 	ldmia.w	r2, {r0, r1}
200006e2:	6018      	str	r0, [r3, #0]
200006e4:	3304      	adds	r3, #4
200006e6:	7019      	strb	r1, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
200006e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
200006ec:	2105      	movs	r1, #5
200006ee:	4618      	mov	r0, r3
200006f0:	f7ff ff6a 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xCF); // POWER CONTROL B
200006f4:	20cf      	movs	r0, #207	; 0xcf
200006f6:	f7ff ff51 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0xC1, 0x30 };
200006fa:	4a81      	ldr	r2, [pc, #516]	; (20000900 <ILI9341_Init+0x254>)
200006fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
20000700:	6812      	ldr	r2, [r2, #0]
20000702:	4611      	mov	r1, r2
20000704:	8019      	strh	r1, [r3, #0]
20000706:	3302      	adds	r3, #2
20000708:	0c12      	lsrs	r2, r2, #16
2000070a:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
2000070c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
20000710:	2103      	movs	r1, #3
20000712:	4618      	mov	r0, r3
20000714:	f7ff ff58 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE8); // DRIVER TIMING CONTROL A
20000718:	20e8      	movs	r0, #232	; 0xe8
2000071a:	f7ff ff3f 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x85, 0x00, 0x78 };
2000071e:	4a79      	ldr	r2, [pc, #484]	; (20000904 <ILI9341_Init+0x258>)
20000720:	f107 0358 	add.w	r3, r7, #88	; 0x58
20000724:	6812      	ldr	r2, [r2, #0]
20000726:	4611      	mov	r1, r2
20000728:	8019      	strh	r1, [r3, #0]
2000072a:	3302      	adds	r3, #2
2000072c:	0c12      	lsrs	r2, r2, #16
2000072e:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
20000730:	f107 0358 	add.w	r3, r7, #88	; 0x58
20000734:	2103      	movs	r1, #3
20000736:	4618      	mov	r0, r3
20000738:	f7ff ff46 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xEA); // DRIVER TIMING CONTROL B
2000073c:	20ea      	movs	r0, #234	; 0xea
2000073e:	f7ff ff2d 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x00 };
20000742:	2300      	movs	r3, #0
20000744:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		ILI9341_WriteData(data, sizeof(data));
20000748:	f107 0354 	add.w	r3, r7, #84	; 0x54
2000074c:	2102      	movs	r1, #2
2000074e:	4618      	mov	r0, r3
20000750:	f7ff ff3a 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xED);  // POWER ON SEQUENCE CONTROL
20000754:	20ed      	movs	r0, #237	; 0xed
20000756:	f7ff ff21 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
2000075a:	4b6b      	ldr	r3, [pc, #428]	; (20000908 <ILI9341_Init+0x25c>)
2000075c:	653b      	str	r3, [r7, #80]	; 0x50
		ILI9341_WriteData(data, sizeof(data));
2000075e:	f107 0350 	add.w	r3, r7, #80	; 0x50
20000762:	2104      	movs	r1, #4
20000764:	4618      	mov	r0, r3
20000766:	f7ff ff2f 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xF7);  // PUMP RATIO CONTROL
2000076a:	20f7      	movs	r0, #247	; 0xf7
2000076c:	f7ff ff16 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x20 };
20000770:	2320      	movs	r3, #32
20000772:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		ILI9341_WriteData(data, sizeof(data));
20000776:	f107 034c 	add.w	r3, r7, #76	; 0x4c
2000077a:	2101      	movs	r1, #1
2000077c:	4618      	mov	r0, r3
2000077e:	f7ff ff23 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC0); // POWER CONTROL,VRH[5:0]
20000782:	20c0      	movs	r0, #192	; 0xc0
20000784:	f7ff ff0a 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x23 };
20000788:	2323      	movs	r3, #35	; 0x23
2000078a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		ILI9341_WriteData(data, sizeof(data));
2000078e:	f107 0348 	add.w	r3, r7, #72	; 0x48
20000792:	2101      	movs	r1, #1
20000794:	4618      	mov	r0, r3
20000796:	f7ff ff17 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC1); // POWER CONTROL,SAP[2:0];BT[3:0]
2000079a:	20c1      	movs	r0, #193	; 0xc1
2000079c:	f7ff fefe 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x10 };
200007a0:	2310      	movs	r3, #16
200007a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		ILI9341_WriteData(data, sizeof(data));
200007a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
200007aa:	2101      	movs	r1, #1
200007ac:	4618      	mov	r0, r3
200007ae:	f7ff ff0b 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC5); // VCM CONTROL
200007b2:	20c5      	movs	r0, #197	; 0xc5
200007b4:	f7ff fef2 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x3E, 0x28 };
200007b8:	f642 033e 	movw	r3, #10302	; 0x283e
200007bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		ILI9341_WriteData(data, sizeof(data));
200007c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
200007c4:	2102      	movs	r1, #2
200007c6:	4618      	mov	r0, r3
200007c8:	f7ff fefe 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xC7);  // VCM CONTROL 2
200007cc:	20c7      	movs	r0, #199	; 0xc7
200007ce:	f7ff fee5 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x86 };
200007d2:	2386      	movs	r3, #134	; 0x86
200007d4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		ILI9341_WriteData(data, sizeof(data));
200007d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
200007dc:	2101      	movs	r1, #1
200007de:	4618      	mov	r0, r3
200007e0:	f7ff fef2 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x36); // MEMORY ACCESS CONTROL
200007e4:	2036      	movs	r0, #54	; 0x36
200007e6:	f7ff fed9 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x48 };
200007ea:	2348      	movs	r3, #72	; 0x48
200007ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		ILI9341_WriteData(data, sizeof(data));
200007f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
200007f4:	2101      	movs	r1, #1
200007f6:	4618      	mov	r0, r3
200007f8:	f7ff fee6 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x3A); // PIXEL FORMAT
200007fc:	203a      	movs	r0, #58	; 0x3a
200007fe:	f7ff fecd 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x55 };
20000802:	2355      	movs	r3, #85	; 0x55
20000804:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		ILI9341_WriteData(data, sizeof(data));
20000808:	f107 0334 	add.w	r3, r7, #52	; 0x34
2000080c:	2101      	movs	r1, #1
2000080e:	4618      	mov	r0, r3
20000810:	f7ff feda 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xB1); // FRAME RATIO CONTROL, STANDARD RGB COLOR
20000814:	20b1      	movs	r0, #177	; 0xb1
20000816:	f7ff fec1 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x18 };
2000081a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
2000081e:	863b      	strh	r3, [r7, #48]	; 0x30
		ILI9341_WriteData(data, sizeof(data));
20000820:	f107 0330 	add.w	r3, r7, #48	; 0x30
20000824:	2102      	movs	r1, #2
20000826:	4618      	mov	r0, r3
20000828:	f7ff fece 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xB6); // DISPLAY FUNCTION CONTROL
2000082c:	20b6      	movs	r0, #182	; 0xb6
2000082e:	f7ff feb5 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x08, 0x82, 0x27 };
20000832:	4a36      	ldr	r2, [pc, #216]	; (2000090c <ILI9341_Init+0x260>)
20000834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
20000838:	6812      	ldr	r2, [r2, #0]
2000083a:	4611      	mov	r1, r2
2000083c:	8019      	strh	r1, [r3, #0]
2000083e:	3302      	adds	r3, #2
20000840:	0c12      	lsrs	r2, r2, #16
20000842:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteData(data, sizeof(data));
20000844:	f107 032c 	add.w	r3, r7, #44	; 0x2c
20000848:	2103      	movs	r1, #3
2000084a:	4618      	mov	r0, r3
2000084c:	f7ff febc 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xF2); // 3GAMMA FUNCTION DISABLE
20000850:	20f2      	movs	r0, #242	; 0xf2
20000852:	f7ff fea3 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00 };
20000856:	2300      	movs	r3, #0
20000858:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		ILI9341_WriteData(data, sizeof(data));
2000085c:	f107 0328 	add.w	r3, r7, #40	; 0x28
20000860:	2101      	movs	r1, #1
20000862:	4618      	mov	r0, r3
20000864:	f7ff feb0 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x26); // GAMMA CURVE SELECTED
20000868:	2026      	movs	r0, #38	; 0x26
2000086a:	f7ff fe97 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x01 };
2000086e:	2301      	movs	r3, #1
20000870:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		ILI9341_WriteData(data, sizeof(data));
20000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
20000878:	2101      	movs	r1, #1
2000087a:	4618      	mov	r0, r3
2000087c:	f7ff fea4 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE0); // POSITIVE GAMMA CORRECTION
20000880:	20e0      	movs	r0, #224	; 0xe0
20000882:	f7ff fe8b 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1, 0x37,
20000886:	4b22      	ldr	r3, [pc, #136]	; (20000910 <ILI9341_Init+0x264>)
20000888:	f107 0414 	add.w	r4, r7, #20
2000088c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
2000088e:	c407      	stmia	r4!, {r0, r1, r2}
20000890:	8023      	strh	r3, [r4, #0]
20000892:	3402      	adds	r4, #2
20000894:	0c1b      	lsrs	r3, r3, #16
20000896:	7023      	strb	r3, [r4, #0]
				0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
		ILI9341_WriteData(data, sizeof(data));
20000898:	f107 0314 	add.w	r3, r7, #20
2000089c:	210f      	movs	r1, #15
2000089e:	4618      	mov	r0, r3
200008a0:	f7ff fe92 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0xE1); // NEGATIVE GAMMA CORRECTION
200008a4:	20e1      	movs	r0, #225	; 0xe1
200008a6:	f7ff fe79 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48,
200008aa:	4b1a      	ldr	r3, [pc, #104]	; (20000914 <ILI9341_Init+0x268>)
200008ac:	1d3c      	adds	r4, r7, #4
200008ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
200008b0:	c407      	stmia	r4!, {r0, r1, r2}
200008b2:	8023      	strh	r3, [r4, #0]
200008b4:	3402      	adds	r4, #2
200008b6:	0c1b      	lsrs	r3, r3, #16
200008b8:	7023      	strb	r3, [r4, #0]
				0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
		ILI9341_WriteData(data, sizeof(data));
200008ba:	1d3b      	adds	r3, r7, #4
200008bc:	210f      	movs	r1, #15
200008be:	4618      	mov	r0, r3
200008c0:	f7ff fe82 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_WriteCommand(0x11); // EXIT SLEEP
200008c4:	2011      	movs	r0, #17
200008c6:	f7ff fe69 	bl	2000059c <ILI9341_WriteCommand>
	HAL_Delay(120);
200008ca:	2078      	movs	r0, #120	; 0x78
200008cc:	f001 fbd2 	bl	20002074 <HAL_Delay>
	ILI9341_WriteCommand(0x29); // TURN ON DISPLAY
200008d0:	2029      	movs	r0, #41	; 0x29
200008d2:	f7ff fe63 	bl	2000059c <ILI9341_WriteCommand>
	ILI9341_WriteCommand(0x36); // MADCTL
200008d6:	2036      	movs	r0, #54	; 0x36
200008d8:	f7ff fe60 	bl	2000059c <ILI9341_WriteCommand>
	{
		uint8_t data[] = { ILI9341_ROTATION };
200008dc:	23e8      	movs	r3, #232	; 0xe8
200008de:	703b      	strb	r3, [r7, #0]
		ILI9341_WriteData(data, sizeof(data));
200008e0:	463b      	mov	r3, r7
200008e2:	2101      	movs	r1, #1
200008e4:	4618      	mov	r0, r3
200008e6:	f7ff fe6f 	bl	200005c8 <ILI9341_WriteData>
	}
	ILI9341_Unselect();
200008ea:	f7ff fe33 	bl	20000554 <ILI9341_Unselect>
}
200008ee:	bf00      	nop
200008f0:	376c      	adds	r7, #108	; 0x6c
200008f2:	46bd      	mov	sp, r7
200008f4:	bd90      	pop	{r4, r7, pc}
200008f6:	bf00      	nop
200008f8:	40020000 	.word	0x40020000
200008fc:	20003e00 	.word	0x20003e00
20000900:	20003e08 	.word	0x20003e08
20000904:	20003e0c 	.word	0x20003e0c
20000908:	81120364 	.word	0x81120364
2000090c:	20003e10 	.word	0x20003e10
20000910:	20003e14 	.word	0x20003e14
20000914:	20003e24 	.word	0x20003e24

20000918 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
20000918:	b580      	push	{r7, lr}
2000091a:	b084      	sub	sp, #16
2000091c:	af00      	add	r7, sp, #0
2000091e:	4603      	mov	r3, r0
20000920:	80fb      	strh	r3, [r7, #6]
20000922:	460b      	mov	r3, r1
20000924:	80bb      	strh	r3, [r7, #4]
20000926:	4613      	mov	r3, r2
20000928:	807b      	strh	r3, [r7, #2]
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
2000092a:	88fb      	ldrh	r3, [r7, #6]
2000092c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20000930:	d21f      	bcs.n	20000972 <ILI9341_DrawPixel+0x5a>
20000932:	88bb      	ldrh	r3, [r7, #4]
20000934:	2bef      	cmp	r3, #239	; 0xef
20000936:	d81c      	bhi.n	20000972 <ILI9341_DrawPixel+0x5a>
		return;
	ILI9341_Select();
20000938:	f7ff fdfc 	bl	20000534 <ILI9341_Select>

	ILI9341_SetAddressWindow(x, y, x + 1, y + 1);
2000093c:	88fb      	ldrh	r3, [r7, #6]
2000093e:	3301      	adds	r3, #1
20000940:	b29a      	uxth	r2, r3
20000942:	88bb      	ldrh	r3, [r7, #4]
20000944:	3301      	adds	r3, #1
20000946:	b29b      	uxth	r3, r3
20000948:	88b9      	ldrh	r1, [r7, #4]
2000094a:	88f8      	ldrh	r0, [r7, #6]
2000094c:	f7ff fe66 	bl	2000061c <ILI9341_SetAddressWindow>
	uint8_t data[] = { color >> 8, color & 0xFF };
20000950:	887b      	ldrh	r3, [r7, #2]
20000952:	0a1b      	lsrs	r3, r3, #8
20000954:	b29b      	uxth	r3, r3
20000956:	b2db      	uxtb	r3, r3
20000958:	733b      	strb	r3, [r7, #12]
2000095a:	887b      	ldrh	r3, [r7, #2]
2000095c:	b2db      	uxtb	r3, r3
2000095e:	737b      	strb	r3, [r7, #13]
	ILI9341_WriteData(data, sizeof(data));
20000960:	f107 030c 	add.w	r3, r7, #12
20000964:	2102      	movs	r1, #2
20000966:	4618      	mov	r0, r3
20000968:	f7ff fe2e 	bl	200005c8 <ILI9341_WriteData>

	ILI9341_Unselect();
2000096c:	f7ff fdf2 	bl	20000554 <ILI9341_Unselect>
20000970:	e000      	b.n	20000974 <ILI9341_DrawPixel+0x5c>
		return;
20000972:	bf00      	nop
}
20000974:	3710      	adds	r7, #16
20000976:	46bd      	mov	sp, r7
20000978:	bd80      	pop	{r7, pc}
	...

2000097c <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t color) {
2000097c:	b590      	push	{r4, r7, lr}
2000097e:	b085      	sub	sp, #20
20000980:	af00      	add	r7, sp, #0
20000982:	4604      	mov	r4, r0
20000984:	4608      	mov	r0, r1
20000986:	4611      	mov	r1, r2
20000988:	461a      	mov	r2, r3
2000098a:	4623      	mov	r3, r4
2000098c:	80fb      	strh	r3, [r7, #6]
2000098e:	4603      	mov	r3, r0
20000990:	80bb      	strh	r3, [r7, #4]
20000992:	460b      	mov	r3, r1
20000994:	807b      	strh	r3, [r7, #2]
20000996:	4613      	mov	r3, r2
20000998:	803b      	strh	r3, [r7, #0]
	// clipping
	if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
2000099a:	88fb      	ldrh	r3, [r7, #6]
2000099c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
200009a0:	d250      	bcs.n	20000a44 <ILI9341_FillRectangle+0xc8>
200009a2:	88bb      	ldrh	r3, [r7, #4]
200009a4:	2bef      	cmp	r3, #239	; 0xef
200009a6:	d84d      	bhi.n	20000a44 <ILI9341_FillRectangle+0xc8>
		return;
	if ((x + w - 1) >= ILI9341_WIDTH)
200009a8:	88fa      	ldrh	r2, [r7, #6]
200009aa:	887b      	ldrh	r3, [r7, #2]
200009ac:	4413      	add	r3, r2
200009ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
200009b2:	dd03      	ble.n	200009bc <ILI9341_FillRectangle+0x40>
		w = ILI9341_WIDTH - x;
200009b4:	88fb      	ldrh	r3, [r7, #6]
200009b6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
200009ba:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= ILI9341_HEIGHT)
200009bc:	88ba      	ldrh	r2, [r7, #4]
200009be:	883b      	ldrh	r3, [r7, #0]
200009c0:	4413      	add	r3, r2
200009c2:	2bf0      	cmp	r3, #240	; 0xf0
200009c4:	dd03      	ble.n	200009ce <ILI9341_FillRectangle+0x52>
		h = ILI9341_HEIGHT - y;
200009c6:	88bb      	ldrh	r3, [r7, #4]
200009c8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
200009cc:	803b      	strh	r3, [r7, #0]

	ILI9341_Select();
200009ce:	f7ff fdb1 	bl	20000534 <ILI9341_Select>
	ILI9341_SetAddressWindow(x, y, x + w - 1, y + h - 1);
200009d2:	88fa      	ldrh	r2, [r7, #6]
200009d4:	887b      	ldrh	r3, [r7, #2]
200009d6:	4413      	add	r3, r2
200009d8:	b29b      	uxth	r3, r3
200009da:	3b01      	subs	r3, #1
200009dc:	b29c      	uxth	r4, r3
200009de:	88ba      	ldrh	r2, [r7, #4]
200009e0:	883b      	ldrh	r3, [r7, #0]
200009e2:	4413      	add	r3, r2
200009e4:	b29b      	uxth	r3, r3
200009e6:	3b01      	subs	r3, #1
200009e8:	b29b      	uxth	r3, r3
200009ea:	88b9      	ldrh	r1, [r7, #4]
200009ec:	88f8      	ldrh	r0, [r7, #6]
200009ee:	4622      	mov	r2, r4
200009f0:	f7ff fe14 	bl	2000061c <ILI9341_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
200009f4:	8c3b      	ldrh	r3, [r7, #32]
200009f6:	0a1b      	lsrs	r3, r3, #8
200009f8:	b29b      	uxth	r3, r3
200009fa:	b2db      	uxtb	r3, r3
200009fc:	733b      	strb	r3, [r7, #12]
200009fe:	8c3b      	ldrh	r3, [r7, #32]
20000a00:	b2db      	uxtb	r3, r3
20000a02:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
20000a04:	2201      	movs	r2, #1
20000a06:	2101      	movs	r1, #1
20000a08:	4810      	ldr	r0, [pc, #64]	; (20000a4c <ILI9341_FillRectangle+0xd0>)
20000a0a:	f001 fdd9 	bl	200025c0 <HAL_GPIO_WritePin>
	for (y = h; y > 0; y--) {
20000a0e:	883b      	ldrh	r3, [r7, #0]
20000a10:	80bb      	strh	r3, [r7, #4]
20000a12:	e011      	b.n	20000a38 <ILI9341_FillRectangle+0xbc>
		for (x = w; x > 0; x--) {
20000a14:	887b      	ldrh	r3, [r7, #2]
20000a16:	80fb      	strh	r3, [r7, #6]
20000a18:	e008      	b.n	20000a2c <ILI9341_FillRectangle+0xb0>
			mySPISend(data, sizeof(data));
20000a1a:	f107 030c 	add.w	r3, r7, #12
20000a1e:	2102      	movs	r1, #2
20000a20:	4618      	mov	r0, r3
20000a22:	f7ff fd5b 	bl	200004dc <mySPISend>
		for (x = w; x > 0; x--) {
20000a26:	88fb      	ldrh	r3, [r7, #6]
20000a28:	3b01      	subs	r3, #1
20000a2a:	80fb      	strh	r3, [r7, #6]
20000a2c:	88fb      	ldrh	r3, [r7, #6]
20000a2e:	2b00      	cmp	r3, #0
20000a30:	d1f3      	bne.n	20000a1a <ILI9341_FillRectangle+0x9e>
	for (y = h; y > 0; y--) {
20000a32:	88bb      	ldrh	r3, [r7, #4]
20000a34:	3b01      	subs	r3, #1
20000a36:	80bb      	strh	r3, [r7, #4]
20000a38:	88bb      	ldrh	r3, [r7, #4]
20000a3a:	2b00      	cmp	r3, #0
20000a3c:	d1ea      	bne.n	20000a14 <ILI9341_FillRectangle+0x98>
		}
	}

	ILI9341_Unselect();
20000a3e:	f7ff fd89 	bl	20000554 <ILI9341_Unselect>
20000a42:	e000      	b.n	20000a46 <ILI9341_FillRectangle+0xca>
		return;
20000a44:	bf00      	nop
}
20000a46:	3714      	adds	r7, #20
20000a48:	46bd      	mov	sp, r7
20000a4a:	bd90      	pop	{r4, r7, pc}
20000a4c:	40020400 	.word	0x40020400

20000a50 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
20000a50:	b580      	push	{r7, lr}
20000a52:	b084      	sub	sp, #16
20000a54:	af02      	add	r7, sp, #8
20000a56:	4603      	mov	r3, r0
20000a58:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
20000a5a:	88fb      	ldrh	r3, [r7, #6]
20000a5c:	9300      	str	r3, [sp, #0]
20000a5e:	23f0      	movs	r3, #240	; 0xf0
20000a60:	f44f 72a0 	mov.w	r2, #320	; 0x140
20000a64:	2100      	movs	r1, #0
20000a66:	2000      	movs	r0, #0
20000a68:	f7ff ff88 	bl	2000097c <ILI9341_FillRectangle>
}
20000a6c:	bf00      	nop
20000a6e:	3708      	adds	r7, #8
20000a70:	46bd      	mov	sp, r7
20000a72:	bd80      	pop	{r7, pc}

20000a74 <ILI9341_WriteMyChar>:

static void ILI9341_WriteMyChar(uint16_t x, uint16_t y, char ch, uint16_t color,
		uint16_t bgcolor) {
20000a74:	b590      	push	{r4, r7, lr}
20000a76:	b089      	sub	sp, #36	; 0x24
20000a78:	af00      	add	r7, sp, #0
20000a7a:	4604      	mov	r4, r0
20000a7c:	4608      	mov	r0, r1
20000a7e:	4611      	mov	r1, r2
20000a80:	461a      	mov	r2, r3
20000a82:	4623      	mov	r3, r4
20000a84:	80fb      	strh	r3, [r7, #6]
20000a86:	4603      	mov	r3, r0
20000a88:	80bb      	strh	r3, [r7, #4]
20000a8a:	460b      	mov	r3, r1
20000a8c:	70fb      	strb	r3, [r7, #3]
20000a8e:	4613      	mov	r3, r2
20000a90:	803b      	strh	r3, [r7, #0]
	uint16_t i, j, value;
	uint32_t devider, b;

	ILI9341_SetAddressWindow(x, y,
			x + Font24x36_array[(ch - 32)].image->width - 1,
20000a92:	78fb      	ldrb	r3, [r7, #3]
20000a94:	3b20      	subs	r3, #32
20000a96:	4a71      	ldr	r2, [pc, #452]	; (20000c5c <ILI9341_WriteMyChar+0x1e8>)
20000a98:	00db      	lsls	r3, r3, #3
20000a9a:	4413      	add	r3, r2
20000a9c:	685b      	ldr	r3, [r3, #4]
20000a9e:	889a      	ldrh	r2, [r3, #4]
20000aa0:	88fb      	ldrh	r3, [r7, #6]
20000aa2:	4413      	add	r3, r2
20000aa4:	b29b      	uxth	r3, r3
	ILI9341_SetAddressWindow(x, y,
20000aa6:	3b01      	subs	r3, #1
20000aa8:	b29c      	uxth	r4, r3
			y + Font24x36_array[(ch - 32)].image->height - 1);
20000aaa:	78fb      	ldrb	r3, [r7, #3]
20000aac:	3b20      	subs	r3, #32
20000aae:	4a6b      	ldr	r2, [pc, #428]	; (20000c5c <ILI9341_WriteMyChar+0x1e8>)
20000ab0:	00db      	lsls	r3, r3, #3
20000ab2:	4413      	add	r3, r2
20000ab4:	685b      	ldr	r3, [r3, #4]
20000ab6:	88da      	ldrh	r2, [r3, #6]
20000ab8:	88bb      	ldrh	r3, [r7, #4]
20000aba:	4413      	add	r3, r2
20000abc:	b29b      	uxth	r3, r3
	ILI9341_SetAddressWindow(x, y,
20000abe:	3b01      	subs	r3, #1
20000ac0:	b29b      	uxth	r3, r3
20000ac2:	88b9      	ldrh	r1, [r7, #4]
20000ac4:	88f8      	ldrh	r0, [r7, #6]
20000ac6:	4622      	mov	r2, r4
20000ac8:	f7ff fda8 	bl	2000061c <ILI9341_SetAddressWindow>
	value = 1;
20000acc:	2301      	movs	r3, #1
20000ace:	837b      	strh	r3, [r7, #26]
	devider = 0x80;
20000ad0:	2380      	movs	r3, #128	; 0x80
20000ad2:	617b      	str	r3, [r7, #20]
	if ((Font24x36_array[(ch - 32)].image->width) > 8) {
20000ad4:	78fb      	ldrb	r3, [r7, #3]
20000ad6:	3b20      	subs	r3, #32
20000ad8:	4a60      	ldr	r2, [pc, #384]	; (20000c5c <ILI9341_WriteMyChar+0x1e8>)
20000ada:	00db      	lsls	r3, r3, #3
20000adc:	4413      	add	r3, r2
20000ade:	685b      	ldr	r3, [r3, #4]
20000ae0:	889b      	ldrh	r3, [r3, #4]
20000ae2:	2b08      	cmp	r3, #8
20000ae4:	d904      	bls.n	20000af0 <ILI9341_WriteMyChar+0x7c>
		value = 2;
20000ae6:	2302      	movs	r3, #2
20000ae8:	837b      	strh	r3, [r7, #26]
		devider = 0x8000;
20000aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
20000aee:	617b      	str	r3, [r7, #20]
	}
	if ((Font24x36_array[(ch - 32)].image->width) > 16) {
20000af0:	78fb      	ldrb	r3, [r7, #3]
20000af2:	3b20      	subs	r3, #32
20000af4:	4a59      	ldr	r2, [pc, #356]	; (20000c5c <ILI9341_WriteMyChar+0x1e8>)
20000af6:	00db      	lsls	r3, r3, #3
20000af8:	4413      	add	r3, r2
20000afa:	685b      	ldr	r3, [r3, #4]
20000afc:	889b      	ldrh	r3, [r3, #4]
20000afe:	2b10      	cmp	r3, #16
20000b00:	d904      	bls.n	20000b0c <ILI9341_WriteMyChar+0x98>
		value = 3;
20000b02:	2303      	movs	r3, #3
20000b04:	837b      	strh	r3, [r7, #26]
		devider = 0x800000;
20000b06:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
20000b0a:	617b      	str	r3, [r7, #20]
	}
	if ((Font24x36_array[(ch - 32)].image->width) > 24) {
20000b0c:	78fb      	ldrb	r3, [r7, #3]
20000b0e:	3b20      	subs	r3, #32
20000b10:	4a52      	ldr	r2, [pc, #328]	; (20000c5c <ILI9341_WriteMyChar+0x1e8>)
20000b12:	00db      	lsls	r3, r3, #3
20000b14:	4413      	add	r3, r2
20000b16:	685b      	ldr	r3, [r3, #4]
20000b18:	889b      	ldrh	r3, [r3, #4]
20000b1a:	2b18      	cmp	r3, #24
20000b1c:	d904      	bls.n	20000b28 <ILI9341_WriteMyChar+0xb4>
		value = 4;
20000b1e:	2304      	movs	r3, #4
20000b20:	837b      	strh	r3, [r7, #26]
		devider = 0x80000000;
20000b22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
20000b26:	617b      	str	r3, [r7, #20]
	}
	for (i = 0; i < (Font24x36_array[(ch - 32)].image->height) * value; i +=
20000b28:	2300      	movs	r3, #0
20000b2a:	83fb      	strh	r3, [r7, #30]
20000b2c:	e081      	b.n	20000c32 <ILI9341_WriteMyChar+0x1be>
			value) {
		b = Font24x36_array[(ch - 32)].image->data[i];
20000b2e:	78fb      	ldrb	r3, [r7, #3]
20000b30:	3b20      	subs	r3, #32
20000b32:	4a4a      	ldr	r2, [pc, #296]	; (20000c5c <ILI9341_WriteMyChar+0x1e8>)
20000b34:	00db      	lsls	r3, r3, #3
20000b36:	4413      	add	r3, r2
20000b38:	685b      	ldr	r3, [r3, #4]
20000b3a:	681a      	ldr	r2, [r3, #0]
20000b3c:	8bfb      	ldrh	r3, [r7, #30]
20000b3e:	4413      	add	r3, r2
20000b40:	781b      	ldrb	r3, [r3, #0]
20000b42:	613b      	str	r3, [r7, #16]
		if (value >= 2) {
20000b44:	8b7b      	ldrh	r3, [r7, #26]
20000b46:	2b01      	cmp	r3, #1
20000b48:	d911      	bls.n	20000b6e <ILI9341_WriteMyChar+0xfa>
			b = b << 8;
20000b4a:	693b      	ldr	r3, [r7, #16]
20000b4c:	021b      	lsls	r3, r3, #8
20000b4e:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 1];
20000b50:	78fb      	ldrb	r3, [r7, #3]
20000b52:	3b20      	subs	r3, #32
20000b54:	4a41      	ldr	r2, [pc, #260]	; (20000c5c <ILI9341_WriteMyChar+0x1e8>)
20000b56:	00db      	lsls	r3, r3, #3
20000b58:	4413      	add	r3, r2
20000b5a:	685b      	ldr	r3, [r3, #4]
20000b5c:	681a      	ldr	r2, [r3, #0]
20000b5e:	8bfb      	ldrh	r3, [r7, #30]
20000b60:	3301      	adds	r3, #1
20000b62:	4413      	add	r3, r2
20000b64:	781b      	ldrb	r3, [r3, #0]
20000b66:	461a      	mov	r2, r3
20000b68:	693b      	ldr	r3, [r7, #16]
20000b6a:	4313      	orrs	r3, r2
20000b6c:	613b      	str	r3, [r7, #16]
		}
		if (value >= 3) {
20000b6e:	8b7b      	ldrh	r3, [r7, #26]
20000b70:	2b02      	cmp	r3, #2
20000b72:	d911      	bls.n	20000b98 <ILI9341_WriteMyChar+0x124>
			b = b << 8;
20000b74:	693b      	ldr	r3, [r7, #16]
20000b76:	021b      	lsls	r3, r3, #8
20000b78:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 2];
20000b7a:	78fb      	ldrb	r3, [r7, #3]
20000b7c:	3b20      	subs	r3, #32
20000b7e:	4a37      	ldr	r2, [pc, #220]	; (20000c5c <ILI9341_WriteMyChar+0x1e8>)
20000b80:	00db      	lsls	r3, r3, #3
20000b82:	4413      	add	r3, r2
20000b84:	685b      	ldr	r3, [r3, #4]
20000b86:	681a      	ldr	r2, [r3, #0]
20000b88:	8bfb      	ldrh	r3, [r7, #30]
20000b8a:	3302      	adds	r3, #2
20000b8c:	4413      	add	r3, r2
20000b8e:	781b      	ldrb	r3, [r3, #0]
20000b90:	461a      	mov	r2, r3
20000b92:	693b      	ldr	r3, [r7, #16]
20000b94:	4313      	orrs	r3, r2
20000b96:	613b      	str	r3, [r7, #16]
		}
		if (value >= 4) {
20000b98:	8b7b      	ldrh	r3, [r7, #26]
20000b9a:	2b03      	cmp	r3, #3
20000b9c:	d911      	bls.n	20000bc2 <ILI9341_WriteMyChar+0x14e>
			b = b << 8;
20000b9e:	693b      	ldr	r3, [r7, #16]
20000ba0:	021b      	lsls	r3, r3, #8
20000ba2:	613b      	str	r3, [r7, #16]
			b |= Font24x36_array[(ch - 32)].image->data[i + 3];
20000ba4:	78fb      	ldrb	r3, [r7, #3]
20000ba6:	3b20      	subs	r3, #32
20000ba8:	4a2c      	ldr	r2, [pc, #176]	; (20000c5c <ILI9341_WriteMyChar+0x1e8>)
20000baa:	00db      	lsls	r3, r3, #3
20000bac:	4413      	add	r3, r2
20000bae:	685b      	ldr	r3, [r3, #4]
20000bb0:	681a      	ldr	r2, [r3, #0]
20000bb2:	8bfb      	ldrh	r3, [r7, #30]
20000bb4:	3303      	adds	r3, #3
20000bb6:	4413      	add	r3, r2
20000bb8:	781b      	ldrb	r3, [r3, #0]
20000bba:	461a      	mov	r2, r3
20000bbc:	693b      	ldr	r3, [r7, #16]
20000bbe:	4313      	orrs	r3, r2
20000bc0:	613b      	str	r3, [r7, #16]
		}
		for (j = 0; j < Font24x36_array[(ch - 32)].image->width; j++) {
20000bc2:	2300      	movs	r3, #0
20000bc4:	83bb      	strh	r3, [r7, #28]
20000bc6:	e026      	b.n	20000c16 <ILI9341_WriteMyChar+0x1a2>
			if ((b << j) & devider) {
20000bc8:	8bbb      	ldrh	r3, [r7, #28]
20000bca:	693a      	ldr	r2, [r7, #16]
20000bcc:	409a      	lsls	r2, r3
20000bce:	697b      	ldr	r3, [r7, #20]
20000bd0:	4013      	ands	r3, r2
20000bd2:	2b00      	cmp	r3, #0
20000bd4:	d00e      	beq.n	20000bf4 <ILI9341_WriteMyChar+0x180>
				uint8_t data[] = { color >> 8, color & 0xFF };
20000bd6:	883b      	ldrh	r3, [r7, #0]
20000bd8:	0a1b      	lsrs	r3, r3, #8
20000bda:	b29b      	uxth	r3, r3
20000bdc:	b2db      	uxtb	r3, r3
20000bde:	733b      	strb	r3, [r7, #12]
20000be0:	883b      	ldrh	r3, [r7, #0]
20000be2:	b2db      	uxtb	r3, r3
20000be4:	737b      	strb	r3, [r7, #13]
				ILI9341_WriteData(data, sizeof(data));
20000be6:	f107 030c 	add.w	r3, r7, #12
20000bea:	2102      	movs	r1, #2
20000bec:	4618      	mov	r0, r3
20000bee:	f7ff fceb 	bl	200005c8 <ILI9341_WriteData>
20000bf2:	e00d      	b.n	20000c10 <ILI9341_WriteMyChar+0x19c>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
20000bf4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
20000bf6:	0a1b      	lsrs	r3, r3, #8
20000bf8:	b29b      	uxth	r3, r3
20000bfa:	b2db      	uxtb	r3, r3
20000bfc:	723b      	strb	r3, [r7, #8]
20000bfe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
20000c00:	b2db      	uxtb	r3, r3
20000c02:	727b      	strb	r3, [r7, #9]
				ILI9341_WriteData(data, sizeof(data));
20000c04:	f107 0308 	add.w	r3, r7, #8
20000c08:	2102      	movs	r1, #2
20000c0a:	4618      	mov	r0, r3
20000c0c:	f7ff fcdc 	bl	200005c8 <ILI9341_WriteData>
		for (j = 0; j < Font24x36_array[(ch - 32)].image->width; j++) {
20000c10:	8bbb      	ldrh	r3, [r7, #28]
20000c12:	3301      	adds	r3, #1
20000c14:	83bb      	strh	r3, [r7, #28]
20000c16:	78fb      	ldrb	r3, [r7, #3]
20000c18:	3b20      	subs	r3, #32
20000c1a:	4a10      	ldr	r2, [pc, #64]	; (20000c5c <ILI9341_WriteMyChar+0x1e8>)
20000c1c:	00db      	lsls	r3, r3, #3
20000c1e:	4413      	add	r3, r2
20000c20:	685b      	ldr	r3, [r3, #4]
20000c22:	889b      	ldrh	r3, [r3, #4]
20000c24:	8bba      	ldrh	r2, [r7, #28]
20000c26:	429a      	cmp	r2, r3
20000c28:	d3ce      	bcc.n	20000bc8 <ILI9341_WriteMyChar+0x154>
	for (i = 0; i < (Font24x36_array[(ch - 32)].image->height) * value; i +=
20000c2a:	8bfa      	ldrh	r2, [r7, #30]
20000c2c:	8b7b      	ldrh	r3, [r7, #26]
20000c2e:	4413      	add	r3, r2
20000c30:	83fb      	strh	r3, [r7, #30]
20000c32:	8bfa      	ldrh	r2, [r7, #30]
20000c34:	78fb      	ldrb	r3, [r7, #3]
20000c36:	3b20      	subs	r3, #32
20000c38:	4908      	ldr	r1, [pc, #32]	; (20000c5c <ILI9341_WriteMyChar+0x1e8>)
20000c3a:	00db      	lsls	r3, r3, #3
20000c3c:	440b      	add	r3, r1
20000c3e:	685b      	ldr	r3, [r3, #4]
20000c40:	88db      	ldrh	r3, [r3, #6]
20000c42:	4619      	mov	r1, r3
20000c44:	8b7b      	ldrh	r3, [r7, #26]
20000c46:	fb01 f303 	mul.w	r3, r1, r3
20000c4a:	429a      	cmp	r2, r3
20000c4c:	f6ff af6f 	blt.w	20000b2e <ILI9341_WriteMyChar+0xba>
			}
		}
	}
}
20000c50:	bf00      	nop
20000c52:	bf00      	nop
20000c54:	3724      	adds	r7, #36	; 0x24
20000c56:	46bd      	mov	sp, r7
20000c58:	bd90      	pop	{r4, r7, pc}
20000c5a:	bf00      	nop
20000c5c:	20007144 	.word	0x20007144

20000c60 <ILI9341_WriteMyString>:

void ILI9341_WriteMyString(uint16_t x, uint16_t y, const char *str,
		uint16_t color, uint16_t bgcolor) {
20000c60:	b590      	push	{r4, r7, lr}
20000c62:	b087      	sub	sp, #28
20000c64:	af02      	add	r7, sp, #8
20000c66:	60ba      	str	r2, [r7, #8]
20000c68:	461a      	mov	r2, r3
20000c6a:	4603      	mov	r3, r0
20000c6c:	81fb      	strh	r3, [r7, #14]
20000c6e:	460b      	mov	r3, r1
20000c70:	81bb      	strh	r3, [r7, #12]
20000c72:	4613      	mov	r3, r2
20000c74:	80fb      	strh	r3, [r7, #6]
	ILI9341_Select();
20000c76:	f7ff fc5d 	bl	20000534 <ILI9341_Select>
	while (*str) {
20000c7a:	e045      	b.n	20000d08 <ILI9341_WriteMyString+0xa8>
		if (x + Font24x36_array[(*str - 32)].image->width >= ILI9341_WIDTH) {
20000c7c:	89fa      	ldrh	r2, [r7, #14]
20000c7e:	68bb      	ldr	r3, [r7, #8]
20000c80:	781b      	ldrb	r3, [r3, #0]
20000c82:	3b20      	subs	r3, #32
20000c84:	4926      	ldr	r1, [pc, #152]	; (20000d20 <ILI9341_WriteMyString+0xc0>)
20000c86:	00db      	lsls	r3, r3, #3
20000c88:	440b      	add	r3, r1
20000c8a:	685b      	ldr	r3, [r3, #4]
20000c8c:	889b      	ldrh	r3, [r3, #4]
20000c8e:	4413      	add	r3, r2
20000c90:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20000c94:	db20      	blt.n	20000cd8 <ILI9341_WriteMyString+0x78>
			x = 0;
20000c96:	2300      	movs	r3, #0
20000c98:	81fb      	strh	r3, [r7, #14]
			y += Font24x36_array[(*str - 32)].image->height;
20000c9a:	68bb      	ldr	r3, [r7, #8]
20000c9c:	781b      	ldrb	r3, [r3, #0]
20000c9e:	3b20      	subs	r3, #32
20000ca0:	4a1f      	ldr	r2, [pc, #124]	; (20000d20 <ILI9341_WriteMyString+0xc0>)
20000ca2:	00db      	lsls	r3, r3, #3
20000ca4:	4413      	add	r3, r2
20000ca6:	685b      	ldr	r3, [r3, #4]
20000ca8:	88da      	ldrh	r2, [r3, #6]
20000caa:	89bb      	ldrh	r3, [r7, #12]
20000cac:	4413      	add	r3, r2
20000cae:	81bb      	strh	r3, [r7, #12]
			if (y + Font24x36_array[(*str - 32)].image->height >= ILI9341_HEIGHT) {
20000cb0:	89ba      	ldrh	r2, [r7, #12]
20000cb2:	68bb      	ldr	r3, [r7, #8]
20000cb4:	781b      	ldrb	r3, [r3, #0]
20000cb6:	3b20      	subs	r3, #32
20000cb8:	4919      	ldr	r1, [pc, #100]	; (20000d20 <ILI9341_WriteMyString+0xc0>)
20000cba:	00db      	lsls	r3, r3, #3
20000cbc:	440b      	add	r3, r1
20000cbe:	685b      	ldr	r3, [r3, #4]
20000cc0:	88db      	ldrh	r3, [r3, #6]
20000cc2:	4413      	add	r3, r2
20000cc4:	2bef      	cmp	r3, #239	; 0xef
20000cc6:	dc24      	bgt.n	20000d12 <ILI9341_WriteMyString+0xb2>
				break;
			}
			if (*str == ' ') {
20000cc8:	68bb      	ldr	r3, [r7, #8]
20000cca:	781b      	ldrb	r3, [r3, #0]
20000ccc:	2b20      	cmp	r3, #32
20000cce:	d103      	bne.n	20000cd8 <ILI9341_WriteMyString+0x78>
				// skip spaces in the beginning of the new line
				str++;
20000cd0:	68bb      	ldr	r3, [r7, #8]
20000cd2:	3301      	adds	r3, #1
20000cd4:	60bb      	str	r3, [r7, #8]
				continue;
20000cd6:	e017      	b.n	20000d08 <ILI9341_WriteMyString+0xa8>
			}
		}
		ILI9341_WriteMyChar(x, y, *str, color, bgcolor);
20000cd8:	68bb      	ldr	r3, [r7, #8]
20000cda:	781a      	ldrb	r2, [r3, #0]
20000cdc:	88fc      	ldrh	r4, [r7, #6]
20000cde:	89b9      	ldrh	r1, [r7, #12]
20000ce0:	89f8      	ldrh	r0, [r7, #14]
20000ce2:	8c3b      	ldrh	r3, [r7, #32]
20000ce4:	9300      	str	r3, [sp, #0]
20000ce6:	4623      	mov	r3, r4
20000ce8:	f7ff fec4 	bl	20000a74 <ILI9341_WriteMyChar>
		x += Font24x36_array[(*str - 32)].image->width;
20000cec:	68bb      	ldr	r3, [r7, #8]
20000cee:	781b      	ldrb	r3, [r3, #0]
20000cf0:	3b20      	subs	r3, #32
20000cf2:	4a0b      	ldr	r2, [pc, #44]	; (20000d20 <ILI9341_WriteMyString+0xc0>)
20000cf4:	00db      	lsls	r3, r3, #3
20000cf6:	4413      	add	r3, r2
20000cf8:	685b      	ldr	r3, [r3, #4]
20000cfa:	889a      	ldrh	r2, [r3, #4]
20000cfc:	89fb      	ldrh	r3, [r7, #14]
20000cfe:	4413      	add	r3, r2
20000d00:	81fb      	strh	r3, [r7, #14]
		str++;
20000d02:	68bb      	ldr	r3, [r7, #8]
20000d04:	3301      	adds	r3, #1
20000d06:	60bb      	str	r3, [r7, #8]
	while (*str) {
20000d08:	68bb      	ldr	r3, [r7, #8]
20000d0a:	781b      	ldrb	r3, [r3, #0]
20000d0c:	2b00      	cmp	r3, #0
20000d0e:	d1b5      	bne.n	20000c7c <ILI9341_WriteMyString+0x1c>
20000d10:	e000      	b.n	20000d14 <ILI9341_WriteMyString+0xb4>
				break;
20000d12:	bf00      	nop
	}
	ILI9341_Unselect();
20000d14:	f7ff fc1e 	bl	20000554 <ILI9341_Unselect>
}
20000d18:	bf00      	nop
20000d1a:	3714      	adds	r7, #20
20000d1c:	46bd      	mov	sp, r7
20000d1e:	bd90      	pop	{r4, r7, pc}
20000d20:	20007144 	.word	0x20007144

20000d24 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font,
		uint16_t color, uint16_t bgcolor) {
20000d24:	b082      	sub	sp, #8
20000d26:	b590      	push	{r4, r7, lr}
20000d28:	b089      	sub	sp, #36	; 0x24
20000d2a:	af00      	add	r7, sp, #0
20000d2c:	637b      	str	r3, [r7, #52]	; 0x34
20000d2e:	4603      	mov	r3, r0
20000d30:	80fb      	strh	r3, [r7, #6]
20000d32:	460b      	mov	r3, r1
20000d34:	80bb      	strh	r3, [r7, #4]
20000d36:	4613      	mov	r3, r2
20000d38:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ILI9341_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
20000d3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
20000d3e:	b29a      	uxth	r2, r3
20000d40:	88fb      	ldrh	r3, [r7, #6]
20000d42:	4413      	add	r3, r2
20000d44:	b29b      	uxth	r3, r3
20000d46:	3b01      	subs	r3, #1
20000d48:	b29c      	uxth	r4, r3
20000d4a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
20000d4e:	b29a      	uxth	r2, r3
20000d50:	88bb      	ldrh	r3, [r7, #4]
20000d52:	4413      	add	r3, r2
20000d54:	b29b      	uxth	r3, r3
20000d56:	3b01      	subs	r3, #1
20000d58:	b29b      	uxth	r3, r3
20000d5a:	88b9      	ldrh	r1, [r7, #4]
20000d5c:	88f8      	ldrh	r0, [r7, #6]
20000d5e:	4622      	mov	r2, r4
20000d60:	f7ff fc5c 	bl	2000061c <ILI9341_SetAddressWindow>
	for (i = 0; i < font.height; i++) {
20000d64:	2300      	movs	r3, #0
20000d66:	61fb      	str	r3, [r7, #28]
20000d68:	e043      	b.n	20000df2 <ILI9341_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
20000d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
20000d6c:	78fb      	ldrb	r3, [r7, #3]
20000d6e:	3b20      	subs	r3, #32
20000d70:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
20000d74:	fb01 f303 	mul.w	r3, r1, r3
20000d78:	4619      	mov	r1, r3
20000d7a:	69fb      	ldr	r3, [r7, #28]
20000d7c:	440b      	add	r3, r1
20000d7e:	005b      	lsls	r3, r3, #1
20000d80:	4413      	add	r3, r2
20000d82:	881b      	ldrh	r3, [r3, #0]
20000d84:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
20000d86:	2300      	movs	r3, #0
20000d88:	61bb      	str	r3, [r7, #24]
20000d8a:	e029      	b.n	20000de0 <ILI9341_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
20000d8c:	697a      	ldr	r2, [r7, #20]
20000d8e:	69bb      	ldr	r3, [r7, #24]
20000d90:	fa02 f303 	lsl.w	r3, r2, r3
20000d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
20000d98:	2b00      	cmp	r3, #0
20000d9a:	d00e      	beq.n	20000dba <ILI9341_WriteChar+0x96>
				uint8_t data[] = { color >> 8, color & 0xFF };
20000d9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
20000d9e:	0a1b      	lsrs	r3, r3, #8
20000da0:	b29b      	uxth	r3, r3
20000da2:	b2db      	uxtb	r3, r3
20000da4:	743b      	strb	r3, [r7, #16]
20000da6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
20000da8:	b2db      	uxtb	r3, r3
20000daa:	747b      	strb	r3, [r7, #17]
				ILI9341_WriteData(data, sizeof(data));
20000dac:	f107 0310 	add.w	r3, r7, #16
20000db0:	2102      	movs	r1, #2
20000db2:	4618      	mov	r0, r3
20000db4:	f7ff fc08 	bl	200005c8 <ILI9341_WriteData>
20000db8:	e00f      	b.n	20000dda <ILI9341_WriteChar+0xb6>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
20000dba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
20000dbe:	0a1b      	lsrs	r3, r3, #8
20000dc0:	b29b      	uxth	r3, r3
20000dc2:	b2db      	uxtb	r3, r3
20000dc4:	733b      	strb	r3, [r7, #12]
20000dc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
20000dca:	b2db      	uxtb	r3, r3
20000dcc:	737b      	strb	r3, [r7, #13]
				ILI9341_WriteData(data, sizeof(data));
20000dce:	f107 030c 	add.w	r3, r7, #12
20000dd2:	2102      	movs	r1, #2
20000dd4:	4618      	mov	r0, r3
20000dd6:	f7ff fbf7 	bl	200005c8 <ILI9341_WriteData>
		for (j = 0; j < font.width; j++) {
20000dda:	69bb      	ldr	r3, [r7, #24]
20000ddc:	3301      	adds	r3, #1
20000dde:	61bb      	str	r3, [r7, #24]
20000de0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
20000de4:	461a      	mov	r2, r3
20000de6:	69bb      	ldr	r3, [r7, #24]
20000de8:	4293      	cmp	r3, r2
20000dea:	d3cf      	bcc.n	20000d8c <ILI9341_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
20000dec:	69fb      	ldr	r3, [r7, #28]
20000dee:	3301      	adds	r3, #1
20000df0:	61fb      	str	r3, [r7, #28]
20000df2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
20000df6:	461a      	mov	r2, r3
20000df8:	69fb      	ldr	r3, [r7, #28]
20000dfa:	4293      	cmp	r3, r2
20000dfc:	d3b5      	bcc.n	20000d6a <ILI9341_WriteChar+0x46>
			}
		}
	}
}
20000dfe:	bf00      	nop
20000e00:	bf00      	nop
20000e02:	3724      	adds	r7, #36	; 0x24
20000e04:	46bd      	mov	sp, r7
20000e06:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
20000e0a:	b002      	add	sp, #8
20000e0c:	4770      	bx	lr

20000e0e <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font,
		uint16_t color, uint16_t bgcolor) {
20000e0e:	b082      	sub	sp, #8
20000e10:	b580      	push	{r7, lr}
20000e12:	b086      	sub	sp, #24
20000e14:	af04      	add	r7, sp, #16
20000e16:	603a      	str	r2, [r7, #0]
20000e18:	617b      	str	r3, [r7, #20]
20000e1a:	4603      	mov	r3, r0
20000e1c:	80fb      	strh	r3, [r7, #6]
20000e1e:	460b      	mov	r3, r1
20000e20:	80bb      	strh	r3, [r7, #4]
	ILI9341_Select();
20000e22:	f7ff fb87 	bl	20000534 <ILI9341_Select>

	while (*str) {
20000e26:	e02e      	b.n	20000e86 <ILI9341_WriteString+0x78>
		if (x + font.width >= ILI9341_WIDTH) {
20000e28:	88fb      	ldrh	r3, [r7, #6]
20000e2a:	7d3a      	ldrb	r2, [r7, #20]
20000e2c:	4413      	add	r3, r2
20000e2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
20000e32:	db13      	blt.n	20000e5c <ILI9341_WriteString+0x4e>
			x = 0;
20000e34:	2300      	movs	r3, #0
20000e36:	80fb      	strh	r3, [r7, #6]
			y += font.height;
20000e38:	7d7b      	ldrb	r3, [r7, #21]
20000e3a:	b29a      	uxth	r2, r3
20000e3c:	88bb      	ldrh	r3, [r7, #4]
20000e3e:	4413      	add	r3, r2
20000e40:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ILI9341_HEIGHT) {
20000e42:	88bb      	ldrh	r3, [r7, #4]
20000e44:	7d7a      	ldrb	r2, [r7, #21]
20000e46:	4413      	add	r3, r2
20000e48:	2bef      	cmp	r3, #239	; 0xef
20000e4a:	dc21      	bgt.n	20000e90 <ILI9341_WriteString+0x82>
				break;
			}
			if (*str == ' ') {
20000e4c:	683b      	ldr	r3, [r7, #0]
20000e4e:	781b      	ldrb	r3, [r3, #0]
20000e50:	2b20      	cmp	r3, #32
20000e52:	d103      	bne.n	20000e5c <ILI9341_WriteString+0x4e>
				// skip spaces in the beginning of the new line
				str++;
20000e54:	683b      	ldr	r3, [r7, #0]
20000e56:	3301      	adds	r3, #1
20000e58:	603b      	str	r3, [r7, #0]
				continue;
20000e5a:	e014      	b.n	20000e86 <ILI9341_WriteString+0x78>
			}
		}
		ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
20000e5c:	683b      	ldr	r3, [r7, #0]
20000e5e:	781a      	ldrb	r2, [r3, #0]
20000e60:	88b9      	ldrh	r1, [r7, #4]
20000e62:	88f8      	ldrh	r0, [r7, #6]
20000e64:	8c3b      	ldrh	r3, [r7, #32]
20000e66:	9302      	str	r3, [sp, #8]
20000e68:	8bbb      	ldrh	r3, [r7, #28]
20000e6a:	9301      	str	r3, [sp, #4]
20000e6c:	69bb      	ldr	r3, [r7, #24]
20000e6e:	9300      	str	r3, [sp, #0]
20000e70:	697b      	ldr	r3, [r7, #20]
20000e72:	f7ff ff57 	bl	20000d24 <ILI9341_WriteChar>
		x += font.width;
20000e76:	7d3b      	ldrb	r3, [r7, #20]
20000e78:	b29a      	uxth	r2, r3
20000e7a:	88fb      	ldrh	r3, [r7, #6]
20000e7c:	4413      	add	r3, r2
20000e7e:	80fb      	strh	r3, [r7, #6]
		str++;
20000e80:	683b      	ldr	r3, [r7, #0]
20000e82:	3301      	adds	r3, #1
20000e84:	603b      	str	r3, [r7, #0]
	while (*str) {
20000e86:	683b      	ldr	r3, [r7, #0]
20000e88:	781b      	ldrb	r3, [r3, #0]
20000e8a:	2b00      	cmp	r3, #0
20000e8c:	d1cc      	bne.n	20000e28 <ILI9341_WriteString+0x1a>
20000e8e:	e000      	b.n	20000e92 <ILI9341_WriteString+0x84>
				break;
20000e90:	bf00      	nop
	}

	ILI9341_Unselect();
20000e92:	f7ff fb5f 	bl	20000554 <ILI9341_Unselect>
}
20000e96:	bf00      	nop
20000e98:	3708      	adds	r7, #8
20000e9a:	46bd      	mov	sp, r7
20000e9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
20000ea0:	b002      	add	sp, #8
20000ea2:	4770      	bx	lr

20000ea4 <drawCircle>:
 @param    x0   Center-point x coordinate
 @param    y0   Center-point y coordinate
 @param    r   Radius of circle
 @param    color 16-bit 5-6-5 Color to draw with
 **************************************************************************/
void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
20000ea4:	b590      	push	{r4, r7, lr}
20000ea6:	b087      	sub	sp, #28
20000ea8:	af00      	add	r7, sp, #0
20000eaa:	4604      	mov	r4, r0
20000eac:	4608      	mov	r0, r1
20000eae:	4611      	mov	r1, r2
20000eb0:	461a      	mov	r2, r3
20000eb2:	4623      	mov	r3, r4
20000eb4:	80fb      	strh	r3, [r7, #6]
20000eb6:	4603      	mov	r3, r0
20000eb8:	80bb      	strh	r3, [r7, #4]
20000eba:	460b      	mov	r3, r1
20000ebc:	807b      	strh	r3, [r7, #2]
20000ebe:	4613      	mov	r3, r2
20000ec0:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
20000ec2:	887b      	ldrh	r3, [r7, #2]
20000ec4:	f1c3 0301 	rsb	r3, r3, #1
20000ec8:	b29b      	uxth	r3, r3
20000eca:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
20000ecc:	2301      	movs	r3, #1
20000ece:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
20000ed0:	887b      	ldrh	r3, [r7, #2]
20000ed2:	461a      	mov	r2, r3
20000ed4:	03d2      	lsls	r2, r2, #15
20000ed6:	1ad3      	subs	r3, r2, r3
20000ed8:	005b      	lsls	r3, r3, #1
20000eda:	b29b      	uxth	r3, r3
20000edc:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
20000ede:	2300      	movs	r3, #0
20000ee0:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
20000ee2:	887b      	ldrh	r3, [r7, #2]
20000ee4:	81fb      	strh	r3, [r7, #14]

	ILI9341_Select();
20000ee6:	f7ff fb25 	bl	20000534 <ILI9341_Select>
	ILI9341_DrawPixel(x0, y0 + r, color);
20000eea:	88f8      	ldrh	r0, [r7, #6]
20000eec:	88ba      	ldrh	r2, [r7, #4]
20000eee:	887b      	ldrh	r3, [r7, #2]
20000ef0:	4413      	add	r3, r2
20000ef2:	b29b      	uxth	r3, r3
20000ef4:	883a      	ldrh	r2, [r7, #0]
20000ef6:	4619      	mov	r1, r3
20000ef8:	f7ff fd0e 	bl	20000918 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0, y0 - r, color);
20000efc:	88f8      	ldrh	r0, [r7, #6]
20000efe:	88ba      	ldrh	r2, [r7, #4]
20000f00:	887b      	ldrh	r3, [r7, #2]
20000f02:	1ad3      	subs	r3, r2, r3
20000f04:	b29b      	uxth	r3, r3
20000f06:	883a      	ldrh	r2, [r7, #0]
20000f08:	4619      	mov	r1, r3
20000f0a:	f7ff fd05 	bl	20000918 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0 + r, y0, color);
20000f0e:	88fa      	ldrh	r2, [r7, #6]
20000f10:	887b      	ldrh	r3, [r7, #2]
20000f12:	4413      	add	r3, r2
20000f14:	b29b      	uxth	r3, r3
20000f16:	88b9      	ldrh	r1, [r7, #4]
20000f18:	883a      	ldrh	r2, [r7, #0]
20000f1a:	4618      	mov	r0, r3
20000f1c:	f7ff fcfc 	bl	20000918 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0 - r, y0, color);
20000f20:	88fa      	ldrh	r2, [r7, #6]
20000f22:	887b      	ldrh	r3, [r7, #2]
20000f24:	1ad3      	subs	r3, r2, r3
20000f26:	b29b      	uxth	r3, r3
20000f28:	88b9      	ldrh	r1, [r7, #4]
20000f2a:	883a      	ldrh	r2, [r7, #0]
20000f2c:	4618      	mov	r0, r3
20000f2e:	f7ff fcf3 	bl	20000918 <ILI9341_DrawPixel>

	while (x < y) {
20000f32:	e081      	b.n	20001038 <drawCircle+0x194>
		if (f >= 0) {
20000f34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
20000f38:	2b00      	cmp	r3, #0
20000f3a:	db0e      	blt.n	20000f5a <drawCircle+0xb6>
			y--;
20000f3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20000f40:	b29b      	uxth	r3, r3
20000f42:	3b01      	subs	r3, #1
20000f44:	b29b      	uxth	r3, r3
20000f46:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
20000f48:	8a7b      	ldrh	r3, [r7, #18]
20000f4a:	3302      	adds	r3, #2
20000f4c:	b29b      	uxth	r3, r3
20000f4e:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
20000f50:	8afa      	ldrh	r2, [r7, #22]
20000f52:	8a7b      	ldrh	r3, [r7, #18]
20000f54:	4413      	add	r3, r2
20000f56:	b29b      	uxth	r3, r3
20000f58:	82fb      	strh	r3, [r7, #22]
		}
		x++;
20000f5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
20000f5e:	b29b      	uxth	r3, r3
20000f60:	3301      	adds	r3, #1
20000f62:	b29b      	uxth	r3, r3
20000f64:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
20000f66:	8abb      	ldrh	r3, [r7, #20]
20000f68:	3302      	adds	r3, #2
20000f6a:	b29b      	uxth	r3, r3
20000f6c:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
20000f6e:	8afa      	ldrh	r2, [r7, #22]
20000f70:	8abb      	ldrh	r3, [r7, #20]
20000f72:	4413      	add	r3, r2
20000f74:	b29b      	uxth	r3, r3
20000f76:	82fb      	strh	r3, [r7, #22]

		ILI9341_DrawPixel(x0 + x, y0 + y, color);
20000f78:	88fa      	ldrh	r2, [r7, #6]
20000f7a:	8a3b      	ldrh	r3, [r7, #16]
20000f7c:	4413      	add	r3, r2
20000f7e:	b298      	uxth	r0, r3
20000f80:	88ba      	ldrh	r2, [r7, #4]
20000f82:	89fb      	ldrh	r3, [r7, #14]
20000f84:	4413      	add	r3, r2
20000f86:	b29b      	uxth	r3, r3
20000f88:	883a      	ldrh	r2, [r7, #0]
20000f8a:	4619      	mov	r1, r3
20000f8c:	f7ff fcc4 	bl	20000918 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - x, y0 + y, color);
20000f90:	88fa      	ldrh	r2, [r7, #6]
20000f92:	8a3b      	ldrh	r3, [r7, #16]
20000f94:	1ad3      	subs	r3, r2, r3
20000f96:	b298      	uxth	r0, r3
20000f98:	88ba      	ldrh	r2, [r7, #4]
20000f9a:	89fb      	ldrh	r3, [r7, #14]
20000f9c:	4413      	add	r3, r2
20000f9e:	b29b      	uxth	r3, r3
20000fa0:	883a      	ldrh	r2, [r7, #0]
20000fa2:	4619      	mov	r1, r3
20000fa4:	f7ff fcb8 	bl	20000918 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + x, y0 - y, color);
20000fa8:	88fa      	ldrh	r2, [r7, #6]
20000faa:	8a3b      	ldrh	r3, [r7, #16]
20000fac:	4413      	add	r3, r2
20000fae:	b298      	uxth	r0, r3
20000fb0:	88ba      	ldrh	r2, [r7, #4]
20000fb2:	89fb      	ldrh	r3, [r7, #14]
20000fb4:	1ad3      	subs	r3, r2, r3
20000fb6:	b29b      	uxth	r3, r3
20000fb8:	883a      	ldrh	r2, [r7, #0]
20000fba:	4619      	mov	r1, r3
20000fbc:	f7ff fcac 	bl	20000918 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - x, y0 - y, color);
20000fc0:	88fa      	ldrh	r2, [r7, #6]
20000fc2:	8a3b      	ldrh	r3, [r7, #16]
20000fc4:	1ad3      	subs	r3, r2, r3
20000fc6:	b298      	uxth	r0, r3
20000fc8:	88ba      	ldrh	r2, [r7, #4]
20000fca:	89fb      	ldrh	r3, [r7, #14]
20000fcc:	1ad3      	subs	r3, r2, r3
20000fce:	b29b      	uxth	r3, r3
20000fd0:	883a      	ldrh	r2, [r7, #0]
20000fd2:	4619      	mov	r1, r3
20000fd4:	f7ff fca0 	bl	20000918 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + y, y0 + x, color);
20000fd8:	88fa      	ldrh	r2, [r7, #6]
20000fda:	89fb      	ldrh	r3, [r7, #14]
20000fdc:	4413      	add	r3, r2
20000fde:	b298      	uxth	r0, r3
20000fe0:	88ba      	ldrh	r2, [r7, #4]
20000fe2:	8a3b      	ldrh	r3, [r7, #16]
20000fe4:	4413      	add	r3, r2
20000fe6:	b29b      	uxth	r3, r3
20000fe8:	883a      	ldrh	r2, [r7, #0]
20000fea:	4619      	mov	r1, r3
20000fec:	f7ff fc94 	bl	20000918 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - y, y0 + x, color);
20000ff0:	88fa      	ldrh	r2, [r7, #6]
20000ff2:	89fb      	ldrh	r3, [r7, #14]
20000ff4:	1ad3      	subs	r3, r2, r3
20000ff6:	b298      	uxth	r0, r3
20000ff8:	88ba      	ldrh	r2, [r7, #4]
20000ffa:	8a3b      	ldrh	r3, [r7, #16]
20000ffc:	4413      	add	r3, r2
20000ffe:	b29b      	uxth	r3, r3
20001000:	883a      	ldrh	r2, [r7, #0]
20001002:	4619      	mov	r1, r3
20001004:	f7ff fc88 	bl	20000918 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 + y, y0 - x, color);
20001008:	88fa      	ldrh	r2, [r7, #6]
2000100a:	89fb      	ldrh	r3, [r7, #14]
2000100c:	4413      	add	r3, r2
2000100e:	b298      	uxth	r0, r3
20001010:	88ba      	ldrh	r2, [r7, #4]
20001012:	8a3b      	ldrh	r3, [r7, #16]
20001014:	1ad3      	subs	r3, r2, r3
20001016:	b29b      	uxth	r3, r3
20001018:	883a      	ldrh	r2, [r7, #0]
2000101a:	4619      	mov	r1, r3
2000101c:	f7ff fc7c 	bl	20000918 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x0 - y, y0 - x, color);
20001020:	88fa      	ldrh	r2, [r7, #6]
20001022:	89fb      	ldrh	r3, [r7, #14]
20001024:	1ad3      	subs	r3, r2, r3
20001026:	b298      	uxth	r0, r3
20001028:	88ba      	ldrh	r2, [r7, #4]
2000102a:	8a3b      	ldrh	r3, [r7, #16]
2000102c:	1ad3      	subs	r3, r2, r3
2000102e:	b29b      	uxth	r3, r3
20001030:	883a      	ldrh	r2, [r7, #0]
20001032:	4619      	mov	r1, r3
20001034:	f7ff fc70 	bl	20000918 <ILI9341_DrawPixel>
	while (x < y) {
20001038:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
2000103c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001040:	429a      	cmp	r2, r3
20001042:	f6ff af77 	blt.w	20000f34 <drawCircle+0x90>
	}
	ILI9341_Unselect();
20001046:	f7ff fa85 	bl	20000554 <ILI9341_Unselect>
}
2000104a:	bf00      	nop
2000104c:	371c      	adds	r7, #28
2000104e:	46bd      	mov	sp, r7
20001050:	bd90      	pop	{r4, r7, pc}
	...

20001054 <ILI9341_ToucInit>:
uint32_t minRawY;
uint32_t maxRawY;
uint32_t minX, maxX, minY, maxY;
//------------------------------ функции ---------------------------------------------//

void ILI9341_ToucInit (void){
20001054:	b480      	push	{r7}
20001056:	b083      	sub	sp, #12
20001058:	af00      	add	r7, sp, #0
	uint32_t* tempAdr = (uint32_t*)ADR_DATA_MIN_X;
2000105a:	4b05      	ldr	r3, [pc, #20]	; (20001070 <ILI9341_ToucInit+0x1c>)
2000105c:	607b      	str	r3, [r7, #4]
	//minRawX = *tempAdr;
    tempAdr = (uint32_t*)ADR_DATA_MAX_X;
2000105e:	4b05      	ldr	r3, [pc, #20]	; (20001074 <ILI9341_ToucInit+0x20>)
20001060:	607b      	str	r3, [r7, #4]
	//maxRawX = *tempAdr;
}
20001062:	bf00      	nop
20001064:	370c      	adds	r7, #12
20001066:	46bd      	mov	sp, r7
20001068:	f85d 7b04 	ldr.w	r7, [sp], #4
2000106c:	4770      	bx	lr
2000106e:	bf00      	nop
20001070:	0807fff0 	.word	0x0807fff0
20001074:	0807fff4 	.word	0x0807fff4

20001078 <ILI9341_TouchSelect>:
/**************************************************************************
 @brief     will return the modulus of the num like abs in C
 @param    num  incoming number
 **************************************************************************/
static void ILI9341_TouchSelect() {
20001078:	b580      	push	{r7, lr}
2000107a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
2000107c:	2200      	movs	r2, #0
2000107e:	f44f 7180 	mov.w	r1, #256	; 0x100
20001082:	4802      	ldr	r0, [pc, #8]	; (2000108c <ILI9341_TouchSelect+0x14>)
20001084:	f001 fa9c 	bl	200025c0 <HAL_GPIO_WritePin>
}
20001088:	bf00      	nop
2000108a:	bd80      	pop	{r7, pc}
2000108c:	40020000 	.word	0x40020000

20001090 <ILI9341_TouchUnselect>:
/**************************************************************************
 @brief     swaps values in variables
 @param    a  num first
 @param    a  num two
 **************************************************************************/
void ILI9341_TouchUnselect() {
20001090:	b580      	push	{r7, lr}
20001092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
20001094:	2201      	movs	r2, #1
20001096:	f44f 7180 	mov.w	r1, #256	; 0x100
2000109a:	4802      	ldr	r0, [pc, #8]	; (200010a4 <ILI9341_TouchUnselect+0x14>)
2000109c:	f001 fa90 	bl	200025c0 <HAL_GPIO_WritePin>
}
200010a0:	bf00      	nop
200010a2:	bd80      	pop	{r7, pc}
200010a4:	40020000 	.word	0x40020000

200010a8 <ILI9341_TouchPressed>:

bool ILI9341_TouchPressed() {
200010a8:	b580      	push	{r7, lr}
200010aa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(ILI9341_TOUCH_IRQ_GPIO_Port, ILI9341_TOUCH_IRQ_Pin) == GPIO_PIN_RESET;
200010ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
200010b0:	4805      	ldr	r0, [pc, #20]	; (200010c8 <ILI9341_TouchPressed+0x20>)
200010b2:	f001 fa6d 	bl	20002590 <HAL_GPIO_ReadPin>
200010b6:	4603      	mov	r3, r0
200010b8:	2b00      	cmp	r3, #0
200010ba:	bf0c      	ite	eq
200010bc:	2301      	moveq	r3, #1
200010be:	2300      	movne	r3, #0
200010c0:	b2db      	uxtb	r3, r3
}
200010c2:	4618      	mov	r0, r3
200010c4:	bd80      	pop	{r7, pc}
200010c6:	bf00      	nop
200010c8:	40020400 	.word	0x40020400

200010cc <ILI9341_TouchGetCoordinates>:

bool ILI9341_TouchGetCoordinates(uint16_t *x, uint16_t *y) {
200010cc:	b580      	push	{r7, lr}
200010ce:	b08e      	sub	sp, #56	; 0x38
200010d0:	af02      	add	r7, sp, #8
200010d2:	6078      	str	r0, [r7, #4]
200010d4:	6039      	str	r1, [r7, #0]
	static const uint8_t cmd_read_x[] = { READ_X };
	static const uint8_t cmd_read_y[] = { READ_Y };
	static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

	ILI9341_TouchSelect();
200010d6:	f7ff ffcf 	bl	20001078 <ILI9341_TouchSelect>

	uint32_t avg_x = 0;
200010da:	2300      	movs	r3, #0
200010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t avg_y = 0;
200010de:	2300      	movs	r3, #0
200010e0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t nsamples = 0;
200010e2:	2300      	movs	r3, #0
200010e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < 16; i++) {
200010e8:	2300      	movs	r3, #0
200010ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
200010ee:	e04b      	b.n	20001188 <ILI9341_TouchGetCoordinates+0xbc>
		if (!ILI9341_TouchPressed())
200010f0:	f7ff ffda 	bl	200010a8 <ILI9341_TouchPressed>
200010f4:	4603      	mov	r3, r0
200010f6:	f083 0301 	eor.w	r3, r3, #1
200010fa:	b2db      	uxtb	r3, r3
200010fc:	2b00      	cmp	r3, #0
200010fe:	d148      	bne.n	20001192 <ILI9341_TouchGetCoordinates+0xc6>
			break;

		nsamples++;
20001100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001104:	3301      	adds	r3, #1
20001106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
2000110a:	f04f 33ff 	mov.w	r3, #4294967295
2000110e:	2201      	movs	r2, #1
20001110:	494d      	ldr	r1, [pc, #308]	; (20001248 <ILI9341_TouchGetCoordinates+0x17c>)
20001112:	484e      	ldr	r0, [pc, #312]	; (2000124c <ILI9341_TouchGetCoordinates+0x180>)
20001114:	f001 ff1b 	bl	20002f4e <HAL_SPI_Transmit>
		uint8_t y_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
20001118:	f107 0210 	add.w	r2, r7, #16
2000111c:	f04f 33ff 	mov.w	r3, #4294967295
20001120:	9300      	str	r3, [sp, #0]
20001122:	2302      	movs	r3, #2
20001124:	494a      	ldr	r1, [pc, #296]	; (20001250 <ILI9341_TouchGetCoordinates+0x184>)
20001126:	4849      	ldr	r0, [pc, #292]	; (2000124c <ILI9341_TouchGetCoordinates+0x180>)
20001128:	f002 f84d 	bl	200031c6 <HAL_SPI_TransmitReceive>

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
2000112c:	f04f 33ff 	mov.w	r3, #4294967295
20001130:	2201      	movs	r2, #1
20001132:	4948      	ldr	r1, [pc, #288]	; (20001254 <ILI9341_TouchGetCoordinates+0x188>)
20001134:	4845      	ldr	r0, [pc, #276]	; (2000124c <ILI9341_TouchGetCoordinates+0x180>)
20001136:	f001 ff0a 	bl	20002f4e <HAL_SPI_Transmit>
		uint8_t x_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
2000113a:	f107 020c 	add.w	r2, r7, #12
2000113e:	f04f 33ff 	mov.w	r3, #4294967295
20001142:	9300      	str	r3, [sp, #0]
20001144:	2302      	movs	r3, #2
20001146:	4942      	ldr	r1, [pc, #264]	; (20001250 <ILI9341_TouchGetCoordinates+0x184>)
20001148:	4840      	ldr	r0, [pc, #256]	; (2000124c <ILI9341_TouchGetCoordinates+0x180>)
2000114a:	f002 f83c 	bl	200031c6 <HAL_SPI_TransmitReceive>

		uint32_t mirrorX = ((((uint16_t) x_raw[0]) << 8) | (uint16_t) x_raw[1]);
2000114e:	7b3b      	ldrb	r3, [r7, #12]
20001150:	021b      	lsls	r3, r3, #8
20001152:	7b7a      	ldrb	r2, [r7, #13]
20001154:	4313      	orrs	r3, r2
20001156:	61bb      	str	r3, [r7, #24]
		avg_x += (mirrorX >> 3) & 0xFFF;
20001158:	69bb      	ldr	r3, [r7, #24]
2000115a:	08db      	lsrs	r3, r3, #3
2000115c:	f3c3 030b 	ubfx	r3, r3, #0, #12
20001160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001162:	4413      	add	r3, r2
20001164:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t mirrorY = ((((uint16_t) y_raw[0]) << 8) | (uint16_t) y_raw[1]);
20001166:	7c3b      	ldrb	r3, [r7, #16]
20001168:	021b      	lsls	r3, r3, #8
2000116a:	7c7a      	ldrb	r2, [r7, #17]
2000116c:	4313      	orrs	r3, r2
2000116e:	617b      	str	r3, [r7, #20]
		avg_y += (mirrorY >> 3) & 0xFFF;
20001170:	697b      	ldr	r3, [r7, #20]
20001172:	08db      	lsrs	r3, r3, #3
20001174:	f3c3 030b 	ubfx	r3, r3, #0, #12
20001178:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000117a:	4413      	add	r3, r2
2000117c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < 16; i++) {
2000117e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
20001182:	3301      	adds	r3, #1
20001184:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
20001188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
2000118c:	2b0f      	cmp	r3, #15
2000118e:	d9af      	bls.n	200010f0 <ILI9341_TouchGetCoordinates+0x24>
20001190:	e000      	b.n	20001194 <ILI9341_TouchGetCoordinates+0xc8>
			break;
20001192:	bf00      	nop
	}

	ILI9341_TouchUnselect();
20001194:	f7ff ff7c 	bl	20001090 <ILI9341_TouchUnselect>

	if (nsamples < 16)
20001198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2000119c:	2b0f      	cmp	r3, #15
2000119e:	d801      	bhi.n	200011a4 <ILI9341_TouchGetCoordinates+0xd8>
		return false;
200011a0:	2300      	movs	r3, #0
200011a2:	e04c      	b.n	2000123e <ILI9341_TouchGetCoordinates+0x172>

	uint32_t raw_x = (avg_x / 16);
200011a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200011a6:	091b      	lsrs	r3, r3, #4
200011a8:	623b      	str	r3, [r7, #32]
	if (raw_x < minRawX) raw_x = minRawX;
200011aa:	4b2b      	ldr	r3, [pc, #172]	; (20001258 <ILI9341_TouchGetCoordinates+0x18c>)
200011ac:	681b      	ldr	r3, [r3, #0]
200011ae:	6a3a      	ldr	r2, [r7, #32]
200011b0:	429a      	cmp	r2, r3
200011b2:	d202      	bcs.n	200011ba <ILI9341_TouchGetCoordinates+0xee>
200011b4:	4b28      	ldr	r3, [pc, #160]	; (20001258 <ILI9341_TouchGetCoordinates+0x18c>)
200011b6:	681b      	ldr	r3, [r3, #0]
200011b8:	623b      	str	r3, [r7, #32]
	if (raw_x > maxRawX) raw_x = maxRawX;
200011ba:	4b28      	ldr	r3, [pc, #160]	; (2000125c <ILI9341_TouchGetCoordinates+0x190>)
200011bc:	681b      	ldr	r3, [r3, #0]
200011be:	6a3a      	ldr	r2, [r7, #32]
200011c0:	429a      	cmp	r2, r3
200011c2:	d902      	bls.n	200011ca <ILI9341_TouchGetCoordinates+0xfe>
200011c4:	4b25      	ldr	r3, [pc, #148]	; (2000125c <ILI9341_TouchGetCoordinates+0x190>)
200011c6:	681b      	ldr	r3, [r3, #0]
200011c8:	623b      	str	r3, [r7, #32]

	uint32_t raw_y = (avg_y / 16);
200011ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
200011cc:	091b      	lsrs	r3, r3, #4
200011ce:	61fb      	str	r3, [r7, #28]
	if (raw_y < minRawY) raw_y = minRawY;
200011d0:	4b23      	ldr	r3, [pc, #140]	; (20001260 <ILI9341_TouchGetCoordinates+0x194>)
200011d2:	681b      	ldr	r3, [r3, #0]
200011d4:	69fa      	ldr	r2, [r7, #28]
200011d6:	429a      	cmp	r2, r3
200011d8:	d202      	bcs.n	200011e0 <ILI9341_TouchGetCoordinates+0x114>
200011da:	4b21      	ldr	r3, [pc, #132]	; (20001260 <ILI9341_TouchGetCoordinates+0x194>)
200011dc:	681b      	ldr	r3, [r3, #0]
200011de:	61fb      	str	r3, [r7, #28]
	if (raw_y > maxRawY) raw_y = maxRawY;
200011e0:	4b20      	ldr	r3, [pc, #128]	; (20001264 <ILI9341_TouchGetCoordinates+0x198>)
200011e2:	681b      	ldr	r3, [r3, #0]
200011e4:	69fa      	ldr	r2, [r7, #28]
200011e6:	429a      	cmp	r2, r3
200011e8:	d902      	bls.n	200011f0 <ILI9341_TouchGetCoordinates+0x124>
200011ea:	4b1e      	ldr	r3, [pc, #120]	; (20001264 <ILI9341_TouchGetCoordinates+0x198>)
200011ec:	681b      	ldr	r3, [r3, #0]
200011ee:	61fb      	str	r3, [r7, #28]

	// Uncomment this line to calibrate touchscreen:
	// UART_Printf("raw_x = %d, raw_y = %d\r\n", x, y);

	*x = (raw_x - minRawX) * ILI9341_TOUCH_SCALE_X / (maxRawX - minRawX);
200011f0:	4b19      	ldr	r3, [pc, #100]	; (20001258 <ILI9341_TouchGetCoordinates+0x18c>)
200011f2:	681b      	ldr	r3, [r3, #0]
200011f4:	6a3a      	ldr	r2, [r7, #32]
200011f6:	1ad2      	subs	r2, r2, r3
200011f8:	4613      	mov	r3, r2
200011fa:	009b      	lsls	r3, r3, #2
200011fc:	4413      	add	r3, r2
200011fe:	019b      	lsls	r3, r3, #6
20001200:	4619      	mov	r1, r3
20001202:	4b16      	ldr	r3, [pc, #88]	; (2000125c <ILI9341_TouchGetCoordinates+0x190>)
20001204:	681a      	ldr	r2, [r3, #0]
20001206:	4b14      	ldr	r3, [pc, #80]	; (20001258 <ILI9341_TouchGetCoordinates+0x18c>)
20001208:	681b      	ldr	r3, [r3, #0]
2000120a:	1ad3      	subs	r3, r2, r3
2000120c:	fbb1 f3f3 	udiv	r3, r1, r3
20001210:	b29a      	uxth	r2, r3
20001212:	687b      	ldr	r3, [r7, #4]
20001214:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - minRawY) * ILI9341_TOUCH_SCALE_Y / (maxRawY - minRawY);
20001216:	4b12      	ldr	r3, [pc, #72]	; (20001260 <ILI9341_TouchGetCoordinates+0x194>)
20001218:	681b      	ldr	r3, [r3, #0]
2000121a:	69fa      	ldr	r2, [r7, #28]
2000121c:	1ad2      	subs	r2, r2, r3
2000121e:	4613      	mov	r3, r2
20001220:	011b      	lsls	r3, r3, #4
20001222:	1a9b      	subs	r3, r3, r2
20001224:	011b      	lsls	r3, r3, #4
20001226:	4619      	mov	r1, r3
20001228:	4b0e      	ldr	r3, [pc, #56]	; (20001264 <ILI9341_TouchGetCoordinates+0x198>)
2000122a:	681a      	ldr	r2, [r3, #0]
2000122c:	4b0c      	ldr	r3, [pc, #48]	; (20001260 <ILI9341_TouchGetCoordinates+0x194>)
2000122e:	681b      	ldr	r3, [r3, #0]
20001230:	1ad3      	subs	r3, r2, r3
20001232:	fbb1 f3f3 	udiv	r3, r1, r3
20001236:	b29a      	uxth	r2, r3
20001238:	683b      	ldr	r3, [r7, #0]
2000123a:	801a      	strh	r2, [r3, #0]

	return true;
2000123c:	2301      	movs	r3, #1
}
2000123e:	4618      	mov	r0, r3
20001240:	3730      	adds	r7, #48	; 0x30
20001242:	46bd      	mov	sp, r7
20001244:	bd80      	pop	{r7, pc}
20001246:	bf00      	nop
20001248:	200094ec 	.word	0x200094ec
2000124c:	200095e8 	.word	0x200095e8
20001250:	200094f0 	.word	0x200094f0
20001254:	200094f4 	.word	0x200094f4
20001258:	20009560 	.word	0x20009560
2000125c:	20009564 	.word	0x20009564
20001260:	20009568 	.word	0x20009568
20001264:	2000956c 	.word	0x2000956c

20001268 <figuringData>:

void figuringData (void){
20001268:	b480      	push	{r7}
2000126a:	b083      	sub	sp, #12
2000126c:	af00      	add	r7, sp, #0
	uint32_t multiplicationFactorX, multiplicationFactorY;
	minX = minX / 2;
2000126e:	4b29      	ldr	r3, [pc, #164]	; (20001314 <figuringData+0xac>)
20001270:	681b      	ldr	r3, [r3, #0]
20001272:	085b      	lsrs	r3, r3, #1
20001274:	4a27      	ldr	r2, [pc, #156]	; (20001314 <figuringData+0xac>)
20001276:	6013      	str	r3, [r2, #0]
	minY = minY / 2;
20001278:	4b27      	ldr	r3, [pc, #156]	; (20001318 <figuringData+0xb0>)
2000127a:	681b      	ldr	r3, [r3, #0]
2000127c:	085b      	lsrs	r3, r3, #1
2000127e:	4a26      	ldr	r2, [pc, #152]	; (20001318 <figuringData+0xb0>)
20001280:	6013      	str	r3, [r2, #0]
	maxX = maxX / 2;
20001282:	4b26      	ldr	r3, [pc, #152]	; (2000131c <figuringData+0xb4>)
20001284:	681b      	ldr	r3, [r3, #0]
20001286:	085b      	lsrs	r3, r3, #1
20001288:	4a24      	ldr	r2, [pc, #144]	; (2000131c <figuringData+0xb4>)
2000128a:	6013      	str	r3, [r2, #0]
	maxY = maxY / 2;
2000128c:	4b24      	ldr	r3, [pc, #144]	; (20001320 <figuringData+0xb8>)
2000128e:	681b      	ldr	r3, [r3, #0]
20001290:	085b      	lsrs	r3, r3, #1
20001292:	4a23      	ldr	r2, [pc, #140]	; (20001320 <figuringData+0xb8>)
20001294:	6013      	str	r3, [r2, #0]
	multiplicationFactorX = (maxX - minX) / 300;   // так как у нас отступ с обоих сторон 10 то рабочая область 300
20001296:	4b21      	ldr	r3, [pc, #132]	; (2000131c <figuringData+0xb4>)
20001298:	681a      	ldr	r2, [r3, #0]
2000129a:	4b1e      	ldr	r3, [pc, #120]	; (20001314 <figuringData+0xac>)
2000129c:	681b      	ldr	r3, [r3, #0]
2000129e:	1ad3      	subs	r3, r2, r3
200012a0:	4a20      	ldr	r2, [pc, #128]	; (20001324 <figuringData+0xbc>)
200012a2:	fba2 2303 	umull	r2, r3, r2, r3
200012a6:	095b      	lsrs	r3, r3, #5
200012a8:	607b      	str	r3, [r7, #4]
	multiplicationFactorY = (maxY - minY) / 220;   // узнаем сколько единиц тача на 1 пиксель
200012aa:	4b1d      	ldr	r3, [pc, #116]	; (20001320 <figuringData+0xb8>)
200012ac:	681a      	ldr	r2, [r3, #0]
200012ae:	4b1a      	ldr	r3, [pc, #104]	; (20001318 <figuringData+0xb0>)
200012b0:	681b      	ldr	r3, [r3, #0]
200012b2:	1ad3      	subs	r3, r2, r3
200012b4:	089b      	lsrs	r3, r3, #2
200012b6:	4a1c      	ldr	r2, [pc, #112]	; (20001328 <figuringData+0xc0>)
200012b8:	fba2 2303 	umull	r2, r3, r2, r3
200012bc:	085b      	lsrs	r3, r3, #1
200012be:	603b      	str	r3, [r7, #0]
	multiplicationFactorX = multiplicationFactorX * 10;  // так как нужно узнать сколько на 10 пикселей примерно отсчетов тача
200012c0:	687a      	ldr	r2, [r7, #4]
200012c2:	4613      	mov	r3, r2
200012c4:	009b      	lsls	r3, r3, #2
200012c6:	4413      	add	r3, r2
200012c8:	005b      	lsls	r3, r3, #1
200012ca:	607b      	str	r3, [r7, #4]
	multiplicationFactorY = multiplicationFactorY * 10;
200012cc:	683a      	ldr	r2, [r7, #0]
200012ce:	4613      	mov	r3, r2
200012d0:	009b      	lsls	r3, r3, #2
200012d2:	4413      	add	r3, r2
200012d4:	005b      	lsls	r3, r3, #1
200012d6:	603b      	str	r3, [r7, #0]
	minRawX = minX - multiplicationFactorX;
200012d8:	4b0e      	ldr	r3, [pc, #56]	; (20001314 <figuringData+0xac>)
200012da:	681a      	ldr	r2, [r3, #0]
200012dc:	687b      	ldr	r3, [r7, #4]
200012de:	1ad3      	subs	r3, r2, r3
200012e0:	4a12      	ldr	r2, [pc, #72]	; (2000132c <figuringData+0xc4>)
200012e2:	6013      	str	r3, [r2, #0]
	maxRawX = maxX + multiplicationFactorX;
200012e4:	4b0d      	ldr	r3, [pc, #52]	; (2000131c <figuringData+0xb4>)
200012e6:	681a      	ldr	r2, [r3, #0]
200012e8:	687b      	ldr	r3, [r7, #4]
200012ea:	4413      	add	r3, r2
200012ec:	4a10      	ldr	r2, [pc, #64]	; (20001330 <figuringData+0xc8>)
200012ee:	6013      	str	r3, [r2, #0]
	minRawY = minY - multiplicationFactorY;
200012f0:	4b09      	ldr	r3, [pc, #36]	; (20001318 <figuringData+0xb0>)
200012f2:	681a      	ldr	r2, [r3, #0]
200012f4:	683b      	ldr	r3, [r7, #0]
200012f6:	1ad3      	subs	r3, r2, r3
200012f8:	4a0e      	ldr	r2, [pc, #56]	; (20001334 <figuringData+0xcc>)
200012fa:	6013      	str	r3, [r2, #0]
	maxRawY = maxY + multiplicationFactorY;
200012fc:	4b08      	ldr	r3, [pc, #32]	; (20001320 <figuringData+0xb8>)
200012fe:	681a      	ldr	r2, [r3, #0]
20001300:	683b      	ldr	r3, [r7, #0]
20001302:	4413      	add	r3, r2
20001304:	4a0c      	ldr	r2, [pc, #48]	; (20001338 <figuringData+0xd0>)
20001306:	6013      	str	r3, [r2, #0]
}
20001308:	bf00      	nop
2000130a:	370c      	adds	r7, #12
2000130c:	46bd      	mov	sp, r7
2000130e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001312:	4770      	bx	lr
20001314:	20009570 	.word	0x20009570
20001318:	20009578 	.word	0x20009578
2000131c:	20009574 	.word	0x20009574
20001320:	2000957c 	.word	0x2000957c
20001324:	1b4e81b5 	.word	0x1b4e81b5
20001328:	094f2095 	.word	0x094f2095
2000132c:	20009560 	.word	0x20009560
20001330:	20009564 	.word	0x20009564
20001334:	20009568 	.word	0x20009568
20001338:	2000956c 	.word	0x2000956c

2000133c <calibTouch>:

uint8_t calibTouch(uint8_t poz) {
2000133c:	b580      	push	{r7, lr}
2000133e:	b08e      	sub	sp, #56	; 0x38
20001340:	af02      	add	r7, sp, #8
20001342:	4603      	mov	r3, r0
20001344:	71fb      	strb	r3, [r7, #7]
	static const uint8_t cmd_read_x[] = { READ_X };
	static const uint8_t cmd_read_y[] = { READ_Y };
	static const uint8_t zeroes_tx[] = { 0x00, 0x00 };
	repit: while (!ILI9341_TouchPressed())
20001346:	e001      	b.n	2000134c <calibTouch+0x10>
	ILI9341_TouchSelect();
20001348:	f7ff fe96 	bl	20001078 <ILI9341_TouchSelect>
	repit: while (!ILI9341_TouchPressed())
2000134c:	f7ff feac 	bl	200010a8 <ILI9341_TouchPressed>
20001350:	4603      	mov	r3, r0
20001352:	f083 0301 	eor.w	r3, r3, #1
20001356:	b2db      	uxtb	r3, r3
20001358:	2b00      	cmp	r3, #0
2000135a:	d1f5      	bne.n	20001348 <calibTouch+0xc>
	uint32_t avg_x = 0;
2000135c:	2300      	movs	r3, #0
2000135e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t avg_y = 0;
20001360:	2300      	movs	r3, #0
20001362:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t nsamples = 0;
20001364:	2300      	movs	r3, #0
20001366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < 16; i++) {
2000136a:	2300      	movs	r3, #0
2000136c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
20001370:	e04b      	b.n	2000140a <calibTouch+0xce>
		if (!ILI9341_TouchPressed())
20001372:	f7ff fe99 	bl	200010a8 <ILI9341_TouchPressed>
20001376:	4603      	mov	r3, r0
20001378:	f083 0301 	eor.w	r3, r3, #1
2000137c:	b2db      	uxtb	r3, r3
2000137e:	2b00      	cmp	r3, #0
20001380:	d148      	bne.n	20001414 <calibTouch+0xd8>
			break;
		nsamples++;
20001382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001386:	3301      	adds	r3, #1
20001388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
2000138c:	f04f 33ff 	mov.w	r3, #4294967295
20001390:	2201      	movs	r2, #1
20001392:	494c      	ldr	r1, [pc, #304]	; (200014c4 <calibTouch+0x188>)
20001394:	484c      	ldr	r0, [pc, #304]	; (200014c8 <calibTouch+0x18c>)
20001396:	f001 fdda 	bl	20002f4e <HAL_SPI_Transmit>
		uint8_t y_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
2000139a:	f107 0210 	add.w	r2, r7, #16
2000139e:	f04f 33ff 	mov.w	r3, #4294967295
200013a2:	9300      	str	r3, [sp, #0]
200013a4:	2302      	movs	r3, #2
200013a6:	4949      	ldr	r1, [pc, #292]	; (200014cc <calibTouch+0x190>)
200013a8:	4847      	ldr	r0, [pc, #284]	; (200014c8 <calibTouch+0x18c>)
200013aa:	f001 ff0c 	bl	200031c6 <HAL_SPI_TransmitReceive>

		HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
200013ae:	f04f 33ff 	mov.w	r3, #4294967295
200013b2:	2201      	movs	r2, #1
200013b4:	4946      	ldr	r1, [pc, #280]	; (200014d0 <calibTouch+0x194>)
200013b6:	4844      	ldr	r0, [pc, #272]	; (200014c8 <calibTouch+0x18c>)
200013b8:	f001 fdc9 	bl	20002f4e <HAL_SPI_Transmit>
		uint8_t x_raw[2];
		HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*) zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
200013bc:	f107 020c 	add.w	r2, r7, #12
200013c0:	f04f 33ff 	mov.w	r3, #4294967295
200013c4:	9300      	str	r3, [sp, #0]
200013c6:	2302      	movs	r3, #2
200013c8:	4940      	ldr	r1, [pc, #256]	; (200014cc <calibTouch+0x190>)
200013ca:	483f      	ldr	r0, [pc, #252]	; (200014c8 <calibTouch+0x18c>)
200013cc:	f001 fefb 	bl	200031c6 <HAL_SPI_TransmitReceive>

		uint32_t mirrorX = ((((uint16_t) x_raw[0]) << 8) | (uint16_t) x_raw[1]);
200013d0:	7b3b      	ldrb	r3, [r7, #12]
200013d2:	021b      	lsls	r3, r3, #8
200013d4:	7b7a      	ldrb	r2, [r7, #13]
200013d6:	4313      	orrs	r3, r2
200013d8:	623b      	str	r3, [r7, #32]
		avg_x += (mirrorX >> 3) & 0xFFF;
200013da:	6a3b      	ldr	r3, [r7, #32]
200013dc:	08db      	lsrs	r3, r3, #3
200013de:	f3c3 030b 	ubfx	r3, r3, #0, #12
200013e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200013e4:	4413      	add	r3, r2
200013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t mirrorY = ((((uint16_t) y_raw[0]) << 8) | (uint16_t) y_raw[1]);
200013e8:	7c3b      	ldrb	r3, [r7, #16]
200013ea:	021b      	lsls	r3, r3, #8
200013ec:	7c7a      	ldrb	r2, [r7, #17]
200013ee:	4313      	orrs	r3, r2
200013f0:	61fb      	str	r3, [r7, #28]
		avg_y += (mirrorY >> 3) & 0xFFF;
200013f2:	69fb      	ldr	r3, [r7, #28]
200013f4:	08db      	lsrs	r3, r3, #3
200013f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
200013fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
200013fc:	4413      	add	r3, r2
200013fe:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint8_t i = 0; i < 16; i++) {
20001400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
20001404:	3301      	adds	r3, #1
20001406:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
2000140a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
2000140e:	2b0f      	cmp	r3, #15
20001410:	d9af      	bls.n	20001372 <calibTouch+0x36>
20001412:	e000      	b.n	20001416 <calibTouch+0xda>
			break;
20001414:	bf00      	nop
	}
	ILI9341_TouchUnselect();
20001416:	f7ff fe3b 	bl	20001090 <ILI9341_TouchUnselect>
	if (nsamples < 16) goto repit;
2000141a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2000141e:	2b0f      	cmp	r3, #15
20001420:	d800      	bhi.n	20001424 <calibTouch+0xe8>
20001422:	e790      	b.n	20001346 <calibTouch+0xa>
	uint32_t raw_x = (avg_x / 16);
20001424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001426:	091b      	lsrs	r3, r3, #4
20001428:	61bb      	str	r3, [r7, #24]
	uint32_t raw_y = (avg_y / 16);
2000142a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000142c:	091b      	lsrs	r3, r3, #4
2000142e:	617b      	str	r3, [r7, #20]
	switch (poz) {
20001430:	79fb      	ldrb	r3, [r7, #7]
20001432:	2b03      	cmp	r3, #3
20001434:	d840      	bhi.n	200014b8 <calibTouch+0x17c>
20001436:	a201      	add	r2, pc, #4	; (adr r2, 2000143c <calibTouch+0x100>)
20001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000143c:	2000144d 	.word	0x2000144d
20001440:	20001461 	.word	0x20001461
20001444:	2000147b 	.word	0x2000147b
20001448:	20001495 	.word	0x20001495
	case 0:
		minX = raw_x;
2000144c:	4a21      	ldr	r2, [pc, #132]	; (200014d4 <calibTouch+0x198>)
2000144e:	69bb      	ldr	r3, [r7, #24]
20001450:	6013      	str	r3, [r2, #0]
		minY = raw_y;
20001452:	4a21      	ldr	r2, [pc, #132]	; (200014d8 <calibTouch+0x19c>)
20001454:	697b      	ldr	r3, [r7, #20]
20001456:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
20001458:	2064      	movs	r0, #100	; 0x64
2000145a:	f000 fb71 	bl	20001b40 <buzzerSet>
		break;
2000145e:	e02b      	b.n	200014b8 <calibTouch+0x17c>
	case 1:
		maxX = raw_x;
20001460:	4a1e      	ldr	r2, [pc, #120]	; (200014dc <calibTouch+0x1a0>)
20001462:	69bb      	ldr	r3, [r7, #24]
20001464:	6013      	str	r3, [r2, #0]
		minY += raw_y;
20001466:	4b1c      	ldr	r3, [pc, #112]	; (200014d8 <calibTouch+0x19c>)
20001468:	681a      	ldr	r2, [r3, #0]
2000146a:	697b      	ldr	r3, [r7, #20]
2000146c:	4413      	add	r3, r2
2000146e:	4a1a      	ldr	r2, [pc, #104]	; (200014d8 <calibTouch+0x19c>)
20001470:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
20001472:	2064      	movs	r0, #100	; 0x64
20001474:	f000 fb64 	bl	20001b40 <buzzerSet>
		break;
20001478:	e01e      	b.n	200014b8 <calibTouch+0x17c>
	case 2:
		minX += raw_x;
2000147a:	4b16      	ldr	r3, [pc, #88]	; (200014d4 <calibTouch+0x198>)
2000147c:	681a      	ldr	r2, [r3, #0]
2000147e:	69bb      	ldr	r3, [r7, #24]
20001480:	4413      	add	r3, r2
20001482:	4a14      	ldr	r2, [pc, #80]	; (200014d4 <calibTouch+0x198>)
20001484:	6013      	str	r3, [r2, #0]
		maxY = raw_y;
20001486:	4a16      	ldr	r2, [pc, #88]	; (200014e0 <calibTouch+0x1a4>)
20001488:	697b      	ldr	r3, [r7, #20]
2000148a:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
2000148c:	2064      	movs	r0, #100	; 0x64
2000148e:	f000 fb57 	bl	20001b40 <buzzerSet>
		break;
20001492:	e011      	b.n	200014b8 <calibTouch+0x17c>
	case 3:
		maxX += raw_x;
20001494:	4b11      	ldr	r3, [pc, #68]	; (200014dc <calibTouch+0x1a0>)
20001496:	681a      	ldr	r2, [r3, #0]
20001498:	69bb      	ldr	r3, [r7, #24]
2000149a:	4413      	add	r3, r2
2000149c:	4a0f      	ldr	r2, [pc, #60]	; (200014dc <calibTouch+0x1a0>)
2000149e:	6013      	str	r3, [r2, #0]
		maxY += raw_y;
200014a0:	4b0f      	ldr	r3, [pc, #60]	; (200014e0 <calibTouch+0x1a4>)
200014a2:	681a      	ldr	r2, [r3, #0]
200014a4:	697b      	ldr	r3, [r7, #20]
200014a6:	4413      	add	r3, r2
200014a8:	4a0d      	ldr	r2, [pc, #52]	; (200014e0 <calibTouch+0x1a4>)
200014aa:	6013      	str	r3, [r2, #0]
		buzzerSet(100);
200014ac:	2064      	movs	r0, #100	; 0x64
200014ae:	f000 fb47 	bl	20001b40 <buzzerSet>
		figuringData ();
200014b2:	f7ff fed9 	bl	20001268 <figuringData>
		break;
200014b6:	bf00      	nop
	}
	return true;
200014b8:	2301      	movs	r3, #1
}
200014ba:	4618      	mov	r0, r3
200014bc:	3730      	adds	r7, #48	; 0x30
200014be:	46bd      	mov	sp, r7
200014c0:	bd80      	pop	{r7, pc}
200014c2:	bf00      	nop
200014c4:	200094f8 	.word	0x200094f8
200014c8:	200095e8 	.word	0x200095e8
200014cc:	200094fc 	.word	0x200094fc
200014d0:	20009500 	.word	0x20009500
200014d4:	20009570 	.word	0x20009570
200014d8:	20009578 	.word	0x20009578
200014dc:	20009574 	.word	0x20009574
200014e0:	2000957c 	.word	0x2000957c

200014e4 <GUICalibration>:
char *unitTXT[3] = { "us", "ms", "s  ", };

uint16_t x, y, countSpeed = 1;
uint32_t timBigArea = 0, timButtonPress = 0, timHoldButtonPress = 0;
//------------------------------ функции ---------------------------------------------//
void GUICalibration (uint8_t pozition){
200014e4:	b580      	push	{r7, lr}
200014e6:	b086      	sub	sp, #24
200014e8:	af04      	add	r7, sp, #16
200014ea:	4603      	mov	r3, r0
200014ec:	71fb      	strb	r3, [r7, #7]
	ILI9341_FillRectangle (0,0,25,25,ILI9341_BLACK);
200014ee:	2300      	movs	r3, #0
200014f0:	9300      	str	r3, [sp, #0]
200014f2:	2319      	movs	r3, #25
200014f4:	2219      	movs	r2, #25
200014f6:	2100      	movs	r1, #0
200014f8:	2000      	movs	r0, #0
200014fa:	f7ff fa3f 	bl	2000097c <ILI9341_FillRectangle>
	ILI9341_FillRectangle (299,0,25,25,ILI9341_BLACK);
200014fe:	2300      	movs	r3, #0
20001500:	9300      	str	r3, [sp, #0]
20001502:	2319      	movs	r3, #25
20001504:	2219      	movs	r2, #25
20001506:	2100      	movs	r1, #0
20001508:	f240 102b 	movw	r0, #299	; 0x12b
2000150c:	f7ff fa36 	bl	2000097c <ILI9341_FillRectangle>
	ILI9341_FillRectangle (0,219,25,25,ILI9341_BLACK);
20001510:	2300      	movs	r3, #0
20001512:	9300      	str	r3, [sp, #0]
20001514:	2319      	movs	r3, #25
20001516:	2219      	movs	r2, #25
20001518:	21db      	movs	r1, #219	; 0xdb
2000151a:	2000      	movs	r0, #0
2000151c:	f7ff fa2e 	bl	2000097c <ILI9341_FillRectangle>
	ILI9341_FillRectangle (299,219,25,25,ILI9341_BLACK);
20001520:	2300      	movs	r3, #0
20001522:	9300      	str	r3, [sp, #0]
20001524:	2319      	movs	r3, #25
20001526:	2219      	movs	r2, #25
20001528:	21db      	movs	r1, #219	; 0xdb
2000152a:	f240 102b 	movw	r0, #299	; 0x12b
2000152e:	f7ff fa25 	bl	2000097c <ILI9341_FillRectangle>
	switch (pozition) {
20001532:	79fb      	ldrb	r3, [r7, #7]
20001534:	2b03      	cmp	r3, #3
20001536:	d867      	bhi.n	20001608 <GUICalibration+0x124>
20001538:	a201      	add	r2, pc, #4	; (adr r2, 20001540 <GUICalibration+0x5c>)
2000153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000153e:	bf00      	nop
20001540:	20001551 	.word	0x20001551
20001544:	200015a7 	.word	0x200015a7
20001548:	200015c9 	.word	0x200015c9
2000154c:	200015e7 	.word	0x200015e7
	case 0:
		ILI9341_WriteString(15, 50, "Display calibration, click", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
20001550:	4b2f      	ldr	r3, [pc, #188]	; (20001610 <GUICalibration+0x12c>)
20001552:	2200      	movs	r2, #0
20001554:	9202      	str	r2, [sp, #8]
20001556:	f64f 72e0 	movw	r2, #65504	; 0xffe0
2000155a:	9201      	str	r2, [sp, #4]
2000155c:	685a      	ldr	r2, [r3, #4]
2000155e:	9200      	str	r2, [sp, #0]
20001560:	681b      	ldr	r3, [r3, #0]
20001562:	4a2c      	ldr	r2, [pc, #176]	; (20001614 <GUICalibration+0x130>)
20001564:	2132      	movs	r1, #50	; 0x32
20001566:	200f      	movs	r0, #15
20001568:	f7ff fc51 	bl	20000e0e <ILI9341_WriteString>
		ILI9341_WriteString(15, 70, "on all the circles in turn", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
2000156c:	4b28      	ldr	r3, [pc, #160]	; (20001610 <GUICalibration+0x12c>)
2000156e:	2200      	movs	r2, #0
20001570:	9202      	str	r2, [sp, #8]
20001572:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20001576:	9201      	str	r2, [sp, #4]
20001578:	685a      	ldr	r2, [r3, #4]
2000157a:	9200      	str	r2, [sp, #0]
2000157c:	681b      	ldr	r3, [r3, #0]
2000157e:	4a26      	ldr	r2, [pc, #152]	; (20001618 <GUICalibration+0x134>)
20001580:	2146      	movs	r1, #70	; 0x46
20001582:	200f      	movs	r0, #15
20001584:	f7ff fc43 	bl	20000e0e <ILI9341_WriteString>
		drawCircle (10,10,10,ILI9341_YELLOW);
20001588:	f64f 73e0 	movw	r3, #65504	; 0xffe0
2000158c:	220a      	movs	r2, #10
2000158e:	210a      	movs	r1, #10
20001590:	200a      	movs	r0, #10
20001592:	f7ff fc87 	bl	20000ea4 <drawCircle>
		drawCircle (10,10,9,ILI9341_YELLOW);
20001596:	f64f 73e0 	movw	r3, #65504	; 0xffe0
2000159a:	2209      	movs	r2, #9
2000159c:	210a      	movs	r1, #10
2000159e:	200a      	movs	r0, #10
200015a0:	f7ff fc80 	bl	20000ea4 <drawCircle>
		break;
200015a4:	e030      	b.n	20001608 <GUICalibration+0x124>
	case 1:
		drawCircle (309,10,10,ILI9341_YELLOW);
200015a6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200015aa:	220a      	movs	r2, #10
200015ac:	210a      	movs	r1, #10
200015ae:	f240 1035 	movw	r0, #309	; 0x135
200015b2:	f7ff fc77 	bl	20000ea4 <drawCircle>
		drawCircle (309,10,9,ILI9341_YELLOW);
200015b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200015ba:	2209      	movs	r2, #9
200015bc:	210a      	movs	r1, #10
200015be:	f240 1035 	movw	r0, #309	; 0x135
200015c2:	f7ff fc6f 	bl	20000ea4 <drawCircle>
		break;
200015c6:	e01f      	b.n	20001608 <GUICalibration+0x124>
	case 2:
		drawCircle (10,229,10,ILI9341_YELLOW);
200015c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200015cc:	220a      	movs	r2, #10
200015ce:	21e5      	movs	r1, #229	; 0xe5
200015d0:	200a      	movs	r0, #10
200015d2:	f7ff fc67 	bl	20000ea4 <drawCircle>
		drawCircle (10,229,9,ILI9341_YELLOW);
200015d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200015da:	2209      	movs	r2, #9
200015dc:	21e5      	movs	r1, #229	; 0xe5
200015de:	200a      	movs	r0, #10
200015e0:	f7ff fc60 	bl	20000ea4 <drawCircle>
		break;
200015e4:	e010      	b.n	20001608 <GUICalibration+0x124>
	case 3:
		drawCircle (309,229,10,ILI9341_YELLOW);
200015e6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200015ea:	220a      	movs	r2, #10
200015ec:	21e5      	movs	r1, #229	; 0xe5
200015ee:	f240 1035 	movw	r0, #309	; 0x135
200015f2:	f7ff fc57 	bl	20000ea4 <drawCircle>
		drawCircle (309,229,9,ILI9341_YELLOW);
200015f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200015fa:	2209      	movs	r2, #9
200015fc:	21e5      	movs	r1, #229	; 0xe5
200015fe:	f240 1035 	movw	r0, #309	; 0x135
20001602:	f7ff fc4f 	bl	20000ea4 <drawCircle>
		break;
20001606:	bf00      	nop
	}
}
20001608:	bf00      	nop
2000160a:	3708      	adds	r7, #8
2000160c:	46bd      	mov	sp, r7
2000160e:	bd80      	pop	{r7, pc}
20001610:	20009524 	.word	0x20009524
20001614:	20003e40 	.word	0x20003e40
20001618:	20003e5c 	.word	0x20003e5c

2000161c <setOK>:

void setOK (uint8_t flag) {
2000161c:	b580      	push	{r7, lr}
2000161e:	b086      	sub	sp, #24
20001620:	af04      	add	r7, sp, #16
20001622:	4603      	mov	r3, r0
20001624:	71fb      	strb	r3, [r7, #7]
	if (flag) {
20001626:	79fb      	ldrb	r3, [r7, #7]
20001628:	2b00      	cmp	r3, #0
2000162a:	d00e      	beq.n	2000164a <setOK+0x2e>
		ILI9341_WriteString(140, 100, " OK    ", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
2000162c:	4b10      	ldr	r3, [pc, #64]	; (20001670 <setOK+0x54>)
2000162e:	2200      	movs	r2, #0
20001630:	9202      	str	r2, [sp, #8]
20001632:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20001636:	9201      	str	r2, [sp, #4]
20001638:	685a      	ldr	r2, [r3, #4]
2000163a:	9200      	str	r2, [sp, #0]
2000163c:	681b      	ldr	r3, [r3, #0]
2000163e:	4a0d      	ldr	r2, [pc, #52]	; (20001674 <setOK+0x58>)
20001640:	2164      	movs	r1, #100	; 0x64
20001642:	208c      	movs	r0, #140	; 0x8c
20001644:	f7ff fbe3 	bl	20000e0e <ILI9341_WriteString>
	} else {
		ILI9341_WriteString(140, 100, "Wait", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
	}
}
20001648:	e00d      	b.n	20001666 <setOK+0x4a>
		ILI9341_WriteString(140, 100, "Wait", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
2000164a:	4b09      	ldr	r3, [pc, #36]	; (20001670 <setOK+0x54>)
2000164c:	2200      	movs	r2, #0
2000164e:	9202      	str	r2, [sp, #8]
20001650:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20001654:	9201      	str	r2, [sp, #4]
20001656:	685a      	ldr	r2, [r3, #4]
20001658:	9200      	str	r2, [sp, #0]
2000165a:	681b      	ldr	r3, [r3, #0]
2000165c:	4a06      	ldr	r2, [pc, #24]	; (20001678 <setOK+0x5c>)
2000165e:	2164      	movs	r1, #100	; 0x64
20001660:	208c      	movs	r0, #140	; 0x8c
20001662:	f7ff fbd4 	bl	20000e0e <ILI9341_WriteString>
}
20001666:	bf00      	nop
20001668:	3708      	adds	r7, #8
2000166a:	46bd      	mov	sp, r7
2000166c:	bd80      	pop	{r7, pc}
2000166e:	bf00      	nop
20001670:	20009524 	.word	0x20009524
20001674:	20003e78 	.word	0x20003e78
20001678:	20003e80 	.word	0x20003e80

2000167c <startDisplay>:

void startDisplay(void) {
2000167c:	b580      	push	{r7, lr}
2000167e:	b084      	sub	sp, #16
20001680:	af04      	add	r7, sp, #16
	ILI9341_TouchUnselect();
20001682:	f7ff fd05 	bl	20001090 <ILI9341_TouchUnselect>
	ILI9341_Unselect();
20001686:	f7fe ff65 	bl	20000554 <ILI9341_Unselect>
	HAL_Delay(10);
2000168a:	200a      	movs	r0, #10
2000168c:	f000 fcf2 	bl	20002074 <HAL_Delay>
	SET_BIT(SPI1->CR1, SPI_CR1_SPE);
20001690:	4b18      	ldr	r3, [pc, #96]	; (200016f4 <startDisplay+0x78>)
20001692:	681b      	ldr	r3, [r3, #0]
20001694:	4a17      	ldr	r2, [pc, #92]	; (200016f4 <startDisplay+0x78>)
20001696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000169a:	6013      	str	r3, [r2, #0]
	ILI9341_Init();
2000169c:	f7ff f806 	bl	200006ac <ILI9341_Init>
	ILI9341_Select();
200016a0:	f7fe ff48 	bl	20000534 <ILI9341_Select>
	ILI9341_FillScreen(ILI9341_BLACK);
200016a4:	2000      	movs	r0, #0
200016a6:	f7ff f9d3 	bl	20000a50 <ILI9341_FillScreen>
	HAL_Delay(100);
200016aa:	2064      	movs	r0, #100	; 0x64
200016ac:	f000 fce2 	bl	20002074 <HAL_Delay>
	ILI9341_FillScreen(ILI9341_YELLOW);
200016b0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
200016b4:	f7ff f9cc 	bl	20000a50 <ILI9341_FillScreen>
	ILI9341_WriteString(20, 0, "Note!(')", Font_16x26, ILI9341_YELLOW,
200016b8:	4b0f      	ldr	r3, [pc, #60]	; (200016f8 <startDisplay+0x7c>)
200016ba:	2200      	movs	r2, #0
200016bc:	9202      	str	r2, [sp, #8]
200016be:	f64f 72e0 	movw	r2, #65504	; 0xffe0
200016c2:	9201      	str	r2, [sp, #4]
200016c4:	685a      	ldr	r2, [r3, #4]
200016c6:	9200      	str	r2, [sp, #0]
200016c8:	681b      	ldr	r3, [r3, #0]
200016ca:	4a0c      	ldr	r2, [pc, #48]	; (200016fc <startDisplay+0x80>)
200016cc:	2100      	movs	r1, #0
200016ce:	2014      	movs	r0, #20
200016d0:	f7ff fb9d 	bl	20000e0e <ILI9341_WriteString>
	ILI9341_BLACK);
	ILI9341_WriteMyString(20, 50, "Note!(~)", ILI9341_YELLOW, ILI9341_BLACK);
200016d4:	2300      	movs	r3, #0
200016d6:	9300      	str	r3, [sp, #0]
200016d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200016dc:	4a08      	ldr	r2, [pc, #32]	; (20001700 <startDisplay+0x84>)
200016de:	2132      	movs	r1, #50	; 0x32
200016e0:	2014      	movs	r0, #20
200016e2:	f7ff fabd 	bl	20000c60 <ILI9341_WriteMyString>
	ILI9341_FillScreen(ILI9341_BLACK);
200016e6:	2000      	movs	r0, #0
200016e8:	f7ff f9b2 	bl	20000a50 <ILI9341_FillScreen>
}
200016ec:	bf00      	nop
200016ee:	46bd      	mov	sp, r7
200016f0:	bd80      	pop	{r7, pc}
200016f2:	bf00      	nop
200016f4:	40013000 	.word	0x40013000
200016f8:	2000952c 	.word	0x2000952c
200016fc:	20003e88 	.word	0x20003e88
20001700:	20003e94 	.word	0x20003e94

20001704 <workDisplay>:

void workDisplay(void) {
20001704:	b580      	push	{r7, lr}
20001706:	af00      	add	r7, sp, #0
	//mainDisplayPrint();
    if(ILI9341_TouchGetCoordinates(&x, &y)) {
20001708:	4908      	ldr	r1, [pc, #32]	; (2000172c <workDisplay+0x28>)
2000170a:	4809      	ldr	r0, [pc, #36]	; (20001730 <workDisplay+0x2c>)
2000170c:	f7ff fcde 	bl	200010cc <ILI9341_TouchGetCoordinates>
20001710:	4603      	mov	r3, r0
20001712:	2b00      	cmp	r3, #0
20001714:	d008      	beq.n	20001728 <workDisplay+0x24>
        ILI9341_DrawPixel(x, y, ILI9341_WHITE);
20001716:	4b06      	ldr	r3, [pc, #24]	; (20001730 <workDisplay+0x2c>)
20001718:	881b      	ldrh	r3, [r3, #0]
2000171a:	4a04      	ldr	r2, [pc, #16]	; (2000172c <workDisplay+0x28>)
2000171c:	8811      	ldrh	r1, [r2, #0]
2000171e:	f64f 72ff 	movw	r2, #65535	; 0xffff
20001722:	4618      	mov	r0, r3
20001724:	f7ff f8f8 	bl	20000918 <ILI9341_DrawPixel>
    }
}
20001728:	bf00      	nop
2000172a:	bd80      	pop	{r7, pc}
2000172c:	20009582 	.word	0x20009582
20001730:	20009580 	.word	0x20009580

20001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20001734:	b580      	push	{r7, lr}
20001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SYSCFG->MEMRMP = 0x3;    // для запуска из SRAM
20001738:	4b09      	ldr	r3, [pc, #36]	; (20001760 <main+0x2c>)
2000173a:	2203      	movs	r2, #3
2000173c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
2000173e:	f000 fc27 	bl	20001f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
20001742:	f000 f80f 	bl	20001764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20001746:	f000 f973 	bl	20001a30 <MX_GPIO_Init>
  MX_SPI1_Init();
2000174a:	f000 f873 	bl	20001834 <MX_SPI1_Init>
  MX_SPI2_Init();
2000174e:	f000 f8a7 	bl	200018a0 <MX_SPI2_Init>
  MX_TIM1_Init();
20001752:	f000 f8db 	bl	2000190c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  doWork ();
20001756:	f000 fbdf 	bl	20001f18 <doWork>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Work ();
2000175a:	f000 fbe9 	bl	20001f30 <Work>
2000175e:	e7fc      	b.n	2000175a <main+0x26>
20001760:	40013800 	.word	0x40013800

20001764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20001764:	b580      	push	{r7, lr}
20001766:	b094      	sub	sp, #80	; 0x50
20001768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2000176a:	f107 0320 	add.w	r3, r7, #32
2000176e:	2230      	movs	r2, #48	; 0x30
20001770:	2100      	movs	r1, #0
20001772:	4618      	mov	r0, r3
20001774:	f002 fb30 	bl	20003dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20001778:	f107 030c 	add.w	r3, r7, #12
2000177c:	2200      	movs	r2, #0
2000177e:	601a      	str	r2, [r3, #0]
20001780:	605a      	str	r2, [r3, #4]
20001782:	609a      	str	r2, [r3, #8]
20001784:	60da      	str	r2, [r3, #12]
20001786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20001788:	2300      	movs	r3, #0
2000178a:	60bb      	str	r3, [r7, #8]
2000178c:	4b27      	ldr	r3, [pc, #156]	; (2000182c <SystemClock_Config+0xc8>)
2000178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001790:	4a26      	ldr	r2, [pc, #152]	; (2000182c <SystemClock_Config+0xc8>)
20001792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20001796:	6413      	str	r3, [r2, #64]	; 0x40
20001798:	4b24      	ldr	r3, [pc, #144]	; (2000182c <SystemClock_Config+0xc8>)
2000179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200017a0:	60bb      	str	r3, [r7, #8]
200017a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
200017a4:	2300      	movs	r3, #0
200017a6:	607b      	str	r3, [r7, #4]
200017a8:	4b21      	ldr	r3, [pc, #132]	; (20001830 <SystemClock_Config+0xcc>)
200017aa:	681b      	ldr	r3, [r3, #0]
200017ac:	4a20      	ldr	r2, [pc, #128]	; (20001830 <SystemClock_Config+0xcc>)
200017ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
200017b2:	6013      	str	r3, [r2, #0]
200017b4:	4b1e      	ldr	r3, [pc, #120]	; (20001830 <SystemClock_Config+0xcc>)
200017b6:	681b      	ldr	r3, [r3, #0]
200017b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
200017bc:	607b      	str	r3, [r7, #4]
200017be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
200017c0:	2301      	movs	r3, #1
200017c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
200017c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200017c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
200017ca:	2302      	movs	r3, #2
200017cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
200017ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
200017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
200017d4:	230c      	movs	r3, #12
200017d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
200017d8:	2360      	movs	r3, #96	; 0x60
200017da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
200017dc:	2302      	movs	r3, #2
200017de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
200017e0:	2304      	movs	r3, #4
200017e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
200017e4:	f107 0320 	add.w	r3, r7, #32
200017e8:	4618      	mov	r0, r3
200017ea:	f000 ff03 	bl	200025f4 <HAL_RCC_OscConfig>
200017ee:	4603      	mov	r3, r0
200017f0:	2b00      	cmp	r3, #0
200017f2:	d001      	beq.n	200017f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
200017f4:	f000 f99e 	bl	20001b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
200017f8:	230f      	movs	r3, #15
200017fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
200017fc:	2302      	movs	r3, #2
200017fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
20001800:	2380      	movs	r3, #128	; 0x80
20001802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
20001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20001808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
2000180a:	2300      	movs	r3, #0
2000180c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
2000180e:	f107 030c 	add.w	r3, r7, #12
20001812:	2101      	movs	r1, #1
20001814:	4618      	mov	r0, r3
20001816:	f001 f965 	bl	20002ae4 <HAL_RCC_ClockConfig>
2000181a:	4603      	mov	r3, r0
2000181c:	2b00      	cmp	r3, #0
2000181e:	d001      	beq.n	20001824 <SystemClock_Config+0xc0>
  {
    Error_Handler();
20001820:	f000 f988 	bl	20001b34 <Error_Handler>
  }
}
20001824:	bf00      	nop
20001826:	3750      	adds	r7, #80	; 0x50
20001828:	46bd      	mov	sp, r7
2000182a:	bd80      	pop	{r7, pc}
2000182c:	40023800 	.word	0x40023800
20001830:	40007000 	.word	0x40007000

20001834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
20001834:	b580      	push	{r7, lr}
20001836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
20001838:	4b17      	ldr	r3, [pc, #92]	; (20001898 <MX_SPI1_Init+0x64>)
2000183a:	4a18      	ldr	r2, [pc, #96]	; (2000189c <MX_SPI1_Init+0x68>)
2000183c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
2000183e:	4b16      	ldr	r3, [pc, #88]	; (20001898 <MX_SPI1_Init+0x64>)
20001840:	f44f 7282 	mov.w	r2, #260	; 0x104
20001844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
20001846:	4b14      	ldr	r3, [pc, #80]	; (20001898 <MX_SPI1_Init+0x64>)
20001848:	2200      	movs	r2, #0
2000184a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
2000184c:	4b12      	ldr	r3, [pc, #72]	; (20001898 <MX_SPI1_Init+0x64>)
2000184e:	2200      	movs	r2, #0
20001850:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
20001852:	4b11      	ldr	r3, [pc, #68]	; (20001898 <MX_SPI1_Init+0x64>)
20001854:	2200      	movs	r2, #0
20001856:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
20001858:	4b0f      	ldr	r3, [pc, #60]	; (20001898 <MX_SPI1_Init+0x64>)
2000185a:	2200      	movs	r2, #0
2000185c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
2000185e:	4b0e      	ldr	r3, [pc, #56]	; (20001898 <MX_SPI1_Init+0x64>)
20001860:	f44f 7200 	mov.w	r2, #512	; 0x200
20001864:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20001866:	4b0c      	ldr	r3, [pc, #48]	; (20001898 <MX_SPI1_Init+0x64>)
20001868:	2200      	movs	r2, #0
2000186a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
2000186c:	4b0a      	ldr	r3, [pc, #40]	; (20001898 <MX_SPI1_Init+0x64>)
2000186e:	2200      	movs	r2, #0
20001870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
20001872:	4b09      	ldr	r3, [pc, #36]	; (20001898 <MX_SPI1_Init+0x64>)
20001874:	2200      	movs	r2, #0
20001876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20001878:	4b07      	ldr	r3, [pc, #28]	; (20001898 <MX_SPI1_Init+0x64>)
2000187a:	2200      	movs	r2, #0
2000187c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
2000187e:	4b06      	ldr	r3, [pc, #24]	; (20001898 <MX_SPI1_Init+0x64>)
20001880:	220a      	movs	r2, #10
20001882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
20001884:	4804      	ldr	r0, [pc, #16]	; (20001898 <MX_SPI1_Init+0x64>)
20001886:	f001 fad9 	bl	20002e3c <HAL_SPI_Init>
2000188a:	4603      	mov	r3, r0
2000188c:	2b00      	cmp	r3, #0
2000188e:	d001      	beq.n	20001894 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
20001890:	f000 f950 	bl	20001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
20001894:	bf00      	nop
20001896:	bd80      	pop	{r7, pc}
20001898:	20009590 	.word	0x20009590
2000189c:	40013000 	.word	0x40013000

200018a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
200018a0:	b580      	push	{r7, lr}
200018a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
200018a4:	4b17      	ldr	r3, [pc, #92]	; (20001904 <MX_SPI2_Init+0x64>)
200018a6:	4a18      	ldr	r2, [pc, #96]	; (20001908 <MX_SPI2_Init+0x68>)
200018a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
200018aa:	4b16      	ldr	r3, [pc, #88]	; (20001904 <MX_SPI2_Init+0x64>)
200018ac:	f44f 7282 	mov.w	r2, #260	; 0x104
200018b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
200018b2:	4b14      	ldr	r3, [pc, #80]	; (20001904 <MX_SPI2_Init+0x64>)
200018b4:	2200      	movs	r2, #0
200018b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
200018b8:	4b12      	ldr	r3, [pc, #72]	; (20001904 <MX_SPI2_Init+0x64>)
200018ba:	2200      	movs	r2, #0
200018bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
200018be:	4b11      	ldr	r3, [pc, #68]	; (20001904 <MX_SPI2_Init+0x64>)
200018c0:	2200      	movs	r2, #0
200018c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
200018c4:	4b0f      	ldr	r3, [pc, #60]	; (20001904 <MX_SPI2_Init+0x64>)
200018c6:	2200      	movs	r2, #0
200018c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
200018ca:	4b0e      	ldr	r3, [pc, #56]	; (20001904 <MX_SPI2_Init+0x64>)
200018cc:	f44f 7200 	mov.w	r2, #512	; 0x200
200018d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
200018d2:	4b0c      	ldr	r3, [pc, #48]	; (20001904 <MX_SPI2_Init+0x64>)
200018d4:	2238      	movs	r2, #56	; 0x38
200018d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
200018d8:	4b0a      	ldr	r3, [pc, #40]	; (20001904 <MX_SPI2_Init+0x64>)
200018da:	2200      	movs	r2, #0
200018dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
200018de:	4b09      	ldr	r3, [pc, #36]	; (20001904 <MX_SPI2_Init+0x64>)
200018e0:	2200      	movs	r2, #0
200018e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
200018e4:	4b07      	ldr	r3, [pc, #28]	; (20001904 <MX_SPI2_Init+0x64>)
200018e6:	2200      	movs	r2, #0
200018e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
200018ea:	4b06      	ldr	r3, [pc, #24]	; (20001904 <MX_SPI2_Init+0x64>)
200018ec:	220a      	movs	r2, #10
200018ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
200018f0:	4804      	ldr	r0, [pc, #16]	; (20001904 <MX_SPI2_Init+0x64>)
200018f2:	f001 faa3 	bl	20002e3c <HAL_SPI_Init>
200018f6:	4603      	mov	r3, r0
200018f8:	2b00      	cmp	r3, #0
200018fa:	d001      	beq.n	20001900 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
200018fc:	f000 f91a 	bl	20001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
20001900:	bf00      	nop
20001902:	bd80      	pop	{r7, pc}
20001904:	200095e8 	.word	0x200095e8
20001908:	40003800 	.word	0x40003800

2000190c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
2000190c:	b580      	push	{r7, lr}
2000190e:	b092      	sub	sp, #72	; 0x48
20001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
20001912:	f107 0340 	add.w	r3, r7, #64	; 0x40
20001916:	2200      	movs	r2, #0
20001918:	601a      	str	r2, [r3, #0]
2000191a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
2000191c:	f107 0324 	add.w	r3, r7, #36	; 0x24
20001920:	2200      	movs	r2, #0
20001922:	601a      	str	r2, [r3, #0]
20001924:	605a      	str	r2, [r3, #4]
20001926:	609a      	str	r2, [r3, #8]
20001928:	60da      	str	r2, [r3, #12]
2000192a:	611a      	str	r2, [r3, #16]
2000192c:	615a      	str	r2, [r3, #20]
2000192e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
20001930:	1d3b      	adds	r3, r7, #4
20001932:	2220      	movs	r2, #32
20001934:	2100      	movs	r1, #0
20001936:	4618      	mov	r0, r3
20001938:	f002 fa4e 	bl	20003dd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
2000193c:	4b3a      	ldr	r3, [pc, #232]	; (20001a28 <MX_TIM1_Init+0x11c>)
2000193e:	4a3b      	ldr	r2, [pc, #236]	; (20001a2c <MX_TIM1_Init+0x120>)
20001940:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
20001942:	4b39      	ldr	r3, [pc, #228]	; (20001a28 <MX_TIM1_Init+0x11c>)
20001944:	2200      	movs	r2, #0
20001946:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
20001948:	4b37      	ldr	r3, [pc, #220]	; (20001a28 <MX_TIM1_Init+0x11c>)
2000194a:	2200      	movs	r2, #0
2000194c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
2000194e:	4b36      	ldr	r3, [pc, #216]	; (20001a28 <MX_TIM1_Init+0x11c>)
20001950:	f64f 72ff 	movw	r2, #65535	; 0xffff
20001954:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
20001956:	4b34      	ldr	r3, [pc, #208]	; (20001a28 <MX_TIM1_Init+0x11c>)
20001958:	2200      	movs	r2, #0
2000195a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 100;
2000195c:	4b32      	ldr	r3, [pc, #200]	; (20001a28 <MX_TIM1_Init+0x11c>)
2000195e:	2264      	movs	r2, #100	; 0x64
20001960:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
20001962:	4b31      	ldr	r3, [pc, #196]	; (20001a28 <MX_TIM1_Init+0x11c>)
20001964:	2280      	movs	r2, #128	; 0x80
20001966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
20001968:	482f      	ldr	r0, [pc, #188]	; (20001a28 <MX_TIM1_Init+0x11c>)
2000196a:	f001 fe99 	bl	200036a0 <HAL_TIM_OC_Init>
2000196e:	4603      	mov	r3, r0
20001970:	2b00      	cmp	r3, #0
20001972:	d001      	beq.n	20001978 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
20001974:	f000 f8de 	bl	20001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
20001978:	2300      	movs	r3, #0
2000197a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
2000197c:	2300      	movs	r3, #0
2000197e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
20001980:	f107 0340 	add.w	r3, r7, #64	; 0x40
20001984:	4619      	mov	r1, r3
20001986:	4828      	ldr	r0, [pc, #160]	; (20001a28 <MX_TIM1_Init+0x11c>)
20001988:	f002 f942 	bl	20003c10 <HAL_TIMEx_MasterConfigSynchronization>
2000198c:	4603      	mov	r3, r0
2000198e:	2b00      	cmp	r3, #0
20001990:	d001      	beq.n	20001996 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
20001992:	f000 f8cf 	bl	20001b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
20001996:	2310      	movs	r3, #16
20001998:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 100;
2000199a:	2364      	movs	r3, #100	; 0x64
2000199c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
2000199e:	2300      	movs	r3, #0
200019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
200019a2:	2300      	movs	r3, #0
200019a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
200019a6:	2300      	movs	r3, #0
200019a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
200019aa:	2300      	movs	r3, #0
200019ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
200019ae:	2300      	movs	r3, #0
200019b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
200019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
200019b6:	2204      	movs	r2, #4
200019b8:	4619      	mov	r1, r3
200019ba:	481b      	ldr	r0, [pc, #108]	; (20001a28 <MX_TIM1_Init+0x11c>)
200019bc:	f001 fec0 	bl	20003740 <HAL_TIM_OC_ConfigChannel>
200019c0:	4603      	mov	r3, r0
200019c2:	2b00      	cmp	r3, #0
200019c4:	d001      	beq.n	200019ca <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
200019c6:	f000 f8b5 	bl	20001b34 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
200019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
200019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
200019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
200019d4:	2208      	movs	r2, #8
200019d6:	4619      	mov	r1, r3
200019d8:	4813      	ldr	r0, [pc, #76]	; (20001a28 <MX_TIM1_Init+0x11c>)
200019da:	f001 feb1 	bl	20003740 <HAL_TIM_OC_ConfigChannel>
200019de:	4603      	mov	r3, r0
200019e0:	2b00      	cmp	r3, #0
200019e2:	d001      	beq.n	200019e8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
200019e4:	f000 f8a6 	bl	20001b34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
200019e8:	2300      	movs	r3, #0
200019ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
200019ec:	2300      	movs	r3, #0
200019ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
200019f0:	2300      	movs	r3, #0
200019f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
200019f4:	2300      	movs	r3, #0
200019f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
200019f8:	2300      	movs	r3, #0
200019fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
200019fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
20001a00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
20001a02:	2300      	movs	r3, #0
20001a04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
20001a06:	1d3b      	adds	r3, r7, #4
20001a08:	4619      	mov	r1, r3
20001a0a:	4807      	ldr	r0, [pc, #28]	; (20001a28 <MX_TIM1_Init+0x11c>)
20001a0c:	f002 f96e 	bl	20003cec <HAL_TIMEx_ConfigBreakDeadTime>
20001a10:	4603      	mov	r3, r0
20001a12:	2b00      	cmp	r3, #0
20001a14:	d001      	beq.n	20001a1a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
20001a16:	f000 f88d 	bl	20001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
20001a1a:	4803      	ldr	r0, [pc, #12]	; (20001a28 <MX_TIM1_Init+0x11c>)
20001a1c:	f000 f976 	bl	20001d0c <HAL_TIM_MspPostInit>

}
20001a20:	bf00      	nop
20001a22:	3748      	adds	r7, #72	; 0x48
20001a24:	46bd      	mov	sp, r7
20001a26:	bd80      	pop	{r7, pc}
20001a28:	20009640 	.word	0x20009640
20001a2c:	40010000 	.word	0x40010000

20001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
20001a30:	b580      	push	{r7, lr}
20001a32:	b088      	sub	sp, #32
20001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20001a36:	f107 030c 	add.w	r3, r7, #12
20001a3a:	2200      	movs	r2, #0
20001a3c:	601a      	str	r2, [r3, #0]
20001a3e:	605a      	str	r2, [r3, #4]
20001a40:	609a      	str	r2, [r3, #8]
20001a42:	60da      	str	r2, [r3, #12]
20001a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
20001a46:	2300      	movs	r3, #0
20001a48:	60bb      	str	r3, [r7, #8]
20001a4a:	4b37      	ldr	r3, [pc, #220]	; (20001b28 <MX_GPIO_Init+0xf8>)
20001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001a4e:	4a36      	ldr	r2, [pc, #216]	; (20001b28 <MX_GPIO_Init+0xf8>)
20001a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20001a54:	6313      	str	r3, [r2, #48]	; 0x30
20001a56:	4b34      	ldr	r3, [pc, #208]	; (20001b28 <MX_GPIO_Init+0xf8>)
20001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
20001a5e:	60bb      	str	r3, [r7, #8]
20001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20001a62:	2300      	movs	r3, #0
20001a64:	607b      	str	r3, [r7, #4]
20001a66:	4b30      	ldr	r3, [pc, #192]	; (20001b28 <MX_GPIO_Init+0xf8>)
20001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001a6a:	4a2f      	ldr	r2, [pc, #188]	; (20001b28 <MX_GPIO_Init+0xf8>)
20001a6c:	f043 0301 	orr.w	r3, r3, #1
20001a70:	6313      	str	r3, [r2, #48]	; 0x30
20001a72:	4b2d      	ldr	r3, [pc, #180]	; (20001b28 <MX_GPIO_Init+0xf8>)
20001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001a76:	f003 0301 	and.w	r3, r3, #1
20001a7a:	607b      	str	r3, [r7, #4]
20001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
20001a7e:	2300      	movs	r3, #0
20001a80:	603b      	str	r3, [r7, #0]
20001a82:	4b29      	ldr	r3, [pc, #164]	; (20001b28 <MX_GPIO_Init+0xf8>)
20001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001a86:	4a28      	ldr	r2, [pc, #160]	; (20001b28 <MX_GPIO_Init+0xf8>)
20001a88:	f043 0302 	orr.w	r3, r3, #2
20001a8c:	6313      	str	r3, [r2, #48]	; 0x30
20001a8e:	4b26      	ldr	r3, [pc, #152]	; (20001b28 <MX_GPIO_Init+0xf8>)
20001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001a92:	f003 0302 	and.w	r3, r3, #2
20001a96:	603b      	str	r3, [r7, #0]
20001a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|Led_Display_Pin|CS_Touch_Pin, GPIO_PIN_RESET);
20001a9a:	2200      	movs	r2, #0
20001a9c:	f240 1111 	movw	r1, #273	; 0x111
20001aa0:	4822      	ldr	r0, [pc, #136]	; (20001b2c <MX_GPIO_Init+0xfc>)
20001aa2:	f000 fd8d 	bl	200025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Data_Comand_Pin|Reset_Display_Pin|CS_Display_Pin, GPIO_PIN_RESET);
20001aa6:	2200      	movs	r2, #0
20001aa8:	2107      	movs	r1, #7
20001aaa:	4821      	ldr	r0, [pc, #132]	; (20001b30 <MX_GPIO_Init+0x100>)
20001aac:	f000 fd88 	bl	200025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
20001ab0:	2301      	movs	r3, #1
20001ab2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20001ab4:	2301      	movs	r3, #1
20001ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001ab8:	2300      	movs	r3, #0
20001aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001abc:	2303      	movs	r3, #3
20001abe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
20001ac0:	f107 030c 	add.w	r3, r7, #12
20001ac4:	4619      	mov	r1, r3
20001ac6:	4819      	ldr	r0, [pc, #100]	; (20001b2c <MX_GPIO_Init+0xfc>)
20001ac8:	f000 fbde 	bl	20002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_Display_Pin CS_Touch_Pin */
  GPIO_InitStruct.Pin = Led_Display_Pin|CS_Touch_Pin;
20001acc:	f44f 7388 	mov.w	r3, #272	; 0x110
20001ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20001ad2:	2301      	movs	r3, #1
20001ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001ad6:	2300      	movs	r3, #0
20001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20001ada:	2300      	movs	r3, #0
20001adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20001ade:	f107 030c 	add.w	r3, r7, #12
20001ae2:	4619      	mov	r1, r3
20001ae4:	4811      	ldr	r0, [pc, #68]	; (20001b2c <MX_GPIO_Init+0xfc>)
20001ae6:	f000 fbcf 	bl	20002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : Data_Comand_Pin Reset_Display_Pin CS_Display_Pin */
  GPIO_InitStruct.Pin = Data_Comand_Pin|Reset_Display_Pin|CS_Display_Pin;
20001aea:	2307      	movs	r3, #7
20001aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20001aee:	2301      	movs	r3, #1
20001af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001af2:	2300      	movs	r3, #0
20001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20001af6:	2300      	movs	r3, #0
20001af8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20001afa:	f107 030c 	add.w	r3, r7, #12
20001afe:	4619      	mov	r1, r3
20001b00:	480b      	ldr	r0, [pc, #44]	; (20001b30 <MX_GPIO_Init+0x100>)
20001b02:	f000 fbc1 	bl	20002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Touch_Pin */
  GPIO_InitStruct.Pin = IRQ_Touch_Pin;
20001b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20001b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
20001b0c:	2300      	movs	r3, #0
20001b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001b10:	2300      	movs	r3, #0
20001b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_Touch_GPIO_Port, &GPIO_InitStruct);
20001b14:	f107 030c 	add.w	r3, r7, #12
20001b18:	4619      	mov	r1, r3
20001b1a:	4805      	ldr	r0, [pc, #20]	; (20001b30 <MX_GPIO_Init+0x100>)
20001b1c:	f000 fbb4 	bl	20002288 <HAL_GPIO_Init>

}
20001b20:	bf00      	nop
20001b22:	3720      	adds	r7, #32
20001b24:	46bd      	mov	sp, r7
20001b26:	bd80      	pop	{r7, pc}
20001b28:	40023800 	.word	0x40023800
20001b2c:	40020000 	.word	0x40020000
20001b30:	40020400 	.word	0x40020400

20001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20001b34:	b480      	push	{r7}
20001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
20001b38:	b672      	cpsid	i
}
20001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20001b3c:	e7fe      	b.n	20001b3c <Error_Handler+0x8>
	...

20001b40 <buzzerSet>:
	}
	result ++;
	return result;
}

void buzzerSet (int16_t time) {
20001b40:	b480      	push	{r7}
20001b42:	b083      	sub	sp, #12
20001b44:	af00      	add	r7, sp, #0
20001b46:	4603      	mov	r3, r0
20001b48:	80fb      	strh	r3, [r7, #6]
	if (!timBuzzer){
20001b4a:	4b0a      	ldr	r3, [pc, #40]	; (20001b74 <buzzerSet+0x34>)
20001b4c:	681b      	ldr	r3, [r3, #0]
20001b4e:	2b00      	cmp	r3, #0
20001b50:	d109      	bne.n	20001b66 <buzzerSet+0x26>
		timBuzzer = time;
20001b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20001b56:	4a07      	ldr	r2, [pc, #28]	; (20001b74 <buzzerSet+0x34>)
20001b58:	6013      	str	r3, [r2, #0]
		BUZER_SET;
20001b5a:	4b07      	ldr	r3, [pc, #28]	; (20001b78 <buzzerSet+0x38>)
20001b5c:	699b      	ldr	r3, [r3, #24]
20001b5e:	4a06      	ldr	r2, [pc, #24]	; (20001b78 <buzzerSet+0x38>)
20001b60:	f043 0301 	orr.w	r3, r3, #1
20001b64:	6193      	str	r3, [r2, #24]
	}
}
20001b66:	bf00      	nop
20001b68:	370c      	adds	r7, #12
20001b6a:	46bd      	mov	sp, r7
20001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b70:	4770      	bx	lr
20001b72:	bf00      	nop
20001b74:	20009688 	.word	0x20009688
20001b78:	40020000 	.word	0x40020000

20001b7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
20001b7c:	b480      	push	{r7}
20001b7e:	b083      	sub	sp, #12
20001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
20001b82:	2300      	movs	r3, #0
20001b84:	607b      	str	r3, [r7, #4]
20001b86:	4b10      	ldr	r3, [pc, #64]	; (20001bc8 <HAL_MspInit+0x4c>)
20001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20001b8a:	4a0f      	ldr	r2, [pc, #60]	; (20001bc8 <HAL_MspInit+0x4c>)
20001b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20001b90:	6453      	str	r3, [r2, #68]	; 0x44
20001b92:	4b0d      	ldr	r3, [pc, #52]	; (20001bc8 <HAL_MspInit+0x4c>)
20001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20001b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20001b9a:	607b      	str	r3, [r7, #4]
20001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
20001b9e:	2300      	movs	r3, #0
20001ba0:	603b      	str	r3, [r7, #0]
20001ba2:	4b09      	ldr	r3, [pc, #36]	; (20001bc8 <HAL_MspInit+0x4c>)
20001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001ba6:	4a08      	ldr	r2, [pc, #32]	; (20001bc8 <HAL_MspInit+0x4c>)
20001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20001bac:	6413      	str	r3, [r2, #64]	; 0x40
20001bae:	4b06      	ldr	r3, [pc, #24]	; (20001bc8 <HAL_MspInit+0x4c>)
20001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001bb6:	603b      	str	r3, [r7, #0]
20001bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
20001bba:	bf00      	nop
20001bbc:	370c      	adds	r7, #12
20001bbe:	46bd      	mov	sp, r7
20001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
20001bc4:	4770      	bx	lr
20001bc6:	bf00      	nop
20001bc8:	40023800 	.word	0x40023800

20001bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
20001bcc:	b580      	push	{r7, lr}
20001bce:	b08c      	sub	sp, #48	; 0x30
20001bd0:	af00      	add	r7, sp, #0
20001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20001bd4:	f107 031c 	add.w	r3, r7, #28
20001bd8:	2200      	movs	r2, #0
20001bda:	601a      	str	r2, [r3, #0]
20001bdc:	605a      	str	r2, [r3, #4]
20001bde:	609a      	str	r2, [r3, #8]
20001be0:	60da      	str	r2, [r3, #12]
20001be2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
20001be4:	687b      	ldr	r3, [r7, #4]
20001be6:	681b      	ldr	r3, [r3, #0]
20001be8:	4a32      	ldr	r2, [pc, #200]	; (20001cb4 <HAL_SPI_MspInit+0xe8>)
20001bea:	4293      	cmp	r3, r2
20001bec:	d12c      	bne.n	20001c48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
20001bee:	2300      	movs	r3, #0
20001bf0:	61bb      	str	r3, [r7, #24]
20001bf2:	4b31      	ldr	r3, [pc, #196]	; (20001cb8 <HAL_SPI_MspInit+0xec>)
20001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20001bf6:	4a30      	ldr	r2, [pc, #192]	; (20001cb8 <HAL_SPI_MspInit+0xec>)
20001bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
20001bfc:	6453      	str	r3, [r2, #68]	; 0x44
20001bfe:	4b2e      	ldr	r3, [pc, #184]	; (20001cb8 <HAL_SPI_MspInit+0xec>)
20001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20001c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
20001c06:	61bb      	str	r3, [r7, #24]
20001c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
20001c0a:	2300      	movs	r3, #0
20001c0c:	617b      	str	r3, [r7, #20]
20001c0e:	4b2a      	ldr	r3, [pc, #168]	; (20001cb8 <HAL_SPI_MspInit+0xec>)
20001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001c12:	4a29      	ldr	r2, [pc, #164]	; (20001cb8 <HAL_SPI_MspInit+0xec>)
20001c14:	f043 0301 	orr.w	r3, r3, #1
20001c18:	6313      	str	r3, [r2, #48]	; 0x30
20001c1a:	4b27      	ldr	r3, [pc, #156]	; (20001cb8 <HAL_SPI_MspInit+0xec>)
20001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001c1e:	f003 0301 	and.w	r3, r3, #1
20001c22:	617b      	str	r3, [r7, #20]
20001c24:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
20001c26:	23e0      	movs	r3, #224	; 0xe0
20001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001c2a:	2302      	movs	r3, #2
20001c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001c2e:	2300      	movs	r3, #0
20001c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001c32:	2303      	movs	r3, #3
20001c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
20001c36:	2305      	movs	r3, #5
20001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20001c3a:	f107 031c 	add.w	r3, r7, #28
20001c3e:	4619      	mov	r1, r3
20001c40:	481e      	ldr	r0, [pc, #120]	; (20001cbc <HAL_SPI_MspInit+0xf0>)
20001c42:	f000 fb21 	bl	20002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
20001c46:	e031      	b.n	20001cac <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
20001c48:	687b      	ldr	r3, [r7, #4]
20001c4a:	681b      	ldr	r3, [r3, #0]
20001c4c:	4a1c      	ldr	r2, [pc, #112]	; (20001cc0 <HAL_SPI_MspInit+0xf4>)
20001c4e:	4293      	cmp	r3, r2
20001c50:	d12c      	bne.n	20001cac <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
20001c52:	2300      	movs	r3, #0
20001c54:	613b      	str	r3, [r7, #16]
20001c56:	4b18      	ldr	r3, [pc, #96]	; (20001cb8 <HAL_SPI_MspInit+0xec>)
20001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001c5a:	4a17      	ldr	r2, [pc, #92]	; (20001cb8 <HAL_SPI_MspInit+0xec>)
20001c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20001c60:	6413      	str	r3, [r2, #64]	; 0x40
20001c62:	4b15      	ldr	r3, [pc, #84]	; (20001cb8 <HAL_SPI_MspInit+0xec>)
20001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20001c6a:	613b      	str	r3, [r7, #16]
20001c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20001c6e:	2300      	movs	r3, #0
20001c70:	60fb      	str	r3, [r7, #12]
20001c72:	4b11      	ldr	r3, [pc, #68]	; (20001cb8 <HAL_SPI_MspInit+0xec>)
20001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001c76:	4a10      	ldr	r2, [pc, #64]	; (20001cb8 <HAL_SPI_MspInit+0xec>)
20001c78:	f043 0302 	orr.w	r3, r3, #2
20001c7c:	6313      	str	r3, [r2, #48]	; 0x30
20001c7e:	4b0e      	ldr	r3, [pc, #56]	; (20001cb8 <HAL_SPI_MspInit+0xec>)
20001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001c82:	f003 0302 	and.w	r3, r3, #2
20001c86:	60fb      	str	r3, [r7, #12]
20001c88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
20001c8a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
20001c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001c90:	2302      	movs	r3, #2
20001c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001c94:	2300      	movs	r3, #0
20001c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001c98:	2303      	movs	r3, #3
20001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
20001c9c:	2305      	movs	r3, #5
20001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20001ca0:	f107 031c 	add.w	r3, r7, #28
20001ca4:	4619      	mov	r1, r3
20001ca6:	4807      	ldr	r0, [pc, #28]	; (20001cc4 <HAL_SPI_MspInit+0xf8>)
20001ca8:	f000 faee 	bl	20002288 <HAL_GPIO_Init>
}
20001cac:	bf00      	nop
20001cae:	3730      	adds	r7, #48	; 0x30
20001cb0:	46bd      	mov	sp, r7
20001cb2:	bd80      	pop	{r7, pc}
20001cb4:	40013000 	.word	0x40013000
20001cb8:	40023800 	.word	0x40023800
20001cbc:	40020000 	.word	0x40020000
20001cc0:	40003800 	.word	0x40003800
20001cc4:	40020400 	.word	0x40020400

20001cc8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
20001cc8:	b480      	push	{r7}
20001cca:	b085      	sub	sp, #20
20001ccc:	af00      	add	r7, sp, #0
20001cce:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
20001cd0:	687b      	ldr	r3, [r7, #4]
20001cd2:	681b      	ldr	r3, [r3, #0]
20001cd4:	4a0b      	ldr	r2, [pc, #44]	; (20001d04 <HAL_TIM_OC_MspInit+0x3c>)
20001cd6:	4293      	cmp	r3, r2
20001cd8:	d10d      	bne.n	20001cf6 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
20001cda:	2300      	movs	r3, #0
20001cdc:	60fb      	str	r3, [r7, #12]
20001cde:	4b0a      	ldr	r3, [pc, #40]	; (20001d08 <HAL_TIM_OC_MspInit+0x40>)
20001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20001ce2:	4a09      	ldr	r2, [pc, #36]	; (20001d08 <HAL_TIM_OC_MspInit+0x40>)
20001ce4:	f043 0301 	orr.w	r3, r3, #1
20001ce8:	6453      	str	r3, [r2, #68]	; 0x44
20001cea:	4b07      	ldr	r3, [pc, #28]	; (20001d08 <HAL_TIM_OC_MspInit+0x40>)
20001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20001cee:	f003 0301 	and.w	r3, r3, #1
20001cf2:	60fb      	str	r3, [r7, #12]
20001cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
20001cf6:	bf00      	nop
20001cf8:	3714      	adds	r7, #20
20001cfa:	46bd      	mov	sp, r7
20001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d00:	4770      	bx	lr
20001d02:	bf00      	nop
20001d04:	40010000 	.word	0x40010000
20001d08:	40023800 	.word	0x40023800

20001d0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
20001d0c:	b580      	push	{r7, lr}
20001d0e:	b088      	sub	sp, #32
20001d10:	af00      	add	r7, sp, #0
20001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
20001d14:	f107 030c 	add.w	r3, r7, #12
20001d18:	2200      	movs	r2, #0
20001d1a:	601a      	str	r2, [r3, #0]
20001d1c:	605a      	str	r2, [r3, #4]
20001d1e:	609a      	str	r2, [r3, #8]
20001d20:	60da      	str	r2, [r3, #12]
20001d22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
20001d24:	687b      	ldr	r3, [r7, #4]
20001d26:	681b      	ldr	r3, [r3, #0]
20001d28:	4a12      	ldr	r2, [pc, #72]	; (20001d74 <HAL_TIM_MspPostInit+0x68>)
20001d2a:	4293      	cmp	r3, r2
20001d2c:	d11e      	bne.n	20001d6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
20001d2e:	2300      	movs	r3, #0
20001d30:	60bb      	str	r3, [r7, #8]
20001d32:	4b11      	ldr	r3, [pc, #68]	; (20001d78 <HAL_TIM_MspPostInit+0x6c>)
20001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001d36:	4a10      	ldr	r2, [pc, #64]	; (20001d78 <HAL_TIM_MspPostInit+0x6c>)
20001d38:	f043 0301 	orr.w	r3, r3, #1
20001d3c:	6313      	str	r3, [r2, #48]	; 0x30
20001d3e:	4b0e      	ldr	r3, [pc, #56]	; (20001d78 <HAL_TIM_MspPostInit+0x6c>)
20001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001d42:	f003 0301 	and.w	r3, r3, #1
20001d46:	60bb      	str	r3, [r7, #8]
20001d48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
20001d4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
20001d4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001d50:	2302      	movs	r3, #2
20001d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001d54:	2300      	movs	r3, #0
20001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20001d58:	2300      	movs	r3, #0
20001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
20001d5c:	2301      	movs	r3, #1
20001d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20001d60:	f107 030c 	add.w	r3, r7, #12
20001d64:	4619      	mov	r1, r3
20001d66:	4805      	ldr	r0, [pc, #20]	; (20001d7c <HAL_TIM_MspPostInit+0x70>)
20001d68:	f000 fa8e 	bl	20002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
20001d6c:	bf00      	nop
20001d6e:	3720      	adds	r7, #32
20001d70:	46bd      	mov	sp, r7
20001d72:	bd80      	pop	{r7, pc}
20001d74:	40010000 	.word	0x40010000
20001d78:	40023800 	.word	0x40023800
20001d7c:	40020000 	.word	0x40020000

20001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20001d80:	b480      	push	{r7}
20001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
20001d84:	e7fe      	b.n	20001d84 <NMI_Handler+0x4>

20001d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20001d86:	b480      	push	{r7}
20001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20001d8a:	e7fe      	b.n	20001d8a <HardFault_Handler+0x4>

20001d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20001d8c:	b480      	push	{r7}
20001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
20001d90:	e7fe      	b.n	20001d90 <MemManage_Handler+0x4>

20001d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
20001d92:	b480      	push	{r7}
20001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20001d96:	e7fe      	b.n	20001d96 <BusFault_Handler+0x4>

20001d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20001d98:	b480      	push	{r7}
20001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20001d9c:	e7fe      	b.n	20001d9c <UsageFault_Handler+0x4>

20001d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
20001d9e:	b480      	push	{r7}
20001da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
20001da2:	bf00      	nop
20001da4:	46bd      	mov	sp, r7
20001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
20001daa:	4770      	bx	lr

20001dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20001dac:	b480      	push	{r7}
20001dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20001db0:	bf00      	nop
20001db2:	46bd      	mov	sp, r7
20001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001db8:	4770      	bx	lr

20001dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
20001dba:	b480      	push	{r7}
20001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
20001dbe:	bf00      	nop
20001dc0:	46bd      	mov	sp, r7
20001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
20001dc6:	4770      	bx	lr

20001dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
20001dc8:	b580      	push	{r7, lr}
20001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (timBigArea) timBigArea --;
20001dcc:	4b1d      	ldr	r3, [pc, #116]	; (20001e44 <SysTick_Handler+0x7c>)
20001dce:	681b      	ldr	r3, [r3, #0]
20001dd0:	2b00      	cmp	r3, #0
20001dd2:	d004      	beq.n	20001dde <SysTick_Handler+0x16>
20001dd4:	4b1b      	ldr	r3, [pc, #108]	; (20001e44 <SysTick_Handler+0x7c>)
20001dd6:	681b      	ldr	r3, [r3, #0]
20001dd8:	3b01      	subs	r3, #1
20001dda:	4a1a      	ldr	r2, [pc, #104]	; (20001e44 <SysTick_Handler+0x7c>)
20001ddc:	6013      	str	r3, [r2, #0]
	if (timButtonPress) timButtonPress --;
20001dde:	4b1a      	ldr	r3, [pc, #104]	; (20001e48 <SysTick_Handler+0x80>)
20001de0:	681b      	ldr	r3, [r3, #0]
20001de2:	2b00      	cmp	r3, #0
20001de4:	d004      	beq.n	20001df0 <SysTick_Handler+0x28>
20001de6:	4b18      	ldr	r3, [pc, #96]	; (20001e48 <SysTick_Handler+0x80>)
20001de8:	681b      	ldr	r3, [r3, #0]
20001dea:	3b01      	subs	r3, #1
20001dec:	4a16      	ldr	r2, [pc, #88]	; (20001e48 <SysTick_Handler+0x80>)
20001dee:	6013      	str	r3, [r2, #0]
	if (timHoldButtonPress) timHoldButtonPress --;
20001df0:	4b16      	ldr	r3, [pc, #88]	; (20001e4c <SysTick_Handler+0x84>)
20001df2:	681b      	ldr	r3, [r3, #0]
20001df4:	2b00      	cmp	r3, #0
20001df6:	d004      	beq.n	20001e02 <SysTick_Handler+0x3a>
20001df8:	4b14      	ldr	r3, [pc, #80]	; (20001e4c <SysTick_Handler+0x84>)
20001dfa:	681b      	ldr	r3, [r3, #0]
20001dfc:	3b01      	subs	r3, #1
20001dfe:	4a13      	ldr	r2, [pc, #76]	; (20001e4c <SysTick_Handler+0x84>)
20001e00:	6013      	str	r3, [r2, #0]
	if (timToDisplay) timToDisplay --;
20001e02:	4b13      	ldr	r3, [pc, #76]	; (20001e50 <SysTick_Handler+0x88>)
20001e04:	681b      	ldr	r3, [r3, #0]
20001e06:	2b00      	cmp	r3, #0
20001e08:	d004      	beq.n	20001e14 <SysTick_Handler+0x4c>
20001e0a:	4b11      	ldr	r3, [pc, #68]	; (20001e50 <SysTick_Handler+0x88>)
20001e0c:	681b      	ldr	r3, [r3, #0]
20001e0e:	3b01      	subs	r3, #1
20001e10:	4a0f      	ldr	r2, [pc, #60]	; (20001e50 <SysTick_Handler+0x88>)
20001e12:	6013      	str	r3, [r2, #0]
	if (timBuzzer) timBuzzer --;
20001e14:	4b0f      	ldr	r3, [pc, #60]	; (20001e54 <SysTick_Handler+0x8c>)
20001e16:	681b      	ldr	r3, [r3, #0]
20001e18:	2b00      	cmp	r3, #0
20001e1a:	d004      	beq.n	20001e26 <SysTick_Handler+0x5e>
20001e1c:	4b0d      	ldr	r3, [pc, #52]	; (20001e54 <SysTick_Handler+0x8c>)
20001e1e:	681b      	ldr	r3, [r3, #0]
20001e20:	3b01      	subs	r3, #1
20001e22:	4a0c      	ldr	r2, [pc, #48]	; (20001e54 <SysTick_Handler+0x8c>)
20001e24:	6013      	str	r3, [r2, #0]
	if (timBuzzer == 10) SET_BIT(GPIOA->BSRR, GPIO_BSRR_BR_0);
20001e26:	4b0b      	ldr	r3, [pc, #44]	; (20001e54 <SysTick_Handler+0x8c>)
20001e28:	681b      	ldr	r3, [r3, #0]
20001e2a:	2b0a      	cmp	r3, #10
20001e2c:	d105      	bne.n	20001e3a <SysTick_Handler+0x72>
20001e2e:	4b0a      	ldr	r3, [pc, #40]	; (20001e58 <SysTick_Handler+0x90>)
20001e30:	699b      	ldr	r3, [r3, #24]
20001e32:	4a09      	ldr	r2, [pc, #36]	; (20001e58 <SysTick_Handler+0x90>)
20001e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20001e38:	6193      	str	r3, [r2, #24]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
20001e3a:	f000 f8fb 	bl	20002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
20001e3e:	bf00      	nop
20001e40:	bd80      	pop	{r7, pc}
20001e42:	bf00      	nop
20001e44:	20009584 	.word	0x20009584
20001e48:	20009588 	.word	0x20009588
20001e4c:	2000958c 	.word	0x2000958c
20001e50:	2000968c 	.word	0x2000968c
20001e54:	20009688 	.word	0x20009688
20001e58:	40020000 	.word	0x40020000

20001e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20001e5c:	b480      	push	{r7}
20001e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20001e60:	4b06      	ldr	r3, [pc, #24]	; (20001e7c <SystemInit+0x20>)
20001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20001e66:	4a05      	ldr	r2, [pc, #20]	; (20001e7c <SystemInit+0x20>)
20001e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20001e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
20001e70:	bf00      	nop
20001e72:	46bd      	mov	sp, r7
20001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e78:	4770      	bx	lr
20001e7a:	bf00      	nop
20001e7c:	e000ed00 	.word	0xe000ed00

20001e80 <calibration>:
uint32_t* memADR = (uint32_t*)ADR_DATA_MIN_X;
//------------------------------ функции ---------------------------------------------//



void calibration (void){
20001e80:	b580      	push	{r7, lr}
20001e82:	af00      	add	r7, sp, #0
	if (*memADR == 0xFFFFFFFF) {
20001e84:	4b23      	ldr	r3, [pc, #140]	; (20001f14 <calibration+0x94>)
20001e86:	681b      	ldr	r3, [r3, #0]
20001e88:	681b      	ldr	r3, [r3, #0]
20001e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
20001e8e:	d13f      	bne.n	20001f10 <calibration+0x90>
		setOK (false);
20001e90:	2000      	movs	r0, #0
20001e92:	f7ff fbc3 	bl	2000161c <setOK>
		GUICalibration (0);
20001e96:	2000      	movs	r0, #0
20001e98:	f7ff fb24 	bl	200014e4 <GUICalibration>
		calibTouch(0);
20001e9c:	2000      	movs	r0, #0
20001e9e:	f7ff fa4d 	bl	2000133c <calibTouch>
		setOK (true);
20001ea2:	2001      	movs	r0, #1
20001ea4:	f7ff fbba 	bl	2000161c <setOK>
		HAL_Delay(1000);
20001ea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20001eac:	f000 f8e2 	bl	20002074 <HAL_Delay>
		setOK (false);
20001eb0:	2000      	movs	r0, #0
20001eb2:	f7ff fbb3 	bl	2000161c <setOK>
		GUICalibration (1);
20001eb6:	2001      	movs	r0, #1
20001eb8:	f7ff fb14 	bl	200014e4 <GUICalibration>
		calibTouch(1);
20001ebc:	2001      	movs	r0, #1
20001ebe:	f7ff fa3d 	bl	2000133c <calibTouch>
		setOK (true);
20001ec2:	2001      	movs	r0, #1
20001ec4:	f7ff fbaa 	bl	2000161c <setOK>
		HAL_Delay(1000);
20001ec8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20001ecc:	f000 f8d2 	bl	20002074 <HAL_Delay>
		setOK (false);
20001ed0:	2000      	movs	r0, #0
20001ed2:	f7ff fba3 	bl	2000161c <setOK>
		GUICalibration (2);
20001ed6:	2002      	movs	r0, #2
20001ed8:	f7ff fb04 	bl	200014e4 <GUICalibration>
		calibTouch(2);
20001edc:	2002      	movs	r0, #2
20001ede:	f7ff fa2d 	bl	2000133c <calibTouch>
		setOK (true);
20001ee2:	2001      	movs	r0, #1
20001ee4:	f7ff fb9a 	bl	2000161c <setOK>
		HAL_Delay(1000);
20001ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20001eec:	f000 f8c2 	bl	20002074 <HAL_Delay>
		setOK (false);
20001ef0:	2000      	movs	r0, #0
20001ef2:	f7ff fb93 	bl	2000161c <setOK>
		GUICalibration (3);
20001ef6:	2003      	movs	r0, #3
20001ef8:	f7ff faf4 	bl	200014e4 <GUICalibration>
		calibTouch(3);
20001efc:	2003      	movs	r0, #3
20001efe:	f7ff fa1d 	bl	2000133c <calibTouch>
		setOK (true);
20001f02:	2001      	movs	r0, #1
20001f04:	f7ff fb8a 	bl	2000161c <setOK>
		HAL_Delay(1000);
20001f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20001f0c:	f000 f8b2 	bl	20002074 <HAL_Delay>
	}
}
20001f10:	bf00      	nop
20001f12:	bd80      	pop	{r7, pc}
20001f14:	20009538 	.word	0x20009538

20001f18 <doWork>:

void doWork (void){
20001f18:	b580      	push	{r7, lr}
20001f1a:	af00      	add	r7, sp, #0
	startDisplay ();
20001f1c:	f7ff fbae 	bl	2000167c <startDisplay>
	workDisplay();
20001f20:	f7ff fbf0 	bl	20001704 <workDisplay>
	calibration();
20001f24:	f7ff ffac 	bl	20001e80 <calibration>
	ILI9341_ToucInit();
20001f28:	f7ff f894 	bl	20001054 <ILI9341_ToucInit>
}
20001f2c:	bf00      	nop
20001f2e:	bd80      	pop	{r7, pc}

20001f30 <Work>:

void Work (void){
20001f30:	b580      	push	{r7, lr}
20001f32:	af00      	add	r7, sp, #0
	//checkButtonPress();
	workDisplay();
20001f34:	f7ff fbe6 	bl	20001704 <workDisplay>
}
20001f38:	bf00      	nop
20001f3a:	bd80      	pop	{r7, pc}

20001f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
20001f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 20001f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20001f40:	480d      	ldr	r0, [pc, #52]	; (20001f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
20001f42:	490e      	ldr	r1, [pc, #56]	; (20001f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
20001f44:	4a0e      	ldr	r2, [pc, #56]	; (20001f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
20001f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
20001f48:	e002      	b.n	20001f50 <LoopCopyDataInit>

20001f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20001f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20001f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20001f4e:	3304      	adds	r3, #4

20001f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20001f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20001f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
20001f54:	d3f9      	bcc.n	20001f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20001f56:	4a0b      	ldr	r2, [pc, #44]	; (20001f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
20001f58:	4c0b      	ldr	r4, [pc, #44]	; (20001f88 <LoopFillZerobss+0x26>)
  movs r3, #0
20001f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
20001f5c:	e001      	b.n	20001f62 <LoopFillZerobss>

20001f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20001f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20001f60:	3204      	adds	r2, #4

20001f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20001f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
20001f64:	d3fb      	bcc.n	20001f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
20001f66:	f7ff ff79 	bl	20001e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20001f6a:	f001 ff11 	bl	20003d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20001f6e:	f7ff fbe1 	bl	20001734 <main>
  bx  lr    
20001f72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
20001f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
20001f78:	20009524 	.word	0x20009524
  ldr r1, =_edata
20001f7c:	20009544 	.word	0x20009544
  ldr r2, =_sidata
20001f80:	20009524 	.word	0x20009524
  ldr r2, =_sbss
20001f84:	20009544 	.word	0x20009544
  ldr r4, =_ebss
20001f88:	20009694 	.word	0x20009694

20001f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20001f8c:	e7fe      	b.n	20001f8c <ADC_IRQHandler>
	...

20001f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20001f90:	b580      	push	{r7, lr}
20001f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001f94:	4b0e      	ldr	r3, [pc, #56]	; (20001fd0 <HAL_Init+0x40>)
20001f96:	681b      	ldr	r3, [r3, #0]
20001f98:	4a0d      	ldr	r2, [pc, #52]	; (20001fd0 <HAL_Init+0x40>)
20001f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20001f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
20001fa0:	4b0b      	ldr	r3, [pc, #44]	; (20001fd0 <HAL_Init+0x40>)
20001fa2:	681b      	ldr	r3, [r3, #0]
20001fa4:	4a0a      	ldr	r2, [pc, #40]	; (20001fd0 <HAL_Init+0x40>)
20001fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20001faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20001fac:	4b08      	ldr	r3, [pc, #32]	; (20001fd0 <HAL_Init+0x40>)
20001fae:	681b      	ldr	r3, [r3, #0]
20001fb0:	4a07      	ldr	r2, [pc, #28]	; (20001fd0 <HAL_Init+0x40>)
20001fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20001fb8:	2003      	movs	r0, #3
20001fba:	f000 f931 	bl	20002220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20001fbe:	200f      	movs	r0, #15
20001fc0:	f000 f808 	bl	20001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20001fc4:	f7ff fdda 	bl	20001b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20001fc8:	2300      	movs	r3, #0
}
20001fca:	4618      	mov	r0, r3
20001fcc:	bd80      	pop	{r7, pc}
20001fce:	bf00      	nop
20001fd0:	40023c00 	.word	0x40023c00

20001fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20001fd4:	b580      	push	{r7, lr}
20001fd6:	b082      	sub	sp, #8
20001fd8:	af00      	add	r7, sp, #0
20001fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20001fdc:	4b12      	ldr	r3, [pc, #72]	; (20002028 <HAL_InitTick+0x54>)
20001fde:	681a      	ldr	r2, [r3, #0]
20001fe0:	4b12      	ldr	r3, [pc, #72]	; (2000202c <HAL_InitTick+0x58>)
20001fe2:	781b      	ldrb	r3, [r3, #0]
20001fe4:	4619      	mov	r1, r3
20001fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
20001fea:	fbb3 f3f1 	udiv	r3, r3, r1
20001fee:	fbb2 f3f3 	udiv	r3, r2, r3
20001ff2:	4618      	mov	r0, r3
20001ff4:	f000 f93b 	bl	2000226e <HAL_SYSTICK_Config>
20001ff8:	4603      	mov	r3, r0
20001ffa:	2b00      	cmp	r3, #0
20001ffc:	d001      	beq.n	20002002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
20001ffe:	2301      	movs	r3, #1
20002000:	e00e      	b.n	20002020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20002002:	687b      	ldr	r3, [r7, #4]
20002004:	2b0f      	cmp	r3, #15
20002006:	d80a      	bhi.n	2000201e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20002008:	2200      	movs	r2, #0
2000200a:	6879      	ldr	r1, [r7, #4]
2000200c:	f04f 30ff 	mov.w	r0, #4294967295
20002010:	f000 f911 	bl	20002236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20002014:	4a06      	ldr	r2, [pc, #24]	; (20002030 <HAL_InitTick+0x5c>)
20002016:	687b      	ldr	r3, [r7, #4]
20002018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000201a:	2300      	movs	r3, #0
2000201c:	e000      	b.n	20002020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
2000201e:	2301      	movs	r3, #1
}
20002020:	4618      	mov	r0, r3
20002022:	3708      	adds	r7, #8
20002024:	46bd      	mov	sp, r7
20002026:	bd80      	pop	{r7, pc}
20002028:	20009534 	.word	0x20009534
2000202c:	20009540 	.word	0x20009540
20002030:	2000953c 	.word	0x2000953c

20002034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20002034:	b480      	push	{r7}
20002036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20002038:	4b06      	ldr	r3, [pc, #24]	; (20002054 <HAL_IncTick+0x20>)
2000203a:	781b      	ldrb	r3, [r3, #0]
2000203c:	461a      	mov	r2, r3
2000203e:	4b06      	ldr	r3, [pc, #24]	; (20002058 <HAL_IncTick+0x24>)
20002040:	681b      	ldr	r3, [r3, #0]
20002042:	4413      	add	r3, r2
20002044:	4a04      	ldr	r2, [pc, #16]	; (20002058 <HAL_IncTick+0x24>)
20002046:	6013      	str	r3, [r2, #0]
}
20002048:	bf00      	nop
2000204a:	46bd      	mov	sp, r7
2000204c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002050:	4770      	bx	lr
20002052:	bf00      	nop
20002054:	20009540 	.word	0x20009540
20002058:	20009690 	.word	0x20009690

2000205c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
2000205c:	b480      	push	{r7}
2000205e:	af00      	add	r7, sp, #0
  return uwTick;
20002060:	4b03      	ldr	r3, [pc, #12]	; (20002070 <HAL_GetTick+0x14>)
20002062:	681b      	ldr	r3, [r3, #0]
}
20002064:	4618      	mov	r0, r3
20002066:	46bd      	mov	sp, r7
20002068:	f85d 7b04 	ldr.w	r7, [sp], #4
2000206c:	4770      	bx	lr
2000206e:	bf00      	nop
20002070:	20009690 	.word	0x20009690

20002074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20002074:	b580      	push	{r7, lr}
20002076:	b084      	sub	sp, #16
20002078:	af00      	add	r7, sp, #0
2000207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
2000207c:	f7ff ffee 	bl	2000205c <HAL_GetTick>
20002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20002082:	687b      	ldr	r3, [r7, #4]
20002084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
20002086:	68fb      	ldr	r3, [r7, #12]
20002088:	f1b3 3fff 	cmp.w	r3, #4294967295
2000208c:	d005      	beq.n	2000209a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
2000208e:	4b0a      	ldr	r3, [pc, #40]	; (200020b8 <HAL_Delay+0x44>)
20002090:	781b      	ldrb	r3, [r3, #0]
20002092:	461a      	mov	r2, r3
20002094:	68fb      	ldr	r3, [r7, #12]
20002096:	4413      	add	r3, r2
20002098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
2000209a:	bf00      	nop
2000209c:	f7ff ffde 	bl	2000205c <HAL_GetTick>
200020a0:	4602      	mov	r2, r0
200020a2:	68bb      	ldr	r3, [r7, #8]
200020a4:	1ad3      	subs	r3, r2, r3
200020a6:	68fa      	ldr	r2, [r7, #12]
200020a8:	429a      	cmp	r2, r3
200020aa:	d8f7      	bhi.n	2000209c <HAL_Delay+0x28>
  {
  }
}
200020ac:	bf00      	nop
200020ae:	bf00      	nop
200020b0:	3710      	adds	r7, #16
200020b2:	46bd      	mov	sp, r7
200020b4:	bd80      	pop	{r7, pc}
200020b6:	bf00      	nop
200020b8:	20009540 	.word	0x20009540

200020bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200020bc:	b480      	push	{r7}
200020be:	b085      	sub	sp, #20
200020c0:	af00      	add	r7, sp, #0
200020c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
200020c4:	687b      	ldr	r3, [r7, #4]
200020c6:	f003 0307 	and.w	r3, r3, #7
200020ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
200020cc:	4b0c      	ldr	r3, [pc, #48]	; (20002100 <__NVIC_SetPriorityGrouping+0x44>)
200020ce:	68db      	ldr	r3, [r3, #12]
200020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200020d2:	68ba      	ldr	r2, [r7, #8]
200020d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
200020d8:	4013      	ands	r3, r2
200020da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
200020dc:	68fb      	ldr	r3, [r7, #12]
200020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
200020e0:	68bb      	ldr	r3, [r7, #8]
200020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
200020e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
200020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
200020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
200020ee:	4a04      	ldr	r2, [pc, #16]	; (20002100 <__NVIC_SetPriorityGrouping+0x44>)
200020f0:	68bb      	ldr	r3, [r7, #8]
200020f2:	60d3      	str	r3, [r2, #12]
}
200020f4:	bf00      	nop
200020f6:	3714      	adds	r7, #20
200020f8:	46bd      	mov	sp, r7
200020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
200020fe:	4770      	bx	lr
20002100:	e000ed00 	.word	0xe000ed00

20002104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20002104:	b480      	push	{r7}
20002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20002108:	4b04      	ldr	r3, [pc, #16]	; (2000211c <__NVIC_GetPriorityGrouping+0x18>)
2000210a:	68db      	ldr	r3, [r3, #12]
2000210c:	0a1b      	lsrs	r3, r3, #8
2000210e:	f003 0307 	and.w	r3, r3, #7
}
20002112:	4618      	mov	r0, r3
20002114:	46bd      	mov	sp, r7
20002116:	f85d 7b04 	ldr.w	r7, [sp], #4
2000211a:	4770      	bx	lr
2000211c:	e000ed00 	.word	0xe000ed00

20002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20002120:	b480      	push	{r7}
20002122:	b083      	sub	sp, #12
20002124:	af00      	add	r7, sp, #0
20002126:	4603      	mov	r3, r0
20002128:	6039      	str	r1, [r7, #0]
2000212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002130:	2b00      	cmp	r3, #0
20002132:	db0a      	blt.n	2000214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20002134:	683b      	ldr	r3, [r7, #0]
20002136:	b2da      	uxtb	r2, r3
20002138:	490c      	ldr	r1, [pc, #48]	; (2000216c <__NVIC_SetPriority+0x4c>)
2000213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000213e:	0112      	lsls	r2, r2, #4
20002140:	b2d2      	uxtb	r2, r2
20002142:	440b      	add	r3, r1
20002144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20002148:	e00a      	b.n	20002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000214a:	683b      	ldr	r3, [r7, #0]
2000214c:	b2da      	uxtb	r2, r3
2000214e:	4908      	ldr	r1, [pc, #32]	; (20002170 <__NVIC_SetPriority+0x50>)
20002150:	79fb      	ldrb	r3, [r7, #7]
20002152:	f003 030f 	and.w	r3, r3, #15
20002156:	3b04      	subs	r3, #4
20002158:	0112      	lsls	r2, r2, #4
2000215a:	b2d2      	uxtb	r2, r2
2000215c:	440b      	add	r3, r1
2000215e:	761a      	strb	r2, [r3, #24]
}
20002160:	bf00      	nop
20002162:	370c      	adds	r7, #12
20002164:	46bd      	mov	sp, r7
20002166:	f85d 7b04 	ldr.w	r7, [sp], #4
2000216a:	4770      	bx	lr
2000216c:	e000e100 	.word	0xe000e100
20002170:	e000ed00 	.word	0xe000ed00

20002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20002174:	b480      	push	{r7}
20002176:	b089      	sub	sp, #36	; 0x24
20002178:	af00      	add	r7, sp, #0
2000217a:	60f8      	str	r0, [r7, #12]
2000217c:	60b9      	str	r1, [r7, #8]
2000217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20002180:	68fb      	ldr	r3, [r7, #12]
20002182:	f003 0307 	and.w	r3, r3, #7
20002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20002188:	69fb      	ldr	r3, [r7, #28]
2000218a:	f1c3 0307 	rsb	r3, r3, #7
2000218e:	2b04      	cmp	r3, #4
20002190:	bf28      	it	cs
20002192:	2304      	movcs	r3, #4
20002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20002196:	69fb      	ldr	r3, [r7, #28]
20002198:	3304      	adds	r3, #4
2000219a:	2b06      	cmp	r3, #6
2000219c:	d902      	bls.n	200021a4 <NVIC_EncodePriority+0x30>
2000219e:	69fb      	ldr	r3, [r7, #28]
200021a0:	3b03      	subs	r3, #3
200021a2:	e000      	b.n	200021a6 <NVIC_EncodePriority+0x32>
200021a4:	2300      	movs	r3, #0
200021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200021a8:	f04f 32ff 	mov.w	r2, #4294967295
200021ac:	69bb      	ldr	r3, [r7, #24]
200021ae:	fa02 f303 	lsl.w	r3, r2, r3
200021b2:	43da      	mvns	r2, r3
200021b4:	68bb      	ldr	r3, [r7, #8]
200021b6:	401a      	ands	r2, r3
200021b8:	697b      	ldr	r3, [r7, #20]
200021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
200021bc:	f04f 31ff 	mov.w	r1, #4294967295
200021c0:	697b      	ldr	r3, [r7, #20]
200021c2:	fa01 f303 	lsl.w	r3, r1, r3
200021c6:	43d9      	mvns	r1, r3
200021c8:	687b      	ldr	r3, [r7, #4]
200021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200021cc:	4313      	orrs	r3, r2
         );
}
200021ce:	4618      	mov	r0, r3
200021d0:	3724      	adds	r7, #36	; 0x24
200021d2:	46bd      	mov	sp, r7
200021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200021d8:	4770      	bx	lr
	...

200021dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
200021dc:	b580      	push	{r7, lr}
200021de:	b082      	sub	sp, #8
200021e0:	af00      	add	r7, sp, #0
200021e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
200021e4:	687b      	ldr	r3, [r7, #4]
200021e6:	3b01      	subs	r3, #1
200021e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
200021ec:	d301      	bcc.n	200021f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
200021ee:	2301      	movs	r3, #1
200021f0:	e00f      	b.n	20002212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
200021f2:	4a0a      	ldr	r2, [pc, #40]	; (2000221c <SysTick_Config+0x40>)
200021f4:	687b      	ldr	r3, [r7, #4]
200021f6:	3b01      	subs	r3, #1
200021f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
200021fa:	210f      	movs	r1, #15
200021fc:	f04f 30ff 	mov.w	r0, #4294967295
20002200:	f7ff ff8e 	bl	20002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20002204:	4b05      	ldr	r3, [pc, #20]	; (2000221c <SysTick_Config+0x40>)
20002206:	2200      	movs	r2, #0
20002208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2000220a:	4b04      	ldr	r3, [pc, #16]	; (2000221c <SysTick_Config+0x40>)
2000220c:	2207      	movs	r2, #7
2000220e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20002210:	2300      	movs	r3, #0
}
20002212:	4618      	mov	r0, r3
20002214:	3708      	adds	r7, #8
20002216:	46bd      	mov	sp, r7
20002218:	bd80      	pop	{r7, pc}
2000221a:	bf00      	nop
2000221c:	e000e010 	.word	0xe000e010

20002220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20002220:	b580      	push	{r7, lr}
20002222:	b082      	sub	sp, #8
20002224:	af00      	add	r7, sp, #0
20002226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20002228:	6878      	ldr	r0, [r7, #4]
2000222a:	f7ff ff47 	bl	200020bc <__NVIC_SetPriorityGrouping>
}
2000222e:	bf00      	nop
20002230:	3708      	adds	r7, #8
20002232:	46bd      	mov	sp, r7
20002234:	bd80      	pop	{r7, pc}

20002236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
20002236:	b580      	push	{r7, lr}
20002238:	b086      	sub	sp, #24
2000223a:	af00      	add	r7, sp, #0
2000223c:	4603      	mov	r3, r0
2000223e:	60b9      	str	r1, [r7, #8]
20002240:	607a      	str	r2, [r7, #4]
20002242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
20002244:	2300      	movs	r3, #0
20002246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20002248:	f7ff ff5c 	bl	20002104 <__NVIC_GetPriorityGrouping>
2000224c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000224e:	687a      	ldr	r2, [r7, #4]
20002250:	68b9      	ldr	r1, [r7, #8]
20002252:	6978      	ldr	r0, [r7, #20]
20002254:	f7ff ff8e 	bl	20002174 <NVIC_EncodePriority>
20002258:	4602      	mov	r2, r0
2000225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000225e:	4611      	mov	r1, r2
20002260:	4618      	mov	r0, r3
20002262:	f7ff ff5d 	bl	20002120 <__NVIC_SetPriority>
}
20002266:	bf00      	nop
20002268:	3718      	adds	r7, #24
2000226a:	46bd      	mov	sp, r7
2000226c:	bd80      	pop	{r7, pc}

2000226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000226e:	b580      	push	{r7, lr}
20002270:	b082      	sub	sp, #8
20002272:	af00      	add	r7, sp, #0
20002274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20002276:	6878      	ldr	r0, [r7, #4]
20002278:	f7ff ffb0 	bl	200021dc <SysTick_Config>
2000227c:	4603      	mov	r3, r0
}
2000227e:	4618      	mov	r0, r3
20002280:	3708      	adds	r7, #8
20002282:	46bd      	mov	sp, r7
20002284:	bd80      	pop	{r7, pc}
	...

20002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20002288:	b480      	push	{r7}
2000228a:	b089      	sub	sp, #36	; 0x24
2000228c:	af00      	add	r7, sp, #0
2000228e:	6078      	str	r0, [r7, #4]
20002290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
20002292:	2300      	movs	r3, #0
20002294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
20002296:	2300      	movs	r3, #0
20002298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
2000229a:	2300      	movs	r3, #0
2000229c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
2000229e:	2300      	movs	r3, #0
200022a0:	61fb      	str	r3, [r7, #28]
200022a2:	e159      	b.n	20002558 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
200022a4:	2201      	movs	r2, #1
200022a6:	69fb      	ldr	r3, [r7, #28]
200022a8:	fa02 f303 	lsl.w	r3, r2, r3
200022ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
200022ae:	683b      	ldr	r3, [r7, #0]
200022b0:	681b      	ldr	r3, [r3, #0]
200022b2:	697a      	ldr	r2, [r7, #20]
200022b4:	4013      	ands	r3, r2
200022b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
200022b8:	693a      	ldr	r2, [r7, #16]
200022ba:	697b      	ldr	r3, [r7, #20]
200022bc:	429a      	cmp	r2, r3
200022be:	f040 8148 	bne.w	20002552 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
200022c2:	683b      	ldr	r3, [r7, #0]
200022c4:	685b      	ldr	r3, [r3, #4]
200022c6:	f003 0303 	and.w	r3, r3, #3
200022ca:	2b01      	cmp	r3, #1
200022cc:	d005      	beq.n	200022da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
200022ce:	683b      	ldr	r3, [r7, #0]
200022d0:	685b      	ldr	r3, [r3, #4]
200022d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
200022d6:	2b02      	cmp	r3, #2
200022d8:	d130      	bne.n	2000233c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
200022da:	687b      	ldr	r3, [r7, #4]
200022dc:	689b      	ldr	r3, [r3, #8]
200022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
200022e0:	69fb      	ldr	r3, [r7, #28]
200022e2:	005b      	lsls	r3, r3, #1
200022e4:	2203      	movs	r2, #3
200022e6:	fa02 f303 	lsl.w	r3, r2, r3
200022ea:	43db      	mvns	r3, r3
200022ec:	69ba      	ldr	r2, [r7, #24]
200022ee:	4013      	ands	r3, r2
200022f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
200022f2:	683b      	ldr	r3, [r7, #0]
200022f4:	68da      	ldr	r2, [r3, #12]
200022f6:	69fb      	ldr	r3, [r7, #28]
200022f8:	005b      	lsls	r3, r3, #1
200022fa:	fa02 f303 	lsl.w	r3, r2, r3
200022fe:	69ba      	ldr	r2, [r7, #24]
20002300:	4313      	orrs	r3, r2
20002302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
20002304:	687b      	ldr	r3, [r7, #4]
20002306:	69ba      	ldr	r2, [r7, #24]
20002308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2000230a:	687b      	ldr	r3, [r7, #4]
2000230c:	685b      	ldr	r3, [r3, #4]
2000230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20002310:	2201      	movs	r2, #1
20002312:	69fb      	ldr	r3, [r7, #28]
20002314:	fa02 f303 	lsl.w	r3, r2, r3
20002318:	43db      	mvns	r3, r3
2000231a:	69ba      	ldr	r2, [r7, #24]
2000231c:	4013      	ands	r3, r2
2000231e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
20002320:	683b      	ldr	r3, [r7, #0]
20002322:	685b      	ldr	r3, [r3, #4]
20002324:	091b      	lsrs	r3, r3, #4
20002326:	f003 0201 	and.w	r2, r3, #1
2000232a:	69fb      	ldr	r3, [r7, #28]
2000232c:	fa02 f303 	lsl.w	r3, r2, r3
20002330:	69ba      	ldr	r2, [r7, #24]
20002332:	4313      	orrs	r3, r2
20002334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
20002336:	687b      	ldr	r3, [r7, #4]
20002338:	69ba      	ldr	r2, [r7, #24]
2000233a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
2000233c:	683b      	ldr	r3, [r7, #0]
2000233e:	685b      	ldr	r3, [r3, #4]
20002340:	f003 0303 	and.w	r3, r3, #3
20002344:	2b03      	cmp	r3, #3
20002346:	d017      	beq.n	20002378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
20002348:	687b      	ldr	r3, [r7, #4]
2000234a:	68db      	ldr	r3, [r3, #12]
2000234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000234e:	69fb      	ldr	r3, [r7, #28]
20002350:	005b      	lsls	r3, r3, #1
20002352:	2203      	movs	r2, #3
20002354:	fa02 f303 	lsl.w	r3, r2, r3
20002358:	43db      	mvns	r3, r3
2000235a:	69ba      	ldr	r2, [r7, #24]
2000235c:	4013      	ands	r3, r2
2000235e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
20002360:	683b      	ldr	r3, [r7, #0]
20002362:	689a      	ldr	r2, [r3, #8]
20002364:	69fb      	ldr	r3, [r7, #28]
20002366:	005b      	lsls	r3, r3, #1
20002368:	fa02 f303 	lsl.w	r3, r2, r3
2000236c:	69ba      	ldr	r2, [r7, #24]
2000236e:	4313      	orrs	r3, r2
20002370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
20002372:	687b      	ldr	r3, [r7, #4]
20002374:	69ba      	ldr	r2, [r7, #24]
20002376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20002378:	683b      	ldr	r3, [r7, #0]
2000237a:	685b      	ldr	r3, [r3, #4]
2000237c:	f003 0303 	and.w	r3, r3, #3
20002380:	2b02      	cmp	r3, #2
20002382:	d123      	bne.n	200023cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
20002384:	69fb      	ldr	r3, [r7, #28]
20002386:	08da      	lsrs	r2, r3, #3
20002388:	687b      	ldr	r3, [r7, #4]
2000238a:	3208      	adds	r2, #8
2000238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20002392:	69fb      	ldr	r3, [r7, #28]
20002394:	f003 0307 	and.w	r3, r3, #7
20002398:	009b      	lsls	r3, r3, #2
2000239a:	220f      	movs	r2, #15
2000239c:	fa02 f303 	lsl.w	r3, r2, r3
200023a0:	43db      	mvns	r3, r3
200023a2:	69ba      	ldr	r2, [r7, #24]
200023a4:	4013      	ands	r3, r2
200023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
200023a8:	683b      	ldr	r3, [r7, #0]
200023aa:	691a      	ldr	r2, [r3, #16]
200023ac:	69fb      	ldr	r3, [r7, #28]
200023ae:	f003 0307 	and.w	r3, r3, #7
200023b2:	009b      	lsls	r3, r3, #2
200023b4:	fa02 f303 	lsl.w	r3, r2, r3
200023b8:	69ba      	ldr	r2, [r7, #24]
200023ba:	4313      	orrs	r3, r2
200023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
200023be:	69fb      	ldr	r3, [r7, #28]
200023c0:	08da      	lsrs	r2, r3, #3
200023c2:	687b      	ldr	r3, [r7, #4]
200023c4:	3208      	adds	r2, #8
200023c6:	69b9      	ldr	r1, [r7, #24]
200023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
200023cc:	687b      	ldr	r3, [r7, #4]
200023ce:	681b      	ldr	r3, [r3, #0]
200023d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
200023d2:	69fb      	ldr	r3, [r7, #28]
200023d4:	005b      	lsls	r3, r3, #1
200023d6:	2203      	movs	r2, #3
200023d8:	fa02 f303 	lsl.w	r3, r2, r3
200023dc:	43db      	mvns	r3, r3
200023de:	69ba      	ldr	r2, [r7, #24]
200023e0:	4013      	ands	r3, r2
200023e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
200023e4:	683b      	ldr	r3, [r7, #0]
200023e6:	685b      	ldr	r3, [r3, #4]
200023e8:	f003 0203 	and.w	r2, r3, #3
200023ec:	69fb      	ldr	r3, [r7, #28]
200023ee:	005b      	lsls	r3, r3, #1
200023f0:	fa02 f303 	lsl.w	r3, r2, r3
200023f4:	69ba      	ldr	r2, [r7, #24]
200023f6:	4313      	orrs	r3, r2
200023f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
200023fa:	687b      	ldr	r3, [r7, #4]
200023fc:	69ba      	ldr	r2, [r7, #24]
200023fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
20002400:	683b      	ldr	r3, [r7, #0]
20002402:	685b      	ldr	r3, [r3, #4]
20002404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
20002408:	2b00      	cmp	r3, #0
2000240a:	f000 80a2 	beq.w	20002552 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2000240e:	2300      	movs	r3, #0
20002410:	60fb      	str	r3, [r7, #12]
20002412:	4b57      	ldr	r3, [pc, #348]	; (20002570 <HAL_GPIO_Init+0x2e8>)
20002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20002416:	4a56      	ldr	r2, [pc, #344]	; (20002570 <HAL_GPIO_Init+0x2e8>)
20002418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000241c:	6453      	str	r3, [r2, #68]	; 0x44
2000241e:	4b54      	ldr	r3, [pc, #336]	; (20002570 <HAL_GPIO_Init+0x2e8>)
20002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20002422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20002426:	60fb      	str	r3, [r7, #12]
20002428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2000242a:	4a52      	ldr	r2, [pc, #328]	; (20002574 <HAL_GPIO_Init+0x2ec>)
2000242c:	69fb      	ldr	r3, [r7, #28]
2000242e:	089b      	lsrs	r3, r3, #2
20002430:	3302      	adds	r3, #2
20002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20002438:	69fb      	ldr	r3, [r7, #28]
2000243a:	f003 0303 	and.w	r3, r3, #3
2000243e:	009b      	lsls	r3, r3, #2
20002440:	220f      	movs	r2, #15
20002442:	fa02 f303 	lsl.w	r3, r2, r3
20002446:	43db      	mvns	r3, r3
20002448:	69ba      	ldr	r2, [r7, #24]
2000244a:	4013      	ands	r3, r2
2000244c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
2000244e:	687b      	ldr	r3, [r7, #4]
20002450:	4a49      	ldr	r2, [pc, #292]	; (20002578 <HAL_GPIO_Init+0x2f0>)
20002452:	4293      	cmp	r3, r2
20002454:	d019      	beq.n	2000248a <HAL_GPIO_Init+0x202>
20002456:	687b      	ldr	r3, [r7, #4]
20002458:	4a48      	ldr	r2, [pc, #288]	; (2000257c <HAL_GPIO_Init+0x2f4>)
2000245a:	4293      	cmp	r3, r2
2000245c:	d013      	beq.n	20002486 <HAL_GPIO_Init+0x1fe>
2000245e:	687b      	ldr	r3, [r7, #4]
20002460:	4a47      	ldr	r2, [pc, #284]	; (20002580 <HAL_GPIO_Init+0x2f8>)
20002462:	4293      	cmp	r3, r2
20002464:	d00d      	beq.n	20002482 <HAL_GPIO_Init+0x1fa>
20002466:	687b      	ldr	r3, [r7, #4]
20002468:	4a46      	ldr	r2, [pc, #280]	; (20002584 <HAL_GPIO_Init+0x2fc>)
2000246a:	4293      	cmp	r3, r2
2000246c:	d007      	beq.n	2000247e <HAL_GPIO_Init+0x1f6>
2000246e:	687b      	ldr	r3, [r7, #4]
20002470:	4a45      	ldr	r2, [pc, #276]	; (20002588 <HAL_GPIO_Init+0x300>)
20002472:	4293      	cmp	r3, r2
20002474:	d101      	bne.n	2000247a <HAL_GPIO_Init+0x1f2>
20002476:	2304      	movs	r3, #4
20002478:	e008      	b.n	2000248c <HAL_GPIO_Init+0x204>
2000247a:	2307      	movs	r3, #7
2000247c:	e006      	b.n	2000248c <HAL_GPIO_Init+0x204>
2000247e:	2303      	movs	r3, #3
20002480:	e004      	b.n	2000248c <HAL_GPIO_Init+0x204>
20002482:	2302      	movs	r3, #2
20002484:	e002      	b.n	2000248c <HAL_GPIO_Init+0x204>
20002486:	2301      	movs	r3, #1
20002488:	e000      	b.n	2000248c <HAL_GPIO_Init+0x204>
2000248a:	2300      	movs	r3, #0
2000248c:	69fa      	ldr	r2, [r7, #28]
2000248e:	f002 0203 	and.w	r2, r2, #3
20002492:	0092      	lsls	r2, r2, #2
20002494:	4093      	lsls	r3, r2
20002496:	69ba      	ldr	r2, [r7, #24]
20002498:	4313      	orrs	r3, r2
2000249a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2000249c:	4935      	ldr	r1, [pc, #212]	; (20002574 <HAL_GPIO_Init+0x2ec>)
2000249e:	69fb      	ldr	r3, [r7, #28]
200024a0:	089b      	lsrs	r3, r3, #2
200024a2:	3302      	adds	r3, #2
200024a4:	69ba      	ldr	r2, [r7, #24]
200024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
200024aa:	4b38      	ldr	r3, [pc, #224]	; (2000258c <HAL_GPIO_Init+0x304>)
200024ac:	689b      	ldr	r3, [r3, #8]
200024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200024b0:	693b      	ldr	r3, [r7, #16]
200024b2:	43db      	mvns	r3, r3
200024b4:	69ba      	ldr	r2, [r7, #24]
200024b6:	4013      	ands	r3, r2
200024b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
200024ba:	683b      	ldr	r3, [r7, #0]
200024bc:	685b      	ldr	r3, [r3, #4]
200024be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
200024c2:	2b00      	cmp	r3, #0
200024c4:	d003      	beq.n	200024ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
200024c6:	69ba      	ldr	r2, [r7, #24]
200024c8:	693b      	ldr	r3, [r7, #16]
200024ca:	4313      	orrs	r3, r2
200024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
200024ce:	4a2f      	ldr	r2, [pc, #188]	; (2000258c <HAL_GPIO_Init+0x304>)
200024d0:	69bb      	ldr	r3, [r7, #24]
200024d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
200024d4:	4b2d      	ldr	r3, [pc, #180]	; (2000258c <HAL_GPIO_Init+0x304>)
200024d6:	68db      	ldr	r3, [r3, #12]
200024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200024da:	693b      	ldr	r3, [r7, #16]
200024dc:	43db      	mvns	r3, r3
200024de:	69ba      	ldr	r2, [r7, #24]
200024e0:	4013      	ands	r3, r2
200024e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
200024e4:	683b      	ldr	r3, [r7, #0]
200024e6:	685b      	ldr	r3, [r3, #4]
200024e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
200024ec:	2b00      	cmp	r3, #0
200024ee:	d003      	beq.n	200024f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
200024f0:	69ba      	ldr	r2, [r7, #24]
200024f2:	693b      	ldr	r3, [r7, #16]
200024f4:	4313      	orrs	r3, r2
200024f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
200024f8:	4a24      	ldr	r2, [pc, #144]	; (2000258c <HAL_GPIO_Init+0x304>)
200024fa:	69bb      	ldr	r3, [r7, #24]
200024fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
200024fe:	4b23      	ldr	r3, [pc, #140]	; (2000258c <HAL_GPIO_Init+0x304>)
20002500:	685b      	ldr	r3, [r3, #4]
20002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20002504:	693b      	ldr	r3, [r7, #16]
20002506:	43db      	mvns	r3, r3
20002508:	69ba      	ldr	r2, [r7, #24]
2000250a:	4013      	ands	r3, r2
2000250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
2000250e:	683b      	ldr	r3, [r7, #0]
20002510:	685b      	ldr	r3, [r3, #4]
20002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20002516:	2b00      	cmp	r3, #0
20002518:	d003      	beq.n	20002522 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
2000251a:	69ba      	ldr	r2, [r7, #24]
2000251c:	693b      	ldr	r3, [r7, #16]
2000251e:	4313      	orrs	r3, r2
20002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
20002522:	4a1a      	ldr	r2, [pc, #104]	; (2000258c <HAL_GPIO_Init+0x304>)
20002524:	69bb      	ldr	r3, [r7, #24]
20002526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20002528:	4b18      	ldr	r3, [pc, #96]	; (2000258c <HAL_GPIO_Init+0x304>)
2000252a:	681b      	ldr	r3, [r3, #0]
2000252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000252e:	693b      	ldr	r3, [r7, #16]
20002530:	43db      	mvns	r3, r3
20002532:	69ba      	ldr	r2, [r7, #24]
20002534:	4013      	ands	r3, r2
20002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20002538:	683b      	ldr	r3, [r7, #0]
2000253a:	685b      	ldr	r3, [r3, #4]
2000253c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20002540:	2b00      	cmp	r3, #0
20002542:	d003      	beq.n	2000254c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
20002544:	69ba      	ldr	r2, [r7, #24]
20002546:	693b      	ldr	r3, [r7, #16]
20002548:	4313      	orrs	r3, r2
2000254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
2000254c:	4a0f      	ldr	r2, [pc, #60]	; (2000258c <HAL_GPIO_Init+0x304>)
2000254e:	69bb      	ldr	r3, [r7, #24]
20002550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
20002552:	69fb      	ldr	r3, [r7, #28]
20002554:	3301      	adds	r3, #1
20002556:	61fb      	str	r3, [r7, #28]
20002558:	69fb      	ldr	r3, [r7, #28]
2000255a:	2b0f      	cmp	r3, #15
2000255c:	f67f aea2 	bls.w	200022a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
20002560:	bf00      	nop
20002562:	bf00      	nop
20002564:	3724      	adds	r7, #36	; 0x24
20002566:	46bd      	mov	sp, r7
20002568:	f85d 7b04 	ldr.w	r7, [sp], #4
2000256c:	4770      	bx	lr
2000256e:	bf00      	nop
20002570:	40023800 	.word	0x40023800
20002574:	40013800 	.word	0x40013800
20002578:	40020000 	.word	0x40020000
2000257c:	40020400 	.word	0x40020400
20002580:	40020800 	.word	0x40020800
20002584:	40020c00 	.word	0x40020c00
20002588:	40021000 	.word	0x40021000
2000258c:	40013c00 	.word	0x40013c00

20002590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20002590:	b480      	push	{r7}
20002592:	b085      	sub	sp, #20
20002594:	af00      	add	r7, sp, #0
20002596:	6078      	str	r0, [r7, #4]
20002598:	460b      	mov	r3, r1
2000259a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
2000259c:	687b      	ldr	r3, [r7, #4]
2000259e:	691a      	ldr	r2, [r3, #16]
200025a0:	887b      	ldrh	r3, [r7, #2]
200025a2:	4013      	ands	r3, r2
200025a4:	2b00      	cmp	r3, #0
200025a6:	d002      	beq.n	200025ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
200025a8:	2301      	movs	r3, #1
200025aa:	73fb      	strb	r3, [r7, #15]
200025ac:	e001      	b.n	200025b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
200025ae:	2300      	movs	r3, #0
200025b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
200025b2:	7bfb      	ldrb	r3, [r7, #15]
}
200025b4:	4618      	mov	r0, r3
200025b6:	3714      	adds	r7, #20
200025b8:	46bd      	mov	sp, r7
200025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
200025be:	4770      	bx	lr

200025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
200025c0:	b480      	push	{r7}
200025c2:	b083      	sub	sp, #12
200025c4:	af00      	add	r7, sp, #0
200025c6:	6078      	str	r0, [r7, #4]
200025c8:	460b      	mov	r3, r1
200025ca:	807b      	strh	r3, [r7, #2]
200025cc:	4613      	mov	r3, r2
200025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
200025d0:	787b      	ldrb	r3, [r7, #1]
200025d2:	2b00      	cmp	r3, #0
200025d4:	d003      	beq.n	200025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
200025d6:	887a      	ldrh	r2, [r7, #2]
200025d8:	687b      	ldr	r3, [r7, #4]
200025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
200025dc:	e003      	b.n	200025e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
200025de:	887b      	ldrh	r3, [r7, #2]
200025e0:	041a      	lsls	r2, r3, #16
200025e2:	687b      	ldr	r3, [r7, #4]
200025e4:	619a      	str	r2, [r3, #24]
}
200025e6:	bf00      	nop
200025e8:	370c      	adds	r7, #12
200025ea:	46bd      	mov	sp, r7
200025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200025f0:	4770      	bx	lr
	...

200025f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
200025f4:	b580      	push	{r7, lr}
200025f6:	b086      	sub	sp, #24
200025f8:	af00      	add	r7, sp, #0
200025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
200025fc:	687b      	ldr	r3, [r7, #4]
200025fe:	2b00      	cmp	r3, #0
20002600:	d101      	bne.n	20002606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
20002602:	2301      	movs	r3, #1
20002604:	e267      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20002606:	687b      	ldr	r3, [r7, #4]
20002608:	681b      	ldr	r3, [r3, #0]
2000260a:	f003 0301 	and.w	r3, r3, #1
2000260e:	2b00      	cmp	r3, #0
20002610:	d075      	beq.n	200026fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20002612:	4b88      	ldr	r3, [pc, #544]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002614:	689b      	ldr	r3, [r3, #8]
20002616:	f003 030c 	and.w	r3, r3, #12
2000261a:	2b04      	cmp	r3, #4
2000261c:	d00c      	beq.n	20002638 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000261e:	4b85      	ldr	r3, [pc, #532]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002620:	689b      	ldr	r3, [r3, #8]
20002622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20002626:	2b08      	cmp	r3, #8
20002628:	d112      	bne.n	20002650 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000262a:	4b82      	ldr	r3, [pc, #520]	; (20002834 <HAL_RCC_OscConfig+0x240>)
2000262c:	685b      	ldr	r3, [r3, #4]
2000262e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20002632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20002636:	d10b      	bne.n	20002650 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20002638:	4b7e      	ldr	r3, [pc, #504]	; (20002834 <HAL_RCC_OscConfig+0x240>)
2000263a:	681b      	ldr	r3, [r3, #0]
2000263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20002640:	2b00      	cmp	r3, #0
20002642:	d05b      	beq.n	200026fc <HAL_RCC_OscConfig+0x108>
20002644:	687b      	ldr	r3, [r7, #4]
20002646:	685b      	ldr	r3, [r3, #4]
20002648:	2b00      	cmp	r3, #0
2000264a:	d157      	bne.n	200026fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
2000264c:	2301      	movs	r3, #1
2000264e:	e242      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20002650:	687b      	ldr	r3, [r7, #4]
20002652:	685b      	ldr	r3, [r3, #4]
20002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20002658:	d106      	bne.n	20002668 <HAL_RCC_OscConfig+0x74>
2000265a:	4b76      	ldr	r3, [pc, #472]	; (20002834 <HAL_RCC_OscConfig+0x240>)
2000265c:	681b      	ldr	r3, [r3, #0]
2000265e:	4a75      	ldr	r2, [pc, #468]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20002664:	6013      	str	r3, [r2, #0]
20002666:	e01d      	b.n	200026a4 <HAL_RCC_OscConfig+0xb0>
20002668:	687b      	ldr	r3, [r7, #4]
2000266a:	685b      	ldr	r3, [r3, #4]
2000266c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20002670:	d10c      	bne.n	2000268c <HAL_RCC_OscConfig+0x98>
20002672:	4b70      	ldr	r3, [pc, #448]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002674:	681b      	ldr	r3, [r3, #0]
20002676:	4a6f      	ldr	r2, [pc, #444]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000267c:	6013      	str	r3, [r2, #0]
2000267e:	4b6d      	ldr	r3, [pc, #436]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002680:	681b      	ldr	r3, [r3, #0]
20002682:	4a6c      	ldr	r2, [pc, #432]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20002688:	6013      	str	r3, [r2, #0]
2000268a:	e00b      	b.n	200026a4 <HAL_RCC_OscConfig+0xb0>
2000268c:	4b69      	ldr	r3, [pc, #420]	; (20002834 <HAL_RCC_OscConfig+0x240>)
2000268e:	681b      	ldr	r3, [r3, #0]
20002690:	4a68      	ldr	r2, [pc, #416]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20002696:	6013      	str	r3, [r2, #0]
20002698:	4b66      	ldr	r3, [pc, #408]	; (20002834 <HAL_RCC_OscConfig+0x240>)
2000269a:	681b      	ldr	r3, [r3, #0]
2000269c:	4a65      	ldr	r2, [pc, #404]	; (20002834 <HAL_RCC_OscConfig+0x240>)
2000269e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
200026a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
200026a4:	687b      	ldr	r3, [r7, #4]
200026a6:	685b      	ldr	r3, [r3, #4]
200026a8:	2b00      	cmp	r3, #0
200026aa:	d013      	beq.n	200026d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
200026ac:	f7ff fcd6 	bl	2000205c <HAL_GetTick>
200026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
200026b2:	e008      	b.n	200026c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
200026b4:	f7ff fcd2 	bl	2000205c <HAL_GetTick>
200026b8:	4602      	mov	r2, r0
200026ba:	693b      	ldr	r3, [r7, #16]
200026bc:	1ad3      	subs	r3, r2, r3
200026be:	2b64      	cmp	r3, #100	; 0x64
200026c0:	d901      	bls.n	200026c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
200026c2:	2303      	movs	r3, #3
200026c4:	e207      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
200026c6:	4b5b      	ldr	r3, [pc, #364]	; (20002834 <HAL_RCC_OscConfig+0x240>)
200026c8:	681b      	ldr	r3, [r3, #0]
200026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200026ce:	2b00      	cmp	r3, #0
200026d0:	d0f0      	beq.n	200026b4 <HAL_RCC_OscConfig+0xc0>
200026d2:	e014      	b.n	200026fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
200026d4:	f7ff fcc2 	bl	2000205c <HAL_GetTick>
200026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200026da:	e008      	b.n	200026ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
200026dc:	f7ff fcbe 	bl	2000205c <HAL_GetTick>
200026e0:	4602      	mov	r2, r0
200026e2:	693b      	ldr	r3, [r7, #16]
200026e4:	1ad3      	subs	r3, r2, r3
200026e6:	2b64      	cmp	r3, #100	; 0x64
200026e8:	d901      	bls.n	200026ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
200026ea:	2303      	movs	r3, #3
200026ec:	e1f3      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200026ee:	4b51      	ldr	r3, [pc, #324]	; (20002834 <HAL_RCC_OscConfig+0x240>)
200026f0:	681b      	ldr	r3, [r3, #0]
200026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200026f6:	2b00      	cmp	r3, #0
200026f8:	d1f0      	bne.n	200026dc <HAL_RCC_OscConfig+0xe8>
200026fa:	e000      	b.n	200026fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200026fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
200026fe:	687b      	ldr	r3, [r7, #4]
20002700:	681b      	ldr	r3, [r3, #0]
20002702:	f003 0302 	and.w	r3, r3, #2
20002706:	2b00      	cmp	r3, #0
20002708:	d063      	beq.n	200027d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000270a:	4b4a      	ldr	r3, [pc, #296]	; (20002834 <HAL_RCC_OscConfig+0x240>)
2000270c:	689b      	ldr	r3, [r3, #8]
2000270e:	f003 030c 	and.w	r3, r3, #12
20002712:	2b00      	cmp	r3, #0
20002714:	d00b      	beq.n	2000272e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20002716:	4b47      	ldr	r3, [pc, #284]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002718:	689b      	ldr	r3, [r3, #8]
2000271a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000271e:	2b08      	cmp	r3, #8
20002720:	d11c      	bne.n	2000275c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20002722:	4b44      	ldr	r3, [pc, #272]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002724:	685b      	ldr	r3, [r3, #4]
20002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000272a:	2b00      	cmp	r3, #0
2000272c:	d116      	bne.n	2000275c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000272e:	4b41      	ldr	r3, [pc, #260]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002730:	681b      	ldr	r3, [r3, #0]
20002732:	f003 0302 	and.w	r3, r3, #2
20002736:	2b00      	cmp	r3, #0
20002738:	d005      	beq.n	20002746 <HAL_RCC_OscConfig+0x152>
2000273a:	687b      	ldr	r3, [r7, #4]
2000273c:	68db      	ldr	r3, [r3, #12]
2000273e:	2b01      	cmp	r3, #1
20002740:	d001      	beq.n	20002746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
20002742:	2301      	movs	r3, #1
20002744:	e1c7      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20002746:	4b3b      	ldr	r3, [pc, #236]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002748:	681b      	ldr	r3, [r3, #0]
2000274a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000274e:	687b      	ldr	r3, [r7, #4]
20002750:	691b      	ldr	r3, [r3, #16]
20002752:	00db      	lsls	r3, r3, #3
20002754:	4937      	ldr	r1, [pc, #220]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002756:	4313      	orrs	r3, r2
20002758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000275a:	e03a      	b.n	200027d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
2000275c:	687b      	ldr	r3, [r7, #4]
2000275e:	68db      	ldr	r3, [r3, #12]
20002760:	2b00      	cmp	r3, #0
20002762:	d020      	beq.n	200027a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20002764:	4b34      	ldr	r3, [pc, #208]	; (20002838 <HAL_RCC_OscConfig+0x244>)
20002766:	2201      	movs	r2, #1
20002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000276a:	f7ff fc77 	bl	2000205c <HAL_GetTick>
2000276e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20002770:	e008      	b.n	20002784 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20002772:	f7ff fc73 	bl	2000205c <HAL_GetTick>
20002776:	4602      	mov	r2, r0
20002778:	693b      	ldr	r3, [r7, #16]
2000277a:	1ad3      	subs	r3, r2, r3
2000277c:	2b02      	cmp	r3, #2
2000277e:	d901      	bls.n	20002784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
20002780:	2303      	movs	r3, #3
20002782:	e1a8      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20002784:	4b2b      	ldr	r3, [pc, #172]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002786:	681b      	ldr	r3, [r3, #0]
20002788:	f003 0302 	and.w	r3, r3, #2
2000278c:	2b00      	cmp	r3, #0
2000278e:	d0f0      	beq.n	20002772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20002790:	4b28      	ldr	r3, [pc, #160]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002792:	681b      	ldr	r3, [r3, #0]
20002794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20002798:	687b      	ldr	r3, [r7, #4]
2000279a:	691b      	ldr	r3, [r3, #16]
2000279c:	00db      	lsls	r3, r3, #3
2000279e:	4925      	ldr	r1, [pc, #148]	; (20002834 <HAL_RCC_OscConfig+0x240>)
200027a0:	4313      	orrs	r3, r2
200027a2:	600b      	str	r3, [r1, #0]
200027a4:	e015      	b.n	200027d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
200027a6:	4b24      	ldr	r3, [pc, #144]	; (20002838 <HAL_RCC_OscConfig+0x244>)
200027a8:	2200      	movs	r2, #0
200027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200027ac:	f7ff fc56 	bl	2000205c <HAL_GetTick>
200027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
200027b2:	e008      	b.n	200027c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
200027b4:	f7ff fc52 	bl	2000205c <HAL_GetTick>
200027b8:	4602      	mov	r2, r0
200027ba:	693b      	ldr	r3, [r7, #16]
200027bc:	1ad3      	subs	r3, r2, r3
200027be:	2b02      	cmp	r3, #2
200027c0:	d901      	bls.n	200027c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
200027c2:	2303      	movs	r3, #3
200027c4:	e187      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
200027c6:	4b1b      	ldr	r3, [pc, #108]	; (20002834 <HAL_RCC_OscConfig+0x240>)
200027c8:	681b      	ldr	r3, [r3, #0]
200027ca:	f003 0302 	and.w	r3, r3, #2
200027ce:	2b00      	cmp	r3, #0
200027d0:	d1f0      	bne.n	200027b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
200027d2:	687b      	ldr	r3, [r7, #4]
200027d4:	681b      	ldr	r3, [r3, #0]
200027d6:	f003 0308 	and.w	r3, r3, #8
200027da:	2b00      	cmp	r3, #0
200027dc:	d036      	beq.n	2000284c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
200027de:	687b      	ldr	r3, [r7, #4]
200027e0:	695b      	ldr	r3, [r3, #20]
200027e2:	2b00      	cmp	r3, #0
200027e4:	d016      	beq.n	20002814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
200027e6:	4b15      	ldr	r3, [pc, #84]	; (2000283c <HAL_RCC_OscConfig+0x248>)
200027e8:	2201      	movs	r2, #1
200027ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200027ec:	f7ff fc36 	bl	2000205c <HAL_GetTick>
200027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200027f2:	e008      	b.n	20002806 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
200027f4:	f7ff fc32 	bl	2000205c <HAL_GetTick>
200027f8:	4602      	mov	r2, r0
200027fa:	693b      	ldr	r3, [r7, #16]
200027fc:	1ad3      	subs	r3, r2, r3
200027fe:	2b02      	cmp	r3, #2
20002800:	d901      	bls.n	20002806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
20002802:	2303      	movs	r3, #3
20002804:	e167      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20002806:	4b0b      	ldr	r3, [pc, #44]	; (20002834 <HAL_RCC_OscConfig+0x240>)
20002808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000280a:	f003 0302 	and.w	r3, r3, #2
2000280e:	2b00      	cmp	r3, #0
20002810:	d0f0      	beq.n	200027f4 <HAL_RCC_OscConfig+0x200>
20002812:	e01b      	b.n	2000284c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20002814:	4b09      	ldr	r3, [pc, #36]	; (2000283c <HAL_RCC_OscConfig+0x248>)
20002816:	2200      	movs	r2, #0
20002818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000281a:	f7ff fc1f 	bl	2000205c <HAL_GetTick>
2000281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20002820:	e00e      	b.n	20002840 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20002822:	f7ff fc1b 	bl	2000205c <HAL_GetTick>
20002826:	4602      	mov	r2, r0
20002828:	693b      	ldr	r3, [r7, #16]
2000282a:	1ad3      	subs	r3, r2, r3
2000282c:	2b02      	cmp	r3, #2
2000282e:	d907      	bls.n	20002840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
20002830:	2303      	movs	r3, #3
20002832:	e150      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
20002834:	40023800 	.word	0x40023800
20002838:	42470000 	.word	0x42470000
2000283c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20002840:	4b88      	ldr	r3, [pc, #544]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
20002842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20002844:	f003 0302 	and.w	r3, r3, #2
20002848:	2b00      	cmp	r3, #0
2000284a:	d1ea      	bne.n	20002822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2000284c:	687b      	ldr	r3, [r7, #4]
2000284e:	681b      	ldr	r3, [r3, #0]
20002850:	f003 0304 	and.w	r3, r3, #4
20002854:	2b00      	cmp	r3, #0
20002856:	f000 8097 	beq.w	20002988 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
2000285a:	2300      	movs	r3, #0
2000285c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
2000285e:	4b81      	ldr	r3, [pc, #516]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
20002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20002866:	2b00      	cmp	r3, #0
20002868:	d10f      	bne.n	2000288a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
2000286a:	2300      	movs	r3, #0
2000286c:	60bb      	str	r3, [r7, #8]
2000286e:	4b7d      	ldr	r3, [pc, #500]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
20002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002872:	4a7c      	ldr	r2, [pc, #496]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
20002874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20002878:	6413      	str	r3, [r2, #64]	; 0x40
2000287a:	4b7a      	ldr	r3, [pc, #488]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
2000287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20002882:	60bb      	str	r3, [r7, #8]
20002884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
20002886:	2301      	movs	r3, #1
20002888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000288a:	4b77      	ldr	r3, [pc, #476]	; (20002a68 <HAL_RCC_OscConfig+0x474>)
2000288c:	681b      	ldr	r3, [r3, #0]
2000288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002892:	2b00      	cmp	r3, #0
20002894:	d118      	bne.n	200028c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
20002896:	4b74      	ldr	r3, [pc, #464]	; (20002a68 <HAL_RCC_OscConfig+0x474>)
20002898:	681b      	ldr	r3, [r3, #0]
2000289a:	4a73      	ldr	r2, [pc, #460]	; (20002a68 <HAL_RCC_OscConfig+0x474>)
2000289c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200028a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
200028a2:	f7ff fbdb 	bl	2000205c <HAL_GetTick>
200028a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
200028a8:	e008      	b.n	200028bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
200028aa:	f7ff fbd7 	bl	2000205c <HAL_GetTick>
200028ae:	4602      	mov	r2, r0
200028b0:	693b      	ldr	r3, [r7, #16]
200028b2:	1ad3      	subs	r3, r2, r3
200028b4:	2b02      	cmp	r3, #2
200028b6:	d901      	bls.n	200028bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
200028b8:	2303      	movs	r3, #3
200028ba:	e10c      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
200028bc:	4b6a      	ldr	r3, [pc, #424]	; (20002a68 <HAL_RCC_OscConfig+0x474>)
200028be:	681b      	ldr	r3, [r3, #0]
200028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
200028c4:	2b00      	cmp	r3, #0
200028c6:	d0f0      	beq.n	200028aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
200028c8:	687b      	ldr	r3, [r7, #4]
200028ca:	689b      	ldr	r3, [r3, #8]
200028cc:	2b01      	cmp	r3, #1
200028ce:	d106      	bne.n	200028de <HAL_RCC_OscConfig+0x2ea>
200028d0:	4b64      	ldr	r3, [pc, #400]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
200028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200028d4:	4a63      	ldr	r2, [pc, #396]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
200028d6:	f043 0301 	orr.w	r3, r3, #1
200028da:	6713      	str	r3, [r2, #112]	; 0x70
200028dc:	e01c      	b.n	20002918 <HAL_RCC_OscConfig+0x324>
200028de:	687b      	ldr	r3, [r7, #4]
200028e0:	689b      	ldr	r3, [r3, #8]
200028e2:	2b05      	cmp	r3, #5
200028e4:	d10c      	bne.n	20002900 <HAL_RCC_OscConfig+0x30c>
200028e6:	4b5f      	ldr	r3, [pc, #380]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
200028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200028ea:	4a5e      	ldr	r2, [pc, #376]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
200028ec:	f043 0304 	orr.w	r3, r3, #4
200028f0:	6713      	str	r3, [r2, #112]	; 0x70
200028f2:	4b5c      	ldr	r3, [pc, #368]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
200028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200028f6:	4a5b      	ldr	r2, [pc, #364]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
200028f8:	f043 0301 	orr.w	r3, r3, #1
200028fc:	6713      	str	r3, [r2, #112]	; 0x70
200028fe:	e00b      	b.n	20002918 <HAL_RCC_OscConfig+0x324>
20002900:	4b58      	ldr	r3, [pc, #352]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
20002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20002904:	4a57      	ldr	r2, [pc, #348]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
20002906:	f023 0301 	bic.w	r3, r3, #1
2000290a:	6713      	str	r3, [r2, #112]	; 0x70
2000290c:	4b55      	ldr	r3, [pc, #340]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
2000290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20002910:	4a54      	ldr	r2, [pc, #336]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
20002912:	f023 0304 	bic.w	r3, r3, #4
20002916:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20002918:	687b      	ldr	r3, [r7, #4]
2000291a:	689b      	ldr	r3, [r3, #8]
2000291c:	2b00      	cmp	r3, #0
2000291e:	d015      	beq.n	2000294c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20002920:	f7ff fb9c 	bl	2000205c <HAL_GetTick>
20002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20002926:	e00a      	b.n	2000293e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20002928:	f7ff fb98 	bl	2000205c <HAL_GetTick>
2000292c:	4602      	mov	r2, r0
2000292e:	693b      	ldr	r3, [r7, #16]
20002930:	1ad3      	subs	r3, r2, r3
20002932:	f241 3288 	movw	r2, #5000	; 0x1388
20002936:	4293      	cmp	r3, r2
20002938:	d901      	bls.n	2000293e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
2000293a:	2303      	movs	r3, #3
2000293c:	e0cb      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000293e:	4b49      	ldr	r3, [pc, #292]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
20002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20002942:	f003 0302 	and.w	r3, r3, #2
20002946:	2b00      	cmp	r3, #0
20002948:	d0ee      	beq.n	20002928 <HAL_RCC_OscConfig+0x334>
2000294a:	e014      	b.n	20002976 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000294c:	f7ff fb86 	bl	2000205c <HAL_GetTick>
20002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20002952:	e00a      	b.n	2000296a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20002954:	f7ff fb82 	bl	2000205c <HAL_GetTick>
20002958:	4602      	mov	r2, r0
2000295a:	693b      	ldr	r3, [r7, #16]
2000295c:	1ad3      	subs	r3, r2, r3
2000295e:	f241 3288 	movw	r2, #5000	; 0x1388
20002962:	4293      	cmp	r3, r2
20002964:	d901      	bls.n	2000296a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
20002966:	2303      	movs	r3, #3
20002968:	e0b5      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000296a:	4b3e      	ldr	r3, [pc, #248]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
2000296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000296e:	f003 0302 	and.w	r3, r3, #2
20002972:	2b00      	cmp	r3, #0
20002974:	d1ee      	bne.n	20002954 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
20002976:	7dfb      	ldrb	r3, [r7, #23]
20002978:	2b01      	cmp	r3, #1
2000297a:	d105      	bne.n	20002988 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
2000297c:	4b39      	ldr	r3, [pc, #228]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
2000297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002980:	4a38      	ldr	r2, [pc, #224]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
20002982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20002986:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20002988:	687b      	ldr	r3, [r7, #4]
2000298a:	699b      	ldr	r3, [r3, #24]
2000298c:	2b00      	cmp	r3, #0
2000298e:	f000 80a1 	beq.w	20002ad4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20002992:	4b34      	ldr	r3, [pc, #208]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
20002994:	689b      	ldr	r3, [r3, #8]
20002996:	f003 030c 	and.w	r3, r3, #12
2000299a:	2b08      	cmp	r3, #8
2000299c:	d05c      	beq.n	20002a58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000299e:	687b      	ldr	r3, [r7, #4]
200029a0:	699b      	ldr	r3, [r3, #24]
200029a2:	2b02      	cmp	r3, #2
200029a4:	d141      	bne.n	20002a2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
200029a6:	4b31      	ldr	r3, [pc, #196]	; (20002a6c <HAL_RCC_OscConfig+0x478>)
200029a8:	2200      	movs	r2, #0
200029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200029ac:	f7ff fb56 	bl	2000205c <HAL_GetTick>
200029b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200029b2:	e008      	b.n	200029c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200029b4:	f7ff fb52 	bl	2000205c <HAL_GetTick>
200029b8:	4602      	mov	r2, r0
200029ba:	693b      	ldr	r3, [r7, #16]
200029bc:	1ad3      	subs	r3, r2, r3
200029be:	2b02      	cmp	r3, #2
200029c0:	d901      	bls.n	200029c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
200029c2:	2303      	movs	r3, #3
200029c4:	e087      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200029c6:	4b27      	ldr	r3, [pc, #156]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
200029c8:	681b      	ldr	r3, [r3, #0]
200029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200029ce:	2b00      	cmp	r3, #0
200029d0:	d1f0      	bne.n	200029b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
200029d2:	687b      	ldr	r3, [r7, #4]
200029d4:	69da      	ldr	r2, [r3, #28]
200029d6:	687b      	ldr	r3, [r7, #4]
200029d8:	6a1b      	ldr	r3, [r3, #32]
200029da:	431a      	orrs	r2, r3
200029dc:	687b      	ldr	r3, [r7, #4]
200029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200029e0:	019b      	lsls	r3, r3, #6
200029e2:	431a      	orrs	r2, r3
200029e4:	687b      	ldr	r3, [r7, #4]
200029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200029e8:	085b      	lsrs	r3, r3, #1
200029ea:	3b01      	subs	r3, #1
200029ec:	041b      	lsls	r3, r3, #16
200029ee:	431a      	orrs	r2, r3
200029f0:	687b      	ldr	r3, [r7, #4]
200029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200029f4:	061b      	lsls	r3, r3, #24
200029f6:	491b      	ldr	r1, [pc, #108]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
200029f8:	4313      	orrs	r3, r2
200029fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
200029fc:	4b1b      	ldr	r3, [pc, #108]	; (20002a6c <HAL_RCC_OscConfig+0x478>)
200029fe:	2201      	movs	r2, #1
20002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20002a02:	f7ff fb2b 	bl	2000205c <HAL_GetTick>
20002a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20002a08:	e008      	b.n	20002a1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20002a0a:	f7ff fb27 	bl	2000205c <HAL_GetTick>
20002a0e:	4602      	mov	r2, r0
20002a10:	693b      	ldr	r3, [r7, #16]
20002a12:	1ad3      	subs	r3, r2, r3
20002a14:	2b02      	cmp	r3, #2
20002a16:	d901      	bls.n	20002a1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
20002a18:	2303      	movs	r3, #3
20002a1a:	e05c      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20002a1c:	4b11      	ldr	r3, [pc, #68]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
20002a1e:	681b      	ldr	r3, [r3, #0]
20002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20002a24:	2b00      	cmp	r3, #0
20002a26:	d0f0      	beq.n	20002a0a <HAL_RCC_OscConfig+0x416>
20002a28:	e054      	b.n	20002ad4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20002a2a:	4b10      	ldr	r3, [pc, #64]	; (20002a6c <HAL_RCC_OscConfig+0x478>)
20002a2c:	2200      	movs	r2, #0
20002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20002a30:	f7ff fb14 	bl	2000205c <HAL_GetTick>
20002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20002a36:	e008      	b.n	20002a4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20002a38:	f7ff fb10 	bl	2000205c <HAL_GetTick>
20002a3c:	4602      	mov	r2, r0
20002a3e:	693b      	ldr	r3, [r7, #16]
20002a40:	1ad3      	subs	r3, r2, r3
20002a42:	2b02      	cmp	r3, #2
20002a44:	d901      	bls.n	20002a4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
20002a46:	2303      	movs	r3, #3
20002a48:	e045      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20002a4a:	4b06      	ldr	r3, [pc, #24]	; (20002a64 <HAL_RCC_OscConfig+0x470>)
20002a4c:	681b      	ldr	r3, [r3, #0]
20002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20002a52:	2b00      	cmp	r3, #0
20002a54:	d1f0      	bne.n	20002a38 <HAL_RCC_OscConfig+0x444>
20002a56:	e03d      	b.n	20002ad4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
20002a58:	687b      	ldr	r3, [r7, #4]
20002a5a:	699b      	ldr	r3, [r3, #24]
20002a5c:	2b01      	cmp	r3, #1
20002a5e:	d107      	bne.n	20002a70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
20002a60:	2301      	movs	r3, #1
20002a62:	e038      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
20002a64:	40023800 	.word	0x40023800
20002a68:	40007000 	.word	0x40007000
20002a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
20002a70:	4b1b      	ldr	r3, [pc, #108]	; (20002ae0 <HAL_RCC_OscConfig+0x4ec>)
20002a72:	685b      	ldr	r3, [r3, #4]
20002a74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20002a76:	687b      	ldr	r3, [r7, #4]
20002a78:	699b      	ldr	r3, [r3, #24]
20002a7a:	2b01      	cmp	r3, #1
20002a7c:	d028      	beq.n	20002ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20002a7e:	68fb      	ldr	r3, [r7, #12]
20002a80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
20002a84:	687b      	ldr	r3, [r7, #4]
20002a86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20002a88:	429a      	cmp	r2, r3
20002a8a:	d121      	bne.n	20002ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20002a8c:	68fb      	ldr	r3, [r7, #12]
20002a8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
20002a92:	687b      	ldr	r3, [r7, #4]
20002a94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20002a96:	429a      	cmp	r2, r3
20002a98:	d11a      	bne.n	20002ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20002a9a:	68fa      	ldr	r2, [r7, #12]
20002a9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
20002aa0:	4013      	ands	r3, r2
20002aa2:	687a      	ldr	r2, [r7, #4]
20002aa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
20002aa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20002aa8:	4293      	cmp	r3, r2
20002aaa:	d111      	bne.n	20002ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20002aac:	68fb      	ldr	r3, [r7, #12]
20002aae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
20002ab2:	687b      	ldr	r3, [r7, #4]
20002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002ab6:	085b      	lsrs	r3, r3, #1
20002ab8:	3b01      	subs	r3, #1
20002aba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20002abc:	429a      	cmp	r2, r3
20002abe:	d107      	bne.n	20002ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
20002ac0:	68fb      	ldr	r3, [r7, #12]
20002ac2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
20002ac6:	687b      	ldr	r3, [r7, #4]
20002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002aca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20002acc:	429a      	cmp	r2, r3
20002ace:	d001      	beq.n	20002ad4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
20002ad0:	2301      	movs	r3, #1
20002ad2:	e000      	b.n	20002ad6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
20002ad4:	2300      	movs	r3, #0
}
20002ad6:	4618      	mov	r0, r3
20002ad8:	3718      	adds	r7, #24
20002ada:	46bd      	mov	sp, r7
20002adc:	bd80      	pop	{r7, pc}
20002ade:	bf00      	nop
20002ae0:	40023800 	.word	0x40023800

20002ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20002ae4:	b580      	push	{r7, lr}
20002ae6:	b084      	sub	sp, #16
20002ae8:	af00      	add	r7, sp, #0
20002aea:	6078      	str	r0, [r7, #4]
20002aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
20002aee:	687b      	ldr	r3, [r7, #4]
20002af0:	2b00      	cmp	r3, #0
20002af2:	d101      	bne.n	20002af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
20002af4:	2301      	movs	r3, #1
20002af6:	e0cc      	b.n	20002c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
20002af8:	4b68      	ldr	r3, [pc, #416]	; (20002c9c <HAL_RCC_ClockConfig+0x1b8>)
20002afa:	681b      	ldr	r3, [r3, #0]
20002afc:	f003 0307 	and.w	r3, r3, #7
20002b00:	683a      	ldr	r2, [r7, #0]
20002b02:	429a      	cmp	r2, r3
20002b04:	d90c      	bls.n	20002b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20002b06:	4b65      	ldr	r3, [pc, #404]	; (20002c9c <HAL_RCC_ClockConfig+0x1b8>)
20002b08:	683a      	ldr	r2, [r7, #0]
20002b0a:	b2d2      	uxtb	r2, r2
20002b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20002b0e:	4b63      	ldr	r3, [pc, #396]	; (20002c9c <HAL_RCC_ClockConfig+0x1b8>)
20002b10:	681b      	ldr	r3, [r3, #0]
20002b12:	f003 0307 	and.w	r3, r3, #7
20002b16:	683a      	ldr	r2, [r7, #0]
20002b18:	429a      	cmp	r2, r3
20002b1a:	d001      	beq.n	20002b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
20002b1c:	2301      	movs	r3, #1
20002b1e:	e0b8      	b.n	20002c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20002b20:	687b      	ldr	r3, [r7, #4]
20002b22:	681b      	ldr	r3, [r3, #0]
20002b24:	f003 0302 	and.w	r3, r3, #2
20002b28:	2b00      	cmp	r3, #0
20002b2a:	d020      	beq.n	20002b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20002b2c:	687b      	ldr	r3, [r7, #4]
20002b2e:	681b      	ldr	r3, [r3, #0]
20002b30:	f003 0304 	and.w	r3, r3, #4
20002b34:	2b00      	cmp	r3, #0
20002b36:	d005      	beq.n	20002b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20002b38:	4b59      	ldr	r3, [pc, #356]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002b3a:	689b      	ldr	r3, [r3, #8]
20002b3c:	4a58      	ldr	r2, [pc, #352]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002b3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
20002b42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20002b44:	687b      	ldr	r3, [r7, #4]
20002b46:	681b      	ldr	r3, [r3, #0]
20002b48:	f003 0308 	and.w	r3, r3, #8
20002b4c:	2b00      	cmp	r3, #0
20002b4e:	d005      	beq.n	20002b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20002b50:	4b53      	ldr	r3, [pc, #332]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002b52:	689b      	ldr	r3, [r3, #8]
20002b54:	4a52      	ldr	r2, [pc, #328]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002b56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
20002b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20002b5c:	4b50      	ldr	r3, [pc, #320]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002b5e:	689b      	ldr	r3, [r3, #8]
20002b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
20002b64:	687b      	ldr	r3, [r7, #4]
20002b66:	689b      	ldr	r3, [r3, #8]
20002b68:	494d      	ldr	r1, [pc, #308]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002b6a:	4313      	orrs	r3, r2
20002b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20002b6e:	687b      	ldr	r3, [r7, #4]
20002b70:	681b      	ldr	r3, [r3, #0]
20002b72:	f003 0301 	and.w	r3, r3, #1
20002b76:	2b00      	cmp	r3, #0
20002b78:	d044      	beq.n	20002c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20002b7a:	687b      	ldr	r3, [r7, #4]
20002b7c:	685b      	ldr	r3, [r3, #4]
20002b7e:	2b01      	cmp	r3, #1
20002b80:	d107      	bne.n	20002b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20002b82:	4b47      	ldr	r3, [pc, #284]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002b84:	681b      	ldr	r3, [r3, #0]
20002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20002b8a:	2b00      	cmp	r3, #0
20002b8c:	d119      	bne.n	20002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20002b8e:	2301      	movs	r3, #1
20002b90:	e07f      	b.n	20002c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20002b92:	687b      	ldr	r3, [r7, #4]
20002b94:	685b      	ldr	r3, [r3, #4]
20002b96:	2b02      	cmp	r3, #2
20002b98:	d003      	beq.n	20002ba2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
20002b9a:	687b      	ldr	r3, [r7, #4]
20002b9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20002b9e:	2b03      	cmp	r3, #3
20002ba0:	d107      	bne.n	20002bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20002ba2:	4b3f      	ldr	r3, [pc, #252]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002ba4:	681b      	ldr	r3, [r3, #0]
20002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20002baa:	2b00      	cmp	r3, #0
20002bac:	d109      	bne.n	20002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20002bae:	2301      	movs	r3, #1
20002bb0:	e06f      	b.n	20002c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20002bb2:	4b3b      	ldr	r3, [pc, #236]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002bb4:	681b      	ldr	r3, [r3, #0]
20002bb6:	f003 0302 	and.w	r3, r3, #2
20002bba:	2b00      	cmp	r3, #0
20002bbc:	d101      	bne.n	20002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20002bbe:	2301      	movs	r3, #1
20002bc0:	e067      	b.n	20002c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20002bc2:	4b37      	ldr	r3, [pc, #220]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002bc4:	689b      	ldr	r3, [r3, #8]
20002bc6:	f023 0203 	bic.w	r2, r3, #3
20002bca:	687b      	ldr	r3, [r7, #4]
20002bcc:	685b      	ldr	r3, [r3, #4]
20002bce:	4934      	ldr	r1, [pc, #208]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002bd0:	4313      	orrs	r3, r2
20002bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
20002bd4:	f7ff fa42 	bl	2000205c <HAL_GetTick>
20002bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20002bda:	e00a      	b.n	20002bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20002bdc:	f7ff fa3e 	bl	2000205c <HAL_GetTick>
20002be0:	4602      	mov	r2, r0
20002be2:	68fb      	ldr	r3, [r7, #12]
20002be4:	1ad3      	subs	r3, r2, r3
20002be6:	f241 3288 	movw	r2, #5000	; 0x1388
20002bea:	4293      	cmp	r3, r2
20002bec:	d901      	bls.n	20002bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
20002bee:	2303      	movs	r3, #3
20002bf0:	e04f      	b.n	20002c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20002bf2:	4b2b      	ldr	r3, [pc, #172]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002bf4:	689b      	ldr	r3, [r3, #8]
20002bf6:	f003 020c 	and.w	r2, r3, #12
20002bfa:	687b      	ldr	r3, [r7, #4]
20002bfc:	685b      	ldr	r3, [r3, #4]
20002bfe:	009b      	lsls	r3, r3, #2
20002c00:	429a      	cmp	r2, r3
20002c02:	d1eb      	bne.n	20002bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
20002c04:	4b25      	ldr	r3, [pc, #148]	; (20002c9c <HAL_RCC_ClockConfig+0x1b8>)
20002c06:	681b      	ldr	r3, [r3, #0]
20002c08:	f003 0307 	and.w	r3, r3, #7
20002c0c:	683a      	ldr	r2, [r7, #0]
20002c0e:	429a      	cmp	r2, r3
20002c10:	d20c      	bcs.n	20002c2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20002c12:	4b22      	ldr	r3, [pc, #136]	; (20002c9c <HAL_RCC_ClockConfig+0x1b8>)
20002c14:	683a      	ldr	r2, [r7, #0]
20002c16:	b2d2      	uxtb	r2, r2
20002c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20002c1a:	4b20      	ldr	r3, [pc, #128]	; (20002c9c <HAL_RCC_ClockConfig+0x1b8>)
20002c1c:	681b      	ldr	r3, [r3, #0]
20002c1e:	f003 0307 	and.w	r3, r3, #7
20002c22:	683a      	ldr	r2, [r7, #0]
20002c24:	429a      	cmp	r2, r3
20002c26:	d001      	beq.n	20002c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
20002c28:	2301      	movs	r3, #1
20002c2a:	e032      	b.n	20002c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20002c2c:	687b      	ldr	r3, [r7, #4]
20002c2e:	681b      	ldr	r3, [r3, #0]
20002c30:	f003 0304 	and.w	r3, r3, #4
20002c34:	2b00      	cmp	r3, #0
20002c36:	d008      	beq.n	20002c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20002c38:	4b19      	ldr	r3, [pc, #100]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002c3a:	689b      	ldr	r3, [r3, #8]
20002c3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
20002c40:	687b      	ldr	r3, [r7, #4]
20002c42:	68db      	ldr	r3, [r3, #12]
20002c44:	4916      	ldr	r1, [pc, #88]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002c46:	4313      	orrs	r3, r2
20002c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20002c4a:	687b      	ldr	r3, [r7, #4]
20002c4c:	681b      	ldr	r3, [r3, #0]
20002c4e:	f003 0308 	and.w	r3, r3, #8
20002c52:	2b00      	cmp	r3, #0
20002c54:	d009      	beq.n	20002c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20002c56:	4b12      	ldr	r3, [pc, #72]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002c58:	689b      	ldr	r3, [r3, #8]
20002c5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20002c5e:	687b      	ldr	r3, [r7, #4]
20002c60:	691b      	ldr	r3, [r3, #16]
20002c62:	00db      	lsls	r3, r3, #3
20002c64:	490e      	ldr	r1, [pc, #56]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002c66:	4313      	orrs	r3, r2
20002c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
20002c6a:	f000 f821 	bl	20002cb0 <HAL_RCC_GetSysClockFreq>
20002c6e:	4602      	mov	r2, r0
20002c70:	4b0b      	ldr	r3, [pc, #44]	; (20002ca0 <HAL_RCC_ClockConfig+0x1bc>)
20002c72:	689b      	ldr	r3, [r3, #8]
20002c74:	091b      	lsrs	r3, r3, #4
20002c76:	f003 030f 	and.w	r3, r3, #15
20002c7a:	490a      	ldr	r1, [pc, #40]	; (20002ca4 <HAL_RCC_ClockConfig+0x1c0>)
20002c7c:	5ccb      	ldrb	r3, [r1, r3]
20002c7e:	fa22 f303 	lsr.w	r3, r2, r3
20002c82:	4a09      	ldr	r2, [pc, #36]	; (20002ca8 <HAL_RCC_ClockConfig+0x1c4>)
20002c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
20002c86:	4b09      	ldr	r3, [pc, #36]	; (20002cac <HAL_RCC_ClockConfig+0x1c8>)
20002c88:	681b      	ldr	r3, [r3, #0]
20002c8a:	4618      	mov	r0, r3
20002c8c:	f7ff f9a2 	bl	20001fd4 <HAL_InitTick>

  return HAL_OK;
20002c90:	2300      	movs	r3, #0
}
20002c92:	4618      	mov	r0, r3
20002c94:	3710      	adds	r7, #16
20002c96:	46bd      	mov	sp, r7
20002c98:	bd80      	pop	{r7, pc}
20002c9a:	bf00      	nop
20002c9c:	40023c00 	.word	0x40023c00
20002ca0:	40023800 	.word	0x40023800
20002ca4:	20009504 	.word	0x20009504
20002ca8:	20009534 	.word	0x20009534
20002cac:	2000953c 	.word	0x2000953c

20002cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
20002cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20002cb4:	b090      	sub	sp, #64	; 0x40
20002cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
20002cb8:	2300      	movs	r3, #0
20002cba:	637b      	str	r3, [r7, #52]	; 0x34
20002cbc:	2300      	movs	r3, #0
20002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
20002cc0:	2300      	movs	r3, #0
20002cc2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
20002cc4:	2300      	movs	r3, #0
20002cc6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20002cc8:	4b59      	ldr	r3, [pc, #356]	; (20002e30 <HAL_RCC_GetSysClockFreq+0x180>)
20002cca:	689b      	ldr	r3, [r3, #8]
20002ccc:	f003 030c 	and.w	r3, r3, #12
20002cd0:	2b08      	cmp	r3, #8
20002cd2:	d00d      	beq.n	20002cf0 <HAL_RCC_GetSysClockFreq+0x40>
20002cd4:	2b08      	cmp	r3, #8
20002cd6:	f200 80a1 	bhi.w	20002e1c <HAL_RCC_GetSysClockFreq+0x16c>
20002cda:	2b00      	cmp	r3, #0
20002cdc:	d002      	beq.n	20002ce4 <HAL_RCC_GetSysClockFreq+0x34>
20002cde:	2b04      	cmp	r3, #4
20002ce0:	d003      	beq.n	20002cea <HAL_RCC_GetSysClockFreq+0x3a>
20002ce2:	e09b      	b.n	20002e1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20002ce4:	4b53      	ldr	r3, [pc, #332]	; (20002e34 <HAL_RCC_GetSysClockFreq+0x184>)
20002ce6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
20002ce8:	e09b      	b.n	20002e22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20002cea:	4b53      	ldr	r3, [pc, #332]	; (20002e38 <HAL_RCC_GetSysClockFreq+0x188>)
20002cec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
20002cee:	e098      	b.n	20002e22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20002cf0:	4b4f      	ldr	r3, [pc, #316]	; (20002e30 <HAL_RCC_GetSysClockFreq+0x180>)
20002cf2:	685b      	ldr	r3, [r3, #4]
20002cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20002cf8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20002cfa:	4b4d      	ldr	r3, [pc, #308]	; (20002e30 <HAL_RCC_GetSysClockFreq+0x180>)
20002cfc:	685b      	ldr	r3, [r3, #4]
20002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20002d02:	2b00      	cmp	r3, #0
20002d04:	d028      	beq.n	20002d58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20002d06:	4b4a      	ldr	r3, [pc, #296]	; (20002e30 <HAL_RCC_GetSysClockFreq+0x180>)
20002d08:	685b      	ldr	r3, [r3, #4]
20002d0a:	099b      	lsrs	r3, r3, #6
20002d0c:	2200      	movs	r2, #0
20002d0e:	623b      	str	r3, [r7, #32]
20002d10:	627a      	str	r2, [r7, #36]	; 0x24
20002d12:	6a3b      	ldr	r3, [r7, #32]
20002d14:	f3c3 0008 	ubfx	r0, r3, #0, #9
20002d18:	2100      	movs	r1, #0
20002d1a:	4b47      	ldr	r3, [pc, #284]	; (20002e38 <HAL_RCC_GetSysClockFreq+0x188>)
20002d1c:	fb03 f201 	mul.w	r2, r3, r1
20002d20:	2300      	movs	r3, #0
20002d22:	fb00 f303 	mul.w	r3, r0, r3
20002d26:	4413      	add	r3, r2
20002d28:	4a43      	ldr	r2, [pc, #268]	; (20002e38 <HAL_RCC_GetSysClockFreq+0x188>)
20002d2a:	fba0 1202 	umull	r1, r2, r0, r2
20002d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
20002d30:	460a      	mov	r2, r1
20002d32:	62ba      	str	r2, [r7, #40]	; 0x28
20002d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20002d36:	4413      	add	r3, r2
20002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
20002d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002d3c:	2200      	movs	r2, #0
20002d3e:	61bb      	str	r3, [r7, #24]
20002d40:	61fa      	str	r2, [r7, #28]
20002d42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20002d46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
20002d4a:	f7fd fa45 	bl	200001d8 <__aeabi_uldivmod>
20002d4e:	4602      	mov	r2, r0
20002d50:	460b      	mov	r3, r1
20002d52:	4613      	mov	r3, r2
20002d54:	63fb      	str	r3, [r7, #60]	; 0x3c
20002d56:	e053      	b.n	20002e00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20002d58:	4b35      	ldr	r3, [pc, #212]	; (20002e30 <HAL_RCC_GetSysClockFreq+0x180>)
20002d5a:	685b      	ldr	r3, [r3, #4]
20002d5c:	099b      	lsrs	r3, r3, #6
20002d5e:	2200      	movs	r2, #0
20002d60:	613b      	str	r3, [r7, #16]
20002d62:	617a      	str	r2, [r7, #20]
20002d64:	693b      	ldr	r3, [r7, #16]
20002d66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
20002d6a:	f04f 0b00 	mov.w	fp, #0
20002d6e:	4652      	mov	r2, sl
20002d70:	465b      	mov	r3, fp
20002d72:	f04f 0000 	mov.w	r0, #0
20002d76:	f04f 0100 	mov.w	r1, #0
20002d7a:	0159      	lsls	r1, r3, #5
20002d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20002d80:	0150      	lsls	r0, r2, #5
20002d82:	4602      	mov	r2, r0
20002d84:	460b      	mov	r3, r1
20002d86:	ebb2 080a 	subs.w	r8, r2, sl
20002d8a:	eb63 090b 	sbc.w	r9, r3, fp
20002d8e:	f04f 0200 	mov.w	r2, #0
20002d92:	f04f 0300 	mov.w	r3, #0
20002d96:	ea4f 1389 	mov.w	r3, r9, lsl #6
20002d9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
20002d9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
20002da2:	ebb2 0408 	subs.w	r4, r2, r8
20002da6:	eb63 0509 	sbc.w	r5, r3, r9
20002daa:	f04f 0200 	mov.w	r2, #0
20002dae:	f04f 0300 	mov.w	r3, #0
20002db2:	00eb      	lsls	r3, r5, #3
20002db4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20002db8:	00e2      	lsls	r2, r4, #3
20002dba:	4614      	mov	r4, r2
20002dbc:	461d      	mov	r5, r3
20002dbe:	eb14 030a 	adds.w	r3, r4, sl
20002dc2:	603b      	str	r3, [r7, #0]
20002dc4:	eb45 030b 	adc.w	r3, r5, fp
20002dc8:	607b      	str	r3, [r7, #4]
20002dca:	f04f 0200 	mov.w	r2, #0
20002dce:	f04f 0300 	mov.w	r3, #0
20002dd2:	e9d7 4500 	ldrd	r4, r5, [r7]
20002dd6:	4629      	mov	r1, r5
20002dd8:	028b      	lsls	r3, r1, #10
20002dda:	4621      	mov	r1, r4
20002ddc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20002de0:	4621      	mov	r1, r4
20002de2:	028a      	lsls	r2, r1, #10
20002de4:	4610      	mov	r0, r2
20002de6:	4619      	mov	r1, r3
20002de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002dea:	2200      	movs	r2, #0
20002dec:	60bb      	str	r3, [r7, #8]
20002dee:	60fa      	str	r2, [r7, #12]
20002df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
20002df4:	f7fd f9f0 	bl	200001d8 <__aeabi_uldivmod>
20002df8:	4602      	mov	r2, r0
20002dfa:	460b      	mov	r3, r1
20002dfc:	4613      	mov	r3, r2
20002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
20002e00:	4b0b      	ldr	r3, [pc, #44]	; (20002e30 <HAL_RCC_GetSysClockFreq+0x180>)
20002e02:	685b      	ldr	r3, [r3, #4]
20002e04:	0c1b      	lsrs	r3, r3, #16
20002e06:	f003 0303 	and.w	r3, r3, #3
20002e0a:	3301      	adds	r3, #1
20002e0c:	005b      	lsls	r3, r3, #1
20002e0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
20002e10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002e14:	fbb2 f3f3 	udiv	r3, r2, r3
20002e18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
20002e1a:	e002      	b.n	20002e22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20002e1c:	4b05      	ldr	r3, [pc, #20]	; (20002e34 <HAL_RCC_GetSysClockFreq+0x184>)
20002e1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
20002e20:	bf00      	nop
    }
  }
  return sysclockfreq;
20002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
20002e24:	4618      	mov	r0, r3
20002e26:	3740      	adds	r7, #64	; 0x40
20002e28:	46bd      	mov	sp, r7
20002e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20002e2e:	bf00      	nop
20002e30:	40023800 	.word	0x40023800
20002e34:	00f42400 	.word	0x00f42400
20002e38:	017d7840 	.word	0x017d7840

20002e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
20002e3c:	b580      	push	{r7, lr}
20002e3e:	b082      	sub	sp, #8
20002e40:	af00      	add	r7, sp, #0
20002e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
20002e44:	687b      	ldr	r3, [r7, #4]
20002e46:	2b00      	cmp	r3, #0
20002e48:	d101      	bne.n	20002e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
20002e4a:	2301      	movs	r3, #1
20002e4c:	e07b      	b.n	20002f46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
20002e4e:	687b      	ldr	r3, [r7, #4]
20002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002e52:	2b00      	cmp	r3, #0
20002e54:	d108      	bne.n	20002e68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
20002e56:	687b      	ldr	r3, [r7, #4]
20002e58:	685b      	ldr	r3, [r3, #4]
20002e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20002e5e:	d009      	beq.n	20002e74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20002e60:	687b      	ldr	r3, [r7, #4]
20002e62:	2200      	movs	r2, #0
20002e64:	61da      	str	r2, [r3, #28]
20002e66:	e005      	b.n	20002e74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
20002e68:	687b      	ldr	r3, [r7, #4]
20002e6a:	2200      	movs	r2, #0
20002e6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
20002e6e:	687b      	ldr	r3, [r7, #4]
20002e70:	2200      	movs	r2, #0
20002e72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20002e74:	687b      	ldr	r3, [r7, #4]
20002e76:	2200      	movs	r2, #0
20002e78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
20002e7a:	687b      	ldr	r3, [r7, #4]
20002e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20002e80:	b2db      	uxtb	r3, r3
20002e82:	2b00      	cmp	r3, #0
20002e84:	d106      	bne.n	20002e94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
20002e86:	687b      	ldr	r3, [r7, #4]
20002e88:	2200      	movs	r2, #0
20002e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
20002e8e:	6878      	ldr	r0, [r7, #4]
20002e90:	f7fe fe9c 	bl	20001bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
20002e94:	687b      	ldr	r3, [r7, #4]
20002e96:	2202      	movs	r2, #2
20002e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
20002e9c:	687b      	ldr	r3, [r7, #4]
20002e9e:	681b      	ldr	r3, [r3, #0]
20002ea0:	681a      	ldr	r2, [r3, #0]
20002ea2:	687b      	ldr	r3, [r7, #4]
20002ea4:	681b      	ldr	r3, [r3, #0]
20002ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20002eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
20002eac:	687b      	ldr	r3, [r7, #4]
20002eae:	685b      	ldr	r3, [r3, #4]
20002eb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
20002eb4:	687b      	ldr	r3, [r7, #4]
20002eb6:	689b      	ldr	r3, [r3, #8]
20002eb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
20002ebc:	431a      	orrs	r2, r3
20002ebe:	687b      	ldr	r3, [r7, #4]
20002ec0:	68db      	ldr	r3, [r3, #12]
20002ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
20002ec6:	431a      	orrs	r2, r3
20002ec8:	687b      	ldr	r3, [r7, #4]
20002eca:	691b      	ldr	r3, [r3, #16]
20002ecc:	f003 0302 	and.w	r3, r3, #2
20002ed0:	431a      	orrs	r2, r3
20002ed2:	687b      	ldr	r3, [r7, #4]
20002ed4:	695b      	ldr	r3, [r3, #20]
20002ed6:	f003 0301 	and.w	r3, r3, #1
20002eda:	431a      	orrs	r2, r3
20002edc:	687b      	ldr	r3, [r7, #4]
20002ede:	699b      	ldr	r3, [r3, #24]
20002ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
20002ee4:	431a      	orrs	r2, r3
20002ee6:	687b      	ldr	r3, [r7, #4]
20002ee8:	69db      	ldr	r3, [r3, #28]
20002eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
20002eee:	431a      	orrs	r2, r3
20002ef0:	687b      	ldr	r3, [r7, #4]
20002ef2:	6a1b      	ldr	r3, [r3, #32]
20002ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
20002ef8:	ea42 0103 	orr.w	r1, r2, r3
20002efc:	687b      	ldr	r3, [r7, #4]
20002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002f00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
20002f04:	687b      	ldr	r3, [r7, #4]
20002f06:	681b      	ldr	r3, [r3, #0]
20002f08:	430a      	orrs	r2, r1
20002f0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
20002f0c:	687b      	ldr	r3, [r7, #4]
20002f0e:	699b      	ldr	r3, [r3, #24]
20002f10:	0c1b      	lsrs	r3, r3, #16
20002f12:	f003 0104 	and.w	r1, r3, #4
20002f16:	687b      	ldr	r3, [r7, #4]
20002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002f1a:	f003 0210 	and.w	r2, r3, #16
20002f1e:	687b      	ldr	r3, [r7, #4]
20002f20:	681b      	ldr	r3, [r3, #0]
20002f22:	430a      	orrs	r2, r1
20002f24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
20002f26:	687b      	ldr	r3, [r7, #4]
20002f28:	681b      	ldr	r3, [r3, #0]
20002f2a:	69da      	ldr	r2, [r3, #28]
20002f2c:	687b      	ldr	r3, [r7, #4]
20002f2e:	681b      	ldr	r3, [r3, #0]
20002f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20002f34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20002f36:	687b      	ldr	r3, [r7, #4]
20002f38:	2200      	movs	r2, #0
20002f3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
20002f3c:	687b      	ldr	r3, [r7, #4]
20002f3e:	2201      	movs	r2, #1
20002f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
20002f44:	2300      	movs	r3, #0
}
20002f46:	4618      	mov	r0, r3
20002f48:	3708      	adds	r7, #8
20002f4a:	46bd      	mov	sp, r7
20002f4c:	bd80      	pop	{r7, pc}

20002f4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
20002f4e:	b580      	push	{r7, lr}
20002f50:	b088      	sub	sp, #32
20002f52:	af00      	add	r7, sp, #0
20002f54:	60f8      	str	r0, [r7, #12]
20002f56:	60b9      	str	r1, [r7, #8]
20002f58:	603b      	str	r3, [r7, #0]
20002f5a:	4613      	mov	r3, r2
20002f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
20002f5e:	2300      	movs	r3, #0
20002f60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
20002f62:	68fb      	ldr	r3, [r7, #12]
20002f64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20002f68:	2b01      	cmp	r3, #1
20002f6a:	d101      	bne.n	20002f70 <HAL_SPI_Transmit+0x22>
20002f6c:	2302      	movs	r3, #2
20002f6e:	e126      	b.n	200031be <HAL_SPI_Transmit+0x270>
20002f70:	68fb      	ldr	r3, [r7, #12]
20002f72:	2201      	movs	r2, #1
20002f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20002f78:	f7ff f870 	bl	2000205c <HAL_GetTick>
20002f7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
20002f7e:	88fb      	ldrh	r3, [r7, #6]
20002f80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
20002f82:	68fb      	ldr	r3, [r7, #12]
20002f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20002f88:	b2db      	uxtb	r3, r3
20002f8a:	2b01      	cmp	r3, #1
20002f8c:	d002      	beq.n	20002f94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
20002f8e:	2302      	movs	r3, #2
20002f90:	77fb      	strb	r3, [r7, #31]
    goto error;
20002f92:	e10b      	b.n	200031ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
20002f94:	68bb      	ldr	r3, [r7, #8]
20002f96:	2b00      	cmp	r3, #0
20002f98:	d002      	beq.n	20002fa0 <HAL_SPI_Transmit+0x52>
20002f9a:	88fb      	ldrh	r3, [r7, #6]
20002f9c:	2b00      	cmp	r3, #0
20002f9e:	d102      	bne.n	20002fa6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
20002fa0:	2301      	movs	r3, #1
20002fa2:	77fb      	strb	r3, [r7, #31]
    goto error;
20002fa4:	e102      	b.n	200031ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
20002fa6:	68fb      	ldr	r3, [r7, #12]
20002fa8:	2203      	movs	r2, #3
20002faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20002fae:	68fb      	ldr	r3, [r7, #12]
20002fb0:	2200      	movs	r2, #0
20002fb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
20002fb4:	68fb      	ldr	r3, [r7, #12]
20002fb6:	68ba      	ldr	r2, [r7, #8]
20002fb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20002fba:	68fb      	ldr	r3, [r7, #12]
20002fbc:	88fa      	ldrh	r2, [r7, #6]
20002fbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20002fc0:	68fb      	ldr	r3, [r7, #12]
20002fc2:	88fa      	ldrh	r2, [r7, #6]
20002fc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
20002fc6:	68fb      	ldr	r3, [r7, #12]
20002fc8:	2200      	movs	r2, #0
20002fca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
20002fcc:	68fb      	ldr	r3, [r7, #12]
20002fce:	2200      	movs	r2, #0
20002fd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
20002fd2:	68fb      	ldr	r3, [r7, #12]
20002fd4:	2200      	movs	r2, #0
20002fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
20002fd8:	68fb      	ldr	r3, [r7, #12]
20002fda:	2200      	movs	r2, #0
20002fdc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
20002fde:	68fb      	ldr	r3, [r7, #12]
20002fe0:	2200      	movs	r2, #0
20002fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20002fe4:	68fb      	ldr	r3, [r7, #12]
20002fe6:	689b      	ldr	r3, [r3, #8]
20002fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20002fec:	d10f      	bne.n	2000300e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20002fee:	68fb      	ldr	r3, [r7, #12]
20002ff0:	681b      	ldr	r3, [r3, #0]
20002ff2:	681a      	ldr	r2, [r3, #0]
20002ff4:	68fb      	ldr	r3, [r7, #12]
20002ff6:	681b      	ldr	r3, [r3, #0]
20002ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20002ffc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
20002ffe:	68fb      	ldr	r3, [r7, #12]
20003000:	681b      	ldr	r3, [r3, #0]
20003002:	681a      	ldr	r2, [r3, #0]
20003004:	68fb      	ldr	r3, [r7, #12]
20003006:	681b      	ldr	r3, [r3, #0]
20003008:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2000300c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000300e:	68fb      	ldr	r3, [r7, #12]
20003010:	681b      	ldr	r3, [r3, #0]
20003012:	681b      	ldr	r3, [r3, #0]
20003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
20003018:	2b40      	cmp	r3, #64	; 0x40
2000301a:	d007      	beq.n	2000302c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
2000301c:	68fb      	ldr	r3, [r7, #12]
2000301e:	681b      	ldr	r3, [r3, #0]
20003020:	681a      	ldr	r2, [r3, #0]
20003022:	68fb      	ldr	r3, [r7, #12]
20003024:	681b      	ldr	r3, [r3, #0]
20003026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2000302a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
2000302c:	68fb      	ldr	r3, [r7, #12]
2000302e:	68db      	ldr	r3, [r3, #12]
20003030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20003034:	d14b      	bne.n	200030ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20003036:	68fb      	ldr	r3, [r7, #12]
20003038:	685b      	ldr	r3, [r3, #4]
2000303a:	2b00      	cmp	r3, #0
2000303c:	d002      	beq.n	20003044 <HAL_SPI_Transmit+0xf6>
2000303e:	8afb      	ldrh	r3, [r7, #22]
20003040:	2b01      	cmp	r3, #1
20003042:	d13e      	bne.n	200030c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20003044:	68fb      	ldr	r3, [r7, #12]
20003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003048:	881a      	ldrh	r2, [r3, #0]
2000304a:	68fb      	ldr	r3, [r7, #12]
2000304c:	681b      	ldr	r3, [r3, #0]
2000304e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
20003050:	68fb      	ldr	r3, [r7, #12]
20003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003054:	1c9a      	adds	r2, r3, #2
20003056:	68fb      	ldr	r3, [r7, #12]
20003058:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
2000305a:	68fb      	ldr	r3, [r7, #12]
2000305c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000305e:	b29b      	uxth	r3, r3
20003060:	3b01      	subs	r3, #1
20003062:	b29a      	uxth	r2, r3
20003064:	68fb      	ldr	r3, [r7, #12]
20003066:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
20003068:	e02b      	b.n	200030c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
2000306a:	68fb      	ldr	r3, [r7, #12]
2000306c:	681b      	ldr	r3, [r3, #0]
2000306e:	689b      	ldr	r3, [r3, #8]
20003070:	f003 0302 	and.w	r3, r3, #2
20003074:	2b02      	cmp	r3, #2
20003076:	d112      	bne.n	2000309e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20003078:	68fb      	ldr	r3, [r7, #12]
2000307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000307c:	881a      	ldrh	r2, [r3, #0]
2000307e:	68fb      	ldr	r3, [r7, #12]
20003080:	681b      	ldr	r3, [r3, #0]
20003082:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20003084:	68fb      	ldr	r3, [r7, #12]
20003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003088:	1c9a      	adds	r2, r3, #2
2000308a:	68fb      	ldr	r3, [r7, #12]
2000308c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
2000308e:	68fb      	ldr	r3, [r7, #12]
20003090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20003092:	b29b      	uxth	r3, r3
20003094:	3b01      	subs	r3, #1
20003096:	b29a      	uxth	r2, r3
20003098:	68fb      	ldr	r3, [r7, #12]
2000309a:	86da      	strh	r2, [r3, #54]	; 0x36
2000309c:	e011      	b.n	200030c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2000309e:	f7fe ffdd 	bl	2000205c <HAL_GetTick>
200030a2:	4602      	mov	r2, r0
200030a4:	69bb      	ldr	r3, [r7, #24]
200030a6:	1ad3      	subs	r3, r2, r3
200030a8:	683a      	ldr	r2, [r7, #0]
200030aa:	429a      	cmp	r2, r3
200030ac:	d803      	bhi.n	200030b6 <HAL_SPI_Transmit+0x168>
200030ae:	683b      	ldr	r3, [r7, #0]
200030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
200030b4:	d102      	bne.n	200030bc <HAL_SPI_Transmit+0x16e>
200030b6:	683b      	ldr	r3, [r7, #0]
200030b8:	2b00      	cmp	r3, #0
200030ba:	d102      	bne.n	200030c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
200030bc:	2303      	movs	r3, #3
200030be:	77fb      	strb	r3, [r7, #31]
          goto error;
200030c0:	e074      	b.n	200031ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
200030c2:	68fb      	ldr	r3, [r7, #12]
200030c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200030c6:	b29b      	uxth	r3, r3
200030c8:	2b00      	cmp	r3, #0
200030ca:	d1ce      	bne.n	2000306a <HAL_SPI_Transmit+0x11c>
200030cc:	e04c      	b.n	20003168 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200030ce:	68fb      	ldr	r3, [r7, #12]
200030d0:	685b      	ldr	r3, [r3, #4]
200030d2:	2b00      	cmp	r3, #0
200030d4:	d002      	beq.n	200030dc <HAL_SPI_Transmit+0x18e>
200030d6:	8afb      	ldrh	r3, [r7, #22]
200030d8:	2b01      	cmp	r3, #1
200030da:	d140      	bne.n	2000315e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
200030dc:	68fb      	ldr	r3, [r7, #12]
200030de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200030e0:	68fb      	ldr	r3, [r7, #12]
200030e2:	681b      	ldr	r3, [r3, #0]
200030e4:	330c      	adds	r3, #12
200030e6:	7812      	ldrb	r2, [r2, #0]
200030e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
200030ea:	68fb      	ldr	r3, [r7, #12]
200030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200030ee:	1c5a      	adds	r2, r3, #1
200030f0:	68fb      	ldr	r3, [r7, #12]
200030f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
200030f4:	68fb      	ldr	r3, [r7, #12]
200030f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200030f8:	b29b      	uxth	r3, r3
200030fa:	3b01      	subs	r3, #1
200030fc:	b29a      	uxth	r2, r3
200030fe:	68fb      	ldr	r3, [r7, #12]
20003100:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
20003102:	e02c      	b.n	2000315e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
20003104:	68fb      	ldr	r3, [r7, #12]
20003106:	681b      	ldr	r3, [r3, #0]
20003108:	689b      	ldr	r3, [r3, #8]
2000310a:	f003 0302 	and.w	r3, r3, #2
2000310e:	2b02      	cmp	r3, #2
20003110:	d113      	bne.n	2000313a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
20003112:	68fb      	ldr	r3, [r7, #12]
20003114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20003116:	68fb      	ldr	r3, [r7, #12]
20003118:	681b      	ldr	r3, [r3, #0]
2000311a:	330c      	adds	r3, #12
2000311c:	7812      	ldrb	r2, [r2, #0]
2000311e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
20003120:	68fb      	ldr	r3, [r7, #12]
20003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003124:	1c5a      	adds	r2, r3, #1
20003126:	68fb      	ldr	r3, [r7, #12]
20003128:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
2000312a:	68fb      	ldr	r3, [r7, #12]
2000312c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000312e:	b29b      	uxth	r3, r3
20003130:	3b01      	subs	r3, #1
20003132:	b29a      	uxth	r2, r3
20003134:	68fb      	ldr	r3, [r7, #12]
20003136:	86da      	strh	r2, [r3, #54]	; 0x36
20003138:	e011      	b.n	2000315e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2000313a:	f7fe ff8f 	bl	2000205c <HAL_GetTick>
2000313e:	4602      	mov	r2, r0
20003140:	69bb      	ldr	r3, [r7, #24]
20003142:	1ad3      	subs	r3, r2, r3
20003144:	683a      	ldr	r2, [r7, #0]
20003146:	429a      	cmp	r2, r3
20003148:	d803      	bhi.n	20003152 <HAL_SPI_Transmit+0x204>
2000314a:	683b      	ldr	r3, [r7, #0]
2000314c:	f1b3 3fff 	cmp.w	r3, #4294967295
20003150:	d102      	bne.n	20003158 <HAL_SPI_Transmit+0x20a>
20003152:	683b      	ldr	r3, [r7, #0]
20003154:	2b00      	cmp	r3, #0
20003156:	d102      	bne.n	2000315e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
20003158:	2303      	movs	r3, #3
2000315a:	77fb      	strb	r3, [r7, #31]
          goto error;
2000315c:	e026      	b.n	200031ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
2000315e:	68fb      	ldr	r3, [r7, #12]
20003160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20003162:	b29b      	uxth	r3, r3
20003164:	2b00      	cmp	r3, #0
20003166:	d1cd      	bne.n	20003104 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20003168:	69ba      	ldr	r2, [r7, #24]
2000316a:	6839      	ldr	r1, [r7, #0]
2000316c:	68f8      	ldr	r0, [r7, #12]
2000316e:	f000 fa55 	bl	2000361c <SPI_EndRxTxTransaction>
20003172:	4603      	mov	r3, r0
20003174:	2b00      	cmp	r3, #0
20003176:	d002      	beq.n	2000317e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20003178:	68fb      	ldr	r3, [r7, #12]
2000317a:	2220      	movs	r2, #32
2000317c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
2000317e:	68fb      	ldr	r3, [r7, #12]
20003180:	689b      	ldr	r3, [r3, #8]
20003182:	2b00      	cmp	r3, #0
20003184:	d10a      	bne.n	2000319c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20003186:	2300      	movs	r3, #0
20003188:	613b      	str	r3, [r7, #16]
2000318a:	68fb      	ldr	r3, [r7, #12]
2000318c:	681b      	ldr	r3, [r3, #0]
2000318e:	68db      	ldr	r3, [r3, #12]
20003190:	613b      	str	r3, [r7, #16]
20003192:	68fb      	ldr	r3, [r7, #12]
20003194:	681b      	ldr	r3, [r3, #0]
20003196:	689b      	ldr	r3, [r3, #8]
20003198:	613b      	str	r3, [r7, #16]
2000319a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2000319c:	68fb      	ldr	r3, [r7, #12]
2000319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200031a0:	2b00      	cmp	r3, #0
200031a2:	d002      	beq.n	200031aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
200031a4:	2301      	movs	r3, #1
200031a6:	77fb      	strb	r3, [r7, #31]
200031a8:	e000      	b.n	200031ac <HAL_SPI_Transmit+0x25e>
  }

error:
200031aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
200031ac:	68fb      	ldr	r3, [r7, #12]
200031ae:	2201      	movs	r2, #1
200031b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
200031b4:	68fb      	ldr	r3, [r7, #12]
200031b6:	2200      	movs	r2, #0
200031b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
200031bc:	7ffb      	ldrb	r3, [r7, #31]
}
200031be:	4618      	mov	r0, r3
200031c0:	3720      	adds	r7, #32
200031c2:	46bd      	mov	sp, r7
200031c4:	bd80      	pop	{r7, pc}

200031c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
200031c6:	b580      	push	{r7, lr}
200031c8:	b08c      	sub	sp, #48	; 0x30
200031ca:	af00      	add	r7, sp, #0
200031cc:	60f8      	str	r0, [r7, #12]
200031ce:	60b9      	str	r1, [r7, #8]
200031d0:	607a      	str	r2, [r7, #4]
200031d2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
200031d4:	2301      	movs	r3, #1
200031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
200031d8:	2300      	movs	r3, #0
200031da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
200031de:	68fb      	ldr	r3, [r7, #12]
200031e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200031e4:	2b01      	cmp	r3, #1
200031e6:	d101      	bne.n	200031ec <HAL_SPI_TransmitReceive+0x26>
200031e8:	2302      	movs	r3, #2
200031ea:	e18a      	b.n	20003502 <HAL_SPI_TransmitReceive+0x33c>
200031ec:	68fb      	ldr	r3, [r7, #12]
200031ee:	2201      	movs	r2, #1
200031f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
200031f4:	f7fe ff32 	bl	2000205c <HAL_GetTick>
200031f8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
200031fa:	68fb      	ldr	r3, [r7, #12]
200031fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20003200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
20003204:	68fb      	ldr	r3, [r7, #12]
20003206:	685b      	ldr	r3, [r3, #4]
20003208:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
2000320a:	887b      	ldrh	r3, [r7, #2]
2000320c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
2000320e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
20003212:	2b01      	cmp	r3, #1
20003214:	d00f      	beq.n	20003236 <HAL_SPI_TransmitReceive+0x70>
20003216:	69fb      	ldr	r3, [r7, #28]
20003218:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000321c:	d107      	bne.n	2000322e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
2000321e:	68fb      	ldr	r3, [r7, #12]
20003220:	689b      	ldr	r3, [r3, #8]
20003222:	2b00      	cmp	r3, #0
20003224:	d103      	bne.n	2000322e <HAL_SPI_TransmitReceive+0x68>
20003226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
2000322a:	2b04      	cmp	r3, #4
2000322c:	d003      	beq.n	20003236 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
2000322e:	2302      	movs	r3, #2
20003230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
20003234:	e15b      	b.n	200034ee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
20003236:	68bb      	ldr	r3, [r7, #8]
20003238:	2b00      	cmp	r3, #0
2000323a:	d005      	beq.n	20003248 <HAL_SPI_TransmitReceive+0x82>
2000323c:	687b      	ldr	r3, [r7, #4]
2000323e:	2b00      	cmp	r3, #0
20003240:	d002      	beq.n	20003248 <HAL_SPI_TransmitReceive+0x82>
20003242:	887b      	ldrh	r3, [r7, #2]
20003244:	2b00      	cmp	r3, #0
20003246:	d103      	bne.n	20003250 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
20003248:	2301      	movs	r3, #1
2000324a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
2000324e:	e14e      	b.n	200034ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20003250:	68fb      	ldr	r3, [r7, #12]
20003252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20003256:	b2db      	uxtb	r3, r3
20003258:	2b04      	cmp	r3, #4
2000325a:	d003      	beq.n	20003264 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
2000325c:	68fb      	ldr	r3, [r7, #12]
2000325e:	2205      	movs	r2, #5
20003260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20003264:	68fb      	ldr	r3, [r7, #12]
20003266:	2200      	movs	r2, #0
20003268:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2000326a:	68fb      	ldr	r3, [r7, #12]
2000326c:	687a      	ldr	r2, [r7, #4]
2000326e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
20003270:	68fb      	ldr	r3, [r7, #12]
20003272:	887a      	ldrh	r2, [r7, #2]
20003274:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
20003276:	68fb      	ldr	r3, [r7, #12]
20003278:	887a      	ldrh	r2, [r7, #2]
2000327a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
2000327c:	68fb      	ldr	r3, [r7, #12]
2000327e:	68ba      	ldr	r2, [r7, #8]
20003280:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
20003282:	68fb      	ldr	r3, [r7, #12]
20003284:	887a      	ldrh	r2, [r7, #2]
20003286:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
20003288:	68fb      	ldr	r3, [r7, #12]
2000328a:	887a      	ldrh	r2, [r7, #2]
2000328c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
2000328e:	68fb      	ldr	r3, [r7, #12]
20003290:	2200      	movs	r2, #0
20003292:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20003294:	68fb      	ldr	r3, [r7, #12]
20003296:	2200      	movs	r2, #0
20003298:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000329a:	68fb      	ldr	r3, [r7, #12]
2000329c:	681b      	ldr	r3, [r3, #0]
2000329e:	681b      	ldr	r3, [r3, #0]
200032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200032a4:	2b40      	cmp	r3, #64	; 0x40
200032a6:	d007      	beq.n	200032b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
200032a8:	68fb      	ldr	r3, [r7, #12]
200032aa:	681b      	ldr	r3, [r3, #0]
200032ac:	681a      	ldr	r2, [r3, #0]
200032ae:	68fb      	ldr	r3, [r7, #12]
200032b0:	681b      	ldr	r3, [r3, #0]
200032b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
200032b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
200032b8:	68fb      	ldr	r3, [r7, #12]
200032ba:	68db      	ldr	r3, [r3, #12]
200032bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
200032c0:	d178      	bne.n	200033b4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200032c2:	68fb      	ldr	r3, [r7, #12]
200032c4:	685b      	ldr	r3, [r3, #4]
200032c6:	2b00      	cmp	r3, #0
200032c8:	d002      	beq.n	200032d0 <HAL_SPI_TransmitReceive+0x10a>
200032ca:	8b7b      	ldrh	r3, [r7, #26]
200032cc:	2b01      	cmp	r3, #1
200032ce:	d166      	bne.n	2000339e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
200032d0:	68fb      	ldr	r3, [r7, #12]
200032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200032d4:	881a      	ldrh	r2, [r3, #0]
200032d6:	68fb      	ldr	r3, [r7, #12]
200032d8:	681b      	ldr	r3, [r3, #0]
200032da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
200032dc:	68fb      	ldr	r3, [r7, #12]
200032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200032e0:	1c9a      	adds	r2, r3, #2
200032e2:	68fb      	ldr	r3, [r7, #12]
200032e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
200032e6:	68fb      	ldr	r3, [r7, #12]
200032e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200032ea:	b29b      	uxth	r3, r3
200032ec:	3b01      	subs	r3, #1
200032ee:	b29a      	uxth	r2, r3
200032f0:	68fb      	ldr	r3, [r7, #12]
200032f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
200032f4:	e053      	b.n	2000339e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
200032f6:	68fb      	ldr	r3, [r7, #12]
200032f8:	681b      	ldr	r3, [r3, #0]
200032fa:	689b      	ldr	r3, [r3, #8]
200032fc:	f003 0302 	and.w	r3, r3, #2
20003300:	2b02      	cmp	r3, #2
20003302:	d11b      	bne.n	2000333c <HAL_SPI_TransmitReceive+0x176>
20003304:	68fb      	ldr	r3, [r7, #12]
20003306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20003308:	b29b      	uxth	r3, r3
2000330a:	2b00      	cmp	r3, #0
2000330c:	d016      	beq.n	2000333c <HAL_SPI_TransmitReceive+0x176>
2000330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20003310:	2b01      	cmp	r3, #1
20003312:	d113      	bne.n	2000333c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20003314:	68fb      	ldr	r3, [r7, #12]
20003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003318:	881a      	ldrh	r2, [r3, #0]
2000331a:	68fb      	ldr	r3, [r7, #12]
2000331c:	681b      	ldr	r3, [r3, #0]
2000331e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20003320:	68fb      	ldr	r3, [r7, #12]
20003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003324:	1c9a      	adds	r2, r3, #2
20003326:	68fb      	ldr	r3, [r7, #12]
20003328:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
2000332a:	68fb      	ldr	r3, [r7, #12]
2000332c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000332e:	b29b      	uxth	r3, r3
20003330:	3b01      	subs	r3, #1
20003332:	b29a      	uxth	r2, r3
20003334:	68fb      	ldr	r3, [r7, #12]
20003336:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
20003338:	2300      	movs	r3, #0
2000333a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
2000333c:	68fb      	ldr	r3, [r7, #12]
2000333e:	681b      	ldr	r3, [r3, #0]
20003340:	689b      	ldr	r3, [r3, #8]
20003342:	f003 0301 	and.w	r3, r3, #1
20003346:	2b01      	cmp	r3, #1
20003348:	d119      	bne.n	2000337e <HAL_SPI_TransmitReceive+0x1b8>
2000334a:	68fb      	ldr	r3, [r7, #12]
2000334c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000334e:	b29b      	uxth	r3, r3
20003350:	2b00      	cmp	r3, #0
20003352:	d014      	beq.n	2000337e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20003354:	68fb      	ldr	r3, [r7, #12]
20003356:	681b      	ldr	r3, [r3, #0]
20003358:	68da      	ldr	r2, [r3, #12]
2000335a:	68fb      	ldr	r3, [r7, #12]
2000335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000335e:	b292      	uxth	r2, r2
20003360:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20003362:	68fb      	ldr	r3, [r7, #12]
20003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20003366:	1c9a      	adds	r2, r3, #2
20003368:	68fb      	ldr	r3, [r7, #12]
2000336a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
2000336c:	68fb      	ldr	r3, [r7, #12]
2000336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20003370:	b29b      	uxth	r3, r3
20003372:	3b01      	subs	r3, #1
20003374:	b29a      	uxth	r2, r3
20003376:	68fb      	ldr	r3, [r7, #12]
20003378:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
2000337a:	2301      	movs	r3, #1
2000337c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
2000337e:	f7fe fe6d 	bl	2000205c <HAL_GetTick>
20003382:	4602      	mov	r2, r0
20003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003386:	1ad3      	subs	r3, r2, r3
20003388:	6bba      	ldr	r2, [r7, #56]	; 0x38
2000338a:	429a      	cmp	r2, r3
2000338c:	d807      	bhi.n	2000339e <HAL_SPI_TransmitReceive+0x1d8>
2000338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20003390:	f1b3 3fff 	cmp.w	r3, #4294967295
20003394:	d003      	beq.n	2000339e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
20003396:	2303      	movs	r3, #3
20003398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
2000339c:	e0a7      	b.n	200034ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
2000339e:	68fb      	ldr	r3, [r7, #12]
200033a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200033a2:	b29b      	uxth	r3, r3
200033a4:	2b00      	cmp	r3, #0
200033a6:	d1a6      	bne.n	200032f6 <HAL_SPI_TransmitReceive+0x130>
200033a8:	68fb      	ldr	r3, [r7, #12]
200033aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200033ac:	b29b      	uxth	r3, r3
200033ae:	2b00      	cmp	r3, #0
200033b0:	d1a1      	bne.n	200032f6 <HAL_SPI_TransmitReceive+0x130>
200033b2:	e07c      	b.n	200034ae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200033b4:	68fb      	ldr	r3, [r7, #12]
200033b6:	685b      	ldr	r3, [r3, #4]
200033b8:	2b00      	cmp	r3, #0
200033ba:	d002      	beq.n	200033c2 <HAL_SPI_TransmitReceive+0x1fc>
200033bc:	8b7b      	ldrh	r3, [r7, #26]
200033be:	2b01      	cmp	r3, #1
200033c0:	d16b      	bne.n	2000349a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
200033c2:	68fb      	ldr	r3, [r7, #12]
200033c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200033c6:	68fb      	ldr	r3, [r7, #12]
200033c8:	681b      	ldr	r3, [r3, #0]
200033ca:	330c      	adds	r3, #12
200033cc:	7812      	ldrb	r2, [r2, #0]
200033ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
200033d0:	68fb      	ldr	r3, [r7, #12]
200033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200033d4:	1c5a      	adds	r2, r3, #1
200033d6:	68fb      	ldr	r3, [r7, #12]
200033d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
200033da:	68fb      	ldr	r3, [r7, #12]
200033dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200033de:	b29b      	uxth	r3, r3
200033e0:	3b01      	subs	r3, #1
200033e2:	b29a      	uxth	r2, r3
200033e4:	68fb      	ldr	r3, [r7, #12]
200033e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
200033e8:	e057      	b.n	2000349a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
200033ea:	68fb      	ldr	r3, [r7, #12]
200033ec:	681b      	ldr	r3, [r3, #0]
200033ee:	689b      	ldr	r3, [r3, #8]
200033f0:	f003 0302 	and.w	r3, r3, #2
200033f4:	2b02      	cmp	r3, #2
200033f6:	d11c      	bne.n	20003432 <HAL_SPI_TransmitReceive+0x26c>
200033f8:	68fb      	ldr	r3, [r7, #12]
200033fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200033fc:	b29b      	uxth	r3, r3
200033fe:	2b00      	cmp	r3, #0
20003400:	d017      	beq.n	20003432 <HAL_SPI_TransmitReceive+0x26c>
20003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20003404:	2b01      	cmp	r3, #1
20003406:	d114      	bne.n	20003432 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
20003408:	68fb      	ldr	r3, [r7, #12]
2000340a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000340c:	68fb      	ldr	r3, [r7, #12]
2000340e:	681b      	ldr	r3, [r3, #0]
20003410:	330c      	adds	r3, #12
20003412:	7812      	ldrb	r2, [r2, #0]
20003414:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
20003416:	68fb      	ldr	r3, [r7, #12]
20003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000341a:	1c5a      	adds	r2, r3, #1
2000341c:	68fb      	ldr	r3, [r7, #12]
2000341e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20003420:	68fb      	ldr	r3, [r7, #12]
20003422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20003424:	b29b      	uxth	r3, r3
20003426:	3b01      	subs	r3, #1
20003428:	b29a      	uxth	r2, r3
2000342a:	68fb      	ldr	r3, [r7, #12]
2000342c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
2000342e:	2300      	movs	r3, #0
20003430:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
20003432:	68fb      	ldr	r3, [r7, #12]
20003434:	681b      	ldr	r3, [r3, #0]
20003436:	689b      	ldr	r3, [r3, #8]
20003438:	f003 0301 	and.w	r3, r3, #1
2000343c:	2b01      	cmp	r3, #1
2000343e:	d119      	bne.n	20003474 <HAL_SPI_TransmitReceive+0x2ae>
20003440:	68fb      	ldr	r3, [r7, #12]
20003442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20003444:	b29b      	uxth	r3, r3
20003446:	2b00      	cmp	r3, #0
20003448:	d014      	beq.n	20003474 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
2000344a:	68fb      	ldr	r3, [r7, #12]
2000344c:	681b      	ldr	r3, [r3, #0]
2000344e:	68da      	ldr	r2, [r3, #12]
20003450:	68fb      	ldr	r3, [r7, #12]
20003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20003454:	b2d2      	uxtb	r2, r2
20003456:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
20003458:	68fb      	ldr	r3, [r7, #12]
2000345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000345c:	1c5a      	adds	r2, r3, #1
2000345e:	68fb      	ldr	r3, [r7, #12]
20003460:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20003462:	68fb      	ldr	r3, [r7, #12]
20003464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20003466:	b29b      	uxth	r3, r3
20003468:	3b01      	subs	r3, #1
2000346a:	b29a      	uxth	r2, r3
2000346c:	68fb      	ldr	r3, [r7, #12]
2000346e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20003470:	2301      	movs	r3, #1
20003472:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
20003474:	f7fe fdf2 	bl	2000205c <HAL_GetTick>
20003478:	4602      	mov	r2, r0
2000347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000347c:	1ad3      	subs	r3, r2, r3
2000347e:	6bba      	ldr	r2, [r7, #56]	; 0x38
20003480:	429a      	cmp	r2, r3
20003482:	d803      	bhi.n	2000348c <HAL_SPI_TransmitReceive+0x2c6>
20003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20003486:	f1b3 3fff 	cmp.w	r3, #4294967295
2000348a:	d102      	bne.n	20003492 <HAL_SPI_TransmitReceive+0x2cc>
2000348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000348e:	2b00      	cmp	r3, #0
20003490:	d103      	bne.n	2000349a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
20003492:	2303      	movs	r3, #3
20003494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
20003498:	e029      	b.n	200034ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
2000349a:	68fb      	ldr	r3, [r7, #12]
2000349c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000349e:	b29b      	uxth	r3, r3
200034a0:	2b00      	cmp	r3, #0
200034a2:	d1a2      	bne.n	200033ea <HAL_SPI_TransmitReceive+0x224>
200034a4:	68fb      	ldr	r3, [r7, #12]
200034a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200034a8:	b29b      	uxth	r3, r3
200034aa:	2b00      	cmp	r3, #0
200034ac:	d19d      	bne.n	200033ea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
200034ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200034b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
200034b2:	68f8      	ldr	r0, [r7, #12]
200034b4:	f000 f8b2 	bl	2000361c <SPI_EndRxTxTransaction>
200034b8:	4603      	mov	r3, r0
200034ba:	2b00      	cmp	r3, #0
200034bc:	d006      	beq.n	200034cc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
200034be:	2301      	movs	r3, #1
200034c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
200034c4:	68fb      	ldr	r3, [r7, #12]
200034c6:	2220      	movs	r2, #32
200034c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
200034ca:	e010      	b.n	200034ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
200034cc:	68fb      	ldr	r3, [r7, #12]
200034ce:	689b      	ldr	r3, [r3, #8]
200034d0:	2b00      	cmp	r3, #0
200034d2:	d10b      	bne.n	200034ec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
200034d4:	2300      	movs	r3, #0
200034d6:	617b      	str	r3, [r7, #20]
200034d8:	68fb      	ldr	r3, [r7, #12]
200034da:	681b      	ldr	r3, [r3, #0]
200034dc:	68db      	ldr	r3, [r3, #12]
200034de:	617b      	str	r3, [r7, #20]
200034e0:	68fb      	ldr	r3, [r7, #12]
200034e2:	681b      	ldr	r3, [r3, #0]
200034e4:	689b      	ldr	r3, [r3, #8]
200034e6:	617b      	str	r3, [r7, #20]
200034e8:	697b      	ldr	r3, [r7, #20]
200034ea:	e000      	b.n	200034ee <HAL_SPI_TransmitReceive+0x328>
  }

error :
200034ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
200034ee:	68fb      	ldr	r3, [r7, #12]
200034f0:	2201      	movs	r2, #1
200034f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
200034f6:	68fb      	ldr	r3, [r7, #12]
200034f8:	2200      	movs	r2, #0
200034fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
200034fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
20003502:	4618      	mov	r0, r3
20003504:	3730      	adds	r7, #48	; 0x30
20003506:	46bd      	mov	sp, r7
20003508:	bd80      	pop	{r7, pc}
	...

2000350c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
2000350c:	b580      	push	{r7, lr}
2000350e:	b088      	sub	sp, #32
20003510:	af00      	add	r7, sp, #0
20003512:	60f8      	str	r0, [r7, #12]
20003514:	60b9      	str	r1, [r7, #8]
20003516:	603b      	str	r3, [r7, #0]
20003518:	4613      	mov	r3, r2
2000351a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
2000351c:	f7fe fd9e 	bl	2000205c <HAL_GetTick>
20003520:	4602      	mov	r2, r0
20003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003524:	1a9b      	subs	r3, r3, r2
20003526:	683a      	ldr	r2, [r7, #0]
20003528:	4413      	add	r3, r2
2000352a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
2000352c:	f7fe fd96 	bl	2000205c <HAL_GetTick>
20003530:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
20003532:	4b39      	ldr	r3, [pc, #228]	; (20003618 <SPI_WaitFlagStateUntilTimeout+0x10c>)
20003534:	681b      	ldr	r3, [r3, #0]
20003536:	015b      	lsls	r3, r3, #5
20003538:	0d1b      	lsrs	r3, r3, #20
2000353a:	69fa      	ldr	r2, [r7, #28]
2000353c:	fb02 f303 	mul.w	r3, r2, r3
20003540:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
20003542:	e054      	b.n	200035ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
20003544:	683b      	ldr	r3, [r7, #0]
20003546:	f1b3 3fff 	cmp.w	r3, #4294967295
2000354a:	d050      	beq.n	200035ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
2000354c:	f7fe fd86 	bl	2000205c <HAL_GetTick>
20003550:	4602      	mov	r2, r0
20003552:	69bb      	ldr	r3, [r7, #24]
20003554:	1ad3      	subs	r3, r2, r3
20003556:	69fa      	ldr	r2, [r7, #28]
20003558:	429a      	cmp	r2, r3
2000355a:	d902      	bls.n	20003562 <SPI_WaitFlagStateUntilTimeout+0x56>
2000355c:	69fb      	ldr	r3, [r7, #28]
2000355e:	2b00      	cmp	r3, #0
20003560:	d13d      	bne.n	200035de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
20003562:	68fb      	ldr	r3, [r7, #12]
20003564:	681b      	ldr	r3, [r3, #0]
20003566:	685a      	ldr	r2, [r3, #4]
20003568:	68fb      	ldr	r3, [r7, #12]
2000356a:	681b      	ldr	r3, [r3, #0]
2000356c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
20003570:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
20003572:	68fb      	ldr	r3, [r7, #12]
20003574:	685b      	ldr	r3, [r3, #4]
20003576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000357a:	d111      	bne.n	200035a0 <SPI_WaitFlagStateUntilTimeout+0x94>
2000357c:	68fb      	ldr	r3, [r7, #12]
2000357e:	689b      	ldr	r3, [r3, #8]
20003580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20003584:	d004      	beq.n	20003590 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
20003586:	68fb      	ldr	r3, [r7, #12]
20003588:	689b      	ldr	r3, [r3, #8]
2000358a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2000358e:	d107      	bne.n	200035a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
20003590:	68fb      	ldr	r3, [r7, #12]
20003592:	681b      	ldr	r3, [r3, #0]
20003594:	681a      	ldr	r2, [r3, #0]
20003596:	68fb      	ldr	r3, [r7, #12]
20003598:	681b      	ldr	r3, [r3, #0]
2000359a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000359e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
200035a0:	68fb      	ldr	r3, [r7, #12]
200035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200035a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
200035a8:	d10f      	bne.n	200035ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
200035aa:	68fb      	ldr	r3, [r7, #12]
200035ac:	681b      	ldr	r3, [r3, #0]
200035ae:	681a      	ldr	r2, [r3, #0]
200035b0:	68fb      	ldr	r3, [r7, #12]
200035b2:	681b      	ldr	r3, [r3, #0]
200035b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
200035b8:	601a      	str	r2, [r3, #0]
200035ba:	68fb      	ldr	r3, [r7, #12]
200035bc:	681b      	ldr	r3, [r3, #0]
200035be:	681a      	ldr	r2, [r3, #0]
200035c0:	68fb      	ldr	r3, [r7, #12]
200035c2:	681b      	ldr	r3, [r3, #0]
200035c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
200035c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
200035ca:	68fb      	ldr	r3, [r7, #12]
200035cc:	2201      	movs	r2, #1
200035ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
200035d2:	68fb      	ldr	r3, [r7, #12]
200035d4:	2200      	movs	r2, #0
200035d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
200035da:	2303      	movs	r3, #3
200035dc:	e017      	b.n	2000360e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
200035de:	697b      	ldr	r3, [r7, #20]
200035e0:	2b00      	cmp	r3, #0
200035e2:	d101      	bne.n	200035e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
200035e4:	2300      	movs	r3, #0
200035e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
200035e8:	697b      	ldr	r3, [r7, #20]
200035ea:	3b01      	subs	r3, #1
200035ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
200035ee:	68fb      	ldr	r3, [r7, #12]
200035f0:	681b      	ldr	r3, [r3, #0]
200035f2:	689a      	ldr	r2, [r3, #8]
200035f4:	68bb      	ldr	r3, [r7, #8]
200035f6:	4013      	ands	r3, r2
200035f8:	68ba      	ldr	r2, [r7, #8]
200035fa:	429a      	cmp	r2, r3
200035fc:	bf0c      	ite	eq
200035fe:	2301      	moveq	r3, #1
20003600:	2300      	movne	r3, #0
20003602:	b2db      	uxtb	r3, r3
20003604:	461a      	mov	r2, r3
20003606:	79fb      	ldrb	r3, [r7, #7]
20003608:	429a      	cmp	r2, r3
2000360a:	d19b      	bne.n	20003544 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
2000360c:	2300      	movs	r3, #0
}
2000360e:	4618      	mov	r0, r3
20003610:	3720      	adds	r7, #32
20003612:	46bd      	mov	sp, r7
20003614:	bd80      	pop	{r7, pc}
20003616:	bf00      	nop
20003618:	20009534 	.word	0x20009534

2000361c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
2000361c:	b580      	push	{r7, lr}
2000361e:	b088      	sub	sp, #32
20003620:	af02      	add	r7, sp, #8
20003622:	60f8      	str	r0, [r7, #12]
20003624:	60b9      	str	r1, [r7, #8]
20003626:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
20003628:	4b1b      	ldr	r3, [pc, #108]	; (20003698 <SPI_EndRxTxTransaction+0x7c>)
2000362a:	681b      	ldr	r3, [r3, #0]
2000362c:	4a1b      	ldr	r2, [pc, #108]	; (2000369c <SPI_EndRxTxTransaction+0x80>)
2000362e:	fba2 2303 	umull	r2, r3, r2, r3
20003632:	0d5b      	lsrs	r3, r3, #21
20003634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
20003638:	fb02 f303 	mul.w	r3, r2, r3
2000363c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2000363e:	68fb      	ldr	r3, [r7, #12]
20003640:	685b      	ldr	r3, [r3, #4]
20003642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20003646:	d112      	bne.n	2000366e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
20003648:	687b      	ldr	r3, [r7, #4]
2000364a:	9300      	str	r3, [sp, #0]
2000364c:	68bb      	ldr	r3, [r7, #8]
2000364e:	2200      	movs	r2, #0
20003650:	2180      	movs	r1, #128	; 0x80
20003652:	68f8      	ldr	r0, [r7, #12]
20003654:	f7ff ff5a 	bl	2000350c <SPI_WaitFlagStateUntilTimeout>
20003658:	4603      	mov	r3, r0
2000365a:	2b00      	cmp	r3, #0
2000365c:	d016      	beq.n	2000368c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000365e:	68fb      	ldr	r3, [r7, #12]
20003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20003662:	f043 0220 	orr.w	r2, r3, #32
20003666:	68fb      	ldr	r3, [r7, #12]
20003668:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
2000366a:	2303      	movs	r3, #3
2000366c:	e00f      	b.n	2000368e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
2000366e:	697b      	ldr	r3, [r7, #20]
20003670:	2b00      	cmp	r3, #0
20003672:	d00a      	beq.n	2000368a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
20003674:	697b      	ldr	r3, [r7, #20]
20003676:	3b01      	subs	r3, #1
20003678:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
2000367a:	68fb      	ldr	r3, [r7, #12]
2000367c:	681b      	ldr	r3, [r3, #0]
2000367e:	689b      	ldr	r3, [r3, #8]
20003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
20003684:	2b80      	cmp	r3, #128	; 0x80
20003686:	d0f2      	beq.n	2000366e <SPI_EndRxTxTransaction+0x52>
20003688:	e000      	b.n	2000368c <SPI_EndRxTxTransaction+0x70>
        break;
2000368a:	bf00      	nop
  }

  return HAL_OK;
2000368c:	2300      	movs	r3, #0
}
2000368e:	4618      	mov	r0, r3
20003690:	3718      	adds	r7, #24
20003692:	46bd      	mov	sp, r7
20003694:	bd80      	pop	{r7, pc}
20003696:	bf00      	nop
20003698:	20009534 	.word	0x20009534
2000369c:	165e9f81 	.word	0x165e9f81

200036a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
200036a0:	b580      	push	{r7, lr}
200036a2:	b082      	sub	sp, #8
200036a4:	af00      	add	r7, sp, #0
200036a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
200036a8:	687b      	ldr	r3, [r7, #4]
200036aa:	2b00      	cmp	r3, #0
200036ac:	d101      	bne.n	200036b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
200036ae:	2301      	movs	r3, #1
200036b0:	e041      	b.n	20003736 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
200036b2:	687b      	ldr	r3, [r7, #4]
200036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
200036b8:	b2db      	uxtb	r3, r3
200036ba:	2b00      	cmp	r3, #0
200036bc:	d106      	bne.n	200036cc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
200036be:	687b      	ldr	r3, [r7, #4]
200036c0:	2200      	movs	r2, #0
200036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
200036c6:	6878      	ldr	r0, [r7, #4]
200036c8:	f7fe fafe 	bl	20001cc8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
200036cc:	687b      	ldr	r3, [r7, #4]
200036ce:	2202      	movs	r2, #2
200036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
200036d4:	687b      	ldr	r3, [r7, #4]
200036d6:	681a      	ldr	r2, [r3, #0]
200036d8:	687b      	ldr	r3, [r7, #4]
200036da:	3304      	adds	r3, #4
200036dc:	4619      	mov	r1, r3
200036de:	4610      	mov	r0, r2
200036e0:	f000 f88a 	bl	200037f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
200036e4:	687b      	ldr	r3, [r7, #4]
200036e6:	2201      	movs	r2, #1
200036e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
200036ec:	687b      	ldr	r3, [r7, #4]
200036ee:	2201      	movs	r2, #1
200036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
200036f4:	687b      	ldr	r3, [r7, #4]
200036f6:	2201      	movs	r2, #1
200036f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
200036fc:	687b      	ldr	r3, [r7, #4]
200036fe:	2201      	movs	r2, #1
20003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
20003704:	687b      	ldr	r3, [r7, #4]
20003706:	2201      	movs	r2, #1
20003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
2000370c:	687b      	ldr	r3, [r7, #4]
2000370e:	2201      	movs	r2, #1
20003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
20003714:	687b      	ldr	r3, [r7, #4]
20003716:	2201      	movs	r2, #1
20003718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
2000371c:	687b      	ldr	r3, [r7, #4]
2000371e:	2201      	movs	r2, #1
20003720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20003724:	687b      	ldr	r3, [r7, #4]
20003726:	2201      	movs	r2, #1
20003728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
2000372c:	687b      	ldr	r3, [r7, #4]
2000372e:	2201      	movs	r2, #1
20003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
20003734:	2300      	movs	r3, #0
}
20003736:	4618      	mov	r0, r3
20003738:	3708      	adds	r7, #8
2000373a:	46bd      	mov	sp, r7
2000373c:	bd80      	pop	{r7, pc}
	...

20003740 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
20003740:	b580      	push	{r7, lr}
20003742:	b086      	sub	sp, #24
20003744:	af00      	add	r7, sp, #0
20003746:	60f8      	str	r0, [r7, #12]
20003748:	60b9      	str	r1, [r7, #8]
2000374a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2000374c:	2300      	movs	r3, #0
2000374e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
20003750:	68fb      	ldr	r3, [r7, #12]
20003752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20003756:	2b01      	cmp	r3, #1
20003758:	d101      	bne.n	2000375e <HAL_TIM_OC_ConfigChannel+0x1e>
2000375a:	2302      	movs	r3, #2
2000375c:	e048      	b.n	200037f0 <HAL_TIM_OC_ConfigChannel+0xb0>
2000375e:	68fb      	ldr	r3, [r7, #12]
20003760:	2201      	movs	r2, #1
20003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
20003766:	687b      	ldr	r3, [r7, #4]
20003768:	2b0c      	cmp	r3, #12
2000376a:	d839      	bhi.n	200037e0 <HAL_TIM_OC_ConfigChannel+0xa0>
2000376c:	a201      	add	r2, pc, #4	; (adr r2, 20003774 <HAL_TIM_OC_ConfigChannel+0x34>)
2000376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003772:	bf00      	nop
20003774:	200037a9 	.word	0x200037a9
20003778:	200037e1 	.word	0x200037e1
2000377c:	200037e1 	.word	0x200037e1
20003780:	200037e1 	.word	0x200037e1
20003784:	200037b7 	.word	0x200037b7
20003788:	200037e1 	.word	0x200037e1
2000378c:	200037e1 	.word	0x200037e1
20003790:	200037e1 	.word	0x200037e1
20003794:	200037c5 	.word	0x200037c5
20003798:	200037e1 	.word	0x200037e1
2000379c:	200037e1 	.word	0x200037e1
200037a0:	200037e1 	.word	0x200037e1
200037a4:	200037d3 	.word	0x200037d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
200037a8:	68fb      	ldr	r3, [r7, #12]
200037aa:	681b      	ldr	r3, [r3, #0]
200037ac:	68b9      	ldr	r1, [r7, #8]
200037ae:	4618      	mov	r0, r3
200037b0:	f000 f8a2 	bl	200038f8 <TIM_OC1_SetConfig>
      break;
200037b4:	e017      	b.n	200037e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
200037b6:	68fb      	ldr	r3, [r7, #12]
200037b8:	681b      	ldr	r3, [r3, #0]
200037ba:	68b9      	ldr	r1, [r7, #8]
200037bc:	4618      	mov	r0, r3
200037be:	f000 f901 	bl	200039c4 <TIM_OC2_SetConfig>
      break;
200037c2:	e010      	b.n	200037e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
200037c4:	68fb      	ldr	r3, [r7, #12]
200037c6:	681b      	ldr	r3, [r3, #0]
200037c8:	68b9      	ldr	r1, [r7, #8]
200037ca:	4618      	mov	r0, r3
200037cc:	f000 f966 	bl	20003a9c <TIM_OC3_SetConfig>
      break;
200037d0:	e009      	b.n	200037e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
200037d2:	68fb      	ldr	r3, [r7, #12]
200037d4:	681b      	ldr	r3, [r3, #0]
200037d6:	68b9      	ldr	r1, [r7, #8]
200037d8:	4618      	mov	r0, r3
200037da:	f000 f9c9 	bl	20003b70 <TIM_OC4_SetConfig>
      break;
200037de:	e002      	b.n	200037e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
200037e0:	2301      	movs	r3, #1
200037e2:	75fb      	strb	r3, [r7, #23]
      break;
200037e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
200037e6:	68fb      	ldr	r3, [r7, #12]
200037e8:	2200      	movs	r2, #0
200037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
200037ee:	7dfb      	ldrb	r3, [r7, #23]
}
200037f0:	4618      	mov	r0, r3
200037f2:	3718      	adds	r7, #24
200037f4:	46bd      	mov	sp, r7
200037f6:	bd80      	pop	{r7, pc}

200037f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
200037f8:	b480      	push	{r7}
200037fa:	b085      	sub	sp, #20
200037fc:	af00      	add	r7, sp, #0
200037fe:	6078      	str	r0, [r7, #4]
20003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
20003802:	687b      	ldr	r3, [r7, #4]
20003804:	681b      	ldr	r3, [r3, #0]
20003806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
20003808:	687b      	ldr	r3, [r7, #4]
2000380a:	4a34      	ldr	r2, [pc, #208]	; (200038dc <TIM_Base_SetConfig+0xe4>)
2000380c:	4293      	cmp	r3, r2
2000380e:	d00f      	beq.n	20003830 <TIM_Base_SetConfig+0x38>
20003810:	687b      	ldr	r3, [r7, #4]
20003812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20003816:	d00b      	beq.n	20003830 <TIM_Base_SetConfig+0x38>
20003818:	687b      	ldr	r3, [r7, #4]
2000381a:	4a31      	ldr	r2, [pc, #196]	; (200038e0 <TIM_Base_SetConfig+0xe8>)
2000381c:	4293      	cmp	r3, r2
2000381e:	d007      	beq.n	20003830 <TIM_Base_SetConfig+0x38>
20003820:	687b      	ldr	r3, [r7, #4]
20003822:	4a30      	ldr	r2, [pc, #192]	; (200038e4 <TIM_Base_SetConfig+0xec>)
20003824:	4293      	cmp	r3, r2
20003826:	d003      	beq.n	20003830 <TIM_Base_SetConfig+0x38>
20003828:	687b      	ldr	r3, [r7, #4]
2000382a:	4a2f      	ldr	r2, [pc, #188]	; (200038e8 <TIM_Base_SetConfig+0xf0>)
2000382c:	4293      	cmp	r3, r2
2000382e:	d108      	bne.n	20003842 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
20003830:	68fb      	ldr	r3, [r7, #12]
20003832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
20003836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
20003838:	683b      	ldr	r3, [r7, #0]
2000383a:	685b      	ldr	r3, [r3, #4]
2000383c:	68fa      	ldr	r2, [r7, #12]
2000383e:	4313      	orrs	r3, r2
20003840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
20003842:	687b      	ldr	r3, [r7, #4]
20003844:	4a25      	ldr	r2, [pc, #148]	; (200038dc <TIM_Base_SetConfig+0xe4>)
20003846:	4293      	cmp	r3, r2
20003848:	d01b      	beq.n	20003882 <TIM_Base_SetConfig+0x8a>
2000384a:	687b      	ldr	r3, [r7, #4]
2000384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20003850:	d017      	beq.n	20003882 <TIM_Base_SetConfig+0x8a>
20003852:	687b      	ldr	r3, [r7, #4]
20003854:	4a22      	ldr	r2, [pc, #136]	; (200038e0 <TIM_Base_SetConfig+0xe8>)
20003856:	4293      	cmp	r3, r2
20003858:	d013      	beq.n	20003882 <TIM_Base_SetConfig+0x8a>
2000385a:	687b      	ldr	r3, [r7, #4]
2000385c:	4a21      	ldr	r2, [pc, #132]	; (200038e4 <TIM_Base_SetConfig+0xec>)
2000385e:	4293      	cmp	r3, r2
20003860:	d00f      	beq.n	20003882 <TIM_Base_SetConfig+0x8a>
20003862:	687b      	ldr	r3, [r7, #4]
20003864:	4a20      	ldr	r2, [pc, #128]	; (200038e8 <TIM_Base_SetConfig+0xf0>)
20003866:	4293      	cmp	r3, r2
20003868:	d00b      	beq.n	20003882 <TIM_Base_SetConfig+0x8a>
2000386a:	687b      	ldr	r3, [r7, #4]
2000386c:	4a1f      	ldr	r2, [pc, #124]	; (200038ec <TIM_Base_SetConfig+0xf4>)
2000386e:	4293      	cmp	r3, r2
20003870:	d007      	beq.n	20003882 <TIM_Base_SetConfig+0x8a>
20003872:	687b      	ldr	r3, [r7, #4]
20003874:	4a1e      	ldr	r2, [pc, #120]	; (200038f0 <TIM_Base_SetConfig+0xf8>)
20003876:	4293      	cmp	r3, r2
20003878:	d003      	beq.n	20003882 <TIM_Base_SetConfig+0x8a>
2000387a:	687b      	ldr	r3, [r7, #4]
2000387c:	4a1d      	ldr	r2, [pc, #116]	; (200038f4 <TIM_Base_SetConfig+0xfc>)
2000387e:	4293      	cmp	r3, r2
20003880:	d108      	bne.n	20003894 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
20003882:	68fb      	ldr	r3, [r7, #12]
20003884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20003888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
2000388a:	683b      	ldr	r3, [r7, #0]
2000388c:	68db      	ldr	r3, [r3, #12]
2000388e:	68fa      	ldr	r2, [r7, #12]
20003890:	4313      	orrs	r3, r2
20003892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
20003894:	68fb      	ldr	r3, [r7, #12]
20003896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
2000389a:	683b      	ldr	r3, [r7, #0]
2000389c:	695b      	ldr	r3, [r3, #20]
2000389e:	4313      	orrs	r3, r2
200038a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
200038a2:	687b      	ldr	r3, [r7, #4]
200038a4:	68fa      	ldr	r2, [r7, #12]
200038a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
200038a8:	683b      	ldr	r3, [r7, #0]
200038aa:	689a      	ldr	r2, [r3, #8]
200038ac:	687b      	ldr	r3, [r7, #4]
200038ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
200038b0:	683b      	ldr	r3, [r7, #0]
200038b2:	681a      	ldr	r2, [r3, #0]
200038b4:	687b      	ldr	r3, [r7, #4]
200038b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
200038b8:	687b      	ldr	r3, [r7, #4]
200038ba:	4a08      	ldr	r2, [pc, #32]	; (200038dc <TIM_Base_SetConfig+0xe4>)
200038bc:	4293      	cmp	r3, r2
200038be:	d103      	bne.n	200038c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
200038c0:	683b      	ldr	r3, [r7, #0]
200038c2:	691a      	ldr	r2, [r3, #16]
200038c4:	687b      	ldr	r3, [r7, #4]
200038c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
200038c8:	687b      	ldr	r3, [r7, #4]
200038ca:	2201      	movs	r2, #1
200038cc:	615a      	str	r2, [r3, #20]
}
200038ce:	bf00      	nop
200038d0:	3714      	adds	r7, #20
200038d2:	46bd      	mov	sp, r7
200038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200038d8:	4770      	bx	lr
200038da:	bf00      	nop
200038dc:	40010000 	.word	0x40010000
200038e0:	40000400 	.word	0x40000400
200038e4:	40000800 	.word	0x40000800
200038e8:	40000c00 	.word	0x40000c00
200038ec:	40014000 	.word	0x40014000
200038f0:	40014400 	.word	0x40014400
200038f4:	40014800 	.word	0x40014800

200038f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
200038f8:	b480      	push	{r7}
200038fa:	b087      	sub	sp, #28
200038fc:	af00      	add	r7, sp, #0
200038fe:	6078      	str	r0, [r7, #4]
20003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
20003902:	687b      	ldr	r3, [r7, #4]
20003904:	6a1b      	ldr	r3, [r3, #32]
20003906:	f023 0201 	bic.w	r2, r3, #1
2000390a:	687b      	ldr	r3, [r7, #4]
2000390c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
2000390e:	687b      	ldr	r3, [r7, #4]
20003910:	6a1b      	ldr	r3, [r3, #32]
20003912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20003914:	687b      	ldr	r3, [r7, #4]
20003916:	685b      	ldr	r3, [r3, #4]
20003918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
2000391a:	687b      	ldr	r3, [r7, #4]
2000391c:	699b      	ldr	r3, [r3, #24]
2000391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
20003920:	68fb      	ldr	r3, [r7, #12]
20003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
20003926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
20003928:	68fb      	ldr	r3, [r7, #12]
2000392a:	f023 0303 	bic.w	r3, r3, #3
2000392e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
20003930:	683b      	ldr	r3, [r7, #0]
20003932:	681b      	ldr	r3, [r3, #0]
20003934:	68fa      	ldr	r2, [r7, #12]
20003936:	4313      	orrs	r3, r2
20003938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
2000393a:	697b      	ldr	r3, [r7, #20]
2000393c:	f023 0302 	bic.w	r3, r3, #2
20003940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
20003942:	683b      	ldr	r3, [r7, #0]
20003944:	689b      	ldr	r3, [r3, #8]
20003946:	697a      	ldr	r2, [r7, #20]
20003948:	4313      	orrs	r3, r2
2000394a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
2000394c:	687b      	ldr	r3, [r7, #4]
2000394e:	4a1c      	ldr	r2, [pc, #112]	; (200039c0 <TIM_OC1_SetConfig+0xc8>)
20003950:	4293      	cmp	r3, r2
20003952:	d10c      	bne.n	2000396e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
20003954:	697b      	ldr	r3, [r7, #20]
20003956:	f023 0308 	bic.w	r3, r3, #8
2000395a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
2000395c:	683b      	ldr	r3, [r7, #0]
2000395e:	68db      	ldr	r3, [r3, #12]
20003960:	697a      	ldr	r2, [r7, #20]
20003962:	4313      	orrs	r3, r2
20003964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
20003966:	697b      	ldr	r3, [r7, #20]
20003968:	f023 0304 	bic.w	r3, r3, #4
2000396c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
2000396e:	687b      	ldr	r3, [r7, #4]
20003970:	4a13      	ldr	r2, [pc, #76]	; (200039c0 <TIM_OC1_SetConfig+0xc8>)
20003972:	4293      	cmp	r3, r2
20003974:	d111      	bne.n	2000399a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
20003976:	693b      	ldr	r3, [r7, #16]
20003978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2000397c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
2000397e:	693b      	ldr	r3, [r7, #16]
20003980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
20003984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
20003986:	683b      	ldr	r3, [r7, #0]
20003988:	695b      	ldr	r3, [r3, #20]
2000398a:	693a      	ldr	r2, [r7, #16]
2000398c:	4313      	orrs	r3, r2
2000398e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
20003990:	683b      	ldr	r3, [r7, #0]
20003992:	699b      	ldr	r3, [r3, #24]
20003994:	693a      	ldr	r2, [r7, #16]
20003996:	4313      	orrs	r3, r2
20003998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
2000399a:	687b      	ldr	r3, [r7, #4]
2000399c:	693a      	ldr	r2, [r7, #16]
2000399e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
200039a0:	687b      	ldr	r3, [r7, #4]
200039a2:	68fa      	ldr	r2, [r7, #12]
200039a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
200039a6:	683b      	ldr	r3, [r7, #0]
200039a8:	685a      	ldr	r2, [r3, #4]
200039aa:	687b      	ldr	r3, [r7, #4]
200039ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
200039ae:	687b      	ldr	r3, [r7, #4]
200039b0:	697a      	ldr	r2, [r7, #20]
200039b2:	621a      	str	r2, [r3, #32]
}
200039b4:	bf00      	nop
200039b6:	371c      	adds	r7, #28
200039b8:	46bd      	mov	sp, r7
200039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
200039be:	4770      	bx	lr
200039c0:	40010000 	.word	0x40010000

200039c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
200039c4:	b480      	push	{r7}
200039c6:	b087      	sub	sp, #28
200039c8:	af00      	add	r7, sp, #0
200039ca:	6078      	str	r0, [r7, #4]
200039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
200039ce:	687b      	ldr	r3, [r7, #4]
200039d0:	6a1b      	ldr	r3, [r3, #32]
200039d2:	f023 0210 	bic.w	r2, r3, #16
200039d6:	687b      	ldr	r3, [r7, #4]
200039d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
200039da:	687b      	ldr	r3, [r7, #4]
200039dc:	6a1b      	ldr	r3, [r3, #32]
200039de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
200039e0:	687b      	ldr	r3, [r7, #4]
200039e2:	685b      	ldr	r3, [r3, #4]
200039e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
200039e6:	687b      	ldr	r3, [r7, #4]
200039e8:	699b      	ldr	r3, [r3, #24]
200039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
200039ec:	68fb      	ldr	r3, [r7, #12]
200039ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
200039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
200039f4:	68fb      	ldr	r3, [r7, #12]
200039f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
200039fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
200039fc:	683b      	ldr	r3, [r7, #0]
200039fe:	681b      	ldr	r3, [r3, #0]
20003a00:	021b      	lsls	r3, r3, #8
20003a02:	68fa      	ldr	r2, [r7, #12]
20003a04:	4313      	orrs	r3, r2
20003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
20003a08:	697b      	ldr	r3, [r7, #20]
20003a0a:	f023 0320 	bic.w	r3, r3, #32
20003a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
20003a10:	683b      	ldr	r3, [r7, #0]
20003a12:	689b      	ldr	r3, [r3, #8]
20003a14:	011b      	lsls	r3, r3, #4
20003a16:	697a      	ldr	r2, [r7, #20]
20003a18:	4313      	orrs	r3, r2
20003a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
20003a1c:	687b      	ldr	r3, [r7, #4]
20003a1e:	4a1e      	ldr	r2, [pc, #120]	; (20003a98 <TIM_OC2_SetConfig+0xd4>)
20003a20:	4293      	cmp	r3, r2
20003a22:	d10d      	bne.n	20003a40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
20003a24:	697b      	ldr	r3, [r7, #20]
20003a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
20003a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
20003a2c:	683b      	ldr	r3, [r7, #0]
20003a2e:	68db      	ldr	r3, [r3, #12]
20003a30:	011b      	lsls	r3, r3, #4
20003a32:	697a      	ldr	r2, [r7, #20]
20003a34:	4313      	orrs	r3, r2
20003a36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
20003a38:	697b      	ldr	r3, [r7, #20]
20003a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
20003a3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
20003a40:	687b      	ldr	r3, [r7, #4]
20003a42:	4a15      	ldr	r2, [pc, #84]	; (20003a98 <TIM_OC2_SetConfig+0xd4>)
20003a44:	4293      	cmp	r3, r2
20003a46:	d113      	bne.n	20003a70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
20003a48:	693b      	ldr	r3, [r7, #16]
20003a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
20003a4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
20003a50:	693b      	ldr	r3, [r7, #16]
20003a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
20003a56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
20003a58:	683b      	ldr	r3, [r7, #0]
20003a5a:	695b      	ldr	r3, [r3, #20]
20003a5c:	009b      	lsls	r3, r3, #2
20003a5e:	693a      	ldr	r2, [r7, #16]
20003a60:	4313      	orrs	r3, r2
20003a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
20003a64:	683b      	ldr	r3, [r7, #0]
20003a66:	699b      	ldr	r3, [r3, #24]
20003a68:	009b      	lsls	r3, r3, #2
20003a6a:	693a      	ldr	r2, [r7, #16]
20003a6c:	4313      	orrs	r3, r2
20003a6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20003a70:	687b      	ldr	r3, [r7, #4]
20003a72:	693a      	ldr	r2, [r7, #16]
20003a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
20003a76:	687b      	ldr	r3, [r7, #4]
20003a78:	68fa      	ldr	r2, [r7, #12]
20003a7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
20003a7c:	683b      	ldr	r3, [r7, #0]
20003a7e:	685a      	ldr	r2, [r3, #4]
20003a80:	687b      	ldr	r3, [r7, #4]
20003a82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20003a84:	687b      	ldr	r3, [r7, #4]
20003a86:	697a      	ldr	r2, [r7, #20]
20003a88:	621a      	str	r2, [r3, #32]
}
20003a8a:	bf00      	nop
20003a8c:	371c      	adds	r7, #28
20003a8e:	46bd      	mov	sp, r7
20003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
20003a94:	4770      	bx	lr
20003a96:	bf00      	nop
20003a98:	40010000 	.word	0x40010000

20003a9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
20003a9c:	b480      	push	{r7}
20003a9e:	b087      	sub	sp, #28
20003aa0:	af00      	add	r7, sp, #0
20003aa2:	6078      	str	r0, [r7, #4]
20003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
20003aa6:	687b      	ldr	r3, [r7, #4]
20003aa8:	6a1b      	ldr	r3, [r3, #32]
20003aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
20003aae:	687b      	ldr	r3, [r7, #4]
20003ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20003ab2:	687b      	ldr	r3, [r7, #4]
20003ab4:	6a1b      	ldr	r3, [r3, #32]
20003ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20003ab8:	687b      	ldr	r3, [r7, #4]
20003aba:	685b      	ldr	r3, [r3, #4]
20003abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
20003abe:	687b      	ldr	r3, [r7, #4]
20003ac0:	69db      	ldr	r3, [r3, #28]
20003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
20003ac4:	68fb      	ldr	r3, [r7, #12]
20003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
20003aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
20003acc:	68fb      	ldr	r3, [r7, #12]
20003ace:	f023 0303 	bic.w	r3, r3, #3
20003ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
20003ad4:	683b      	ldr	r3, [r7, #0]
20003ad6:	681b      	ldr	r3, [r3, #0]
20003ad8:	68fa      	ldr	r2, [r7, #12]
20003ada:	4313      	orrs	r3, r2
20003adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
20003ade:	697b      	ldr	r3, [r7, #20]
20003ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
20003ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
20003ae6:	683b      	ldr	r3, [r7, #0]
20003ae8:	689b      	ldr	r3, [r3, #8]
20003aea:	021b      	lsls	r3, r3, #8
20003aec:	697a      	ldr	r2, [r7, #20]
20003aee:	4313      	orrs	r3, r2
20003af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
20003af2:	687b      	ldr	r3, [r7, #4]
20003af4:	4a1d      	ldr	r2, [pc, #116]	; (20003b6c <TIM_OC3_SetConfig+0xd0>)
20003af6:	4293      	cmp	r3, r2
20003af8:	d10d      	bne.n	20003b16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
20003afa:	697b      	ldr	r3, [r7, #20]
20003afc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
20003b00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
20003b02:	683b      	ldr	r3, [r7, #0]
20003b04:	68db      	ldr	r3, [r3, #12]
20003b06:	021b      	lsls	r3, r3, #8
20003b08:	697a      	ldr	r2, [r7, #20]
20003b0a:	4313      	orrs	r3, r2
20003b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
20003b0e:	697b      	ldr	r3, [r7, #20]
20003b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
20003b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
20003b16:	687b      	ldr	r3, [r7, #4]
20003b18:	4a14      	ldr	r2, [pc, #80]	; (20003b6c <TIM_OC3_SetConfig+0xd0>)
20003b1a:	4293      	cmp	r3, r2
20003b1c:	d113      	bne.n	20003b46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
20003b1e:	693b      	ldr	r3, [r7, #16]
20003b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
20003b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
20003b26:	693b      	ldr	r3, [r7, #16]
20003b28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
20003b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
20003b2e:	683b      	ldr	r3, [r7, #0]
20003b30:	695b      	ldr	r3, [r3, #20]
20003b32:	011b      	lsls	r3, r3, #4
20003b34:	693a      	ldr	r2, [r7, #16]
20003b36:	4313      	orrs	r3, r2
20003b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
20003b3a:	683b      	ldr	r3, [r7, #0]
20003b3c:	699b      	ldr	r3, [r3, #24]
20003b3e:	011b      	lsls	r3, r3, #4
20003b40:	693a      	ldr	r2, [r7, #16]
20003b42:	4313      	orrs	r3, r2
20003b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20003b46:	687b      	ldr	r3, [r7, #4]
20003b48:	693a      	ldr	r2, [r7, #16]
20003b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
20003b4c:	687b      	ldr	r3, [r7, #4]
20003b4e:	68fa      	ldr	r2, [r7, #12]
20003b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
20003b52:	683b      	ldr	r3, [r7, #0]
20003b54:	685a      	ldr	r2, [r3, #4]
20003b56:	687b      	ldr	r3, [r7, #4]
20003b58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20003b5a:	687b      	ldr	r3, [r7, #4]
20003b5c:	697a      	ldr	r2, [r7, #20]
20003b5e:	621a      	str	r2, [r3, #32]
}
20003b60:	bf00      	nop
20003b62:	371c      	adds	r7, #28
20003b64:	46bd      	mov	sp, r7
20003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
20003b6a:	4770      	bx	lr
20003b6c:	40010000 	.word	0x40010000

20003b70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
20003b70:	b480      	push	{r7}
20003b72:	b087      	sub	sp, #28
20003b74:	af00      	add	r7, sp, #0
20003b76:	6078      	str	r0, [r7, #4]
20003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
20003b7a:	687b      	ldr	r3, [r7, #4]
20003b7c:	6a1b      	ldr	r3, [r3, #32]
20003b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
20003b82:	687b      	ldr	r3, [r7, #4]
20003b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20003b86:	687b      	ldr	r3, [r7, #4]
20003b88:	6a1b      	ldr	r3, [r3, #32]
20003b8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20003b8c:	687b      	ldr	r3, [r7, #4]
20003b8e:	685b      	ldr	r3, [r3, #4]
20003b90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
20003b92:	687b      	ldr	r3, [r7, #4]
20003b94:	69db      	ldr	r3, [r3, #28]
20003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
20003b98:	68fb      	ldr	r3, [r7, #12]
20003b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
20003b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
20003ba0:	68fb      	ldr	r3, [r7, #12]
20003ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20003ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
20003ba8:	683b      	ldr	r3, [r7, #0]
20003baa:	681b      	ldr	r3, [r3, #0]
20003bac:	021b      	lsls	r3, r3, #8
20003bae:	68fa      	ldr	r2, [r7, #12]
20003bb0:	4313      	orrs	r3, r2
20003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
20003bb4:	693b      	ldr	r3, [r7, #16]
20003bb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
20003bba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
20003bbc:	683b      	ldr	r3, [r7, #0]
20003bbe:	689b      	ldr	r3, [r3, #8]
20003bc0:	031b      	lsls	r3, r3, #12
20003bc2:	693a      	ldr	r2, [r7, #16]
20003bc4:	4313      	orrs	r3, r2
20003bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
20003bc8:	687b      	ldr	r3, [r7, #4]
20003bca:	4a10      	ldr	r2, [pc, #64]	; (20003c0c <TIM_OC4_SetConfig+0x9c>)
20003bcc:	4293      	cmp	r3, r2
20003bce:	d109      	bne.n	20003be4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
20003bd0:	697b      	ldr	r3, [r7, #20]
20003bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
20003bd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
20003bd8:	683b      	ldr	r3, [r7, #0]
20003bda:	695b      	ldr	r3, [r3, #20]
20003bdc:	019b      	lsls	r3, r3, #6
20003bde:	697a      	ldr	r2, [r7, #20]
20003be0:	4313      	orrs	r3, r2
20003be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20003be4:	687b      	ldr	r3, [r7, #4]
20003be6:	697a      	ldr	r2, [r7, #20]
20003be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
20003bea:	687b      	ldr	r3, [r7, #4]
20003bec:	68fa      	ldr	r2, [r7, #12]
20003bee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
20003bf0:	683b      	ldr	r3, [r7, #0]
20003bf2:	685a      	ldr	r2, [r3, #4]
20003bf4:	687b      	ldr	r3, [r7, #4]
20003bf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20003bf8:	687b      	ldr	r3, [r7, #4]
20003bfa:	693a      	ldr	r2, [r7, #16]
20003bfc:	621a      	str	r2, [r3, #32]
}
20003bfe:	bf00      	nop
20003c00:	371c      	adds	r7, #28
20003c02:	46bd      	mov	sp, r7
20003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
20003c08:	4770      	bx	lr
20003c0a:	bf00      	nop
20003c0c:	40010000 	.word	0x40010000

20003c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
20003c10:	b480      	push	{r7}
20003c12:	b085      	sub	sp, #20
20003c14:	af00      	add	r7, sp, #0
20003c16:	6078      	str	r0, [r7, #4]
20003c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
20003c1a:	687b      	ldr	r3, [r7, #4]
20003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20003c20:	2b01      	cmp	r3, #1
20003c22:	d101      	bne.n	20003c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
20003c24:	2302      	movs	r3, #2
20003c26:	e050      	b.n	20003cca <HAL_TIMEx_MasterConfigSynchronization+0xba>
20003c28:	687b      	ldr	r3, [r7, #4]
20003c2a:	2201      	movs	r2, #1
20003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
20003c30:	687b      	ldr	r3, [r7, #4]
20003c32:	2202      	movs	r2, #2
20003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
20003c38:	687b      	ldr	r3, [r7, #4]
20003c3a:	681b      	ldr	r3, [r3, #0]
20003c3c:	685b      	ldr	r3, [r3, #4]
20003c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
20003c40:	687b      	ldr	r3, [r7, #4]
20003c42:	681b      	ldr	r3, [r3, #0]
20003c44:	689b      	ldr	r3, [r3, #8]
20003c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
20003c48:	68fb      	ldr	r3, [r7, #12]
20003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
20003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
20003c50:	683b      	ldr	r3, [r7, #0]
20003c52:	681b      	ldr	r3, [r3, #0]
20003c54:	68fa      	ldr	r2, [r7, #12]
20003c56:	4313      	orrs	r3, r2
20003c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
20003c5a:	687b      	ldr	r3, [r7, #4]
20003c5c:	681b      	ldr	r3, [r3, #0]
20003c5e:	68fa      	ldr	r2, [r7, #12]
20003c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
20003c62:	687b      	ldr	r3, [r7, #4]
20003c64:	681b      	ldr	r3, [r3, #0]
20003c66:	4a1c      	ldr	r2, [pc, #112]	; (20003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
20003c68:	4293      	cmp	r3, r2
20003c6a:	d018      	beq.n	20003c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20003c6c:	687b      	ldr	r3, [r7, #4]
20003c6e:	681b      	ldr	r3, [r3, #0]
20003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20003c74:	d013      	beq.n	20003c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20003c76:	687b      	ldr	r3, [r7, #4]
20003c78:	681b      	ldr	r3, [r3, #0]
20003c7a:	4a18      	ldr	r2, [pc, #96]	; (20003cdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
20003c7c:	4293      	cmp	r3, r2
20003c7e:	d00e      	beq.n	20003c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20003c80:	687b      	ldr	r3, [r7, #4]
20003c82:	681b      	ldr	r3, [r3, #0]
20003c84:	4a16      	ldr	r2, [pc, #88]	; (20003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
20003c86:	4293      	cmp	r3, r2
20003c88:	d009      	beq.n	20003c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20003c8a:	687b      	ldr	r3, [r7, #4]
20003c8c:	681b      	ldr	r3, [r3, #0]
20003c8e:	4a15      	ldr	r2, [pc, #84]	; (20003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
20003c90:	4293      	cmp	r3, r2
20003c92:	d004      	beq.n	20003c9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
20003c94:	687b      	ldr	r3, [r7, #4]
20003c96:	681b      	ldr	r3, [r3, #0]
20003c98:	4a13      	ldr	r2, [pc, #76]	; (20003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
20003c9a:	4293      	cmp	r3, r2
20003c9c:	d10c      	bne.n	20003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
20003c9e:	68bb      	ldr	r3, [r7, #8]
20003ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
20003ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
20003ca6:	683b      	ldr	r3, [r7, #0]
20003ca8:	685b      	ldr	r3, [r3, #4]
20003caa:	68ba      	ldr	r2, [r7, #8]
20003cac:	4313      	orrs	r3, r2
20003cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
20003cb0:	687b      	ldr	r3, [r7, #4]
20003cb2:	681b      	ldr	r3, [r3, #0]
20003cb4:	68ba      	ldr	r2, [r7, #8]
20003cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
20003cb8:	687b      	ldr	r3, [r7, #4]
20003cba:	2201      	movs	r2, #1
20003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
20003cc0:	687b      	ldr	r3, [r7, #4]
20003cc2:	2200      	movs	r2, #0
20003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
20003cc8:	2300      	movs	r3, #0
}
20003cca:	4618      	mov	r0, r3
20003ccc:	3714      	adds	r7, #20
20003cce:	46bd      	mov	sp, r7
20003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
20003cd4:	4770      	bx	lr
20003cd6:	bf00      	nop
20003cd8:	40010000 	.word	0x40010000
20003cdc:	40000400 	.word	0x40000400
20003ce0:	40000800 	.word	0x40000800
20003ce4:	40000c00 	.word	0x40000c00
20003ce8:	40014000 	.word	0x40014000

20003cec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
20003cec:	b480      	push	{r7}
20003cee:	b085      	sub	sp, #20
20003cf0:	af00      	add	r7, sp, #0
20003cf2:	6078      	str	r0, [r7, #4]
20003cf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
20003cf6:	2300      	movs	r3, #0
20003cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
20003cfa:	687b      	ldr	r3, [r7, #4]
20003cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20003d00:	2b01      	cmp	r3, #1
20003d02:	d101      	bne.n	20003d08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
20003d04:	2302      	movs	r3, #2
20003d06:	e03d      	b.n	20003d84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
20003d08:	687b      	ldr	r3, [r7, #4]
20003d0a:	2201      	movs	r2, #1
20003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
20003d10:	68fb      	ldr	r3, [r7, #12]
20003d12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
20003d16:	683b      	ldr	r3, [r7, #0]
20003d18:	68db      	ldr	r3, [r3, #12]
20003d1a:	4313      	orrs	r3, r2
20003d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
20003d1e:	68fb      	ldr	r3, [r7, #12]
20003d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
20003d24:	683b      	ldr	r3, [r7, #0]
20003d26:	689b      	ldr	r3, [r3, #8]
20003d28:	4313      	orrs	r3, r2
20003d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
20003d2c:	68fb      	ldr	r3, [r7, #12]
20003d2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
20003d32:	683b      	ldr	r3, [r7, #0]
20003d34:	685b      	ldr	r3, [r3, #4]
20003d36:	4313      	orrs	r3, r2
20003d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
20003d3a:	68fb      	ldr	r3, [r7, #12]
20003d3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
20003d40:	683b      	ldr	r3, [r7, #0]
20003d42:	681b      	ldr	r3, [r3, #0]
20003d44:	4313      	orrs	r3, r2
20003d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
20003d48:	68fb      	ldr	r3, [r7, #12]
20003d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
20003d4e:	683b      	ldr	r3, [r7, #0]
20003d50:	691b      	ldr	r3, [r3, #16]
20003d52:	4313      	orrs	r3, r2
20003d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
20003d56:	68fb      	ldr	r3, [r7, #12]
20003d58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
20003d5c:	683b      	ldr	r3, [r7, #0]
20003d5e:	695b      	ldr	r3, [r3, #20]
20003d60:	4313      	orrs	r3, r2
20003d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
20003d64:	68fb      	ldr	r3, [r7, #12]
20003d66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
20003d6a:	683b      	ldr	r3, [r7, #0]
20003d6c:	69db      	ldr	r3, [r3, #28]
20003d6e:	4313      	orrs	r3, r2
20003d70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
20003d72:	687b      	ldr	r3, [r7, #4]
20003d74:	681b      	ldr	r3, [r3, #0]
20003d76:	68fa      	ldr	r2, [r7, #12]
20003d78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
20003d7a:	687b      	ldr	r3, [r7, #4]
20003d7c:	2200      	movs	r2, #0
20003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
20003d82:	2300      	movs	r3, #0
}
20003d84:	4618      	mov	r0, r3
20003d86:	3714      	adds	r7, #20
20003d88:	46bd      	mov	sp, r7
20003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
20003d8e:	4770      	bx	lr

20003d90 <__libc_init_array>:
20003d90:	b570      	push	{r4, r5, r6, lr}
20003d92:	4d0d      	ldr	r5, [pc, #52]	; (20003dc8 <__libc_init_array+0x38>)
20003d94:	4c0d      	ldr	r4, [pc, #52]	; (20003dcc <__libc_init_array+0x3c>)
20003d96:	1b64      	subs	r4, r4, r5
20003d98:	10a4      	asrs	r4, r4, #2
20003d9a:	2600      	movs	r6, #0
20003d9c:	42a6      	cmp	r6, r4
20003d9e:	d109      	bne.n	20003db4 <__libc_init_array+0x24>
20003da0:	4d0b      	ldr	r5, [pc, #44]	; (20003dd0 <__libc_init_array+0x40>)
20003da2:	4c0c      	ldr	r4, [pc, #48]	; (20003dd4 <__libc_init_array+0x44>)
20003da4:	f000 f820 	bl	20003de8 <_init>
20003da8:	1b64      	subs	r4, r4, r5
20003daa:	10a4      	asrs	r4, r4, #2
20003dac:	2600      	movs	r6, #0
20003dae:	42a6      	cmp	r6, r4
20003db0:	d105      	bne.n	20003dbe <__libc_init_array+0x2e>
20003db2:	bd70      	pop	{r4, r5, r6, pc}
20003db4:	f855 3b04 	ldr.w	r3, [r5], #4
20003db8:	4798      	blx	r3
20003dba:	3601      	adds	r6, #1
20003dbc:	e7ee      	b.n	20003d9c <__libc_init_array+0xc>
20003dbe:	f855 3b04 	ldr.w	r3, [r5], #4
20003dc2:	4798      	blx	r3
20003dc4:	3601      	adds	r6, #1
20003dc6:	e7f2      	b.n	20003dae <__libc_init_array+0x1e>
20003dc8:	2000951c 	.word	0x2000951c
20003dcc:	2000951c 	.word	0x2000951c
20003dd0:	2000951c 	.word	0x2000951c
20003dd4:	20009520 	.word	0x20009520

20003dd8 <memset>:
20003dd8:	4402      	add	r2, r0
20003dda:	4603      	mov	r3, r0
20003ddc:	4293      	cmp	r3, r2
20003dde:	d100      	bne.n	20003de2 <memset+0xa>
20003de0:	4770      	bx	lr
20003de2:	f803 1b01 	strb.w	r1, [r3], #1
20003de6:	e7f9      	b.n	20003ddc <memset+0x4>

20003de8 <_init>:
20003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003dea:	bf00      	nop
20003dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003dee:	bc08      	pop	{r3}
20003df0:	469e      	mov	lr, r3
20003df2:	4770      	bx	lr

20003df4 <_fini>:
20003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003df6:	bf00      	nop
20003df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003dfa:	bc08      	pop	{r3}
20003dfc:	469e      	mov	lr, r3
20003dfe:	4770      	bx	lr
